(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-27 02:52:45
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort PyType 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const MyException<PyType> PyType)
(declare-const MyException2<PyType> PyType)
(declare-const Container<PyType> PyType)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; Declaring symbols related to program functions (from program analysis)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___ge__ ($Snap Int Int) Bool)
(declare-fun int___ge__%limited ($Snap Int Int) Bool)
(declare-fun int___ge__%stateless (Int Int) Bool)
(declare-fun int___ge__%precondition ($Snap Int Int) Bool)
(declare-fun int___lt__ ($Snap Int Int) Bool)
(declare-fun int___lt__%limited ($Snap Int Int) Bool)
(declare-fun int___lt__%stateless (Int Int) Bool)
(declare-fun int___lt__%precondition ($Snap Int Int) Bool)
(declare-fun int___gt__ ($Snap Int Int) Bool)
(declare-fun int___gt__%limited ($Snap Int Int) Bool)
(declare-fun int___gt__%stateless (Int Int) Bool)
(declare-fun int___gt__%precondition ($Snap Int Int) Bool)
(declare-fun int___mul__ ($Snap Int Int) Int)
(declare-fun int___mul__%limited ($Snap Int Int) Int)
(declare-fun int___mul__%stateless (Int Int) Bool)
(declare-fun int___mul__%precondition ($Snap Int Int) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun int___add__%precondition ($Snap Int Int) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
(declare-fun int___mod__ ($Snap Int Int) Int)
(declare-fun int___mod__%limited ($Snap Int Int) Int)
(declare-fun int___mod__%stateless (Int Int) Bool)
(declare-fun int___mod__%precondition ($Snap Int Int) Bool)
(declare-fun int___le__ ($Snap Int Int) Bool)
(declare-fun int___le__%limited ($Snap Int Int) Bool)
(declare-fun int___le__%stateless (Int Int) Bool)
(declare-fun int___le__%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustTerminate_0%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded_0%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded_0%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
(declare-fun _MaySet_0%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> traceback<PyType> dict_basic<PyType> type<PyType> MyException2<PyType> ConnectionRefusedError<PyType> py_range<PyType> int<PyType> Container<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> MyException<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as MyException<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as MyException<PyType>  PyType))
    (as MyException<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as MyException2<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as MyException2<PyType>  PyType))
    (as MyException2<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Container<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Container<PyType>  PyType))
    (as Container<PyType>  PyType))))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (str___val__%limited s@$ self@0@00) (str___val__ s@$ self@0@00))
  :pattern ((str___val__ s@$ self@0@00))
  :qid |quant-u-3969|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (str___val__%stateless self@0@00)
  :pattern ((str___val__%limited s@$ self@0@00))
  :qid |quant-u-3970|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___len__%limited s@$ self@2@00) (str___len__ s@$ self@2@00))
  :pattern ((str___len__ s@$ self@2@00))
  :qid |quant-u-3971|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___len__%stateless self@2@00)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-3972|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) (=>
    (str___len__%precondition s@$ self@2@00)
    (>= result@3@00 0)))
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-4011|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) true)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-4012|)))
(assert (forall ((s@$ $Snap) (id@4@00 Int)) (!
  (= (_isDefined%limited s@$ id@4@00) (_isDefined s@$ id@4@00))
  :pattern ((_isDefined s@$ id@4@00))
  :qid |quant-u-3973|)))
(assert (forall ((s@$ $Snap) (id@4@00 Int)) (!
  (_isDefined%stateless id@4@00)
  :pattern ((_isDefined%limited s@$ id@4@00))
  :qid |quant-u-3974|)))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@6@00) (bool___unbox__ s@$ box@6@00))
  :pattern ((bool___unbox__ s@$ box@6@00))
  :qid |quant-u-3975|)))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (bool___unbox__%stateless box@6@00)
  :pattern ((bool___unbox__%limited s@$ box@6@00))
  :qid |quant-u-3976|)))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (let ((result@7@00 (bool___unbox__%limited s@$ box@6@00))) (=>
    (bool___unbox__%precondition s@$ box@6@00)
    (= (__prim__bool___box__%limited $Snap.unit result@7@00) box@6@00)))
  :pattern ((bool___unbox__%limited s@$ box@6@00))
  :qid |quant-u-4013|)))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (let ((result@7@00 (bool___unbox__%limited s@$ box@6@00))) (=>
    (bool___unbox__%precondition s@$ box@6@00)
    (__prim__bool___box__%precondition $Snap.unit result@7@00)))
  :pattern ((bool___unbox__%limited s@$ box@6@00))
  :qid |quant-u-4014|)))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@8@00)
    (__prim__bool___box__ s@$ prim@8@00))
  :pattern ((__prim__bool___box__ s@$ prim@8@00))
  :qid |quant-u-3977|)))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (__prim__bool___box__%stateless prim@8@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  :qid |quant-u-3978|)))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (let ((result@9@00 (__prim__bool___box__%limited s@$ prim@8@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@8@00)
    (and
      (= (typeof<PyType> result@9@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@9@00) prim@8@00)
      (= (int___unbox__%limited $Snap.unit result@9@00) (ite prim@8@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  :qid |quant-u-4015|)))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (let ((result@9@00 (__prim__bool___box__%limited s@$ prim@8@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  :qid |quant-u-4016|)))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (let ((result@9@00 (__prim__bool___box__%limited s@$ prim@8@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@8@00)
    (bool___unbox__%precondition $Snap.unit result@9@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  :qid |quant-u-4017|)))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (let ((result@9@00 (__prim__bool___box__%limited s@$ prim@8@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@8@00)
    (int___unbox__%precondition $Snap.unit result@9@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  :qid |quant-u-4018|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@10@00) (int___unbox__ s@$ box@10@00))
  :pattern ((int___unbox__ s@$ box@10@00))
  :qid |quant-u-3979|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (int___unbox__%stateless box@10@00)
  :pattern ((int___unbox__%limited s@$ box@10@00))
  :qid |quant-u-3980|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (int___unbox__%limited s@$ box@10@00))) (=>
    (int___unbox__%precondition s@$ box@10@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@11@00) box@10@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@11@00 0)))
          box@10@00)))))
  :pattern ((int___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4019|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (int___unbox__%limited s@$ box@10@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@10@00)
      (not
        (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@11@00)))
  :pattern ((int___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4020|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (int___unbox__%limited s@$ box@10@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@10@00)
      (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@11@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4021|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@12@00)
    (__prim__int___box__ s@$ prim@12@00))
  :pattern ((__prim__int___box__ s@$ prim@12@00))
  :qid |quant-u-3981|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (__prim__int___box__%stateless prim@12@00)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-3982|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (=>
    (__prim__int___box__%precondition s@$ prim@12@00)
    (and
      (= (typeof<PyType> result@13@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@13@00) prim@12@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4022|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4023|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (=>
    (__prim__int___box__%precondition s@$ prim@12@00)
    (int___unbox__%precondition $Snap.unit result@13@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4024|)))
(assert (forall ((s@$ $Snap) (r@14@00 $Ref)) (!
  (= (Level%limited s@$ r@14@00) (Level s@$ r@14@00))
  :pattern ((Level s@$ r@14@00))
  :qid |quant-u-3983|)))
(assert (forall ((s@$ $Snap) (r@14@00 $Ref)) (!
  (Level%stateless r@14@00)
  :pattern ((Level%limited s@$ r@14@00))
  :qid |quant-u-3984|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (=
    (str___create__%limited s@$ len@16@00 value@17@00)
    (str___create__ s@$ len@16@00 value@17@00))
  :pattern ((str___create__ s@$ len@16@00 value@17@00))
  :qid |quant-u-3985|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (str___create__%stateless len@16@00 value@17@00)
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-3986|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) (=>
    (str___create__%precondition s@$ len@16@00 value@17@00)
    (and
      (= (str___len__ $Snap.unit result@18@00) len@16@00)
      (= (str___val__ $Snap.unit result@18@00) value@17@00)
      (= (typeof<PyType> result@18@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-4025|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) (=>
    (str___create__%precondition s@$ len@16@00 value@17@00)
    (str___len__%precondition $Snap.unit result@18@00)))
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-4026|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) (=>
    (str___create__%precondition s@$ len@16@00 value@17@00)
    (str___val__%precondition $Snap.unit result@18@00)))
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-4027|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) true)
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-4028|)))
(assert (forall ((s@$ $Snap) (self@19@00 $Ref) (other@20@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@19@00 other@20@00)
    (str___eq__ s@$ self@19@00 other@20@00))
  :pattern ((str___eq__ s@$ self@19@00 other@20@00))
  :qid |quant-u-3987|)))
(assert (forall ((s@$ $Snap) (self@19@00 $Ref) (other@20@00 $Ref)) (!
  (str___eq__%stateless self@19@00 other@20@00)
  :pattern ((str___eq__%limited s@$ self@19@00 other@20@00))
  :qid |quant-u-3988|)))
(assert (forall ((s@$ $Snap) (self@19@00 $Ref) (other@20@00 $Ref)) (!
  (let ((result@21@00 (str___eq__%limited s@$ self@19@00 other@20@00))) (=>
    (str___eq__%precondition s@$ self@19@00 other@20@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@19@00)
          (str___val__ $Snap.unit other@20@00))
        result@21@00)
      (=>
        result@21@00
        (=
          (str___len__ $Snap.unit self@19@00)
          (str___len__ $Snap.unit other@20@00))))))
  :pattern ((str___eq__%limited s@$ self@19@00 other@20@00))
  :qid |quant-u-4029|)))
(assert (forall ((s@$ $Snap) (self@19@00 $Ref) (other@20@00 $Ref)) (!
  (let ((result@21@00 (str___eq__%limited s@$ self@19@00 other@20@00))) (=>
    (str___eq__%precondition s@$ self@19@00 other@20@00)
    (and
      (str___val__%precondition $Snap.unit self@19@00)
      (str___val__%precondition $Snap.unit other@20@00))))
  :pattern ((str___eq__%limited s@$ self@19@00 other@20@00))
  :qid |quant-u-4030|)))
(assert (forall ((s@$ $Snap) (self@19@00 $Ref) (other@20@00 $Ref)) (!
  (let ((result@21@00 (str___eq__%limited s@$ self@19@00 other@20@00))) (=>
    (and (str___eq__%precondition s@$ self@19@00 other@20@00) result@21@00)
    (and
      (str___len__%precondition $Snap.unit self@19@00)
      (str___len__%precondition $Snap.unit other@20@00))))
  :pattern ((str___eq__%limited s@$ self@19@00 other@20@00))
  :qid |quant-u-4031|)))
(assert (forall ((s@$ $Snap) (self@22@00 Int) (other@23@00 Int)) (!
  (=
    (int___ge__%limited s@$ self@22@00 other@23@00)
    (int___ge__ s@$ self@22@00 other@23@00))
  :pattern ((int___ge__ s@$ self@22@00 other@23@00))
  :qid |quant-u-3989|)))
(assert (forall ((s@$ $Snap) (self@22@00 Int) (other@23@00 Int)) (!
  (int___ge__%stateless self@22@00 other@23@00)
  :pattern ((int___ge__%limited s@$ self@22@00 other@23@00))
  :qid |quant-u-3990|)))
(assert (forall ((s@$ $Snap) (self@22@00 Int) (other@23@00 Int)) (!
  (=>
    (int___ge__%precondition s@$ self@22@00 other@23@00)
    (= (int___ge__ s@$ self@22@00 other@23@00) (>= self@22@00 other@23@00)))
  :pattern ((int___ge__ s@$ self@22@00 other@23@00))
  :qid |quant-u-4032|)))
(assert (forall ((s@$ $Snap) (self@22@00 Int) (other@23@00 Int)) (!
  true
  :pattern ((int___ge__ s@$ self@22@00 other@23@00))
  :qid |quant-u-4033|)))
(assert (forall ((s@$ $Snap) (self@25@00 Int) (other@26@00 Int)) (!
  (=
    (int___lt__%limited s@$ self@25@00 other@26@00)
    (int___lt__ s@$ self@25@00 other@26@00))
  :pattern ((int___lt__ s@$ self@25@00 other@26@00))
  :qid |quant-u-3991|)))
(assert (forall ((s@$ $Snap) (self@25@00 Int) (other@26@00 Int)) (!
  (int___lt__%stateless self@25@00 other@26@00)
  :pattern ((int___lt__%limited s@$ self@25@00 other@26@00))
  :qid |quant-u-3992|)))
(assert (forall ((s@$ $Snap) (self@25@00 Int) (other@26@00 Int)) (!
  (=>
    (int___lt__%precondition s@$ self@25@00 other@26@00)
    (= (int___lt__ s@$ self@25@00 other@26@00) (< self@25@00 other@26@00)))
  :pattern ((int___lt__ s@$ self@25@00 other@26@00))
  :qid |quant-u-4034|)))
(assert (forall ((s@$ $Snap) (self@25@00 Int) (other@26@00 Int)) (!
  true
  :pattern ((int___lt__ s@$ self@25@00 other@26@00))
  :qid |quant-u-4035|)))
(assert (forall ((s@$ $Snap) (self@28@00 Int) (other@29@00 Int)) (!
  (=
    (int___gt__%limited s@$ self@28@00 other@29@00)
    (int___gt__ s@$ self@28@00 other@29@00))
  :pattern ((int___gt__ s@$ self@28@00 other@29@00))
  :qid |quant-u-3993|)))
(assert (forall ((s@$ $Snap) (self@28@00 Int) (other@29@00 Int)) (!
  (int___gt__%stateless self@28@00 other@29@00)
  :pattern ((int___gt__%limited s@$ self@28@00 other@29@00))
  :qid |quant-u-3994|)))
(assert (forall ((s@$ $Snap) (self@28@00 Int) (other@29@00 Int)) (!
  (=>
    (int___gt__%precondition s@$ self@28@00 other@29@00)
    (= (int___gt__ s@$ self@28@00 other@29@00) (> self@28@00 other@29@00)))
  :pattern ((int___gt__ s@$ self@28@00 other@29@00))
  :qid |quant-u-4036|)))
(assert (forall ((s@$ $Snap) (self@28@00 Int) (other@29@00 Int)) (!
  true
  :pattern ((int___gt__ s@$ self@28@00 other@29@00))
  :qid |quant-u-4037|)))
(assert (forall ((s@$ $Snap) (self@31@00 Int) (other@32@00 Int)) (!
  (=
    (int___mul__%limited s@$ self@31@00 other@32@00)
    (int___mul__ s@$ self@31@00 other@32@00))
  :pattern ((int___mul__ s@$ self@31@00 other@32@00))
  :qid |quant-u-3995|)))
(assert (forall ((s@$ $Snap) (self@31@00 Int) (other@32@00 Int)) (!
  (int___mul__%stateless self@31@00 other@32@00)
  :pattern ((int___mul__%limited s@$ self@31@00 other@32@00))
  :qid |quant-u-3996|)))
(assert (forall ((s@$ $Snap) (self@31@00 Int) (other@32@00 Int)) (!
  (=>
    (int___mul__%precondition s@$ self@31@00 other@32@00)
    (= (int___mul__ s@$ self@31@00 other@32@00) (* self@31@00 other@32@00)))
  :pattern ((int___mul__ s@$ self@31@00 other@32@00))
  :qid |quant-u-4038|)))
(assert (forall ((s@$ $Snap) (self@31@00 Int) (other@32@00 Int)) (!
  true
  :pattern ((int___mul__ s@$ self@31@00 other@32@00))
  :qid |quant-u-4039|)))
(assert (forall ((s@$ $Snap) (self@34@00 Int) (other@35@00 Int)) (!
  (=
    (int___add__%limited s@$ self@34@00 other@35@00)
    (int___add__ s@$ self@34@00 other@35@00))
  :pattern ((int___add__ s@$ self@34@00 other@35@00))
  :qid |quant-u-3997|)))
(assert (forall ((s@$ $Snap) (self@34@00 Int) (other@35@00 Int)) (!
  (int___add__%stateless self@34@00 other@35@00)
  :pattern ((int___add__%limited s@$ self@34@00 other@35@00))
  :qid |quant-u-3998|)))
(assert (forall ((s@$ $Snap) (self@34@00 Int) (other@35@00 Int)) (!
  (=>
    (int___add__%precondition s@$ self@34@00 other@35@00)
    (= (int___add__ s@$ self@34@00 other@35@00) (+ self@34@00 other@35@00)))
  :pattern ((int___add__ s@$ self@34@00 other@35@00))
  :qid |quant-u-4040|)))
(assert (forall ((s@$ $Snap) (self@34@00 Int) (other@35@00 Int)) (!
  true
  :pattern ((int___add__ s@$ self@34@00 other@35@00))
  :qid |quant-u-4041|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-3999|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-4000|)))
(assert (forall ((s@$ $Snap) (val@38@00 $Ref) (id@39@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@38@00 id@39@00)
    (_checkDefined s@$ val@38@00 id@39@00))
  :pattern ((_checkDefined s@$ val@38@00 id@39@00))
  :qid |quant-u-4001|)))
(assert (forall ((s@$ $Snap) (val@38@00 $Ref) (id@39@00 Int)) (!
  (_checkDefined%stateless val@38@00 id@39@00)
  :pattern ((_checkDefined%limited s@$ val@38@00 id@39@00))
  :qid |quant-u-4002|)))
(assert (forall ((s@$ $Snap) (val@38@00 $Ref) (id@39@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@38@00 id@39@00)
    (= (_checkDefined s@$ val@38@00 id@39@00) val@38@00))
  :pattern ((_checkDefined s@$ val@38@00 id@39@00))
  :qid |quant-u-4042|)))
(assert (forall ((s@$ $Snap) (val@38@00 $Ref) (id@39@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@38@00 id@39@00))
  :qid |quant-u-4043|)))
(assert (forall ((s@$ $Snap) (self@41@00 $Ref) (other@42@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@41@00 other@42@00)
    (int___eq__ s@$ self@41@00 other@42@00))
  :pattern ((int___eq__ s@$ self@41@00 other@42@00))
  :qid |quant-u-4003|)))
(assert (forall ((s@$ $Snap) (self@41@00 $Ref) (other@42@00 $Ref)) (!
  (int___eq__%stateless self@41@00 other@42@00)
  :pattern ((int___eq__%limited s@$ self@41@00 other@42@00))
  :qid |quant-u-4004|)))
(assert (forall ((s@$ $Snap) (self@41@00 $Ref) (other@42@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@41@00 other@42@00)
    (=
      (int___eq__ s@$ self@41@00 other@42@00)
      (=
        (int___unbox__ $Snap.unit self@41@00)
        (int___unbox__ $Snap.unit other@42@00))))
  :pattern ((int___eq__ s@$ self@41@00 other@42@00))
  :qid |quant-u-4044|)))
(assert (forall ((s@$ $Snap) (self@41@00 $Ref) (other@42@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@41@00 other@42@00)
    (and
      (int___unbox__%precondition $Snap.unit self@41@00)
      (int___unbox__%precondition $Snap.unit other@42@00)))
  :pattern ((int___eq__ s@$ self@41@00 other@42@00))
  :qid |quant-u-4045|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-4005|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-4006|)))
(assert (forall ((s@$ $Snap) (self@45@00 Int) (other@46@00 Int)) (!
  (=
    (int___mod__%limited s@$ self@45@00 other@46@00)
    (int___mod__ s@$ self@45@00 other@46@00))
  :pattern ((int___mod__ s@$ self@45@00 other@46@00))
  :qid |quant-u-4007|)))
(assert (forall ((s@$ $Snap) (self@45@00 Int) (other@46@00 Int)) (!
  (int___mod__%stateless self@45@00 other@46@00)
  :pattern ((int___mod__%limited s@$ self@45@00 other@46@00))
  :qid |quant-u-4008|)))
(assert (forall ((s@$ $Snap) (self@45@00 Int) (other@46@00 Int)) (!
  (=>
    (int___mod__%precondition s@$ self@45@00 other@46@00)
    (= (int___mod__ s@$ self@45@00 other@46@00) (mod self@45@00 other@46@00)))
  :pattern ((int___mod__ s@$ self@45@00 other@46@00))
  :qid |quant-u-4046|)))
(assert (forall ((s@$ $Snap) (self@45@00 Int) (other@46@00 Int)) (!
  true
  :pattern ((int___mod__ s@$ self@45@00 other@46@00))
  :qid |quant-u-4047|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  (=
    (int___le__%limited s@$ self@48@00 other@49@00)
    (int___le__ s@$ self@48@00 other@49@00))
  :pattern ((int___le__ s@$ self@48@00 other@49@00))
  :qid |quant-u-4009|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  (int___le__%stateless self@48@00 other@49@00)
  :pattern ((int___le__%limited s@$ self@48@00 other@49@00))
  :qid |quant-u-4010|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  (=>
    (int___le__%precondition s@$ self@48@00 other@49@00)
    (= (int___le__ s@$ self@48@00 other@49@00) (<= self@48@00 other@49@00)))
  :pattern ((int___le__ s@$ self@48@00 other@49@00))
  :qid |quant-u-4048|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  true
  :pattern ((int___le__ s@$ self@48@00 other@49@00))
  :qid |quant-u-4049|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- m1 ----------
(declare-const p1@0@01 Bool)
(declare-const p2@1@01 Bool)
(declare-const _cthread_157@2@01 $Ref)
(declare-const _cthread_157_0@3@01 $Ref)
(declare-const _caller_measures_157@4@01 Seq<Measure$>)
(declare-const _caller_measures_157_0@5@01 Seq<Measure$>)
(declare-const _residue_157@6@01 $Perm)
(declare-const _residue_157_0@7@01 $Perm)
(declare-const b@8@01 $Ref)
(declare-const b_9@9@01 $Ref)
(declare-const _current_wait_level_157@10@01 $Perm)
(declare-const _current_wait_level_157_0@11@01 $Perm)
(declare-const _res@12@01 $Ref)
(declare-const _res_0@13@01 $Ref)
(declare-const p1@14@01 Bool)
(declare-const p2@15@01 Bool)
(declare-const _cthread_157@16@01 $Ref)
(declare-const _cthread_157_0@17@01 $Ref)
(declare-const _caller_measures_157@18@01 Seq<Measure$>)
(declare-const _caller_measures_157_0@19@01 Seq<Measure$>)
(declare-const _residue_157@20@01 $Perm)
(declare-const _residue_157_0@21@01 $Perm)
(declare-const b@22@01 $Ref)
(declare-const b_9@23@01 $Ref)
(declare-const _current_wait_level_157@24@01 $Perm)
(declare-const _current_wait_level_157_0@25@01 $Perm)
(declare-const _res@26@01 $Ref)
(declare-const _res_0@27@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@28@01 $Snap)
(assert (= $t@28@01 ($Snap.combine ($Snap.first $t@28@01) ($Snap.second $t@28@01))))
(assert (= ($Snap.first $t@28@01) $Snap.unit))
; [eval] p1 ==> _cthread_157 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | p1@14@01 | live]
; [else-branch: 0 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | p1@14@01]
(assert p1@14@01)
; [eval] _cthread_157 != null
(pop) ; 3
(push) ; 3
; [else-branch: 0 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1@14@01) p1@14@01))
(assert (=> p1@14@01 (not (= _cthread_157@16@01 $Ref.null))))
(assert (=
  ($Snap.second $t@28@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@28@01))
    ($Snap.second ($Snap.second $t@28@01)))))
(assert (= ($Snap.first ($Snap.second $t@28@01)) $Snap.unit))
; [eval] p2 ==> _cthread_157_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | p2@15@01 | live]
; [else-branch: 1 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1 | p2@15@01]
(assert p2@15@01)
; [eval] _cthread_157_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2@15@01) p2@15@01))
(assert (=> p2@15@01 (not (= _cthread_157_0@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@28@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@28@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@28@01))) $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_cthread_157), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | p1@14@01 | live]
; [else-branch: 2 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2 | p1@14@01]
(assert p1@14@01)
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _cthread_157@16@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@28@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_cthread_157_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | p2@15@01 | live]
; [else-branch: 3 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3 | p2@15@01]
(assert p2@15@01)
; [eval] issubtype(typeof(_cthread_157_0), Thread_0())
; [eval] typeof(_cthread_157_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> _cthread_157_0@17@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(b), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | p1@14@01 | live]
; [else-branch: 4 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4 | p1@14@01]
(assert p1@14@01)
; [eval] issubtype(typeof(b), bool())
; [eval] typeof(b)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 4 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(b_9), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | p2@15@01 | live]
; [else-branch: 5 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5 | p2@15@01]
(assert p2@15@01)
; [eval] issubtype(typeof(b_9), bool())
; [eval] typeof(b_9)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 5 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | p1@14@01 | live]
; [else-branch: 6 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6 | p1@14@01]
(assert p1@14@01)
(pop) ; 3
(push) ; 3
; [else-branch: 6 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | p2@15@01 | live]
; [else-branch: 7 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 7 | p2@15@01]
(assert p2@15@01)
(pop) ; 3
(push) ; 3
; [else-branch: 7 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 ($Snap.combine ($Snap.first $t@29@01) ($Snap.second $t@29@01))))
(assert (= ($Snap.first $t@29@01) $Snap.unit))
; [eval] p1 ==> (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_157) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | p1@14@01 | live]
; [else-branch: 8 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 8 | p1@14@01]
(assert p1@14@01)
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_157) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_157)
(push) ; 5
; [then-branch: 9 | False | live]
; [else-branch: 9 | True | live]
(push) ; 6
; [then-branch: 9 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 9 | True]
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_157)
(push) ; 7
; [then-branch: 10 | False | live]
; [else-branch: 10 | True | live]
(push) ; 8
; [then-branch: 10 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 10 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1@14@01 (<= _residue_157@20@01 _current_wait_level_157@24@01)))
(assert (=
  ($Snap.second $t@29@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@29@01))
    ($Snap.second ($Snap.second $t@29@01)))))
(assert (= ($Snap.first ($Snap.second $t@29@01)) $Snap.unit))
; [eval] p2 ==> (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_157_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | p2@15@01 | live]
; [else-branch: 11 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 11 | p2@15@01]
(assert p2@15@01)
; [eval] (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_157_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
; [eval] (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_157_0)
(push) ; 5
; [then-branch: 12 | False | live]
; [else-branch: 12 | True | live]
(push) ; 6
; [then-branch: 12 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 12 | True]
; [eval] (forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_157_0)
(push) ; 7
; [then-branch: 13 | False | live]
; [else-branch: 13 | True | live]
(push) ; 8
; [then-branch: 13 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 13 | True]
; [eval] _residue_157_0 <= _current_wait_level_157_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 11 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2@15@01 (<= _residue_157_0@21@01 _current_wait_level_157_0@25@01)))
(assert (=
  ($Snap.second ($Snap.second $t@29@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@29@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@29@01))) $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | p1@14@01 | live]
; [else-branch: 14 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 14 | p1@14@01]
(assert p1@14@01)
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@29@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@01))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 15 | p2@15@01 | live]
; [else-branch: 15 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 15 | p2@15@01]
(assert p2@15@01)
; [eval] issubtype(typeof(_res_0), int())
; [eval] typeof(_res_0)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))
  $Snap.unit))
; [eval] p1 ==> bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | p1@14@01 | live]
; [else-branch: 16 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 16 | p1@14@01]
(assert p1@14@01)
; [eval] bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | bool___unbox__(_, b@22@01) | live]
; [else-branch: 17 | !(bool___unbox__(_, b@22@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 17 | bool___unbox__(_, b@22@01)]
(assert (bool___unbox__ $Snap.unit b@22@01))
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@26@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@26@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 6
(push) ; 6
; [else-branch: 17 | !(bool___unbox__(_, b@22@01))]
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b@22@01)
  (and
    (bool___unbox__ $Snap.unit b@22@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@26@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
; Joined path conditions
(assert (or
  (not (bool___unbox__ $Snap.unit b@22@01))
  (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 16 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    p1@14@01
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (=>
      (bool___unbox__ $Snap.unit b@22@01)
      (and
        (bool___unbox__ $Snap.unit b@22@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@26@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (or
      (not (bool___unbox__ $Snap.unit b@22@01))
      (bool___unbox__ $Snap.unit b@22@01)))))
; Joined path conditions
(assert (=>
  (and p1@14@01 (bool___unbox__ $Snap.unit b@22@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@26@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
  $Snap.unit))
; [eval] p2 ==> bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | p2@15@01 | live]
; [else-branch: 18 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 18 | p2@15@01]
(assert p2@15@01)
; [eval] bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
; [eval] bool___unbox__(b_9)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_9@23@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | bool___unbox__(_, b_9@23@01) | live]
; [else-branch: 19 | !(bool___unbox__(_, b_9@23@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 19 | bool___unbox__(_, b_9@23@01)]
(assert (bool___unbox__ $Snap.unit b_9@23@01))
; [eval] int___eq__(_res_0, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_0@27@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_0@27@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 6
(push) ; 6
; [else-branch: 19 | !(bool___unbox__(_, b_9@23@01))]
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_9@23@01)
  (and
    (bool___unbox__ $Snap.unit b_9@23@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_0@27@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
; Joined path conditions
(assert (or
  (not (bool___unbox__ $Snap.unit b_9@23@01))
  (bool___unbox__ $Snap.unit b_9@23@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 18 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    p2@15@01
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01)
    (=>
      (bool___unbox__ $Snap.unit b_9@23@01)
      (and
        (bool___unbox__ $Snap.unit b_9@23@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_0@27@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (or
      (not (bool___unbox__ $Snap.unit b_9@23@01))
      (bool___unbox__ $Snap.unit b_9@23@01)))))
; Joined path conditions
(assert (=>
  (and p2@15@01 (bool___unbox__ $Snap.unit b_9@23@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res_0@27@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
  $Snap.unit))
; [eval] p1 ==> !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | p1@14@01 | live]
; [else-branch: 20 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 20 | p1@14@01]
(assert p1@14@01)
; [eval] !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
; [eval] !bool___unbox__(b)
; [eval] bool___unbox__(b)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | !(bool___unbox__(_, b@22@01)) | live]
; [else-branch: 21 | bool___unbox__(_, b@22@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 21 | !(bool___unbox__(_, b@22@01))]
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
; [eval] int___eq__(_res, __prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@26@01 (__prim__int___box__ $Snap.unit 2)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@26@01 (__prim__int___box__ $Snap.unit 2))))
(pop) ; 6
(push) ; 6
; [else-branch: 21 | bool___unbox__(_, b@22@01)]
(assert (bool___unbox__ $Snap.unit b@22@01))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b@22@01))
  (and
    (not (bool___unbox__ $Snap.unit b@22@01))
    (__prim__int___box__%precondition $Snap.unit 2)
    (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@26@01 (__prim__int___box__ $Snap.unit 2)))))
; Joined path conditions
(assert (or
  (bool___unbox__ $Snap.unit b@22@01)
  (not (bool___unbox__ $Snap.unit b@22@01))))
(pop) ; 4
(push) ; 4
; [else-branch: 20 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    p1@14@01
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (=>
      (not (bool___unbox__ $Snap.unit b@22@01))
      (and
        (not (bool___unbox__ $Snap.unit b@22@01))
        (__prim__int___box__%precondition $Snap.unit 2)
        (issubtype<Bool> (typeof<PyType> _res@26@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@26@01 (__prim__int___box__ $Snap.unit 2))))
    (or
      (bool___unbox__ $Snap.unit b@22@01)
      (not (bool___unbox__ $Snap.unit b@22@01))))))
; Joined path conditions
(assert (=>
  (and p1@14@01 (not (bool___unbox__ $Snap.unit b@22@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@26@01 (__prim__int___box__ $Snap.unit 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
  $Snap.unit))
; [eval] p2 ==> !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | p2@15@01 | live]
; [else-branch: 22 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 22 | p2@15@01]
(assert p2@15@01)
; [eval] !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
; [eval] !bool___unbox__(b_9)
; [eval] bool___unbox__(b_9)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_9@23@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | !(bool___unbox__(_, b_9@23@01)) | live]
; [else-branch: 23 | bool___unbox__(_, b_9@23@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 23 | !(bool___unbox__(_, b_9@23@01))]
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
; [eval] int___eq__(_res_0, __prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_0@27@01 (__prim__int___box__ $Snap.unit 2)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_0@27@01 (__prim__int___box__ $Snap.unit 2))))
(pop) ; 6
(push) ; 6
; [else-branch: 23 | bool___unbox__(_, b_9@23@01)]
(assert (bool___unbox__ $Snap.unit b_9@23@01))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_9@23@01))
  (and
    (not (bool___unbox__ $Snap.unit b_9@23@01))
    (__prim__int___box__%precondition $Snap.unit 2)
    (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_0@27@01 (__prim__int___box__ $Snap.unit 2)))))
; Joined path conditions
(assert (or
  (bool___unbox__ $Snap.unit b_9@23@01)
  (not (bool___unbox__ $Snap.unit b_9@23@01))))
(pop) ; 4
(push) ; 4
; [else-branch: 22 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    p2@15@01
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_9@23@01))
      (and
        (not (bool___unbox__ $Snap.unit b_9@23@01))
        (__prim__int___box__%precondition $Snap.unit 2)
        (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_0@27@01 (__prim__int___box__ $Snap.unit 2))))
    (or
      (bool___unbox__ $Snap.unit b_9@23@01)
      (not (bool___unbox__ $Snap.unit b_9@23@01))))))
; Joined path conditions
(assert (=>
  (and p2@15@01 (not (bool___unbox__ $Snap.unit b_9@23@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res_0@27@01 (__prim__int___box__ $Snap.unit 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 24 | p1@14@01 | live]
; [else-branch: 24 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 24 | p1@14@01]
(assert p1@14@01)
(pop) ; 4
(push) ; 4
; [else-branch: 24 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | p2@15@01 | live]
; [else-branch: 25 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 25 | p2@15@01]
(assert p2@15@01)
(pop) ; 4
(push) ; 4
; [else-branch: 25 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1: Bool
(declare-const ret1@30@01 Bool)
; [exec]
; var ret2: Bool
(declare-const ret2@31@01 Bool)
; [exec]
; var except1: Bool
(declare-const except1@32@01 Bool)
; [exec]
; var except2: Bool
(declare-const except2@33@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@34@01 $Ref)
; [exec]
; var _err_0: Ref
(declare-const _err_0@35@01 $Ref)
; [exec]
; var x_0: Ref
(declare-const x_0@36@01 $Ref)
; [exec]
; var x_0_0: Ref
(declare-const x_0_0@37@01 $Ref)
; [exec]
; var error: Ref
(declare-const error@38@01 $Ref)
; [exec]
; var error_11: Ref
(declare-const error_11@39@01 $Ref)
; [exec]
; var try_finally_7: Int
(declare-const try_finally_7@40@01 Int)
; [exec]
; var try_finally_7_0: Int
(declare-const try_finally_7_0@41@01 Int)
; [exec]
; var b_4: Ref
(declare-const b_4@42@01 $Ref)
; [exec]
; var b_4_0: Ref
(declare-const b_4_0@43@01 $Ref)
; [exec]
; var MyException_res: Ref
(declare-const MyException_res@44@01 $Ref)
; [exec]
; var MyException_res_9: Ref
(declare-const MyException_res_9@45@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@46@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@47@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@48@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@49@01 Seq<Measure$>)
; [exec]
; var bypass1: Bool
(declare-const bypass1@50@01 Bool)
; [exec]
; var bypass2: Bool
(declare-const bypass2@51@01 Bool)
; [exec]
; var oldret1: Bool
(declare-const oldret1@52@01 Bool)
; [exec]
; var oldret2: Bool
(declare-const oldret2@53@01 Bool)
; [exec]
; var oldexcept1: Bool
(declare-const oldexcept1@54@01 Bool)
; [exec]
; var oldexcept2: Bool
(declare-const oldexcept2@55@01 Bool)
; [exec]
; var thisexcept1: Bool
(declare-const thisexcept1@56@01 Bool)
; [exec]
; var thisexcept2: Bool
(declare-const thisexcept2@57@01 Bool)
; [exec]
; var p1_1: Bool
(declare-const p1_1@58@01 Bool)
; [exec]
; var p2_1: Bool
(declare-const p2_1@59@01 Bool)
; [exec]
; var p1_2: Bool
(declare-const p1_2@60@01 Bool)
; [exec]
; var p2_2: Bool
(declare-const p2_2@61@01 Bool)
; [exec]
; var tmp_ret1: Bool
(declare-const tmp_ret1@62@01 Bool)
; [exec]
; var tmp_ret2: Bool
(declare-const tmp_ret2@63@01 Bool)
; [exec]
; var tmp_break1: Bool
(declare-const tmp_break1@64@01 Bool)
; [exec]
; var tmp_break2: Bool
(declare-const tmp_break2@65@01 Bool)
; [exec]
; var tmp_cont1: Bool
(declare-const tmp_cont1@66@01 Bool)
; [exec]
; var tmp_cont2: Bool
(declare-const tmp_cont2@67@01 Bool)
; [exec]
; var tmp_except1: Bool
(declare-const tmp_except1@68@01 Bool)
; [exec]
; var tmp_except2: Bool
(declare-const tmp_except2@69@01 Bool)
; [exec]
; var p1_0: Bool
(declare-const p1_0@70@01 Bool)
; [exec]
; var p2_0: Bool
(declare-const p2_0@71@01 Bool)
; [exec]
; var p3: Bool
(declare-const p3@72@01 Bool)
; [exec]
; var p4: Bool
(declare-const p4@73@01 Bool)
; [exec]
; var tmp: Ref
(declare-const tmp@74@01 $Ref)
; [exec]
; inhale p1
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 $Snap.unit))
(assert p1@14@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1 := false
; [exec]
; ret2 := false
; [exec]
; except1 := false
; [exec]
; except2 := false
; [eval] p1 && (!ret1 && !except1)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 26 | !(p1@14@01) | live]
; [else-branch: 26 | p1@14@01 | live]
(push) ; 4
; [then-branch: 26 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 4
(push) ; 4
; [else-branch: 26 | p1@14@01]
; [eval] !ret1
(push) ; 5
; [then-branch: 27 | False | live]
; [else-branch: 27 | True | live]
(push) ; 6
; [then-branch: 27 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 27 | True]
; [eval] !except1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1@14@01 (not p1@14@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | p1@14@01 | live]
; [else-branch: 28 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 28 | p1@14@01]
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; b_4 := b
; [eval] p2 && (!ret2 && !except2)
(push) ; 4
; [then-branch: 29 | !(p2@15@01) | live]
; [else-branch: 29 | p2@15@01 | live]
(push) ; 5
; [then-branch: 29 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 5
(push) ; 5
; [else-branch: 29 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 6
; [then-branch: 30 | False | live]
; [else-branch: 30 | True | live]
(push) ; 7
; [then-branch: 30 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 30 | True]
; [eval] !except2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2@15@01 (not p2@15@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 31 | p2@15@01 | live]
; [else-branch: 31 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 31 | p2@15@01]
(assert p2@15@01)
; [exec]
; _method_measures_157_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_0 := null
; [exec]
; _err_0 := null
; [exec]
; b_4_0 := b_9
; [exec]
; bypass1 := !(p1 && (!ret1 && !except1))
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 5
; [then-branch: 32 | !(p1@14@01) | live]
; [else-branch: 32 | p1@14@01 | live]
(push) ; 6
; [then-branch: 32 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 6
(push) ; 6
; [else-branch: 32 | p1@14@01]
; [eval] !ret1
(push) ; 7
; [then-branch: 33 | False | live]
; [else-branch: 33 | True | live]
(push) ; 8
; [then-branch: 33 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 33 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass1@76@01 Bool)
(assert (= bypass1@76@01 (not p1@14@01)))
; [exec]
; bypass2 := !(p2 && (!ret2 && !except2))
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 5
; [then-branch: 34 | !(p2@15@01) | live]
; [else-branch: 34 | p2@15@01 | live]
(push) ; 6
; [then-branch: 34 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 6
(push) ; 6
; [else-branch: 34 | p2@15@01]
; [eval] !ret2
(push) ; 7
; [then-branch: 35 | False | live]
; [else-branch: 35 | True | live]
(push) ; 8
; [then-branch: 35 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 35 | True]
; [eval] !except2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass2@77@01 Bool)
(assert (= bypass2@77@01 (not p2@15@01)))
; [exec]
; oldret1 := ret1
; [exec]
; oldret2 := ret2
; [exec]
; oldexcept1 := except1
; [exec]
; oldexcept2 := except2
; [exec]
; p1_0 := p1 && (!ret1 && !except1 && bool___unbox__(b_4))
; [eval] p1 && (!ret1 && !except1 && bool___unbox__(b_4))
(push) ; 5
; [then-branch: 36 | !(p1@14@01) | live]
; [else-branch: 36 | p1@14@01 | live]
(push) ; 6
; [then-branch: 36 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 6
(push) ; 6
; [else-branch: 36 | p1@14@01]
; [eval] !ret1
(push) ; 7
; [then-branch: 37 | False | live]
; [else-branch: 37 | True | live]
(push) ; 8
; [then-branch: 37 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 37 | True]
; [eval] !except1
(push) ; 9
; [then-branch: 38 | False | live]
; [else-branch: 38 | True | live]
(push) ; 10
; [then-branch: 38 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 38 | True]
; [eval] bool___unbox__(b_4)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01))))
(declare-const p1_0@78@01 Bool)
(assert (= p1_0@78@01 (and p1@14@01 (bool___unbox__ $Snap.unit b@22@01))))
; [exec]
; p2_0 := p2 && (!ret2 && !except2 && bool___unbox__(b_4_0))
; [eval] p2 && (!ret2 && !except2 && bool___unbox__(b_4_0))
(push) ; 5
; [then-branch: 39 | !(p2@15@01) | live]
; [else-branch: 39 | p2@15@01 | live]
(push) ; 6
; [then-branch: 39 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 6
(push) ; 6
; [else-branch: 39 | p2@15@01]
; [eval] !ret2
(push) ; 7
; [then-branch: 40 | False | live]
; [else-branch: 40 | True | live]
(push) ; 8
; [then-branch: 40 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 40 | True]
; [eval] !except2
(push) ; 9
; [then-branch: 41 | False | live]
; [else-branch: 41 | True | live]
(push) ; 10
; [then-branch: 41 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 41 | True]
; [eval] bool___unbox__(b_4_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01))))
(declare-const p2_0@79@01 Bool)
(assert (= p2_0@79@01 (and p2@15@01 (bool___unbox__ $Snap.unit b_9@23@01))))
; [exec]
; p3 := p1 && (!ret1 && !except1 && !bool___unbox__(b_4))
; [eval] p1 && (!ret1 && !except1 && !bool___unbox__(b_4))
(push) ; 5
; [then-branch: 42 | !(p1@14@01) | live]
; [else-branch: 42 | p1@14@01 | live]
(push) ; 6
; [then-branch: 42 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 6
(push) ; 6
; [else-branch: 42 | p1@14@01]
; [eval] !ret1
(push) ; 7
; [then-branch: 43 | False | live]
; [else-branch: 43 | True | live]
(push) ; 8
; [then-branch: 43 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 43 | True]
; [eval] !except1
(push) ; 9
; [then-branch: 44 | False | live]
; [else-branch: 44 | True | live]
(push) ; 10
; [then-branch: 44 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 44 | True]
; [eval] !bool___unbox__(b_4)
; [eval] bool___unbox__(b_4)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3@80@01 Bool)
(assert (= p3@80@01 (and p1@14@01 (not (bool___unbox__ $Snap.unit b@22@01)))))
; [exec]
; p4 := p2 && (!ret2 && !except2 && !bool___unbox__(b_4_0))
; [eval] p2 && (!ret2 && !except2 && !bool___unbox__(b_4_0))
(push) ; 5
; [then-branch: 45 | !(p2@15@01) | live]
; [else-branch: 45 | p2@15@01 | live]
(push) ; 6
; [then-branch: 45 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 6
(push) ; 6
; [else-branch: 45 | p2@15@01]
; [eval] !ret2
(push) ; 7
; [then-branch: 46 | False | live]
; [else-branch: 46 | True | live]
(push) ; 8
; [then-branch: 46 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 46 | True]
; [eval] !except2
(push) ; 9
; [then-branch: 47 | False | live]
; [else-branch: 47 | True | live]
(push) ; 10
; [then-branch: 47 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 47 | True]
; [eval] !bool___unbox__(b_4_0)
; [eval] bool___unbox__(b_4_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4@81@01 Bool)
(assert (= p4@81@01 (and p2@15@01 (not (bool___unbox__ $Snap.unit b_9@23@01)))))
; [exec]
; tmp := new()
(declare-const tmp@82@01 $Ref)
(assert (not (= tmp@82@01 $Ref.null)))
(assert (not (= tmp@82@01 MyException_res_9@45@01)))
(assert (not (= tmp@82@01 error@38@01)))
(assert (not (= tmp@82@01 x_0@36@01)))
(assert (not (= tmp@82@01 b_9@23@01)))
(assert (not (= tmp@82@01 b@22@01)))
(assert (not (= tmp@82@01 _cthread_157@16@01)))
(assert (not (= tmp@82@01 tmp@74@01)))
(assert (not (= tmp@82@01 error_11@39@01)))
(assert (not (= tmp@82@01 MyException_res@44@01)))
(assert (not (= tmp@82@01 _cthread_157_0@17@01)))
(assert (not (= tmp@82@01 x_0_0@37@01)))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 5
; [then-branch: 48 | !(p1_0@78@01) | live]
; [else-branch: 48 | p1_0@78@01 | live]
(push) ; 6
; [then-branch: 48 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 6
(push) ; 6
; [else-branch: 48 | p1_0@78@01]
(assert p1_0@78@01)
; [eval] !ret1
(push) ; 7
; [then-branch: 49 | False | live]
; [else-branch: 49 | True | live]
(push) ; 8
; [then-branch: 49 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 49 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_0@78@01 (not p1_0@78@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_0@78@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_0@78@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | p1_0@78@01 | live]
; [else-branch: 50 | !(p1_0@78@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 50 | p1_0@78@01]
(assert p1_0@78@01)
; [exec]
; MyException_res := tmp
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 6
; [then-branch: 51 | !(p2_0@79@01) | live]
; [else-branch: 51 | p2_0@79@01 | live]
(push) ; 7
; [then-branch: 51 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 7
(push) ; 7
; [else-branch: 51 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 8
; [then-branch: 52 | False | live]
; [else-branch: 52 | True | live]
(push) ; 9
; [then-branch: 52 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 52 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_0@79@01 (not p2_0@79@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_0@79@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_0@79@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | p2_0@79@01 | live]
; [else-branch: 53 | !(p2_0@79@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 53 | p2_0@79@01]
(assert p2_0@79@01)
; [exec]
; MyException_res_9 := tmp
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 54 | !(p1_0@78@01) | live]
; [else-branch: 54 | p1_0@78@01 | live]
(push) ; 8
; [then-branch: 54 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 8
(push) ; 8
; [else-branch: 54 | p1_0@78@01]
; [eval] !ret1
(push) ; 9
; [then-branch: 55 | False | live]
; [else-branch: 55 | True | live]
(push) ; 10
; [then-branch: 55 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 55 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_0@78@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | p1_0@78@01 | live]
; [else-branch: 56 | !(p1_0@78@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 56 | p1_0@78@01]
; [exec]
; inhale typeof(MyException_res) == MyException()
(declare-const $t@83@01 $Snap)
(assert (= $t@83@01 $Snap.unit))
; [eval] typeof(MyException_res) == MyException()
; [eval] typeof(MyException_res)
; [eval] MyException()
(assert (= (typeof<PyType> tmp@82@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_0 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 57 | !(p2_0@79@01) | live]
; [else-branch: 57 | p2_0@79@01 | live]
(push) ; 9
; [then-branch: 57 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 9
(push) ; 9
; [else-branch: 57 | p2_0@79@01]
; [eval] !ret2
(push) ; 10
; [then-branch: 58 | False | live]
; [else-branch: 58 | True | live]
(push) ; 11
; [then-branch: 58 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 58 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_0@79@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | p2_0@79@01 | live]
; [else-branch: 59 | !(p2_0@79@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 59 | p2_0@79@01]
; [exec]
; inhale typeof(MyException_res_9) == MyException()
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 $Snap.unit))
; [eval] typeof(MyException_res_9) == MyException()
; [eval] typeof(MyException_res_9)
; [eval] MyException()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_0 && (!ret1 && !except1)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 60 | !(p1_0@78@01) | live]
; [else-branch: 60 | p1_0@78@01 | live]
(push) ; 10
; [then-branch: 60 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 10
(push) ; 10
; [else-branch: 60 | p1_0@78@01]
; [eval] !ret1
(push) ; 11
; [then-branch: 61 | False | live]
; [else-branch: 61 | True | live]
(push) ; 12
; [then-branch: 61 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 61 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_0@78@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | p1_0@78@01 | live]
; [else-branch: 62 | !(p1_0@78@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 62 | p1_0@78@01]
; [exec]
; _err := MyException_res
; [exec]
; except1 := true
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 63 | !(p2_0@79@01) | live]
; [else-branch: 63 | p2_0@79@01 | live]
(push) ; 11
; [then-branch: 63 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 11
(push) ; 11
; [else-branch: 63 | p2_0@79@01]
; [eval] !ret2
(push) ; 12
; [then-branch: 64 | False | live]
; [else-branch: 64 | True | live]
(push) ; 13
; [then-branch: 64 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 64 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_0@79@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 65 | p2_0@79@01 | live]
; [else-branch: 65 | !(p2_0@79@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 65 | p2_0@79@01]
; [exec]
; _err_0 := MyException_res_9
; [exec]
; except2 := true
; [exec]
; thisexcept1 := except1 && !bypass1
; [eval] except1 && !bypass1
(push) ; 11
; [then-branch: 66 | False | live]
; [else-branch: 66 | True | live]
(push) ; 12
; [then-branch: 66 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 66 | True]
; [eval] !bypass1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1@85@01 Bool)
(assert (= thisexcept1@85@01 (not bypass1@76@01)))
; [exec]
; thisexcept2 := except2 && !bypass2
; [eval] except2 && !bypass2
(push) ; 11
; [then-branch: 67 | False | live]
; [else-branch: 67 | True | live]
(push) ; 12
; [then-branch: 67 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 67 | True]
; [eval] !bypass2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2@86@01 Bool)
(assert (= thisexcept2@86@01 (not bypass2@77@01)))
; [exec]
; p1_1 := p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
; [eval] p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 68 | !(p1@14@01) | live]
; [else-branch: 68 | p1@14@01 | live]
(push) ; 12
; [then-branch: 68 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 12
(push) ; 12
; [else-branch: 68 | p1@14@01]
(push) ; 13
; [then-branch: 69 | !(thisexcept1@85@01) | live]
; [else-branch: 69 | thisexcept1@85@01 | live]
(push) ; 14
; [then-branch: 69 | !(thisexcept1@85@01)]
(assert (not thisexcept1@85@01))
(pop) ; 14
(push) ; 14
; [else-branch: 69 | thisexcept1@85@01]
(assert thisexcept1@85@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1@85@01 (not thisexcept1@85@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p1@14@01 (or thisexcept1@85@01 (not thisexcept1@85@01))))
(declare-const p1_1@87@01 Bool)
(assert (=
  p1_1@87@01
  (and
    p1@14@01
    (and
      thisexcept1@85@01
      (issubtype<Bool> (typeof<PyType> tmp@82@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_1 := p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
; [eval] p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
(push) ; 11
; [then-branch: 70 | !(p2@15@01) | live]
; [else-branch: 70 | p2@15@01 | live]
(push) ; 12
; [then-branch: 70 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 12
(push) ; 12
; [else-branch: 70 | p2@15@01]
(push) ; 13
; [then-branch: 71 | !(thisexcept2@86@01) | live]
; [else-branch: 71 | thisexcept2@86@01 | live]
(push) ; 14
; [then-branch: 71 | !(thisexcept2@86@01)]
(assert (not thisexcept2@86@01))
(pop) ; 14
(push) ; 14
; [else-branch: 71 | thisexcept2@86@01]
(assert thisexcept2@86@01)
; [eval] issubtype(typeof(_err_0), MyException())
; [eval] typeof(_err_0)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2@86@01 (not thisexcept2@86@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p2@15@01 (or thisexcept2@86@01 (not thisexcept2@86@01))))
(declare-const p2_1@88@01 Bool)
(assert (=
  p2_1@88@01
  (and
    p2@15@01
    (and
      thisexcept2@86@01
      (issubtype<Bool> (typeof<PyType> tmp@82@01) (as MyException<PyType>  PyType))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_1@87@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not p1_1@87@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 72 | p1_1@87@01 | live]
; [else-branch: 72 | !(p1_1@87@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 72 | p1_1@87@01]
(assert p1_1@87@01)
; [exec]
; except1 := false
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_1@88@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not p2_1@88@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | p2_1@88@01 | live]
; [else-branch: 73 | !(p2_1@88@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 73 | p2_1@88@01]
(assert p2_1@88@01)
; [exec]
; except2 := false
; [eval] p1_1 && (!ret1 && !except1)
(push) ; 13
; [then-branch: 74 | !(p1_1@87@01) | live]
; [else-branch: 74 | p1_1@87@01 | live]
(push) ; 14
; [then-branch: 74 | !(p1_1@87@01)]
(assert (not p1_1@87@01))
(pop) ; 14
(push) ; 14
; [else-branch: 74 | p1_1@87@01]
; [eval] !ret1
(push) ; 15
; [then-branch: 75 | False | live]
; [else-branch: 75 | True | live]
(push) ; 16
; [then-branch: 75 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 75 | True]
; [eval] !except1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p1_1@87@01 (not p1_1@87@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_1@87@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | p1_1@87@01 | live]
; [else-branch: 76 | !(p1_1@87@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 76 | p1_1@87@01]
; [exec]
; x_0 := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const x_0@89@01 $Ref)
(assert (= x_0@89@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@90@01 $Snap)
(assert (= $t@90@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 14
(assert (_isDefined%precondition $Snap.unit 3170168))
(pop) ; 14
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170168))
(assert (_isDefined $Snap.unit 3170168))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 77 | !(p2_1@88@01) | live]
; [else-branch: 77 | p2_1@88@01 | live]
(push) ; 15
; [then-branch: 77 | !(p2_1@88@01)]
(assert (not p2_1@88@01))
(pop) ; 15
(push) ; 15
; [else-branch: 77 | p2_1@88@01]
; [eval] !ret2
(push) ; 16
; [then-branch: 78 | False | live]
; [else-branch: 78 | True | live]
(push) ; 17
; [then-branch: 78 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 78 | True]
; [eval] !except2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p2_1@88@01 (not p2_1@88@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_1@88@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | p2_1@88@01 | live]
; [else-branch: 79 | !(p2_1@88@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 79 | p2_1@88@01]
; [exec]
; x_0_0 := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const x_0_0@91@01 $Ref)
(assert (= x_0_0@91@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; inhale true
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1 && (!ret1 && !except1)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 80 | !(p1@14@01) | live]
; [else-branch: 80 | p1@14@01 | live]
(push) ; 16
; [then-branch: 80 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 80 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 81 | False | live]
; [else-branch: 81 | True | live]
(push) ; 18
; [then-branch: 81 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 81 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | p1@14@01 | live]
; [else-branch: 82 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 82 | p1@14@01]
; [exec]
; _err := null
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 83 | !(p2@15@01) | live]
; [else-branch: 83 | p2@15@01 | live]
(push) ; 17
; [then-branch: 83 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 17
(push) ; 17
; [else-branch: 83 | p2@15@01]
; [eval] !ret2
(push) ; 18
; [then-branch: 84 | False | live]
; [else-branch: 84 | True | live]
(push) ; 19
; [then-branch: 84 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 84 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | p2@15@01 | live]
; [else-branch: 85 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 85 | p2@15@01]
; [exec]
; _err_0 := null
; [exec]
; p1_2 := p1 && !thisexcept1
; [eval] p1 && !thisexcept1
(push) ; 17
; [then-branch: 86 | !(p1@14@01) | live]
; [else-branch: 86 | p1@14@01 | live]
(push) ; 18
; [then-branch: 86 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 86 | p1@14@01]
; [eval] !thisexcept1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p1_2@93@01 Bool)
(assert (= p1_2@93@01 (and p1@14@01 (not thisexcept1@85@01))))
; [exec]
; p2_2 := p2 && !thisexcept2
; [eval] p2 && !thisexcept2
(push) ; 17
; [then-branch: 87 | !(p2@15@01) | live]
; [else-branch: 87 | p2@15@01 | live]
(push) ; 18
; [then-branch: 87 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 18
(push) ; 18
; [else-branch: 87 | p2@15@01]
; [eval] !thisexcept2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p2_2@94@01 Bool)
(assert (= p2_2@94@01 (and p2@15@01 (not thisexcept2@86@01))))
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 88 | !(p1_2@93@01) | live]
; [else-branch: 88 | p1_2@93@01 | live]
(push) ; 18
; [then-branch: 88 | !(p1_2@93@01)]
(assert (not p1_2@93@01))
(pop) ; 18
(push) ; 18
; [else-branch: 88 | p1_2@93@01]
(assert p1_2@93@01)
; [eval] !ret1
(push) ; 19
; [then-branch: 89 | False | live]
; [else-branch: 89 | True | live]
(push) ; 20
; [then-branch: 89 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 89 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p1_2@93@01 (not p1_2@93@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_2@93@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | p1_2@93@01 | dead]
; [else-branch: 90 | !(p1_2@93@01) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 90 | !(p1_2@93@01)]
(assert (not p1_2@93@01))
(pop) ; 17
; [eval] !(p1_2 && (!ret1 && !except1))
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 91 | !(p1_2@93@01) | live]
; [else-branch: 91 | p1_2@93@01 | live]
(push) ; 18
; [then-branch: 91 | !(p1_2@93@01)]
(assert (not p1_2@93@01))
(pop) ; 18
(push) ; 18
; [else-branch: 91 | p1_2@93@01]
(assert p1_2@93@01)
; [eval] !ret1
(push) ; 19
; [then-branch: 92 | False | live]
; [else-branch: 92 | True | live]
(push) ; 20
; [then-branch: 92 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 92 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p1_2@93@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_2@93@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | !(p1_2@93@01) | live]
; [else-branch: 93 | p1_2@93@01 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 93 | !(p1_2@93@01)]
(assert (not p1_2@93@01))
; [eval] p2_2 && (!ret2 && !except2)
(push) ; 18
; [then-branch: 94 | !(p2_2@94@01) | live]
; [else-branch: 94 | p2_2@94@01 | live]
(push) ; 19
; [then-branch: 94 | !(p2_2@94@01)]
(assert (not p2_2@94@01))
(pop) ; 19
(push) ; 19
; [else-branch: 94 | p2_2@94@01]
(assert p2_2@94@01)
; [eval] !ret2
(push) ; 20
; [then-branch: 95 | False | live]
; [else-branch: 95 | True | live]
(push) ; 21
; [then-branch: 95 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 95 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p2_2@94@01 (not p2_2@94@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_2@94@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | p2_2@94@01 | dead]
; [else-branch: 96 | !(p2_2@94@01) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 96 | !(p2_2@94@01)]
(assert (not p2_2@94@01))
(pop) ; 18
; [eval] !(p2_2 && (!ret2 && !except2))
; [eval] p2_2 && (!ret2 && !except2)
(push) ; 18
; [then-branch: 97 | !(p2_2@94@01) | live]
; [else-branch: 97 | p2_2@94@01 | live]
(push) ; 19
; [then-branch: 97 | !(p2_2@94@01)]
(assert (not p2_2@94@01))
(pop) ; 19
(push) ; 19
; [else-branch: 97 | p2_2@94@01]
(assert p2_2@94@01)
; [eval] !ret2
(push) ; 20
; [then-branch: 98 | False | live]
; [else-branch: 98 | True | live]
(push) ; 21
; [then-branch: 98 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 98 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p2_2@94@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_2@94@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | !(p2_2@94@01) | live]
; [else-branch: 99 | p2_2@94@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 99 | !(p2_2@94@01)]
(assert (not p2_2@94@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | p1@14@01 | live]
; [else-branch: 100 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 100 | p1@14@01]
; [exec]
; tmp_ret1 := ret1
; [exec]
; ret1 := oldret1
; [exec]
; tmp_except1 := except1
; [exec]
; except1 := oldexcept1
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | p2@15@01 | live]
; [else-branch: 101 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 101 | p2@15@01]
; [exec]
; tmp_ret2 := ret2
; [exec]
; ret2 := oldret2
; [exec]
; tmp_except2 := except2
; [exec]
; except2 := oldexcept2
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 102 | !(p1@14@01) | live]
; [else-branch: 102 | p1@14@01 | live]
(push) ; 22
; [then-branch: 102 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 102 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 103 | False | live]
; [else-branch: 103 | True | live]
(push) ; 24
; [then-branch: 103 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 103 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 104 | p1@14@01 | live]
; [else-branch: 104 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 104 | p1@14@01]
; [exec]
; x_0 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168)))
; [eval] int___unbox__(_checkDefined(x_0, 3170168))
; [eval] _checkDefined(x_0, 3170168)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@89@01 3170168))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@89@01 3170168))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@89@01 3170168)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@89@01 3170168)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@89@01 3170168)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@89@01 3170168)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@89@01 3170168))))
(push) ; 22
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@89@01 3170168))))
(pop) ; 22
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@89@01 3170168))))
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@89@01 3170168)))))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@89@01 3170168)))))
(declare-const x_0@95@01 $Ref)
(assert (=
  x_0@95@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@89@01 3170168))))))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 22
(pop) ; 22
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 22
; [then-branch: 105 | !(p2@15@01) | live]
; [else-branch: 105 | p2@15@01 | live]
(push) ; 23
; [then-branch: 105 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 23
(push) ; 23
; [else-branch: 105 | p2@15@01]
; [eval] !ret2
(push) ; 24
; [then-branch: 106 | False | live]
; [else-branch: 106 | True | live]
(push) ; 25
; [then-branch: 106 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 106 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 107 | p2@15@01 | live]
; [else-branch: 107 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 107 | p2@15@01]
; [exec]
; x_0_0 := __prim__int___box__(int___mul__(2, int___unbox__(x_0_0)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(x_0_0)))
; [eval] int___mul__(2, int___unbox__(x_0_0))
; [eval] int___unbox__(x_0_0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> x_0_0@91@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0_0@91@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_0_0@91@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_0_0@91@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_0_0@91@01)))
(push) ; 23
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@91@01)))
(pop) ; 23
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@91@01)))
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@91@01))))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@91@01))))
(declare-const x_0_0@97@01 $Ref)
(assert (=
  x_0_0@97@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@91@01)))))
; [exec]
; inhale true
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | p1@14@01 | live]
; [else-branch: 108 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 108 | p1@14@01]
; [exec]
; ret1 := ret1 || tmp_ret1
; [eval] ret1 || tmp_ret1
(push) ; 24
; [then-branch: 109 | False | live]
; [else-branch: 109 | True | live]
(push) ; 25
; [then-branch: 109 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 109 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [exec]
; except1 := except1 || tmp_except1
; [eval] except1 || tmp_except1
(push) ; 24
; [then-branch: 110 | False | live]
; [else-branch: 110 | True | live]
(push) ; 25
; [then-branch: 110 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 110 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | p2@15@01 | live]
; [else-branch: 111 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 111 | p2@15@01]
; [exec]
; ret2 := ret2 || tmp_ret2
; [eval] ret2 || tmp_ret2
(push) ; 25
; [then-branch: 112 | False | live]
; [else-branch: 112 | True | live]
(push) ; 26
; [then-branch: 112 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 112 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [exec]
; except2 := except2 || tmp_except2
; [eval] except2 || tmp_except2
(push) ; 25
; [then-branch: 113 | False | live]
; [else-branch: 113 | True | live]
(push) ; 26
; [then-branch: 113 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 113 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 114 | !(p1@14@01) | live]
; [else-branch: 114 | p1@14@01 | live]
(push) ; 26
; [then-branch: 114 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 114 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 115 | False | live]
; [else-branch: 115 | True | live]
(push) ; 28
; [then-branch: 115 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 115 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | p1@14@01 | live]
; [else-branch: 116 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 116 | p1@14@01]
; [exec]
; _res := _checkDefined(x_0, 3170168)
; [eval] _checkDefined(x_0, 3170168)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@95@01 3170168))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@95@01 3170168))
(declare-const _res@99@01 $Ref)
(assert (= _res@99@01 (_checkDefined $Snap.unit x_0@95@01 3170168)))
; [exec]
; ret1 := true
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 117 | !(p2@15@01) | live]
; [else-branch: 117 | p2@15@01 | live]
(push) ; 27
; [then-branch: 117 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 27
(push) ; 27
; [else-branch: 117 | p2@15@01]
; [eval] !ret2
(push) ; 28
; [then-branch: 118 | False | live]
; [else-branch: 118 | True | live]
(push) ; 29
; [then-branch: 118 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 118 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | p2@15@01 | live]
; [else-branch: 119 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 119 | p2@15@01]
; [exec]
; _res_0 := x_0_0
; [exec]
; ret2 := true
; [exec]
; assert (p1 ==> !except1) && (p2 ==> !except2)
; [eval] p1 ==> !except1
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | p1@14@01 | live]
; [else-branch: 120 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 120 | p1@14@01]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> !except2
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 121 | p2@15@01 | live]
; [else-branch: 121 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 121 | p2@15@01]
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 122 | p1@14@01 | live]
; [else-branch: 122 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 122 | p1@14@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 123 | p2@15@01 | live]
; [else-branch: 123 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 123 | p2@15@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> issubtype(typeof(_res), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | p1@14@01 | live]
; [else-branch: 124 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 124 | p1@14@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@99@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@99@01) (as int<PyType>  PyType))))
; [eval] p2 ==> issubtype(typeof(_res_0), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | p2@15@01 | live]
; [else-branch: 125 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 125 | p2@15@01]
; [eval] issubtype(typeof(_res_0), int())
; [eval] typeof(_res_0)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> x_0_0@97@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> x_0_0@97@01) (as int<PyType>  PyType))))
; [eval] p1 ==> bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | p1@14@01 | live]
; [else-branch: 126 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 126 | p1@14@01]
; [eval] bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 127 | bool___unbox__(_, b@22@01) | live]
; [else-branch: 127 | !(bool___unbox__(_, b@22@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 127 | bool___unbox__(_, b@22@01)]
(assert (bool___unbox__ $Snap.unit b@22@01))
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> _res@99@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@99@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@99@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@99@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@99@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b@22@01)
  (and
    (bool___unbox__ $Snap.unit b@22@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res@99@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@99@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b@22@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (=>
      (bool___unbox__ $Snap.unit b@22@01)
      (and
        (bool___unbox__ $Snap.unit b@22@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res@99@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@99@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b@22@01))))
(push) ; 27
(assert (not (=>
  (and p1@14@01 (bool___unbox__ $Snap.unit b@22@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@99@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@14@01 (bool___unbox__ $Snap.unit b@22@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@99@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
; [eval] p2 ==> bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 128 | p2@15@01 | live]
; [else-branch: 128 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 128 | p2@15@01]
; [eval] bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
; [eval] bool___unbox__(b_9)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_9@23@01))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 129 | bool___unbox__(_, b_9@23@01) | live]
; [else-branch: 129 | !(bool___unbox__(_, b_9@23@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 129 | bool___unbox__(_, b_9@23@01)]
(assert (bool___unbox__ $Snap.unit b_9@23@01))
; [eval] int___eq__(_res_0, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> x_0_0@97@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0_0@97@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@97@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_0_0@97@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@97@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_9@23@01)
  (and
    (bool___unbox__ $Snap.unit b_9@23@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> x_0_0@97@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@97@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_9@23@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01)
    (=>
      (bool___unbox__ $Snap.unit b_9@23@01)
      (and
        (bool___unbox__ $Snap.unit b_9@23@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> x_0_0@97@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@97@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b_9@23@01))))
(push) ; 27
(assert (not (=>
  (and p2@15@01 (bool___unbox__ $Snap.unit b_9@23@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_0_0@97@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@15@01 (bool___unbox__ $Snap.unit b_9@23@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_0_0@97@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
; [eval] p1 ==> !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | p1@14@01 | live]
; [else-branch: 130 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 130 | p1@14@01]
; [eval] !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
; [eval] !bool___unbox__(b)
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 131 | !(bool___unbox__(_, b@22@01)) | dead]
; [else-branch: 131 | bool___unbox__(_, b@22@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 131 | bool___unbox__(_, b@22@01)]
(assert (bool___unbox__ $Snap.unit b@22@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (bool___unbox__ $Snap.unit b@22@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (bool___unbox__ $Snap.unit b@22@01))))
; [eval] p2 ==> !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | p2@15@01 | live]
; [else-branch: 132 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 132 | p2@15@01]
; [eval] !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
; [eval] !bool___unbox__(b_9)
; [eval] bool___unbox__(b_9)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 133 | !(bool___unbox__(_, b_9@23@01)) | dead]
; [else-branch: 133 | bool___unbox__(_, b_9@23@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 133 | bool___unbox__(_, b_9@23@01)]
(assert (bool___unbox__ $Snap.unit b_9@23@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (bool___unbox__ $Snap.unit b_9@23@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01)
    (bool___unbox__ $Snap.unit b_9@23@01))))
; [eval] p1 ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | p1@14@01 | live]
; [else-branch: 134 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 134 | p1@14@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 29
; [then-branch: 135 | False | live]
; [else-branch: 135 | True | live]
(push) ; 30
; [then-branch: 135 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 135 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 31
; [then-branch: 136 | False | live]
; [else-branch: 136 | True | live]
(push) ; 32
; [then-branch: 136 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 136 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 33
; [then-branch: 137 | False | live]
; [else-branch: 137 | True | live]
(push) ; 34
; [then-branch: 137 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 137 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | p2@15@01 | live]
; [else-branch: 138 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 138 | p2@15@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 29
; [then-branch: 139 | False | live]
; [else-branch: 139 | True | live]
(push) ; 30
; [then-branch: 139 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 139 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 31
; [then-branch: 140 | False | live]
; [else-branch: 140 | True | live]
(push) ; 32
; [then-branch: 140 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 140 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 33
; [then-branch: 141 | False | live]
; [else-branch: 141 | True | live]
(push) ; 34
; [then-branch: 141 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 141 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 142 | !(p2@15@01) | live]
; [else-branch: 142 | p2@15@01 | live]
(push) ; 27
; [then-branch: 142 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 27
(push) ; 27
; [else-branch: 142 | p2@15@01]
; [eval] !ret2
(push) ; 28
; [then-branch: 143 | False | live]
; [else-branch: 143 | True | live]
(push) ; 29
; [then-branch: 143 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 143 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 144 | !(p2@15@01) | dead]
; [else-branch: 144 | p2@15@01 | live]
(push) ; 26
; [else-branch: 144 | p2@15@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 145 | !(p1@14@01) | live]
; [else-branch: 145 | p1@14@01 | live]
(push) ; 26
; [then-branch: 145 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 145 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 146 | False | live]
; [else-branch: 146 | True | live]
(push) ; 28
; [then-branch: 146 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 146 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 147 | !(p1@14@01) | dead]
; [else-branch: 147 | p1@14@01 | live]
(push) ; 25
; [else-branch: 147 | p1@14@01]
(pop) ; 25
(pop) ; 24
; [eval] !p2
; [then-branch: 148 | !(p2@15@01) | dead]
; [else-branch: 148 | p2@15@01 | live]
(push) ; 24
; [else-branch: 148 | p2@15@01]
(pop) ; 24
(pop) ; 23
; [eval] !p1
; [then-branch: 149 | !(p1@14@01) | dead]
; [else-branch: 149 | p1@14@01 | live]
(push) ; 23
; [else-branch: 149 | p1@14@01]
(pop) ; 23
(pop) ; 22
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 22
; [then-branch: 150 | !(p2@15@01) | live]
; [else-branch: 150 | p2@15@01 | live]
(push) ; 23
; [then-branch: 150 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 23
(push) ; 23
; [else-branch: 150 | p2@15@01]
; [eval] !ret2
(push) ; 24
; [then-branch: 151 | False | live]
; [else-branch: 151 | True | live]
(push) ; 25
; [then-branch: 151 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 151 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 152 | !(p2@15@01) | dead]
; [else-branch: 152 | p2@15@01 | live]
(push) ; 22
; [else-branch: 152 | p2@15@01]
(pop) ; 22
(pop) ; 21
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 153 | !(p1@14@01) | live]
; [else-branch: 153 | p1@14@01 | live]
(push) ; 22
; [then-branch: 153 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 153 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 154 | False | live]
; [else-branch: 154 | True | live]
(push) ; 24
; [then-branch: 154 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 154 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 155 | !(p1@14@01) | dead]
; [else-branch: 155 | p1@14@01 | live]
(push) ; 21
; [else-branch: 155 | p1@14@01]
(pop) ; 21
(pop) ; 20
; [eval] !p2
; [then-branch: 156 | !(p2@15@01) | dead]
; [else-branch: 156 | p2@15@01 | live]
(push) ; 20
; [else-branch: 156 | p2@15@01]
(pop) ; 20
(pop) ; 19
; [eval] !p1
; [then-branch: 157 | !(p1@14@01) | dead]
; [else-branch: 157 | p1@14@01 | live]
(push) ; 19
; [else-branch: 157 | p1@14@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 158 | !(p2@15@01) | live]
; [else-branch: 158 | p2@15@01 | live]
(push) ; 17
; [then-branch: 158 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 17
(push) ; 17
; [else-branch: 158 | p2@15@01]
; [eval] !ret2
(push) ; 18
; [then-branch: 159 | False | live]
; [else-branch: 159 | True | live]
(push) ; 19
; [then-branch: 159 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 159 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 160 | !(p2@15@01) | dead]
; [else-branch: 160 | p2@15@01 | live]
(push) ; 16
; [else-branch: 160 | p2@15@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 15
; [then-branch: 161 | !(p1@14@01) | live]
; [else-branch: 161 | p1@14@01 | live]
(push) ; 16
; [then-branch: 161 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 161 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 162 | False | live]
; [else-branch: 162 | True | live]
(push) ; 18
; [then-branch: 162 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 162 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 163 | !(p1@14@01) | dead]
; [else-branch: 163 | p1@14@01 | live]
(push) ; 15
; [else-branch: 163 | p1@14@01]
(pop) ; 15
(pop) ; 14
; [eval] !(p2_1 && (!ret2 && !except2))
; [eval] p2_1 && (!ret2 && !except2)
(push) ; 14
; [then-branch: 164 | !(p2_1@88@01) | live]
; [else-branch: 164 | p2_1@88@01 | live]
(push) ; 15
; [then-branch: 164 | !(p2_1@88@01)]
(assert (not p2_1@88@01))
(pop) ; 15
(push) ; 15
; [else-branch: 164 | p2_1@88@01]
; [eval] !ret2
(push) ; 16
; [then-branch: 165 | False | live]
; [else-branch: 165 | True | live]
(push) ; 17
; [then-branch: 165 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 165 | True]
; [eval] !except2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 166 | !(p2_1@88@01) | dead]
; [else-branch: 166 | p2_1@88@01 | live]
(push) ; 14
; [else-branch: 166 | p2_1@88@01]
(pop) ; 14
(pop) ; 13
; [eval] !(p1_1 && (!ret1 && !except1))
; [eval] p1_1 && (!ret1 && !except1)
(push) ; 13
; [then-branch: 167 | !(p1_1@87@01) | live]
; [else-branch: 167 | p1_1@87@01 | live]
(push) ; 14
; [then-branch: 167 | !(p1_1@87@01)]
(assert (not p1_1@87@01))
(pop) ; 14
(push) ; 14
; [else-branch: 167 | p1_1@87@01]
; [eval] !ret1
(push) ; 15
; [then-branch: 168 | False | live]
; [else-branch: 168 | True | live]
(push) ; 16
; [then-branch: 168 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 168 | True]
; [eval] !except1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 169 | !(p1_1@87@01) | dead]
; [else-branch: 169 | p1_1@87@01 | live]
(push) ; 13
; [else-branch: 169 | p1_1@87@01]
(pop) ; 13
(pop) ; 12
; [eval] !p2_1
(push) ; 12
(set-option :timeout 10)
(assert (not p2_1@88@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | !(p2_1@88@01) | dead]
; [else-branch: 170 | p2_1@88@01 | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 170 | p2_1@88@01]
(assert p2_1@88@01)
(pop) ; 12
(pop) ; 11
; [eval] !p1_1
(push) ; 11
(set-option :timeout 10)
(assert (not p1_1@87@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | !(p1_1@87@01) | dead]
; [else-branch: 171 | p1_1@87@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 171 | p1_1@87@01]
(assert p1_1@87@01)
(pop) ; 11
(pop) ; 10
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 172 | !(p2_0@79@01) | live]
; [else-branch: 172 | p2_0@79@01 | live]
(push) ; 11
; [then-branch: 172 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 11
(push) ; 11
; [else-branch: 172 | p2_0@79@01]
; [eval] !ret2
(push) ; 12
; [then-branch: 173 | False | live]
; [else-branch: 173 | True | live]
(push) ; 13
; [then-branch: 173 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 173 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 174 | !(p2_0@79@01) | dead]
; [else-branch: 174 | p2_0@79@01 | live]
(push) ; 10
; [else-branch: 174 | p2_0@79@01]
(pop) ; 10
(pop) ; 9
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 9
; [then-branch: 175 | !(p1_0@78@01) | live]
; [else-branch: 175 | p1_0@78@01 | live]
(push) ; 10
; [then-branch: 175 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 10
(push) ; 10
; [else-branch: 175 | p1_0@78@01]
; [eval] !ret1
(push) ; 11
; [then-branch: 176 | False | live]
; [else-branch: 176 | True | live]
(push) ; 12
; [then-branch: 176 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 176 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 177 | !(p1_0@78@01) | dead]
; [else-branch: 177 | p1_0@78@01 | live]
(push) ; 9
; [else-branch: 177 | p1_0@78@01]
(pop) ; 9
(pop) ; 8
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 8
; [then-branch: 178 | !(p2_0@79@01) | live]
; [else-branch: 178 | p2_0@79@01 | live]
(push) ; 9
; [then-branch: 178 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 9
(push) ; 9
; [else-branch: 178 | p2_0@79@01]
; [eval] !ret2
(push) ; 10
; [then-branch: 179 | False | live]
; [else-branch: 179 | True | live]
(push) ; 11
; [then-branch: 179 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 179 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 180 | !(p2_0@79@01) | dead]
; [else-branch: 180 | p2_0@79@01 | live]
(push) ; 8
; [else-branch: 180 | p2_0@79@01]
(pop) ; 8
(pop) ; 7
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 181 | !(p1_0@78@01) | live]
; [else-branch: 181 | p1_0@78@01 | live]
(push) ; 8
; [then-branch: 181 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 8
(push) ; 8
; [else-branch: 181 | p1_0@78@01]
; [eval] !ret1
(push) ; 9
; [then-branch: 182 | False | live]
; [else-branch: 182 | True | live]
(push) ; 10
; [then-branch: 182 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 182 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 183 | !(p1_0@78@01) | dead]
; [else-branch: 183 | p1_0@78@01 | live]
(push) ; 7
; [else-branch: 183 | p1_0@78@01]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 53 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 6
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 6
; [then-branch: 184 | !(p2_0@79@01) | live]
; [else-branch: 184 | p2_0@79@01 | live]
(push) ; 7
; [then-branch: 184 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 7
(push) ; 7
; [else-branch: 184 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 8
; [then-branch: 185 | False | live]
; [else-branch: 185 | True | live]
(push) ; 9
; [then-branch: 185 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 185 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_0@79@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_0@79@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | !(p2_0@79@01) | live]
; [else-branch: 186 | p2_0@79@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 186 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 187 | !(p1_0@78@01) | live]
; [else-branch: 187 | p1_0@78@01 | live]
(push) ; 8
; [then-branch: 187 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 8
(push) ; 8
; [else-branch: 187 | p1_0@78@01]
; [eval] !ret1
(push) ; 9
; [then-branch: 188 | False | live]
; [else-branch: 188 | True | live]
(push) ; 10
; [then-branch: 188 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 188 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_0@78@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | p1_0@78@01 | live]
; [else-branch: 189 | !(p1_0@78@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 189 | p1_0@78@01]
; [exec]
; inhale typeof(MyException_res) == MyException()
(declare-const $t@100@01 $Snap)
(assert (= $t@100@01 $Snap.unit))
; [eval] typeof(MyException_res) == MyException()
; [eval] typeof(MyException_res)
; [eval] MyException()
(assert (= (typeof<PyType> tmp@82@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_0 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 190 | !(p2_0@79@01) | live]
; [else-branch: 190 | p2_0@79@01 | live]
(push) ; 9
; [then-branch: 190 | !(p2_0@79@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 190 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 10
; [then-branch: 191 | False | live]
; [else-branch: 191 | True | live]
(push) ; 11
; [then-branch: 191 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 191 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 192 | p2_0@79@01 | dead]
; [else-branch: 192 | !(p2_0@79@01) | live]
(push) ; 8
; [else-branch: 192 | !(p2_0@79@01)]
(pop) ; 8
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 8
; [then-branch: 193 | !(p2_0@79@01) | live]
; [else-branch: 193 | p2_0@79@01 | live]
(push) ; 9
; [then-branch: 193 | !(p2_0@79@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 193 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 10
; [then-branch: 194 | False | live]
; [else-branch: 194 | True | live]
(push) ; 11
; [then-branch: 194 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 194 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_0@79@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | !(p2_0@79@01) | live]
; [else-branch: 195 | p2_0@79@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 195 | !(p2_0@79@01)]
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 9
; [then-branch: 196 | !(p1_0@78@01) | live]
; [else-branch: 196 | p1_0@78@01 | live]
(push) ; 10
; [then-branch: 196 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 10
(push) ; 10
; [else-branch: 196 | p1_0@78@01]
; [eval] !ret1
(push) ; 11
; [then-branch: 197 | False | live]
; [else-branch: 197 | True | live]
(push) ; 12
; [then-branch: 197 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 197 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_0@78@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | p1_0@78@01 | live]
; [else-branch: 198 | !(p1_0@78@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 198 | p1_0@78@01]
; [exec]
; _err := MyException_res
; [exec]
; except1 := true
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 199 | !(p2_0@79@01) | live]
; [else-branch: 199 | p2_0@79@01 | live]
(push) ; 11
; [then-branch: 199 | !(p2_0@79@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 199 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 12
; [then-branch: 200 | False | live]
; [else-branch: 200 | True | live]
(push) ; 13
; [then-branch: 200 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 200 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 201 | p2_0@79@01 | dead]
; [else-branch: 201 | !(p2_0@79@01) | live]
(push) ; 10
; [else-branch: 201 | !(p2_0@79@01)]
(pop) ; 10
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 202 | !(p2_0@79@01) | live]
; [else-branch: 202 | p2_0@79@01 | live]
(push) ; 11
; [then-branch: 202 | !(p2_0@79@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 202 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 12
; [then-branch: 203 | False | live]
; [else-branch: 203 | True | live]
(push) ; 13
; [then-branch: 203 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 203 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_0@79@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 204 | !(p2_0@79@01) | live]
; [else-branch: 204 | p2_0@79@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 204 | !(p2_0@79@01)]
; [exec]
; thisexcept1 := except1 && !bypass1
; [eval] except1 && !bypass1
(push) ; 11
; [then-branch: 205 | False | live]
; [else-branch: 205 | True | live]
(push) ; 12
; [then-branch: 205 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 205 | True]
; [eval] !bypass1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1@101@01 Bool)
(assert (= thisexcept1@101@01 (not bypass1@76@01)))
; [exec]
; thisexcept2 := except2 && !bypass2
; [eval] except2 && !bypass2
; [exec]
; p1_1 := p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
; [eval] p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 206 | !(p1@14@01) | live]
; [else-branch: 206 | p1@14@01 | live]
(push) ; 12
; [then-branch: 206 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 12
(push) ; 12
; [else-branch: 206 | p1@14@01]
(push) ; 13
; [then-branch: 207 | !(thisexcept1@101@01) | live]
; [else-branch: 207 | thisexcept1@101@01 | live]
(push) ; 14
; [then-branch: 207 | !(thisexcept1@101@01)]
(assert (not thisexcept1@101@01))
(pop) ; 14
(push) ; 14
; [else-branch: 207 | thisexcept1@101@01]
(assert thisexcept1@101@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1@101@01 (not thisexcept1@101@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p1@14@01 (or thisexcept1@101@01 (not thisexcept1@101@01))))
(declare-const p1_1@102@01 Bool)
(assert (=
  p1_1@102@01
  (and
    p1@14@01
    (and
      thisexcept1@101@01
      (issubtype<Bool> (typeof<PyType> tmp@82@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_1 := p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
; [eval] p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
(push) ; 11
; [then-branch: 208 | !(p2@15@01) | live]
; [else-branch: 208 | p2@15@01 | live]
(push) ; 12
; [then-branch: 208 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 12
(push) ; 12
; [else-branch: 208 | p2@15@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_1@102@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not p1_1@102@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 209 | p1_1@102@01 | live]
; [else-branch: 209 | !(p1_1@102@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 209 | p1_1@102@01]
(assert p1_1@102@01)
; [exec]
; except1 := false
; [then-branch: 210 | False | dead]
; [else-branch: 210 | True | live]
(push) ; 12
; [else-branch: 210 | True]
(pop) ; 12
; [eval] !p2_1
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | True | live]
; [else-branch: 211 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 211 | True]
; [eval] p1_1 && (!ret1 && !except1)
(push) ; 13
; [then-branch: 212 | !(p1_1@102@01) | live]
; [else-branch: 212 | p1_1@102@01 | live]
(push) ; 14
; [then-branch: 212 | !(p1_1@102@01)]
(assert (not p1_1@102@01))
(pop) ; 14
(push) ; 14
; [else-branch: 212 | p1_1@102@01]
; [eval] !ret1
(push) ; 15
; [then-branch: 213 | False | live]
; [else-branch: 213 | True | live]
(push) ; 16
; [then-branch: 213 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 213 | True]
; [eval] !except1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p1_1@102@01 (not p1_1@102@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_1@102@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 214 | p1_1@102@01 | live]
; [else-branch: 214 | !(p1_1@102@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 214 | p1_1@102@01]
; [exec]
; x_0 := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const x_0@103@01 $Ref)
(assert (= x_0@103@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@104@01 $Snap)
(assert (= $t@104@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 14
(assert (_isDefined%precondition $Snap.unit 3170168))
(pop) ; 14
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170168))
(assert (_isDefined $Snap.unit 3170168))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && (!ret2 && !except2)
; [then-branch: 215 | False | dead]
; [else-branch: 215 | True | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 215 | True]
(pop) ; 14
; [eval] !(p2_1 && (!ret2 && !except2))
; [eval] p2_1 && (!ret2 && !except2)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 216 | True | live]
; [else-branch: 216 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 216 | True]
; [eval] p1 && (!ret1 && !except1)
(push) ; 15
; [then-branch: 217 | !(p1@14@01) | live]
; [else-branch: 217 | p1@14@01 | live]
(push) ; 16
; [then-branch: 217 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 217 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 218 | False | live]
; [else-branch: 218 | True | live]
(push) ; 18
; [then-branch: 218 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 218 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 219 | p1@14@01 | live]
; [else-branch: 219 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 219 | p1@14@01]
; [exec]
; _err := null
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 220 | !(p2@15@01) | live]
; [else-branch: 220 | p2@15@01 | live]
(push) ; 17
; [then-branch: 220 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 17
(push) ; 17
; [else-branch: 220 | p2@15@01]
; [eval] !ret2
(push) ; 18
; [then-branch: 221 | False | live]
; [else-branch: 221 | True | live]
(push) ; 19
; [then-branch: 221 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 221 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | p2@15@01 | live]
; [else-branch: 222 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 222 | p2@15@01]
; [exec]
; _err_0 := null
; [exec]
; p1_2 := p1 && !thisexcept1
; [eval] p1 && !thisexcept1
(push) ; 17
; [then-branch: 223 | !(p1@14@01) | live]
; [else-branch: 223 | p1@14@01 | live]
(push) ; 18
; [then-branch: 223 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 223 | p1@14@01]
; [eval] !thisexcept1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p1_2@105@01 Bool)
(assert (= p1_2@105@01 (and p1@14@01 (not thisexcept1@101@01))))
; [exec]
; p2_2 := p2 && !thisexcept2
; [eval] p2 && !thisexcept2
(push) ; 17
; [then-branch: 224 | !(p2@15@01) | live]
; [else-branch: 224 | p2@15@01 | live]
(push) ; 18
; [then-branch: 224 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 18
(push) ; 18
; [else-branch: 224 | p2@15@01]
; [eval] !thisexcept2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 225 | !(p1_2@105@01) | live]
; [else-branch: 225 | p1_2@105@01 | live]
(push) ; 18
; [then-branch: 225 | !(p1_2@105@01)]
(assert (not p1_2@105@01))
(pop) ; 18
(push) ; 18
; [else-branch: 225 | p1_2@105@01]
(assert p1_2@105@01)
; [eval] !ret1
(push) ; 19
; [then-branch: 226 | False | live]
; [else-branch: 226 | True | live]
(push) ; 20
; [then-branch: 226 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 226 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p1_2@105@01 (not p1_2@105@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_2@105@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | p1_2@105@01 | dead]
; [else-branch: 227 | !(p1_2@105@01) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 227 | !(p1_2@105@01)]
(assert (not p1_2@105@01))
(pop) ; 17
; [eval] !(p1_2 && (!ret1 && !except1))
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 228 | !(p1_2@105@01) | live]
; [else-branch: 228 | p1_2@105@01 | live]
(push) ; 18
; [then-branch: 228 | !(p1_2@105@01)]
(assert (not p1_2@105@01))
(pop) ; 18
(push) ; 18
; [else-branch: 228 | p1_2@105@01]
(assert p1_2@105@01)
; [eval] !ret1
(push) ; 19
; [then-branch: 229 | False | live]
; [else-branch: 229 | True | live]
(push) ; 20
; [then-branch: 229 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 229 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p1_2@105@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_2@105@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 230 | !(p1_2@105@01) | live]
; [else-branch: 230 | p1_2@105@01 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 230 | !(p1_2@105@01)]
(assert (not p1_2@105@01))
; [eval] p2_2 && (!ret2 && !except2)
(push) ; 18
; [then-branch: 231 | !(p2@15@01) | live]
; [else-branch: 231 | p2@15@01 | live]
(push) ; 19
; [then-branch: 231 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 19
(push) ; 19
; [else-branch: 231 | p2@15@01]
; [eval] !ret2
(push) ; 20
; [then-branch: 232 | False | live]
; [else-branch: 232 | True | live]
(push) ; 21
; [then-branch: 232 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 232 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | p2@15@01 | live]
; [else-branch: 233 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 233 | p2@15@01]
; [exec]
; x_0_0 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_0_0@106@01 $Ref)
(assert (= x_0_0@106@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale true
(declare-const $t@107@01 $Snap)
(assert (= $t@107@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 234 | p1@14@01 | live]
; [else-branch: 234 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 234 | p1@14@01]
; [exec]
; tmp_ret1 := ret1
; [exec]
; ret1 := oldret1
; [exec]
; tmp_except1 := except1
; [exec]
; except1 := oldexcept1
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | p2@15@01 | live]
; [else-branch: 235 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 235 | p2@15@01]
; [exec]
; tmp_ret2 := ret2
; [exec]
; ret2 := oldret2
; [exec]
; tmp_except2 := except2
; [exec]
; except2 := oldexcept2
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 236 | !(p1@14@01) | live]
; [else-branch: 236 | p1@14@01 | live]
(push) ; 22
; [then-branch: 236 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 236 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 237 | False | live]
; [else-branch: 237 | True | live]
(push) ; 24
; [then-branch: 237 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 237 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 238 | p1@14@01 | live]
; [else-branch: 238 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 238 | p1@14@01]
; [exec]
; x_0 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168)))
; [eval] int___unbox__(_checkDefined(x_0, 3170168))
; [eval] _checkDefined(x_0, 3170168)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@103@01 3170168))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@103@01 3170168))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@103@01 3170168)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@103@01 3170168)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@103@01 3170168)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@103@01 3170168)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@103@01 3170168))))
(push) ; 22
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@103@01 3170168))))
(pop) ; 22
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@103@01 3170168))))
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@103@01 3170168)))))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@103@01 3170168)))))
(declare-const x_0@108@01 $Ref)
(assert (=
  x_0@108@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@103@01 3170168))))))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@109@01 $Snap)
(assert (= $t@109@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 22
(pop) ; 22
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 22
; [then-branch: 239 | !(p2@15@01) | live]
; [else-branch: 239 | p2@15@01 | live]
(push) ; 23
; [then-branch: 239 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 23
(push) ; 23
; [else-branch: 239 | p2@15@01]
; [eval] !ret2
(push) ; 24
; [then-branch: 240 | False | live]
; [else-branch: 240 | True | live]
(push) ; 25
; [then-branch: 240 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 240 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | p2@15@01 | live]
; [else-branch: 241 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 241 | p2@15@01]
; [exec]
; x_0_0 := __prim__int___box__(int___mul__(2, int___unbox__(x_0_0)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(x_0_0)))
; [eval] int___mul__(2, int___unbox__(x_0_0))
; [eval] int___unbox__(x_0_0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> x_0_0@106@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0_0@106@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_0_0@106@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_0_0@106@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_0_0@106@01)))
(push) ; 23
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@106@01)))
(pop) ; 23
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@106@01)))
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@106@01))))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@106@01))))
(declare-const x_0_0@110@01 $Ref)
(assert (=
  x_0_0@110@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@106@01)))))
; [exec]
; inhale true
(declare-const $t@111@01 $Snap)
(assert (= $t@111@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | p1@14@01 | live]
; [else-branch: 242 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 242 | p1@14@01]
; [exec]
; ret1 := ret1 || tmp_ret1
; [eval] ret1 || tmp_ret1
(push) ; 24
; [then-branch: 243 | False | live]
; [else-branch: 243 | True | live]
(push) ; 25
; [then-branch: 243 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 243 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [exec]
; except1 := except1 || tmp_except1
; [eval] except1 || tmp_except1
(push) ; 24
; [then-branch: 244 | False | live]
; [else-branch: 244 | True | live]
(push) ; 25
; [then-branch: 244 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 244 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 245 | p2@15@01 | live]
; [else-branch: 245 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 245 | p2@15@01]
; [exec]
; ret2 := ret2 || tmp_ret2
; [eval] ret2 || tmp_ret2
(push) ; 25
; [then-branch: 246 | False | live]
; [else-branch: 246 | True | live]
(push) ; 26
; [then-branch: 246 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 246 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [exec]
; except2 := except2 || tmp_except2
; [eval] except2 || tmp_except2
(push) ; 25
; [then-branch: 247 | False | live]
; [else-branch: 247 | True | live]
(push) ; 26
; [then-branch: 247 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 247 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 248 | !(p1@14@01) | live]
; [else-branch: 248 | p1@14@01 | live]
(push) ; 26
; [then-branch: 248 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 248 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 249 | False | live]
; [else-branch: 249 | True | live]
(push) ; 28
; [then-branch: 249 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 249 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | p1@14@01 | live]
; [else-branch: 250 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 250 | p1@14@01]
; [exec]
; _res := _checkDefined(x_0, 3170168)
; [eval] _checkDefined(x_0, 3170168)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@108@01 3170168))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@108@01 3170168))
(declare-const _res@112@01 $Ref)
(assert (= _res@112@01 (_checkDefined $Snap.unit x_0@108@01 3170168)))
; [exec]
; ret1 := true
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 251 | !(p2@15@01) | live]
; [else-branch: 251 | p2@15@01 | live]
(push) ; 27
; [then-branch: 251 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 27
(push) ; 27
; [else-branch: 251 | p2@15@01]
; [eval] !ret2
(push) ; 28
; [then-branch: 252 | False | live]
; [else-branch: 252 | True | live]
(push) ; 29
; [then-branch: 252 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 252 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | p2@15@01 | live]
; [else-branch: 253 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 253 | p2@15@01]
; [exec]
; _res_0 := x_0_0
; [exec]
; ret2 := true
; [exec]
; assert (p1 ==> !except1) && (p2 ==> !except2)
; [eval] p1 ==> !except1
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | p1@14@01 | live]
; [else-branch: 254 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 254 | p1@14@01]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> !except2
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | p2@15@01 | live]
; [else-branch: 255 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 255 | p2@15@01]
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | p1@14@01 | live]
; [else-branch: 256 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 256 | p1@14@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 257 | p2@15@01 | live]
; [else-branch: 257 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 257 | p2@15@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> issubtype(typeof(_res), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 258 | p1@14@01 | live]
; [else-branch: 258 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 258 | p1@14@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@112@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@112@01) (as int<PyType>  PyType))))
; [eval] p2 ==> issubtype(typeof(_res_0), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 259 | p2@15@01 | live]
; [else-branch: 259 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 259 | p2@15@01]
; [eval] issubtype(typeof(_res_0), int())
; [eval] typeof(_res_0)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> x_0_0@110@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> x_0_0@110@01) (as int<PyType>  PyType))))
; [eval] p1 ==> bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | p1@14@01 | live]
; [else-branch: 260 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 260 | p1@14@01]
; [eval] bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | bool___unbox__(_, b@22@01) | live]
; [else-branch: 261 | !(bool___unbox__(_, b@22@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 261 | bool___unbox__(_, b@22@01)]
(assert (bool___unbox__ $Snap.unit b@22@01))
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> _res@112@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@112@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@112@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@112@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@112@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b@22@01)
  (and
    (bool___unbox__ $Snap.unit b@22@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res@112@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@112@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b@22@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (=>
      (bool___unbox__ $Snap.unit b@22@01)
      (and
        (bool___unbox__ $Snap.unit b@22@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res@112@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@112@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b@22@01))))
(push) ; 27
(assert (not (=>
  (and p1@14@01 (bool___unbox__ $Snap.unit b@22@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@112@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@14@01 (bool___unbox__ $Snap.unit b@22@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@112@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
; [eval] p2 ==> bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | p2@15@01 | live]
; [else-branch: 262 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 262 | p2@15@01]
; [eval] bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
; [eval] bool___unbox__(b_9)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_9@23@01))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | bool___unbox__(_, b_9@23@01) | dead]
; [else-branch: 263 | !(bool___unbox__(_, b_9@23@01)) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 263 | !(bool___unbox__(_, b_9@23@01))]
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01)
    (not (bool___unbox__ $Snap.unit b_9@23@01)))))
; [eval] p1 ==> !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | p1@14@01 | live]
; [else-branch: 264 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 264 | p1@14@01]
; [eval] !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
; [eval] !bool___unbox__(b)
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | !(bool___unbox__(_, b@22@01)) | dead]
; [else-branch: 265 | bool___unbox__(_, b@22@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 265 | bool___unbox__(_, b@22@01)]
(assert (bool___unbox__ $Snap.unit b@22@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (bool___unbox__ $Snap.unit b@22@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (bool___unbox__ $Snap.unit b@22@01))))
; [eval] p2 ==> !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 266 | p2@15@01 | live]
; [else-branch: 266 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 266 | p2@15@01]
; [eval] !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
; [eval] !bool___unbox__(b_9)
; [eval] bool___unbox__(b_9)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_9@23@01))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | !(bool___unbox__(_, b_9@23@01)) | live]
; [else-branch: 267 | bool___unbox__(_, b_9@23@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 267 | !(bool___unbox__(_, b_9@23@01))]
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
; [eval] int___eq__(_res_0, __prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> x_0_0@110@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0_0@110@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@110@01 (__prim__int___box__ $Snap.unit 2)))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_0_0@110@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@110@01 (__prim__int___box__ $Snap.unit 2))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_9@23@01))
  (and
    (not (bool___unbox__ $Snap.unit b_9@23@01))
    (__prim__int___box__%precondition $Snap.unit 2)
    (issubtype<Bool> (typeof<PyType> x_0_0@110@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@110@01 (__prim__int___box__ $Snap.unit 2)))))
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_9@23@01))
      (and
        (not (bool___unbox__ $Snap.unit b_9@23@01))
        (__prim__int___box__%precondition $Snap.unit 2)
        (issubtype<Bool> (typeof<PyType> x_0_0@110@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@110@01 (__prim__int___box__ $Snap.unit 2))))
    (not (bool___unbox__ $Snap.unit b_9@23@01)))))
(push) ; 27
(assert (not (=>
  (and p2@15@01 (not (bool___unbox__ $Snap.unit b_9@23@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_0_0@110@01 (__prim__int___box__ $Snap.unit 2)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@15@01 (not (bool___unbox__ $Snap.unit b_9@23@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_0_0@110@01 (__prim__int___box__ $Snap.unit 2))))
; [eval] p1 ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 268 | p1@14@01 | live]
; [else-branch: 268 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 268 | p1@14@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 29
; [then-branch: 269 | False | live]
; [else-branch: 269 | True | live]
(push) ; 30
; [then-branch: 269 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 269 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 31
; [then-branch: 270 | False | live]
; [else-branch: 270 | True | live]
(push) ; 32
; [then-branch: 270 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 270 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 33
; [then-branch: 271 | False | live]
; [else-branch: 271 | True | live]
(push) ; 34
; [then-branch: 271 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 271 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 272 | p2@15@01 | live]
; [else-branch: 272 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 272 | p2@15@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 29
; [then-branch: 273 | False | live]
; [else-branch: 273 | True | live]
(push) ; 30
; [then-branch: 273 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 273 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 31
; [then-branch: 274 | False | live]
; [else-branch: 274 | True | live]
(push) ; 32
; [then-branch: 274 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 274 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 33
; [then-branch: 275 | False | live]
; [else-branch: 275 | True | live]
(push) ; 34
; [then-branch: 275 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 275 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 276 | !(p2@15@01) | live]
; [else-branch: 276 | p2@15@01 | live]
(push) ; 27
; [then-branch: 276 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 27
(push) ; 27
; [else-branch: 276 | p2@15@01]
; [eval] !ret2
(push) ; 28
; [then-branch: 277 | False | live]
; [else-branch: 277 | True | live]
(push) ; 29
; [then-branch: 277 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 277 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 278 | !(p2@15@01) | dead]
; [else-branch: 278 | p2@15@01 | live]
(push) ; 26
; [else-branch: 278 | p2@15@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 279 | !(p1@14@01) | live]
; [else-branch: 279 | p1@14@01 | live]
(push) ; 26
; [then-branch: 279 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 279 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 280 | False | live]
; [else-branch: 280 | True | live]
(push) ; 28
; [then-branch: 280 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 280 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 281 | !(p1@14@01) | dead]
; [else-branch: 281 | p1@14@01 | live]
(push) ; 25
; [else-branch: 281 | p1@14@01]
(pop) ; 25
(pop) ; 24
; [eval] !p2
; [then-branch: 282 | !(p2@15@01) | dead]
; [else-branch: 282 | p2@15@01 | live]
(push) ; 24
; [else-branch: 282 | p2@15@01]
(pop) ; 24
(pop) ; 23
; [eval] !p1
; [then-branch: 283 | !(p1@14@01) | dead]
; [else-branch: 283 | p1@14@01 | live]
(push) ; 23
; [else-branch: 283 | p1@14@01]
(pop) ; 23
(pop) ; 22
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 22
; [then-branch: 284 | !(p2@15@01) | live]
; [else-branch: 284 | p2@15@01 | live]
(push) ; 23
; [then-branch: 284 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 23
(push) ; 23
; [else-branch: 284 | p2@15@01]
; [eval] !ret2
(push) ; 24
; [then-branch: 285 | False | live]
; [else-branch: 285 | True | live]
(push) ; 25
; [then-branch: 285 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 285 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 286 | !(p2@15@01) | dead]
; [else-branch: 286 | p2@15@01 | live]
(push) ; 22
; [else-branch: 286 | p2@15@01]
(pop) ; 22
(pop) ; 21
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 287 | !(p1@14@01) | live]
; [else-branch: 287 | p1@14@01 | live]
(push) ; 22
; [then-branch: 287 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 287 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 288 | False | live]
; [else-branch: 288 | True | live]
(push) ; 24
; [then-branch: 288 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 288 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 289 | !(p1@14@01) | dead]
; [else-branch: 289 | p1@14@01 | live]
(push) ; 21
; [else-branch: 289 | p1@14@01]
(pop) ; 21
(pop) ; 20
; [eval] !p2
; [then-branch: 290 | !(p2@15@01) | dead]
; [else-branch: 290 | p2@15@01 | live]
(push) ; 20
; [else-branch: 290 | p2@15@01]
(pop) ; 20
(pop) ; 19
; [eval] !p1
; [then-branch: 291 | !(p1@14@01) | dead]
; [else-branch: 291 | p1@14@01 | live]
(push) ; 19
; [else-branch: 291 | p1@14@01]
(pop) ; 19
(pop) ; 18
; [eval] !(p2_2 && (!ret2 && !except2))
; [eval] p2_2 && (!ret2 && !except2)
(push) ; 18
; [then-branch: 292 | !(p2@15@01) | live]
; [else-branch: 292 | p2@15@01 | live]
(push) ; 19
; [then-branch: 292 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 19
(push) ; 19
; [else-branch: 292 | p2@15@01]
; [eval] !ret2
(push) ; 20
; [then-branch: 293 | False | live]
; [else-branch: 293 | True | live]
(push) ; 21
; [then-branch: 293 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 293 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 294 | !(p2@15@01) | dead]
; [else-branch: 294 | p2@15@01 | live]
(push) ; 18
; [else-branch: 294 | p2@15@01]
(pop) ; 18
(pop) ; 17
(pop) ; 16
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 295 | !(p2@15@01) | live]
; [else-branch: 295 | p2@15@01 | live]
(push) ; 17
; [then-branch: 295 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 17
(push) ; 17
; [else-branch: 295 | p2@15@01]
; [eval] !ret2
(push) ; 18
; [then-branch: 296 | False | live]
; [else-branch: 296 | True | live]
(push) ; 19
; [then-branch: 296 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 296 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 297 | !(p2@15@01) | dead]
; [else-branch: 297 | p2@15@01 | live]
(push) ; 16
; [else-branch: 297 | p2@15@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 15
; [then-branch: 298 | !(p1@14@01) | live]
; [else-branch: 298 | p1@14@01 | live]
(push) ; 16
; [then-branch: 298 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 298 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 299 | False | live]
; [else-branch: 299 | True | live]
(push) ; 18
; [then-branch: 299 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 299 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 300 | !(p1@14@01) | dead]
; [else-branch: 300 | p1@14@01 | live]
(push) ; 15
; [else-branch: 300 | p1@14@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !(p1_1 && (!ret1 && !except1))
; [eval] p1_1 && (!ret1 && !except1)
(push) ; 13
; [then-branch: 301 | !(p1_1@102@01) | live]
; [else-branch: 301 | p1_1@102@01 | live]
(push) ; 14
; [then-branch: 301 | !(p1_1@102@01)]
(assert (not p1_1@102@01))
(pop) ; 14
(push) ; 14
; [else-branch: 301 | p1_1@102@01]
; [eval] !ret1
(push) ; 15
; [then-branch: 302 | False | live]
; [else-branch: 302 | True | live]
(push) ; 16
; [then-branch: 302 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 302 | True]
; [eval] !except1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 303 | !(p1_1@102@01) | dead]
; [else-branch: 303 | p1_1@102@01 | live]
(push) ; 13
; [else-branch: 303 | p1_1@102@01]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !p1_1
(push) ; 11
(set-option :timeout 10)
(assert (not p1_1@102@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | !(p1_1@102@01) | dead]
; [else-branch: 304 | p1_1@102@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 304 | p1_1@102@01]
(assert p1_1@102@01)
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 9
; [then-branch: 305 | !(p1_0@78@01) | live]
; [else-branch: 305 | p1_0@78@01 | live]
(push) ; 10
; [then-branch: 305 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 10
(push) ; 10
; [else-branch: 305 | p1_0@78@01]
; [eval] !ret1
(push) ; 11
; [then-branch: 306 | False | live]
; [else-branch: 306 | True | live]
(push) ; 12
; [then-branch: 306 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 306 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 307 | !(p1_0@78@01) | dead]
; [else-branch: 307 | p1_0@78@01 | live]
(push) ; 9
; [else-branch: 307 | p1_0@78@01]
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 308 | !(p1_0@78@01) | live]
; [else-branch: 308 | p1_0@78@01 | live]
(push) ; 8
; [then-branch: 308 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 8
(push) ; 8
; [else-branch: 308 | p1_0@78@01]
; [eval] !ret1
(push) ; 9
; [then-branch: 309 | False | live]
; [else-branch: 309 | True | live]
(push) ; 10
; [then-branch: 309 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 309 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 310 | !(p1_0@78@01) | dead]
; [else-branch: 310 | p1_0@78@01 | live]
(push) ; 7
; [else-branch: 310 | p1_0@78@01]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 186 | p2_0@79@01]
(assert p2_0@79@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 50 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 5
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 5
; [then-branch: 311 | !(p1_0@78@01) | live]
; [else-branch: 311 | p1_0@78@01 | live]
(push) ; 6
; [then-branch: 311 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
(pop) ; 6
(push) ; 6
; [else-branch: 311 | p1_0@78@01]
(assert p1_0@78@01)
; [eval] !ret1
(push) ; 7
; [then-branch: 312 | False | live]
; [else-branch: 312 | True | live]
(push) ; 8
; [then-branch: 312 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 312 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_0@78@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_0@78@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 313 | !(p1_0@78@01) | live]
; [else-branch: 313 | p1_0@78@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 313 | !(p1_0@78@01)]
(assert (not p1_0@78@01))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 6
; [then-branch: 314 | !(p2_0@79@01) | live]
; [else-branch: 314 | p2_0@79@01 | live]
(push) ; 7
; [then-branch: 314 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 7
(push) ; 7
; [else-branch: 314 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 8
; [then-branch: 315 | False | live]
; [else-branch: 315 | True | live]
(push) ; 9
; [then-branch: 315 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 315 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_0@79@01 (not p2_0@79@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_0@79@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_0@79@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 316 | p2_0@79@01 | live]
; [else-branch: 316 | !(p2_0@79@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 316 | p2_0@79@01]
(assert p2_0@79@01)
; [exec]
; MyException_res_9 := tmp
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 317 | !(p1_0@78@01) | live]
; [else-branch: 317 | p1_0@78@01 | live]
(push) ; 8
; [then-branch: 317 | !(p1_0@78@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 317 | p1_0@78@01]
(assert p1_0@78@01)
; [eval] !ret1
(push) ; 9
; [then-branch: 318 | False | live]
; [else-branch: 318 | True | live]
(push) ; 10
; [then-branch: 318 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 318 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 319 | p1_0@78@01 | dead]
; [else-branch: 319 | !(p1_0@78@01) | live]
(push) ; 7
; [else-branch: 319 | !(p1_0@78@01)]
(pop) ; 7
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 320 | !(p1_0@78@01) | live]
; [else-branch: 320 | p1_0@78@01 | live]
(push) ; 8
; [then-branch: 320 | !(p1_0@78@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 320 | p1_0@78@01]
(assert p1_0@78@01)
; [eval] !ret1
(push) ; 9
; [then-branch: 321 | False | live]
; [else-branch: 321 | True | live]
(push) ; 10
; [then-branch: 321 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 321 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_0@78@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 322 | !(p1_0@78@01) | live]
; [else-branch: 322 | p1_0@78@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 322 | !(p1_0@78@01)]
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 8
; [then-branch: 323 | !(p2_0@79@01) | live]
; [else-branch: 323 | p2_0@79@01 | live]
(push) ; 9
; [then-branch: 323 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 9
(push) ; 9
; [else-branch: 323 | p2_0@79@01]
; [eval] !ret2
(push) ; 10
; [then-branch: 324 | False | live]
; [else-branch: 324 | True | live]
(push) ; 11
; [then-branch: 324 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 324 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_0@79@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | p2_0@79@01 | live]
; [else-branch: 325 | !(p2_0@79@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 325 | p2_0@79@01]
; [exec]
; inhale typeof(MyException_res_9) == MyException()
(declare-const $t@113@01 $Snap)
(assert (= $t@113@01 $Snap.unit))
; [eval] typeof(MyException_res_9) == MyException()
; [eval] typeof(MyException_res_9)
; [eval] MyException()
(assert (= (typeof<PyType> tmp@82@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_0 && (!ret1 && !except1)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 326 | !(p1_0@78@01) | live]
; [else-branch: 326 | p1_0@78@01 | live]
(push) ; 10
; [then-branch: 326 | !(p1_0@78@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 326 | p1_0@78@01]
(assert p1_0@78@01)
; [eval] !ret1
(push) ; 11
; [then-branch: 327 | False | live]
; [else-branch: 327 | True | live]
(push) ; 12
; [then-branch: 327 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 327 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 328 | p1_0@78@01 | dead]
; [else-branch: 328 | !(p1_0@78@01) | live]
(push) ; 9
; [else-branch: 328 | !(p1_0@78@01)]
(pop) ; 9
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 9
; [then-branch: 329 | !(p1_0@78@01) | live]
; [else-branch: 329 | p1_0@78@01 | live]
(push) ; 10
; [then-branch: 329 | !(p1_0@78@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 329 | p1_0@78@01]
(assert p1_0@78@01)
; [eval] !ret1
(push) ; 11
; [then-branch: 330 | False | live]
; [else-branch: 330 | True | live]
(push) ; 12
; [then-branch: 330 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 330 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_0@78@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 331 | !(p1_0@78@01) | live]
; [else-branch: 331 | p1_0@78@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 331 | !(p1_0@78@01)]
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 332 | !(p2_0@79@01) | live]
; [else-branch: 332 | p2_0@79@01 | live]
(push) ; 11
; [then-branch: 332 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 11
(push) ; 11
; [else-branch: 332 | p2_0@79@01]
; [eval] !ret2
(push) ; 12
; [then-branch: 333 | False | live]
; [else-branch: 333 | True | live]
(push) ; 13
; [then-branch: 333 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 333 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_0@79@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 334 | p2_0@79@01 | live]
; [else-branch: 334 | !(p2_0@79@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 334 | p2_0@79@01]
; [exec]
; _err_0 := MyException_res_9
; [exec]
; except2 := true
; [exec]
; thisexcept1 := except1 && !bypass1
; [eval] except1 && !bypass1
; [exec]
; thisexcept2 := except2 && !bypass2
; [eval] except2 && !bypass2
(push) ; 11
; [then-branch: 335 | False | live]
; [else-branch: 335 | True | live]
(push) ; 12
; [then-branch: 335 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 335 | True]
; [eval] !bypass2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2@114@01 Bool)
(assert (= thisexcept2@114@01 (not bypass2@77@01)))
; [exec]
; p1_1 := p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
; [eval] p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 336 | !(p1@14@01) | live]
; [else-branch: 336 | p1@14@01 | live]
(push) ; 12
; [then-branch: 336 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 12
(push) ; 12
; [else-branch: 336 | p1@14@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [exec]
; p2_1 := p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
; [eval] p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
(push) ; 11
; [then-branch: 337 | !(p2@15@01) | live]
; [else-branch: 337 | p2@15@01 | live]
(push) ; 12
; [then-branch: 337 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 12
(push) ; 12
; [else-branch: 337 | p2@15@01]
(push) ; 13
; [then-branch: 338 | !(thisexcept2@114@01) | live]
; [else-branch: 338 | thisexcept2@114@01 | live]
(push) ; 14
; [then-branch: 338 | !(thisexcept2@114@01)]
(assert (not thisexcept2@114@01))
(pop) ; 14
(push) ; 14
; [else-branch: 338 | thisexcept2@114@01]
(assert thisexcept2@114@01)
; [eval] issubtype(typeof(_err_0), MyException())
; [eval] typeof(_err_0)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2@114@01 (not thisexcept2@114@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p2@15@01 (or thisexcept2@114@01 (not thisexcept2@114@01))))
(declare-const p2_1@115@01 Bool)
(assert (=
  p2_1@115@01
  (and
    p2@15@01
    (and
      thisexcept2@114@01
      (issubtype<Bool> (typeof<PyType> tmp@82@01) (as MyException<PyType>  PyType))))))
; [then-branch: 339 | False | dead]
; [else-branch: 339 | True | live]
(push) ; 11
; [else-branch: 339 | True]
(pop) ; 11
; [eval] !p1_1
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | True | live]
; [else-branch: 340 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 340 | True]
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_1@115@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not p2_1@115@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 341 | p2_1@115@01 | live]
; [else-branch: 341 | !(p2_1@115@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 341 | p2_1@115@01]
(assert p2_1@115@01)
; [exec]
; except2 := false
; [eval] p1_1 && (!ret1 && !except1)
; [then-branch: 342 | False | dead]
; [else-branch: 342 | True | live]
(push) ; 13
; [else-branch: 342 | True]
(pop) ; 13
; [eval] !(p1_1 && (!ret1 && !except1))
; [eval] p1_1 && (!ret1 && !except1)
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | True | live]
; [else-branch: 343 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 343 | True]
; [eval] p2_1 && (!ret2 && !except2)
(push) ; 14
; [then-branch: 344 | !(p2_1@115@01) | live]
; [else-branch: 344 | p2_1@115@01 | live]
(push) ; 15
; [then-branch: 344 | !(p2_1@115@01)]
(assert (not p2_1@115@01))
(pop) ; 15
(push) ; 15
; [else-branch: 344 | p2_1@115@01]
; [eval] !ret2
(push) ; 16
; [then-branch: 345 | False | live]
; [else-branch: 345 | True | live]
(push) ; 17
; [then-branch: 345 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 345 | True]
; [eval] !except2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p2_1@115@01 (not p2_1@115@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_1@115@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 346 | p2_1@115@01 | live]
; [else-branch: 346 | !(p2_1@115@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 346 | p2_1@115@01]
; [exec]
; x_0_0 := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const x_0_0@116@01 $Ref)
(assert (= x_0_0@116@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; inhale true
(declare-const $t@117@01 $Snap)
(assert (= $t@117@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1 && (!ret1 && !except1)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 347 | !(p1@14@01) | live]
; [else-branch: 347 | p1@14@01 | live]
(push) ; 16
; [then-branch: 347 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 347 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 348 | False | live]
; [else-branch: 348 | True | live]
(push) ; 18
; [then-branch: 348 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 348 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 349 | p1@14@01 | live]
; [else-branch: 349 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 349 | p1@14@01]
; [exec]
; _err := null
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 350 | !(p2@15@01) | live]
; [else-branch: 350 | p2@15@01 | live]
(push) ; 17
; [then-branch: 350 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 17
(push) ; 17
; [else-branch: 350 | p2@15@01]
; [eval] !ret2
(push) ; 18
; [then-branch: 351 | False | live]
; [else-branch: 351 | True | live]
(push) ; 19
; [then-branch: 351 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 351 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 352 | p2@15@01 | live]
; [else-branch: 352 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 352 | p2@15@01]
; [exec]
; _err_0 := null
; [exec]
; p1_2 := p1 && !thisexcept1
; [eval] p1 && !thisexcept1
(push) ; 17
; [then-branch: 353 | !(p1@14@01) | live]
; [else-branch: 353 | p1@14@01 | live]
(push) ; 18
; [then-branch: 353 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 353 | p1@14@01]
; [eval] !thisexcept1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [exec]
; p2_2 := p2 && !thisexcept2
; [eval] p2 && !thisexcept2
(push) ; 17
; [then-branch: 354 | !(p2@15@01) | live]
; [else-branch: 354 | p2@15@01 | live]
(push) ; 18
; [then-branch: 354 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 18
(push) ; 18
; [else-branch: 354 | p2@15@01]
; [eval] !thisexcept2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p2_2@118@01 Bool)
(assert (= p2_2@118@01 (and p2@15@01 (not thisexcept2@114@01))))
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 355 | !(p1@14@01) | live]
; [else-branch: 355 | p1@14@01 | live]
(push) ; 18
; [then-branch: 355 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 355 | p1@14@01]
; [eval] !ret1
(push) ; 19
; [then-branch: 356 | False | live]
; [else-branch: 356 | True | live]
(push) ; 20
; [then-branch: 356 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 356 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 357 | p1@14@01 | live]
; [else-branch: 357 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 357 | p1@14@01]
; [exec]
; x_0 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 18
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 18
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_0@119@01 $Ref)
(assert (= x_0@119@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 18
(assert (_isDefined%precondition $Snap.unit 3170168))
(pop) ; 18
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170168))
(assert (_isDefined $Snap.unit 3170168))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_2 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 18
; [then-branch: 358 | !(p2_2@118@01) | live]
; [else-branch: 358 | p2_2@118@01 | live]
(push) ; 19
; [then-branch: 358 | !(p2_2@118@01)]
(assert (not p2_2@118@01))
(pop) ; 19
(push) ; 19
; [else-branch: 358 | p2_2@118@01]
(assert p2_2@118@01)
; [eval] !ret2
(push) ; 20
; [then-branch: 359 | False | live]
; [else-branch: 359 | True | live]
(push) ; 21
; [then-branch: 359 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 359 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p2_2@118@01 (not p2_2@118@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_2@118@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 360 | p2_2@118@01 | dead]
; [else-branch: 360 | !(p2_2@118@01) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 360 | !(p2_2@118@01)]
(assert (not p2_2@118@01))
(pop) ; 18
; [eval] !(p2_2 && (!ret2 && !except2))
; [eval] p2_2 && (!ret2 && !except2)
(push) ; 18
; [then-branch: 361 | !(p2_2@118@01) | live]
; [else-branch: 361 | p2_2@118@01 | live]
(push) ; 19
; [then-branch: 361 | !(p2_2@118@01)]
(assert (not p2_2@118@01))
(pop) ; 19
(push) ; 19
; [else-branch: 361 | p2_2@118@01]
(assert p2_2@118@01)
; [eval] !ret2
(push) ; 20
; [then-branch: 362 | False | live]
; [else-branch: 362 | True | live]
(push) ; 21
; [then-branch: 362 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 362 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p2_2@118@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_2@118@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | !(p2_2@118@01) | live]
; [else-branch: 363 | p2_2@118@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 363 | !(p2_2@118@01)]
(assert (not p2_2@118@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 364 | p1@14@01 | live]
; [else-branch: 364 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 364 | p1@14@01]
; [exec]
; tmp_ret1 := ret1
; [exec]
; ret1 := oldret1
; [exec]
; tmp_except1 := except1
; [exec]
; except1 := oldexcept1
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | p2@15@01 | live]
; [else-branch: 365 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 365 | p2@15@01]
; [exec]
; tmp_ret2 := ret2
; [exec]
; ret2 := oldret2
; [exec]
; tmp_except2 := except2
; [exec]
; except2 := oldexcept2
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 366 | !(p1@14@01) | live]
; [else-branch: 366 | p1@14@01 | live]
(push) ; 22
; [then-branch: 366 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 366 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 367 | False | live]
; [else-branch: 367 | True | live]
(push) ; 24
; [then-branch: 367 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 367 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | p1@14@01 | live]
; [else-branch: 368 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 368 | p1@14@01]
; [exec]
; x_0 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168)))
; [eval] int___unbox__(_checkDefined(x_0, 3170168))
; [eval] _checkDefined(x_0, 3170168)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@119@01 3170168))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@119@01 3170168))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@119@01 3170168)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@119@01 3170168)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@119@01 3170168)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@119@01 3170168)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@119@01 3170168))))
(push) ; 22
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@119@01 3170168))))
(pop) ; 22
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@119@01 3170168))))
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@119@01 3170168)))))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@119@01 3170168)))))
(declare-const x_0@121@01 $Ref)
(assert (=
  x_0@121@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@119@01 3170168))))))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 22
(pop) ; 22
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 22
; [then-branch: 369 | !(p2@15@01) | live]
; [else-branch: 369 | p2@15@01 | live]
(push) ; 23
; [then-branch: 369 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 23
(push) ; 23
; [else-branch: 369 | p2@15@01]
; [eval] !ret2
(push) ; 24
; [then-branch: 370 | False | live]
; [else-branch: 370 | True | live]
(push) ; 25
; [then-branch: 370 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 370 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 371 | p2@15@01 | live]
; [else-branch: 371 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 371 | p2@15@01]
; [exec]
; x_0_0 := __prim__int___box__(int___mul__(2, int___unbox__(x_0_0)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(x_0_0)))
; [eval] int___mul__(2, int___unbox__(x_0_0))
; [eval] int___unbox__(x_0_0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> x_0_0@116@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0_0@116@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_0_0@116@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_0_0@116@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_0_0@116@01)))
(push) ; 23
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@116@01)))
(pop) ; 23
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@116@01)))
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@116@01))))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@116@01))))
(declare-const x_0_0@123@01 $Ref)
(assert (=
  x_0_0@123@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@116@01)))))
; [exec]
; inhale true
(declare-const $t@124@01 $Snap)
(assert (= $t@124@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 372 | p1@14@01 | live]
; [else-branch: 372 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 372 | p1@14@01]
; [exec]
; ret1 := ret1 || tmp_ret1
; [eval] ret1 || tmp_ret1
(push) ; 24
; [then-branch: 373 | False | live]
; [else-branch: 373 | True | live]
(push) ; 25
; [then-branch: 373 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 373 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [exec]
; except1 := except1 || tmp_except1
; [eval] except1 || tmp_except1
(push) ; 24
; [then-branch: 374 | False | live]
; [else-branch: 374 | True | live]
(push) ; 25
; [then-branch: 374 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 374 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 375 | p2@15@01 | live]
; [else-branch: 375 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 375 | p2@15@01]
; [exec]
; ret2 := ret2 || tmp_ret2
; [eval] ret2 || tmp_ret2
(push) ; 25
; [then-branch: 376 | False | live]
; [else-branch: 376 | True | live]
(push) ; 26
; [then-branch: 376 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 376 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [exec]
; except2 := except2 || tmp_except2
; [eval] except2 || tmp_except2
(push) ; 25
; [then-branch: 377 | False | live]
; [else-branch: 377 | True | live]
(push) ; 26
; [then-branch: 377 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 377 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 378 | !(p1@14@01) | live]
; [else-branch: 378 | p1@14@01 | live]
(push) ; 26
; [then-branch: 378 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 378 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 379 | False | live]
; [else-branch: 379 | True | live]
(push) ; 28
; [then-branch: 379 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 379 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 380 | p1@14@01 | live]
; [else-branch: 380 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 380 | p1@14@01]
; [exec]
; _res := _checkDefined(x_0, 3170168)
; [eval] _checkDefined(x_0, 3170168)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@121@01 3170168))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@121@01 3170168))
(declare-const _res@125@01 $Ref)
(assert (= _res@125@01 (_checkDefined $Snap.unit x_0@121@01 3170168)))
; [exec]
; ret1 := true
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 381 | !(p2@15@01) | live]
; [else-branch: 381 | p2@15@01 | live]
(push) ; 27
; [then-branch: 381 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 27
(push) ; 27
; [else-branch: 381 | p2@15@01]
; [eval] !ret2
(push) ; 28
; [then-branch: 382 | False | live]
; [else-branch: 382 | True | live]
(push) ; 29
; [then-branch: 382 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 382 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 383 | p2@15@01 | live]
; [else-branch: 383 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 383 | p2@15@01]
; [exec]
; _res_0 := x_0_0
; [exec]
; ret2 := true
; [exec]
; assert (p1 ==> !except1) && (p2 ==> !except2)
; [eval] p1 ==> !except1
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 384 | p1@14@01 | live]
; [else-branch: 384 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 384 | p1@14@01]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> !except2
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 385 | p2@15@01 | live]
; [else-branch: 385 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 385 | p2@15@01]
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 386 | p1@14@01 | live]
; [else-branch: 386 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 386 | p1@14@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 387 | p2@15@01 | live]
; [else-branch: 387 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 387 | p2@15@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> issubtype(typeof(_res), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 388 | p1@14@01 | live]
; [else-branch: 388 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 388 | p1@14@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@125@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@125@01) (as int<PyType>  PyType))))
; [eval] p2 ==> issubtype(typeof(_res_0), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | p2@15@01 | live]
; [else-branch: 389 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 389 | p2@15@01]
; [eval] issubtype(typeof(_res_0), int())
; [eval] typeof(_res_0)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> x_0_0@123@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> x_0_0@123@01) (as int<PyType>  PyType))))
; [eval] p1 ==> bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | p1@14@01 | live]
; [else-branch: 390 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 390 | p1@14@01]
; [eval] bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 391 | bool___unbox__(_, b@22@01) | dead]
; [else-branch: 391 | !(bool___unbox__(_, b@22@01)) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 391 | !(bool___unbox__(_, b@22@01))]
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (not (bool___unbox__ $Snap.unit b@22@01)))))
; [eval] p2 ==> bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 392 | p2@15@01 | live]
; [else-branch: 392 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 392 | p2@15@01]
; [eval] bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
; [eval] bool___unbox__(b_9)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_9@23@01))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 393 | bool___unbox__(_, b_9@23@01) | live]
; [else-branch: 393 | !(bool___unbox__(_, b_9@23@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 393 | bool___unbox__(_, b_9@23@01)]
(assert (bool___unbox__ $Snap.unit b_9@23@01))
; [eval] int___eq__(_res_0, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> x_0_0@123@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0_0@123@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@123@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_0_0@123@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@123@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_9@23@01)
  (and
    (bool___unbox__ $Snap.unit b_9@23@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> x_0_0@123@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@123@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_9@23@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01)
    (=>
      (bool___unbox__ $Snap.unit b_9@23@01)
      (and
        (bool___unbox__ $Snap.unit b_9@23@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> x_0_0@123@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@123@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b_9@23@01))))
(push) ; 27
(assert (not (=>
  (and p2@15@01 (bool___unbox__ $Snap.unit b_9@23@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_0_0@123@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@15@01 (bool___unbox__ $Snap.unit b_9@23@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_0_0@123@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
; [eval] p1 ==> !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 394 | p1@14@01 | live]
; [else-branch: 394 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 394 | p1@14@01]
; [eval] !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
; [eval] !bool___unbox__(b)
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 395 | !(bool___unbox__(_, b@22@01)) | live]
; [else-branch: 395 | bool___unbox__(_, b@22@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 395 | !(bool___unbox__(_, b@22@01))]
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
; [eval] int___eq__(_res, __prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> _res@125@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@125@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@125@01 (__prim__int___box__ $Snap.unit 2)))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@125@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@125@01 (__prim__int___box__ $Snap.unit 2))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b@22@01))
  (and
    (not (bool___unbox__ $Snap.unit b@22@01))
    (__prim__int___box__%precondition $Snap.unit 2)
    (issubtype<Bool> (typeof<PyType> _res@125@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@125@01 (__prim__int___box__ $Snap.unit 2)))))
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (=>
      (not (bool___unbox__ $Snap.unit b@22@01))
      (and
        (not (bool___unbox__ $Snap.unit b@22@01))
        (__prim__int___box__%precondition $Snap.unit 2)
        (issubtype<Bool> (typeof<PyType> _res@125@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@125@01 (__prim__int___box__ $Snap.unit 2))))
    (not (bool___unbox__ $Snap.unit b@22@01)))))
(push) ; 27
(assert (not (=>
  (and p1@14@01 (not (bool___unbox__ $Snap.unit b@22@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@125@01 (__prim__int___box__ $Snap.unit 2)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@14@01 (not (bool___unbox__ $Snap.unit b@22@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@125@01 (__prim__int___box__ $Snap.unit 2))))
; [eval] p2 ==> !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | p2@15@01 | live]
; [else-branch: 396 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 396 | p2@15@01]
; [eval] !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
; [eval] !bool___unbox__(b_9)
; [eval] bool___unbox__(b_9)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 397 | !(bool___unbox__(_, b_9@23@01)) | dead]
; [else-branch: 397 | bool___unbox__(_, b_9@23@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 397 | bool___unbox__(_, b_9@23@01)]
(assert (bool___unbox__ $Snap.unit b_9@23@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (bool___unbox__ $Snap.unit b_9@23@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01)
    (bool___unbox__ $Snap.unit b_9@23@01))))
; [eval] p1 ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 398 | p1@14@01 | live]
; [else-branch: 398 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 398 | p1@14@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 29
; [then-branch: 399 | False | live]
; [else-branch: 399 | True | live]
(push) ; 30
; [then-branch: 399 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 399 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 31
; [then-branch: 400 | False | live]
; [else-branch: 400 | True | live]
(push) ; 32
; [then-branch: 400 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 400 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 33
; [then-branch: 401 | False | live]
; [else-branch: 401 | True | live]
(push) ; 34
; [then-branch: 401 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 401 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | p2@15@01 | live]
; [else-branch: 402 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 402 | p2@15@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 29
; [then-branch: 403 | False | live]
; [else-branch: 403 | True | live]
(push) ; 30
; [then-branch: 403 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 403 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 31
; [then-branch: 404 | False | live]
; [else-branch: 404 | True | live]
(push) ; 32
; [then-branch: 404 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 404 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 33
; [then-branch: 405 | False | live]
; [else-branch: 405 | True | live]
(push) ; 34
; [then-branch: 405 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 405 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 406 | !(p2@15@01) | live]
; [else-branch: 406 | p2@15@01 | live]
(push) ; 27
; [then-branch: 406 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 27
(push) ; 27
; [else-branch: 406 | p2@15@01]
; [eval] !ret2
(push) ; 28
; [then-branch: 407 | False | live]
; [else-branch: 407 | True | live]
(push) ; 29
; [then-branch: 407 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 407 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 408 | !(p2@15@01) | dead]
; [else-branch: 408 | p2@15@01 | live]
(push) ; 26
; [else-branch: 408 | p2@15@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 409 | !(p1@14@01) | live]
; [else-branch: 409 | p1@14@01 | live]
(push) ; 26
; [then-branch: 409 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 409 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 410 | False | live]
; [else-branch: 410 | True | live]
(push) ; 28
; [then-branch: 410 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 410 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 411 | !(p1@14@01) | dead]
; [else-branch: 411 | p1@14@01 | live]
(push) ; 25
; [else-branch: 411 | p1@14@01]
(pop) ; 25
(pop) ; 24
; [eval] !p2
; [then-branch: 412 | !(p2@15@01) | dead]
; [else-branch: 412 | p2@15@01 | live]
(push) ; 24
; [else-branch: 412 | p2@15@01]
(pop) ; 24
(pop) ; 23
; [eval] !p1
; [then-branch: 413 | !(p1@14@01) | dead]
; [else-branch: 413 | p1@14@01 | live]
(push) ; 23
; [else-branch: 413 | p1@14@01]
(pop) ; 23
(pop) ; 22
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 22
; [then-branch: 414 | !(p2@15@01) | live]
; [else-branch: 414 | p2@15@01 | live]
(push) ; 23
; [then-branch: 414 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 23
(push) ; 23
; [else-branch: 414 | p2@15@01]
; [eval] !ret2
(push) ; 24
; [then-branch: 415 | False | live]
; [else-branch: 415 | True | live]
(push) ; 25
; [then-branch: 415 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 415 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 416 | !(p2@15@01) | dead]
; [else-branch: 416 | p2@15@01 | live]
(push) ; 22
; [else-branch: 416 | p2@15@01]
(pop) ; 22
(pop) ; 21
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 417 | !(p1@14@01) | live]
; [else-branch: 417 | p1@14@01 | live]
(push) ; 22
; [then-branch: 417 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 417 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 418 | False | live]
; [else-branch: 418 | True | live]
(push) ; 24
; [then-branch: 418 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 418 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 419 | !(p1@14@01) | dead]
; [else-branch: 419 | p1@14@01 | live]
(push) ; 21
; [else-branch: 419 | p1@14@01]
(pop) ; 21
(pop) ; 20
; [eval] !p2
; [then-branch: 420 | !(p2@15@01) | dead]
; [else-branch: 420 | p2@15@01 | live]
(push) ; 20
; [else-branch: 420 | p2@15@01]
(pop) ; 20
(pop) ; 19
; [eval] !p1
; [then-branch: 421 | !(p1@14@01) | dead]
; [else-branch: 421 | p1@14@01 | live]
(push) ; 19
; [else-branch: 421 | p1@14@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !(p1_2 && (!ret1 && !except1))
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 422 | !(p1@14@01) | live]
; [else-branch: 422 | p1@14@01 | live]
(push) ; 18
; [then-branch: 422 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 422 | p1@14@01]
; [eval] !ret1
(push) ; 19
; [then-branch: 423 | False | live]
; [else-branch: 423 | True | live]
(push) ; 20
; [then-branch: 423 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 423 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 424 | !(p1@14@01) | dead]
; [else-branch: 424 | p1@14@01 | live]
(push) ; 17
; [else-branch: 424 | p1@14@01]
(pop) ; 17
(pop) ; 16
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 425 | !(p2@15@01) | live]
; [else-branch: 425 | p2@15@01 | live]
(push) ; 17
; [then-branch: 425 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 17
(push) ; 17
; [else-branch: 425 | p2@15@01]
; [eval] !ret2
(push) ; 18
; [then-branch: 426 | False | live]
; [else-branch: 426 | True | live]
(push) ; 19
; [then-branch: 426 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 426 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 427 | !(p2@15@01) | dead]
; [else-branch: 427 | p2@15@01 | live]
(push) ; 16
; [else-branch: 427 | p2@15@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 15
; [then-branch: 428 | !(p1@14@01) | live]
; [else-branch: 428 | p1@14@01 | live]
(push) ; 16
; [then-branch: 428 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 428 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 429 | False | live]
; [else-branch: 429 | True | live]
(push) ; 18
; [then-branch: 429 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 429 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 430 | !(p1@14@01) | dead]
; [else-branch: 430 | p1@14@01 | live]
(push) ; 15
; [else-branch: 430 | p1@14@01]
(pop) ; 15
(pop) ; 14
; [eval] !(p2_1 && (!ret2 && !except2))
; [eval] p2_1 && (!ret2 && !except2)
(push) ; 14
; [then-branch: 431 | !(p2_1@115@01) | live]
; [else-branch: 431 | p2_1@115@01 | live]
(push) ; 15
; [then-branch: 431 | !(p2_1@115@01)]
(assert (not p2_1@115@01))
(pop) ; 15
(push) ; 15
; [else-branch: 431 | p2_1@115@01]
; [eval] !ret2
(push) ; 16
; [then-branch: 432 | False | live]
; [else-branch: 432 | True | live]
(push) ; 17
; [then-branch: 432 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 432 | True]
; [eval] !except2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 433 | !(p2_1@115@01) | dead]
; [else-branch: 433 | p2_1@115@01 | live]
(push) ; 14
; [else-branch: 433 | p2_1@115@01]
(pop) ; 14
(pop) ; 13
(pop) ; 12
; [eval] !p2_1
(push) ; 12
(set-option :timeout 10)
(assert (not p2_1@115@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 434 | !(p2_1@115@01) | dead]
; [else-branch: 434 | p2_1@115@01 | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 434 | p2_1@115@01]
(assert p2_1@115@01)
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 435 | !(p2_0@79@01) | live]
; [else-branch: 435 | p2_0@79@01 | live]
(push) ; 11
; [then-branch: 435 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 11
(push) ; 11
; [else-branch: 435 | p2_0@79@01]
; [eval] !ret2
(push) ; 12
; [then-branch: 436 | False | live]
; [else-branch: 436 | True | live]
(push) ; 13
; [then-branch: 436 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 436 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 437 | !(p2_0@79@01) | dead]
; [else-branch: 437 | p2_0@79@01 | live]
(push) ; 10
; [else-branch: 437 | p2_0@79@01]
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 8
; [then-branch: 438 | !(p2_0@79@01) | live]
; [else-branch: 438 | p2_0@79@01 | live]
(push) ; 9
; [then-branch: 438 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 9
(push) ; 9
; [else-branch: 438 | p2_0@79@01]
; [eval] !ret2
(push) ; 10
; [then-branch: 439 | False | live]
; [else-branch: 439 | True | live]
(push) ; 11
; [then-branch: 439 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 439 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 440 | !(p2_0@79@01) | dead]
; [else-branch: 440 | p2_0@79@01 | live]
(push) ; 8
; [else-branch: 440 | p2_0@79@01]
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 316 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 6
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 6
; [then-branch: 441 | !(p2_0@79@01) | live]
; [else-branch: 441 | p2_0@79@01 | live]
(push) ; 7
; [then-branch: 441 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
(pop) ; 7
(push) ; 7
; [else-branch: 441 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 8
; [then-branch: 442 | False | live]
; [else-branch: 442 | True | live]
(push) ; 9
; [then-branch: 442 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 442 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_0@79@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_0@79@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | !(p2_0@79@01) | live]
; [else-branch: 443 | p2_0@79@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 443 | !(p2_0@79@01)]
(assert (not p2_0@79@01))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 444 | !(p1_0@78@01) | live]
; [else-branch: 444 | p1_0@78@01 | live]
(push) ; 8
; [then-branch: 444 | !(p1_0@78@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 444 | p1_0@78@01]
(assert p1_0@78@01)
; [eval] !ret1
(push) ; 9
; [then-branch: 445 | False | live]
; [else-branch: 445 | True | live]
(push) ; 10
; [then-branch: 445 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 445 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 446 | p1_0@78@01 | dead]
; [else-branch: 446 | !(p1_0@78@01) | live]
(push) ; 7
; [else-branch: 446 | !(p1_0@78@01)]
(pop) ; 7
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 447 | !(p1_0@78@01) | live]
; [else-branch: 447 | p1_0@78@01 | live]
(push) ; 8
; [then-branch: 447 | !(p1_0@78@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 447 | p1_0@78@01]
(assert p1_0@78@01)
; [eval] !ret1
(push) ; 9
; [then-branch: 448 | False | live]
; [else-branch: 448 | True | live]
(push) ; 10
; [then-branch: 448 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 448 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_0@78@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 449 | !(p1_0@78@01) | live]
; [else-branch: 449 | p1_0@78@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 449 | !(p1_0@78@01)]
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 8
; [then-branch: 450 | !(p2_0@79@01) | live]
; [else-branch: 450 | p2_0@79@01 | live]
(push) ; 9
; [then-branch: 450 | !(p2_0@79@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 450 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 10
; [then-branch: 451 | False | live]
; [else-branch: 451 | True | live]
(push) ; 11
; [then-branch: 451 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 451 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 452 | p2_0@79@01 | dead]
; [else-branch: 452 | !(p2_0@79@01) | live]
(push) ; 8
; [else-branch: 452 | !(p2_0@79@01)]
(pop) ; 8
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 8
; [then-branch: 453 | !(p2_0@79@01) | live]
; [else-branch: 453 | p2_0@79@01 | live]
(push) ; 9
; [then-branch: 453 | !(p2_0@79@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 453 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 10
; [then-branch: 454 | False | live]
; [else-branch: 454 | True | live]
(push) ; 11
; [then-branch: 454 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 454 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_0@79@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 455 | !(p2_0@79@01) | live]
; [else-branch: 455 | p2_0@79@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 455 | !(p2_0@79@01)]
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 9
; [then-branch: 456 | !(p1_0@78@01) | live]
; [else-branch: 456 | p1_0@78@01 | live]
(push) ; 10
; [then-branch: 456 | !(p1_0@78@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 456 | p1_0@78@01]
(assert p1_0@78@01)
; [eval] !ret1
(push) ; 11
; [then-branch: 457 | False | live]
; [else-branch: 457 | True | live]
(push) ; 12
; [then-branch: 457 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 457 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 458 | p1_0@78@01 | dead]
; [else-branch: 458 | !(p1_0@78@01) | live]
(push) ; 9
; [else-branch: 458 | !(p1_0@78@01)]
(pop) ; 9
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 9
; [then-branch: 459 | !(p1_0@78@01) | live]
; [else-branch: 459 | p1_0@78@01 | live]
(push) ; 10
; [then-branch: 459 | !(p1_0@78@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 459 | p1_0@78@01]
(assert p1_0@78@01)
; [eval] !ret1
(push) ; 11
; [then-branch: 460 | False | live]
; [else-branch: 460 | True | live]
(push) ; 12
; [then-branch: 460 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 460 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_0@78@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 461 | !(p1_0@78@01) | live]
; [else-branch: 461 | p1_0@78@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 461 | !(p1_0@78@01)]
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 462 | !(p2_0@79@01) | live]
; [else-branch: 462 | p2_0@79@01 | live]
(push) ; 11
; [then-branch: 462 | !(p2_0@79@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 462 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 12
; [then-branch: 463 | False | live]
; [else-branch: 463 | True | live]
(push) ; 13
; [then-branch: 463 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 463 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 464 | p2_0@79@01 | dead]
; [else-branch: 464 | !(p2_0@79@01) | live]
(push) ; 10
; [else-branch: 464 | !(p2_0@79@01)]
(pop) ; 10
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 465 | !(p2_0@79@01) | live]
; [else-branch: 465 | p2_0@79@01 | live]
(push) ; 11
; [then-branch: 465 | !(p2_0@79@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 465 | p2_0@79@01]
(assert p2_0@79@01)
; [eval] !ret2
(push) ; 12
; [then-branch: 466 | False | live]
; [else-branch: 466 | True | live]
(push) ; 13
; [then-branch: 466 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 466 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_0@79@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 467 | !(p2_0@79@01) | live]
; [else-branch: 467 | p2_0@79@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 467 | !(p2_0@79@01)]
; [exec]
; thisexcept1 := except1 && !bypass1
; [eval] except1 && !bypass1
; [exec]
; thisexcept2 := except2 && !bypass2
; [eval] except2 && !bypass2
; [exec]
; p1_1 := p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
; [eval] p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 468 | !(p1@14@01) | live]
; [else-branch: 468 | p1@14@01 | live]
(push) ; 12
; [then-branch: 468 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 12
(push) ; 12
; [else-branch: 468 | p1@14@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [exec]
; p2_1 := p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
; [eval] p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
(push) ; 11
; [then-branch: 469 | !(p2@15@01) | live]
; [else-branch: 469 | p2@15@01 | live]
(push) ; 12
; [then-branch: 469 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 12
(push) ; 12
; [else-branch: 469 | p2@15@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 470 | False | dead]
; [else-branch: 470 | True | live]
(push) ; 11
; [else-branch: 470 | True]
(pop) ; 11
; [eval] !p1_1
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 471 | True | live]
; [else-branch: 471 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 471 | True]
; [then-branch: 472 | False | dead]
; [else-branch: 472 | True | live]
(push) ; 12
; [else-branch: 472 | True]
(pop) ; 12
; [eval] !p2_1
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 473 | True | live]
; [else-branch: 473 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 473 | True]
; [eval] p1_1 && (!ret1 && !except1)
; [then-branch: 474 | False | dead]
; [else-branch: 474 | True | live]
(push) ; 13
; [else-branch: 474 | True]
(pop) ; 13
; [eval] !(p1_1 && (!ret1 && !except1))
; [eval] p1_1 && (!ret1 && !except1)
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 475 | True | live]
; [else-branch: 475 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 475 | True]
; [eval] p2_1 && (!ret2 && !except2)
; [then-branch: 476 | False | dead]
; [else-branch: 476 | True | live]
(push) ; 14
; [else-branch: 476 | True]
(pop) ; 14
; [eval] !(p2_1 && (!ret2 && !except2))
; [eval] p2_1 && (!ret2 && !except2)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 477 | True | live]
; [else-branch: 477 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 477 | True]
; [eval] p1 && (!ret1 && !except1)
(push) ; 15
; [then-branch: 478 | !(p1@14@01) | live]
; [else-branch: 478 | p1@14@01 | live]
(push) ; 16
; [then-branch: 478 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 478 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 479 | False | live]
; [else-branch: 479 | True | live]
(push) ; 18
; [then-branch: 479 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 479 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 480 | p1@14@01 | live]
; [else-branch: 480 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 480 | p1@14@01]
; [exec]
; _err := null
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 481 | !(p2@15@01) | live]
; [else-branch: 481 | p2@15@01 | live]
(push) ; 17
; [then-branch: 481 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 17
(push) ; 17
; [else-branch: 481 | p2@15@01]
; [eval] !ret2
(push) ; 18
; [then-branch: 482 | False | live]
; [else-branch: 482 | True | live]
(push) ; 19
; [then-branch: 482 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 482 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 483 | p2@15@01 | live]
; [else-branch: 483 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 483 | p2@15@01]
; [exec]
; _err_0 := null
; [exec]
; p1_2 := p1 && !thisexcept1
; [eval] p1 && !thisexcept1
(push) ; 17
; [then-branch: 484 | !(p1@14@01) | live]
; [else-branch: 484 | p1@14@01 | live]
(push) ; 18
; [then-branch: 484 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 484 | p1@14@01]
; [eval] !thisexcept1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [exec]
; p2_2 := p2 && !thisexcept2
; [eval] p2 && !thisexcept2
(push) ; 17
; [then-branch: 485 | !(p2@15@01) | live]
; [else-branch: 485 | p2@15@01 | live]
(push) ; 18
; [then-branch: 485 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 18
(push) ; 18
; [else-branch: 485 | p2@15@01]
; [eval] !thisexcept2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 486 | !(p1@14@01) | live]
; [else-branch: 486 | p1@14@01 | live]
(push) ; 18
; [then-branch: 486 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 486 | p1@14@01]
; [eval] !ret1
(push) ; 19
; [then-branch: 487 | False | live]
; [else-branch: 487 | True | live]
(push) ; 20
; [then-branch: 487 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 487 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 488 | p1@14@01 | live]
; [else-branch: 488 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 488 | p1@14@01]
; [exec]
; x_0 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 18
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 18
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_0@126@01 $Ref)
(assert (= x_0@126@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@127@01 $Snap)
(assert (= $t@127@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 18
(assert (_isDefined%precondition $Snap.unit 3170168))
(pop) ; 18
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170168))
(assert (_isDefined $Snap.unit 3170168))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_2 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 18
; [then-branch: 489 | !(p2@15@01) | live]
; [else-branch: 489 | p2@15@01 | live]
(push) ; 19
; [then-branch: 489 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 19
(push) ; 19
; [else-branch: 489 | p2@15@01]
; [eval] !ret2
(push) ; 20
; [then-branch: 490 | False | live]
; [else-branch: 490 | True | live]
(push) ; 21
; [then-branch: 490 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 490 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 491 | p2@15@01 | live]
; [else-branch: 491 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 491 | p2@15@01]
; [exec]
; x_0_0 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 19
(pop) ; 19
; Joined path conditions
(declare-const x_0_0@128@01 $Ref)
(assert (= x_0_0@128@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale true
(declare-const $t@129@01 $Snap)
(assert (= $t@129@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 492 | p1@14@01 | live]
; [else-branch: 492 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 492 | p1@14@01]
; [exec]
; tmp_ret1 := ret1
; [exec]
; ret1 := oldret1
; [exec]
; tmp_except1 := except1
; [exec]
; except1 := oldexcept1
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 493 | p2@15@01 | live]
; [else-branch: 493 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 493 | p2@15@01]
; [exec]
; tmp_ret2 := ret2
; [exec]
; ret2 := oldret2
; [exec]
; tmp_except2 := except2
; [exec]
; except2 := oldexcept2
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 494 | !(p1@14@01) | live]
; [else-branch: 494 | p1@14@01 | live]
(push) ; 22
; [then-branch: 494 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 494 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 495 | False | live]
; [else-branch: 495 | True | live]
(push) ; 24
; [then-branch: 495 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 495 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 496 | p1@14@01 | live]
; [else-branch: 496 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 496 | p1@14@01]
; [exec]
; x_0 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168)))
; [eval] int___unbox__(_checkDefined(x_0, 3170168))
; [eval] _checkDefined(x_0, 3170168)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@126@01 3170168))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@126@01 3170168))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@126@01 3170168)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@126@01 3170168)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@126@01 3170168)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@126@01 3170168)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@126@01 3170168))))
(push) ; 22
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@126@01 3170168))))
(pop) ; 22
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@126@01 3170168))))
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@126@01 3170168)))))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@126@01 3170168)))))
(declare-const x_0@130@01 $Ref)
(assert (=
  x_0@130@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@126@01 3170168))))))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@131@01 $Snap)
(assert (= $t@131@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 22
(pop) ; 22
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 22
; [then-branch: 497 | !(p2@15@01) | live]
; [else-branch: 497 | p2@15@01 | live]
(push) ; 23
; [then-branch: 497 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 23
(push) ; 23
; [else-branch: 497 | p2@15@01]
; [eval] !ret2
(push) ; 24
; [then-branch: 498 | False | live]
; [else-branch: 498 | True | live]
(push) ; 25
; [then-branch: 498 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 498 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 499 | p2@15@01 | live]
; [else-branch: 499 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 499 | p2@15@01]
; [exec]
; x_0_0 := __prim__int___box__(int___mul__(2, int___unbox__(x_0_0)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(x_0_0)))
; [eval] int___mul__(2, int___unbox__(x_0_0))
; [eval] int___unbox__(x_0_0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> x_0_0@128@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0_0@128@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_0_0@128@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_0_0@128@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_0_0@128@01)))
(push) ; 23
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@128@01)))
(pop) ; 23
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@128@01)))
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@128@01))))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@128@01))))
(declare-const x_0_0@132@01 $Ref)
(assert (=
  x_0_0@132@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_0_0@128@01)))))
; [exec]
; inhale true
(declare-const $t@133@01 $Snap)
(assert (= $t@133@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 500 | p1@14@01 | live]
; [else-branch: 500 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 500 | p1@14@01]
; [exec]
; ret1 := ret1 || tmp_ret1
; [eval] ret1 || tmp_ret1
(push) ; 24
; [then-branch: 501 | False | live]
; [else-branch: 501 | True | live]
(push) ; 25
; [then-branch: 501 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 501 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [exec]
; except1 := except1 || tmp_except1
; [eval] except1 || tmp_except1
(push) ; 24
; [then-branch: 502 | False | live]
; [else-branch: 502 | True | live]
(push) ; 25
; [then-branch: 502 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 502 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 503 | p2@15@01 | live]
; [else-branch: 503 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 503 | p2@15@01]
; [exec]
; ret2 := ret2 || tmp_ret2
; [eval] ret2 || tmp_ret2
(push) ; 25
; [then-branch: 504 | False | live]
; [else-branch: 504 | True | live]
(push) ; 26
; [then-branch: 504 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 504 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [exec]
; except2 := except2 || tmp_except2
; [eval] except2 || tmp_except2
(push) ; 25
; [then-branch: 505 | False | live]
; [else-branch: 505 | True | live]
(push) ; 26
; [then-branch: 505 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 505 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 506 | !(p1@14@01) | live]
; [else-branch: 506 | p1@14@01 | live]
(push) ; 26
; [then-branch: 506 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 506 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 507 | False | live]
; [else-branch: 507 | True | live]
(push) ; 28
; [then-branch: 507 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 507 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 508 | p1@14@01 | live]
; [else-branch: 508 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 508 | p1@14@01]
; [exec]
; _res := _checkDefined(x_0, 3170168)
; [eval] _checkDefined(x_0, 3170168)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@130@01 3170168))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@130@01 3170168))
(declare-const _res@134@01 $Ref)
(assert (= _res@134@01 (_checkDefined $Snap.unit x_0@130@01 3170168)))
; [exec]
; ret1 := true
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 509 | !(p2@15@01) | live]
; [else-branch: 509 | p2@15@01 | live]
(push) ; 27
; [then-branch: 509 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 27
(push) ; 27
; [else-branch: 509 | p2@15@01]
; [eval] !ret2
(push) ; 28
; [then-branch: 510 | False | live]
; [else-branch: 510 | True | live]
(push) ; 29
; [then-branch: 510 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 510 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 511 | p2@15@01 | live]
; [else-branch: 511 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 511 | p2@15@01]
; [exec]
; _res_0 := x_0_0
; [exec]
; ret2 := true
; [exec]
; assert (p1 ==> !except1) && (p2 ==> !except2)
; [eval] p1 ==> !except1
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 512 | p1@14@01 | live]
; [else-branch: 512 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 512 | p1@14@01]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> !except2
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 513 | p2@15@01 | live]
; [else-branch: 513 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 513 | p2@15@01]
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 514 | p1@14@01 | live]
; [else-branch: 514 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 514 | p1@14@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 515 | p2@15@01 | live]
; [else-branch: 515 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 515 | p2@15@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> issubtype(typeof(_res), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 516 | p1@14@01 | live]
; [else-branch: 516 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 516 | p1@14@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@134@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@134@01) (as int<PyType>  PyType))))
; [eval] p2 ==> issubtype(typeof(_res_0), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 517 | p2@15@01 | live]
; [else-branch: 517 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 517 | p2@15@01]
; [eval] issubtype(typeof(_res_0), int())
; [eval] typeof(_res_0)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> x_0_0@132@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> x_0_0@132@01) (as int<PyType>  PyType))))
; [eval] p1 ==> bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 518 | p1@14@01 | live]
; [else-branch: 518 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 518 | p1@14@01]
; [eval] bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 519 | bool___unbox__(_, b@22@01) | dead]
; [else-branch: 519 | !(bool___unbox__(_, b@22@01)) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 519 | !(bool___unbox__(_, b@22@01))]
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (not (bool___unbox__ $Snap.unit b@22@01)))))
; [eval] p2 ==> bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 520 | p2@15@01 | live]
; [else-branch: 520 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 520 | p2@15@01]
; [eval] bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
; [eval] bool___unbox__(b_9)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_9@23@01))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 521 | bool___unbox__(_, b_9@23@01) | dead]
; [else-branch: 521 | !(bool___unbox__(_, b_9@23@01)) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 521 | !(bool___unbox__(_, b_9@23@01))]
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01)
    (not (bool___unbox__ $Snap.unit b_9@23@01)))))
; [eval] p1 ==> !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 522 | p1@14@01 | live]
; [else-branch: 522 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 522 | p1@14@01]
; [eval] !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
; [eval] !bool___unbox__(b)
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 523 | !(bool___unbox__(_, b@22@01)) | live]
; [else-branch: 523 | bool___unbox__(_, b@22@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 523 | !(bool___unbox__(_, b@22@01))]
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
; [eval] int___eq__(_res, __prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> _res@134@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@134@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@134@01 (__prim__int___box__ $Snap.unit 2)))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@134@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@134@01 (__prim__int___box__ $Snap.unit 2))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b@22@01))
  (and
    (not (bool___unbox__ $Snap.unit b@22@01))
    (__prim__int___box__%precondition $Snap.unit 2)
    (issubtype<Bool> (typeof<PyType> _res@134@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@134@01 (__prim__int___box__ $Snap.unit 2)))))
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (=>
      (not (bool___unbox__ $Snap.unit b@22@01))
      (and
        (not (bool___unbox__ $Snap.unit b@22@01))
        (__prim__int___box__%precondition $Snap.unit 2)
        (issubtype<Bool> (typeof<PyType> _res@134@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@134@01 (__prim__int___box__ $Snap.unit 2))))
    (not (bool___unbox__ $Snap.unit b@22@01)))))
(push) ; 27
(assert (not (=>
  (and p1@14@01 (not (bool___unbox__ $Snap.unit b@22@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@134@01 (__prim__int___box__ $Snap.unit 2)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@14@01 (not (bool___unbox__ $Snap.unit b@22@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@134@01 (__prim__int___box__ $Snap.unit 2))))
; [eval] p2 ==> !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 524 | p2@15@01 | live]
; [else-branch: 524 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 524 | p2@15@01]
; [eval] !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
; [eval] !bool___unbox__(b_9)
; [eval] bool___unbox__(b_9)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@23@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@23@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_9@23@01))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 525 | !(bool___unbox__(_, b_9@23@01)) | live]
; [else-branch: 525 | bool___unbox__(_, b_9@23@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 525 | !(bool___unbox__(_, b_9@23@01))]
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
; [eval] int___eq__(_res_0, __prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> x_0_0@132@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0_0@132@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@132@01 (__prim__int___box__ $Snap.unit 2)))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_0_0@132@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@132@01 (__prim__int___box__ $Snap.unit 2))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_9@23@01))
  (and
    (not (bool___unbox__ $Snap.unit b_9@23@01))
    (__prim__int___box__%precondition $Snap.unit 2)
    (issubtype<Bool> (typeof<PyType> x_0_0@132@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@132@01 (__prim__int___box__ $Snap.unit 2)))))
(assert (not (bool___unbox__ $Snap.unit b_9@23@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (issubtype<Bool> (typeof<PyType> b_9@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@23@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_9@23@01))
      (and
        (not (bool___unbox__ $Snap.unit b_9@23@01))
        (__prim__int___box__%precondition $Snap.unit 2)
        (issubtype<Bool> (typeof<PyType> x_0_0@132@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_0_0@132@01 (__prim__int___box__ $Snap.unit 2))))
    (not (bool___unbox__ $Snap.unit b_9@23@01)))))
(push) ; 27
(assert (not (=>
  (and p2@15@01 (not (bool___unbox__ $Snap.unit b_9@23@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_0_0@132@01 (__prim__int___box__ $Snap.unit 2)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@15@01 (not (bool___unbox__ $Snap.unit b_9@23@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_0_0@132@01 (__prim__int___box__ $Snap.unit 2))))
; [eval] p1 ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 526 | p1@14@01 | live]
; [else-branch: 526 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 526 | p1@14@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 29
; [then-branch: 527 | False | live]
; [else-branch: 527 | True | live]
(push) ; 30
; [then-branch: 527 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 527 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 31
; [then-branch: 528 | False | live]
; [else-branch: 528 | True | live]
(push) ; 32
; [then-branch: 528 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 528 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 33
; [then-branch: 529 | False | live]
; [else-branch: 529 | True | live]
(push) ; 34
; [then-branch: 529 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 529 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 530 | p2@15@01 | live]
; [else-branch: 530 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 530 | p2@15@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 29
; [then-branch: 531 | False | live]
; [else-branch: 531 | True | live]
(push) ; 30
; [then-branch: 531 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 531 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 31
; [then-branch: 532 | False | live]
; [else-branch: 532 | True | live]
(push) ; 32
; [then-branch: 532 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 532 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 33
; [then-branch: 533 | False | live]
; [else-branch: 533 | True | live]
(push) ; 34
; [then-branch: 533 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 533 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 534 | !(p2@15@01) | live]
; [else-branch: 534 | p2@15@01 | live]
(push) ; 27
; [then-branch: 534 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 27
(push) ; 27
; [else-branch: 534 | p2@15@01]
; [eval] !ret2
(push) ; 28
; [then-branch: 535 | False | live]
; [else-branch: 535 | True | live]
(push) ; 29
; [then-branch: 535 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 535 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 536 | !(p2@15@01) | dead]
; [else-branch: 536 | p2@15@01 | live]
(push) ; 26
; [else-branch: 536 | p2@15@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 537 | !(p1@14@01) | live]
; [else-branch: 537 | p1@14@01 | live]
(push) ; 26
; [then-branch: 537 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 537 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 538 | False | live]
; [else-branch: 538 | True | live]
(push) ; 28
; [then-branch: 538 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 538 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 539 | !(p1@14@01) | dead]
; [else-branch: 539 | p1@14@01 | live]
(push) ; 25
; [else-branch: 539 | p1@14@01]
(pop) ; 25
(pop) ; 24
; [eval] !p2
; [then-branch: 540 | !(p2@15@01) | dead]
; [else-branch: 540 | p2@15@01 | live]
(push) ; 24
; [else-branch: 540 | p2@15@01]
(pop) ; 24
(pop) ; 23
; [eval] !p1
; [then-branch: 541 | !(p1@14@01) | dead]
; [else-branch: 541 | p1@14@01 | live]
(push) ; 23
; [else-branch: 541 | p1@14@01]
(pop) ; 23
(pop) ; 22
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 22
; [then-branch: 542 | !(p2@15@01) | live]
; [else-branch: 542 | p2@15@01 | live]
(push) ; 23
; [then-branch: 542 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 23
(push) ; 23
; [else-branch: 542 | p2@15@01]
; [eval] !ret2
(push) ; 24
; [then-branch: 543 | False | live]
; [else-branch: 543 | True | live]
(push) ; 25
; [then-branch: 543 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 543 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 544 | !(p2@15@01) | dead]
; [else-branch: 544 | p2@15@01 | live]
(push) ; 22
; [else-branch: 544 | p2@15@01]
(pop) ; 22
(pop) ; 21
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 545 | !(p1@14@01) | live]
; [else-branch: 545 | p1@14@01 | live]
(push) ; 22
; [then-branch: 545 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 545 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 546 | False | live]
; [else-branch: 546 | True | live]
(push) ; 24
; [then-branch: 546 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 546 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 547 | !(p1@14@01) | dead]
; [else-branch: 547 | p1@14@01 | live]
(push) ; 21
; [else-branch: 547 | p1@14@01]
(pop) ; 21
(pop) ; 20
; [eval] !p2
; [then-branch: 548 | !(p2@15@01) | dead]
; [else-branch: 548 | p2@15@01 | live]
(push) ; 20
; [else-branch: 548 | p2@15@01]
(pop) ; 20
(pop) ; 19
; [eval] !p1
; [then-branch: 549 | !(p1@14@01) | dead]
; [else-branch: 549 | p1@14@01 | live]
(push) ; 19
; [else-branch: 549 | p1@14@01]
(pop) ; 19
(pop) ; 18
; [eval] !(p2_2 && (!ret2 && !except2))
; [eval] p2_2 && (!ret2 && !except2)
(push) ; 18
; [then-branch: 550 | !(p2@15@01) | live]
; [else-branch: 550 | p2@15@01 | live]
(push) ; 19
; [then-branch: 550 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 19
(push) ; 19
; [else-branch: 550 | p2@15@01]
; [eval] !ret2
(push) ; 20
; [then-branch: 551 | False | live]
; [else-branch: 551 | True | live]
(push) ; 21
; [then-branch: 551 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 551 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 552 | !(p2@15@01) | dead]
; [else-branch: 552 | p2@15@01 | live]
(push) ; 18
; [else-branch: 552 | p2@15@01]
(pop) ; 18
(pop) ; 17
; [eval] !(p1_2 && (!ret1 && !except1))
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 553 | !(p1@14@01) | live]
; [else-branch: 553 | p1@14@01 | live]
(push) ; 18
; [then-branch: 553 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 553 | p1@14@01]
; [eval] !ret1
(push) ; 19
; [then-branch: 554 | False | live]
; [else-branch: 554 | True | live]
(push) ; 20
; [then-branch: 554 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 554 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 555 | !(p1@14@01) | dead]
; [else-branch: 555 | p1@14@01 | live]
(push) ; 17
; [else-branch: 555 | p1@14@01]
(pop) ; 17
(pop) ; 16
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 556 | !(p2@15@01) | live]
; [else-branch: 556 | p2@15@01 | live]
(push) ; 17
; [then-branch: 556 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 17
(push) ; 17
; [else-branch: 556 | p2@15@01]
; [eval] !ret2
(push) ; 18
; [then-branch: 557 | False | live]
; [else-branch: 557 | True | live]
(push) ; 19
; [then-branch: 557 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 557 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 558 | !(p2@15@01) | dead]
; [else-branch: 558 | p2@15@01 | live]
(push) ; 16
; [else-branch: 558 | p2@15@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 15
; [then-branch: 559 | !(p1@14@01) | live]
; [else-branch: 559 | p1@14@01 | live]
(push) ; 16
; [then-branch: 559 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 559 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 560 | False | live]
; [else-branch: 560 | True | live]
(push) ; 18
; [then-branch: 560 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 560 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 561 | !(p1@14@01) | dead]
; [else-branch: 561 | p1@14@01 | live]
(push) ; 15
; [else-branch: 561 | p1@14@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 443 | p2_0@79@01]
(assert p2_0@79@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 313 | p1_0@78@01]
(assert p1_0@78@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 31 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 4
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 4
; [then-branch: 562 | !(p2@15@01) | live]
; [else-branch: 562 | p2@15@01 | live]
(push) ; 5
; [then-branch: 562 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 5
(push) ; 5
; [else-branch: 562 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 6
; [then-branch: 563 | False | live]
; [else-branch: 563 | True | live]
(push) ; 7
; [then-branch: 563 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 563 | True]
; [eval] !except2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 564 | !(p2@15@01) | live]
; [else-branch: 564 | p2@15@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 564 | !(p2@15@01)]
(assert (not p2@15@01))
; [exec]
; bypass1 := !(p1 && (!ret1 && !except1))
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 5
; [then-branch: 565 | !(p1@14@01) | live]
; [else-branch: 565 | p1@14@01 | live]
(push) ; 6
; [then-branch: 565 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 6
(push) ; 6
; [else-branch: 565 | p1@14@01]
; [eval] !ret1
(push) ; 7
; [then-branch: 566 | False | live]
; [else-branch: 566 | True | live]
(push) ; 8
; [then-branch: 566 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 566 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass1@135@01 Bool)
(assert (= bypass1@135@01 (not p1@14@01)))
; [exec]
; bypass2 := !(p2 && (!ret2 && !except2))
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 5
; [then-branch: 567 | !(p2@15@01) | live]
; [else-branch: 567 | p2@15@01 | live]
(push) ; 6
; [then-branch: 567 | !(p2@15@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 567 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 7
; [then-branch: 568 | False | live]
; [else-branch: 568 | True | live]
(push) ; 8
; [then-branch: 568 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 568 | True]
; [eval] !except2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass2@136@01 Bool)
(assert (= bypass2@136@01 (not p2@15@01)))
; [exec]
; oldret1 := ret1
; [exec]
; oldret2 := ret2
; [exec]
; oldexcept1 := except1
; [exec]
; oldexcept2 := except2
; [exec]
; p1_0 := p1 && (!ret1 && !except1 && bool___unbox__(b_4))
; [eval] p1 && (!ret1 && !except1 && bool___unbox__(b_4))
(push) ; 5
; [then-branch: 569 | !(p1@14@01) | live]
; [else-branch: 569 | p1@14@01 | live]
(push) ; 6
; [then-branch: 569 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 6
(push) ; 6
; [else-branch: 569 | p1@14@01]
; [eval] !ret1
(push) ; 7
; [then-branch: 570 | False | live]
; [else-branch: 570 | True | live]
(push) ; 8
; [then-branch: 570 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 570 | True]
; [eval] !except1
(push) ; 9
; [then-branch: 571 | False | live]
; [else-branch: 571 | True | live]
(push) ; 10
; [then-branch: 571 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 571 | True]
; [eval] bool___unbox__(b_4)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01))))
(declare-const p1_0@137@01 Bool)
(assert (= p1_0@137@01 (and p1@14@01 (bool___unbox__ $Snap.unit b@22@01))))
; [exec]
; p2_0 := p2 && (!ret2 && !except2 && bool___unbox__(b_4_0))
; [eval] p2 && (!ret2 && !except2 && bool___unbox__(b_4_0))
(push) ; 5
; [then-branch: 572 | !(p2@15@01) | live]
; [else-branch: 572 | p2@15@01 | live]
(push) ; 6
; [then-branch: 572 | !(p2@15@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 572 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 7
; [then-branch: 573 | False | live]
; [else-branch: 573 | True | live]
(push) ; 8
; [then-branch: 573 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 573 | True]
; [eval] !except2
(push) ; 9
; [then-branch: 574 | False | live]
; [else-branch: 574 | True | live]
(push) ; 10
; [then-branch: 574 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 574 | True]
; [eval] bool___unbox__(b_4_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_4_0@43@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@43@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@43@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@43@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    p2@15@01
    (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_4_0@43@01))))
(declare-const p2_0@138@01 Bool)
(assert (= p2_0@138@01 (and p2@15@01 (bool___unbox__ $Snap.unit b_4_0@43@01))))
; [exec]
; p3 := p1 && (!ret1 && !except1 && !bool___unbox__(b_4))
; [eval] p1 && (!ret1 && !except1 && !bool___unbox__(b_4))
(push) ; 5
; [then-branch: 575 | !(p1@14@01) | live]
; [else-branch: 575 | p1@14@01 | live]
(push) ; 6
; [then-branch: 575 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 6
(push) ; 6
; [else-branch: 575 | p1@14@01]
; [eval] !ret1
(push) ; 7
; [then-branch: 576 | False | live]
; [else-branch: 576 | True | live]
(push) ; 8
; [then-branch: 576 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 576 | True]
; [eval] !except1
(push) ; 9
; [then-branch: 577 | False | live]
; [else-branch: 577 | True | live]
(push) ; 10
; [then-branch: 577 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 577 | True]
; [eval] !bool___unbox__(b_4)
; [eval] bool___unbox__(b_4)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3@139@01 Bool)
(assert (= p3@139@01 (and p1@14@01 (not (bool___unbox__ $Snap.unit b@22@01)))))
; [exec]
; p4 := p2 && (!ret2 && !except2 && !bool___unbox__(b_4_0))
; [eval] p2 && (!ret2 && !except2 && !bool___unbox__(b_4_0))
(push) ; 5
; [then-branch: 578 | !(p2@15@01) | live]
; [else-branch: 578 | p2@15@01 | live]
(push) ; 6
; [then-branch: 578 | !(p2@15@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 578 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 7
; [then-branch: 579 | False | live]
; [else-branch: 579 | True | live]
(push) ; 8
; [then-branch: 579 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 579 | True]
; [eval] !except2
(push) ; 9
; [then-branch: 580 | False | live]
; [else-branch: 580 | True | live]
(push) ; 10
; [then-branch: 580 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 580 | True]
; [eval] !bool___unbox__(b_4_0)
; [eval] bool___unbox__(b_4_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_4_0@43@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@43@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@43@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@43@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@43@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4@140@01 Bool)
(assert (= p4@140@01 (and p2@15@01 (not (bool___unbox__ $Snap.unit b_4_0@43@01)))))
; [exec]
; tmp := new()
(declare-const tmp@141@01 $Ref)
(assert (not (= tmp@141@01 $Ref.null)))
(assert (not (= tmp@141@01 MyException_res_9@45@01)))
(assert (not (= tmp@141@01 error@38@01)))
(assert (not (= tmp@141@01 _res_0@27@01)))
(assert (not (= tmp@141@01 b_4_0@43@01)))
(assert (not (= tmp@141@01 x_0@36@01)))
(assert (not (= tmp@141@01 b_9@23@01)))
(assert (not (= tmp@141@01 b@22@01)))
(assert (not (= tmp@141@01 _cthread_157@16@01)))
(assert (not (= tmp@141@01 tmp@74@01)))
(assert (not (= tmp@141@01 error_11@39@01)))
(assert (not (= tmp@141@01 MyException_res@44@01)))
(assert (not (= tmp@141@01 _err_0@35@01)))
(assert (not (= tmp@141@01 _cthread_157_0@17@01)))
(assert (not (= tmp@141@01 x_0_0@37@01)))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 5
; [then-branch: 581 | !(p1_0@137@01) | live]
; [else-branch: 581 | p1_0@137@01 | live]
(push) ; 6
; [then-branch: 581 | !(p1_0@137@01)]
(assert (not p1_0@137@01))
(pop) ; 6
(push) ; 6
; [else-branch: 581 | p1_0@137@01]
(assert p1_0@137@01)
; [eval] !ret1
(push) ; 7
; [then-branch: 582 | False | live]
; [else-branch: 582 | True | live]
(push) ; 8
; [then-branch: 582 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 582 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_0@137@01 (not p1_0@137@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_0@137@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_0@137@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 583 | p1_0@137@01 | live]
; [else-branch: 583 | !(p1_0@137@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 583 | p1_0@137@01]
(assert p1_0@137@01)
; [exec]
; MyException_res := tmp
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 6
; [then-branch: 584 | !(p2_0@138@01) | live]
; [else-branch: 584 | p2_0@138@01 | live]
(push) ; 7
; [then-branch: 584 | !(p2_0@138@01)]
(assert (not p2_0@138@01))
(pop) ; 7
(push) ; 7
; [else-branch: 584 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 8
; [then-branch: 585 | False | live]
; [else-branch: 585 | True | live]
(push) ; 9
; [then-branch: 585 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 585 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_0@138@01 (not p2_0@138@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_0@138@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 586 | p2_0@138@01 | dead]
; [else-branch: 586 | !(p2_0@138@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 586 | !(p2_0@138@01)]
(assert (not p2_0@138@01))
(pop) ; 6
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 6
; [then-branch: 587 | !(p2_0@138@01) | live]
; [else-branch: 587 | p2_0@138@01 | live]
(push) ; 7
; [then-branch: 587 | !(p2_0@138@01)]
(assert (not p2_0@138@01))
(pop) ; 7
(push) ; 7
; [else-branch: 587 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 8
; [then-branch: 588 | False | live]
; [else-branch: 588 | True | live]
(push) ; 9
; [then-branch: 588 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 588 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_0@138@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_0@138@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 589 | !(p2_0@138@01) | live]
; [else-branch: 589 | p2_0@138@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 589 | !(p2_0@138@01)]
(assert (not p2_0@138@01))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 590 | !(p1_0@137@01) | live]
; [else-branch: 590 | p1_0@137@01 | live]
(push) ; 8
; [then-branch: 590 | !(p1_0@137@01)]
(assert (not p1_0@137@01))
(pop) ; 8
(push) ; 8
; [else-branch: 590 | p1_0@137@01]
; [eval] !ret1
(push) ; 9
; [then-branch: 591 | False | live]
; [else-branch: 591 | True | live]
(push) ; 10
; [then-branch: 591 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 591 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_0@137@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 592 | p1_0@137@01 | live]
; [else-branch: 592 | !(p1_0@137@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 592 | p1_0@137@01]
; [exec]
; inhale typeof(MyException_res) == MyException()
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 $Snap.unit))
; [eval] typeof(MyException_res) == MyException()
; [eval] typeof(MyException_res)
; [eval] MyException()
(assert (= (typeof<PyType> tmp@141@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_0 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 593 | !(p2_0@138@01) | live]
; [else-branch: 593 | p2_0@138@01 | live]
(push) ; 9
; [then-branch: 593 | !(p2_0@138@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 593 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 10
; [then-branch: 594 | False | live]
; [else-branch: 594 | True | live]
(push) ; 11
; [then-branch: 594 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 594 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 595 | p2_0@138@01 | dead]
; [else-branch: 595 | !(p2_0@138@01) | live]
(push) ; 8
; [else-branch: 595 | !(p2_0@138@01)]
(pop) ; 8
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 8
; [then-branch: 596 | !(p2_0@138@01) | live]
; [else-branch: 596 | p2_0@138@01 | live]
(push) ; 9
; [then-branch: 596 | !(p2_0@138@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 596 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 10
; [then-branch: 597 | False | live]
; [else-branch: 597 | True | live]
(push) ; 11
; [then-branch: 597 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 597 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_0@138@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 598 | !(p2_0@138@01) | live]
; [else-branch: 598 | p2_0@138@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 598 | !(p2_0@138@01)]
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 9
; [then-branch: 599 | !(p1_0@137@01) | live]
; [else-branch: 599 | p1_0@137@01 | live]
(push) ; 10
; [then-branch: 599 | !(p1_0@137@01)]
(assert (not p1_0@137@01))
(pop) ; 10
(push) ; 10
; [else-branch: 599 | p1_0@137@01]
; [eval] !ret1
(push) ; 11
; [then-branch: 600 | False | live]
; [else-branch: 600 | True | live]
(push) ; 12
; [then-branch: 600 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 600 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_0@137@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 601 | p1_0@137@01 | live]
; [else-branch: 601 | !(p1_0@137@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 601 | p1_0@137@01]
; [exec]
; _err := MyException_res
; [exec]
; except1 := true
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 602 | !(p2_0@138@01) | live]
; [else-branch: 602 | p2_0@138@01 | live]
(push) ; 11
; [then-branch: 602 | !(p2_0@138@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 602 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 12
; [then-branch: 603 | False | live]
; [else-branch: 603 | True | live]
(push) ; 13
; [then-branch: 603 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 603 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 604 | p2_0@138@01 | dead]
; [else-branch: 604 | !(p2_0@138@01) | live]
(push) ; 10
; [else-branch: 604 | !(p2_0@138@01)]
(pop) ; 10
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 605 | !(p2_0@138@01) | live]
; [else-branch: 605 | p2_0@138@01 | live]
(push) ; 11
; [then-branch: 605 | !(p2_0@138@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 605 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 12
; [then-branch: 606 | False | live]
; [else-branch: 606 | True | live]
(push) ; 13
; [then-branch: 606 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 606 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_0@138@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 607 | !(p2_0@138@01) | live]
; [else-branch: 607 | p2_0@138@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 607 | !(p2_0@138@01)]
; [exec]
; thisexcept1 := except1 && !bypass1
; [eval] except1 && !bypass1
(push) ; 11
; [then-branch: 608 | False | live]
; [else-branch: 608 | True | live]
(push) ; 12
; [then-branch: 608 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 608 | True]
; [eval] !bypass1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1@143@01 Bool)
(assert (= thisexcept1@143@01 (not bypass1@135@01)))
; [exec]
; thisexcept2 := except2 && !bypass2
; [eval] except2 && !bypass2
; [exec]
; p1_1 := p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
; [eval] p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 609 | !(p1@14@01) | live]
; [else-branch: 609 | p1@14@01 | live]
(push) ; 12
; [then-branch: 609 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 12
(push) ; 12
; [else-branch: 609 | p1@14@01]
(push) ; 13
; [then-branch: 610 | !(thisexcept1@143@01) | live]
; [else-branch: 610 | thisexcept1@143@01 | live]
(push) ; 14
; [then-branch: 610 | !(thisexcept1@143@01)]
(assert (not thisexcept1@143@01))
(pop) ; 14
(push) ; 14
; [else-branch: 610 | thisexcept1@143@01]
(assert thisexcept1@143@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1@143@01 (not thisexcept1@143@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p1@14@01 (or thisexcept1@143@01 (not thisexcept1@143@01))))
(declare-const p1_1@144@01 Bool)
(assert (=
  p1_1@144@01
  (and
    p1@14@01
    (and
      thisexcept1@143@01
      (issubtype<Bool> (typeof<PyType> tmp@141@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_1 := p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
; [eval] p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
(push) ; 11
; [then-branch: 611 | !(p2@15@01) | live]
; [else-branch: 611 | p2@15@01 | live]
(push) ; 12
; [then-branch: 611 | !(p2@15@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 611 | p2@15@01]
(assert p2@15@01)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_1@144@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not p1_1@144@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 612 | p1_1@144@01 | live]
; [else-branch: 612 | !(p1_1@144@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 612 | p1_1@144@01]
(assert p1_1@144@01)
; [exec]
; except1 := false
; [then-branch: 613 | False | dead]
; [else-branch: 613 | True | live]
(push) ; 12
; [else-branch: 613 | True]
(pop) ; 12
; [eval] !p2_1
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 614 | True | live]
; [else-branch: 614 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 614 | True]
; [eval] p1_1 && (!ret1 && !except1)
(push) ; 13
; [then-branch: 615 | !(p1_1@144@01) | live]
; [else-branch: 615 | p1_1@144@01 | live]
(push) ; 14
; [then-branch: 615 | !(p1_1@144@01)]
(assert (not p1_1@144@01))
(pop) ; 14
(push) ; 14
; [else-branch: 615 | p1_1@144@01]
; [eval] !ret1
(push) ; 15
; [then-branch: 616 | False | live]
; [else-branch: 616 | True | live]
(push) ; 16
; [then-branch: 616 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 616 | True]
; [eval] !except1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p1_1@144@01 (not p1_1@144@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_1@144@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 617 | p1_1@144@01 | live]
; [else-branch: 617 | !(p1_1@144@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 617 | p1_1@144@01]
; [exec]
; x_0 := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const x_0@145@01 $Ref)
(assert (= x_0@145@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 14
(assert (_isDefined%precondition $Snap.unit 3170168))
(pop) ; 14
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170168))
(assert (_isDefined $Snap.unit 3170168))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && (!ret2 && !except2)
; [then-branch: 618 | False | dead]
; [else-branch: 618 | True | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 618 | True]
(pop) ; 14
; [eval] !(p2_1 && (!ret2 && !except2))
; [eval] p2_1 && (!ret2 && !except2)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 619 | True | live]
; [else-branch: 619 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 619 | True]
; [eval] p1 && (!ret1 && !except1)
(push) ; 15
; [then-branch: 620 | !(p1@14@01) | live]
; [else-branch: 620 | p1@14@01 | live]
(push) ; 16
; [then-branch: 620 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 620 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 621 | False | live]
; [else-branch: 621 | True | live]
(push) ; 18
; [then-branch: 621 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 621 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 622 | p1@14@01 | live]
; [else-branch: 622 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 622 | p1@14@01]
; [exec]
; _err := null
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 623 | !(p2@15@01) | live]
; [else-branch: 623 | p2@15@01 | live]
(push) ; 17
; [then-branch: 623 | !(p2@15@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 623 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 18
; [then-branch: 624 | False | live]
; [else-branch: 624 | True | live]
(push) ; 19
; [then-branch: 624 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 624 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 625 | p2@15@01 | dead]
; [else-branch: 625 | !(p2@15@01) | live]
(push) ; 16
; [else-branch: 625 | !(p2@15@01)]
(pop) ; 16
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 626 | !(p2@15@01) | live]
; [else-branch: 626 | p2@15@01 | live]
(push) ; 17
; [then-branch: 626 | !(p2@15@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 626 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 18
; [then-branch: 627 | False | live]
; [else-branch: 627 | True | live]
(push) ; 19
; [then-branch: 627 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 627 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 628 | !(p2@15@01) | live]
; [else-branch: 628 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 628 | !(p2@15@01)]
; [exec]
; p1_2 := p1 && !thisexcept1
; [eval] p1 && !thisexcept1
(push) ; 17
; [then-branch: 629 | !(p1@14@01) | live]
; [else-branch: 629 | p1@14@01 | live]
(push) ; 18
; [then-branch: 629 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 629 | p1@14@01]
; [eval] !thisexcept1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p1_2@147@01 Bool)
(assert (= p1_2@147@01 (and p1@14@01 (not thisexcept1@143@01))))
; [exec]
; p2_2 := p2 && !thisexcept2
; [eval] p2 && !thisexcept2
(push) ; 17
; [then-branch: 630 | !(p2@15@01) | live]
; [else-branch: 630 | p2@15@01 | live]
(push) ; 18
; [then-branch: 630 | !(p2@15@01)]
(pop) ; 18
(push) ; 18
; [else-branch: 630 | p2@15@01]
(assert p2@15@01)
; [eval] !thisexcept2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 631 | !(p1_2@147@01) | live]
; [else-branch: 631 | p1_2@147@01 | live]
(push) ; 18
; [then-branch: 631 | !(p1_2@147@01)]
(assert (not p1_2@147@01))
(pop) ; 18
(push) ; 18
; [else-branch: 631 | p1_2@147@01]
(assert p1_2@147@01)
; [eval] !ret1
(push) ; 19
; [then-branch: 632 | False | live]
; [else-branch: 632 | True | live]
(push) ; 20
; [then-branch: 632 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 632 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p1_2@147@01 (not p1_2@147@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_2@147@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 633 | p1_2@147@01 | dead]
; [else-branch: 633 | !(p1_2@147@01) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 633 | !(p1_2@147@01)]
(assert (not p1_2@147@01))
(pop) ; 17
; [eval] !(p1_2 && (!ret1 && !except1))
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 634 | !(p1_2@147@01) | live]
; [else-branch: 634 | p1_2@147@01 | live]
(push) ; 18
; [then-branch: 634 | !(p1_2@147@01)]
(assert (not p1_2@147@01))
(pop) ; 18
(push) ; 18
; [else-branch: 634 | p1_2@147@01]
(assert p1_2@147@01)
; [eval] !ret1
(push) ; 19
; [then-branch: 635 | False | live]
; [else-branch: 635 | True | live]
(push) ; 20
; [then-branch: 635 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 635 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p1_2@147@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_2@147@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 636 | !(p1_2@147@01) | live]
; [else-branch: 636 | p1_2@147@01 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 636 | !(p1_2@147@01)]
(assert (not p1_2@147@01))
; [eval] p2_2 && (!ret2 && !except2)
(push) ; 18
; [then-branch: 637 | !(p2@15@01) | live]
; [else-branch: 637 | p2@15@01 | live]
(push) ; 19
; [then-branch: 637 | !(p2@15@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 637 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 20
; [then-branch: 638 | False | live]
; [else-branch: 638 | True | live]
(push) ; 21
; [then-branch: 638 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 638 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 639 | p2@15@01 | dead]
; [else-branch: 639 | !(p2@15@01) | live]
(push) ; 18
; [else-branch: 639 | !(p2@15@01)]
(pop) ; 18
; [eval] !(p2_2 && (!ret2 && !except2))
; [eval] p2_2 && (!ret2 && !except2)
(push) ; 18
; [then-branch: 640 | !(p2@15@01) | live]
; [else-branch: 640 | p2@15@01 | live]
(push) ; 19
; [then-branch: 640 | !(p2@15@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 640 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 20
; [then-branch: 641 | False | live]
; [else-branch: 641 | True | live]
(push) ; 21
; [then-branch: 641 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 641 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 642 | !(p2@15@01) | live]
; [else-branch: 642 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 642 | !(p2@15@01)]
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 643 | p1@14@01 | live]
; [else-branch: 643 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 643 | p1@14@01]
; [exec]
; tmp_ret1 := ret1
; [exec]
; ret1 := oldret1
; [exec]
; tmp_except1 := except1
; [exec]
; except1 := oldexcept1
; [then-branch: 644 | p2@15@01 | dead]
; [else-branch: 644 | !(p2@15@01) | live]
(push) ; 20
; [else-branch: 644 | !(p2@15@01)]
(pop) ; 20
; [eval] !p2
(push) ; 20
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 645 | !(p2@15@01) | live]
; [else-branch: 645 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 645 | !(p2@15@01)]
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 646 | !(p1@14@01) | live]
; [else-branch: 646 | p1@14@01 | live]
(push) ; 22
; [then-branch: 646 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 646 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 647 | False | live]
; [else-branch: 647 | True | live]
(push) ; 24
; [then-branch: 647 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 647 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 648 | p1@14@01 | live]
; [else-branch: 648 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 648 | p1@14@01]
; [exec]
; x_0 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168)))
; [eval] int___unbox__(_checkDefined(x_0, 3170168))
; [eval] _checkDefined(x_0, 3170168)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@145@01 3170168))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@145@01 3170168))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@145@01 3170168)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@145@01 3170168)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@145@01 3170168)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@145@01 3170168)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@145@01 3170168))))
(push) ; 22
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@145@01 3170168))))
(pop) ; 22
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@145@01 3170168))))
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@145@01 3170168)))))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@145@01 3170168)))))
(declare-const x_0@148@01 $Ref)
(assert (=
  x_0@148@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@145@01 3170168))))))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 22
(pop) ; 22
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 22
; [then-branch: 649 | !(p2@15@01) | live]
; [else-branch: 649 | p2@15@01 | live]
(push) ; 23
; [then-branch: 649 | !(p2@15@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 649 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 24
; [then-branch: 650 | False | live]
; [else-branch: 650 | True | live]
(push) ; 25
; [then-branch: 650 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 650 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 651 | p2@15@01 | dead]
; [else-branch: 651 | !(p2@15@01) | live]
(push) ; 22
; [else-branch: 651 | !(p2@15@01)]
(pop) ; 22
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 22
; [then-branch: 652 | !(p2@15@01) | live]
; [else-branch: 652 | p2@15@01 | live]
(push) ; 23
; [then-branch: 652 | !(p2@15@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 652 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 24
; [then-branch: 653 | False | live]
; [else-branch: 653 | True | live]
(push) ; 25
; [then-branch: 653 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 653 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 654 | !(p2@15@01) | live]
; [else-branch: 654 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 654 | !(p2@15@01)]
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 655 | p1@14@01 | live]
; [else-branch: 655 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 655 | p1@14@01]
; [exec]
; ret1 := ret1 || tmp_ret1
; [eval] ret1 || tmp_ret1
(push) ; 24
; [then-branch: 656 | False | live]
; [else-branch: 656 | True | live]
(push) ; 25
; [then-branch: 656 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 656 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [exec]
; except1 := except1 || tmp_except1
; [eval] except1 || tmp_except1
(push) ; 24
; [then-branch: 657 | False | live]
; [else-branch: 657 | True | live]
(push) ; 25
; [then-branch: 657 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 657 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 658 | p2@15@01 | dead]
; [else-branch: 658 | !(p2@15@01) | live]
(push) ; 24
; [else-branch: 658 | !(p2@15@01)]
(pop) ; 24
; [eval] !p2
(push) ; 24
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 659 | !(p2@15@01) | live]
; [else-branch: 659 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 659 | !(p2@15@01)]
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 660 | !(p1@14@01) | live]
; [else-branch: 660 | p1@14@01 | live]
(push) ; 26
; [then-branch: 660 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 660 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 661 | False | live]
; [else-branch: 661 | True | live]
(push) ; 28
; [then-branch: 661 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 661 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 662 | p1@14@01 | live]
; [else-branch: 662 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 662 | p1@14@01]
; [exec]
; _res := _checkDefined(x_0, 3170168)
; [eval] _checkDefined(x_0, 3170168)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@148@01 3170168))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@148@01 3170168))
(declare-const _res@150@01 $Ref)
(assert (= _res@150@01 (_checkDefined $Snap.unit x_0@148@01 3170168)))
; [exec]
; ret1 := true
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 663 | !(p2@15@01) | live]
; [else-branch: 663 | p2@15@01 | live]
(push) ; 27
; [then-branch: 663 | !(p2@15@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 663 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 28
; [then-branch: 664 | False | live]
; [else-branch: 664 | True | live]
(push) ; 29
; [then-branch: 664 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 664 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 665 | p2@15@01 | dead]
; [else-branch: 665 | !(p2@15@01) | live]
(push) ; 26
; [else-branch: 665 | !(p2@15@01)]
(pop) ; 26
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 666 | !(p2@15@01) | live]
; [else-branch: 666 | p2@15@01 | live]
(push) ; 27
; [then-branch: 666 | !(p2@15@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 666 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 28
; [then-branch: 667 | False | live]
; [else-branch: 667 | True | live]
(push) ; 29
; [then-branch: 667 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 667 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 668 | !(p2@15@01) | live]
; [else-branch: 668 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 668 | !(p2@15@01)]
; [exec]
; assert (p1 ==> !except1) && (p2 ==> !except2)
; [eval] p1 ==> !except1
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 669 | p1@14@01 | live]
; [else-branch: 669 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 669 | p1@14@01]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> !except2
(push) ; 27
; [then-branch: 670 | p2@15@01 | dead]
; [else-branch: 670 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 670 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 671 | p1@14@01 | live]
; [else-branch: 671 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 671 | p1@14@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> true
(push) ; 27
; [then-branch: 672 | p2@15@01 | dead]
; [else-branch: 672 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 672 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> issubtype(typeof(_res), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 673 | p1@14@01 | live]
; [else-branch: 673 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 673 | p1@14@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@150@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@150@01) (as int<PyType>  PyType))))
; [eval] p2 ==> issubtype(typeof(_res_0), int())
(push) ; 27
; [then-branch: 674 | p2@15@01 | dead]
; [else-branch: 674 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 674 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 675 | p1@14@01 | live]
; [else-branch: 675 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 675 | p1@14@01]
; [eval] bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 676 | bool___unbox__(_, b@22@01) | live]
; [else-branch: 676 | !(bool___unbox__(_, b@22@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 676 | bool___unbox__(_, b@22@01)]
(assert (bool___unbox__ $Snap.unit b@22@01))
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> _res@150@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@150@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@150@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@150@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@150@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b@22@01)
  (and
    (bool___unbox__ $Snap.unit b@22@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res@150@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@150@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b@22@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (=>
      (bool___unbox__ $Snap.unit b@22@01)
      (and
        (bool___unbox__ $Snap.unit b@22@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res@150@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@150@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b@22@01))))
(push) ; 27
(assert (not (=>
  (and p1@14@01 (bool___unbox__ $Snap.unit b@22@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@150@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@14@01 (bool___unbox__ $Snap.unit b@22@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@150@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
; [eval] p2 ==> bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
(push) ; 27
; [then-branch: 677 | p2@15@01 | dead]
; [else-branch: 677 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 677 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 678 | p1@14@01 | live]
; [else-branch: 678 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 678 | p1@14@01]
; [eval] !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
; [eval] !bool___unbox__(b)
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 679 | !(bool___unbox__(_, b@22@01)) | dead]
; [else-branch: 679 | bool___unbox__(_, b@22@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 679 | bool___unbox__(_, b@22@01)]
(assert (bool___unbox__ $Snap.unit b@22@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (bool___unbox__ $Snap.unit b@22@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (bool___unbox__ $Snap.unit b@22@01))))
; [eval] p2 ==> !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
(push) ; 27
; [then-branch: 680 | p2@15@01 | dead]
; [else-branch: 680 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 680 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 681 | p1@14@01 | live]
; [else-branch: 681 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 681 | p1@14@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 29
; [then-branch: 682 | False | live]
; [else-branch: 682 | True | live]
(push) ; 30
; [then-branch: 682 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 682 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 31
; [then-branch: 683 | False | live]
; [else-branch: 683 | True | live]
(push) ; 32
; [then-branch: 683 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 683 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 33
; [then-branch: 684 | False | live]
; [else-branch: 684 | True | live]
(push) ; 34
; [then-branch: 684 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 684 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
(push) ; 27
; [then-branch: 685 | p2@15@01 | dead]
; [else-branch: 685 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 685 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 686 | !(p1@14@01) | live]
; [else-branch: 686 | p1@14@01 | live]
(push) ; 26
; [then-branch: 686 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 686 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 687 | False | live]
; [else-branch: 687 | True | live]
(push) ; 28
; [then-branch: 687 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 687 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 688 | !(p1@14@01) | dead]
; [else-branch: 688 | p1@14@01 | live]
(push) ; 25
; [else-branch: 688 | p1@14@01]
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !p1
; [then-branch: 689 | !(p1@14@01) | dead]
; [else-branch: 689 | p1@14@01 | live]
(push) ; 23
; [else-branch: 689 | p1@14@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 690 | !(p1@14@01) | live]
; [else-branch: 690 | p1@14@01 | live]
(push) ; 22
; [then-branch: 690 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 690 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 691 | False | live]
; [else-branch: 691 | True | live]
(push) ; 24
; [then-branch: 691 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 691 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 692 | !(p1@14@01) | dead]
; [else-branch: 692 | p1@14@01 | live]
(push) ; 21
; [else-branch: 692 | p1@14@01]
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !p1
; [then-branch: 693 | !(p1@14@01) | dead]
; [else-branch: 693 | p1@14@01 | live]
(push) ; 19
; [else-branch: 693 | p1@14@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 15
; [then-branch: 694 | !(p1@14@01) | live]
; [else-branch: 694 | p1@14@01 | live]
(push) ; 16
; [then-branch: 694 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 694 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 695 | False | live]
; [else-branch: 695 | True | live]
(push) ; 18
; [then-branch: 695 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 695 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 696 | !(p1@14@01) | dead]
; [else-branch: 696 | p1@14@01 | live]
(push) ; 15
; [else-branch: 696 | p1@14@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !(p1_1 && (!ret1 && !except1))
; [eval] p1_1 && (!ret1 && !except1)
(push) ; 13
; [then-branch: 697 | !(p1_1@144@01) | live]
; [else-branch: 697 | p1_1@144@01 | live]
(push) ; 14
; [then-branch: 697 | !(p1_1@144@01)]
(assert (not p1_1@144@01))
(pop) ; 14
(push) ; 14
; [else-branch: 697 | p1_1@144@01]
; [eval] !ret1
(push) ; 15
; [then-branch: 698 | False | live]
; [else-branch: 698 | True | live]
(push) ; 16
; [then-branch: 698 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 698 | True]
; [eval] !except1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 699 | !(p1_1@144@01) | dead]
; [else-branch: 699 | p1_1@144@01 | live]
(push) ; 13
; [else-branch: 699 | p1_1@144@01]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !p1_1
(push) ; 11
(set-option :timeout 10)
(assert (not p1_1@144@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 700 | !(p1_1@144@01) | dead]
; [else-branch: 700 | p1_1@144@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 700 | p1_1@144@01]
(assert p1_1@144@01)
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 9
; [then-branch: 701 | !(p1_0@137@01) | live]
; [else-branch: 701 | p1_0@137@01 | live]
(push) ; 10
; [then-branch: 701 | !(p1_0@137@01)]
(assert (not p1_0@137@01))
(pop) ; 10
(push) ; 10
; [else-branch: 701 | p1_0@137@01]
; [eval] !ret1
(push) ; 11
; [then-branch: 702 | False | live]
; [else-branch: 702 | True | live]
(push) ; 12
; [then-branch: 702 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 702 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 703 | !(p1_0@137@01) | dead]
; [else-branch: 703 | p1_0@137@01 | live]
(push) ; 9
; [else-branch: 703 | p1_0@137@01]
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 704 | !(p1_0@137@01) | live]
; [else-branch: 704 | p1_0@137@01 | live]
(push) ; 8
; [then-branch: 704 | !(p1_0@137@01)]
(assert (not p1_0@137@01))
(pop) ; 8
(push) ; 8
; [else-branch: 704 | p1_0@137@01]
; [eval] !ret1
(push) ; 9
; [then-branch: 705 | False | live]
; [else-branch: 705 | True | live]
(push) ; 10
; [then-branch: 705 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 705 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 706 | !(p1_0@137@01) | dead]
; [else-branch: 706 | p1_0@137@01 | live]
(push) ; 7
; [else-branch: 706 | p1_0@137@01]
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 583 | !(p1_0@137@01)]
(assert (not p1_0@137@01))
(pop) ; 5
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 5
; [then-branch: 707 | !(p1_0@137@01) | live]
; [else-branch: 707 | p1_0@137@01 | live]
(push) ; 6
; [then-branch: 707 | !(p1_0@137@01)]
(assert (not p1_0@137@01))
(pop) ; 6
(push) ; 6
; [else-branch: 707 | p1_0@137@01]
(assert p1_0@137@01)
; [eval] !ret1
(push) ; 7
; [then-branch: 708 | False | live]
; [else-branch: 708 | True | live]
(push) ; 8
; [then-branch: 708 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 708 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_0@137@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_0@137@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 709 | !(p1_0@137@01) | live]
; [else-branch: 709 | p1_0@137@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 709 | !(p1_0@137@01)]
(assert (not p1_0@137@01))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 6
; [then-branch: 710 | !(p2_0@138@01) | live]
; [else-branch: 710 | p2_0@138@01 | live]
(push) ; 7
; [then-branch: 710 | !(p2_0@138@01)]
(assert (not p2_0@138@01))
(pop) ; 7
(push) ; 7
; [else-branch: 710 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 8
; [then-branch: 711 | False | live]
; [else-branch: 711 | True | live]
(push) ; 9
; [then-branch: 711 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 711 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_0@138@01 (not p2_0@138@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_0@138@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 712 | p2_0@138@01 | dead]
; [else-branch: 712 | !(p2_0@138@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 712 | !(p2_0@138@01)]
(assert (not p2_0@138@01))
(pop) ; 6
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 6
; [then-branch: 713 | !(p2_0@138@01) | live]
; [else-branch: 713 | p2_0@138@01 | live]
(push) ; 7
; [then-branch: 713 | !(p2_0@138@01)]
(assert (not p2_0@138@01))
(pop) ; 7
(push) ; 7
; [else-branch: 713 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 8
; [then-branch: 714 | False | live]
; [else-branch: 714 | True | live]
(push) ; 9
; [then-branch: 714 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 714 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_0@138@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_0@138@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 715 | !(p2_0@138@01) | live]
; [else-branch: 715 | p2_0@138@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 715 | !(p2_0@138@01)]
(assert (not p2_0@138@01))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 716 | !(p1_0@137@01) | live]
; [else-branch: 716 | p1_0@137@01 | live]
(push) ; 8
; [then-branch: 716 | !(p1_0@137@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 716 | p1_0@137@01]
(assert p1_0@137@01)
; [eval] !ret1
(push) ; 9
; [then-branch: 717 | False | live]
; [else-branch: 717 | True | live]
(push) ; 10
; [then-branch: 717 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 717 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 718 | p1_0@137@01 | dead]
; [else-branch: 718 | !(p1_0@137@01) | live]
(push) ; 7
; [else-branch: 718 | !(p1_0@137@01)]
(pop) ; 7
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 7
; [then-branch: 719 | !(p1_0@137@01) | live]
; [else-branch: 719 | p1_0@137@01 | live]
(push) ; 8
; [then-branch: 719 | !(p1_0@137@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 719 | p1_0@137@01]
(assert p1_0@137@01)
; [eval] !ret1
(push) ; 9
; [then-branch: 720 | False | live]
; [else-branch: 720 | True | live]
(push) ; 10
; [then-branch: 720 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 720 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_0@137@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 721 | !(p1_0@137@01) | live]
; [else-branch: 721 | p1_0@137@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 721 | !(p1_0@137@01)]
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 8
; [then-branch: 722 | !(p2_0@138@01) | live]
; [else-branch: 722 | p2_0@138@01 | live]
(push) ; 9
; [then-branch: 722 | !(p2_0@138@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 722 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 10
; [then-branch: 723 | False | live]
; [else-branch: 723 | True | live]
(push) ; 11
; [then-branch: 723 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 723 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 724 | p2_0@138@01 | dead]
; [else-branch: 724 | !(p2_0@138@01) | live]
(push) ; 8
; [else-branch: 724 | !(p2_0@138@01)]
(pop) ; 8
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 8
; [then-branch: 725 | !(p2_0@138@01) | live]
; [else-branch: 725 | p2_0@138@01 | live]
(push) ; 9
; [then-branch: 725 | !(p2_0@138@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 725 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 10
; [then-branch: 726 | False | live]
; [else-branch: 726 | True | live]
(push) ; 11
; [then-branch: 726 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 726 | True]
; [eval] !except2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_0@138@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 727 | !(p2_0@138@01) | live]
; [else-branch: 727 | p2_0@138@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 727 | !(p2_0@138@01)]
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 9
; [then-branch: 728 | !(p1_0@137@01) | live]
; [else-branch: 728 | p1_0@137@01 | live]
(push) ; 10
; [then-branch: 728 | !(p1_0@137@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 728 | p1_0@137@01]
(assert p1_0@137@01)
; [eval] !ret1
(push) ; 11
; [then-branch: 729 | False | live]
; [else-branch: 729 | True | live]
(push) ; 12
; [then-branch: 729 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 729 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 730 | p1_0@137@01 | dead]
; [else-branch: 730 | !(p1_0@137@01) | live]
(push) ; 9
; [else-branch: 730 | !(p1_0@137@01)]
(pop) ; 9
; [eval] !(p1_0 && (!ret1 && !except1))
; [eval] p1_0 && (!ret1 && !except1)
(push) ; 9
; [then-branch: 731 | !(p1_0@137@01) | live]
; [else-branch: 731 | p1_0@137@01 | live]
(push) ; 10
; [then-branch: 731 | !(p1_0@137@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 731 | p1_0@137@01]
(assert p1_0@137@01)
; [eval] !ret1
(push) ; 11
; [then-branch: 732 | False | live]
; [else-branch: 732 | True | live]
(push) ; 12
; [then-branch: 732 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 732 | True]
; [eval] !except1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_0@137@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 733 | !(p1_0@137@01) | live]
; [else-branch: 733 | p1_0@137@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 733 | !(p1_0@137@01)]
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 734 | !(p2_0@138@01) | live]
; [else-branch: 734 | p2_0@138@01 | live]
(push) ; 11
; [then-branch: 734 | !(p2_0@138@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 734 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 12
; [then-branch: 735 | False | live]
; [else-branch: 735 | True | live]
(push) ; 13
; [then-branch: 735 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 735 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 736 | p2_0@138@01 | dead]
; [else-branch: 736 | !(p2_0@138@01) | live]
(push) ; 10
; [else-branch: 736 | !(p2_0@138@01)]
(pop) ; 10
; [eval] !(p2_0 && (!ret2 && !except2))
; [eval] p2_0 && (!ret2 && !except2)
(push) ; 10
; [then-branch: 737 | !(p2_0@138@01) | live]
; [else-branch: 737 | p2_0@138@01 | live]
(push) ; 11
; [then-branch: 737 | !(p2_0@138@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 737 | p2_0@138@01]
(assert p2_0@138@01)
; [eval] !ret2
(push) ; 12
; [then-branch: 738 | False | live]
; [else-branch: 738 | True | live]
(push) ; 13
; [then-branch: 738 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 738 | True]
; [eval] !except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_0@138@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 739 | !(p2_0@138@01) | live]
; [else-branch: 739 | p2_0@138@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 739 | !(p2_0@138@01)]
; [exec]
; thisexcept1 := except1 && !bypass1
; [eval] except1 && !bypass1
; [exec]
; thisexcept2 := except2 && !bypass2
; [eval] except2 && !bypass2
; [exec]
; p1_1 := p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
; [eval] p1 && (thisexcept1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 740 | !(p1@14@01) | live]
; [else-branch: 740 | p1@14@01 | live]
(push) ; 12
; [then-branch: 740 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 12
(push) ; 12
; [else-branch: 740 | p1@14@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [exec]
; p2_1 := p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
; [eval] p2 && (thisexcept2 && issubtype(typeof(_err_0), MyException()))
(push) ; 11
; [then-branch: 741 | !(p2@15@01) | live]
; [else-branch: 741 | p2@15@01 | live]
(push) ; 12
; [then-branch: 741 | !(p2@15@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 741 | p2@15@01]
(assert p2@15@01)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 742 | False | dead]
; [else-branch: 742 | True | live]
(push) ; 11
; [else-branch: 742 | True]
(pop) ; 11
; [eval] !p1_1
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 743 | True | live]
; [else-branch: 743 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 743 | True]
; [then-branch: 744 | False | dead]
; [else-branch: 744 | True | live]
(push) ; 12
; [else-branch: 744 | True]
(pop) ; 12
; [eval] !p2_1
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 745 | True | live]
; [else-branch: 745 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 745 | True]
; [eval] p1_1 && (!ret1 && !except1)
; [then-branch: 746 | False | dead]
; [else-branch: 746 | True | live]
(push) ; 13
; [else-branch: 746 | True]
(pop) ; 13
; [eval] !(p1_1 && (!ret1 && !except1))
; [eval] p1_1 && (!ret1 && !except1)
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 747 | True | live]
; [else-branch: 747 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 747 | True]
; [eval] p2_1 && (!ret2 && !except2)
; [then-branch: 748 | False | dead]
; [else-branch: 748 | True | live]
(push) ; 14
; [else-branch: 748 | True]
(pop) ; 14
; [eval] !(p2_1 && (!ret2 && !except2))
; [eval] p2_1 && (!ret2 && !except2)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 749 | True | live]
; [else-branch: 749 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 749 | True]
; [eval] p1 && (!ret1 && !except1)
(push) ; 15
; [then-branch: 750 | !(p1@14@01) | live]
; [else-branch: 750 | p1@14@01 | live]
(push) ; 16
; [then-branch: 750 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 750 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 751 | False | live]
; [else-branch: 751 | True | live]
(push) ; 18
; [then-branch: 751 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 751 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 752 | p1@14@01 | live]
; [else-branch: 752 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 752 | p1@14@01]
; [exec]
; _err := null
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 753 | !(p2@15@01) | live]
; [else-branch: 753 | p2@15@01 | live]
(push) ; 17
; [then-branch: 753 | !(p2@15@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 753 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 18
; [then-branch: 754 | False | live]
; [else-branch: 754 | True | live]
(push) ; 19
; [then-branch: 754 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 754 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 755 | p2@15@01 | dead]
; [else-branch: 755 | !(p2@15@01) | live]
(push) ; 16
; [else-branch: 755 | !(p2@15@01)]
(pop) ; 16
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 16
; [then-branch: 756 | !(p2@15@01) | live]
; [else-branch: 756 | p2@15@01 | live]
(push) ; 17
; [then-branch: 756 | !(p2@15@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 756 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 18
; [then-branch: 757 | False | live]
; [else-branch: 757 | True | live]
(push) ; 19
; [then-branch: 757 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 757 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 758 | !(p2@15@01) | live]
; [else-branch: 758 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 758 | !(p2@15@01)]
; [exec]
; p1_2 := p1 && !thisexcept1
; [eval] p1 && !thisexcept1
(push) ; 17
; [then-branch: 759 | !(p1@14@01) | live]
; [else-branch: 759 | p1@14@01 | live]
(push) ; 18
; [then-branch: 759 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 759 | p1@14@01]
; [eval] !thisexcept1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [exec]
; p2_2 := p2 && !thisexcept2
; [eval] p2 && !thisexcept2
(push) ; 17
; [then-branch: 760 | !(p2@15@01) | live]
; [else-branch: 760 | p2@15@01 | live]
(push) ; 18
; [then-branch: 760 | !(p2@15@01)]
(pop) ; 18
(push) ; 18
; [else-branch: 760 | p2@15@01]
(assert p2@15@01)
; [eval] !thisexcept2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 761 | !(p1@14@01) | live]
; [else-branch: 761 | p1@14@01 | live]
(push) ; 18
; [then-branch: 761 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 761 | p1@14@01]
; [eval] !ret1
(push) ; 19
; [then-branch: 762 | False | live]
; [else-branch: 762 | True | live]
(push) ; 20
; [then-branch: 762 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 762 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 763 | p1@14@01 | live]
; [else-branch: 763 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 763 | p1@14@01]
; [exec]
; x_0 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 18
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 18
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_0@151@01 $Ref)
(assert (= x_0@151@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 18
(assert (_isDefined%precondition $Snap.unit 3170168))
(pop) ; 18
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170168))
(assert (_isDefined $Snap.unit 3170168))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_2 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 18
; [then-branch: 764 | !(p2@15@01) | live]
; [else-branch: 764 | p2@15@01 | live]
(push) ; 19
; [then-branch: 764 | !(p2@15@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 764 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 20
; [then-branch: 765 | False | live]
; [else-branch: 765 | True | live]
(push) ; 21
; [then-branch: 765 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 765 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 766 | p2@15@01 | dead]
; [else-branch: 766 | !(p2@15@01) | live]
(push) ; 18
; [else-branch: 766 | !(p2@15@01)]
(pop) ; 18
; [eval] !(p2_2 && (!ret2 && !except2))
; [eval] p2_2 && (!ret2 && !except2)
(push) ; 18
; [then-branch: 767 | !(p2@15@01) | live]
; [else-branch: 767 | p2@15@01 | live]
(push) ; 19
; [then-branch: 767 | !(p2@15@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 767 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 20
; [then-branch: 768 | False | live]
; [else-branch: 768 | True | live]
(push) ; 21
; [then-branch: 768 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 768 | True]
; [eval] !except2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 769 | !(p2@15@01) | live]
; [else-branch: 769 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 769 | !(p2@15@01)]
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 770 | p1@14@01 | live]
; [else-branch: 770 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 770 | p1@14@01]
; [exec]
; tmp_ret1 := ret1
; [exec]
; ret1 := oldret1
; [exec]
; tmp_except1 := except1
; [exec]
; except1 := oldexcept1
; [then-branch: 771 | p2@15@01 | dead]
; [else-branch: 771 | !(p2@15@01) | live]
(push) ; 20
; [else-branch: 771 | !(p2@15@01)]
(pop) ; 20
; [eval] !p2
(push) ; 20
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 772 | !(p2@15@01) | live]
; [else-branch: 772 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 772 | !(p2@15@01)]
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 773 | !(p1@14@01) | live]
; [else-branch: 773 | p1@14@01 | live]
(push) ; 22
; [then-branch: 773 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 773 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 774 | False | live]
; [else-branch: 774 | True | live]
(push) ; 24
; [then-branch: 774 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 774 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 775 | p1@14@01 | live]
; [else-branch: 775 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 775 | p1@14@01]
; [exec]
; x_0 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_0, 3170168)))
; [eval] int___unbox__(_checkDefined(x_0, 3170168))
; [eval] _checkDefined(x_0, 3170168)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@151@01 3170168))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@151@01 3170168))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@151@01 3170168)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@151@01 3170168)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@151@01 3170168)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@151@01 3170168)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@151@01 3170168))))
(push) ; 22
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@151@01 3170168))))
(pop) ; 22
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@151@01 3170168))))
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@151@01 3170168)))))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@151@01 3170168)))))
(declare-const x_0@153@01 $Ref)
(assert (=
  x_0@153@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@151@01 3170168))))))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 22
(pop) ; 22
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2 && (!ret2 && !except2)
(set-option :timeout 0)
(push) ; 22
; [then-branch: 776 | !(p2@15@01) | live]
; [else-branch: 776 | p2@15@01 | live]
(push) ; 23
; [then-branch: 776 | !(p2@15@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 776 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 24
; [then-branch: 777 | False | live]
; [else-branch: 777 | True | live]
(push) ; 25
; [then-branch: 777 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 777 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 778 | p2@15@01 | dead]
; [else-branch: 778 | !(p2@15@01) | live]
(push) ; 22
; [else-branch: 778 | !(p2@15@01)]
(pop) ; 22
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 22
; [then-branch: 779 | !(p2@15@01) | live]
; [else-branch: 779 | p2@15@01 | live]
(push) ; 23
; [then-branch: 779 | !(p2@15@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 779 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 24
; [then-branch: 780 | False | live]
; [else-branch: 780 | True | live]
(push) ; 25
; [then-branch: 780 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 780 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 781 | !(p2@15@01) | live]
; [else-branch: 781 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 781 | !(p2@15@01)]
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 782 | p1@14@01 | live]
; [else-branch: 782 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 782 | p1@14@01]
; [exec]
; ret1 := ret1 || tmp_ret1
; [eval] ret1 || tmp_ret1
(push) ; 24
; [then-branch: 783 | False | live]
; [else-branch: 783 | True | live]
(push) ; 25
; [then-branch: 783 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 783 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [exec]
; except1 := except1 || tmp_except1
; [eval] except1 || tmp_except1
(push) ; 24
; [then-branch: 784 | False | live]
; [else-branch: 784 | True | live]
(push) ; 25
; [then-branch: 784 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 784 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 785 | p2@15@01 | dead]
; [else-branch: 785 | !(p2@15@01) | live]
(push) ; 24
; [else-branch: 785 | !(p2@15@01)]
(pop) ; 24
; [eval] !p2
(push) ; 24
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 786 | !(p2@15@01) | live]
; [else-branch: 786 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 786 | !(p2@15@01)]
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 787 | !(p1@14@01) | live]
; [else-branch: 787 | p1@14@01 | live]
(push) ; 26
; [then-branch: 787 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 787 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 788 | False | live]
; [else-branch: 788 | True | live]
(push) ; 28
; [then-branch: 788 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 788 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 789 | p1@14@01 | live]
; [else-branch: 789 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 789 | p1@14@01]
; [exec]
; _res := _checkDefined(x_0, 3170168)
; [eval] _checkDefined(x_0, 3170168)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@153@01 3170168))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@153@01 3170168))
(declare-const _res@155@01 $Ref)
(assert (= _res@155@01 (_checkDefined $Snap.unit x_0@153@01 3170168)))
; [exec]
; ret1 := true
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 790 | !(p2@15@01) | live]
; [else-branch: 790 | p2@15@01 | live]
(push) ; 27
; [then-branch: 790 | !(p2@15@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 790 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 28
; [then-branch: 791 | False | live]
; [else-branch: 791 | True | live]
(push) ; 29
; [then-branch: 791 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 791 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 792 | p2@15@01 | dead]
; [else-branch: 792 | !(p2@15@01) | live]
(push) ; 26
; [else-branch: 792 | !(p2@15@01)]
(pop) ; 26
; [eval] !(p2 && (!ret2 && !except2))
; [eval] p2 && (!ret2 && !except2)
(push) ; 26
; [then-branch: 793 | !(p2@15@01) | live]
; [else-branch: 793 | p2@15@01 | live]
(push) ; 27
; [then-branch: 793 | !(p2@15@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 793 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(push) ; 28
; [then-branch: 794 | False | live]
; [else-branch: 794 | True | live]
(push) ; 29
; [then-branch: 794 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 794 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 795 | !(p2@15@01) | live]
; [else-branch: 795 | p2@15@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 795 | !(p2@15@01)]
; [exec]
; assert (p1 ==> !except1) && (p2 ==> !except2)
; [eval] p1 ==> !except1
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 796 | p1@14@01 | live]
; [else-branch: 796 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 796 | p1@14@01]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> !except2
(push) ; 27
; [then-branch: 797 | p2@15@01 | dead]
; [else-branch: 797 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 797 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 798 | p1@14@01 | live]
; [else-branch: 798 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 798 | p1@14@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> true
(push) ; 27
; [then-branch: 799 | p2@15@01 | dead]
; [else-branch: 799 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 799 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> issubtype(typeof(_res), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 800 | p1@14@01 | live]
; [else-branch: 800 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 800 | p1@14@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@155@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@155@01) (as int<PyType>  PyType))))
; [eval] p2 ==> issubtype(typeof(_res_0), int())
(push) ; 27
; [then-branch: 801 | p2@15@01 | dead]
; [else-branch: 801 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 801 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 802 | p1@14@01 | live]
; [else-branch: 802 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 802 | p1@14@01]
; [eval] bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 803 | bool___unbox__(_, b@22@01) | dead]
; [else-branch: 803 | !(bool___unbox__(_, b@22@01)) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 803 | !(bool___unbox__(_, b@22@01))]
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (not (bool___unbox__ $Snap.unit b@22@01)))))
; [eval] p2 ==> bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(-2))
(push) ; 27
; [then-branch: 804 | p2@15@01 | dead]
; [else-branch: 804 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 804 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 805 | p1@14@01 | live]
; [else-branch: 805 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 805 | p1@14@01]
; [eval] !bool___unbox__(b) ==> int___eq__(_res, __prim__int___box__(2))
; [eval] !bool___unbox__(b)
; [eval] bool___unbox__(b)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@22@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@22@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@22@01))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 806 | !(bool___unbox__(_, b@22@01)) | live]
; [else-branch: 806 | bool___unbox__(_, b@22@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 806 | !(bool___unbox__(_, b@22@01))]
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
; [eval] int___eq__(_res, __prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> _res@155@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@155@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@155@01 (__prim__int___box__ $Snap.unit 2)))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@155@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@155@01 (__prim__int___box__ $Snap.unit 2))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b@22@01))
  (and
    (not (bool___unbox__ $Snap.unit b@22@01))
    (__prim__int___box__%precondition $Snap.unit 2)
    (issubtype<Bool> (typeof<PyType> _res@155@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@155@01 (__prim__int___box__ $Snap.unit 2)))))
(assert (not (bool___unbox__ $Snap.unit b@22@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> b@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@22@01)
    (=>
      (not (bool___unbox__ $Snap.unit b@22@01))
      (and
        (not (bool___unbox__ $Snap.unit b@22@01))
        (__prim__int___box__%precondition $Snap.unit 2)
        (issubtype<Bool> (typeof<PyType> _res@155@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@155@01 (__prim__int___box__ $Snap.unit 2))))
    (not (bool___unbox__ $Snap.unit b@22@01)))))
(push) ; 27
(assert (not (=>
  (and p1@14@01 (not (bool___unbox__ $Snap.unit b@22@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@155@01 (__prim__int___box__ $Snap.unit 2)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@14@01 (not (bool___unbox__ $Snap.unit b@22@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@155@01 (__prim__int___box__ $Snap.unit 2))))
; [eval] p2 ==> !bool___unbox__(b_9) ==> int___eq__(_res_0, __prim__int___box__(2))
(push) ; 27
; [then-branch: 807 | p2@15@01 | dead]
; [else-branch: 807 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 807 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1 ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 808 | p1@14@01 | live]
; [else-branch: 808 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 808 | p1@14@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 29
; [then-branch: 809 | False | live]
; [else-branch: 809 | True | live]
(push) ; 30
; [then-branch: 809 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 809 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 31
; [then-branch: 810 | False | live]
; [else-branch: 810 | True | live]
(push) ; 32
; [then-branch: 810 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 810 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 33
; [then-branch: 811 | False | live]
; [else-branch: 811 | True | live]
(push) ; 34
; [then-branch: 811 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 811 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
(push) ; 27
; [then-branch: 812 | p2@15@01 | dead]
; [else-branch: 812 | !(p2@15@01) | live]
(push) ; 28
; [else-branch: 812 | !(p2@15@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 25
; [then-branch: 813 | !(p1@14@01) | live]
; [else-branch: 813 | p1@14@01 | live]
(push) ; 26
; [then-branch: 813 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 26
(push) ; 26
; [else-branch: 813 | p1@14@01]
; [eval] !ret1
(push) ; 27
; [then-branch: 814 | False | live]
; [else-branch: 814 | True | live]
(push) ; 28
; [then-branch: 814 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 814 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 815 | !(p1@14@01) | dead]
; [else-branch: 815 | p1@14@01 | live]
(push) ; 25
; [else-branch: 815 | p1@14@01]
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !p1
; [then-branch: 816 | !(p1@14@01) | dead]
; [else-branch: 816 | p1@14@01 | live]
(push) ; 23
; [else-branch: 816 | p1@14@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 21
; [then-branch: 817 | !(p1@14@01) | live]
; [else-branch: 817 | p1@14@01 | live]
(push) ; 22
; [then-branch: 817 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 22
(push) ; 22
; [else-branch: 817 | p1@14@01]
; [eval] !ret1
(push) ; 23
; [then-branch: 818 | False | live]
; [else-branch: 818 | True | live]
(push) ; 24
; [then-branch: 818 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 818 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 819 | !(p1@14@01) | dead]
; [else-branch: 819 | p1@14@01 | live]
(push) ; 21
; [else-branch: 819 | p1@14@01]
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !p1
; [then-branch: 820 | !(p1@14@01) | dead]
; [else-branch: 820 | p1@14@01 | live]
(push) ; 19
; [else-branch: 820 | p1@14@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !(p1_2 && (!ret1 && !except1))
; [eval] p1_2 && (!ret1 && !except1)
(push) ; 17
; [then-branch: 821 | !(p1@14@01) | live]
; [else-branch: 821 | p1@14@01 | live]
(push) ; 18
; [then-branch: 821 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 18
(push) ; 18
; [else-branch: 821 | p1@14@01]
; [eval] !ret1
(push) ; 19
; [then-branch: 822 | False | live]
; [else-branch: 822 | True | live]
(push) ; 20
; [then-branch: 822 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 822 | True]
; [eval] !except1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 823 | !(p1@14@01) | dead]
; [else-branch: 823 | p1@14@01 | live]
(push) ; 17
; [else-branch: 823 | p1@14@01]
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 15
; [then-branch: 824 | !(p1@14@01) | live]
; [else-branch: 824 | p1@14@01 | live]
(push) ; 16
; [then-branch: 824 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 16
(push) ; 16
; [else-branch: 824 | p1@14@01]
; [eval] !ret1
(push) ; 17
; [then-branch: 825 | False | live]
; [else-branch: 825 | True | live]
(push) ; 18
; [then-branch: 825 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 825 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 826 | !(p1@14@01) | dead]
; [else-branch: 826 | p1@14@01 | live]
(push) ; 15
; [else-branch: 826 | p1@14@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 709 | p1_0@137@01]
(assert p1_0@137@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 564 | p2@15@01]
(assert p2@15@01)
(pop) ; 4
(pop) ; 3
; [eval] !(p1 && (!ret1 && !except1))
; [eval] p1 && (!ret1 && !except1)
(push) ; 3
; [then-branch: 827 | !(p1@14@01) | live]
; [else-branch: 827 | p1@14@01 | live]
(push) ; 4
; [then-branch: 827 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 4
(push) ; 4
; [else-branch: 827 | p1@14@01]
; [eval] !ret1
(push) ; 5
; [then-branch: 828 | False | live]
; [else-branch: 828 | True | live]
(push) ; 6
; [then-branch: 828 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 828 | True]
; [eval] !except1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [then-branch: 829 | !(p1@14@01) | dead]
; [else-branch: 829 | p1@14@01 | live]
(push) ; 3
; [else-branch: 829 | p1@14@01]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- m2 ----------
(declare-const p1_3@156@01 Bool)
(declare-const p2_3@157@01 Bool)
(declare-const _cthread_158@158@01 $Ref)
(declare-const _cthread_158_0@159@01 $Ref)
(declare-const _caller_measures_158@160@01 Seq<Measure$>)
(declare-const _caller_measures_158_0@161@01 Seq<Measure$>)
(declare-const _residue_158@162@01 $Perm)
(declare-const _residue_158_0@163@01 $Perm)
(declare-const b_0@164@01 $Ref)
(declare-const b_0_0@165@01 $Ref)
(declare-const _current_wait_level_158@166@01 $Perm)
(declare-const _current_wait_level_158_0@167@01 $Perm)
(declare-const _res@168@01 $Ref)
(declare-const _res_1@169@01 $Ref)
(declare-const p1_3@170@01 Bool)
(declare-const p2_3@171@01 Bool)
(declare-const _cthread_158@172@01 $Ref)
(declare-const _cthread_158_0@173@01 $Ref)
(declare-const _caller_measures_158@174@01 Seq<Measure$>)
(declare-const _caller_measures_158_0@175@01 Seq<Measure$>)
(declare-const _residue_158@176@01 $Perm)
(declare-const _residue_158_0@177@01 $Perm)
(declare-const b_0@178@01 $Ref)
(declare-const b_0_0@179@01 $Ref)
(declare-const _current_wait_level_158@180@01 $Perm)
(declare-const _current_wait_level_158_0@181@01 $Perm)
(declare-const _res@182@01 $Ref)
(declare-const _res_1@183@01 $Ref)
(push) ; 1
(declare-const $t@184@01 $Snap)
(assert (= $t@184@01 ($Snap.combine ($Snap.first $t@184@01) ($Snap.second $t@184@01))))
(assert (= ($Snap.first $t@184@01) $Snap.unit))
; [eval] p1_3 ==> _cthread_158 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@170@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 830 | p1_3@170@01 | live]
; [else-branch: 830 | !(p1_3@170@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 830 | p1_3@170@01]
(assert p1_3@170@01)
; [eval] _cthread_158 != null
(pop) ; 3
(push) ; 3
; [else-branch: 830 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_3@170@01) p1_3@170@01))
(assert (=> p1_3@170@01 (not (= _cthread_158@172@01 $Ref.null))))
(assert (=
  ($Snap.second $t@184@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@184@01))
    ($Snap.second ($Snap.second $t@184@01)))))
(assert (= ($Snap.first ($Snap.second $t@184@01)) $Snap.unit))
; [eval] p2_3 ==> _cthread_158_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@171@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 831 | p2_3@171@01 | live]
; [else-branch: 831 | !(p2_3@171@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 831 | p2_3@171@01]
(assert p2_3@171@01)
; [eval] _cthread_158_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 831 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_3@171@01) p2_3@171@01))
(assert (=> p2_3@171@01 (not (= _cthread_158_0@173@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@184@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@184@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@184@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@184@01))) $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_cthread_158), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@170@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 832 | p1_3@170@01 | live]
; [else-branch: 832 | !(p1_3@170@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 832 | p1_3@170@01]
(assert p1_3@170@01)
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 832 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_3@170@01
  (issubtype<Bool> (typeof<PyType> _cthread_158@172@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@184@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@184@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@184@01))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_cthread_158_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@171@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 833 | p2_3@171@01 | live]
; [else-branch: 833 | !(p2_3@171@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 833 | p2_3@171@01]
(assert p2_3@171@01)
; [eval] issubtype(typeof(_cthread_158_0), Thread_0())
; [eval] typeof(_cthread_158_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 833 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_3@171@01
  (issubtype<Bool> (typeof<PyType> _cthread_158_0@173@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01)))))
  $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(b_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@170@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 834 | p1_3@170@01 | live]
; [else-branch: 834 | !(p1_3@170@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 834 | p1_3@170@01]
(assert p1_3@170@01)
; [eval] issubtype(typeof(b_0), bool())
; [eval] typeof(b_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 834 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_3@170@01
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01))))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(b_0_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@171@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 835 | p2_3@171@01 | live]
; [else-branch: 835 | !(p2_3@171@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 835 | p2_3@171@01]
(assert p2_3@171@01)
; [eval] issubtype(typeof(b_0_0), bool())
; [eval] typeof(b_0_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 835 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_3@171@01
  (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01)))))))
  $Snap.unit))
; [eval] p1_3 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@170@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 836 | p1_3@170@01 | live]
; [else-branch: 836 | !(p1_3@170@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 836 | p1_3@170@01]
(assert p1_3@170@01)
(pop) ; 3
(push) ; 3
; [else-branch: 836 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@184@01)))))))
  $Snap.unit))
; [eval] p2_3 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@171@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 837 | p2_3@171@01 | live]
; [else-branch: 837 | !(p2_3@171@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 837 | p2_3@171@01]
(assert p2_3@171@01)
(pop) ; 3
(push) ; 3
; [else-branch: 837 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@185@01 $Snap)
(assert (= $t@185@01 ($Snap.combine ($Snap.first $t@185@01) ($Snap.second $t@185@01))))
(assert (= ($Snap.first $t@185@01) $Snap.unit))
; [eval] p1_3 ==> (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_158) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_3@170@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 838 | p1_3@170@01 | live]
; [else-branch: 838 | !(p1_3@170@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 838 | p1_3@170@01]
(assert p1_3@170@01)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_158) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_158)
(push) ; 5
; [then-branch: 839 | False | live]
; [else-branch: 839 | True | live]
(push) ; 6
; [then-branch: 839 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 839 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_158)
(push) ; 7
; [then-branch: 840 | False | live]
; [else-branch: 840 | True | live]
(push) ; 8
; [then-branch: 840 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 840 | True]
; [eval] _residue_158 <= _current_wait_level_158
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 838 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_3@170@01 (<= _residue_158@176@01 _current_wait_level_158@180@01)))
(assert (=
  ($Snap.second $t@185@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@185@01))
    ($Snap.second ($Snap.second $t@185@01)))))
(assert (= ($Snap.first ($Snap.second $t@185@01)) $Snap.unit))
; [eval] p2_3 ==> (forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _current_wait_level_158_0) && ((forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _current_wait_level_158_0) && _residue_158_0 <= _current_wait_level_158_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@171@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 841 | p2_3@171@01 | live]
; [else-branch: 841 | !(p2_3@171@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 841 | p2_3@171@01]
(assert p2_3@171@01)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _current_wait_level_158_0) && ((forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _current_wait_level_158_0) && _residue_158_0 <= _current_wait_level_158_0)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _current_wait_level_158_0)
(push) ; 5
; [then-branch: 842 | False | live]
; [else-branch: 842 | True | live]
(push) ; 6
; [then-branch: 842 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 842 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _current_wait_level_158_0)
(push) ; 7
; [then-branch: 843 | False | live]
; [else-branch: 843 | True | live]
(push) ; 8
; [then-branch: 843 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 843 | True]
; [eval] _residue_158_0 <= _current_wait_level_158_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 841 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_3@171@01 (<= _residue_158_0@177@01 _current_wait_level_158_0@181@01)))
(assert (=
  ($Snap.second ($Snap.second $t@185@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@185@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@185@01))) $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_res), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_3@170@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 844 | p1_3@170@01 | live]
; [else-branch: 844 | !(p1_3@170@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 844 | p1_3@170@01]
(assert p1_3@170@01)
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 844 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_3@170@01
  (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@185@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@185@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@185@01))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_res_1), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@171@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 845 | p2_3@171@01 | live]
; [else-branch: 845 | !(p2_3@171@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 845 | p2_3@171@01]
(assert p2_3@171@01)
; [eval] issubtype(typeof(_res_1), int())
; [eval] typeof(_res_1)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 845 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_3@171@01
  (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))
  $Snap.unit))
; [eval] p1_3 ==> bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_3@170@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 846 | p1_3@170@01 | live]
; [else-branch: 846 | !(p1_3@170@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 846 | p1_3@170@01]
(assert p1_3@170@01)
; [eval] bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_0)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@178@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_0@178@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_0@178@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 847 | bool___unbox__(_, b_0@178@01) | live]
; [else-branch: 847 | !(bool___unbox__(_, b_0@178@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 847 | bool___unbox__(_, b_0@178@01)]
(assert (bool___unbox__ $Snap.unit b_0@178@01))
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@182@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@182@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 6
(push) ; 6
; [else-branch: 847 | !(bool___unbox__(_, b_0@178@01))]
(assert (not (bool___unbox__ $Snap.unit b_0@178@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_0@178@01)
  (and
    (bool___unbox__ $Snap.unit b_0@178@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@182@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
; Joined path conditions
(assert (or
  (not (bool___unbox__ $Snap.unit b_0@178@01))
  (bool___unbox__ $Snap.unit b_0@178@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 846 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p1_3@170@01
  (and
    p1_3@170@01
    (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@178@01)
    (=>
      (bool___unbox__ $Snap.unit b_0@178@01)
      (and
        (bool___unbox__ $Snap.unit b_0@178@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@182@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (or
      (not (bool___unbox__ $Snap.unit b_0@178@01))
      (bool___unbox__ $Snap.unit b_0@178@01)))))
; Joined path conditions
(assert (=>
  (and p1_3@170@01 (bool___unbox__ $Snap.unit b_0@178@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@182@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
  $Snap.unit))
; [eval] p2_3 ==> bool___unbox__(b_0_0) ==> int___eq__(_res_1, __prim__int___box__(-2))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@171@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 848 | p2_3@171@01 | live]
; [else-branch: 848 | !(p2_3@171@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 848 | p2_3@171@01]
(assert p2_3@171@01)
; [eval] bool___unbox__(b_0_0) ==> int___eq__(_res_1, __prim__int___box__(-2))
; [eval] bool___unbox__(b_0_0)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@179@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@179@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_0_0@179@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_0_0@179@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 849 | bool___unbox__(_, b_0_0@179@01) | live]
; [else-branch: 849 | !(bool___unbox__(_, b_0_0@179@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 849 | bool___unbox__(_, b_0_0@179@01)]
(assert (bool___unbox__ $Snap.unit b_0_0@179@01))
; [eval] int___eq__(_res_1, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_1@183@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_1@183@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 6
(push) ; 6
; [else-branch: 849 | !(bool___unbox__(_, b_0_0@179@01))]
(assert (not (bool___unbox__ $Snap.unit b_0_0@179@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_0_0@179@01)
  (and
    (bool___unbox__ $Snap.unit b_0_0@179@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_1@183@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
; Joined path conditions
(assert (or
  (not (bool___unbox__ $Snap.unit b_0_0@179@01))
  (bool___unbox__ $Snap.unit b_0_0@179@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 848 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p2_3@171@01
  (and
    p2_3@171@01
    (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0_0@179@01)
    (=>
      (bool___unbox__ $Snap.unit b_0_0@179@01)
      (and
        (bool___unbox__ $Snap.unit b_0_0@179@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_1@183@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (or
      (not (bool___unbox__ $Snap.unit b_0_0@179@01))
      (bool___unbox__ $Snap.unit b_0_0@179@01)))))
; Joined path conditions
(assert (=>
  (and p2_3@171@01 (bool___unbox__ $Snap.unit b_0_0@179@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res_1@183@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
  $Snap.unit))
; [eval] p1_3 ==> !bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(2))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_3@170@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 850 | p1_3@170@01 | live]
; [else-branch: 850 | !(p1_3@170@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 850 | p1_3@170@01]
(assert p1_3@170@01)
; [eval] !bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(2))
; [eval] !bool___unbox__(b_0)
; [eval] bool___unbox__(b_0)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@178@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_0@178@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_0@178@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 851 | !(bool___unbox__(_, b_0@178@01)) | live]
; [else-branch: 851 | bool___unbox__(_, b_0@178@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 851 | !(bool___unbox__(_, b_0@178@01))]
(assert (not (bool___unbox__ $Snap.unit b_0@178@01)))
; [eval] int___eq__(_res, __prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@182@01 (__prim__int___box__ $Snap.unit 2)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@182@01 (__prim__int___box__ $Snap.unit 2))))
(pop) ; 6
(push) ; 6
; [else-branch: 851 | bool___unbox__(_, b_0@178@01)]
(assert (bool___unbox__ $Snap.unit b_0@178@01))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_0@178@01))
  (and
    (not (bool___unbox__ $Snap.unit b_0@178@01))
    (__prim__int___box__%precondition $Snap.unit 2)
    (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@182@01 (__prim__int___box__ $Snap.unit 2)))))
; Joined path conditions
(assert (or
  (bool___unbox__ $Snap.unit b_0@178@01)
  (not (bool___unbox__ $Snap.unit b_0@178@01))))
(pop) ; 4
(push) ; 4
; [else-branch: 850 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p1_3@170@01
  (and
    p1_3@170@01
    (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@178@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_0@178@01))
      (and
        (not (bool___unbox__ $Snap.unit b_0@178@01))
        (__prim__int___box__%precondition $Snap.unit 2)
        (issubtype<Bool> (typeof<PyType> _res@182@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@182@01 (__prim__int___box__ $Snap.unit 2))))
    (or
      (bool___unbox__ $Snap.unit b_0@178@01)
      (not (bool___unbox__ $Snap.unit b_0@178@01))))))
; Joined path conditions
(assert (=>
  (and p1_3@170@01 (not (bool___unbox__ $Snap.unit b_0@178@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@182@01 (__prim__int___box__ $Snap.unit 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
  $Snap.unit))
; [eval] p2_3 ==> !bool___unbox__(b_0_0) ==> int___eq__(_res_1, __prim__int___box__(2))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@171@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 852 | p2_3@171@01 | live]
; [else-branch: 852 | !(p2_3@171@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 852 | p2_3@171@01]
(assert p2_3@171@01)
; [eval] !bool___unbox__(b_0_0) ==> int___eq__(_res_1, __prim__int___box__(2))
; [eval] !bool___unbox__(b_0_0)
; [eval] bool___unbox__(b_0_0)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@179@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@179@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_0_0@179@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_0_0@179@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 853 | !(bool___unbox__(_, b_0_0@179@01)) | live]
; [else-branch: 853 | bool___unbox__(_, b_0_0@179@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 853 | !(bool___unbox__(_, b_0_0@179@01))]
(assert (not (bool___unbox__ $Snap.unit b_0_0@179@01)))
; [eval] int___eq__(_res_1, __prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_1@183@01 (__prim__int___box__ $Snap.unit 2)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_1@183@01 (__prim__int___box__ $Snap.unit 2))))
(pop) ; 6
(push) ; 6
; [else-branch: 853 | bool___unbox__(_, b_0_0@179@01)]
(assert (bool___unbox__ $Snap.unit b_0_0@179@01))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_0_0@179@01))
  (and
    (not (bool___unbox__ $Snap.unit b_0_0@179@01))
    (__prim__int___box__%precondition $Snap.unit 2)
    (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_1@183@01 (__prim__int___box__ $Snap.unit 2)))))
; Joined path conditions
(assert (or
  (bool___unbox__ $Snap.unit b_0_0@179@01)
  (not (bool___unbox__ $Snap.unit b_0_0@179@01))))
(pop) ; 4
(push) ; 4
; [else-branch: 852 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p2_3@171@01
  (and
    p2_3@171@01
    (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0_0@179@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_0_0@179@01))
      (and
        (not (bool___unbox__ $Snap.unit b_0_0@179@01))
        (__prim__int___box__%precondition $Snap.unit 2)
        (issubtype<Bool> (typeof<PyType> _res_1@183@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_1@183@01 (__prim__int___box__ $Snap.unit 2))))
    (or
      (bool___unbox__ $Snap.unit b_0_0@179@01)
      (not (bool___unbox__ $Snap.unit b_0_0@179@01))))))
; Joined path conditions
(assert (=>
  (and p2_3@171@01 (not (bool___unbox__ $Snap.unit b_0_0@179@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res_1@183@01 (__prim__int___box__ $Snap.unit 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
  $Snap.unit))
; [eval] p1_3 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_3@170@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 854 | p1_3@170@01 | live]
; [else-branch: 854 | !(p1_3@170@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 854 | p1_3@170@01]
(assert p1_3@170@01)
(pop) ; 4
(push) ; 4
; [else-branch: 854 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
  $Snap.unit))
; [eval] p2_3 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@171@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 855 | p2_3@171@01 | live]
; [else-branch: 855 | !(p2_3@171@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 855 | p2_3@171@01]
(assert p2_3@171@01)
(pop) ; 4
(push) ; 4
; [else-branch: 855 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_0: Bool
(declare-const ret1_0@186@01 Bool)
; [exec]
; var ret2_0: Bool
(declare-const ret2_0@187@01 Bool)
; [exec]
; var except1_0: Bool
(declare-const except1_0@188@01 Bool)
; [exec]
; var except2_0: Bool
(declare-const except2_0@189@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@190@01 $Ref)
; [exec]
; var _err_1: Ref
(declare-const _err_1@191@01 $Ref)
; [exec]
; var x_1: Ref
(declare-const x_1@192@01 $Ref)
; [exec]
; var x_1_0: Ref
(declare-const x_1_0@193@01 $Ref)
; [exec]
; var error_0: Ref
(declare-const error_0@194@01 $Ref)
; [exec]
; var error_0_0: Ref
(declare-const error_0_0@195@01 $Ref)
; [exec]
; var try_finally_8: Int
(declare-const try_finally_8@196@01 Int)
; [exec]
; var try_finally_8_0: Int
(declare-const try_finally_8_0@197@01 Int)
; [exec]
; var b_5: Ref
(declare-const b_5@198@01 $Ref)
; [exec]
; var b_5_0: Ref
(declare-const b_5_0@199@01 $Ref)
; [exec]
; var MyException_res_0: Ref
(declare-const MyException_res_0@200@01 $Ref)
; [exec]
; var MyException_res_0_0: Ref
(declare-const MyException_res_0_0@201@01 $Ref)
; [exec]
; var _cwl_158: Perm
(declare-const _cwl_158@202@01 $Perm)
; [exec]
; var _cwl_158_0: Perm
(declare-const _cwl_158_0@203@01 $Perm)
; [exec]
; var _method_measures_158: Seq[Measure$]
(declare-const _method_measures_158@204@01 Seq<Measure$>)
; [exec]
; var _method_measures_158_0: Seq[Measure$]
(declare-const _method_measures_158_0@205@01 Seq<Measure$>)
; [exec]
; var bypass1_0: Bool
(declare-const bypass1_0@206@01 Bool)
; [exec]
; var bypass2_0: Bool
(declare-const bypass2_0@207@01 Bool)
; [exec]
; var oldret1_0: Bool
(declare-const oldret1_0@208@01 Bool)
; [exec]
; var oldret2_0: Bool
(declare-const oldret2_0@209@01 Bool)
; [exec]
; var oldexcept1_0: Bool
(declare-const oldexcept1_0@210@01 Bool)
; [exec]
; var oldexcept2_0: Bool
(declare-const oldexcept2_0@211@01 Bool)
; [exec]
; var thisexcept1_0: Bool
(declare-const thisexcept1_0@212@01 Bool)
; [exec]
; var thisexcept2_0: Bool
(declare-const thisexcept2_0@213@01 Bool)
; [exec]
; var p1_5: Bool
(declare-const p1_5@214@01 Bool)
; [exec]
; var p2_5: Bool
(declare-const p2_5@215@01 Bool)
; [exec]
; var p1_6: Bool
(declare-const p1_6@216@01 Bool)
; [exec]
; var p2_6: Bool
(declare-const p2_6@217@01 Bool)
; [exec]
; var tmp_ret1_0: Bool
(declare-const tmp_ret1_0@218@01 Bool)
; [exec]
; var tmp_ret2_0: Bool
(declare-const tmp_ret2_0@219@01 Bool)
; [exec]
; var tmp_break1_0: Bool
(declare-const tmp_break1_0@220@01 Bool)
; [exec]
; var tmp_break2_0: Bool
(declare-const tmp_break2_0@221@01 Bool)
; [exec]
; var tmp_cont1_0: Bool
(declare-const tmp_cont1_0@222@01 Bool)
; [exec]
; var tmp_cont2_0: Bool
(declare-const tmp_cont2_0@223@01 Bool)
; [exec]
; var tmp_except1_0: Bool
(declare-const tmp_except1_0@224@01 Bool)
; [exec]
; var tmp_except2_0: Bool
(declare-const tmp_except2_0@225@01 Bool)
; [exec]
; var p1_4: Bool
(declare-const p1_4@226@01 Bool)
; [exec]
; var p2_4: Bool
(declare-const p2_4@227@01 Bool)
; [exec]
; var p3_0: Bool
(declare-const p3_0@228@01 Bool)
; [exec]
; var p4_0: Bool
(declare-const p4_0@229@01 Bool)
; [exec]
; var tmp_0: Ref
(declare-const tmp_0@230@01 $Ref)
; [exec]
; inhale p1_3
(declare-const $t@231@01 $Snap)
(assert (= $t@231@01 $Snap.unit))
(assert p1_3@170@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_0 := false
; [exec]
; ret2_0 := false
; [exec]
; except1_0 := false
; [exec]
; except2_0 := false
; [eval] p1_3 && (!ret1_0 && !except1_0)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 856 | !(p1_3@170@01) | live]
; [else-branch: 856 | p1_3@170@01 | live]
(push) ; 4
; [then-branch: 856 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 4
(push) ; 4
; [else-branch: 856 | p1_3@170@01]
; [eval] !ret1_0
(push) ; 5
; [then-branch: 857 | False | live]
; [else-branch: 857 | True | live]
(push) ; 6
; [then-branch: 857 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 857 | True]
; [eval] !except1_0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_3@170@01 (not p1_3@170@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 858 | p1_3@170@01 | live]
; [else-branch: 858 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 858 | p1_3@170@01]
; [exec]
; _method_measures_158 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; b_5 := b_0
; [eval] p2_3 && (!ret2_0 && !except2_0)
(push) ; 4
; [then-branch: 859 | !(p2_3@171@01) | live]
; [else-branch: 859 | p2_3@171@01 | live]
(push) ; 5
; [then-branch: 859 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 5
(push) ; 5
; [else-branch: 859 | p2_3@171@01]
(assert p2_3@171@01)
; [eval] !ret2_0
(push) ; 6
; [then-branch: 860 | False | live]
; [else-branch: 860 | True | live]
(push) ; 7
; [then-branch: 860 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 860 | True]
; [eval] !except2_0
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_3@171@01 (not p2_3@171@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@171@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 861 | p2_3@171@01 | live]
; [else-branch: 861 | !(p2_3@171@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 861 | p2_3@171@01]
(assert p2_3@171@01)
; [exec]
; _method_measures_158_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_1 := null
; [exec]
; _err_1 := null
; [exec]
; b_5_0 := b_0_0
; [exec]
; bypass1_0 := !(p1_3 && (!ret1_0 && !except1_0))
; [eval] !(p1_3 && (!ret1_0 && !except1_0))
; [eval] p1_3 && (!ret1_0 && !except1_0)
(push) ; 5
; [then-branch: 862 | !(p1_3@170@01) | live]
; [else-branch: 862 | p1_3@170@01 | live]
(push) ; 6
; [then-branch: 862 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 6
(push) ; 6
; [else-branch: 862 | p1_3@170@01]
; [eval] !ret1_0
(push) ; 7
; [then-branch: 863 | False | live]
; [else-branch: 863 | True | live]
(push) ; 8
; [then-branch: 863 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 863 | True]
; [eval] !except1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass1_0@232@01 Bool)
(assert (= bypass1_0@232@01 (not p1_3@170@01)))
; [exec]
; bypass2_0 := !(p2_3 && (!ret2_0 && !except2_0))
; [eval] !(p2_3 && (!ret2_0 && !except2_0))
; [eval] p2_3 && (!ret2_0 && !except2_0)
(push) ; 5
; [then-branch: 864 | !(p2_3@171@01) | live]
; [else-branch: 864 | p2_3@171@01 | live]
(push) ; 6
; [then-branch: 864 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 6
(push) ; 6
; [else-branch: 864 | p2_3@171@01]
; [eval] !ret2_0
(push) ; 7
; [then-branch: 865 | False | live]
; [else-branch: 865 | True | live]
(push) ; 8
; [then-branch: 865 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 865 | True]
; [eval] !except2_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass2_0@233@01 Bool)
(assert (= bypass2_0@233@01 (not p2_3@171@01)))
; [exec]
; oldret1_0 := ret1_0
; [exec]
; oldret2_0 := ret2_0
; [exec]
; oldexcept1_0 := except1_0
; [exec]
; oldexcept2_0 := except2_0
; [exec]
; p1_4 := p1_3 && (!ret1_0 && !except1_0 && bool___unbox__(b_5))
; [eval] p1_3 && (!ret1_0 && !except1_0 && bool___unbox__(b_5))
(push) ; 5
; [then-branch: 866 | !(p1_3@170@01) | live]
; [else-branch: 866 | p1_3@170@01 | live]
(push) ; 6
; [then-branch: 866 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 6
(push) ; 6
; [else-branch: 866 | p1_3@170@01]
; [eval] !ret1_0
(push) ; 7
; [then-branch: 867 | False | live]
; [else-branch: 867 | True | live]
(push) ; 8
; [then-branch: 867 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 867 | True]
; [eval] !except1_0
(push) ; 9
; [then-branch: 868 | False | live]
; [else-branch: 868 | True | live]
(push) ; 10
; [then-branch: 868 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 868 | True]
; [eval] bool___unbox__(b_5)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@178@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_3@170@01
  (and
    (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@178@01))))
(declare-const p1_4@234@01 Bool)
(assert (= p1_4@234@01 (and p1_3@170@01 (bool___unbox__ $Snap.unit b_0@178@01))))
; [exec]
; p2_4 := p2_3 && (!ret2_0 && !except2_0 && bool___unbox__(b_5_0))
; [eval] p2_3 && (!ret2_0 && !except2_0 && bool___unbox__(b_5_0))
(push) ; 5
; [then-branch: 869 | !(p2_3@171@01) | live]
; [else-branch: 869 | p2_3@171@01 | live]
(push) ; 6
; [then-branch: 869 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 6
(push) ; 6
; [else-branch: 869 | p2_3@171@01]
; [eval] !ret2_0
(push) ; 7
; [then-branch: 870 | False | live]
; [else-branch: 870 | True | live]
(push) ; 8
; [then-branch: 870 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 870 | True]
; [eval] !except2_0
(push) ; 9
; [then-branch: 871 | False | live]
; [else-branch: 871 | True | live]
(push) ; 10
; [then-branch: 871 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 871 | True]
; [eval] bool___unbox__(b_5_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@179@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@179@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@179@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@179@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_3@171@01
  (and
    (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0_0@179@01))))
(declare-const p2_4@235@01 Bool)
(assert (= p2_4@235@01 (and p2_3@171@01 (bool___unbox__ $Snap.unit b_0_0@179@01))))
; [exec]
; p3_0 := p1_3 && (!ret1_0 && !except1_0 && !bool___unbox__(b_5))
; [eval] p1_3 && (!ret1_0 && !except1_0 && !bool___unbox__(b_5))
(push) ; 5
; [then-branch: 872 | !(p1_3@170@01) | live]
; [else-branch: 872 | p1_3@170@01 | live]
(push) ; 6
; [then-branch: 872 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 6
(push) ; 6
; [else-branch: 872 | p1_3@170@01]
; [eval] !ret1_0
(push) ; 7
; [then-branch: 873 | False | live]
; [else-branch: 873 | True | live]
(push) ; 8
; [then-branch: 873 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 873 | True]
; [eval] !except1_0
(push) ; 9
; [then-branch: 874 | False | live]
; [else-branch: 874 | True | live]
(push) ; 10
; [then-branch: 874 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 874 | True]
; [eval] !bool___unbox__(b_5)
; [eval] bool___unbox__(b_5)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@178@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_0@236@01 Bool)
(assert (= p3_0@236@01 (and p1_3@170@01 (not (bool___unbox__ $Snap.unit b_0@178@01)))))
; [exec]
; p4_0 := p2_3 && (!ret2_0 && !except2_0 && !bool___unbox__(b_5_0))
; [eval] p2_3 && (!ret2_0 && !except2_0 && !bool___unbox__(b_5_0))
(push) ; 5
; [then-branch: 875 | !(p2_3@171@01) | live]
; [else-branch: 875 | p2_3@171@01 | live]
(push) ; 6
; [then-branch: 875 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 6
(push) ; 6
; [else-branch: 875 | p2_3@171@01]
; [eval] !ret2_0
(push) ; 7
; [then-branch: 876 | False | live]
; [else-branch: 876 | True | live]
(push) ; 8
; [then-branch: 876 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 876 | True]
; [eval] !except2_0
(push) ; 9
; [then-branch: 877 | False | live]
; [else-branch: 877 | True | live]
(push) ; 10
; [then-branch: 877 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 877 | True]
; [eval] !bool___unbox__(b_5_0)
; [eval] bool___unbox__(b_5_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@179@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@179@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@179@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@179@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@179@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_0@237@01 Bool)
(assert (= p4_0@237@01 (and p2_3@171@01 (not (bool___unbox__ $Snap.unit b_0_0@179@01)))))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@238@01 $Ref)
(assert (not (= tmp_0@238@01 $Ref.null)))
(assert (not (= tmp_0@238@01 x_1@192@01)))
(assert (not (= tmp_0@238@01 x_1_0@193@01)))
(assert (not (= tmp_0@238@01 error_0@194@01)))
(assert (not (= tmp_0@238@01 _cthread_158@172@01)))
(assert (not (= tmp_0@238@01 b_0@178@01)))
(assert (not (= tmp_0@238@01 _cthread_158_0@173@01)))
(assert (not (= tmp_0@238@01 error_0_0@195@01)))
(assert (not (= tmp_0@238@01 MyException_res_0_0@201@01)))
(assert (not (= tmp_0@238@01 b_0_0@179@01)))
(assert (not (= tmp_0@238@01 MyException_res_0@200@01)))
(assert (not (= tmp_0@238@01 tmp_0@230@01)))
; [eval] p1_4 && (!ret1_0 && !except1_0)
(push) ; 5
; [then-branch: 878 | !(p1_4@234@01) | live]
; [else-branch: 878 | p1_4@234@01 | live]
(push) ; 6
; [then-branch: 878 | !(p1_4@234@01)]
(assert (not p1_4@234@01))
(pop) ; 6
(push) ; 6
; [else-branch: 878 | p1_4@234@01]
(assert p1_4@234@01)
; [eval] !ret1_0
(push) ; 7
; [then-branch: 879 | False | live]
; [else-branch: 879 | True | live]
(push) ; 8
; [then-branch: 879 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 879 | True]
; [eval] !except1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_4@234@01 (not p1_4@234@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_4@234@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_4@234@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 880 | p1_4@234@01 | live]
; [else-branch: 880 | !(p1_4@234@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 880 | p1_4@234@01]
(assert p1_4@234@01)
; [exec]
; MyException_res_0 := tmp_0
; [eval] p2_4 && (!ret2_0 && !except2_0)
(push) ; 6
; [then-branch: 881 | !(p2_4@235@01) | live]
; [else-branch: 881 | p2_4@235@01 | live]
(push) ; 7
; [then-branch: 881 | !(p2_4@235@01)]
(assert (not p2_4@235@01))
(pop) ; 7
(push) ; 7
; [else-branch: 881 | p2_4@235@01]
(assert p2_4@235@01)
; [eval] !ret2_0
(push) ; 8
; [then-branch: 882 | False | live]
; [else-branch: 882 | True | live]
(push) ; 9
; [then-branch: 882 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 882 | True]
; [eval] !except2_0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_4@235@01 (not p2_4@235@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_4@235@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_4@235@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 883 | p2_4@235@01 | live]
; [else-branch: 883 | !(p2_4@235@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 883 | p2_4@235@01]
(assert p2_4@235@01)
; [exec]
; MyException_res_0_0 := tmp_0
; [eval] p1_4 && (!ret1_0 && !except1_0)
(push) ; 7
; [then-branch: 884 | !(p1_4@234@01) | live]
; [else-branch: 884 | p1_4@234@01 | live]
(push) ; 8
; [then-branch: 884 | !(p1_4@234@01)]
(assert (not p1_4@234@01))
(pop) ; 8
(push) ; 8
; [else-branch: 884 | p1_4@234@01]
; [eval] !ret1_0
(push) ; 9
; [then-branch: 885 | False | live]
; [else-branch: 885 | True | live]
(push) ; 10
; [then-branch: 885 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 885 | True]
; [eval] !except1_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_4@234@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 886 | p1_4@234@01 | live]
; [else-branch: 886 | !(p1_4@234@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 886 | p1_4@234@01]
; [exec]
; inhale typeof(MyException_res_0) == MyException()
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 $Snap.unit))
; [eval] typeof(MyException_res_0) == MyException()
; [eval] typeof(MyException_res_0)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_0@238@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_4 && (!ret2_0 && !except2_0)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 887 | !(p2_4@235@01) | live]
; [else-branch: 887 | p2_4@235@01 | live]
(push) ; 9
; [then-branch: 887 | !(p2_4@235@01)]
(assert (not p2_4@235@01))
(pop) ; 9
(push) ; 9
; [else-branch: 887 | p2_4@235@01]
; [eval] !ret2_0
(push) ; 10
; [then-branch: 888 | False | live]
; [else-branch: 888 | True | live]
(push) ; 11
; [then-branch: 888 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 888 | True]
; [eval] !except2_0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_4@235@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 889 | p2_4@235@01 | live]
; [else-branch: 889 | !(p2_4@235@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 889 | p2_4@235@01]
; [exec]
; inhale typeof(MyException_res_0_0) == MyException()
(declare-const $t@240@01 $Snap)
(assert (= $t@240@01 $Snap.unit))
; [eval] typeof(MyException_res_0_0) == MyException()
; [eval] typeof(MyException_res_0_0)
; [eval] MyException()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_4 && (!ret1_0 && !except1_0)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 890 | !(p1_4@234@01) | live]
; [else-branch: 890 | p1_4@234@01 | live]
(push) ; 10
; [then-branch: 890 | !(p1_4@234@01)]
(assert (not p1_4@234@01))
(pop) ; 10
(push) ; 10
; [else-branch: 890 | p1_4@234@01]
; [eval] !ret1_0
(push) ; 11
; [then-branch: 891 | False | live]
; [else-branch: 891 | True | live]
(push) ; 12
; [then-branch: 891 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 891 | True]
; [eval] !except1_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_4@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 892 | p1_4@234@01 | live]
; [else-branch: 892 | !(p1_4@234@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 892 | p1_4@234@01]
; [exec]
; _err := MyException_res_0
; [exec]
; except1_0 := true
; [eval] p2_4 && (!ret2_0 && !except2_0)
(push) ; 10
; [then-branch: 893 | !(p2_4@235@01) | live]
; [else-branch: 893 | p2_4@235@01 | live]
(push) ; 11
; [then-branch: 893 | !(p2_4@235@01)]
(assert (not p2_4@235@01))
(pop) ; 11
(push) ; 11
; [else-branch: 893 | p2_4@235@01]
; [eval] !ret2_0
(push) ; 12
; [then-branch: 894 | False | live]
; [else-branch: 894 | True | live]
(push) ; 13
; [then-branch: 894 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 894 | True]
; [eval] !except2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_4@235@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 895 | p2_4@235@01 | live]
; [else-branch: 895 | !(p2_4@235@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 895 | p2_4@235@01]
; [exec]
; _err_1 := MyException_res_0_0
; [exec]
; except2_0 := true
; [exec]
; thisexcept1_0 := except1_0 && !bypass1_0
; [eval] except1_0 && !bypass1_0
(push) ; 11
; [then-branch: 896 | False | live]
; [else-branch: 896 | True | live]
(push) ; 12
; [then-branch: 896 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 896 | True]
; [eval] !bypass1_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_0@241@01 Bool)
(assert (= thisexcept1_0@241@01 (not bypass1_0@232@01)))
; [exec]
; thisexcept2_0 := except2_0 && !bypass2_0
; [eval] except2_0 && !bypass2_0
(push) ; 11
; [then-branch: 897 | False | live]
; [else-branch: 897 | True | live]
(push) ; 12
; [then-branch: 897 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 897 | True]
; [eval] !bypass2_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_0@242@01 Bool)
(assert (= thisexcept2_0@242@01 (not bypass2_0@233@01)))
; [exec]
; p1_5 := p1_3 && (thisexcept1_0 && issubtype(typeof(_err), MyException()))
; [eval] p1_3 && (thisexcept1_0 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 898 | !(p1_3@170@01) | live]
; [else-branch: 898 | p1_3@170@01 | live]
(push) ; 12
; [then-branch: 898 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 12
(push) ; 12
; [else-branch: 898 | p1_3@170@01]
(push) ; 13
; [then-branch: 899 | !(thisexcept1_0@241@01) | live]
; [else-branch: 899 | thisexcept1_0@241@01 | live]
(push) ; 14
; [then-branch: 899 | !(thisexcept1_0@241@01)]
(assert (not thisexcept1_0@241@01))
(pop) ; 14
(push) ; 14
; [else-branch: 899 | thisexcept1_0@241@01]
(assert thisexcept1_0@241@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_0@241@01 (not thisexcept1_0@241@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p1_3@170@01 (or thisexcept1_0@241@01 (not thisexcept1_0@241@01))))
(declare-const p1_5@243@01 Bool)
(assert (=
  p1_5@243@01
  (and
    p1_3@170@01
    (and
      thisexcept1_0@241@01
      (issubtype<Bool> (typeof<PyType> tmp_0@238@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_5 := p2_3 && (thisexcept2_0 && issubtype(typeof(_err_1), MyException()))
; [eval] p2_3 && (thisexcept2_0 && issubtype(typeof(_err_1), MyException()))
(push) ; 11
; [then-branch: 900 | !(p2_3@171@01) | live]
; [else-branch: 900 | p2_3@171@01 | live]
(push) ; 12
; [then-branch: 900 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 12
(push) ; 12
; [else-branch: 900 | p2_3@171@01]
(push) ; 13
; [then-branch: 901 | !(thisexcept2_0@242@01) | live]
; [else-branch: 901 | thisexcept2_0@242@01 | live]
(push) ; 14
; [then-branch: 901 | !(thisexcept2_0@242@01)]
(assert (not thisexcept2_0@242@01))
(pop) ; 14
(push) ; 14
; [else-branch: 901 | thisexcept2_0@242@01]
(assert thisexcept2_0@242@01)
; [eval] issubtype(typeof(_err_1), MyException())
; [eval] typeof(_err_1)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_0@242@01 (not thisexcept2_0@242@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p2_3@171@01 (or thisexcept2_0@242@01 (not thisexcept2_0@242@01))))
(declare-const p2_5@244@01 Bool)
(assert (=
  p2_5@244@01
  (and
    p2_3@171@01
    (and
      thisexcept2_0@242@01
      (issubtype<Bool> (typeof<PyType> tmp_0@238@01) (as MyException<PyType>  PyType))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_5@243@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not p1_5@243@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 902 | p1_5@243@01 | live]
; [else-branch: 902 | !(p1_5@243@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 902 | p1_5@243@01]
(assert p1_5@243@01)
; [exec]
; except1_0 := false
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_5@244@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not p2_5@244@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 903 | p2_5@244@01 | live]
; [else-branch: 903 | !(p2_5@244@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 903 | p2_5@244@01]
(assert p2_5@244@01)
; [exec]
; except2_0 := false
; [eval] p1_5 && (!ret1_0 && !except1_0)
(push) ; 13
; [then-branch: 904 | !(p1_5@243@01) | live]
; [else-branch: 904 | p1_5@243@01 | live]
(push) ; 14
; [then-branch: 904 | !(p1_5@243@01)]
(assert (not p1_5@243@01))
(pop) ; 14
(push) ; 14
; [else-branch: 904 | p1_5@243@01]
; [eval] !ret1_0
(push) ; 15
; [then-branch: 905 | False | live]
; [else-branch: 905 | True | live]
(push) ; 16
; [then-branch: 905 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 905 | True]
; [eval] !except1_0
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p1_5@243@01 (not p1_5@243@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_5@243@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 906 | p1_5@243@01 | live]
; [else-branch: 906 | !(p1_5@243@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 906 | p1_5@243@01]
; [exec]
; x_1 := __prim__int___box__(-2)
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(declare-const x_1@245@01 $Ref)
(assert (= x_1@245@01 (__prim__int___box__ $Snap.unit (- 0 2))))
; [exec]
; inhale _isDefined(3235704)
(declare-const $t@246@01 $Snap)
(assert (= $t@246@01 $Snap.unit))
; [eval] _isDefined(3235704)
(push) ; 14
(assert (_isDefined%precondition $Snap.unit 3235704))
(pop) ; 14
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235704))
(assert (_isDefined $Snap.unit 3235704))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_5 && (!ret2_0 && !except2_0)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 907 | !(p2_5@244@01) | live]
; [else-branch: 907 | p2_5@244@01 | live]
(push) ; 15
; [then-branch: 907 | !(p2_5@244@01)]
(assert (not p2_5@244@01))
(pop) ; 15
(push) ; 15
; [else-branch: 907 | p2_5@244@01]
; [eval] !ret2_0
(push) ; 16
; [then-branch: 908 | False | live]
; [else-branch: 908 | True | live]
(push) ; 17
; [then-branch: 908 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 908 | True]
; [eval] !except2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p2_5@244@01 (not p2_5@244@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_5@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 909 | p2_5@244@01 | live]
; [else-branch: 909 | !(p2_5@244@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 909 | p2_5@244@01]
; [exec]
; x_1_0 := __prim__int___box__(-2)
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const x_1_0@247@01 $Ref)
(assert (= x_1_0@247@01 (__prim__int___box__ $Snap.unit (- 0 2))))
; [exec]
; inhale true
(declare-const $t@248@01 $Snap)
(assert (= $t@248@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_3 && (!ret1_0 && !except1_0)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 910 | !(p1_3@170@01) | live]
; [else-branch: 910 | p1_3@170@01 | live]
(push) ; 16
; [then-branch: 910 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 16
(push) ; 16
; [else-branch: 910 | p1_3@170@01]
; [eval] !ret1_0
(push) ; 17
; [then-branch: 911 | False | live]
; [else-branch: 911 | True | live]
(push) ; 18
; [then-branch: 911 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 911 | True]
; [eval] !except1_0
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 912 | p1_3@170@01 | live]
; [else-branch: 912 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 912 | p1_3@170@01]
; [exec]
; _err := null
; [eval] p2_3 && (!ret2_0 && !except2_0)
(push) ; 16
; [then-branch: 913 | !(p2_3@171@01) | live]
; [else-branch: 913 | p2_3@171@01 | live]
(push) ; 17
; [then-branch: 913 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 17
(push) ; 17
; [else-branch: 913 | p2_3@171@01]
; [eval] !ret2_0
(push) ; 18
; [then-branch: 914 | False | live]
; [else-branch: 914 | True | live]
(push) ; 19
; [then-branch: 914 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 914 | True]
; [eval] !except2_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 915 | p2_3@171@01 | live]
; [else-branch: 915 | !(p2_3@171@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 915 | p2_3@171@01]
; [exec]
; _err_1 := null
; [exec]
; p1_6 := p1_3 && !thisexcept1_0
; [eval] p1_3 && !thisexcept1_0
(push) ; 17
; [then-branch: 916 | !(p1_3@170@01) | live]
; [else-branch: 916 | p1_3@170@01 | live]
(push) ; 18
; [then-branch: 916 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 18
(push) ; 18
; [else-branch: 916 | p1_3@170@01]
; [eval] !thisexcept1_0
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p1_6@249@01 Bool)
(assert (= p1_6@249@01 (and p1_3@170@01 (not thisexcept1_0@241@01))))
; [exec]
; p2_6 := p2_3 && !thisexcept2_0
; [eval] p2_3 && !thisexcept2_0
(push) ; 17
; [then-branch: 917 | !(p2_3@171@01) | live]
; [else-branch: 917 | p2_3@171@01 | live]
(push) ; 18
; [then-branch: 917 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 18
(push) ; 18
; [else-branch: 917 | p2_3@171@01]
; [eval] !thisexcept2_0
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p2_6@250@01 Bool)
(assert (= p2_6@250@01 (and p2_3@171@01 (not thisexcept2_0@242@01))))
; [eval] p1_6 && (!ret1_0 && !except1_0)
(push) ; 17
; [then-branch: 918 | !(p1_6@249@01) | live]
; [else-branch: 918 | p1_6@249@01 | live]
(push) ; 18
; [then-branch: 918 | !(p1_6@249@01)]
(assert (not p1_6@249@01))
(pop) ; 18
(push) ; 18
; [else-branch: 918 | p1_6@249@01]
(assert p1_6@249@01)
; [eval] !ret1_0
(push) ; 19
; [then-branch: 919 | False | live]
; [else-branch: 919 | True | live]
(push) ; 20
; [then-branch: 919 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 919 | True]
; [eval] !except1_0
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p1_6@249@01 (not p1_6@249@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_6@249@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 920 | p1_6@249@01 | dead]
; [else-branch: 920 | !(p1_6@249@01) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 920 | !(p1_6@249@01)]
(assert (not p1_6@249@01))
(pop) ; 17
; [eval] !(p1_6 && (!ret1_0 && !except1_0))
; [eval] p1_6 && (!ret1_0 && !except1_0)
(push) ; 17
; [then-branch: 921 | !(p1_6@249@01) | live]
; [else-branch: 921 | p1_6@249@01 | live]
(push) ; 18
; [then-branch: 921 | !(p1_6@249@01)]
(assert (not p1_6@249@01))
(pop) ; 18
(push) ; 18
; [else-branch: 921 | p1_6@249@01]
(assert p1_6@249@01)
; [eval] !ret1_0
(push) ; 19
; [then-branch: 922 | False | live]
; [else-branch: 922 | True | live]
(push) ; 20
; [then-branch: 922 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 922 | True]
; [eval] !except1_0
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p1_6@249@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_6@249@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 923 | !(p1_6@249@01) | live]
; [else-branch: 923 | p1_6@249@01 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 923 | !(p1_6@249@01)]
(assert (not p1_6@249@01))
; [eval] p2_6 && (!ret2_0 && !except2_0)
(push) ; 18
; [then-branch: 924 | !(p2_6@250@01) | live]
; [else-branch: 924 | p2_6@250@01 | live]
(push) ; 19
; [then-branch: 924 | !(p2_6@250@01)]
(assert (not p2_6@250@01))
(pop) ; 19
(push) ; 19
; [else-branch: 924 | p2_6@250@01]
(assert p2_6@250@01)
; [eval] !ret2_0
(push) ; 20
; [then-branch: 925 | False | live]
; [else-branch: 925 | True | live]
(push) ; 21
; [then-branch: 925 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 925 | True]
; [eval] !except2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p2_6@250@01 (not p2_6@250@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_6@250@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 926 | p2_6@250@01 | dead]
; [else-branch: 926 | !(p2_6@250@01) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 926 | !(p2_6@250@01)]
(assert (not p2_6@250@01))
(pop) ; 18
; [eval] !(p2_6 && (!ret2_0 && !except2_0))
; [eval] p2_6 && (!ret2_0 && !except2_0)
(push) ; 18
; [then-branch: 927 | !(p2_6@250@01) | live]
; [else-branch: 927 | p2_6@250@01 | live]
(push) ; 19
; [then-branch: 927 | !(p2_6@250@01)]
(assert (not p2_6@250@01))
(pop) ; 19
(push) ; 19
; [else-branch: 927 | p2_6@250@01]
(assert p2_6@250@01)
; [eval] !ret2_0
(push) ; 20
; [then-branch: 928 | False | live]
; [else-branch: 928 | True | live]
(push) ; 21
; [then-branch: 928 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 928 | True]
; [eval] !except2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p2_6@250@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_6@250@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 929 | !(p2_6@250@01) | live]
; [else-branch: 929 | p2_6@250@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 929 | !(p2_6@250@01)]
(assert (not p2_6@250@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 930 | p1_3@170@01 | live]
; [else-branch: 930 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 930 | p1_3@170@01]
; [exec]
; tmp_ret1_0 := ret1_0
; [exec]
; ret1_0 := oldret1_0
; [exec]
; tmp_except1_0 := except1_0
; [exec]
; except1_0 := oldexcept1_0
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 931 | p2_3@171@01 | live]
; [else-branch: 931 | !(p2_3@171@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 931 | p2_3@171@01]
; [exec]
; tmp_ret2_0 := ret2_0
; [exec]
; ret2_0 := oldret2_0
; [exec]
; tmp_except2_0 := except2_0
; [exec]
; except2_0 := oldexcept2_0
; [eval] p1_3 && (!ret1_0 && !except1_0)
(push) ; 21
; [then-branch: 932 | !(p1_3@170@01) | live]
; [else-branch: 932 | p1_3@170@01 | live]
(push) ; 22
; [then-branch: 932 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 22
(push) ; 22
; [else-branch: 932 | p1_3@170@01]
; [eval] !ret1_0
(push) ; 23
; [then-branch: 933 | False | live]
; [else-branch: 933 | True | live]
(push) ; 24
; [then-branch: 933 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 933 | True]
; [eval] !except1_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 934 | p1_3@170@01 | live]
; [else-branch: 934 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 934 | p1_3@170@01]
; [exec]
; x_1 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_1, 3235704))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_1, 3235704))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_1, 3235704)))
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_1@245@01 3235704))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_1@245@01 3235704))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@245@01 3235704)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@245@01 3235704)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_1@245@01 3235704)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@245@01 3235704)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_1@245@01 3235704))))
(push) ; 22
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@245@01 3235704))))
(pop) ; 22
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@245@01 3235704))))
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@245@01 3235704)))))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@245@01 3235704)))))
(declare-const x_1@251@01 $Ref)
(assert (=
  x_1@251@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@245@01 3235704))))))
; [exec]
; inhale _isDefined(3235704)
(declare-const $t@252@01 $Snap)
(assert (= $t@252@01 $Snap.unit))
; [eval] _isDefined(3235704)
(push) ; 22
(pop) ; 22
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_3 && (!ret2_0 && !except2_0)
(set-option :timeout 0)
(push) ; 22
; [then-branch: 935 | !(p2_3@171@01) | live]
; [else-branch: 935 | p2_3@171@01 | live]
(push) ; 23
; [then-branch: 935 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 23
(push) ; 23
; [else-branch: 935 | p2_3@171@01]
; [eval] !ret2_0
(push) ; 24
; [then-branch: 936 | False | live]
; [else-branch: 936 | True | live]
(push) ; 25
; [then-branch: 936 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 936 | True]
; [eval] !except2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 937 | p2_3@171@01 | live]
; [else-branch: 937 | !(p2_3@171@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 937 | p2_3@171@01]
; [exec]
; x_1_0 := __prim__int___box__(int___mul__(2, int___unbox__(x_1_0)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(x_1_0)))
; [eval] int___mul__(2, int___unbox__(x_1_0))
; [eval] int___unbox__(x_1_0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> x_1_0@247@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1_0@247@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_1_0@247@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_1_0@247@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_1_0@247@01)))
(push) ; 23
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_1_0@247@01)))
(pop) ; 23
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_1_0@247@01)))
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_1_0@247@01))))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_1_0@247@01))))
(declare-const x_1_0@253@01 $Ref)
(assert (=
  x_1_0@253@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_1_0@247@01)))))
; [exec]
; inhale true
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 938 | p1_3@170@01 | live]
; [else-branch: 938 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 938 | p1_3@170@01]
; [exec]
; ret1_0 := ret1_0 || tmp_ret1_0
; [eval] ret1_0 || tmp_ret1_0
(push) ; 24
; [then-branch: 939 | False | live]
; [else-branch: 939 | True | live]
(push) ; 25
; [then-branch: 939 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 939 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [exec]
; except1_0 := except1_0 || tmp_except1_0
; [eval] except1_0 || tmp_except1_0
(push) ; 24
; [then-branch: 940 | False | live]
; [else-branch: 940 | True | live]
(push) ; 25
; [then-branch: 940 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 940 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 941 | p2_3@171@01 | live]
; [else-branch: 941 | !(p2_3@171@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 941 | p2_3@171@01]
; [exec]
; ret2_0 := ret2_0 || tmp_ret2_0
; [eval] ret2_0 || tmp_ret2_0
(push) ; 25
; [then-branch: 942 | False | live]
; [else-branch: 942 | True | live]
(push) ; 26
; [then-branch: 942 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 942 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [exec]
; except2_0 := except2_0 || tmp_except2_0
; [eval] except2_0 || tmp_except2_0
(push) ; 25
; [then-branch: 943 | False | live]
; [else-branch: 943 | True | live]
(push) ; 26
; [then-branch: 943 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 943 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [eval] p1_3 && (!ret1_0 && !except1_0)
(push) ; 25
; [then-branch: 944 | !(p1_3@170@01) | live]
; [else-branch: 944 | p1_3@170@01 | live]
(push) ; 26
; [then-branch: 944 | !(p1_3@170@01)]
(assert (not p1_3@170@01))
(pop) ; 26
(push) ; 26
; [else-branch: 944 | p1_3@170@01]
; [eval] !ret1_0
(push) ; 27
; [then-branch: 945 | False | live]
; [else-branch: 945 | True | live]
(push) ; 28
; [then-branch: 945 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 945 | True]
; [eval] !except1_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 946 | p1_3@170@01 | live]
; [else-branch: 946 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 946 | p1_3@170@01]
; [exec]
; _res := _checkDefined(x_1, 3235704)
; [eval] _checkDefined(x_1, 3235704)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_1@251@01 3235704))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_1@251@01 3235704))
(declare-const _res@255@01 $Ref)
(assert (= _res@255@01 (_checkDefined $Snap.unit x_1@251@01 3235704)))
; [exec]
; ret1_0 := true
; [eval] p2_3 && (!ret2_0 && !except2_0)
(push) ; 26
; [then-branch: 947 | !(p2_3@171@01) | live]
; [else-branch: 947 | p2_3@171@01 | live]
(push) ; 27
; [then-branch: 947 | !(p2_3@171@01)]
(assert (not p2_3@171@01))
(pop) ; 27
(push) ; 27
; [else-branch: 947 | p2_3@171@01]
; [eval] !ret2_0
(push) ; 28
; [then-branch: 948 | False | live]
; [else-branch: 948 | True | live]
(push) ; 29
; [then-branch: 948 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 948 | True]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 949 | p2_3@171@01 | live]
; [else-branch: 949 | !(p2_3@171@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 949 | p2_3@171@01]
; [exec]
; _res_1 := x_1_0
; [exec]
; ret2_0 := true
; [exec]
; assert (p1_3 ==> !except1_0) && (p2_3 ==> !except2_0)
; [eval] p1_3 ==> !except1_0
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 950 | p1_3@170@01 | live]
; [else-branch: 950 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 950 | p1_3@170@01]
; [eval] !except1_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2_3 ==> !except2_0
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 951 | p2_3@171@01 | live]
; [else-branch: 951 | !(p2_3@171@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 951 | p2_3@171@01]
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1_3 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 952 | p1_3@170@01 | live]
; [else-branch: 952 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 952 | p1_3@170@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2_3 ==> true
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 953 | p2_3@171@01 | live]
; [else-branch: 953 | !(p2_3@171@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 953 | p2_3@171@01]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1_3 ==> issubtype(typeof(_res), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 954 | p1_3@170@01 | live]
; [else-branch: 954 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 954 | p1_3@170@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p1_3@170@01
  (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_3@170@01
  (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))))
; [eval] p2_3 ==> issubtype(typeof(_res_1), int())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_3@171@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 955 | p2_3@171@01 | live]
; [else-branch: 955 | !(p2_3@171@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 955 | p2_3@171@01]
; [eval] issubtype(typeof(_res_1), int())
; [eval] typeof(_res_1)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  p2_3@171@01
  (issubtype<Bool> (typeof<PyType> x_1_0@253@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_3@171@01
  (issubtype<Bool> (typeof<PyType> x_1_0@253@01) (as int<PyType>  PyType))))
; [eval] p1_3 ==> bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 956 | p1_3@170@01 | live]
; [else-branch: 956 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 956 | p1_3@170@01]
; [eval] bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_0)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@178@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_0@178@01))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_0@178@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 957 | bool___unbox__(_, b_0@178@01) | live]
; [else-branch: 957 | !(bool___unbox__(_, b_0@178@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 957 | bool___unbox__(_, b_0@178@01)]
(assert (bool___unbox__ $Snap.unit b_0@178@01))
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 31
(pop) ; 31
; Joined path conditions
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_0@178@01)
  (and
    (bool___unbox__ $Snap.unit b_0@178@01)
    (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_0@178@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  p1_3@170@01
  (and
    (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@178@01)
    (=>
      (bool___unbox__ $Snap.unit b_0@178@01)
      (and
        (bool___unbox__ $Snap.unit b_0@178@01)
        (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b_0@178@01))))
(push) ; 27
(assert (not (=>
  (and p1_3@170@01 (bool___unbox__ $Snap.unit b_0@178@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_3 ==> bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(-2))
(set-option :timeout 0)
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 958 | p1_3@170@01 | live]
; [else-branch: 958 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 958 | p1_3@170@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_0)
(set-option :timeout 0)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@178@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_0@178@01))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_0@178@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 959 | bool___unbox__(_, b_0@178@01) | live]
; [else-branch: 959 | !(bool___unbox__(_, b_0@178@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 959 | bool___unbox__(_, b_0@178@01)]
(assert (bool___unbox__ $Snap.unit b_0@178@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(set-option :timeout 0)
(push) ; 31
(pop) ; 31
; Joined path conditions
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_0@178@01)
  (and
    (bool___unbox__ $Snap.unit b_0@178@01)
    (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_0@178@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  (and p1_3@170@01 (bool___unbox__ $Snap.unit b_0@178@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_3 ==> bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(-2))
(set-option :timeout 0)
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 960 | p1_3@170@01 | live]
; [else-branch: 960 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 960 | p1_3@170@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_0)
(set-option :timeout 0)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@178@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_0@178@01))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_0@178@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 961 | bool___unbox__(_, b_0@178@01) | live]
; [else-branch: 961 | !(bool___unbox__(_, b_0@178@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 961 | bool___unbox__(_, b_0@178@01)]
(assert (bool___unbox__ $Snap.unit b_0@178@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(set-option :timeout 0)
(push) ; 31
(pop) ; 31
; Joined path conditions
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_0@178@01)
  (and
    (bool___unbox__ $Snap.unit b_0@178@01)
    (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_0@178@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  (and p1_3@170@01 (bool___unbox__ $Snap.unit b_0@178@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_3 ==> bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(-2))
(set-option :timeout 0)
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_3@170@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 962 | p1_3@170@01 | live]
; [else-branch: 962 | !(p1_3@170@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 962 | p1_3@170@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] bool___unbox__(b_0) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_0)
(set-option :timeout 0)
(push) ; 29
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@178@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@178@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@178@01)))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_0@178@01))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_0@178@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 963 | bool___unbox__(_, b_0@178@01) | live]
; [else-branch: 963 | !(bool___unbox__(_, b_0@178@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 963 | bool___unbox__(_, b_0@178@01)]
(assert (bool___unbox__ $Snap.unit b_0@178@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(set-option :timeout 0)
(push) ; 31
(pop) ; 31
; Joined path conditions
(push) ; 31
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 32
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 31
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_0@178@01)
  (and
    (bool___unbox__ $Snap.unit b_0@178@01)
    (issubtype<Bool> (typeof<PyType> _res@255@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_0@178@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=>
  (and p1_3@170@01 (bool___unbox__ $Snap.unit b_0@178@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@255@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- m3 ----------
(declare-const p1_7@256@01 Bool)
(declare-const p2_7@257@01 Bool)
(declare-const _cthread_159@258@01 $Ref)
(declare-const _cthread_159_0@259@01 $Ref)
(declare-const _caller_measures_159@260@01 Seq<Measure$>)
(declare-const _caller_measures_159_0@261@01 Seq<Measure$>)
(declare-const _residue_159@262@01 $Perm)
(declare-const _residue_159_0@263@01 $Perm)
(declare-const b_1@264@01 $Ref)
(declare-const b_1_0@265@01 $Ref)
(declare-const _current_wait_level_159@266@01 $Perm)
(declare-const _current_wait_level_159_0@267@01 $Perm)
(declare-const _res@268@01 $Ref)
(declare-const _res_2@269@01 $Ref)
(declare-const p1_7@270@01 Bool)
(declare-const p2_7@271@01 Bool)
(declare-const _cthread_159@272@01 $Ref)
(declare-const _cthread_159_0@273@01 $Ref)
(declare-const _caller_measures_159@274@01 Seq<Measure$>)
(declare-const _caller_measures_159_0@275@01 Seq<Measure$>)
(declare-const _residue_159@276@01 $Perm)
(declare-const _residue_159_0@277@01 $Perm)
(declare-const b_1@278@01 $Ref)
(declare-const b_1_0@279@01 $Ref)
(declare-const _current_wait_level_159@280@01 $Perm)
(declare-const _current_wait_level_159_0@281@01 $Perm)
(declare-const _res@282@01 $Ref)
(declare-const _res_2@283@01 $Ref)
(push) ; 1
(declare-const $t@284@01 $Snap)
(assert (= $t@284@01 ($Snap.combine ($Snap.first $t@284@01) ($Snap.second $t@284@01))))
(assert (= ($Snap.first $t@284@01) $Snap.unit))
; [eval] p1_7 ==> _cthread_159 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_7@270@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 964 | p1_7@270@01 | live]
; [else-branch: 964 | !(p1_7@270@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 964 | p1_7@270@01]
(assert p1_7@270@01)
; [eval] _cthread_159 != null
(pop) ; 3
(push) ; 3
; [else-branch: 964 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_7@270@01) p1_7@270@01))
(assert (=> p1_7@270@01 (not (= _cthread_159@272@01 $Ref.null))))
(assert (=
  ($Snap.second $t@284@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@284@01))
    ($Snap.second ($Snap.second $t@284@01)))))
(assert (= ($Snap.first ($Snap.second $t@284@01)) $Snap.unit))
; [eval] p2_7 ==> _cthread_159_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 965 | p2_7@271@01 | live]
; [else-branch: 965 | !(p2_7@271@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 965 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] _cthread_159_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 965 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_7@271@01) p2_7@271@01))
(assert (=> p2_7@271@01 (not (= _cthread_159_0@273@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@284@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@284@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@284@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@284@01))) $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_cthread_159), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_7@270@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 966 | p1_7@270@01 | live]
; [else-branch: 966 | !(p1_7@270@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 966 | p1_7@270@01]
(assert p1_7@270@01)
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 966 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _cthread_159@272@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@284@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@284@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@284@01))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_cthread_159_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 967 | p2_7@271@01 | live]
; [else-branch: 967 | !(p2_7@271@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 967 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] issubtype(typeof(_cthread_159_0), Thread_0())
; [eval] typeof(_cthread_159_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 967 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> _cthread_159_0@273@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01)))))
  $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(b_1), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_7@270@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 968 | p1_7@270@01 | live]
; [else-branch: 968 | !(p1_7@270@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 968 | p1_7@270@01]
(assert p1_7@270@01)
; [eval] issubtype(typeof(b_1), bool())
; [eval] typeof(b_1)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 968 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01))))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(b_1_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 969 | p2_7@271@01 | live]
; [else-branch: 969 | !(p2_7@271@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 969 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] issubtype(typeof(b_1_0), bool())
; [eval] typeof(b_1_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 969 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01)))))))
  $Snap.unit))
; [eval] p1_7 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_7@270@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 970 | p1_7@270@01 | live]
; [else-branch: 970 | !(p1_7@270@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 970 | p1_7@270@01]
(assert p1_7@270@01)
(pop) ; 3
(push) ; 3
; [else-branch: 970 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@284@01)))))))
  $Snap.unit))
; [eval] p2_7 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 971 | p2_7@271@01 | live]
; [else-branch: 971 | !(p2_7@271@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 971 | p2_7@271@01]
(assert p2_7@271@01)
(pop) ; 3
(push) ; 3
; [else-branch: 971 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@285@01 $Snap)
(assert (= $t@285@01 ($Snap.combine ($Snap.first $t@285@01) ($Snap.second $t@285@01))))
(assert (= ($Snap.first $t@285@01) $Snap.unit))
; [eval] p1_7 ==> (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_159) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_7@270@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 972 | p1_7@270@01 | live]
; [else-branch: 972 | !(p1_7@270@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 972 | p1_7@270@01]
(assert p1_7@270@01)
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_159) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159)
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_159)
(push) ; 5
; [then-branch: 973 | False | live]
; [else-branch: 973 | True | live]
(push) ; 6
; [then-branch: 973 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 973 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_159)
(push) ; 7
; [then-branch: 974 | False | live]
; [else-branch: 974 | True | live]
(push) ; 8
; [then-branch: 974 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 974 | True]
; [eval] _residue_159 <= _current_wait_level_159
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 972 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_7@270@01 (<= _residue_159@276@01 _current_wait_level_159@280@01)))
(assert (=
  ($Snap.second $t@285@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@285@01))
    ($Snap.second ($Snap.second $t@285@01)))))
(assert (= ($Snap.first ($Snap.second $t@285@01)) $Snap.unit))
; [eval] p2_7 ==> (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) <= _current_wait_level_159_0) && ((forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) <= _current_wait_level_159_0) && _residue_159_0 <= _current_wait_level_159_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 975 | p2_7@271@01 | live]
; [else-branch: 975 | !(p2_7@271@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 975 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) <= _current_wait_level_159_0) && ((forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) <= _current_wait_level_159_0) && _residue_159_0 <= _current_wait_level_159_0)
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) <= _current_wait_level_159_0)
(push) ; 5
; [then-branch: 976 | False | live]
; [else-branch: 976 | True | live]
(push) ; 6
; [then-branch: 976 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 976 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) <= _current_wait_level_159_0)
(push) ; 7
; [then-branch: 977 | False | live]
; [else-branch: 977 | True | live]
(push) ; 8
; [then-branch: 977 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 977 | True]
; [eval] _residue_159_0 <= _current_wait_level_159_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 975 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_7@271@01 (<= _residue_159_0@277@01 _current_wait_level_159_0@281@01)))
(assert (=
  ($Snap.second ($Snap.second $t@285@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@285@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@285@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@285@01))) $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_res), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_7@270@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 978 | p1_7@270@01 | live]
; [else-branch: 978 | !(p1_7@270@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 978 | p1_7@270@01]
(assert p1_7@270@01)
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 978 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@285@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@285@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@285@01))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_res_2), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 979 | p2_7@271@01 | live]
; [else-branch: 979 | !(p2_7@271@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 979 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] issubtype(typeof(_res_2), int())
; [eval] typeof(_res_2)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 979 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))
  $Snap.unit))
; [eval] p1_7 ==> bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_7@270@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 980 | p1_7@270@01 | live]
; [else-branch: 980 | !(p1_7@270@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 980 | p1_7@270@01]
(assert p1_7@270@01)
; [eval] bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 981 | bool___unbox__(_, b_1@278@01) | live]
; [else-branch: 981 | !(bool___unbox__(_, b_1@278@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 981 | bool___unbox__(_, b_1@278@01)]
(assert (bool___unbox__ $Snap.unit b_1@278@01))
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@282@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@282@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 6
(push) ; 6
; [else-branch: 981 | !(bool___unbox__(_, b_1@278@01))]
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_1@278@01)
  (and
    (bool___unbox__ $Snap.unit b_1@278@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@282@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
; Joined path conditions
(assert (or
  (not (bool___unbox__ $Snap.unit b_1@278@01))
  (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 980 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    p1_7@270@01
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (=>
      (bool___unbox__ $Snap.unit b_1@278@01)
      (and
        (bool___unbox__ $Snap.unit b_1@278@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@282@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (or
      (not (bool___unbox__ $Snap.unit b_1@278@01))
      (bool___unbox__ $Snap.unit b_1@278@01)))))
; Joined path conditions
(assert (=>
  (and p1_7@270@01 (bool___unbox__ $Snap.unit b_1@278@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@282@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01))))))
  $Snap.unit))
; [eval] p2_7 ==> bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 982 | p2_7@271@01 | live]
; [else-branch: 982 | !(p2_7@271@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 982 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1_0)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1_0@279@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 983 | bool___unbox__(_, b_1_0@279@01) | live]
; [else-branch: 983 | !(bool___unbox__(_, b_1_0@279@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 983 | bool___unbox__(_, b_1_0@279@01)]
(assert (bool___unbox__ $Snap.unit b_1_0@279@01))
; [eval] int___eq__(_res_2, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_2@283@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_2@283@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 6
(push) ; 6
; [else-branch: 983 | !(bool___unbox__(_, b_1_0@279@01))]
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_1_0@279@01)
  (and
    (bool___unbox__ $Snap.unit b_1_0@279@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_2@283@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
; Joined path conditions
(assert (or
  (not (bool___unbox__ $Snap.unit b_1_0@279@01))
  (bool___unbox__ $Snap.unit b_1_0@279@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 982 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    p2_7@271@01
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01)
    (=>
      (bool___unbox__ $Snap.unit b_1_0@279@01)
      (and
        (bool___unbox__ $Snap.unit b_1_0@279@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_2@283@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (or
      (not (bool___unbox__ $Snap.unit b_1_0@279@01))
      (bool___unbox__ $Snap.unit b_1_0@279@01)))))
; Joined path conditions
(assert (=>
  (and p2_7@271@01 (bool___unbox__ $Snap.unit b_1_0@279@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res_2@283@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))))
  $Snap.unit))
; [eval] p1_7 ==> !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_7@270@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 984 | p1_7@270@01 | live]
; [else-branch: 984 | !(p1_7@270@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 984 | p1_7@270@01]
(assert p1_7@270@01)
; [eval] !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1)
; [eval] bool___unbox__(b_1)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 985 | !(bool___unbox__(_, b_1@278@01)) | live]
; [else-branch: 985 | bool___unbox__(_, b_1@278@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 985 | !(bool___unbox__(_, b_1@278@01))]
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
; [eval] int___eq__(_res, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@282@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@282@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(push) ; 6
; [else-branch: 985 | bool___unbox__(_, b_1@278@01)]
(assert (bool___unbox__ $Snap.unit b_1@278@01))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_1@278@01))
  (and
    (not (bool___unbox__ $Snap.unit b_1@278@01))
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@282@01 (__prim__int___box__ $Snap.unit 0)))))
; Joined path conditions
(assert (or
  (bool___unbox__ $Snap.unit b_1@278@01)
  (not (bool___unbox__ $Snap.unit b_1@278@01))))
(pop) ; 4
(push) ; 4
; [else-branch: 984 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    p1_7@270@01
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_1@278@01))
      (and
        (not (bool___unbox__ $Snap.unit b_1@278@01))
        (__prim__int___box__%precondition $Snap.unit 0)
        (issubtype<Bool> (typeof<PyType> _res@282@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@282@01 (__prim__int___box__ $Snap.unit 0))))
    (or
      (bool___unbox__ $Snap.unit b_1@278@01)
      (not (bool___unbox__ $Snap.unit b_1@278@01))))))
; Joined path conditions
(assert (=>
  (and p1_7@270@01 (not (bool___unbox__ $Snap.unit b_1@278@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@282@01 (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01))))))))
  $Snap.unit))
; [eval] p2_7 ==> !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 986 | p2_7@271@01 | live]
; [else-branch: 986 | !(p2_7@271@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 986 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1_0)
; [eval] bool___unbox__(b_1_0)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1_0@279@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 987 | !(bool___unbox__(_, b_1_0@279@01)) | live]
; [else-branch: 987 | bool___unbox__(_, b_1_0@279@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 987 | !(bool___unbox__(_, b_1_0@279@01))]
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
; [eval] int___eq__(_res_2, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_2@283@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_2@283@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(push) ; 6
; [else-branch: 987 | bool___unbox__(_, b_1_0@279@01)]
(assert (bool___unbox__ $Snap.unit b_1_0@279@01))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_1_0@279@01))
  (and
    (not (bool___unbox__ $Snap.unit b_1_0@279@01))
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_2@283@01 (__prim__int___box__ $Snap.unit 0)))))
; Joined path conditions
(assert (or
  (bool___unbox__ $Snap.unit b_1_0@279@01)
  (not (bool___unbox__ $Snap.unit b_1_0@279@01))))
(pop) ; 4
(push) ; 4
; [else-branch: 986 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    p2_7@271@01
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_1_0@279@01))
      (and
        (not (bool___unbox__ $Snap.unit b_1_0@279@01))
        (__prim__int___box__%precondition $Snap.unit 0)
        (issubtype<Bool> (typeof<PyType> _res_2@283@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_2@283@01 (__prim__int___box__ $Snap.unit 0))))
    (or
      (bool___unbox__ $Snap.unit b_1_0@279@01)
      (not (bool___unbox__ $Snap.unit b_1_0@279@01))))))
; Joined path conditions
(assert (=>
  (and p2_7@271@01 (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res_2@283@01 (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))))))
  $Snap.unit))
; [eval] p1_7 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_7@270@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 988 | p1_7@270@01 | live]
; [else-branch: 988 | !(p1_7@270@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 988 | p1_7@270@01]
(assert p1_7@270@01)
(pop) ; 4
(push) ; 4
; [else-branch: 988 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@285@01)))))))))
  $Snap.unit))
; [eval] p2_7 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 989 | p2_7@271@01 | live]
; [else-branch: 989 | !(p2_7@271@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 989 | p2_7@271@01]
(assert p2_7@271@01)
(pop) ; 4
(push) ; 4
; [else-branch: 989 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_1: Bool
(declare-const ret1_1@286@01 Bool)
; [exec]
; var ret2_1: Bool
(declare-const ret2_1@287@01 Bool)
; [exec]
; var except1_1: Bool
(declare-const except1_1@288@01 Bool)
; [exec]
; var except2_1: Bool
(declare-const except2_1@289@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@290@01 $Ref)
; [exec]
; var _err_2: Ref
(declare-const _err_2@291@01 $Ref)
; [exec]
; var x_2: Ref
(declare-const x_2@292@01 $Ref)
; [exec]
; var x_2_0: Ref
(declare-const x_2_0@293@01 $Ref)
; [exec]
; var error_1: Ref
(declare-const error_1@294@01 $Ref)
; [exec]
; var error_1_0: Ref
(declare-const error_1_0@295@01 $Ref)
; [exec]
; var try_finally_9: Int
(declare-const try_finally_9@296@01 Int)
; [exec]
; var try_finally_9_0: Int
(declare-const try_finally_9_0@297@01 Int)
; [exec]
; var b_6: Ref
(declare-const b_6@298@01 $Ref)
; [exec]
; var b_6_0: Ref
(declare-const b_6_0@299@01 $Ref)
; [exec]
; var MyException_res_1: Ref
(declare-const MyException_res_1@300@01 $Ref)
; [exec]
; var MyException_res_1_0: Ref
(declare-const MyException_res_1_0@301@01 $Ref)
; [exec]
; var _cwl_159: Perm
(declare-const _cwl_159@302@01 $Perm)
; [exec]
; var _cwl_159_0: Perm
(declare-const _cwl_159_0@303@01 $Perm)
; [exec]
; var _method_measures_159: Seq[Measure$]
(declare-const _method_measures_159@304@01 Seq<Measure$>)
; [exec]
; var _method_measures_159_0: Seq[Measure$]
(declare-const _method_measures_159_0@305@01 Seq<Measure$>)
; [exec]
; var bypass1_1: Bool
(declare-const bypass1_1@306@01 Bool)
; [exec]
; var bypass2_1: Bool
(declare-const bypass2_1@307@01 Bool)
; [exec]
; var oldret1_1: Bool
(declare-const oldret1_1@308@01 Bool)
; [exec]
; var oldret2_1: Bool
(declare-const oldret2_1@309@01 Bool)
; [exec]
; var oldexcept1_1: Bool
(declare-const oldexcept1_1@310@01 Bool)
; [exec]
; var oldexcept2_1: Bool
(declare-const oldexcept2_1@311@01 Bool)
; [exec]
; var thisexcept1_1: Bool
(declare-const thisexcept1_1@312@01 Bool)
; [exec]
; var thisexcept2_1: Bool
(declare-const thisexcept2_1@313@01 Bool)
; [exec]
; var p1_9: Bool
(declare-const p1_9@314@01 Bool)
; [exec]
; var p2_9: Bool
(declare-const p2_9@315@01 Bool)
; [exec]
; var tmp_ret1_1: Bool
(declare-const tmp_ret1_1@316@01 Bool)
; [exec]
; var tmp_ret2_1: Bool
(declare-const tmp_ret2_1@317@01 Bool)
; [exec]
; var tmp_break1_1: Bool
(declare-const tmp_break1_1@318@01 Bool)
; [exec]
; var tmp_break2_1: Bool
(declare-const tmp_break2_1@319@01 Bool)
; [exec]
; var tmp_cont1_1: Bool
(declare-const tmp_cont1_1@320@01 Bool)
; [exec]
; var tmp_cont2_1: Bool
(declare-const tmp_cont2_1@321@01 Bool)
; [exec]
; var tmp_except1_1: Bool
(declare-const tmp_except1_1@322@01 Bool)
; [exec]
; var tmp_except2_1: Bool
(declare-const tmp_except2_1@323@01 Bool)
; [exec]
; var p1_8: Bool
(declare-const p1_8@324@01 Bool)
; [exec]
; var p2_8: Bool
(declare-const p2_8@325@01 Bool)
; [exec]
; var p3_1: Bool
(declare-const p3_1@326@01 Bool)
; [exec]
; var p4_1: Bool
(declare-const p4_1@327@01 Bool)
; [exec]
; var tmp_1: Ref
(declare-const tmp_1@328@01 $Ref)
; [exec]
; inhale p1_7
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 $Snap.unit))
(assert p1_7@270@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_1 := false
; [exec]
; ret2_1 := false
; [exec]
; except1_1 := false
; [exec]
; except2_1 := false
; [eval] p1_7 && (!ret1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 990 | !(p1_7@270@01) | live]
; [else-branch: 990 | p1_7@270@01 | live]
(push) ; 4
; [then-branch: 990 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 4
(push) ; 4
; [else-branch: 990 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 5
; [then-branch: 991 | False | live]
; [else-branch: 991 | True | live]
(push) ; 6
; [then-branch: 991 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 991 | True]
; [eval] !except1_1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_7@270@01 (not p1_7@270@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 992 | p1_7@270@01 | live]
; [else-branch: 992 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 992 | p1_7@270@01]
; [exec]
; _method_measures_159 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; b_6 := b_1
; [exec]
; x_2 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const x_2@330@01 $Ref)
(assert (= x_2@330@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@331@01 $Snap)
(assert (= $t@331@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 4
(assert (_isDefined%precondition $Snap.unit 3301240))
(pop) ; 4
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301240))
(assert (_isDefined $Snap.unit 3301240))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 993 | !(p2_7@271@01) | live]
; [else-branch: 993 | p2_7@271@01 | live]
(push) ; 5
; [then-branch: 993 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 5
(push) ; 5
; [else-branch: 993 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 6
; [then-branch: 994 | False | live]
; [else-branch: 994 | True | live]
(push) ; 7
; [then-branch: 994 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 994 | True]
; [eval] !except2_1
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_7@271@01 (not p2_7@271@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 995 | p2_7@271@01 | live]
; [else-branch: 995 | !(p2_7@271@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 995 | p2_7@271@01]
(assert p2_7@271@01)
; [exec]
; _method_measures_159_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_2 := null
; [exec]
; _err_2 := null
; [exec]
; b_6_0 := b_1_0
; [exec]
; x_2_0 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const x_2_0@332@01 $Ref)
(assert (= x_2_0@332@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale true
(declare-const $t@333@01 $Snap)
(assert (= $t@333@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; bypass1_1 := !(p1_7 && (!ret1_1 && !except1_1))
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 996 | !(p1_7@270@01) | live]
; [else-branch: 996 | p1_7@270@01 | live]
(push) ; 6
; [then-branch: 996 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 6
(push) ; 6
; [else-branch: 996 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 7
; [then-branch: 997 | False | live]
; [else-branch: 997 | True | live]
(push) ; 8
; [then-branch: 997 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 997 | True]
; [eval] !except1_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass1_1@334@01 Bool)
(assert (= bypass1_1@334@01 (not p1_7@270@01)))
; [exec]
; bypass2_1 := !(p2_7 && (!ret2_1 && !except2_1))
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 5
; [then-branch: 998 | !(p2_7@271@01) | live]
; [else-branch: 998 | p2_7@271@01 | live]
(push) ; 6
; [then-branch: 998 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 6
(push) ; 6
; [else-branch: 998 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 7
; [then-branch: 999 | False | live]
; [else-branch: 999 | True | live]
(push) ; 8
; [then-branch: 999 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 999 | True]
; [eval] !except2_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass2_1@335@01 Bool)
(assert (= bypass2_1@335@01 (not p2_7@271@01)))
; [exec]
; oldret1_1 := ret1_1
; [exec]
; oldret2_1 := ret2_1
; [exec]
; oldexcept1_1 := except1_1
; [exec]
; oldexcept2_1 := except2_1
; [exec]
; p1_8 := p1_7 && (!ret1_1 && !except1_1 && bool___unbox__(b_6))
; [eval] p1_7 && (!ret1_1 && !except1_1 && bool___unbox__(b_6))
(push) ; 5
; [then-branch: 1000 | !(p1_7@270@01) | live]
; [else-branch: 1000 | p1_7@270@01 | live]
(push) ; 6
; [then-branch: 1000 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1000 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 7
; [then-branch: 1001 | False | live]
; [else-branch: 1001 | True | live]
(push) ; 8
; [then-branch: 1001 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1001 | True]
; [eval] !except1_1
(push) ; 9
; [then-branch: 1002 | False | live]
; [else-branch: 1002 | True | live]
(push) ; 10
; [then-branch: 1002 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1002 | True]
; [eval] bool___unbox__(b_6)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01))))
(declare-const p1_8@336@01 Bool)
(assert (= p1_8@336@01 (and p1_7@270@01 (bool___unbox__ $Snap.unit b_1@278@01))))
; [exec]
; p2_8 := p2_7 && (!ret2_1 && !except2_1 && bool___unbox__(b_6_0))
; [eval] p2_7 && (!ret2_1 && !except2_1 && bool___unbox__(b_6_0))
(push) ; 5
; [then-branch: 1003 | !(p2_7@271@01) | live]
; [else-branch: 1003 | p2_7@271@01 | live]
(push) ; 6
; [then-branch: 1003 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1003 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 7
; [then-branch: 1004 | False | live]
; [else-branch: 1004 | True | live]
(push) ; 8
; [then-branch: 1004 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1004 | True]
; [eval] !except2_1
(push) ; 9
; [then-branch: 1005 | False | live]
; [else-branch: 1005 | True | live]
(push) ; 10
; [then-branch: 1005 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1005 | True]
; [eval] bool___unbox__(b_6_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01))))
(declare-const p2_8@337@01 Bool)
(assert (= p2_8@337@01 (and p2_7@271@01 (bool___unbox__ $Snap.unit b_1_0@279@01))))
; [exec]
; p3_1 := p1_7 && (!ret1_1 && !except1_1 && !bool___unbox__(b_6))
; [eval] p1_7 && (!ret1_1 && !except1_1 && !bool___unbox__(b_6))
(push) ; 5
; [then-branch: 1006 | !(p1_7@270@01) | live]
; [else-branch: 1006 | p1_7@270@01 | live]
(push) ; 6
; [then-branch: 1006 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1006 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 7
; [then-branch: 1007 | False | live]
; [else-branch: 1007 | True | live]
(push) ; 8
; [then-branch: 1007 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1007 | True]
; [eval] !except1_1
(push) ; 9
; [then-branch: 1008 | False | live]
; [else-branch: 1008 | True | live]
(push) ; 10
; [then-branch: 1008 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1008 | True]
; [eval] !bool___unbox__(b_6)
; [eval] bool___unbox__(b_6)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_1@338@01 Bool)
(assert (= p3_1@338@01 (and p1_7@270@01 (not (bool___unbox__ $Snap.unit b_1@278@01)))))
; [exec]
; p4_1 := p2_7 && (!ret2_1 && !except2_1 && !bool___unbox__(b_6_0))
; [eval] p2_7 && (!ret2_1 && !except2_1 && !bool___unbox__(b_6_0))
(push) ; 5
; [then-branch: 1009 | !(p2_7@271@01) | live]
; [else-branch: 1009 | p2_7@271@01 | live]
(push) ; 6
; [then-branch: 1009 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1009 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 7
; [then-branch: 1010 | False | live]
; [else-branch: 1010 | True | live]
(push) ; 8
; [then-branch: 1010 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1010 | True]
; [eval] !except2_1
(push) ; 9
; [then-branch: 1011 | False | live]
; [else-branch: 1011 | True | live]
(push) ; 10
; [then-branch: 1011 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1011 | True]
; [eval] !bool___unbox__(b_6_0)
; [eval] bool___unbox__(b_6_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_1@339@01 Bool)
(assert (= p4_1@339@01 (and p2_7@271@01 (not (bool___unbox__ $Snap.unit b_1_0@279@01)))))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@340@01 $Ref)
(assert (not (= tmp_1@340@01 $Ref.null)))
(assert (not (= tmp_1@340@01 error_1_0@295@01)))
(assert (not (= tmp_1@340@01 _cthread_159_0@273@01)))
(assert (not (= tmp_1@340@01 x_2@330@01)))
(assert (not (= tmp_1@340@01 error_1@294@01)))
(assert (not (= tmp_1@340@01 MyException_res_1_0@301@01)))
(assert (not (= tmp_1@340@01 tmp_1@328@01)))
(assert (not (= tmp_1@340@01 MyException_res_1@300@01)))
(assert (not (= tmp_1@340@01 b_1_0@279@01)))
(assert (not (= tmp_1@340@01 b_1@278@01)))
(assert (not (= tmp_1@340@01 x_2_0@332@01)))
(assert (not (= tmp_1@340@01 _cthread_159@272@01)))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 5
; [then-branch: 1012 | !(p1_8@336@01) | live]
; [else-branch: 1012 | p1_8@336@01 | live]
(push) ; 6
; [then-branch: 1012 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1012 | p1_8@336@01]
(assert p1_8@336@01)
; [eval] !ret1_1
(push) ; 7
; [then-branch: 1013 | False | live]
; [else-branch: 1013 | True | live]
(push) ; 8
; [then-branch: 1013 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1013 | True]
; [eval] !except1_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_8@336@01 (not p1_8@336@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_8@336@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_8@336@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1014 | p1_8@336@01 | live]
; [else-branch: 1014 | !(p1_8@336@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1014 | p1_8@336@01]
(assert p1_8@336@01)
; [exec]
; MyException_res_1 := tmp_1
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 6
; [then-branch: 1015 | !(p2_8@337@01) | live]
; [else-branch: 1015 | p2_8@337@01 | live]
(push) ; 7
; [then-branch: 1015 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1015 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 8
; [then-branch: 1016 | False | live]
; [else-branch: 1016 | True | live]
(push) ; 9
; [then-branch: 1016 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 1016 | True]
; [eval] !except2_1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_8@337@01 (not p2_8@337@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_8@337@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_8@337@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1017 | p2_8@337@01 | live]
; [else-branch: 1017 | !(p2_8@337@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1017 | p2_8@337@01]
(assert p2_8@337@01)
; [exec]
; MyException_res_1_0 := tmp_1
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1018 | !(p1_8@336@01) | live]
; [else-branch: 1018 | p1_8@336@01 | live]
(push) ; 8
; [then-branch: 1018 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1018 | p1_8@336@01]
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1019 | False | live]
; [else-branch: 1019 | True | live]
(push) ; 10
; [then-branch: 1019 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1019 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_8@336@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1020 | p1_8@336@01 | live]
; [else-branch: 1020 | !(p1_8@336@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1020 | p1_8@336@01]
; [exec]
; inhale typeof(MyException_res_1) == MyException()
(declare-const $t@341@01 $Snap)
(assert (= $t@341@01 $Snap.unit))
; [eval] typeof(MyException_res_1) == MyException()
; [eval] typeof(MyException_res_1)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_1@340@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_8 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1021 | !(p2_8@337@01) | live]
; [else-branch: 1021 | p2_8@337@01 | live]
(push) ; 9
; [then-branch: 1021 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1021 | p2_8@337@01]
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1022 | False | live]
; [else-branch: 1022 | True | live]
(push) ; 11
; [then-branch: 1022 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1022 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_8@337@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1023 | p2_8@337@01 | live]
; [else-branch: 1023 | !(p2_8@337@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1023 | p2_8@337@01]
; [exec]
; inhale typeof(MyException_res_1_0) == MyException()
(declare-const $t@342@01 $Snap)
(assert (= $t@342@01 $Snap.unit))
; [eval] typeof(MyException_res_1_0) == MyException()
; [eval] typeof(MyException_res_1_0)
; [eval] MyException()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_8 && (!ret1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1024 | !(p1_8@336@01) | live]
; [else-branch: 1024 | p1_8@336@01 | live]
(push) ; 10
; [then-branch: 1024 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1024 | p1_8@336@01]
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1025 | False | live]
; [else-branch: 1025 | True | live]
(push) ; 12
; [then-branch: 1025 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1025 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_8@336@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1026 | p1_8@336@01 | live]
; [else-branch: 1026 | !(p1_8@336@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1026 | p1_8@336@01]
; [exec]
; _err := MyException_res_1
; [exec]
; except1_1 := true
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1027 | !(p2_8@337@01) | live]
; [else-branch: 1027 | p2_8@337@01 | live]
(push) ; 11
; [then-branch: 1027 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 11
(push) ; 11
; [else-branch: 1027 | p2_8@337@01]
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1028 | False | live]
; [else-branch: 1028 | True | live]
(push) ; 13
; [then-branch: 1028 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1028 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_8@337@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1029 | p2_8@337@01 | live]
; [else-branch: 1029 | !(p2_8@337@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1029 | p2_8@337@01]
; [exec]
; _err_2 := MyException_res_1_0
; [exec]
; except2_1 := true
; [exec]
; thisexcept1_1 := except1_1 && !bypass1_1
; [eval] except1_1 && !bypass1_1
(push) ; 11
; [then-branch: 1030 | False | live]
; [else-branch: 1030 | True | live]
(push) ; 12
; [then-branch: 1030 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1030 | True]
; [eval] !bypass1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_1@343@01 Bool)
(assert (= thisexcept1_1@343@01 (not bypass1_1@334@01)))
; [exec]
; thisexcept2_1 := except2_1 && !bypass2_1
; [eval] except2_1 && !bypass2_1
(push) ; 11
; [then-branch: 1031 | False | live]
; [else-branch: 1031 | True | live]
(push) ; 12
; [then-branch: 1031 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1031 | True]
; [eval] !bypass2_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_1@344@01 Bool)
(assert (= thisexcept2_1@344@01 (not bypass2_1@335@01)))
; [exec]
; p1_9 := p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
; [eval] p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 1032 | !(p1_7@270@01) | live]
; [else-branch: 1032 | p1_7@270@01 | live]
(push) ; 12
; [then-branch: 1032 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1032 | p1_7@270@01]
(push) ; 13
; [then-branch: 1033 | !(thisexcept1_1@343@01) | live]
; [else-branch: 1033 | thisexcept1_1@343@01 | live]
(push) ; 14
; [then-branch: 1033 | !(thisexcept1_1@343@01)]
(assert (not thisexcept1_1@343@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1033 | thisexcept1_1@343@01]
(assert thisexcept1_1@343@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_1@343@01 (not thisexcept1_1@343@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p1_7@270@01 (or thisexcept1_1@343@01 (not thisexcept1_1@343@01))))
(declare-const p1_9@345@01 Bool)
(assert (=
  p1_9@345@01
  (and
    p1_7@270@01
    (and
      thisexcept1_1@343@01
      (issubtype<Bool> (typeof<PyType> tmp_1@340@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_9 := p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
; [eval] p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
(push) ; 11
; [then-branch: 1034 | !(p2_7@271@01) | live]
; [else-branch: 1034 | p2_7@271@01 | live]
(push) ; 12
; [then-branch: 1034 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1034 | p2_7@271@01]
(push) ; 13
; [then-branch: 1035 | !(thisexcept2_1@344@01) | live]
; [else-branch: 1035 | thisexcept2_1@344@01 | live]
(push) ; 14
; [then-branch: 1035 | !(thisexcept2_1@344@01)]
(assert (not thisexcept2_1@344@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1035 | thisexcept2_1@344@01]
(assert thisexcept2_1@344@01)
; [eval] issubtype(typeof(_err_2), MyException())
; [eval] typeof(_err_2)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_1@344@01 (not thisexcept2_1@344@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p2_7@271@01 (or thisexcept2_1@344@01 (not thisexcept2_1@344@01))))
(declare-const p2_9@346@01 Bool)
(assert (=
  p2_9@346@01
  (and
    p2_7@271@01
    (and
      thisexcept2_1@344@01
      (issubtype<Bool> (typeof<PyType> tmp_1@340@01) (as MyException<PyType>  PyType))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_9@345@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not p1_9@345@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1036 | p1_9@345@01 | live]
; [else-branch: 1036 | !(p1_9@345@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1036 | p1_9@345@01]
(assert p1_9@345@01)
; [exec]
; except1_1 := false
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_9@346@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not p2_9@346@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1037 | p2_9@346@01 | live]
; [else-branch: 1037 | !(p2_9@346@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1037 | p2_9@346@01]
(assert p2_9@346@01)
; [exec]
; except2_1 := false
; [eval] p1_9 && (!ret1_1 && !except1_1)
(push) ; 13
; [then-branch: 1038 | !(p1_9@345@01) | live]
; [else-branch: 1038 | p1_9@345@01 | live]
(push) ; 14
; [then-branch: 1038 | !(p1_9@345@01)]
(assert (not p1_9@345@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1038 | p1_9@345@01]
; [eval] !ret1_1
(push) ; 15
; [then-branch: 1039 | False | live]
; [else-branch: 1039 | True | live]
(push) ; 16
; [then-branch: 1039 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1039 | True]
; [eval] !except1_1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p1_9@345@01 (not p1_9@345@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_9@345@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1040 | p1_9@345@01 | live]
; [else-branch: 1040 | !(p1_9@345@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1040 | p1_9@345@01]
; [exec]
; x_2 := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const x_2@347@01 $Ref)
(assert (= x_2@347@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_9 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1041 | !(p2_9@346@01) | live]
; [else-branch: 1041 | p2_9@346@01 | live]
(push) ; 15
; [then-branch: 1041 | !(p2_9@346@01)]
(assert (not p2_9@346@01))
(pop) ; 15
(push) ; 15
; [else-branch: 1041 | p2_9@346@01]
; [eval] !ret2_1
(push) ; 16
; [then-branch: 1042 | False | live]
; [else-branch: 1042 | True | live]
(push) ; 17
; [then-branch: 1042 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 1042 | True]
; [eval] !except2_1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p2_9@346@01 (not p2_9@346@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@346@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1043 | p2_9@346@01 | live]
; [else-branch: 1043 | !(p2_9@346@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1043 | p2_9@346@01]
; [exec]
; x_2_0 := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const x_2_0@349@01 $Ref)
(assert (= x_2_0@349@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; inhale true
(declare-const $t@350@01 $Snap)
(assert (= $t@350@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_7 && (!ret1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1044 | !(p1_7@270@01) | live]
; [else-branch: 1044 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1044 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1044 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1045 | False | live]
; [else-branch: 1045 | True | live]
(push) ; 18
; [then-branch: 1045 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1045 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1046 | p1_7@270@01 | live]
; [else-branch: 1046 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1046 | p1_7@270@01]
; [exec]
; _err := null
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1047 | !(p2_7@271@01) | live]
; [else-branch: 1047 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1047 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1047 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1048 | False | live]
; [else-branch: 1048 | True | live]
(push) ; 19
; [then-branch: 1048 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1048 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1049 | p2_7@271@01 | live]
; [else-branch: 1049 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1049 | p2_7@271@01]
; [exec]
; _err_2 := null
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1050 | p1_7@270@01 | live]
; [else-branch: 1050 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1050 | p1_7@270@01]
; [exec]
; tmp_ret1_1 := ret1_1
; [exec]
; ret1_1 := oldret1_1
; [exec]
; tmp_except1_1 := except1_1
; [exec]
; except1_1 := oldexcept1_1
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1051 | p2_7@271@01 | live]
; [else-branch: 1051 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1051 | p2_7@271@01]
; [exec]
; tmp_ret2_1 := ret2_1
; [exec]
; ret2_1 := oldret2_1
; [exec]
; tmp_except2_1 := except2_1
; [exec]
; except2_1 := oldexcept2_1
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1052 | !(p1_7@270@01) | live]
; [else-branch: 1052 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1052 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1052 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1053 | False | live]
; [else-branch: 1053 | True | live]
(push) ; 22
; [then-branch: 1053 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1053 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1054 | p1_7@270@01 | live]
; [else-branch: 1054 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1054 | p1_7@270@01]
; [exec]
; x_2 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@347@01 3301240))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@347@01 3301240))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@347@01 3301240)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@347@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@347@01 3301240)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@347@01 3301240)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@347@01 3301240))))
(push) ; 20
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@347@01 3301240))))
(pop) ; 20
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@347@01 3301240))))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@347@01 3301240)))))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@347@01 3301240)))))
(declare-const x_2@351@01 $Ref)
(assert (=
  x_2@351@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@347@01 3301240))))))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 20
(pop) ; 20
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1055 | !(p2_7@271@01) | live]
; [else-branch: 1055 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1055 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1055 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1056 | False | live]
; [else-branch: 1056 | True | live]
(push) ; 23
; [then-branch: 1056 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1056 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1057 | p2_7@271@01 | live]
; [else-branch: 1057 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1057 | p2_7@271@01]
; [exec]
; x_2_0 := __prim__int___box__(int___mul__(2, int___unbox__(x_2_0)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(x_2_0)))
; [eval] int___mul__(2, int___unbox__(x_2_0))
; [eval] int___unbox__(x_2_0)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 22
(assert (not (issubtype<Bool> (typeof<PyType> x_2_0@349@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2_0@349@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_2_0@349@01))
(pop) ; 21
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_2_0@349@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_2_0@349@01)))
(push) ; 21
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@349@01)))
(pop) ; 21
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@349@01)))
(push) ; 21
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@349@01))))
(pop) ; 21
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@349@01))))
(declare-const x_2_0@353@01 $Ref)
(assert (=
  x_2_0@353@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@349@01)))))
; [exec]
; inhale true
(declare-const $t@354@01 $Snap)
(assert (= $t@354@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1058 | p1_7@270@01 | live]
; [else-branch: 1058 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1058 | p1_7@270@01]
; [exec]
; ret1_1 := ret1_1 || tmp_ret1_1
; [eval] ret1_1 || tmp_ret1_1
(push) ; 22
; [then-branch: 1059 | False | live]
; [else-branch: 1059 | True | live]
(push) ; 23
; [then-branch: 1059 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1059 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [exec]
; except1_1 := except1_1 || tmp_except1_1
; [eval] except1_1 || tmp_except1_1
(push) ; 22
; [then-branch: 1060 | False | live]
; [else-branch: 1060 | True | live]
(push) ; 23
; [then-branch: 1060 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1060 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1061 | p2_7@271@01 | live]
; [else-branch: 1061 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1061 | p2_7@271@01]
; [exec]
; ret2_1 := ret2_1 || tmp_ret2_1
; [eval] ret2_1 || tmp_ret2_1
(push) ; 23
; [then-branch: 1062 | False | live]
; [else-branch: 1062 | True | live]
(push) ; 24
; [then-branch: 1062 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1062 | True]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [exec]
; except2_1 := except2_1 || tmp_except2_1
; [eval] except2_1 || tmp_except2_1
(push) ; 23
; [then-branch: 1063 | False | live]
; [else-branch: 1063 | True | live]
(push) ; 24
; [then-branch: 1063 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1063 | True]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1064 | !(p1_7@270@01) | live]
; [else-branch: 1064 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1064 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1064 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1065 | False | live]
; [else-branch: 1065 | True | live]
(push) ; 26
; [then-branch: 1065 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1065 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1066 | p1_7@270@01 | live]
; [else-branch: 1066 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1066 | p1_7@270@01]
; [exec]
; _res := _checkDefined(x_2, 3301240)
; [eval] _checkDefined(x_2, 3301240)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@351@01 3301240))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@351@01 3301240))
(declare-const _res@355@01 $Ref)
(assert (= _res@355@01 (_checkDefined $Snap.unit x_2@351@01 3301240)))
; [exec]
; ret1_1 := true
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1067 | !(p2_7@271@01) | live]
; [else-branch: 1067 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1067 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1067 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1068 | False | live]
; [else-branch: 1068 | True | live]
(push) ; 27
; [then-branch: 1068 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1068 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1069 | p2_7@271@01 | live]
; [else-branch: 1069 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1069 | p2_7@271@01]
; [exec]
; _res_2 := x_2_0
; [exec]
; ret2_1 := true
; [exec]
; assert (p1_7 ==> !except1_1) && (p2_7 ==> !except2_1)
; [eval] p1_7 ==> !except1_1
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1070 | p1_7@270@01 | live]
; [else-branch: 1070 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1070 | p1_7@270@01]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> !except2_1
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1071 | p2_7@271@01 | live]
; [else-branch: 1071 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1071 | p2_7@271@01]
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> true
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1072 | p1_7@270@01 | live]
; [else-branch: 1072 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1072 | p1_7@270@01]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1073 | p2_7@271@01 | live]
; [else-branch: 1073 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1073 | p2_7@271@01]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), int())
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1074 | p1_7@270@01 | live]
; [else-branch: 1074 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1074 | p1_7@270@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@355@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@355@01) (as int<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_2), int())
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1075 | p2_7@271@01 | live]
; [else-branch: 1075 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1075 | p2_7@271@01]
; [eval] issubtype(typeof(_res_2), int())
; [eval] typeof(_res_2)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> x_2_0@353@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> x_2_0@353@01) (as int<PyType>  PyType))))
; [eval] p1_7 ==> bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1076 | p1_7@270@01 | live]
; [else-branch: 1076 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1076 | p1_7@270@01]
; [eval] bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1077 | bool___unbox__(_, b_1@278@01) | live]
; [else-branch: 1077 | !(bool___unbox__(_, b_1@278@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1077 | bool___unbox__(_, b_1@278@01)]
(assert (bool___unbox__ $Snap.unit b_1@278@01))
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 29
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> _res@355@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@355@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@355@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@355@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@355@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_1@278@01)
  (and
    (bool___unbox__ $Snap.unit b_1@278@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res@355@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@355@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_1@278@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (=>
      (bool___unbox__ $Snap.unit b_1@278@01)
      (and
        (bool___unbox__ $Snap.unit b_1@278@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res@355@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@355@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b_1@278@01))))
(push) ; 25
(assert (not (=>
  (and p1_7@270@01 (bool___unbox__ $Snap.unit b_1@278@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@355@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@270@01 (bool___unbox__ $Snap.unit b_1@278@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@355@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
; [eval] p2_7 ==> bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1078 | p2_7@271@01 | live]
; [else-branch: 1078 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1078 | p2_7@271@01]
; [eval] bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1_0)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1_0@279@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1079 | bool___unbox__(_, b_1_0@279@01) | live]
; [else-branch: 1079 | !(bool___unbox__(_, b_1_0@279@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1079 | bool___unbox__(_, b_1_0@279@01)]
(assert (bool___unbox__ $Snap.unit b_1_0@279@01))
; [eval] int___eq__(_res_2, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 29
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> x_2_0@353@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2_0@353@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@353@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_2_0@353@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@353@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_1_0@279@01)
  (and
    (bool___unbox__ $Snap.unit b_1_0@279@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> x_2_0@353@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@353@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_1_0@279@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01)
    (=>
      (bool___unbox__ $Snap.unit b_1_0@279@01)
      (and
        (bool___unbox__ $Snap.unit b_1_0@279@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> x_2_0@353@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@353@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b_1_0@279@01))))
(push) ; 25
(assert (not (=>
  (and p2_7@271@01 (bool___unbox__ $Snap.unit b_1_0@279@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_2_0@353@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_7@271@01 (bool___unbox__ $Snap.unit b_1_0@279@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_2_0@353@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
; [eval] p1_7 ==> !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1080 | p1_7@270@01 | live]
; [else-branch: 1080 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1080 | p1_7@270@01]
; [eval] !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1)
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1081 | !(bool___unbox__(_, b_1@278@01)) | dead]
; [else-branch: 1081 | bool___unbox__(_, b_1@278@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1081 | bool___unbox__(_, b_1@278@01)]
(assert (bool___unbox__ $Snap.unit b_1@278@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (bool___unbox__ $Snap.unit b_1@278@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (bool___unbox__ $Snap.unit b_1@278@01))))
; [eval] p2_7 ==> !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1082 | p2_7@271@01 | live]
; [else-branch: 1082 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1082 | p2_7@271@01]
; [eval] !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1_0)
; [eval] bool___unbox__(b_1_0)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1083 | !(bool___unbox__(_, b_1_0@279@01)) | dead]
; [else-branch: 1083 | bool___unbox__(_, b_1_0@279@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1083 | bool___unbox__(_, b_1_0@279@01)]
(assert (bool___unbox__ $Snap.unit b_1_0@279@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (bool___unbox__ $Snap.unit b_1_0@279@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01)
    (bool___unbox__ $Snap.unit b_1_0@279@01))))
; [eval] p1_7 ==> (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1084 | p1_7@270@01 | live]
; [else-branch: 1084 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1084 | p1_7@270@01]
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
(push) ; 27
; [then-branch: 1085 | False | live]
; [else-branch: 1085 | True | live]
(push) ; 28
; [then-branch: 1085 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1085 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
(push) ; 29
; [then-branch: 1086 | False | live]
; [else-branch: 1086 | True | live]
(push) ; 30
; [then-branch: 1086 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1086 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
(push) ; 31
; [then-branch: 1087 | False | live]
; [else-branch: 1087 | True | live]
(push) ; 32
; [then-branch: 1087 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1087 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1088 | p2_7@271@01 | live]
; [else-branch: 1088 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1088 | p2_7@271@01]
; [eval] (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false)
(push) ; 27
; [then-branch: 1089 | False | live]
; [else-branch: 1089 | True | live]
(push) ; 28
; [then-branch: 1089 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1089 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false)
(push) ; 29
; [then-branch: 1090 | False | live]
; [else-branch: 1090 | True | live]
(push) ; 30
; [then-branch: 1090 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1090 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false)
(push) ; 31
; [then-branch: 1091 | False | live]
; [else-branch: 1091 | True | live]
(push) ; 32
; [then-branch: 1091 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1091 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(pop) ; 24
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1092 | !(p2_7@271@01) | live]
; [else-branch: 1092 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1092 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1092 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1093 | False | live]
; [else-branch: 1093 | True | live]
(push) ; 27
; [then-branch: 1093 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1093 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1094 | !(p2_7@271@01) | dead]
; [else-branch: 1094 | p2_7@271@01 | live]
(push) ; 24
; [else-branch: 1094 | p2_7@271@01]
(pop) ; 24
(pop) ; 23
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1095 | !(p1_7@270@01) | live]
; [else-branch: 1095 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1095 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1095 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1096 | False | live]
; [else-branch: 1096 | True | live]
(push) ; 26
; [then-branch: 1096 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1096 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1097 | !(p1_7@270@01) | dead]
; [else-branch: 1097 | p1_7@270@01 | live]
(push) ; 23
; [else-branch: 1097 | p1_7@270@01]
(pop) ; 23
(pop) ; 22
; [eval] !p2_7
; [then-branch: 1098 | !(p2_7@271@01) | dead]
; [else-branch: 1098 | p2_7@271@01 | live]
(push) ; 22
; [else-branch: 1098 | p2_7@271@01]
(pop) ; 22
(pop) ; 21
; [eval] !p1_7
; [then-branch: 1099 | !(p1_7@270@01) | dead]
; [else-branch: 1099 | p1_7@270@01 | live]
(push) ; 21
; [else-branch: 1099 | p1_7@270@01]
(pop) ; 21
(pop) ; 20
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 20
; [then-branch: 1100 | !(p2_7@271@01) | live]
; [else-branch: 1100 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1100 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1100 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1101 | False | live]
; [else-branch: 1101 | True | live]
(push) ; 23
; [then-branch: 1101 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1101 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1102 | !(p2_7@271@01) | dead]
; [else-branch: 1102 | p2_7@271@01 | live]
(push) ; 20
; [else-branch: 1102 | p2_7@271@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1103 | !(p1_7@270@01) | live]
; [else-branch: 1103 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1103 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1103 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1104 | False | live]
; [else-branch: 1104 | True | live]
(push) ; 22
; [then-branch: 1104 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1104 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 1105 | !(p1_7@270@01) | dead]
; [else-branch: 1105 | p1_7@270@01 | live]
(push) ; 19
; [else-branch: 1105 | p1_7@270@01]
(pop) ; 19
(pop) ; 18
; [eval] !p2_7
; [then-branch: 1106 | !(p2_7@271@01) | dead]
; [else-branch: 1106 | p2_7@271@01 | live]
(push) ; 18
; [else-branch: 1106 | p2_7@271@01]
(pop) ; 18
(pop) ; 17
; [eval] !p1_7
; [then-branch: 1107 | !(p1_7@270@01) | dead]
; [else-branch: 1107 | p1_7@270@01 | live]
(push) ; 17
; [else-branch: 1107 | p1_7@270@01]
(pop) ; 17
(pop) ; 16
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1108 | !(p2_7@271@01) | live]
; [else-branch: 1108 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1108 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1108 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1109 | False | live]
; [else-branch: 1109 | True | live]
(push) ; 19
; [then-branch: 1109 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1109 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 1110 | !(p2_7@271@01) | dead]
; [else-branch: 1110 | p2_7@271@01 | live]
(push) ; 16
; [else-branch: 1110 | p2_7@271@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 15
; [then-branch: 1111 | !(p1_7@270@01) | live]
; [else-branch: 1111 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1111 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1111 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1112 | False | live]
; [else-branch: 1112 | True | live]
(push) ; 18
; [then-branch: 1112 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1112 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 1113 | !(p1_7@270@01) | dead]
; [else-branch: 1113 | p1_7@270@01 | live]
(push) ; 15
; [else-branch: 1113 | p1_7@270@01]
(pop) ; 15
(pop) ; 14
; [eval] !(p2_9 && (!ret2_1 && !except2_1))
; [eval] p2_9 && (!ret2_1 && !except2_1)
(push) ; 14
; [then-branch: 1114 | !(p2_9@346@01) | live]
; [else-branch: 1114 | p2_9@346@01 | live]
(push) ; 15
; [then-branch: 1114 | !(p2_9@346@01)]
(assert (not p2_9@346@01))
(pop) ; 15
(push) ; 15
; [else-branch: 1114 | p2_9@346@01]
; [eval] !ret2_1
(push) ; 16
; [then-branch: 1115 | False | live]
; [else-branch: 1115 | True | live]
(push) ; 17
; [then-branch: 1115 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 1115 | True]
; [eval] !except2_1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 1116 | !(p2_9@346@01) | dead]
; [else-branch: 1116 | p2_9@346@01 | live]
(push) ; 14
; [else-branch: 1116 | p2_9@346@01]
(pop) ; 14
(pop) ; 13
; [eval] !(p1_9 && (!ret1_1 && !except1_1))
; [eval] p1_9 && (!ret1_1 && !except1_1)
(push) ; 13
; [then-branch: 1117 | !(p1_9@345@01) | live]
; [else-branch: 1117 | p1_9@345@01 | live]
(push) ; 14
; [then-branch: 1117 | !(p1_9@345@01)]
(assert (not p1_9@345@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1117 | p1_9@345@01]
; [eval] !ret1_1
(push) ; 15
; [then-branch: 1118 | False | live]
; [else-branch: 1118 | True | live]
(push) ; 16
; [then-branch: 1118 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1118 | True]
; [eval] !except1_1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 1119 | !(p1_9@345@01) | dead]
; [else-branch: 1119 | p1_9@345@01 | live]
(push) ; 13
; [else-branch: 1119 | p1_9@345@01]
(pop) ; 13
(pop) ; 12
; [eval] !p2_9
(push) ; 12
(set-option :timeout 10)
(assert (not p2_9@346@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1120 | !(p2_9@346@01) | dead]
; [else-branch: 1120 | p2_9@346@01 | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 1120 | p2_9@346@01]
(assert p2_9@346@01)
(pop) ; 12
(pop) ; 11
; [eval] !p1_9
(push) ; 11
(set-option :timeout 10)
(assert (not p1_9@345@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1121 | !(p1_9@345@01) | dead]
; [else-branch: 1121 | p1_9@345@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 1121 | p1_9@345@01]
(assert p1_9@345@01)
(pop) ; 11
(pop) ; 10
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1122 | !(p2_8@337@01) | live]
; [else-branch: 1122 | p2_8@337@01 | live]
(push) ; 11
; [then-branch: 1122 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 11
(push) ; 11
; [else-branch: 1122 | p2_8@337@01]
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1123 | False | live]
; [else-branch: 1123 | True | live]
(push) ; 13
; [then-branch: 1123 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1123 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 1124 | !(p2_8@337@01) | dead]
; [else-branch: 1124 | p2_8@337@01 | live]
(push) ; 10
; [else-branch: 1124 | p2_8@337@01]
(pop) ; 10
(pop) ; 9
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 9
; [then-branch: 1125 | !(p1_8@336@01) | live]
; [else-branch: 1125 | p1_8@336@01 | live]
(push) ; 10
; [then-branch: 1125 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1125 | p1_8@336@01]
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1126 | False | live]
; [else-branch: 1126 | True | live]
(push) ; 12
; [then-branch: 1126 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1126 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 1127 | !(p1_8@336@01) | dead]
; [else-branch: 1127 | p1_8@336@01 | live]
(push) ; 9
; [else-branch: 1127 | p1_8@336@01]
(pop) ; 9
(pop) ; 8
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 8
; [then-branch: 1128 | !(p2_8@337@01) | live]
; [else-branch: 1128 | p2_8@337@01 | live]
(push) ; 9
; [then-branch: 1128 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1128 | p2_8@337@01]
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1129 | False | live]
; [else-branch: 1129 | True | live]
(push) ; 11
; [then-branch: 1129 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1129 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1130 | !(p2_8@337@01) | dead]
; [else-branch: 1130 | p2_8@337@01 | live]
(push) ; 8
; [else-branch: 1130 | p2_8@337@01]
(pop) ; 8
(pop) ; 7
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1131 | !(p1_8@336@01) | live]
; [else-branch: 1131 | p1_8@336@01 | live]
(push) ; 8
; [then-branch: 1131 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1131 | p1_8@336@01]
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1132 | False | live]
; [else-branch: 1132 | True | live]
(push) ; 10
; [then-branch: 1132 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1132 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1133 | !(p1_8@336@01) | dead]
; [else-branch: 1133 | p1_8@336@01 | live]
(push) ; 7
; [else-branch: 1133 | p1_8@336@01]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 1017 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 6
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 6
; [then-branch: 1134 | !(p2_8@337@01) | live]
; [else-branch: 1134 | p2_8@337@01 | live]
(push) ; 7
; [then-branch: 1134 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1134 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 8
; [then-branch: 1135 | False | live]
; [else-branch: 1135 | True | live]
(push) ; 9
; [then-branch: 1135 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 1135 | True]
; [eval] !except2_1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_8@337@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_8@337@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1136 | !(p2_8@337@01) | live]
; [else-branch: 1136 | p2_8@337@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1136 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1137 | !(p1_8@336@01) | live]
; [else-branch: 1137 | p1_8@336@01 | live]
(push) ; 8
; [then-branch: 1137 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1137 | p1_8@336@01]
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1138 | False | live]
; [else-branch: 1138 | True | live]
(push) ; 10
; [then-branch: 1138 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1138 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_8@336@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1139 | p1_8@336@01 | live]
; [else-branch: 1139 | !(p1_8@336@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1139 | p1_8@336@01]
; [exec]
; inhale typeof(MyException_res_1) == MyException()
(declare-const $t@356@01 $Snap)
(assert (= $t@356@01 $Snap.unit))
; [eval] typeof(MyException_res_1) == MyException()
; [eval] typeof(MyException_res_1)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_1@340@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_8 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1140 | !(p2_8@337@01) | live]
; [else-branch: 1140 | p2_8@337@01 | live]
(push) ; 9
; [then-branch: 1140 | !(p2_8@337@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1140 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1141 | False | live]
; [else-branch: 1141 | True | live]
(push) ; 11
; [then-branch: 1141 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1141 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1142 | p2_8@337@01 | dead]
; [else-branch: 1142 | !(p2_8@337@01) | live]
(push) ; 8
; [else-branch: 1142 | !(p2_8@337@01)]
(pop) ; 8
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 8
; [then-branch: 1143 | !(p2_8@337@01) | live]
; [else-branch: 1143 | p2_8@337@01 | live]
(push) ; 9
; [then-branch: 1143 | !(p2_8@337@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1143 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1144 | False | live]
; [else-branch: 1144 | True | live]
(push) ; 11
; [then-branch: 1144 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1144 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_8@337@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1145 | !(p2_8@337@01) | live]
; [else-branch: 1145 | p2_8@337@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1145 | !(p2_8@337@01)]
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 9
; [then-branch: 1146 | !(p1_8@336@01) | live]
; [else-branch: 1146 | p1_8@336@01 | live]
(push) ; 10
; [then-branch: 1146 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1146 | p1_8@336@01]
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1147 | False | live]
; [else-branch: 1147 | True | live]
(push) ; 12
; [then-branch: 1147 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1147 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_8@336@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1148 | p1_8@336@01 | live]
; [else-branch: 1148 | !(p1_8@336@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1148 | p1_8@336@01]
; [exec]
; _err := MyException_res_1
; [exec]
; except1_1 := true
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1149 | !(p2_8@337@01) | live]
; [else-branch: 1149 | p2_8@337@01 | live]
(push) ; 11
; [then-branch: 1149 | !(p2_8@337@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 1149 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1150 | False | live]
; [else-branch: 1150 | True | live]
(push) ; 13
; [then-branch: 1150 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1150 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 1151 | p2_8@337@01 | dead]
; [else-branch: 1151 | !(p2_8@337@01) | live]
(push) ; 10
; [else-branch: 1151 | !(p2_8@337@01)]
(pop) ; 10
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1152 | !(p2_8@337@01) | live]
; [else-branch: 1152 | p2_8@337@01 | live]
(push) ; 11
; [then-branch: 1152 | !(p2_8@337@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 1152 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1153 | False | live]
; [else-branch: 1153 | True | live]
(push) ; 13
; [then-branch: 1153 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1153 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_8@337@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1154 | !(p2_8@337@01) | live]
; [else-branch: 1154 | p2_8@337@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1154 | !(p2_8@337@01)]
; [exec]
; thisexcept1_1 := except1_1 && !bypass1_1
; [eval] except1_1 && !bypass1_1
(push) ; 11
; [then-branch: 1155 | False | live]
; [else-branch: 1155 | True | live]
(push) ; 12
; [then-branch: 1155 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1155 | True]
; [eval] !bypass1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_1@357@01 Bool)
(assert (= thisexcept1_1@357@01 (not bypass1_1@334@01)))
; [exec]
; thisexcept2_1 := except2_1 && !bypass2_1
; [eval] except2_1 && !bypass2_1
; [exec]
; p1_9 := p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
; [eval] p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 1156 | !(p1_7@270@01) | live]
; [else-branch: 1156 | p1_7@270@01 | live]
(push) ; 12
; [then-branch: 1156 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1156 | p1_7@270@01]
(push) ; 13
; [then-branch: 1157 | !(thisexcept1_1@357@01) | live]
; [else-branch: 1157 | thisexcept1_1@357@01 | live]
(push) ; 14
; [then-branch: 1157 | !(thisexcept1_1@357@01)]
(assert (not thisexcept1_1@357@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1157 | thisexcept1_1@357@01]
(assert thisexcept1_1@357@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_1@357@01 (not thisexcept1_1@357@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p1_7@270@01 (or thisexcept1_1@357@01 (not thisexcept1_1@357@01))))
(declare-const p1_9@358@01 Bool)
(assert (=
  p1_9@358@01
  (and
    p1_7@270@01
    (and
      thisexcept1_1@357@01
      (issubtype<Bool> (typeof<PyType> tmp_1@340@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_9 := p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
; [eval] p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
(push) ; 11
; [then-branch: 1158 | !(p2_7@271@01) | live]
; [else-branch: 1158 | p2_7@271@01 | live]
(push) ; 12
; [then-branch: 1158 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1158 | p2_7@271@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_9@358@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not p1_9@358@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1159 | p1_9@358@01 | live]
; [else-branch: 1159 | !(p1_9@358@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1159 | p1_9@358@01]
(assert p1_9@358@01)
; [exec]
; except1_1 := false
; [then-branch: 1160 | False | dead]
; [else-branch: 1160 | True | live]
(push) ; 12
; [else-branch: 1160 | True]
(pop) ; 12
; [eval] !p2_9
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1161 | True | live]
; [else-branch: 1161 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1161 | True]
; [eval] p1_9 && (!ret1_1 && !except1_1)
(push) ; 13
; [then-branch: 1162 | !(p1_9@358@01) | live]
; [else-branch: 1162 | p1_9@358@01 | live]
(push) ; 14
; [then-branch: 1162 | !(p1_9@358@01)]
(assert (not p1_9@358@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1162 | p1_9@358@01]
; [eval] !ret1_1
(push) ; 15
; [then-branch: 1163 | False | live]
; [else-branch: 1163 | True | live]
(push) ; 16
; [then-branch: 1163 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1163 | True]
; [eval] !except1_1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p1_9@358@01 (not p1_9@358@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_9@358@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1164 | p1_9@358@01 | live]
; [else-branch: 1164 | !(p1_9@358@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1164 | p1_9@358@01]
; [exec]
; x_2 := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const x_2@359@01 $Ref)
(assert (= x_2@359@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@360@01 $Snap)
(assert (= $t@360@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_9 && (!ret2_1 && !except2_1)
; [then-branch: 1165 | False | dead]
; [else-branch: 1165 | True | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1165 | True]
(pop) ; 14
; [eval] !(p2_9 && (!ret2_1 && !except2_1))
; [eval] p2_9 && (!ret2_1 && !except2_1)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1166 | True | live]
; [else-branch: 1166 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1166 | True]
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 15
; [then-branch: 1167 | !(p1_7@270@01) | live]
; [else-branch: 1167 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1167 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1167 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1168 | False | live]
; [else-branch: 1168 | True | live]
(push) ; 18
; [then-branch: 1168 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1168 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1169 | p1_7@270@01 | live]
; [else-branch: 1169 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1169 | p1_7@270@01]
; [exec]
; _err := null
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1170 | !(p2_7@271@01) | live]
; [else-branch: 1170 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1170 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1170 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1171 | False | live]
; [else-branch: 1171 | True | live]
(push) ; 19
; [then-branch: 1171 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1171 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1172 | p2_7@271@01 | live]
; [else-branch: 1172 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1172 | p2_7@271@01]
; [exec]
; _err_2 := null
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1173 | p1_7@270@01 | live]
; [else-branch: 1173 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1173 | p1_7@270@01]
; [exec]
; tmp_ret1_1 := ret1_1
; [exec]
; ret1_1 := oldret1_1
; [exec]
; tmp_except1_1 := except1_1
; [exec]
; except1_1 := oldexcept1_1
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1174 | p2_7@271@01 | live]
; [else-branch: 1174 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1174 | p2_7@271@01]
; [exec]
; tmp_ret2_1 := ret2_1
; [exec]
; ret2_1 := oldret2_1
; [exec]
; tmp_except2_1 := except2_1
; [exec]
; except2_1 := oldexcept2_1
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1175 | !(p1_7@270@01) | live]
; [else-branch: 1175 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1175 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1175 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1176 | False | live]
; [else-branch: 1176 | True | live]
(push) ; 22
; [then-branch: 1176 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1176 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1177 | p1_7@270@01 | live]
; [else-branch: 1177 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1177 | p1_7@270@01]
; [exec]
; x_2 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@359@01 3301240))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@359@01 3301240))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@359@01 3301240)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@359@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@359@01 3301240)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@359@01 3301240)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@359@01 3301240))))
(push) ; 20
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@359@01 3301240))))
(pop) ; 20
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@359@01 3301240))))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@359@01 3301240)))))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@359@01 3301240)))))
(declare-const x_2@361@01 $Ref)
(assert (=
  x_2@361@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@359@01 3301240))))))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 20
(pop) ; 20
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1178 | !(p2_7@271@01) | live]
; [else-branch: 1178 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1178 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1178 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1179 | False | live]
; [else-branch: 1179 | True | live]
(push) ; 23
; [then-branch: 1179 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1179 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1180 | p2_7@271@01 | live]
; [else-branch: 1180 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1180 | p2_7@271@01]
; [exec]
; x_2_0 := __prim__int___box__(int___mul__(2, int___unbox__(x_2_0)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(x_2_0)))
; [eval] int___mul__(2, int___unbox__(x_2_0))
; [eval] int___unbox__(x_2_0)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 22
(assert (not (issubtype<Bool> (typeof<PyType> x_2_0@332@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2_0@332@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_2_0@332@01))
(pop) ; 21
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_2_0@332@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_2_0@332@01)))
(push) ; 21
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@332@01)))
(pop) ; 21
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@332@01)))
(push) ; 21
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@332@01))))
(pop) ; 21
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@332@01))))
(declare-const x_2_0@363@01 $Ref)
(assert (=
  x_2_0@363@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@332@01)))))
; [exec]
; inhale true
(declare-const $t@364@01 $Snap)
(assert (= $t@364@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1181 | p1_7@270@01 | live]
; [else-branch: 1181 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1181 | p1_7@270@01]
; [exec]
; ret1_1 := ret1_1 || tmp_ret1_1
; [eval] ret1_1 || tmp_ret1_1
(push) ; 22
; [then-branch: 1182 | False | live]
; [else-branch: 1182 | True | live]
(push) ; 23
; [then-branch: 1182 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1182 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [exec]
; except1_1 := except1_1 || tmp_except1_1
; [eval] except1_1 || tmp_except1_1
(push) ; 22
; [then-branch: 1183 | False | live]
; [else-branch: 1183 | True | live]
(push) ; 23
; [then-branch: 1183 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1183 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1184 | p2_7@271@01 | live]
; [else-branch: 1184 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1184 | p2_7@271@01]
; [exec]
; ret2_1 := ret2_1 || tmp_ret2_1
; [eval] ret2_1 || tmp_ret2_1
(push) ; 23
; [then-branch: 1185 | False | live]
; [else-branch: 1185 | True | live]
(push) ; 24
; [then-branch: 1185 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1185 | True]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [exec]
; except2_1 := except2_1 || tmp_except2_1
; [eval] except2_1 || tmp_except2_1
(push) ; 23
; [then-branch: 1186 | False | live]
; [else-branch: 1186 | True | live]
(push) ; 24
; [then-branch: 1186 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1186 | True]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1187 | !(p1_7@270@01) | live]
; [else-branch: 1187 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1187 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1187 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1188 | False | live]
; [else-branch: 1188 | True | live]
(push) ; 26
; [then-branch: 1188 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1188 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1189 | p1_7@270@01 | live]
; [else-branch: 1189 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1189 | p1_7@270@01]
; [exec]
; _res := _checkDefined(x_2, 3301240)
; [eval] _checkDefined(x_2, 3301240)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@361@01 3301240))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@361@01 3301240))
(declare-const _res@365@01 $Ref)
(assert (= _res@365@01 (_checkDefined $Snap.unit x_2@361@01 3301240)))
; [exec]
; ret1_1 := true
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1190 | !(p2_7@271@01) | live]
; [else-branch: 1190 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1190 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1190 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1191 | False | live]
; [else-branch: 1191 | True | live]
(push) ; 27
; [then-branch: 1191 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1191 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1192 | p2_7@271@01 | live]
; [else-branch: 1192 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1192 | p2_7@271@01]
; [exec]
; _res_2 := x_2_0
; [exec]
; ret2_1 := true
; [exec]
; assert (p1_7 ==> !except1_1) && (p2_7 ==> !except2_1)
; [eval] p1_7 ==> !except1_1
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1193 | p1_7@270@01 | live]
; [else-branch: 1193 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1193 | p1_7@270@01]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> !except2_1
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1194 | p2_7@271@01 | live]
; [else-branch: 1194 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1194 | p2_7@271@01]
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> true
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1195 | p1_7@270@01 | live]
; [else-branch: 1195 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1195 | p1_7@270@01]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1196 | p2_7@271@01 | live]
; [else-branch: 1196 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1196 | p2_7@271@01]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), int())
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1197 | p1_7@270@01 | live]
; [else-branch: 1197 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1197 | p1_7@270@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@365@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@365@01) (as int<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_2), int())
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1198 | p2_7@271@01 | live]
; [else-branch: 1198 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1198 | p2_7@271@01]
; [eval] issubtype(typeof(_res_2), int())
; [eval] typeof(_res_2)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> x_2_0@363@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> x_2_0@363@01) (as int<PyType>  PyType))))
; [eval] p1_7 ==> bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1199 | p1_7@270@01 | live]
; [else-branch: 1199 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1199 | p1_7@270@01]
; [eval] bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1200 | bool___unbox__(_, b_1@278@01) | live]
; [else-branch: 1200 | !(bool___unbox__(_, b_1@278@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1200 | bool___unbox__(_, b_1@278@01)]
(assert (bool___unbox__ $Snap.unit b_1@278@01))
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 29
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> _res@365@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@365@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@365@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@365@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@365@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_1@278@01)
  (and
    (bool___unbox__ $Snap.unit b_1@278@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res@365@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@365@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_1@278@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (=>
      (bool___unbox__ $Snap.unit b_1@278@01)
      (and
        (bool___unbox__ $Snap.unit b_1@278@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res@365@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@365@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b_1@278@01))))
(push) ; 25
(assert (not (=>
  (and p1_7@270@01 (bool___unbox__ $Snap.unit b_1@278@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@365@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@270@01 (bool___unbox__ $Snap.unit b_1@278@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@365@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
; [eval] p2_7 ==> bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1201 | p2_7@271@01 | live]
; [else-branch: 1201 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1201 | p2_7@271@01]
; [eval] bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1_0)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1_0@279@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1202 | bool___unbox__(_, b_1_0@279@01) | dead]
; [else-branch: 1202 | !(bool___unbox__(_, b_1_0@279@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1202 | !(bool___unbox__(_, b_1_0@279@01))]
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01)
    (not (bool___unbox__ $Snap.unit b_1_0@279@01)))))
; [eval] p1_7 ==> !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1203 | p1_7@270@01 | live]
; [else-branch: 1203 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1203 | p1_7@270@01]
; [eval] !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1)
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1204 | !(bool___unbox__(_, b_1@278@01)) | dead]
; [else-branch: 1204 | bool___unbox__(_, b_1@278@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1204 | bool___unbox__(_, b_1@278@01)]
(assert (bool___unbox__ $Snap.unit b_1@278@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (bool___unbox__ $Snap.unit b_1@278@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (bool___unbox__ $Snap.unit b_1@278@01))))
; [eval] p2_7 ==> !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1205 | p2_7@271@01 | live]
; [else-branch: 1205 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1205 | p2_7@271@01]
; [eval] !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1_0)
; [eval] bool___unbox__(b_1_0)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1_0@279@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1206 | !(bool___unbox__(_, b_1_0@279@01)) | live]
; [else-branch: 1206 | bool___unbox__(_, b_1_0@279@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1206 | !(bool___unbox__(_, b_1_0@279@01))]
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
; [eval] int___eq__(_res_2, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 29
(pop) ; 29
; Joined path conditions
(push) ; 29
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> x_2_0@363@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2_0@363@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@363@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_2_0@363@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@363@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_1_0@279@01))
  (and
    (not (bool___unbox__ $Snap.unit b_1_0@279@01))
    (issubtype<Bool> (typeof<PyType> x_2_0@363@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@363@01 (__prim__int___box__ $Snap.unit 0)))))
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_1_0@279@01))
      (and
        (not (bool___unbox__ $Snap.unit b_1_0@279@01))
        (issubtype<Bool> (typeof<PyType> x_2_0@363@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@363@01 (__prim__int___box__ $Snap.unit 0))))
    (not (bool___unbox__ $Snap.unit b_1_0@279@01)))))
(push) ; 25
(assert (not (=>
  (and p2_7@271@01 (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_2_0@363@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_7@271@01 (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_2_0@363@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p1_7 ==> (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1207 | p1_7@270@01 | live]
; [else-branch: 1207 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1207 | p1_7@270@01]
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
(push) ; 27
; [then-branch: 1208 | False | live]
; [else-branch: 1208 | True | live]
(push) ; 28
; [then-branch: 1208 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1208 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
(push) ; 29
; [then-branch: 1209 | False | live]
; [else-branch: 1209 | True | live]
(push) ; 30
; [then-branch: 1209 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1209 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
(push) ; 31
; [then-branch: 1210 | False | live]
; [else-branch: 1210 | True | live]
(push) ; 32
; [then-branch: 1210 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1210 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1211 | p2_7@271@01 | live]
; [else-branch: 1211 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1211 | p2_7@271@01]
; [eval] (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false)
(push) ; 27
; [then-branch: 1212 | False | live]
; [else-branch: 1212 | True | live]
(push) ; 28
; [then-branch: 1212 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1212 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false)
(push) ; 29
; [then-branch: 1213 | False | live]
; [else-branch: 1213 | True | live]
(push) ; 30
; [then-branch: 1213 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1213 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false)
(push) ; 31
; [then-branch: 1214 | False | live]
; [else-branch: 1214 | True | live]
(push) ; 32
; [then-branch: 1214 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1214 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(pop) ; 24
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1215 | !(p2_7@271@01) | live]
; [else-branch: 1215 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1215 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1215 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1216 | False | live]
; [else-branch: 1216 | True | live]
(push) ; 27
; [then-branch: 1216 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1216 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1217 | !(p2_7@271@01) | dead]
; [else-branch: 1217 | p2_7@271@01 | live]
(push) ; 24
; [else-branch: 1217 | p2_7@271@01]
(pop) ; 24
(pop) ; 23
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1218 | !(p1_7@270@01) | live]
; [else-branch: 1218 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1218 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1218 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1219 | False | live]
; [else-branch: 1219 | True | live]
(push) ; 26
; [then-branch: 1219 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1219 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1220 | !(p1_7@270@01) | dead]
; [else-branch: 1220 | p1_7@270@01 | live]
(push) ; 23
; [else-branch: 1220 | p1_7@270@01]
(pop) ; 23
(pop) ; 22
; [eval] !p2_7
; [then-branch: 1221 | !(p2_7@271@01) | dead]
; [else-branch: 1221 | p2_7@271@01 | live]
(push) ; 22
; [else-branch: 1221 | p2_7@271@01]
(pop) ; 22
(pop) ; 21
; [eval] !p1_7
; [then-branch: 1222 | !(p1_7@270@01) | dead]
; [else-branch: 1222 | p1_7@270@01 | live]
(push) ; 21
; [else-branch: 1222 | p1_7@270@01]
(pop) ; 21
(pop) ; 20
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 20
; [then-branch: 1223 | !(p2_7@271@01) | live]
; [else-branch: 1223 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1223 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1223 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1224 | False | live]
; [else-branch: 1224 | True | live]
(push) ; 23
; [then-branch: 1224 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1224 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1225 | !(p2_7@271@01) | dead]
; [else-branch: 1225 | p2_7@271@01 | live]
(push) ; 20
; [else-branch: 1225 | p2_7@271@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1226 | !(p1_7@270@01) | live]
; [else-branch: 1226 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1226 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1226 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1227 | False | live]
; [else-branch: 1227 | True | live]
(push) ; 22
; [then-branch: 1227 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1227 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 1228 | !(p1_7@270@01) | dead]
; [else-branch: 1228 | p1_7@270@01 | live]
(push) ; 19
; [else-branch: 1228 | p1_7@270@01]
(pop) ; 19
(pop) ; 18
; [eval] !p2_7
; [then-branch: 1229 | !(p2_7@271@01) | dead]
; [else-branch: 1229 | p2_7@271@01 | live]
(push) ; 18
; [else-branch: 1229 | p2_7@271@01]
(pop) ; 18
(pop) ; 17
; [eval] !p1_7
; [then-branch: 1230 | !(p1_7@270@01) | dead]
; [else-branch: 1230 | p1_7@270@01 | live]
(push) ; 17
; [else-branch: 1230 | p1_7@270@01]
(pop) ; 17
(pop) ; 16
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1231 | !(p2_7@271@01) | live]
; [else-branch: 1231 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1231 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1231 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1232 | False | live]
; [else-branch: 1232 | True | live]
(push) ; 19
; [then-branch: 1232 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1232 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 1233 | !(p2_7@271@01) | dead]
; [else-branch: 1233 | p2_7@271@01 | live]
(push) ; 16
; [else-branch: 1233 | p2_7@271@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 15
; [then-branch: 1234 | !(p1_7@270@01) | live]
; [else-branch: 1234 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1234 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1234 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1235 | False | live]
; [else-branch: 1235 | True | live]
(push) ; 18
; [then-branch: 1235 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1235 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 1236 | !(p1_7@270@01) | dead]
; [else-branch: 1236 | p1_7@270@01 | live]
(push) ; 15
; [else-branch: 1236 | p1_7@270@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !(p1_9 && (!ret1_1 && !except1_1))
; [eval] p1_9 && (!ret1_1 && !except1_1)
(push) ; 13
; [then-branch: 1237 | !(p1_9@358@01) | live]
; [else-branch: 1237 | p1_9@358@01 | live]
(push) ; 14
; [then-branch: 1237 | !(p1_9@358@01)]
(assert (not p1_9@358@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1237 | p1_9@358@01]
; [eval] !ret1_1
(push) ; 15
; [then-branch: 1238 | False | live]
; [else-branch: 1238 | True | live]
(push) ; 16
; [then-branch: 1238 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1238 | True]
; [eval] !except1_1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 1239 | !(p1_9@358@01) | dead]
; [else-branch: 1239 | p1_9@358@01 | live]
(push) ; 13
; [else-branch: 1239 | p1_9@358@01]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !p1_9
(push) ; 11
(set-option :timeout 10)
(assert (not p1_9@358@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1240 | !(p1_9@358@01) | dead]
; [else-branch: 1240 | p1_9@358@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 1240 | p1_9@358@01]
(assert p1_9@358@01)
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 9
; [then-branch: 1241 | !(p1_8@336@01) | live]
; [else-branch: 1241 | p1_8@336@01 | live]
(push) ; 10
; [then-branch: 1241 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1241 | p1_8@336@01]
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1242 | False | live]
; [else-branch: 1242 | True | live]
(push) ; 12
; [then-branch: 1242 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1242 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 1243 | !(p1_8@336@01) | dead]
; [else-branch: 1243 | p1_8@336@01 | live]
(push) ; 9
; [else-branch: 1243 | p1_8@336@01]
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1244 | !(p1_8@336@01) | live]
; [else-branch: 1244 | p1_8@336@01 | live]
(push) ; 8
; [then-branch: 1244 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1244 | p1_8@336@01]
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1245 | False | live]
; [else-branch: 1245 | True | live]
(push) ; 10
; [then-branch: 1245 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1245 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1246 | !(p1_8@336@01) | dead]
; [else-branch: 1246 | p1_8@336@01 | live]
(push) ; 7
; [else-branch: 1246 | p1_8@336@01]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 1136 | p2_8@337@01]
(assert p2_8@337@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 1014 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 5
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 5
; [then-branch: 1247 | !(p1_8@336@01) | live]
; [else-branch: 1247 | p1_8@336@01 | live]
(push) ; 6
; [then-branch: 1247 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1247 | p1_8@336@01]
(assert p1_8@336@01)
; [eval] !ret1_1
(push) ; 7
; [then-branch: 1248 | False | live]
; [else-branch: 1248 | True | live]
(push) ; 8
; [then-branch: 1248 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1248 | True]
; [eval] !except1_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_8@336@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_8@336@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1249 | !(p1_8@336@01) | live]
; [else-branch: 1249 | p1_8@336@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1249 | !(p1_8@336@01)]
(assert (not p1_8@336@01))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 6
; [then-branch: 1250 | !(p2_8@337@01) | live]
; [else-branch: 1250 | p2_8@337@01 | live]
(push) ; 7
; [then-branch: 1250 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1250 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 8
; [then-branch: 1251 | False | live]
; [else-branch: 1251 | True | live]
(push) ; 9
; [then-branch: 1251 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 1251 | True]
; [eval] !except2_1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_8@337@01 (not p2_8@337@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_8@337@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_8@337@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1252 | p2_8@337@01 | live]
; [else-branch: 1252 | !(p2_8@337@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1252 | p2_8@337@01]
(assert p2_8@337@01)
; [exec]
; MyException_res_1_0 := tmp_1
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1253 | !(p1_8@336@01) | live]
; [else-branch: 1253 | p1_8@336@01 | live]
(push) ; 8
; [then-branch: 1253 | !(p1_8@336@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1253 | p1_8@336@01]
(assert p1_8@336@01)
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1254 | False | live]
; [else-branch: 1254 | True | live]
(push) ; 10
; [then-branch: 1254 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1254 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1255 | p1_8@336@01 | dead]
; [else-branch: 1255 | !(p1_8@336@01) | live]
(push) ; 7
; [else-branch: 1255 | !(p1_8@336@01)]
(pop) ; 7
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1256 | !(p1_8@336@01) | live]
; [else-branch: 1256 | p1_8@336@01 | live]
(push) ; 8
; [then-branch: 1256 | !(p1_8@336@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1256 | p1_8@336@01]
(assert p1_8@336@01)
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1257 | False | live]
; [else-branch: 1257 | True | live]
(push) ; 10
; [then-branch: 1257 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1257 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_8@336@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1258 | !(p1_8@336@01) | live]
; [else-branch: 1258 | p1_8@336@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1258 | !(p1_8@336@01)]
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 8
; [then-branch: 1259 | !(p2_8@337@01) | live]
; [else-branch: 1259 | p2_8@337@01 | live]
(push) ; 9
; [then-branch: 1259 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1259 | p2_8@337@01]
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1260 | False | live]
; [else-branch: 1260 | True | live]
(push) ; 11
; [then-branch: 1260 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1260 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_8@337@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1261 | p2_8@337@01 | live]
; [else-branch: 1261 | !(p2_8@337@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1261 | p2_8@337@01]
; [exec]
; inhale typeof(MyException_res_1_0) == MyException()
(declare-const $t@366@01 $Snap)
(assert (= $t@366@01 $Snap.unit))
; [eval] typeof(MyException_res_1_0) == MyException()
; [eval] typeof(MyException_res_1_0)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_1@340@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_8 && (!ret1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1262 | !(p1_8@336@01) | live]
; [else-branch: 1262 | p1_8@336@01 | live]
(push) ; 10
; [then-branch: 1262 | !(p1_8@336@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 1262 | p1_8@336@01]
(assert p1_8@336@01)
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1263 | False | live]
; [else-branch: 1263 | True | live]
(push) ; 12
; [then-branch: 1263 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1263 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 1264 | p1_8@336@01 | dead]
; [else-branch: 1264 | !(p1_8@336@01) | live]
(push) ; 9
; [else-branch: 1264 | !(p1_8@336@01)]
(pop) ; 9
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 9
; [then-branch: 1265 | !(p1_8@336@01) | live]
; [else-branch: 1265 | p1_8@336@01 | live]
(push) ; 10
; [then-branch: 1265 | !(p1_8@336@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 1265 | p1_8@336@01]
(assert p1_8@336@01)
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1266 | False | live]
; [else-branch: 1266 | True | live]
(push) ; 12
; [then-branch: 1266 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1266 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_8@336@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1267 | !(p1_8@336@01) | live]
; [else-branch: 1267 | p1_8@336@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1267 | !(p1_8@336@01)]
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1268 | !(p2_8@337@01) | live]
; [else-branch: 1268 | p2_8@337@01 | live]
(push) ; 11
; [then-branch: 1268 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 11
(push) ; 11
; [else-branch: 1268 | p2_8@337@01]
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1269 | False | live]
; [else-branch: 1269 | True | live]
(push) ; 13
; [then-branch: 1269 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1269 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_8@337@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1270 | p2_8@337@01 | live]
; [else-branch: 1270 | !(p2_8@337@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1270 | p2_8@337@01]
; [exec]
; _err_2 := MyException_res_1_0
; [exec]
; except2_1 := true
; [exec]
; thisexcept1_1 := except1_1 && !bypass1_1
; [eval] except1_1 && !bypass1_1
; [exec]
; thisexcept2_1 := except2_1 && !bypass2_1
; [eval] except2_1 && !bypass2_1
(push) ; 11
; [then-branch: 1271 | False | live]
; [else-branch: 1271 | True | live]
(push) ; 12
; [then-branch: 1271 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1271 | True]
; [eval] !bypass2_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_1@367@01 Bool)
(assert (= thisexcept2_1@367@01 (not bypass2_1@335@01)))
; [exec]
; p1_9 := p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
; [eval] p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 1272 | !(p1_7@270@01) | live]
; [else-branch: 1272 | p1_7@270@01 | live]
(push) ; 12
; [then-branch: 1272 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1272 | p1_7@270@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [exec]
; p2_9 := p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
; [eval] p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
(push) ; 11
; [then-branch: 1273 | !(p2_7@271@01) | live]
; [else-branch: 1273 | p2_7@271@01 | live]
(push) ; 12
; [then-branch: 1273 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1273 | p2_7@271@01]
(push) ; 13
; [then-branch: 1274 | !(thisexcept2_1@367@01) | live]
; [else-branch: 1274 | thisexcept2_1@367@01 | live]
(push) ; 14
; [then-branch: 1274 | !(thisexcept2_1@367@01)]
(assert (not thisexcept2_1@367@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1274 | thisexcept2_1@367@01]
(assert thisexcept2_1@367@01)
; [eval] issubtype(typeof(_err_2), MyException())
; [eval] typeof(_err_2)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_1@367@01 (not thisexcept2_1@367@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p2_7@271@01 (or thisexcept2_1@367@01 (not thisexcept2_1@367@01))))
(declare-const p2_9@368@01 Bool)
(assert (=
  p2_9@368@01
  (and
    p2_7@271@01
    (and
      thisexcept2_1@367@01
      (issubtype<Bool> (typeof<PyType> tmp_1@340@01) (as MyException<PyType>  PyType))))))
; [then-branch: 1275 | False | dead]
; [else-branch: 1275 | True | live]
(push) ; 11
; [else-branch: 1275 | True]
(pop) ; 11
; [eval] !p1_9
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1276 | True | live]
; [else-branch: 1276 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1276 | True]
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_9@368@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not p2_9@368@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1277 | p2_9@368@01 | live]
; [else-branch: 1277 | !(p2_9@368@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1277 | p2_9@368@01]
(assert p2_9@368@01)
; [exec]
; except2_1 := false
; [eval] p1_9 && (!ret1_1 && !except1_1)
; [then-branch: 1278 | False | dead]
; [else-branch: 1278 | True | live]
(push) ; 13
; [else-branch: 1278 | True]
(pop) ; 13
; [eval] !(p1_9 && (!ret1_1 && !except1_1))
; [eval] p1_9 && (!ret1_1 && !except1_1)
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1279 | True | live]
; [else-branch: 1279 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1279 | True]
; [eval] p2_9 && (!ret2_1 && !except2_1)
(push) ; 14
; [then-branch: 1280 | !(p2_9@368@01) | live]
; [else-branch: 1280 | p2_9@368@01 | live]
(push) ; 15
; [then-branch: 1280 | !(p2_9@368@01)]
(assert (not p2_9@368@01))
(pop) ; 15
(push) ; 15
; [else-branch: 1280 | p2_9@368@01]
; [eval] !ret2_1
(push) ; 16
; [then-branch: 1281 | False | live]
; [else-branch: 1281 | True | live]
(push) ; 17
; [then-branch: 1281 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 1281 | True]
; [eval] !except2_1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p2_9@368@01 (not p2_9@368@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@368@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1282 | p2_9@368@01 | live]
; [else-branch: 1282 | !(p2_9@368@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1282 | p2_9@368@01]
; [exec]
; x_2_0 := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const x_2_0@369@01 $Ref)
(assert (= x_2_0@369@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; inhale true
(declare-const $t@370@01 $Snap)
(assert (= $t@370@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_7 && (!ret1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1283 | !(p1_7@270@01) | live]
; [else-branch: 1283 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1283 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1283 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1284 | False | live]
; [else-branch: 1284 | True | live]
(push) ; 18
; [then-branch: 1284 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1284 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1285 | p1_7@270@01 | live]
; [else-branch: 1285 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1285 | p1_7@270@01]
; [exec]
; _err := null
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1286 | !(p2_7@271@01) | live]
; [else-branch: 1286 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1286 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1286 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1287 | False | live]
; [else-branch: 1287 | True | live]
(push) ; 19
; [then-branch: 1287 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1287 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1288 | p2_7@271@01 | live]
; [else-branch: 1288 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1288 | p2_7@271@01]
; [exec]
; _err_2 := null
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1289 | p1_7@270@01 | live]
; [else-branch: 1289 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1289 | p1_7@270@01]
; [exec]
; tmp_ret1_1 := ret1_1
; [exec]
; ret1_1 := oldret1_1
; [exec]
; tmp_except1_1 := except1_1
; [exec]
; except1_1 := oldexcept1_1
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1290 | p2_7@271@01 | live]
; [else-branch: 1290 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1290 | p2_7@271@01]
; [exec]
; tmp_ret2_1 := ret2_1
; [exec]
; ret2_1 := oldret2_1
; [exec]
; tmp_except2_1 := except2_1
; [exec]
; except2_1 := oldexcept2_1
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1291 | !(p1_7@270@01) | live]
; [else-branch: 1291 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1291 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1291 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1292 | False | live]
; [else-branch: 1292 | True | live]
(push) ; 22
; [then-branch: 1292 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1292 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1293 | p1_7@270@01 | live]
; [else-branch: 1293 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1293 | p1_7@270@01]
; [exec]
; x_2 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@330@01 3301240))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@330@01 3301240))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@330@01 3301240)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@330@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@330@01 3301240)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))
(push) ; 20
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))
(pop) ; 20
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240)))))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240)))))
(declare-const x_2@371@01 $Ref)
(assert (=
  x_2@371@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@372@01 $Snap)
(assert (= $t@372@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 20
(pop) ; 20
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1294 | !(p2_7@271@01) | live]
; [else-branch: 1294 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1294 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1294 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1295 | False | live]
; [else-branch: 1295 | True | live]
(push) ; 23
; [then-branch: 1295 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1295 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1296 | p2_7@271@01 | live]
; [else-branch: 1296 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1296 | p2_7@271@01]
; [exec]
; x_2_0 := __prim__int___box__(int___mul__(2, int___unbox__(x_2_0)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(x_2_0)))
; [eval] int___mul__(2, int___unbox__(x_2_0))
; [eval] int___unbox__(x_2_0)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 22
(assert (not (issubtype<Bool> (typeof<PyType> x_2_0@369@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2_0@369@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_2_0@369@01))
(pop) ; 21
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_2_0@369@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_2_0@369@01)))
(push) ; 21
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@369@01)))
(pop) ; 21
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@369@01)))
(push) ; 21
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@369@01))))
(pop) ; 21
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@369@01))))
(declare-const x_2_0@373@01 $Ref)
(assert (=
  x_2_0@373@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@369@01)))))
; [exec]
; inhale true
(declare-const $t@374@01 $Snap)
(assert (= $t@374@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1297 | p1_7@270@01 | live]
; [else-branch: 1297 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1297 | p1_7@270@01]
; [exec]
; ret1_1 := ret1_1 || tmp_ret1_1
; [eval] ret1_1 || tmp_ret1_1
(push) ; 22
; [then-branch: 1298 | False | live]
; [else-branch: 1298 | True | live]
(push) ; 23
; [then-branch: 1298 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1298 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [exec]
; except1_1 := except1_1 || tmp_except1_1
; [eval] except1_1 || tmp_except1_1
(push) ; 22
; [then-branch: 1299 | False | live]
; [else-branch: 1299 | True | live]
(push) ; 23
; [then-branch: 1299 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1299 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1300 | p2_7@271@01 | live]
; [else-branch: 1300 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1300 | p2_7@271@01]
; [exec]
; ret2_1 := ret2_1 || tmp_ret2_1
; [eval] ret2_1 || tmp_ret2_1
(push) ; 23
; [then-branch: 1301 | False | live]
; [else-branch: 1301 | True | live]
(push) ; 24
; [then-branch: 1301 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1301 | True]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [exec]
; except2_1 := except2_1 || tmp_except2_1
; [eval] except2_1 || tmp_except2_1
(push) ; 23
; [then-branch: 1302 | False | live]
; [else-branch: 1302 | True | live]
(push) ; 24
; [then-branch: 1302 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1302 | True]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1303 | !(p1_7@270@01) | live]
; [else-branch: 1303 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1303 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1303 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1304 | False | live]
; [else-branch: 1304 | True | live]
(push) ; 26
; [then-branch: 1304 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1304 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1305 | p1_7@270@01 | live]
; [else-branch: 1305 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1305 | p1_7@270@01]
; [exec]
; _res := _checkDefined(x_2, 3301240)
; [eval] _checkDefined(x_2, 3301240)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@371@01 3301240))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@371@01 3301240))
(declare-const _res@375@01 $Ref)
(assert (= _res@375@01 (_checkDefined $Snap.unit x_2@371@01 3301240)))
; [exec]
; ret1_1 := true
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1306 | !(p2_7@271@01) | live]
; [else-branch: 1306 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1306 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1306 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1307 | False | live]
; [else-branch: 1307 | True | live]
(push) ; 27
; [then-branch: 1307 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1307 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1308 | p2_7@271@01 | live]
; [else-branch: 1308 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1308 | p2_7@271@01]
; [exec]
; _res_2 := x_2_0
; [exec]
; ret2_1 := true
; [exec]
; assert (p1_7 ==> !except1_1) && (p2_7 ==> !except2_1)
; [eval] p1_7 ==> !except1_1
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1309 | p1_7@270@01 | live]
; [else-branch: 1309 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1309 | p1_7@270@01]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> !except2_1
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1310 | p2_7@271@01 | live]
; [else-branch: 1310 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1310 | p2_7@271@01]
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> true
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1311 | p1_7@270@01 | live]
; [else-branch: 1311 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1311 | p1_7@270@01]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1312 | p2_7@271@01 | live]
; [else-branch: 1312 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1312 | p2_7@271@01]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), int())
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1313 | p1_7@270@01 | live]
; [else-branch: 1313 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1313 | p1_7@270@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@375@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@375@01) (as int<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_2), int())
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1314 | p2_7@271@01 | live]
; [else-branch: 1314 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1314 | p2_7@271@01]
; [eval] issubtype(typeof(_res_2), int())
; [eval] typeof(_res_2)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> x_2_0@373@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> x_2_0@373@01) (as int<PyType>  PyType))))
; [eval] p1_7 ==> bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1315 | p1_7@270@01 | live]
; [else-branch: 1315 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1315 | p1_7@270@01]
; [eval] bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1316 | bool___unbox__(_, b_1@278@01) | dead]
; [else-branch: 1316 | !(bool___unbox__(_, b_1@278@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1316 | !(bool___unbox__(_, b_1@278@01))]
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (not (bool___unbox__ $Snap.unit b_1@278@01)))))
; [eval] p2_7 ==> bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1317 | p2_7@271@01 | live]
; [else-branch: 1317 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1317 | p2_7@271@01]
; [eval] bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1_0)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1_0@279@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1318 | bool___unbox__(_, b_1_0@279@01) | live]
; [else-branch: 1318 | !(bool___unbox__(_, b_1_0@279@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1318 | bool___unbox__(_, b_1_0@279@01)]
(assert (bool___unbox__ $Snap.unit b_1_0@279@01))
; [eval] int___eq__(_res_2, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 29
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> x_2_0@373@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2_0@373@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@373@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_2_0@373@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@373@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_1_0@279@01)
  (and
    (bool___unbox__ $Snap.unit b_1_0@279@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> x_2_0@373@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@373@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_1_0@279@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01)
    (=>
      (bool___unbox__ $Snap.unit b_1_0@279@01)
      (and
        (bool___unbox__ $Snap.unit b_1_0@279@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> x_2_0@373@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@373@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b_1_0@279@01))))
(push) ; 25
(assert (not (=>
  (and p2_7@271@01 (bool___unbox__ $Snap.unit b_1_0@279@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_2_0@373@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_7@271@01 (bool___unbox__ $Snap.unit b_1_0@279@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_2_0@373@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
; [eval] p1_7 ==> !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1319 | p1_7@270@01 | live]
; [else-branch: 1319 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1319 | p1_7@270@01]
; [eval] !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1)
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1320 | !(bool___unbox__(_, b_1@278@01)) | live]
; [else-branch: 1320 | bool___unbox__(_, b_1@278@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1320 | !(bool___unbox__(_, b_1@278@01))]
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
; [eval] int___eq__(_res, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 29
(pop) ; 29
; Joined path conditions
(push) ; 29
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> _res@375@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@375@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@375@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@375@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@375@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_1@278@01))
  (and
    (not (bool___unbox__ $Snap.unit b_1@278@01))
    (issubtype<Bool> (typeof<PyType> _res@375@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@375@01 (__prim__int___box__ $Snap.unit 0)))))
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_1@278@01))
      (and
        (not (bool___unbox__ $Snap.unit b_1@278@01))
        (issubtype<Bool> (typeof<PyType> _res@375@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@375@01 (__prim__int___box__ $Snap.unit 0))))
    (not (bool___unbox__ $Snap.unit b_1@278@01)))))
(push) ; 25
(assert (not (=>
  (and p1_7@270@01 (not (bool___unbox__ $Snap.unit b_1@278@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@375@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@270@01 (not (bool___unbox__ $Snap.unit b_1@278@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@375@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_7 ==> !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1321 | p2_7@271@01 | live]
; [else-branch: 1321 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1321 | p2_7@271@01]
; [eval] !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1_0)
; [eval] bool___unbox__(b_1_0)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1322 | !(bool___unbox__(_, b_1_0@279@01)) | dead]
; [else-branch: 1322 | bool___unbox__(_, b_1_0@279@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1322 | bool___unbox__(_, b_1_0@279@01)]
(assert (bool___unbox__ $Snap.unit b_1_0@279@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (bool___unbox__ $Snap.unit b_1_0@279@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01)
    (bool___unbox__ $Snap.unit b_1_0@279@01))))
; [eval] p1_7 ==> (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1323 | p1_7@270@01 | live]
; [else-branch: 1323 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1323 | p1_7@270@01]
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
(push) ; 27
; [then-branch: 1324 | False | live]
; [else-branch: 1324 | True | live]
(push) ; 28
; [then-branch: 1324 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1324 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
(push) ; 29
; [then-branch: 1325 | False | live]
; [else-branch: 1325 | True | live]
(push) ; 30
; [then-branch: 1325 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1325 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
(push) ; 31
; [then-branch: 1326 | False | live]
; [else-branch: 1326 | True | live]
(push) ; 32
; [then-branch: 1326 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1326 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1327 | p2_7@271@01 | live]
; [else-branch: 1327 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1327 | p2_7@271@01]
; [eval] (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false)
(push) ; 27
; [then-branch: 1328 | False | live]
; [else-branch: 1328 | True | live]
(push) ; 28
; [then-branch: 1328 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1328 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false)
(push) ; 29
; [then-branch: 1329 | False | live]
; [else-branch: 1329 | True | live]
(push) ; 30
; [then-branch: 1329 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1329 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false)
(push) ; 31
; [then-branch: 1330 | False | live]
; [else-branch: 1330 | True | live]
(push) ; 32
; [then-branch: 1330 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1330 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(pop) ; 24
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1331 | !(p2_7@271@01) | live]
; [else-branch: 1331 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1331 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1331 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1332 | False | live]
; [else-branch: 1332 | True | live]
(push) ; 27
; [then-branch: 1332 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1332 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1333 | !(p2_7@271@01) | dead]
; [else-branch: 1333 | p2_7@271@01 | live]
(push) ; 24
; [else-branch: 1333 | p2_7@271@01]
(pop) ; 24
(pop) ; 23
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1334 | !(p1_7@270@01) | live]
; [else-branch: 1334 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1334 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1334 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1335 | False | live]
; [else-branch: 1335 | True | live]
(push) ; 26
; [then-branch: 1335 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1335 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1336 | !(p1_7@270@01) | dead]
; [else-branch: 1336 | p1_7@270@01 | live]
(push) ; 23
; [else-branch: 1336 | p1_7@270@01]
(pop) ; 23
(pop) ; 22
; [eval] !p2_7
; [then-branch: 1337 | !(p2_7@271@01) | dead]
; [else-branch: 1337 | p2_7@271@01 | live]
(push) ; 22
; [else-branch: 1337 | p2_7@271@01]
(pop) ; 22
(pop) ; 21
; [eval] !p1_7
; [then-branch: 1338 | !(p1_7@270@01) | dead]
; [else-branch: 1338 | p1_7@270@01 | live]
(push) ; 21
; [else-branch: 1338 | p1_7@270@01]
(pop) ; 21
(pop) ; 20
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 20
; [then-branch: 1339 | !(p2_7@271@01) | live]
; [else-branch: 1339 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1339 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1339 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1340 | False | live]
; [else-branch: 1340 | True | live]
(push) ; 23
; [then-branch: 1340 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1340 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1341 | !(p2_7@271@01) | dead]
; [else-branch: 1341 | p2_7@271@01 | live]
(push) ; 20
; [else-branch: 1341 | p2_7@271@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1342 | !(p1_7@270@01) | live]
; [else-branch: 1342 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1342 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1342 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1343 | False | live]
; [else-branch: 1343 | True | live]
(push) ; 22
; [then-branch: 1343 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1343 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 1344 | !(p1_7@270@01) | dead]
; [else-branch: 1344 | p1_7@270@01 | live]
(push) ; 19
; [else-branch: 1344 | p1_7@270@01]
(pop) ; 19
(pop) ; 18
; [eval] !p2_7
; [then-branch: 1345 | !(p2_7@271@01) | dead]
; [else-branch: 1345 | p2_7@271@01 | live]
(push) ; 18
; [else-branch: 1345 | p2_7@271@01]
(pop) ; 18
(pop) ; 17
; [eval] !p1_7
; [then-branch: 1346 | !(p1_7@270@01) | dead]
; [else-branch: 1346 | p1_7@270@01 | live]
(push) ; 17
; [else-branch: 1346 | p1_7@270@01]
(pop) ; 17
(pop) ; 16
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1347 | !(p2_7@271@01) | live]
; [else-branch: 1347 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1347 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1347 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1348 | False | live]
; [else-branch: 1348 | True | live]
(push) ; 19
; [then-branch: 1348 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1348 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 1349 | !(p2_7@271@01) | dead]
; [else-branch: 1349 | p2_7@271@01 | live]
(push) ; 16
; [else-branch: 1349 | p2_7@271@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 15
; [then-branch: 1350 | !(p1_7@270@01) | live]
; [else-branch: 1350 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1350 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1350 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1351 | False | live]
; [else-branch: 1351 | True | live]
(push) ; 18
; [then-branch: 1351 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1351 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 1352 | !(p1_7@270@01) | dead]
; [else-branch: 1352 | p1_7@270@01 | live]
(push) ; 15
; [else-branch: 1352 | p1_7@270@01]
(pop) ; 15
(pop) ; 14
; [eval] !(p2_9 && (!ret2_1 && !except2_1))
; [eval] p2_9 && (!ret2_1 && !except2_1)
(push) ; 14
; [then-branch: 1353 | !(p2_9@368@01) | live]
; [else-branch: 1353 | p2_9@368@01 | live]
(push) ; 15
; [then-branch: 1353 | !(p2_9@368@01)]
(assert (not p2_9@368@01))
(pop) ; 15
(push) ; 15
; [else-branch: 1353 | p2_9@368@01]
; [eval] !ret2_1
(push) ; 16
; [then-branch: 1354 | False | live]
; [else-branch: 1354 | True | live]
(push) ; 17
; [then-branch: 1354 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 1354 | True]
; [eval] !except2_1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 1355 | !(p2_9@368@01) | dead]
; [else-branch: 1355 | p2_9@368@01 | live]
(push) ; 14
; [else-branch: 1355 | p2_9@368@01]
(pop) ; 14
(pop) ; 13
(pop) ; 12
; [eval] !p2_9
(push) ; 12
(set-option :timeout 10)
(assert (not p2_9@368@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1356 | !(p2_9@368@01) | dead]
; [else-branch: 1356 | p2_9@368@01 | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 1356 | p2_9@368@01]
(assert p2_9@368@01)
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1357 | !(p2_8@337@01) | live]
; [else-branch: 1357 | p2_8@337@01 | live]
(push) ; 11
; [then-branch: 1357 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 11
(push) ; 11
; [else-branch: 1357 | p2_8@337@01]
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1358 | False | live]
; [else-branch: 1358 | True | live]
(push) ; 13
; [then-branch: 1358 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1358 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 1359 | !(p2_8@337@01) | dead]
; [else-branch: 1359 | p2_8@337@01 | live]
(push) ; 10
; [else-branch: 1359 | p2_8@337@01]
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 8
; [then-branch: 1360 | !(p2_8@337@01) | live]
; [else-branch: 1360 | p2_8@337@01 | live]
(push) ; 9
; [then-branch: 1360 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1360 | p2_8@337@01]
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1361 | False | live]
; [else-branch: 1361 | True | live]
(push) ; 11
; [then-branch: 1361 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1361 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1362 | !(p2_8@337@01) | dead]
; [else-branch: 1362 | p2_8@337@01 | live]
(push) ; 8
; [else-branch: 1362 | p2_8@337@01]
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 1252 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 6
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 6
; [then-branch: 1363 | !(p2_8@337@01) | live]
; [else-branch: 1363 | p2_8@337@01 | live]
(push) ; 7
; [then-branch: 1363 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1363 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 8
; [then-branch: 1364 | False | live]
; [else-branch: 1364 | True | live]
(push) ; 9
; [then-branch: 1364 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 1364 | True]
; [eval] !except2_1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_8@337@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_8@337@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1365 | !(p2_8@337@01) | live]
; [else-branch: 1365 | p2_8@337@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1365 | !(p2_8@337@01)]
(assert (not p2_8@337@01))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1366 | !(p1_8@336@01) | live]
; [else-branch: 1366 | p1_8@336@01 | live]
(push) ; 8
; [then-branch: 1366 | !(p1_8@336@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1366 | p1_8@336@01]
(assert p1_8@336@01)
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1367 | False | live]
; [else-branch: 1367 | True | live]
(push) ; 10
; [then-branch: 1367 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1367 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1368 | p1_8@336@01 | dead]
; [else-branch: 1368 | !(p1_8@336@01) | live]
(push) ; 7
; [else-branch: 1368 | !(p1_8@336@01)]
(pop) ; 7
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1369 | !(p1_8@336@01) | live]
; [else-branch: 1369 | p1_8@336@01 | live]
(push) ; 8
; [then-branch: 1369 | !(p1_8@336@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1369 | p1_8@336@01]
(assert p1_8@336@01)
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1370 | False | live]
; [else-branch: 1370 | True | live]
(push) ; 10
; [then-branch: 1370 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1370 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_8@336@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1371 | !(p1_8@336@01) | live]
; [else-branch: 1371 | p1_8@336@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1371 | !(p1_8@336@01)]
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 8
; [then-branch: 1372 | !(p2_8@337@01) | live]
; [else-branch: 1372 | p2_8@337@01 | live]
(push) ; 9
; [then-branch: 1372 | !(p2_8@337@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1372 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1373 | False | live]
; [else-branch: 1373 | True | live]
(push) ; 11
; [then-branch: 1373 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1373 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1374 | p2_8@337@01 | dead]
; [else-branch: 1374 | !(p2_8@337@01) | live]
(push) ; 8
; [else-branch: 1374 | !(p2_8@337@01)]
(pop) ; 8
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 8
; [then-branch: 1375 | !(p2_8@337@01) | live]
; [else-branch: 1375 | p2_8@337@01 | live]
(push) ; 9
; [then-branch: 1375 | !(p2_8@337@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1375 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1376 | False | live]
; [else-branch: 1376 | True | live]
(push) ; 11
; [then-branch: 1376 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1376 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_8@337@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1377 | !(p2_8@337@01) | live]
; [else-branch: 1377 | p2_8@337@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1377 | !(p2_8@337@01)]
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 9
; [then-branch: 1378 | !(p1_8@336@01) | live]
; [else-branch: 1378 | p1_8@336@01 | live]
(push) ; 10
; [then-branch: 1378 | !(p1_8@336@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 1378 | p1_8@336@01]
(assert p1_8@336@01)
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1379 | False | live]
; [else-branch: 1379 | True | live]
(push) ; 12
; [then-branch: 1379 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1379 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 1380 | p1_8@336@01 | dead]
; [else-branch: 1380 | !(p1_8@336@01) | live]
(push) ; 9
; [else-branch: 1380 | !(p1_8@336@01)]
(pop) ; 9
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 9
; [then-branch: 1381 | !(p1_8@336@01) | live]
; [else-branch: 1381 | p1_8@336@01 | live]
(push) ; 10
; [then-branch: 1381 | !(p1_8@336@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 1381 | p1_8@336@01]
(assert p1_8@336@01)
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1382 | False | live]
; [else-branch: 1382 | True | live]
(push) ; 12
; [then-branch: 1382 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1382 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_8@336@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1383 | !(p1_8@336@01) | live]
; [else-branch: 1383 | p1_8@336@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1383 | !(p1_8@336@01)]
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1384 | !(p2_8@337@01) | live]
; [else-branch: 1384 | p2_8@337@01 | live]
(push) ; 11
; [then-branch: 1384 | !(p2_8@337@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 1384 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1385 | False | live]
; [else-branch: 1385 | True | live]
(push) ; 13
; [then-branch: 1385 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1385 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 1386 | p2_8@337@01 | dead]
; [else-branch: 1386 | !(p2_8@337@01) | live]
(push) ; 10
; [else-branch: 1386 | !(p2_8@337@01)]
(pop) ; 10
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1387 | !(p2_8@337@01) | live]
; [else-branch: 1387 | p2_8@337@01 | live]
(push) ; 11
; [then-branch: 1387 | !(p2_8@337@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 1387 | p2_8@337@01]
(assert p2_8@337@01)
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1388 | False | live]
; [else-branch: 1388 | True | live]
(push) ; 13
; [then-branch: 1388 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1388 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_8@337@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1389 | !(p2_8@337@01) | live]
; [else-branch: 1389 | p2_8@337@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1389 | !(p2_8@337@01)]
; [exec]
; thisexcept1_1 := except1_1 && !bypass1_1
; [eval] except1_1 && !bypass1_1
; [exec]
; thisexcept2_1 := except2_1 && !bypass2_1
; [eval] except2_1 && !bypass2_1
; [exec]
; p1_9 := p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
; [eval] p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 1390 | !(p1_7@270@01) | live]
; [else-branch: 1390 | p1_7@270@01 | live]
(push) ; 12
; [then-branch: 1390 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1390 | p1_7@270@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [exec]
; p2_9 := p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
; [eval] p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
(push) ; 11
; [then-branch: 1391 | !(p2_7@271@01) | live]
; [else-branch: 1391 | p2_7@271@01 | live]
(push) ; 12
; [then-branch: 1391 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1391 | p2_7@271@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 1392 | False | dead]
; [else-branch: 1392 | True | live]
(push) ; 11
; [else-branch: 1392 | True]
(pop) ; 11
; [eval] !p1_9
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1393 | True | live]
; [else-branch: 1393 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1393 | True]
; [then-branch: 1394 | False | dead]
; [else-branch: 1394 | True | live]
(push) ; 12
; [else-branch: 1394 | True]
(pop) ; 12
; [eval] !p2_9
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1395 | True | live]
; [else-branch: 1395 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1395 | True]
; [eval] p1_9 && (!ret1_1 && !except1_1)
; [then-branch: 1396 | False | dead]
; [else-branch: 1396 | True | live]
(push) ; 13
; [else-branch: 1396 | True]
(pop) ; 13
; [eval] !(p1_9 && (!ret1_1 && !except1_1))
; [eval] p1_9 && (!ret1_1 && !except1_1)
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1397 | True | live]
; [else-branch: 1397 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1397 | True]
; [eval] p2_9 && (!ret2_1 && !except2_1)
; [then-branch: 1398 | False | dead]
; [else-branch: 1398 | True | live]
(push) ; 14
; [else-branch: 1398 | True]
(pop) ; 14
; [eval] !(p2_9 && (!ret2_1 && !except2_1))
; [eval] p2_9 && (!ret2_1 && !except2_1)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1399 | True | live]
; [else-branch: 1399 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1399 | True]
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 15
; [then-branch: 1400 | !(p1_7@270@01) | live]
; [else-branch: 1400 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1400 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1400 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1401 | False | live]
; [else-branch: 1401 | True | live]
(push) ; 18
; [then-branch: 1401 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1401 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1402 | p1_7@270@01 | live]
; [else-branch: 1402 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1402 | p1_7@270@01]
; [exec]
; _err := null
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1403 | !(p2_7@271@01) | live]
; [else-branch: 1403 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1403 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1403 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1404 | False | live]
; [else-branch: 1404 | True | live]
(push) ; 19
; [then-branch: 1404 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1404 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1405 | p2_7@271@01 | live]
; [else-branch: 1405 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1405 | p2_7@271@01]
; [exec]
; _err_2 := null
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1406 | p1_7@270@01 | live]
; [else-branch: 1406 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1406 | p1_7@270@01]
; [exec]
; tmp_ret1_1 := ret1_1
; [exec]
; ret1_1 := oldret1_1
; [exec]
; tmp_except1_1 := except1_1
; [exec]
; except1_1 := oldexcept1_1
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1407 | p2_7@271@01 | live]
; [else-branch: 1407 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1407 | p2_7@271@01]
; [exec]
; tmp_ret2_1 := ret2_1
; [exec]
; ret2_1 := oldret2_1
; [exec]
; tmp_except2_1 := except2_1
; [exec]
; except2_1 := oldexcept2_1
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1408 | !(p1_7@270@01) | live]
; [else-branch: 1408 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1408 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1408 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1409 | False | live]
; [else-branch: 1409 | True | live]
(push) ; 22
; [then-branch: 1409 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1409 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1410 | p1_7@270@01 | live]
; [else-branch: 1410 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1410 | p1_7@270@01]
; [exec]
; x_2 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@330@01 3301240))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@330@01 3301240))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@330@01 3301240)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@330@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@330@01 3301240)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))
(push) ; 20
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))
(pop) ; 20
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240)))))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240)))))
(declare-const x_2@376@01 $Ref)
(assert (=
  x_2@376@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@377@01 $Snap)
(assert (= $t@377@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 20
(pop) ; 20
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1411 | !(p2_7@271@01) | live]
; [else-branch: 1411 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1411 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1411 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1412 | False | live]
; [else-branch: 1412 | True | live]
(push) ; 23
; [then-branch: 1412 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1412 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1413 | p2_7@271@01 | live]
; [else-branch: 1413 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1413 | p2_7@271@01]
; [exec]
; x_2_0 := __prim__int___box__(int___mul__(2, int___unbox__(x_2_0)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(x_2_0)))
; [eval] int___mul__(2, int___unbox__(x_2_0))
; [eval] int___unbox__(x_2_0)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 22
(assert (not (issubtype<Bool> (typeof<PyType> x_2_0@332@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2_0@332@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_2_0@332@01))
(pop) ; 21
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_2_0@332@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_2_0@332@01)))
(push) ; 21
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@332@01)))
(pop) ; 21
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@332@01)))
(push) ; 21
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@332@01))))
(pop) ; 21
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@332@01))))
(declare-const x_2_0@378@01 $Ref)
(assert (=
  x_2_0@378@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit x_2_0@332@01)))))
; [exec]
; inhale true
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1414 | p1_7@270@01 | live]
; [else-branch: 1414 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1414 | p1_7@270@01]
; [exec]
; ret1_1 := ret1_1 || tmp_ret1_1
; [eval] ret1_1 || tmp_ret1_1
(push) ; 22
; [then-branch: 1415 | False | live]
; [else-branch: 1415 | True | live]
(push) ; 23
; [then-branch: 1415 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1415 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [exec]
; except1_1 := except1_1 || tmp_except1_1
; [eval] except1_1 || tmp_except1_1
(push) ; 22
; [then-branch: 1416 | False | live]
; [else-branch: 1416 | True | live]
(push) ; 23
; [then-branch: 1416 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1416 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1417 | p2_7@271@01 | live]
; [else-branch: 1417 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1417 | p2_7@271@01]
; [exec]
; ret2_1 := ret2_1 || tmp_ret2_1
; [eval] ret2_1 || tmp_ret2_1
(push) ; 23
; [then-branch: 1418 | False | live]
; [else-branch: 1418 | True | live]
(push) ; 24
; [then-branch: 1418 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1418 | True]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [exec]
; except2_1 := except2_1 || tmp_except2_1
; [eval] except2_1 || tmp_except2_1
(push) ; 23
; [then-branch: 1419 | False | live]
; [else-branch: 1419 | True | live]
(push) ; 24
; [then-branch: 1419 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1419 | True]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1420 | !(p1_7@270@01) | live]
; [else-branch: 1420 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1420 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1420 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1421 | False | live]
; [else-branch: 1421 | True | live]
(push) ; 26
; [then-branch: 1421 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1421 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1422 | p1_7@270@01 | live]
; [else-branch: 1422 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1422 | p1_7@270@01]
; [exec]
; _res := _checkDefined(x_2, 3301240)
; [eval] _checkDefined(x_2, 3301240)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@376@01 3301240))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@376@01 3301240))
(declare-const _res@380@01 $Ref)
(assert (= _res@380@01 (_checkDefined $Snap.unit x_2@376@01 3301240)))
; [exec]
; ret1_1 := true
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1423 | !(p2_7@271@01) | live]
; [else-branch: 1423 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1423 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1423 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1424 | False | live]
; [else-branch: 1424 | True | live]
(push) ; 27
; [then-branch: 1424 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1424 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1425 | p2_7@271@01 | live]
; [else-branch: 1425 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1425 | p2_7@271@01]
; [exec]
; _res_2 := x_2_0
; [exec]
; ret2_1 := true
; [exec]
; assert (p1_7 ==> !except1_1) && (p2_7 ==> !except2_1)
; [eval] p1_7 ==> !except1_1
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1426 | p1_7@270@01 | live]
; [else-branch: 1426 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1426 | p1_7@270@01]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> !except2_1
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1427 | p2_7@271@01 | live]
; [else-branch: 1427 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1427 | p2_7@271@01]
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> true
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1428 | p1_7@270@01 | live]
; [else-branch: 1428 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1428 | p1_7@270@01]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1429 | p2_7@271@01 | live]
; [else-branch: 1429 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1429 | p2_7@271@01]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), int())
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1430 | p1_7@270@01 | live]
; [else-branch: 1430 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1430 | p1_7@270@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@380@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@380@01) (as int<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_2), int())
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1431 | p2_7@271@01 | live]
; [else-branch: 1431 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1431 | p2_7@271@01]
; [eval] issubtype(typeof(_res_2), int())
; [eval] typeof(_res_2)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> x_2_0@378@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_7@271@01
  (issubtype<Bool> (typeof<PyType> x_2_0@378@01) (as int<PyType>  PyType))))
; [eval] p1_7 ==> bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1432 | p1_7@270@01 | live]
; [else-branch: 1432 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1432 | p1_7@270@01]
; [eval] bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1433 | bool___unbox__(_, b_1@278@01) | dead]
; [else-branch: 1433 | !(bool___unbox__(_, b_1@278@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1433 | !(bool___unbox__(_, b_1@278@01))]
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (not (bool___unbox__ $Snap.unit b_1@278@01)))))
; [eval] p2_7 ==> bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1434 | p2_7@271@01 | live]
; [else-branch: 1434 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1434 | p2_7@271@01]
; [eval] bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1_0)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1_0@279@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1435 | bool___unbox__(_, b_1_0@279@01) | dead]
; [else-branch: 1435 | !(bool___unbox__(_, b_1_0@279@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1435 | !(bool___unbox__(_, b_1_0@279@01))]
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01)
    (not (bool___unbox__ $Snap.unit b_1_0@279@01)))))
; [eval] p1_7 ==> !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1436 | p1_7@270@01 | live]
; [else-branch: 1436 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1436 | p1_7@270@01]
; [eval] !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1)
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1437 | !(bool___unbox__(_, b_1@278@01)) | live]
; [else-branch: 1437 | bool___unbox__(_, b_1@278@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1437 | !(bool___unbox__(_, b_1@278@01))]
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
; [eval] int___eq__(_res, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 29
(pop) ; 29
; Joined path conditions
(push) ; 29
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> _res@380@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@380@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@380@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@380@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@380@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_1@278@01))
  (and
    (not (bool___unbox__ $Snap.unit b_1@278@01))
    (issubtype<Bool> (typeof<PyType> _res@380@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@380@01 (__prim__int___box__ $Snap.unit 0)))))
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_1@278@01))
      (and
        (not (bool___unbox__ $Snap.unit b_1@278@01))
        (issubtype<Bool> (typeof<PyType> _res@380@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@380@01 (__prim__int___box__ $Snap.unit 0))))
    (not (bool___unbox__ $Snap.unit b_1@278@01)))))
(push) ; 25
(assert (not (=>
  (and p1_7@270@01 (not (bool___unbox__ $Snap.unit b_1@278@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@380@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@270@01 (not (bool___unbox__ $Snap.unit b_1@278@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@380@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_7 ==> !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1438 | p2_7@271@01 | live]
; [else-branch: 1438 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1438 | p2_7@271@01]
; [eval] !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1_0)
; [eval] bool___unbox__(b_1_0)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@279@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@279@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1_0@279@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1439 | !(bool___unbox__(_, b_1_0@279@01)) | live]
; [else-branch: 1439 | bool___unbox__(_, b_1_0@279@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1439 | !(bool___unbox__(_, b_1_0@279@01))]
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
; [eval] int___eq__(_res_2, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 29
(pop) ; 29
; Joined path conditions
(push) ; 29
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> x_2_0@378@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2_0@378@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@378@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_2_0@378@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@378@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_1_0@279@01))
  (and
    (not (bool___unbox__ $Snap.unit b_1_0@279@01))
    (issubtype<Bool> (typeof<PyType> x_2_0@378@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@378@01 (__prim__int___box__ $Snap.unit 0)))))
(assert (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@279@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@279@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_1_0@279@01))
      (and
        (not (bool___unbox__ $Snap.unit b_1_0@279@01))
        (issubtype<Bool> (typeof<PyType> x_2_0@378@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_2_0@378@01 (__prim__int___box__ $Snap.unit 0))))
    (not (bool___unbox__ $Snap.unit b_1_0@279@01)))))
(push) ; 25
(assert (not (=>
  (and p2_7@271@01 (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_2_0@378@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_7@271@01 (not (bool___unbox__ $Snap.unit b_1_0@279@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_2_0@378@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p1_7 ==> (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1440 | p1_7@270@01 | live]
; [else-branch: 1440 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1440 | p1_7@270@01]
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
(push) ; 27
; [then-branch: 1441 | False | live]
; [else-branch: 1441 | True | live]
(push) ; 28
; [then-branch: 1441 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1441 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
(push) ; 29
; [then-branch: 1442 | False | live]
; [else-branch: 1442 | True | live]
(push) ; 30
; [then-branch: 1442 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1442 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
(push) ; 31
; [then-branch: 1443 | False | live]
; [else-branch: 1443 | True | live]
(push) ; 32
; [then-branch: 1443 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1443 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1444 | p2_7@271@01 | live]
; [else-branch: 1444 | !(p2_7@271@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1444 | p2_7@271@01]
; [eval] (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false)
(push) ; 27
; [then-branch: 1445 | False | live]
; [else-branch: 1445 | True | live]
(push) ; 28
; [then-branch: 1445 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1445 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false)
(push) ; 29
; [then-branch: 1446 | False | live]
; [else-branch: 1446 | True | live]
(push) ; 30
; [then-branch: 1446 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1446 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false)
(push) ; 31
; [then-branch: 1447 | False | live]
; [else-branch: 1447 | True | live]
(push) ; 32
; [then-branch: 1447 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1447 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(pop) ; 24
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1448 | !(p2_7@271@01) | live]
; [else-branch: 1448 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1448 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1448 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1449 | False | live]
; [else-branch: 1449 | True | live]
(push) ; 27
; [then-branch: 1449 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1449 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1450 | !(p2_7@271@01) | dead]
; [else-branch: 1450 | p2_7@271@01 | live]
(push) ; 24
; [else-branch: 1450 | p2_7@271@01]
(pop) ; 24
(pop) ; 23
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1451 | !(p1_7@270@01) | live]
; [else-branch: 1451 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1451 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1451 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1452 | False | live]
; [else-branch: 1452 | True | live]
(push) ; 26
; [then-branch: 1452 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1452 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1453 | !(p1_7@270@01) | dead]
; [else-branch: 1453 | p1_7@270@01 | live]
(push) ; 23
; [else-branch: 1453 | p1_7@270@01]
(pop) ; 23
(pop) ; 22
; [eval] !p2_7
; [then-branch: 1454 | !(p2_7@271@01) | dead]
; [else-branch: 1454 | p2_7@271@01 | live]
(push) ; 22
; [else-branch: 1454 | p2_7@271@01]
(pop) ; 22
(pop) ; 21
; [eval] !p1_7
; [then-branch: 1455 | !(p1_7@270@01) | dead]
; [else-branch: 1455 | p1_7@270@01 | live]
(push) ; 21
; [else-branch: 1455 | p1_7@270@01]
(pop) ; 21
(pop) ; 20
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 20
; [then-branch: 1456 | !(p2_7@271@01) | live]
; [else-branch: 1456 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1456 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1456 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1457 | False | live]
; [else-branch: 1457 | True | live]
(push) ; 23
; [then-branch: 1457 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1457 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1458 | !(p2_7@271@01) | dead]
; [else-branch: 1458 | p2_7@271@01 | live]
(push) ; 20
; [else-branch: 1458 | p2_7@271@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1459 | !(p1_7@270@01) | live]
; [else-branch: 1459 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1459 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1459 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1460 | False | live]
; [else-branch: 1460 | True | live]
(push) ; 22
; [then-branch: 1460 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1460 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 1461 | !(p1_7@270@01) | dead]
; [else-branch: 1461 | p1_7@270@01 | live]
(push) ; 19
; [else-branch: 1461 | p1_7@270@01]
(pop) ; 19
(pop) ; 18
; [eval] !p2_7
; [then-branch: 1462 | !(p2_7@271@01) | dead]
; [else-branch: 1462 | p2_7@271@01 | live]
(push) ; 18
; [else-branch: 1462 | p2_7@271@01]
(pop) ; 18
(pop) ; 17
; [eval] !p1_7
; [then-branch: 1463 | !(p1_7@270@01) | dead]
; [else-branch: 1463 | p1_7@270@01 | live]
(push) ; 17
; [else-branch: 1463 | p1_7@270@01]
(pop) ; 17
(pop) ; 16
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1464 | !(p2_7@271@01) | live]
; [else-branch: 1464 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1464 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1464 | p2_7@271@01]
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1465 | False | live]
; [else-branch: 1465 | True | live]
(push) ; 19
; [then-branch: 1465 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1465 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 1466 | !(p2_7@271@01) | dead]
; [else-branch: 1466 | p2_7@271@01 | live]
(push) ; 16
; [else-branch: 1466 | p2_7@271@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 15
; [then-branch: 1467 | !(p1_7@270@01) | live]
; [else-branch: 1467 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1467 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1467 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1468 | False | live]
; [else-branch: 1468 | True | live]
(push) ; 18
; [then-branch: 1468 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1468 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 1469 | !(p1_7@270@01) | dead]
; [else-branch: 1469 | p1_7@270@01 | live]
(push) ; 15
; [else-branch: 1469 | p1_7@270@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 1365 | p2_8@337@01]
(assert p2_8@337@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 1249 | p1_8@336@01]
(assert p1_8@336@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 995 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 4
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 4
; [then-branch: 1470 | !(p2_7@271@01) | live]
; [else-branch: 1470 | p2_7@271@01 | live]
(push) ; 5
; [then-branch: 1470 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
(pop) ; 5
(push) ; 5
; [else-branch: 1470 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 6
; [then-branch: 1471 | False | live]
; [else-branch: 1471 | True | live]
(push) ; 7
; [then-branch: 1471 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 1471 | True]
; [eval] !except2_1
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@271@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1472 | !(p2_7@271@01) | live]
; [else-branch: 1472 | p2_7@271@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1472 | !(p2_7@271@01)]
(assert (not p2_7@271@01))
; [exec]
; bypass1_1 := !(p1_7 && (!ret1_1 && !except1_1))
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 5
; [then-branch: 1473 | !(p1_7@270@01) | live]
; [else-branch: 1473 | p1_7@270@01 | live]
(push) ; 6
; [then-branch: 1473 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1473 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 7
; [then-branch: 1474 | False | live]
; [else-branch: 1474 | True | live]
(push) ; 8
; [then-branch: 1474 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1474 | True]
; [eval] !except1_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass1_1@381@01 Bool)
(assert (= bypass1_1@381@01 (not p1_7@270@01)))
; [exec]
; bypass2_1 := !(p2_7 && (!ret2_1 && !except2_1))
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 5
; [then-branch: 1475 | !(p2_7@271@01) | live]
; [else-branch: 1475 | p2_7@271@01 | live]
(push) ; 6
; [then-branch: 1475 | !(p2_7@271@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 1475 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 7
; [then-branch: 1476 | False | live]
; [else-branch: 1476 | True | live]
(push) ; 8
; [then-branch: 1476 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1476 | True]
; [eval] !except2_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass2_1@382@01 Bool)
(assert (= bypass2_1@382@01 (not p2_7@271@01)))
; [exec]
; oldret1_1 := ret1_1
; [exec]
; oldret2_1 := ret2_1
; [exec]
; oldexcept1_1 := except1_1
; [exec]
; oldexcept2_1 := except2_1
; [exec]
; p1_8 := p1_7 && (!ret1_1 && !except1_1 && bool___unbox__(b_6))
; [eval] p1_7 && (!ret1_1 && !except1_1 && bool___unbox__(b_6))
(push) ; 5
; [then-branch: 1477 | !(p1_7@270@01) | live]
; [else-branch: 1477 | p1_7@270@01 | live]
(push) ; 6
; [then-branch: 1477 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1477 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 7
; [then-branch: 1478 | False | live]
; [else-branch: 1478 | True | live]
(push) ; 8
; [then-branch: 1478 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1478 | True]
; [eval] !except1_1
(push) ; 9
; [then-branch: 1479 | False | live]
; [else-branch: 1479 | True | live]
(push) ; 10
; [then-branch: 1479 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1479 | True]
; [eval] bool___unbox__(b_6)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01))))
(declare-const p1_8@383@01 Bool)
(assert (= p1_8@383@01 (and p1_7@270@01 (bool___unbox__ $Snap.unit b_1@278@01))))
; [exec]
; p2_8 := p2_7 && (!ret2_1 && !except2_1 && bool___unbox__(b_6_0))
; [eval] p2_7 && (!ret2_1 && !except2_1 && bool___unbox__(b_6_0))
(push) ; 5
; [then-branch: 1480 | !(p2_7@271@01) | live]
; [else-branch: 1480 | p2_7@271@01 | live]
(push) ; 6
; [then-branch: 1480 | !(p2_7@271@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 1480 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 7
; [then-branch: 1481 | False | live]
; [else-branch: 1481 | True | live]
(push) ; 8
; [then-branch: 1481 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1481 | True]
; [eval] !except2_1
(push) ; 9
; [then-branch: 1482 | False | live]
; [else-branch: 1482 | True | live]
(push) ; 10
; [then-branch: 1482 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1482 | True]
; [eval] bool___unbox__(b_6_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_6_0@299@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_6_0@299@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_6_0@299@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_6_0@299@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_7@271@01
  (and
    p2_7@271@01
    (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_6_0@299@01))))
(declare-const p2_8@384@01 Bool)
(assert (= p2_8@384@01 (and p2_7@271@01 (bool___unbox__ $Snap.unit b_6_0@299@01))))
; [exec]
; p3_1 := p1_7 && (!ret1_1 && !except1_1 && !bool___unbox__(b_6))
; [eval] p1_7 && (!ret1_1 && !except1_1 && !bool___unbox__(b_6))
(push) ; 5
; [then-branch: 1483 | !(p1_7@270@01) | live]
; [else-branch: 1483 | p1_7@270@01 | live]
(push) ; 6
; [then-branch: 1483 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1483 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 7
; [then-branch: 1484 | False | live]
; [else-branch: 1484 | True | live]
(push) ; 8
; [then-branch: 1484 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1484 | True]
; [eval] !except1_1
(push) ; 9
; [then-branch: 1485 | False | live]
; [else-branch: 1485 | True | live]
(push) ; 10
; [then-branch: 1485 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1485 | True]
; [eval] !bool___unbox__(b_6)
; [eval] bool___unbox__(b_6)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_1@385@01 Bool)
(assert (= p3_1@385@01 (and p1_7@270@01 (not (bool___unbox__ $Snap.unit b_1@278@01)))))
; [exec]
; p4_1 := p2_7 && (!ret2_1 && !except2_1 && !bool___unbox__(b_6_0))
; [eval] p2_7 && (!ret2_1 && !except2_1 && !bool___unbox__(b_6_0))
(push) ; 5
; [then-branch: 1486 | !(p2_7@271@01) | live]
; [else-branch: 1486 | p2_7@271@01 | live]
(push) ; 6
; [then-branch: 1486 | !(p2_7@271@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 1486 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 7
; [then-branch: 1487 | False | live]
; [else-branch: 1487 | True | live]
(push) ; 8
; [then-branch: 1487 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1487 | True]
; [eval] !except2_1
(push) ; 9
; [then-branch: 1488 | False | live]
; [else-branch: 1488 | True | live]
(push) ; 10
; [then-branch: 1488 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1488 | True]
; [eval] !bool___unbox__(b_6_0)
; [eval] bool___unbox__(b_6_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_6_0@299@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_6_0@299@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_6_0@299@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_6_0@299@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_6_0@299@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_1@386@01 Bool)
(assert (= p4_1@386@01 (and p2_7@271@01 (not (bool___unbox__ $Snap.unit b_6_0@299@01)))))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@387@01 $Ref)
(assert (not (= tmp_1@387@01 $Ref.null)))
(assert (not (= tmp_1@387@01 error_1_0@295@01)))
(assert (not (= tmp_1@387@01 _cthread_159_0@273@01)))
(assert (not (= tmp_1@387@01 x_2@330@01)))
(assert (not (= tmp_1@387@01 error_1@294@01)))
(assert (not (= tmp_1@387@01 MyException_res_1_0@301@01)))
(assert (not (= tmp_1@387@01 _res_2@283@01)))
(assert (not (= tmp_1@387@01 _err_2@291@01)))
(assert (not (= tmp_1@387@01 tmp_1@328@01)))
(assert (not (= tmp_1@387@01 MyException_res_1@300@01)))
(assert (not (= tmp_1@387@01 b_1_0@279@01)))
(assert (not (= tmp_1@387@01 b_1@278@01)))
(assert (not (= tmp_1@387@01 _cthread_159@272@01)))
(assert (not (= tmp_1@387@01 x_2_0@293@01)))
(assert (not (= tmp_1@387@01 b_6_0@299@01)))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 5
; [then-branch: 1489 | !(p1_8@383@01) | live]
; [else-branch: 1489 | p1_8@383@01 | live]
(push) ; 6
; [then-branch: 1489 | !(p1_8@383@01)]
(assert (not p1_8@383@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1489 | p1_8@383@01]
(assert p1_8@383@01)
; [eval] !ret1_1
(push) ; 7
; [then-branch: 1490 | False | live]
; [else-branch: 1490 | True | live]
(push) ; 8
; [then-branch: 1490 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1490 | True]
; [eval] !except1_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_8@383@01 (not p1_8@383@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_8@383@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_8@383@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1491 | p1_8@383@01 | live]
; [else-branch: 1491 | !(p1_8@383@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1491 | p1_8@383@01]
(assert p1_8@383@01)
; [exec]
; MyException_res_1 := tmp_1
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 6
; [then-branch: 1492 | !(p2_8@384@01) | live]
; [else-branch: 1492 | p2_8@384@01 | live]
(push) ; 7
; [then-branch: 1492 | !(p2_8@384@01)]
(assert (not p2_8@384@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1492 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 8
; [then-branch: 1493 | False | live]
; [else-branch: 1493 | True | live]
(push) ; 9
; [then-branch: 1493 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 1493 | True]
; [eval] !except2_1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_8@384@01 (not p2_8@384@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_8@384@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1494 | p2_8@384@01 | dead]
; [else-branch: 1494 | !(p2_8@384@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 1494 | !(p2_8@384@01)]
(assert (not p2_8@384@01))
(pop) ; 6
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 6
; [then-branch: 1495 | !(p2_8@384@01) | live]
; [else-branch: 1495 | p2_8@384@01 | live]
(push) ; 7
; [then-branch: 1495 | !(p2_8@384@01)]
(assert (not p2_8@384@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1495 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 8
; [then-branch: 1496 | False | live]
; [else-branch: 1496 | True | live]
(push) ; 9
; [then-branch: 1496 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 1496 | True]
; [eval] !except2_1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_8@384@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_8@384@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1497 | !(p2_8@384@01) | live]
; [else-branch: 1497 | p2_8@384@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1497 | !(p2_8@384@01)]
(assert (not p2_8@384@01))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1498 | !(p1_8@383@01) | live]
; [else-branch: 1498 | p1_8@383@01 | live]
(push) ; 8
; [then-branch: 1498 | !(p1_8@383@01)]
(assert (not p1_8@383@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1498 | p1_8@383@01]
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1499 | False | live]
; [else-branch: 1499 | True | live]
(push) ; 10
; [then-branch: 1499 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1499 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_8@383@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1500 | p1_8@383@01 | live]
; [else-branch: 1500 | !(p1_8@383@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1500 | p1_8@383@01]
; [exec]
; inhale typeof(MyException_res_1) == MyException()
(declare-const $t@388@01 $Snap)
(assert (= $t@388@01 $Snap.unit))
; [eval] typeof(MyException_res_1) == MyException()
; [eval] typeof(MyException_res_1)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_1@387@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_8 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1501 | !(p2_8@384@01) | live]
; [else-branch: 1501 | p2_8@384@01 | live]
(push) ; 9
; [then-branch: 1501 | !(p2_8@384@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1501 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1502 | False | live]
; [else-branch: 1502 | True | live]
(push) ; 11
; [then-branch: 1502 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1502 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1503 | p2_8@384@01 | dead]
; [else-branch: 1503 | !(p2_8@384@01) | live]
(push) ; 8
; [else-branch: 1503 | !(p2_8@384@01)]
(pop) ; 8
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 8
; [then-branch: 1504 | !(p2_8@384@01) | live]
; [else-branch: 1504 | p2_8@384@01 | live]
(push) ; 9
; [then-branch: 1504 | !(p2_8@384@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1504 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1505 | False | live]
; [else-branch: 1505 | True | live]
(push) ; 11
; [then-branch: 1505 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1505 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_8@384@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1506 | !(p2_8@384@01) | live]
; [else-branch: 1506 | p2_8@384@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1506 | !(p2_8@384@01)]
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 9
; [then-branch: 1507 | !(p1_8@383@01) | live]
; [else-branch: 1507 | p1_8@383@01 | live]
(push) ; 10
; [then-branch: 1507 | !(p1_8@383@01)]
(assert (not p1_8@383@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1507 | p1_8@383@01]
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1508 | False | live]
; [else-branch: 1508 | True | live]
(push) ; 12
; [then-branch: 1508 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1508 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_8@383@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1509 | p1_8@383@01 | live]
; [else-branch: 1509 | !(p1_8@383@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1509 | p1_8@383@01]
; [exec]
; _err := MyException_res_1
; [exec]
; except1_1 := true
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1510 | !(p2_8@384@01) | live]
; [else-branch: 1510 | p2_8@384@01 | live]
(push) ; 11
; [then-branch: 1510 | !(p2_8@384@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 1510 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1511 | False | live]
; [else-branch: 1511 | True | live]
(push) ; 13
; [then-branch: 1511 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1511 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 1512 | p2_8@384@01 | dead]
; [else-branch: 1512 | !(p2_8@384@01) | live]
(push) ; 10
; [else-branch: 1512 | !(p2_8@384@01)]
(pop) ; 10
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1513 | !(p2_8@384@01) | live]
; [else-branch: 1513 | p2_8@384@01 | live]
(push) ; 11
; [then-branch: 1513 | !(p2_8@384@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 1513 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1514 | False | live]
; [else-branch: 1514 | True | live]
(push) ; 13
; [then-branch: 1514 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1514 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_8@384@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1515 | !(p2_8@384@01) | live]
; [else-branch: 1515 | p2_8@384@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1515 | !(p2_8@384@01)]
; [exec]
; thisexcept1_1 := except1_1 && !bypass1_1
; [eval] except1_1 && !bypass1_1
(push) ; 11
; [then-branch: 1516 | False | live]
; [else-branch: 1516 | True | live]
(push) ; 12
; [then-branch: 1516 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1516 | True]
; [eval] !bypass1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_1@389@01 Bool)
(assert (= thisexcept1_1@389@01 (not bypass1_1@381@01)))
; [exec]
; thisexcept2_1 := except2_1 && !bypass2_1
; [eval] except2_1 && !bypass2_1
; [exec]
; p1_9 := p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
; [eval] p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 1517 | !(p1_7@270@01) | live]
; [else-branch: 1517 | p1_7@270@01 | live]
(push) ; 12
; [then-branch: 1517 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1517 | p1_7@270@01]
(push) ; 13
; [then-branch: 1518 | !(thisexcept1_1@389@01) | live]
; [else-branch: 1518 | thisexcept1_1@389@01 | live]
(push) ; 14
; [then-branch: 1518 | !(thisexcept1_1@389@01)]
(assert (not thisexcept1_1@389@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1518 | thisexcept1_1@389@01]
(assert thisexcept1_1@389@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_1@389@01 (not thisexcept1_1@389@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=> p1_7@270@01 (or thisexcept1_1@389@01 (not thisexcept1_1@389@01))))
(declare-const p1_9@390@01 Bool)
(assert (=
  p1_9@390@01
  (and
    p1_7@270@01
    (and
      thisexcept1_1@389@01
      (issubtype<Bool> (typeof<PyType> tmp_1@387@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_9 := p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
; [eval] p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
(push) ; 11
; [then-branch: 1519 | !(p2_7@271@01) | live]
; [else-branch: 1519 | p2_7@271@01 | live]
(push) ; 12
; [then-branch: 1519 | !(p2_7@271@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 1519 | p2_7@271@01]
(assert p2_7@271@01)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_9@390@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not p1_9@390@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1520 | p1_9@390@01 | live]
; [else-branch: 1520 | !(p1_9@390@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1520 | p1_9@390@01]
(assert p1_9@390@01)
; [exec]
; except1_1 := false
; [then-branch: 1521 | False | dead]
; [else-branch: 1521 | True | live]
(push) ; 12
; [else-branch: 1521 | True]
(pop) ; 12
; [eval] !p2_9
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1522 | True | live]
; [else-branch: 1522 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1522 | True]
; [eval] p1_9 && (!ret1_1 && !except1_1)
(push) ; 13
; [then-branch: 1523 | !(p1_9@390@01) | live]
; [else-branch: 1523 | p1_9@390@01 | live]
(push) ; 14
; [then-branch: 1523 | !(p1_9@390@01)]
(assert (not p1_9@390@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1523 | p1_9@390@01]
; [eval] !ret1_1
(push) ; 15
; [then-branch: 1524 | False | live]
; [else-branch: 1524 | True | live]
(push) ; 16
; [then-branch: 1524 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1524 | True]
; [eval] !except1_1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p1_9@390@01 (not p1_9@390@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_9@390@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1525 | p1_9@390@01 | live]
; [else-branch: 1525 | !(p1_9@390@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1525 | p1_9@390@01]
; [exec]
; x_2 := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const x_2@391@01 $Ref)
(assert (= x_2@391@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@392@01 $Snap)
(assert (= $t@392@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_9 && (!ret2_1 && !except2_1)
; [then-branch: 1526 | False | dead]
; [else-branch: 1526 | True | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1526 | True]
(pop) ; 14
; [eval] !(p2_9 && (!ret2_1 && !except2_1))
; [eval] p2_9 && (!ret2_1 && !except2_1)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1527 | True | live]
; [else-branch: 1527 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1527 | True]
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 15
; [then-branch: 1528 | !(p1_7@270@01) | live]
; [else-branch: 1528 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1528 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1528 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1529 | False | live]
; [else-branch: 1529 | True | live]
(push) ; 18
; [then-branch: 1529 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1529 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1530 | p1_7@270@01 | live]
; [else-branch: 1530 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1530 | p1_7@270@01]
; [exec]
; _err := null
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1531 | !(p2_7@271@01) | live]
; [else-branch: 1531 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1531 | !(p2_7@271@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1531 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1532 | False | live]
; [else-branch: 1532 | True | live]
(push) ; 19
; [then-branch: 1532 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1532 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 1533 | p2_7@271@01 | dead]
; [else-branch: 1533 | !(p2_7@271@01) | live]
(push) ; 16
; [else-branch: 1533 | !(p2_7@271@01)]
(pop) ; 16
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1534 | !(p2_7@271@01) | live]
; [else-branch: 1534 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1534 | !(p2_7@271@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1534 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1535 | False | live]
; [else-branch: 1535 | True | live]
(push) ; 19
; [then-branch: 1535 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1535 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1536 | !(p2_7@271@01) | live]
; [else-branch: 1536 | p2_7@271@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1536 | !(p2_7@271@01)]
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1537 | p1_7@270@01 | live]
; [else-branch: 1537 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1537 | p1_7@270@01]
; [exec]
; tmp_ret1_1 := ret1_1
; [exec]
; ret1_1 := oldret1_1
; [exec]
; tmp_except1_1 := except1_1
; [exec]
; except1_1 := oldexcept1_1
; [then-branch: 1538 | p2_7@271@01 | dead]
; [else-branch: 1538 | !(p2_7@271@01) | live]
(push) ; 18
; [else-branch: 1538 | !(p2_7@271@01)]
(pop) ; 18
; [eval] !p2_7
(push) ; 18
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1539 | !(p2_7@271@01) | live]
; [else-branch: 1539 | p2_7@271@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1539 | !(p2_7@271@01)]
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1540 | !(p1_7@270@01) | live]
; [else-branch: 1540 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1540 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1540 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1541 | False | live]
; [else-branch: 1541 | True | live]
(push) ; 22
; [then-branch: 1541 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1541 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1542 | p1_7@270@01 | live]
; [else-branch: 1542 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1542 | p1_7@270@01]
; [exec]
; x_2 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@391@01 3301240))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@391@01 3301240))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@391@01 3301240)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@391@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@391@01 3301240)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@391@01 3301240)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@391@01 3301240))))
(push) ; 20
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@391@01 3301240))))
(pop) ; 20
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@391@01 3301240))))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@391@01 3301240)))))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@391@01 3301240)))))
(declare-const x_2@393@01 $Ref)
(assert (=
  x_2@393@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@391@01 3301240))))))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@394@01 $Snap)
(assert (= $t@394@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 20
(pop) ; 20
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1543 | !(p2_7@271@01) | live]
; [else-branch: 1543 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1543 | !(p2_7@271@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1543 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1544 | False | live]
; [else-branch: 1544 | True | live]
(push) ; 23
; [then-branch: 1544 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1544 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1545 | p2_7@271@01 | dead]
; [else-branch: 1545 | !(p2_7@271@01) | live]
(push) ; 20
; [else-branch: 1545 | !(p2_7@271@01)]
(pop) ; 20
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 20
; [then-branch: 1546 | !(p2_7@271@01) | live]
; [else-branch: 1546 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1546 | !(p2_7@271@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1546 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1547 | False | live]
; [else-branch: 1547 | True | live]
(push) ; 23
; [then-branch: 1547 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1547 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1548 | !(p2_7@271@01) | live]
; [else-branch: 1548 | p2_7@271@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1548 | !(p2_7@271@01)]
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1549 | p1_7@270@01 | live]
; [else-branch: 1549 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1549 | p1_7@270@01]
; [exec]
; ret1_1 := ret1_1 || tmp_ret1_1
; [eval] ret1_1 || tmp_ret1_1
(push) ; 22
; [then-branch: 1550 | False | live]
; [else-branch: 1550 | True | live]
(push) ; 23
; [then-branch: 1550 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1550 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [exec]
; except1_1 := except1_1 || tmp_except1_1
; [eval] except1_1 || tmp_except1_1
(push) ; 22
; [then-branch: 1551 | False | live]
; [else-branch: 1551 | True | live]
(push) ; 23
; [then-branch: 1551 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1551 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 1552 | p2_7@271@01 | dead]
; [else-branch: 1552 | !(p2_7@271@01) | live]
(push) ; 22
; [else-branch: 1552 | !(p2_7@271@01)]
(pop) ; 22
; [eval] !p2_7
(push) ; 22
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1553 | !(p2_7@271@01) | live]
; [else-branch: 1553 | p2_7@271@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1553 | !(p2_7@271@01)]
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1554 | !(p1_7@270@01) | live]
; [else-branch: 1554 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1554 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1554 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1555 | False | live]
; [else-branch: 1555 | True | live]
(push) ; 26
; [then-branch: 1555 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1555 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1556 | p1_7@270@01 | live]
; [else-branch: 1556 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1556 | p1_7@270@01]
; [exec]
; _res := _checkDefined(x_2, 3301240)
; [eval] _checkDefined(x_2, 3301240)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@393@01 3301240))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@393@01 3301240))
(declare-const _res@395@01 $Ref)
(assert (= _res@395@01 (_checkDefined $Snap.unit x_2@393@01 3301240)))
; [exec]
; ret1_1 := true
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1557 | !(p2_7@271@01) | live]
; [else-branch: 1557 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1557 | !(p2_7@271@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1557 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1558 | False | live]
; [else-branch: 1558 | True | live]
(push) ; 27
; [then-branch: 1558 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1558 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1559 | p2_7@271@01 | dead]
; [else-branch: 1559 | !(p2_7@271@01) | live]
(push) ; 24
; [else-branch: 1559 | !(p2_7@271@01)]
(pop) ; 24
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1560 | !(p2_7@271@01) | live]
; [else-branch: 1560 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1560 | !(p2_7@271@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1560 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1561 | False | live]
; [else-branch: 1561 | True | live]
(push) ; 27
; [then-branch: 1561 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1561 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1562 | !(p2_7@271@01) | live]
; [else-branch: 1562 | p2_7@271@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1562 | !(p2_7@271@01)]
; [exec]
; assert (p1_7 ==> !except1_1) && (p2_7 ==> !except2_1)
; [eval] p1_7 ==> !except1_1
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1563 | p1_7@270@01 | live]
; [else-branch: 1563 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1563 | p1_7@270@01]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> !except2_1
(push) ; 25
; [then-branch: 1564 | p2_7@271@01 | dead]
; [else-branch: 1564 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1564 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> true
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1565 | p1_7@270@01 | live]
; [else-branch: 1565 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1565 | p1_7@270@01]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 25
; [then-branch: 1566 | p2_7@271@01 | dead]
; [else-branch: 1566 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1566 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), int())
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1567 | p1_7@270@01 | live]
; [else-branch: 1567 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1567 | p1_7@270@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@395@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@395@01) (as int<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_2), int())
(push) ; 25
; [then-branch: 1568 | p2_7@271@01 | dead]
; [else-branch: 1568 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1568 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1569 | p1_7@270@01 | live]
; [else-branch: 1569 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1569 | p1_7@270@01]
; [eval] bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1570 | bool___unbox__(_, b_1@278@01) | live]
; [else-branch: 1570 | !(bool___unbox__(_, b_1@278@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1570 | bool___unbox__(_, b_1@278@01)]
(assert (bool___unbox__ $Snap.unit b_1@278@01))
; [eval] int___eq__(_res, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 29
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> _res@395@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@395@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@395@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@395@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@395@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit b_1@278@01)
  (and
    (bool___unbox__ $Snap.unit b_1@278@01)
    (__prim__int___box__%precondition $Snap.unit (- 0 2))
    (issubtype<Bool> (typeof<PyType> _res@395@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@395@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(assert (bool___unbox__ $Snap.unit b_1@278@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (=>
      (bool___unbox__ $Snap.unit b_1@278@01)
      (and
        (bool___unbox__ $Snap.unit b_1@278@01)
        (__prim__int___box__%precondition $Snap.unit (- 0 2))
        (issubtype<Bool> (typeof<PyType> _res@395@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@395@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
    (bool___unbox__ $Snap.unit b_1@278@01))))
(push) ; 25
(assert (not (=>
  (and p1_7@270@01 (bool___unbox__ $Snap.unit b_1@278@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@395@01 (__prim__int___box__ $Snap.unit (- 0 2))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@270@01 (bool___unbox__ $Snap.unit b_1@278@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@395@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
; [eval] p2_7 ==> bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
(push) ; 25
; [then-branch: 1571 | p2_7@271@01 | dead]
; [else-branch: 1571 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1571 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1572 | p1_7@270@01 | live]
; [else-branch: 1572 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1572 | p1_7@270@01]
; [eval] !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1)
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1573 | !(bool___unbox__(_, b_1@278@01)) | dead]
; [else-branch: 1573 | bool___unbox__(_, b_1@278@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1573 | bool___unbox__(_, b_1@278@01)]
(assert (bool___unbox__ $Snap.unit b_1@278@01))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (bool___unbox__ $Snap.unit b_1@278@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (bool___unbox__ $Snap.unit b_1@278@01))))
; [eval] p2_7 ==> !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
(push) ; 25
; [then-branch: 1574 | p2_7@271@01 | dead]
; [else-branch: 1574 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1574 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1575 | p1_7@270@01 | live]
; [else-branch: 1575 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1575 | p1_7@270@01]
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
(push) ; 27
; [then-branch: 1576 | False | live]
; [else-branch: 1576 | True | live]
(push) ; 28
; [then-branch: 1576 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1576 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
(push) ; 29
; [then-branch: 1577 | False | live]
; [else-branch: 1577 | True | live]
(push) ; 30
; [then-branch: 1577 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1577 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
(push) ; 31
; [then-branch: 1578 | False | live]
; [else-branch: 1578 | True | live]
(push) ; 32
; [then-branch: 1578 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1578 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))
(push) ; 25
; [then-branch: 1579 | p2_7@271@01 | dead]
; [else-branch: 1579 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1579 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(pop) ; 24
(pop) ; 23
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1580 | !(p1_7@270@01) | live]
; [else-branch: 1580 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1580 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1580 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1581 | False | live]
; [else-branch: 1581 | True | live]
(push) ; 26
; [then-branch: 1581 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1581 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1582 | !(p1_7@270@01) | dead]
; [else-branch: 1582 | p1_7@270@01 | live]
(push) ; 23
; [else-branch: 1582 | p1_7@270@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !p1_7
; [then-branch: 1583 | !(p1_7@270@01) | dead]
; [else-branch: 1583 | p1_7@270@01 | live]
(push) ; 21
; [else-branch: 1583 | p1_7@270@01]
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1584 | !(p1_7@270@01) | live]
; [else-branch: 1584 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1584 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1584 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1585 | False | live]
; [else-branch: 1585 | True | live]
(push) ; 22
; [then-branch: 1585 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1585 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 1586 | !(p1_7@270@01) | dead]
; [else-branch: 1586 | p1_7@270@01 | live]
(push) ; 19
; [else-branch: 1586 | p1_7@270@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !p1_7
; [then-branch: 1587 | !(p1_7@270@01) | dead]
; [else-branch: 1587 | p1_7@270@01 | live]
(push) ; 17
; [else-branch: 1587 | p1_7@270@01]
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 15
; [then-branch: 1588 | !(p1_7@270@01) | live]
; [else-branch: 1588 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1588 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1588 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1589 | False | live]
; [else-branch: 1589 | True | live]
(push) ; 18
; [then-branch: 1589 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1589 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 1590 | !(p1_7@270@01) | dead]
; [else-branch: 1590 | p1_7@270@01 | live]
(push) ; 15
; [else-branch: 1590 | p1_7@270@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !(p1_9 && (!ret1_1 && !except1_1))
; [eval] p1_9 && (!ret1_1 && !except1_1)
(push) ; 13
; [then-branch: 1591 | !(p1_9@390@01) | live]
; [else-branch: 1591 | p1_9@390@01 | live]
(push) ; 14
; [then-branch: 1591 | !(p1_9@390@01)]
(assert (not p1_9@390@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1591 | p1_9@390@01]
; [eval] !ret1_1
(push) ; 15
; [then-branch: 1592 | False | live]
; [else-branch: 1592 | True | live]
(push) ; 16
; [then-branch: 1592 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1592 | True]
; [eval] !except1_1
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 1593 | !(p1_9@390@01) | dead]
; [else-branch: 1593 | p1_9@390@01 | live]
(push) ; 13
; [else-branch: 1593 | p1_9@390@01]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !p1_9
(push) ; 11
(set-option :timeout 10)
(assert (not p1_9@390@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1594 | !(p1_9@390@01) | dead]
; [else-branch: 1594 | p1_9@390@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 1594 | p1_9@390@01]
(assert p1_9@390@01)
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 9
; [then-branch: 1595 | !(p1_8@383@01) | live]
; [else-branch: 1595 | p1_8@383@01 | live]
(push) ; 10
; [then-branch: 1595 | !(p1_8@383@01)]
(assert (not p1_8@383@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1595 | p1_8@383@01]
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1596 | False | live]
; [else-branch: 1596 | True | live]
(push) ; 12
; [then-branch: 1596 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1596 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 1597 | !(p1_8@383@01) | dead]
; [else-branch: 1597 | p1_8@383@01 | live]
(push) ; 9
; [else-branch: 1597 | p1_8@383@01]
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1598 | !(p1_8@383@01) | live]
; [else-branch: 1598 | p1_8@383@01 | live]
(push) ; 8
; [then-branch: 1598 | !(p1_8@383@01)]
(assert (not p1_8@383@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1598 | p1_8@383@01]
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1599 | False | live]
; [else-branch: 1599 | True | live]
(push) ; 10
; [then-branch: 1599 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1599 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1600 | !(p1_8@383@01) | dead]
; [else-branch: 1600 | p1_8@383@01 | live]
(push) ; 7
; [else-branch: 1600 | p1_8@383@01]
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 1491 | !(p1_8@383@01)]
(assert (not p1_8@383@01))
(pop) ; 5
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 5
; [then-branch: 1601 | !(p1_8@383@01) | live]
; [else-branch: 1601 | p1_8@383@01 | live]
(push) ; 6
; [then-branch: 1601 | !(p1_8@383@01)]
(assert (not p1_8@383@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1601 | p1_8@383@01]
(assert p1_8@383@01)
; [eval] !ret1_1
(push) ; 7
; [then-branch: 1602 | False | live]
; [else-branch: 1602 | True | live]
(push) ; 8
; [then-branch: 1602 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1602 | True]
; [eval] !except1_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_8@383@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_8@383@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1603 | !(p1_8@383@01) | live]
; [else-branch: 1603 | p1_8@383@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1603 | !(p1_8@383@01)]
(assert (not p1_8@383@01))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 6
; [then-branch: 1604 | !(p2_8@384@01) | live]
; [else-branch: 1604 | p2_8@384@01 | live]
(push) ; 7
; [then-branch: 1604 | !(p2_8@384@01)]
(assert (not p2_8@384@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1604 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 8
; [then-branch: 1605 | False | live]
; [else-branch: 1605 | True | live]
(push) ; 9
; [then-branch: 1605 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 1605 | True]
; [eval] !except2_1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_8@384@01 (not p2_8@384@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_8@384@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1606 | p2_8@384@01 | dead]
; [else-branch: 1606 | !(p2_8@384@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 1606 | !(p2_8@384@01)]
(assert (not p2_8@384@01))
(pop) ; 6
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 6
; [then-branch: 1607 | !(p2_8@384@01) | live]
; [else-branch: 1607 | p2_8@384@01 | live]
(push) ; 7
; [then-branch: 1607 | !(p2_8@384@01)]
(assert (not p2_8@384@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1607 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 8
; [then-branch: 1608 | False | live]
; [else-branch: 1608 | True | live]
(push) ; 9
; [then-branch: 1608 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 1608 | True]
; [eval] !except2_1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_8@384@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_8@384@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1609 | !(p2_8@384@01) | live]
; [else-branch: 1609 | p2_8@384@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1609 | !(p2_8@384@01)]
(assert (not p2_8@384@01))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1610 | !(p1_8@383@01) | live]
; [else-branch: 1610 | p1_8@383@01 | live]
(push) ; 8
; [then-branch: 1610 | !(p1_8@383@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1610 | p1_8@383@01]
(assert p1_8@383@01)
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1611 | False | live]
; [else-branch: 1611 | True | live]
(push) ; 10
; [then-branch: 1611 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1611 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1612 | p1_8@383@01 | dead]
; [else-branch: 1612 | !(p1_8@383@01) | live]
(push) ; 7
; [else-branch: 1612 | !(p1_8@383@01)]
(pop) ; 7
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 7
; [then-branch: 1613 | !(p1_8@383@01) | live]
; [else-branch: 1613 | p1_8@383@01 | live]
(push) ; 8
; [then-branch: 1613 | !(p1_8@383@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1613 | p1_8@383@01]
(assert p1_8@383@01)
; [eval] !ret1_1
(push) ; 9
; [then-branch: 1614 | False | live]
; [else-branch: 1614 | True | live]
(push) ; 10
; [then-branch: 1614 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1614 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_8@383@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1615 | !(p1_8@383@01) | live]
; [else-branch: 1615 | p1_8@383@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1615 | !(p1_8@383@01)]
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 8
; [then-branch: 1616 | !(p2_8@384@01) | live]
; [else-branch: 1616 | p2_8@384@01 | live]
(push) ; 9
; [then-branch: 1616 | !(p2_8@384@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1616 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1617 | False | live]
; [else-branch: 1617 | True | live]
(push) ; 11
; [then-branch: 1617 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1617 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1618 | p2_8@384@01 | dead]
; [else-branch: 1618 | !(p2_8@384@01) | live]
(push) ; 8
; [else-branch: 1618 | !(p2_8@384@01)]
(pop) ; 8
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 8
; [then-branch: 1619 | !(p2_8@384@01) | live]
; [else-branch: 1619 | p2_8@384@01 | live]
(push) ; 9
; [then-branch: 1619 | !(p2_8@384@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1619 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 10
; [then-branch: 1620 | False | live]
; [else-branch: 1620 | True | live]
(push) ; 11
; [then-branch: 1620 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 1620 | True]
; [eval] !except2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_8@384@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1621 | !(p2_8@384@01) | live]
; [else-branch: 1621 | p2_8@384@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1621 | !(p2_8@384@01)]
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 9
; [then-branch: 1622 | !(p1_8@383@01) | live]
; [else-branch: 1622 | p1_8@383@01 | live]
(push) ; 10
; [then-branch: 1622 | !(p1_8@383@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 1622 | p1_8@383@01]
(assert p1_8@383@01)
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1623 | False | live]
; [else-branch: 1623 | True | live]
(push) ; 12
; [then-branch: 1623 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1623 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 1624 | p1_8@383@01 | dead]
; [else-branch: 1624 | !(p1_8@383@01) | live]
(push) ; 9
; [else-branch: 1624 | !(p1_8@383@01)]
(pop) ; 9
; [eval] !(p1_8 && (!ret1_1 && !except1_1))
; [eval] p1_8 && (!ret1_1 && !except1_1)
(push) ; 9
; [then-branch: 1625 | !(p1_8@383@01) | live]
; [else-branch: 1625 | p1_8@383@01 | live]
(push) ; 10
; [then-branch: 1625 | !(p1_8@383@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 1625 | p1_8@383@01]
(assert p1_8@383@01)
; [eval] !ret1_1
(push) ; 11
; [then-branch: 1626 | False | live]
; [else-branch: 1626 | True | live]
(push) ; 12
; [then-branch: 1626 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1626 | True]
; [eval] !except1_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_8@383@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1627 | !(p1_8@383@01) | live]
; [else-branch: 1627 | p1_8@383@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1627 | !(p1_8@383@01)]
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1628 | !(p2_8@384@01) | live]
; [else-branch: 1628 | p2_8@384@01 | live]
(push) ; 11
; [then-branch: 1628 | !(p2_8@384@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 1628 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1629 | False | live]
; [else-branch: 1629 | True | live]
(push) ; 13
; [then-branch: 1629 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1629 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 1630 | p2_8@384@01 | dead]
; [else-branch: 1630 | !(p2_8@384@01) | live]
(push) ; 10
; [else-branch: 1630 | !(p2_8@384@01)]
(pop) ; 10
; [eval] !(p2_8 && (!ret2_1 && !except2_1))
; [eval] p2_8 && (!ret2_1 && !except2_1)
(push) ; 10
; [then-branch: 1631 | !(p2_8@384@01) | live]
; [else-branch: 1631 | p2_8@384@01 | live]
(push) ; 11
; [then-branch: 1631 | !(p2_8@384@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 1631 | p2_8@384@01]
(assert p2_8@384@01)
; [eval] !ret2_1
(push) ; 12
; [then-branch: 1632 | False | live]
; [else-branch: 1632 | True | live]
(push) ; 13
; [then-branch: 1632 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 1632 | True]
; [eval] !except2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_8@384@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1633 | !(p2_8@384@01) | live]
; [else-branch: 1633 | p2_8@384@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1633 | !(p2_8@384@01)]
; [exec]
; thisexcept1_1 := except1_1 && !bypass1_1
; [eval] except1_1 && !bypass1_1
; [exec]
; thisexcept2_1 := except2_1 && !bypass2_1
; [eval] except2_1 && !bypass2_1
; [exec]
; p1_9 := p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
; [eval] p1_7 && (thisexcept1_1 && issubtype(typeof(_err), MyException()))
(push) ; 11
; [then-branch: 1634 | !(p1_7@270@01) | live]
; [else-branch: 1634 | p1_7@270@01 | live]
(push) ; 12
; [then-branch: 1634 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1634 | p1_7@270@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [exec]
; p2_9 := p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
; [eval] p2_7 && (thisexcept2_1 && issubtype(typeof(_err_2), MyException()))
(push) ; 11
; [then-branch: 1635 | !(p2_7@271@01) | live]
; [else-branch: 1635 | p2_7@271@01 | live]
(push) ; 12
; [then-branch: 1635 | !(p2_7@271@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 1635 | p2_7@271@01]
(assert p2_7@271@01)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 1636 | False | dead]
; [else-branch: 1636 | True | live]
(push) ; 11
; [else-branch: 1636 | True]
(pop) ; 11
; [eval] !p1_9
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1637 | True | live]
; [else-branch: 1637 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1637 | True]
; [then-branch: 1638 | False | dead]
; [else-branch: 1638 | True | live]
(push) ; 12
; [else-branch: 1638 | True]
(pop) ; 12
; [eval] !p2_9
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1639 | True | live]
; [else-branch: 1639 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1639 | True]
; [eval] p1_9 && (!ret1_1 && !except1_1)
; [then-branch: 1640 | False | dead]
; [else-branch: 1640 | True | live]
(push) ; 13
; [else-branch: 1640 | True]
(pop) ; 13
; [eval] !(p1_9 && (!ret1_1 && !except1_1))
; [eval] p1_9 && (!ret1_1 && !except1_1)
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1641 | True | live]
; [else-branch: 1641 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1641 | True]
; [eval] p2_9 && (!ret2_1 && !except2_1)
; [then-branch: 1642 | False | dead]
; [else-branch: 1642 | True | live]
(push) ; 14
; [else-branch: 1642 | True]
(pop) ; 14
; [eval] !(p2_9 && (!ret2_1 && !except2_1))
; [eval] p2_9 && (!ret2_1 && !except2_1)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1643 | True | live]
; [else-branch: 1643 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1643 | True]
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 15
; [then-branch: 1644 | !(p1_7@270@01) | live]
; [else-branch: 1644 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1644 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1644 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1645 | False | live]
; [else-branch: 1645 | True | live]
(push) ; 18
; [then-branch: 1645 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1645 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1646 | p1_7@270@01 | live]
; [else-branch: 1646 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1646 | p1_7@270@01]
; [exec]
; _err := null
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1647 | !(p2_7@271@01) | live]
; [else-branch: 1647 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1647 | !(p2_7@271@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1647 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1648 | False | live]
; [else-branch: 1648 | True | live]
(push) ; 19
; [then-branch: 1648 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1648 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 1649 | p2_7@271@01 | dead]
; [else-branch: 1649 | !(p2_7@271@01) | live]
(push) ; 16
; [else-branch: 1649 | !(p2_7@271@01)]
(pop) ; 16
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 16
; [then-branch: 1650 | !(p2_7@271@01) | live]
; [else-branch: 1650 | p2_7@271@01 | live]
(push) ; 17
; [then-branch: 1650 | !(p2_7@271@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1650 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 18
; [then-branch: 1651 | False | live]
; [else-branch: 1651 | True | live]
(push) ; 19
; [then-branch: 1651 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1651 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1652 | !(p2_7@271@01) | live]
; [else-branch: 1652 | p2_7@271@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1652 | !(p2_7@271@01)]
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1653 | p1_7@270@01 | live]
; [else-branch: 1653 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1653 | p1_7@270@01]
; [exec]
; tmp_ret1_1 := ret1_1
; [exec]
; ret1_1 := oldret1_1
; [exec]
; tmp_except1_1 := except1_1
; [exec]
; except1_1 := oldexcept1_1
; [then-branch: 1654 | p2_7@271@01 | dead]
; [else-branch: 1654 | !(p2_7@271@01) | live]
(push) ; 18
; [else-branch: 1654 | !(p2_7@271@01)]
(pop) ; 18
; [eval] !p2_7
(push) ; 18
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1655 | !(p2_7@271@01) | live]
; [else-branch: 1655 | p2_7@271@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1655 | !(p2_7@271@01)]
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1656 | !(p1_7@270@01) | live]
; [else-branch: 1656 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1656 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1656 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1657 | False | live]
; [else-branch: 1657 | True | live]
(push) ; 22
; [then-branch: 1657 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1657 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1658 | p1_7@270@01 | live]
; [else-branch: 1658 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1658 | p1_7@270@01]
; [exec]
; x_2 := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] int___mul__(2, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@330@01 3301240))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@330@01 3301240))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@330@01 3301240)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@330@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@330@01 3301240)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))
(push) ; 20
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))
(pop) ; 20
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240)))))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240)))))
(declare-const x_2@396@01 $Ref)
(assert (=
  x_2@396@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@330@01 3301240))))))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@397@01 $Snap)
(assert (= $t@397@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 20
(pop) ; 20
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && (!ret2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1659 | !(p2_7@271@01) | live]
; [else-branch: 1659 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1659 | !(p2_7@271@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1659 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1660 | False | live]
; [else-branch: 1660 | True | live]
(push) ; 23
; [then-branch: 1660 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1660 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1661 | p2_7@271@01 | dead]
; [else-branch: 1661 | !(p2_7@271@01) | live]
(push) ; 20
; [else-branch: 1661 | !(p2_7@271@01)]
(pop) ; 20
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 20
; [then-branch: 1662 | !(p2_7@271@01) | live]
; [else-branch: 1662 | p2_7@271@01 | live]
(push) ; 21
; [then-branch: 1662 | !(p2_7@271@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1662 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 22
; [then-branch: 1663 | False | live]
; [else-branch: 1663 | True | live]
(push) ; 23
; [then-branch: 1663 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1663 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1664 | !(p2_7@271@01) | live]
; [else-branch: 1664 | p2_7@271@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1664 | !(p2_7@271@01)]
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1665 | p1_7@270@01 | live]
; [else-branch: 1665 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1665 | p1_7@270@01]
; [exec]
; ret1_1 := ret1_1 || tmp_ret1_1
; [eval] ret1_1 || tmp_ret1_1
(push) ; 22
; [then-branch: 1666 | False | live]
; [else-branch: 1666 | True | live]
(push) ; 23
; [then-branch: 1666 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1666 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [exec]
; except1_1 := except1_1 || tmp_except1_1
; [eval] except1_1 || tmp_except1_1
(push) ; 22
; [then-branch: 1667 | False | live]
; [else-branch: 1667 | True | live]
(push) ; 23
; [then-branch: 1667 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1667 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 1668 | p2_7@271@01 | dead]
; [else-branch: 1668 | !(p2_7@271@01) | live]
(push) ; 22
; [else-branch: 1668 | !(p2_7@271@01)]
(pop) ; 22
; [eval] !p2_7
(push) ; 22
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1669 | !(p2_7@271@01) | live]
; [else-branch: 1669 | p2_7@271@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1669 | !(p2_7@271@01)]
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1670 | !(p1_7@270@01) | live]
; [else-branch: 1670 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1670 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1670 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1671 | False | live]
; [else-branch: 1671 | True | live]
(push) ; 26
; [then-branch: 1671 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1671 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1672 | p1_7@270@01 | live]
; [else-branch: 1672 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1672 | p1_7@270@01]
; [exec]
; _res := _checkDefined(x_2, 3301240)
; [eval] _checkDefined(x_2, 3301240)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@396@01 3301240))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@396@01 3301240))
(declare-const _res@398@01 $Ref)
(assert (= _res@398@01 (_checkDefined $Snap.unit x_2@396@01 3301240)))
; [exec]
; ret1_1 := true
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1673 | !(p2_7@271@01) | live]
; [else-branch: 1673 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1673 | !(p2_7@271@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1673 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1674 | False | live]
; [else-branch: 1674 | True | live]
(push) ; 27
; [then-branch: 1674 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1674 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1675 | p2_7@271@01 | dead]
; [else-branch: 1675 | !(p2_7@271@01) | live]
(push) ; 24
; [else-branch: 1675 | !(p2_7@271@01)]
(pop) ; 24
; [eval] !(p2_7 && (!ret2_1 && !except2_1))
; [eval] p2_7 && (!ret2_1 && !except2_1)
(push) ; 24
; [then-branch: 1676 | !(p2_7@271@01) | live]
; [else-branch: 1676 | p2_7@271@01 | live]
(push) ; 25
; [then-branch: 1676 | !(p2_7@271@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1676 | p2_7@271@01]
(assert p2_7@271@01)
; [eval] !ret2_1
(push) ; 26
; [then-branch: 1677 | False | live]
; [else-branch: 1677 | True | live]
(push) ; 27
; [then-branch: 1677 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1677 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_7@271@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1678 | !(p2_7@271@01) | live]
; [else-branch: 1678 | p2_7@271@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1678 | !(p2_7@271@01)]
; [exec]
; assert (p1_7 ==> !except1_1) && (p2_7 ==> !except2_1)
; [eval] p1_7 ==> !except1_1
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1679 | p1_7@270@01 | live]
; [else-branch: 1679 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1679 | p1_7@270@01]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> !except2_1
(push) ; 25
; [then-branch: 1680 | p2_7@271@01 | dead]
; [else-branch: 1680 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1680 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> true
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1681 | p1_7@270@01 | live]
; [else-branch: 1681 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1681 | p1_7@270@01]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 25
; [then-branch: 1682 | p2_7@271@01 | dead]
; [else-branch: 1682 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1682 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), int())
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1683 | p1_7@270@01 | live]
; [else-branch: 1683 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1683 | p1_7@270@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@398@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@270@01
  (issubtype<Bool> (typeof<PyType> _res@398@01) (as int<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_2), int())
(push) ; 25
; [then-branch: 1684 | p2_7@271@01 | dead]
; [else-branch: 1684 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1684 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1685 | p1_7@270@01 | live]
; [else-branch: 1685 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1685 | p1_7@270@01]
; [eval] bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(-2))
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1686 | bool___unbox__(_, b_1@278@01) | dead]
; [else-branch: 1686 | !(bool___unbox__(_, b_1@278@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1686 | !(bool___unbox__(_, b_1@278@01))]
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (not (bool___unbox__ $Snap.unit b_1@278@01)))))
; [eval] p2_7 ==> bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(-2))
(push) ; 25
; [then-branch: 1687 | p2_7@271@01 | dead]
; [else-branch: 1687 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1687 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1688 | p1_7@270@01 | live]
; [else-branch: 1688 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1688 | p1_7@270@01]
; [eval] !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(0))
; [eval] !bool___unbox__(b_1)
; [eval] bool___unbox__(b_1)
(push) ; 27
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 28
(assert (not (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@278@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@278@01)))
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b_1@278@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1689 | !(bool___unbox__(_, b_1@278@01)) | live]
; [else-branch: 1689 | bool___unbox__(_, b_1@278@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1689 | !(bool___unbox__(_, b_1@278@01))]
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
; [eval] int___eq__(_res, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 29
(pop) ; 29
; Joined path conditions
(push) ; 29
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> _res@398@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@398@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 30
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@398@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 29
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@398@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@398@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit b_1@278@01))
  (and
    (not (bool___unbox__ $Snap.unit b_1@278@01))
    (issubtype<Bool> (typeof<PyType> _res@398@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@398@01 (__prim__int___box__ $Snap.unit 0)))))
(assert (not (bool___unbox__ $Snap.unit b_1@278@01)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  p1_7@270@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@278@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@278@01)
    (=>
      (not (bool___unbox__ $Snap.unit b_1@278@01))
      (and
        (not (bool___unbox__ $Snap.unit b_1@278@01))
        (issubtype<Bool> (typeof<PyType> _res@398@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@398@01 (__prim__int___box__ $Snap.unit 0))))
    (not (bool___unbox__ $Snap.unit b_1@278@01)))))
(push) ; 25
(assert (not (=>
  (and p1_7@270@01 (not (bool___unbox__ $Snap.unit b_1@278@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@398@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@270@01 (not (bool___unbox__ $Snap.unit b_1@278@01)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@398@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_7 ==> !bool___unbox__(b_1_0) ==> int___eq__(_res_2, __prim__int___box__(0))
(push) ; 25
; [then-branch: 1690 | p2_7@271@01 | dead]
; [else-branch: 1690 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1690 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p1_7 ==> (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@270@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1691 | p1_7@270@01 | live]
; [else-branch: 1691 | !(p1_7@270@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1691 | p1_7@270@01]
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
(push) ; 27
; [then-branch: 1692 | False | live]
; [else-branch: 1692 | True | live]
(push) ; 28
; [then-branch: 1692 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1692 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
(push) ; 29
; [then-branch: 1693 | False | live]
; [else-branch: 1693 | True | live]
(push) ; 30
; [then-branch: 1693 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1693 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
(push) ; 31
; [then-branch: 1694 | False | live]
; [else-branch: 1694 | True | live]
(push) ; 32
; [then-branch: 1694 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1694 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))
(push) ; 25
; [then-branch: 1695 | p2_7@271@01 | dead]
; [else-branch: 1695 | !(p2_7@271@01) | live]
(push) ; 26
; [else-branch: 1695 | !(p2_7@271@01)]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(pop) ; 24
(pop) ; 23
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 23
; [then-branch: 1696 | !(p1_7@270@01) | live]
; [else-branch: 1696 | p1_7@270@01 | live]
(push) ; 24
; [then-branch: 1696 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1696 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 25
; [then-branch: 1697 | False | live]
; [else-branch: 1697 | True | live]
(push) ; 26
; [then-branch: 1697 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1697 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1698 | !(p1_7@270@01) | dead]
; [else-branch: 1698 | p1_7@270@01 | live]
(push) ; 23
; [else-branch: 1698 | p1_7@270@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !p1_7
; [then-branch: 1699 | !(p1_7@270@01) | dead]
; [else-branch: 1699 | p1_7@270@01 | live]
(push) ; 21
; [else-branch: 1699 | p1_7@270@01]
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 19
; [then-branch: 1700 | !(p1_7@270@01) | live]
; [else-branch: 1700 | p1_7@270@01 | live]
(push) ; 20
; [then-branch: 1700 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1700 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 21
; [then-branch: 1701 | False | live]
; [else-branch: 1701 | True | live]
(push) ; 22
; [then-branch: 1701 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1701 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 1702 | !(p1_7@270@01) | dead]
; [else-branch: 1702 | p1_7@270@01 | live]
(push) ; 19
; [else-branch: 1702 | p1_7@270@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !p1_7
; [then-branch: 1703 | !(p1_7@270@01) | dead]
; [else-branch: 1703 | p1_7@270@01 | live]
(push) ; 17
; [else-branch: 1703 | p1_7@270@01]
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 15
; [then-branch: 1704 | !(p1_7@270@01) | live]
; [else-branch: 1704 | p1_7@270@01 | live]
(push) ; 16
; [then-branch: 1704 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1704 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 17
; [then-branch: 1705 | False | live]
; [else-branch: 1705 | True | live]
(push) ; 18
; [then-branch: 1705 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1705 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 1706 | !(p1_7@270@01) | dead]
; [else-branch: 1706 | p1_7@270@01 | live]
(push) ; 15
; [else-branch: 1706 | p1_7@270@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 1603 | p1_8@383@01]
(assert p1_8@383@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 1472 | p2_7@271@01]
(assert p2_7@271@01)
(pop) ; 4
(pop) ; 3
; [eval] !(p1_7 && (!ret1_1 && !except1_1))
; [eval] p1_7 && (!ret1_1 && !except1_1)
(push) ; 3
; [then-branch: 1707 | !(p1_7@270@01) | live]
; [else-branch: 1707 | p1_7@270@01 | live]
(push) ; 4
; [then-branch: 1707 | !(p1_7@270@01)]
(assert (not p1_7@270@01))
(pop) ; 4
(push) ; 4
; [else-branch: 1707 | p1_7@270@01]
; [eval] !ret1_1
(push) ; 5
; [then-branch: 1708 | False | live]
; [else-branch: 1708 | True | live]
(push) ; 6
; [then-branch: 1708 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 1708 | True]
; [eval] !except1_1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [then-branch: 1709 | !(p1_7@270@01) | dead]
; [else-branch: 1709 | p1_7@270@01 | live]
(push) ; 3
; [else-branch: 1709 | p1_7@270@01]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- m4 ----------
(declare-const p1_10@399@01 Bool)
(declare-const p2_10@400@01 Bool)
(declare-const _cthread_160@401@01 $Ref)
(declare-const _cthread_160_0@402@01 $Ref)
(declare-const _caller_measures_160@403@01 Seq<Measure$>)
(declare-const _caller_measures_160_0@404@01 Seq<Measure$>)
(declare-const _residue_160@405@01 $Perm)
(declare-const _residue_160_0@406@01 $Perm)
(declare-const b_2@407@01 $Ref)
(declare-const b_2_0@408@01 $Ref)
(declare-const c@409@01 $Ref)
(declare-const c_7@410@01 $Ref)
(declare-const _current_wait_level_160@411@01 $Perm)
(declare-const _current_wait_level_160_0@412@01 $Perm)
(declare-const _err@413@01 $Ref)
(declare-const _err_3@414@01 $Ref)
(declare-const p1_10@415@01 Bool)
(declare-const p2_10@416@01 Bool)
(declare-const _cthread_160@417@01 $Ref)
(declare-const _cthread_160_0@418@01 $Ref)
(declare-const _caller_measures_160@419@01 Seq<Measure$>)
(declare-const _caller_measures_160_0@420@01 Seq<Measure$>)
(declare-const _residue_160@421@01 $Perm)
(declare-const _residue_160_0@422@01 $Perm)
(declare-const b_2@423@01 $Ref)
(declare-const b_2_0@424@01 $Ref)
(declare-const c@425@01 $Ref)
(declare-const c_7@426@01 $Ref)
(declare-const _current_wait_level_160@427@01 $Perm)
(declare-const _current_wait_level_160_0@428@01 $Perm)
(declare-const _err@429@01 $Ref)
(declare-const _err_3@430@01 $Ref)
(push) ; 1
(declare-const $t@431@01 $Snap)
(assert (= $t@431@01 ($Snap.combine ($Snap.first $t@431@01) ($Snap.second $t@431@01))))
(assert (= ($Snap.first $t@431@01) $Snap.unit))
; [eval] p1_10 ==> _cthread_160 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_10@415@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1710 | p1_10@415@01 | live]
; [else-branch: 1710 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1710 | p1_10@415@01]
(assert p1_10@415@01)
; [eval] _cthread_160 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1710 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_10@415@01) p1_10@415@01))
(assert (=> p1_10@415@01 (not (= _cthread_160@417@01 $Ref.null))))
(assert (=
  ($Snap.second $t@431@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@431@01))
    ($Snap.second ($Snap.second $t@431@01)))))
(assert (= ($Snap.first ($Snap.second $t@431@01)) $Snap.unit))
; [eval] p2_10 ==> _cthread_160_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1711 | p2_10@416@01 | live]
; [else-branch: 1711 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1711 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] _cthread_160_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1711 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_10@416@01) p2_10@416@01))
(assert (=> p2_10@416@01 (not (= _cthread_160_0@418@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@431@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@431@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@431@01))) $Snap.unit))
; [eval] p1_10 ==> issubtype(typeof(_cthread_160), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_10@415@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1712 | p1_10@415@01 | live]
; [else-branch: 1712 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1712 | p1_10@415@01]
(assert p1_10@415@01)
; [eval] issubtype(typeof(_cthread_160), Thread_0())
; [eval] typeof(_cthread_160)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1712 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_10@415@01
  (issubtype<Bool> (typeof<PyType> _cthread_160@417@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@431@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@431@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@431@01))))
  $Snap.unit))
; [eval] p2_10 ==> issubtype(typeof(_cthread_160_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1713 | p2_10@416@01 | live]
; [else-branch: 1713 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1713 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] issubtype(typeof(_cthread_160_0), Thread_0())
; [eval] typeof(_cthread_160_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1713 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_10@416@01
  (issubtype<Bool> (typeof<PyType> _cthread_160_0@418@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))
  $Snap.unit))
; [eval] p1_10 ==> issubtype(typeof(b_2), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_10@415@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1714 | p1_10@415@01 | live]
; [else-branch: 1714 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1714 | p1_10@415@01]
(assert p1_10@415@01)
; [eval] issubtype(typeof(b_2), bool())
; [eval] typeof(b_2)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 1714 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_10@415@01
  (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))
  $Snap.unit))
; [eval] p2_10 ==> issubtype(typeof(b_2_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1715 | p2_10@416@01 | live]
; [else-branch: 1715 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1715 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] issubtype(typeof(b_2_0), bool())
; [eval] typeof(b_2_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 1715 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_10@416@01
  (issubtype<Bool> (typeof<PyType> b_2_0@424@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> issubtype(typeof(c), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_10@415@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1716 | p1_10@415@01 | live]
; [else-branch: 1716 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1716 | p1_10@415@01]
(assert p1_10@415@01)
; [eval] issubtype(typeof(c), Container())
; [eval] typeof(c)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 1716 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_10@415@01
  (issubtype<Bool> (typeof<PyType> c@425@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> issubtype(typeof(c_7), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1717 | p2_10@416@01 | live]
; [else-branch: 1717 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1717 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] issubtype(typeof(c_7), Container())
; [eval] typeof(c_7)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 1717 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_10@416@01
  (issubtype<Bool> (typeof<PyType> c_7@426@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1_10@415@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1718 | p1_10@415@01 | live]
; [else-branch: 1718 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 1718 | p1_10@415@01]
(assert p1_10@415@01)
(assert (not (= c@425@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1719 | p2_10@416@01 | live]
; [else-branch: 1719 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1719 | p2_10@416@01]
(assert p2_10@416@01)
(assert (not (= c_7@426@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
  $Snap.unit))
; [eval] p1_10 ==> issubtype(typeof(c.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1720 | p1_10@415@01 | live]
; [else-branch: 1720 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1720 | p1_10@415@01]
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_10@415@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
  $Snap.unit))
; [eval] p2_10 ==> issubtype(typeof(c_7.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1721 | p2_10@416@01 | live]
; [else-branch: 1721 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1721 | p2_10@416@01]
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_10@416@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1722 | p1_10@415@01 | live]
; [else-branch: 1722 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1722 | p1_10@415@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1723 | p2_10@416@01 | live]
; [else-branch: 1723 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1723 | p2_10@416@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@432@01 $Snap)
(assert (= $t@432@01 ($Snap.combine ($Snap.first $t@432@01) ($Snap.second $t@432@01))))
(assert (= ($Snap.first $t@432@01) $Snap.unit))
; [eval] p1_10 ==> (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_160) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1724 | p1_10@415@01 | live]
; [else-branch: 1724 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1724 | p1_10@415@01]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_160) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_160)
(push) ; 7
; [then-branch: 1725 | False | live]
; [else-branch: 1725 | True | live]
(push) ; 8
; [then-branch: 1725 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1725 | True]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_160)
(push) ; 9
; [then-branch: 1726 | False | live]
; [else-branch: 1726 | True | live]
(push) ; 10
; [then-branch: 1726 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1726 | True]
; [eval] _residue_160 <= _current_wait_level_160
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_10@415@01 (<= _residue_160@421@01 _current_wait_level_160@427@01)))
(assert (=
  ($Snap.second $t@432@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@432@01))
    ($Snap.second ($Snap.second $t@432@01)))))
(assert (= ($Snap.first ($Snap.second $t@432@01)) $Snap.unit))
; [eval] p2_10 ==> (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_160_0) && ((forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1727 | p2_10@416@01 | live]
; [else-branch: 1727 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1727 | p2_10@416@01]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_160_0) && ((forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_160_0)
(push) ; 7
; [then-branch: 1728 | False | live]
; [else-branch: 1728 | True | live]
(push) ; 8
; [then-branch: 1728 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1728 | True]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_160_0)
(push) ; 9
; [then-branch: 1729 | False | live]
; [else-branch: 1729 | True | live]
(push) ; 10
; [then-branch: 1729 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1729 | True]
; [eval] _residue_160_0 <= _current_wait_level_160_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_10@416@01 (<= _residue_160_0@422@01 _current_wait_level_160_0@428@01)))
(assert (=
  ($Snap.second ($Snap.second $t@432@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@432@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1730 | p1_10@415@01 | live]
; [else-branch: 1730 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1730 | p1_10@415@01]
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@429@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@429@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1731 | _err@429@01 == Null | live]
; [else-branch: 1731 | _err@429@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1731 | _err@429@01 == Null]
(assert (= _err@429@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@432@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@432@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@432@01)))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@432@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@432@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@432@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@432@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@432@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@432@01)))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@432@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@432@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@432@01))))) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@432@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1732 | p2_10@416@01 | live]
; [else-branch: 1732 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1732 | p2_10@416@01]
; [eval] _err_3 == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err_3@430@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err_3@430@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1733 | _err_3@430@01 == Null | live]
; [else-branch: 1733 | _err_3@430@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1733 | _err_3@430@01 == Null]
(assert (= _err_3@430@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))) (__prim__int___box__ $Snap.unit 0)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1734 | p1_10@415@01 | live]
; [else-branch: 1734 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1734 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 10
; [then-branch: 1735 | _err@429@01 == Null | live]
; [else-branch: 1735 | _err@429@01 != Null | live]
(push) ; 11
; [then-branch: 1735 | _err@429@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 1735 | _err@429@01 != Null]
(assert (not (= _err@429@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@429@01 $Ref.null)) (= _err@429@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1736 | _err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]) | dead]
; [else-branch: 1736 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1736 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1737 | p2_10@416@01 | live]
; [else-branch: 1737 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1737 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 12
; [then-branch: 1738 | _err_3@430@01 == Null | live]
; [else-branch: 1738 | _err_3@430@01 != Null | live]
(push) ; 13
; [then-branch: 1738 | _err_3@430@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 1738 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_3@430@01 $Ref.null)) (= _err_3@430@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1739 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]) | dead]
; [else-branch: 1739 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 1739 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1740 | p1_10@415@01 | live]
; [else-branch: 1740 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1740 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
; [then-branch: 1741 | _err@429@01 != Null | dead]
; [else-branch: 1741 | _err@429@01 == Null | live]
(push) ; 16
; [else-branch: 1741 | _err@429@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1742 | p2_10@416@01 | live]
; [else-branch: 1742 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1742 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 15
; [then-branch: 1743 | _err_3@430@01 != Null | dead]
; [else-branch: 1743 | _err_3@430@01 == Null | live]
(push) ; 16
; [else-branch: 1743 | _err_3@430@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1744 | p1_10@415@01 | live]
; [else-branch: 1744 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1744 | p1_10@415@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1745 | p2_10@416@01 | live]
; [else-branch: 1745 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1745 | p2_10@416@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 1733 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1746 | p1_10@415@01 | live]
; [else-branch: 1746 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1746 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 10
; [then-branch: 1747 | _err@429@01 == Null | live]
; [else-branch: 1747 | _err@429@01 != Null | live]
(push) ; 11
; [then-branch: 1747 | _err@429@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 1747 | _err@429@01 != Null]
(assert (not (= _err@429@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@429@01 $Ref.null)) (= _err@429@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1748 | _err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]) | dead]
; [else-branch: 1748 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1748 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1749 | p2_10@416@01 | live]
; [else-branch: 1749 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1749 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 12
; [then-branch: 1750 | _err_3@430@01 == Null | live]
; [else-branch: 1750 | _err_3@430@01 != Null | live]
(push) ; 13
; [then-branch: 1750 | _err_3@430@01 == Null]
(assert (= _err_3@430@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 1750 | _err_3@430@01 != Null]
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_3@430@01 $Ref.null)) (= _err_3@430@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_3@430@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1751 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]) | live]
; [else-branch: 1751 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1751 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])]
(assert (and
  (not (= _err_3@430@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1752 | p1_10@415@01 | live]
; [else-branch: 1752 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1752 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
; [then-branch: 1753 | _err@429@01 != Null | dead]
; [else-branch: 1753 | _err@429@01 == Null | live]
(push) ; 16
; [else-branch: 1753 | _err@429@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1754 | p2_10@416@01 | live]
; [else-branch: 1754 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1754 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_3@430@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1755 | _err_3@430@01 != Null | live]
; [else-branch: 1755 | _err_3@430@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1755 | _err_3@430@01 != Null]
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p2_10@416@01 (not (= _err_3@430@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1756 | p1_10@415@01 | live]
; [else-branch: 1756 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1756 | p1_10@415@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1757 | p2_10@416@01 | live]
; [else-branch: 1757 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1757 | p2_10@416@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 1751 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1758 | p1_10@415@01 | live]
; [else-branch: 1758 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1758 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
; [then-branch: 1759 | _err@429@01 != Null | dead]
; [else-branch: 1759 | _err@429@01 == Null | live]
(push) ; 16
; [else-branch: 1759 | _err@429@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1760 | p2_10@416@01 | live]
; [else-branch: 1760 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1760 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_3@430@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err_3@430@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1761 | _err_3@430@01 != Null | live]
; [else-branch: 1761 | _err_3@430@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1761 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err_3@430@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p2_10@416@01 (not (= _err_3@430@01 $Ref.null))))
(assert (=>
  (and p2_10@416@01 (not (= _err_3@430@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1762 | p1_10@415@01 | dead]
; [else-branch: 1762 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1762 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_10@415@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1763 | p2_10@416@01 | dead]
; [else-branch: 1763 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1763 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_10@416@01))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 1731 | _err@429@01 != Null]
(assert (not (= _err@429@01 $Ref.null)))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@432@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@432@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1764 | p2_10@416@01 | live]
; [else-branch: 1764 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1764 | p2_10@416@01]
; [eval] _err_3 == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err_3@430@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err_3@430@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1765 | _err_3@430@01 == Null | live]
; [else-branch: 1765 | _err_3@430@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1765 | _err_3@430@01 == Null]
(assert (= _err_3@430@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))) (__prim__int___box__ $Snap.unit 0))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1766 | p1_10@415@01 | live]
; [else-branch: 1766 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1766 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 10
; [then-branch: 1767 | _err@429@01 == Null | live]
; [else-branch: 1767 | _err@429@01 != Null | live]
(push) ; 11
; [then-branch: 1767 | _err@429@01 == Null]
(assert (= _err@429@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 1767 | _err@429@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@429@01 $Ref.null)) (= _err@429@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err@429@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1768 | _err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]) | live]
; [else-branch: 1768 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1768 | _err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType])]
(assert (and
  (not (= _err@429@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1769 | p2_10@416@01 | live]
; [else-branch: 1769 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1769 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 12
; [then-branch: 1770 | _err_3@430@01 == Null | live]
; [else-branch: 1770 | _err_3@430@01 != Null | live]
(push) ; 13
; [then-branch: 1770 | _err_3@430@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 1770 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_3@430@01 $Ref.null)) (= _err_3@430@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1771 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]) | dead]
; [else-branch: 1771 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 1771 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1772 | p1_10@415@01 | live]
; [else-branch: 1772 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1772 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@429@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1773 | _err@429@01 != Null | live]
; [else-branch: 1773 | _err@429@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1773 | _err@429@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_10@415@01 (not (= _err@429@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1774 | p2_10@416@01 | live]
; [else-branch: 1774 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1774 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 15
; [then-branch: 1775 | _err_3@430@01 != Null | dead]
; [else-branch: 1775 | _err_3@430@01 == Null | live]
(push) ; 16
; [else-branch: 1775 | _err_3@430@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1776 | p1_10@415@01 | live]
; [else-branch: 1776 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1776 | p1_10@415@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1777 | p2_10@416@01 | live]
; [else-branch: 1777 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1777 | p2_10@416@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 1768 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1778 | p2_10@416@01 | live]
; [else-branch: 1778 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1778 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 12
; [then-branch: 1779 | _err_3@430@01 == Null | live]
; [else-branch: 1779 | _err_3@430@01 != Null | live]
(push) ; 13
; [then-branch: 1779 | _err_3@430@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 1779 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_3@430@01 $Ref.null)) (= _err_3@430@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1780 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]) | dead]
; [else-branch: 1780 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 1780 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1781 | p1_10@415@01 | live]
; [else-branch: 1781 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1781 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@429@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@429@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1782 | _err@429@01 != Null | live]
; [else-branch: 1782 | _err@429@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1782 | _err@429@01 != Null]
(assert (not (= _err@429@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@429@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_10@415@01 (not (= _err@429@01 $Ref.null))))
(assert (=>
  (and p1_10@415@01 (not (= _err@429@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1783 | p2_10@416@01 | dead]
; [else-branch: 1783 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1783 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_10@416@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1784 | p1_10@415@01 | dead]
; [else-branch: 1784 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1784 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_10@415@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 13
; [then-branch: 1785 | p2_10@416@01 | dead]
; [else-branch: 1785 | !(p2_10@416@01) | live]
(push) ; 14
; [else-branch: 1785 | !(p2_10@416@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 1765 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1786 | p1_10@415@01 | live]
; [else-branch: 1786 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1786 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 10
; [then-branch: 1787 | _err@429@01 == Null | live]
; [else-branch: 1787 | _err@429@01 != Null | live]
(push) ; 11
; [then-branch: 1787 | _err@429@01 == Null]
(assert (= _err@429@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 1787 | _err@429@01 != Null]
(assert (not (= _err@429@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@429@01 $Ref.null)) (= _err@429@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err@429@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1788 | _err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]) | live]
; [else-branch: 1788 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1788 | _err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType])]
(assert (and
  (not (= _err@429@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1789 | p2_10@416@01 | live]
; [else-branch: 1789 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1789 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 12
; [then-branch: 1790 | _err_3@430@01 == Null | live]
; [else-branch: 1790 | _err_3@430@01 != Null | live]
(push) ; 13
; [then-branch: 1790 | _err_3@430@01 == Null]
(assert (= _err_3@430@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 1790 | _err_3@430@01 != Null]
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_3@430@01 $Ref.null)) (= _err_3@430@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_3@430@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1791 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]) | live]
; [else-branch: 1791 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1791 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])]
(assert (and
  (not (= _err_3@430@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 13
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1792 | p1_10@415@01 | live]
; [else-branch: 1792 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1792 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@429@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1793 | _err@429@01 != Null | live]
; [else-branch: 1793 | _err@429@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1793 | _err@429@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_10@415@01 (not (= _err@429@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1794 | p2_10@416@01 | live]
; [else-branch: 1794 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1794 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_3@430@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1795 | _err_3@430@01 != Null | live]
; [else-branch: 1795 | _err_3@430@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1795 | _err_3@430@01 != Null]
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p2_10@416@01 (not (= _err_3@430@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1796 | p1_10@415@01 | live]
; [else-branch: 1796 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1796 | p1_10@415@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1797 | p2_10@416@01 | live]
; [else-branch: 1797 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1797 | p2_10@416@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 1791 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1798 | p1_10@415@01 | live]
; [else-branch: 1798 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1798 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@429@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1799 | _err@429@01 != Null | live]
; [else-branch: 1799 | _err@429@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1799 | _err@429@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_10@415@01 (not (= _err@429@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1800 | p2_10@416@01 | live]
; [else-branch: 1800 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1800 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_3@430@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err_3@430@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1801 | _err_3@430@01 != Null | live]
; [else-branch: 1801 | _err_3@430@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1801 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err_3@430@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p2_10@416@01 (not (= _err_3@430@01 $Ref.null))))
(assert (=>
  (and p2_10@416@01 (not (= _err_3@430@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1802 | p1_10@415@01 | dead]
; [else-branch: 1802 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1802 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_10@415@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1803 | p2_10@416@01 | dead]
; [else-branch: 1803 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1803 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_10@416@01))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 1788 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1804 | p2_10@416@01 | live]
; [else-branch: 1804 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1804 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 12
; [then-branch: 1805 | _err_3@430@01 == Null | live]
; [else-branch: 1805 | _err_3@430@01 != Null | live]
(push) ; 13
; [then-branch: 1805 | _err_3@430@01 == Null]
(assert (= _err_3@430@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 1805 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_3@430@01 $Ref.null)) (= _err_3@430@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_3@430@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1806 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]) | live]
; [else-branch: 1806 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1806 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])]
(assert (and
  (not (= _err_3@430@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1807 | p1_10@415@01 | live]
; [else-branch: 1807 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1807 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@429@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@429@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1808 | _err@429@01 != Null | live]
; [else-branch: 1808 | _err@429@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1808 | _err@429@01 != Null]
(assert (not (= _err@429@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@429@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_10@415@01 (not (= _err@429@01 $Ref.null))))
(assert (=>
  (and p1_10@415@01 (not (= _err@429@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1809 | p2_10@416@01 | dead]
; [else-branch: 1809 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1809 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_10@416@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1810 | p1_10@415@01 | dead]
; [else-branch: 1810 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1810 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_10@415@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 13
; [then-branch: 1811 | p2_10@416@01 | dead]
; [else-branch: 1811 | !(p2_10@416@01) | live]
(push) ; 14
; [else-branch: 1811 | !(p2_10@416@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 1806 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1812 | p1_10@415@01 | live]
; [else-branch: 1812 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1812 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@429@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@429@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1813 | _err@429@01 != Null | live]
; [else-branch: 1813 | _err@429@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1813 | _err@429@01 != Null]
(assert (not (= _err@429@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@429@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_10@415@01 (not (= _err@429@01 $Ref.null))))
(assert (=>
  (and p1_10@415@01 (not (= _err@429@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1814 | p2_10@416@01 | dead]
; [else-branch: 1814 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1814 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_10@416@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1815 | p1_10@415@01 | dead]
; [else-branch: 1815 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1815 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_10@415@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 13
; [then-branch: 1816 | p2_10@416@01 | dead]
; [else-branch: 1816 | !(p2_10@416@01) | live]
(push) ; 14
; [else-branch: 1816 | !(p2_10@416@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_2: Bool
(declare-const except1_2@433@01 Bool)
; [exec]
; var except2_2: Bool
(declare-const except2_2@434@01 Bool)
; [exec]
; var error_2: Ref
(declare-const error_2@435@01 $Ref)
; [exec]
; var error_2_0: Ref
(declare-const error_2_0@436@01 $Ref)
; [exec]
; var try_finally_10: Int
(declare-const try_finally_10@437@01 Int)
; [exec]
; var try_finally_10_0: Int
(declare-const try_finally_10_0@438@01 Int)
; [exec]
; var b_7: Ref
(declare-const b_7@439@01 $Ref)
; [exec]
; var b_7_0: Ref
(declare-const b_7_0@440@01 $Ref)
; [exec]
; var c_3: Ref
(declare-const c_3@441@01 $Ref)
; [exec]
; var c_3_0: Ref
(declare-const c_3_0@442@01 $Ref)
; [exec]
; var MyException_res_2: Ref
(declare-const MyException_res_2@443@01 $Ref)
; [exec]
; var MyException_res_2_0: Ref
(declare-const MyException_res_2_0@444@01 $Ref)
; [exec]
; var MyException_res_3: Ref
(declare-const MyException_res_3@445@01 $Ref)
; [exec]
; var MyException_res_3_0: Ref
(declare-const MyException_res_3_0@446@01 $Ref)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@447@01 $Perm)
; [exec]
; var _cwl_160_0: Perm
(declare-const _cwl_160_0@448@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@449@01 Seq<Measure$>)
; [exec]
; var _method_measures_160_0: Seq[Measure$]
(declare-const _method_measures_160_0@450@01 Seq<Measure$>)
; [exec]
; var bypass1_2: Bool
(declare-const bypass1_2@451@01 Bool)
; [exec]
; var bypass2_2: Bool
(declare-const bypass2_2@452@01 Bool)
; [exec]
; var thisexcept1_2: Bool
(declare-const thisexcept1_2@453@01 Bool)
; [exec]
; var thisexcept2_2: Bool
(declare-const thisexcept2_2@454@01 Bool)
; [exec]
; var p1_12: Bool
(declare-const p1_12@455@01 Bool)
; [exec]
; var p2_12: Bool
(declare-const p2_12@456@01 Bool)
; [exec]
; var p1_11: Bool
(declare-const p1_11@457@01 Bool)
; [exec]
; var p2_11: Bool
(declare-const p2_11@458@01 Bool)
; [exec]
; var p3_2: Bool
(declare-const p3_2@459@01 Bool)
; [exec]
; var p4_2: Bool
(declare-const p4_2@460@01 Bool)
; [exec]
; var tmp_2: Ref
(declare-const tmp_2@461@01 $Ref)
; [exec]
; var p1_13: Bool
(declare-const p1_13@462@01 Bool)
; [exec]
; var p2_13: Bool
(declare-const p2_13@463@01 Bool)
; [exec]
; var p3_3: Bool
(declare-const p3_3@464@01 Bool)
; [exec]
; var p4_3: Bool
(declare-const p4_3@465@01 Bool)
; [exec]
; var tmp_3: Ref
(declare-const tmp_3@466@01 $Ref)
; [exec]
; var p1_14: Bool
(declare-const p1_14@467@01 Bool)
; [exec]
; var p2_14: Bool
(declare-const p2_14@468@01 Bool)
; [exec]
; var p3_4: Bool
(declare-const p3_4@469@01 Bool)
; [exec]
; var p4_4: Bool
(declare-const p4_4@470@01 Bool)
; [exec]
; inhale p1_10
(declare-const $t@471@01 $Snap)
(assert (= $t@471@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; except1_2 := false
; [exec]
; except2_2 := false
; [eval] p1_10 && !except1_2
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1817 | !(p1_10@415@01) | live]
; [else-branch: 1817 | p1_10@415@01 | live]
(push) ; 6
; [then-branch: 1817 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1817 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_10@415@01 (not p1_10@415@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1818 | p1_10@415@01 | live]
; [else-branch: 1818 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1818 | p1_10@415@01]
; [exec]
; _method_measures_160 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; b_7 := b_2
; [exec]
; c_3 := c
; [eval] p2_10 && !except2_2
(push) ; 6
; [then-branch: 1819 | !(p2_10@416@01) | live]
; [else-branch: 1819 | p2_10@416@01 | live]
(push) ; 7
; [then-branch: 1819 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1819 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_10@416@01 (not p2_10@416@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1820 | p2_10@416@01 | live]
; [else-branch: 1820 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1820 | p2_10@416@01]
; [exec]
; _method_measures_160_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err_3 := null
; [exec]
; b_7_0 := b_2_0
; [exec]
; c_3_0 := c_7
; [exec]
; bypass1_2 := !(p1_10 && !except1_2)
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 7
; [then-branch: 1821 | !(p1_10@415@01) | live]
; [else-branch: 1821 | p1_10@415@01 | live]
(push) ; 8
; [then-branch: 1821 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1821 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1_2@472@01 Bool)
(assert (= bypass1_2@472@01 (not p1_10@415@01)))
; [exec]
; bypass2_2 := !(p2_10 && !except2_2)
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 7
; [then-branch: 1822 | !(p2_10@416@01) | live]
; [else-branch: 1822 | p2_10@416@01 | live]
(push) ; 8
; [then-branch: 1822 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1822 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2_2@473@01 Bool)
(assert (= bypass2_2@473@01 (not p2_10@416@01)))
; [exec]
; p1_11 := p1_10 && (!except1_2 && bool___unbox__(b_7))
; [eval] p1_10 && (!except1_2 && bool___unbox__(b_7))
(push) ; 7
; [then-branch: 1823 | !(p1_10@415@01) | live]
; [else-branch: 1823 | p1_10@415@01 | live]
(push) ; 8
; [then-branch: 1823 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1823 | p1_10@415@01]
; [eval] !except1_2
(push) ; 9
; [then-branch: 1824 | False | live]
; [else-branch: 1824 | True | live]
(push) ; 10
; [then-branch: 1824 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1824 | True]
; [eval] bool___unbox__(b_7)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_2@423@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2@423@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2@423@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_10@415@01
  (and
    (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_2@423@01))))
(declare-const p1_11@474@01 Bool)
(assert (= p1_11@474@01 (and p1_10@415@01 (bool___unbox__ $Snap.unit b_2@423@01))))
; [exec]
; p2_11 := p2_10 && (!except2_2 && bool___unbox__(b_7_0))
; [eval] p2_10 && (!except2_2 && bool___unbox__(b_7_0))
(push) ; 7
; [then-branch: 1825 | !(p2_10@416@01) | live]
; [else-branch: 1825 | p2_10@416@01 | live]
(push) ; 8
; [then-branch: 1825 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1825 | p2_10@416@01]
; [eval] !except2_2
(push) ; 9
; [then-branch: 1826 | False | live]
; [else-branch: 1826 | True | live]
(push) ; 10
; [then-branch: 1826 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1826 | True]
; [eval] bool___unbox__(b_7_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_2_0@424@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_2_0@424@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_2_0@424@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2_0@424@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2_0@424@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2_0@424@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2_0@424@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_10@416@01
  (and
    (issubtype<Bool> (typeof<PyType> b_2_0@424@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_2_0@424@01))))
(declare-const p2_11@475@01 Bool)
(assert (= p2_11@475@01 (and p2_10@416@01 (bool___unbox__ $Snap.unit b_2_0@424@01))))
; [exec]
; p3_2 := p1_10 && (!except1_2 && !bool___unbox__(b_7))
; [eval] p1_10 && (!except1_2 && !bool___unbox__(b_7))
(push) ; 7
; [then-branch: 1827 | !(p1_10@415@01) | live]
; [else-branch: 1827 | p1_10@415@01 | live]
(push) ; 8
; [then-branch: 1827 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1827 | p1_10@415@01]
; [eval] !except1_2
(push) ; 9
; [then-branch: 1828 | False | live]
; [else-branch: 1828 | True | live]
(push) ; 10
; [then-branch: 1828 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1828 | True]
; [eval] !bool___unbox__(b_7)
; [eval] bool___unbox__(b_7)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_2@423@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2@423@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2@423@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p3_2@476@01 Bool)
(assert (= p3_2@476@01 (and p1_10@415@01 (not (bool___unbox__ $Snap.unit b_2@423@01)))))
; [exec]
; p4_2 := p2_10 && (!except2_2 && !bool___unbox__(b_7_0))
; [eval] p2_10 && (!except2_2 && !bool___unbox__(b_7_0))
(push) ; 7
; [then-branch: 1829 | !(p2_10@416@01) | live]
; [else-branch: 1829 | p2_10@416@01 | live]
(push) ; 8
; [then-branch: 1829 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1829 | p2_10@416@01]
; [eval] !except2_2
(push) ; 9
; [then-branch: 1830 | False | live]
; [else-branch: 1830 | True | live]
(push) ; 10
; [then-branch: 1830 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1830 | True]
; [eval] !bool___unbox__(b_7_0)
; [eval] bool___unbox__(b_7_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_2_0@424@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_2_0@424@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_2_0@424@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2_0@424@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2_0@424@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2_0@424@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2_0@424@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p4_2@477@01 Bool)
(assert (= p4_2@477@01 (and p2_10@416@01 (not (bool___unbox__ $Snap.unit b_2_0@424@01)))))
; [exec]
; tmp_2 := new()
(declare-const tmp_2@478@01 $Ref)
(assert (not (= tmp_2@478@01 $Ref.null)))
(assert (not (= tmp_2@478@01 tmp_3@466@01)))
(assert (not (= tmp_2@478@01 MyException_res_3@445@01)))
(assert (not (= tmp_2@478@01 MyException_res_2_0@444@01)))
(assert (not (= tmp_2@478@01 c_7@426@01)))
(assert (not (= tmp_2@478@01 b_2_0@424@01)))
(assert (not
  (=
    tmp_2@478@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))
(assert (not
  (=
    tmp_2@478@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
(assert (not (= tmp_2@478@01 error_2_0@436@01)))
(assert (not (= tmp_2@478@01 MyException_res_3_0@446@01)))
(assert (not (= tmp_2@478@01 error_2@435@01)))
(assert (not (= tmp_2@478@01 c@425@01)))
(assert (not (= tmp_2@478@01 _cthread_160_0@418@01)))
(assert (not (= tmp_2@478@01 tmp_2@461@01)))
(assert (not (= tmp_2@478@01 _cthread_160@417@01)))
(assert (not (= tmp_2@478@01 b_2@423@01)))
(assert (not (= tmp_2@478@01 MyException_res_2@443@01)))
; [eval] p1_11 && !except1_2
(push) ; 7
; [then-branch: 1831 | !(p1_11@474@01) | live]
; [else-branch: 1831 | p1_11@474@01 | live]
(push) ; 8
; [then-branch: 1831 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1831 | p1_11@474@01]
(assert p1_11@474@01)
; [eval] !except1_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_11@474@01 (not p1_11@474@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_11@474@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_11@474@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1832 | p1_11@474@01 | live]
; [else-branch: 1832 | !(p1_11@474@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1832 | p1_11@474@01]
(assert p1_11@474@01)
; [exec]
; MyException_res_2 := tmp_2
; [eval] p2_11 && !except2_2
(push) ; 8
; [then-branch: 1833 | !(p2_11@475@01) | live]
; [else-branch: 1833 | p2_11@475@01 | live]
(push) ; 9
; [then-branch: 1833 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1833 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_11@475@01 (not p2_11@475@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_11@475@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_11@475@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1834 | p2_11@475@01 | live]
; [else-branch: 1834 | !(p2_11@475@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1834 | p2_11@475@01]
(assert p2_11@475@01)
; [exec]
; MyException_res_2_0 := tmp_2
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 1835 | !(p1_11@474@01) | live]
; [else-branch: 1835 | p1_11@474@01 | live]
(push) ; 10
; [then-branch: 1835 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1835 | p1_11@474@01]
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_11@474@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1836 | p1_11@474@01 | live]
; [else-branch: 1836 | !(p1_11@474@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1836 | p1_11@474@01]
; [exec]
; inhale typeof(MyException_res_2) == MyException()
(declare-const $t@479@01 $Snap)
(assert (= $t@479@01 $Snap.unit))
; [eval] typeof(MyException_res_2) == MyException()
; [eval] typeof(MyException_res_2)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_2@478@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_11 && !except2_2
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1837 | !(p2_11@475@01) | live]
; [else-branch: 1837 | p2_11@475@01 | live]
(push) ; 11
; [then-branch: 1837 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 11
(push) ; 11
; [else-branch: 1837 | p2_11@475@01]
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_11@475@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1838 | p2_11@475@01 | live]
; [else-branch: 1838 | !(p2_11@475@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1838 | p2_11@475@01]
; [exec]
; inhale typeof(MyException_res_2_0) == MyException()
(declare-const $t@480@01 $Snap)
(assert (= $t@480@01 $Snap.unit))
; [eval] typeof(MyException_res_2_0) == MyException()
; [eval] typeof(MyException_res_2_0)
; [eval] MyException()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_11 && !except1_2
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1839 | !(p1_11@474@01) | live]
; [else-branch: 1839 | p1_11@474@01 | live]
(push) ; 12
; [then-branch: 1839 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1839 | p1_11@474@01]
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_11@474@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1840 | p1_11@474@01 | live]
; [else-branch: 1840 | !(p1_11@474@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1840 | p1_11@474@01]
; [exec]
; _err := MyException_res_2
; [exec]
; except1_2 := true
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 1841 | !(p2_11@475@01) | live]
; [else-branch: 1841 | p2_11@475@01 | live]
(push) ; 13
; [then-branch: 1841 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1841 | p2_11@475@01]
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_11@475@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1842 | p2_11@475@01 | live]
; [else-branch: 1842 | !(p2_11@475@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1842 | p2_11@475@01]
; [exec]
; _err_3 := MyException_res_2_0
; [exec]
; except2_2 := true
; [exec]
; thisexcept1_2 := except1_2 && !bypass1_2
; [eval] except1_2 && !bypass1_2
(push) ; 13
; [then-branch: 1843 | False | live]
; [else-branch: 1843 | True | live]
(push) ; 14
; [then-branch: 1843 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1843 | True]
; [eval] !bypass1_2
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_2@481@01 Bool)
(assert (= thisexcept1_2@481@01 (not bypass1_2@472@01)))
; [exec]
; thisexcept2_2 := except2_2 && !bypass2_2
; [eval] except2_2 && !bypass2_2
(push) ; 13
; [then-branch: 1844 | False | live]
; [else-branch: 1844 | True | live]
(push) ; 14
; [then-branch: 1844 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1844 | True]
; [eval] !bypass2_2
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_2@482@01 Bool)
(assert (= thisexcept2_2@482@01 (not bypass2_2@473@01)))
; [exec]
; p1_12 := p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
; [eval] p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 1845 | !(p1_10@415@01) | live]
; [else-branch: 1845 | p1_10@415@01 | live]
(push) ; 14
; [then-branch: 1845 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1845 | p1_10@415@01]
(push) ; 15
; [then-branch: 1846 | !(thisexcept1_2@481@01) | live]
; [else-branch: 1846 | thisexcept1_2@481@01 | live]
(push) ; 16
; [then-branch: 1846 | !(thisexcept1_2@481@01)]
(assert (not thisexcept1_2@481@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1846 | thisexcept1_2@481@01]
(assert thisexcept1_2@481@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_2@481@01 (not thisexcept1_2@481@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=> p1_10@415@01 (or thisexcept1_2@481@01 (not thisexcept1_2@481@01))))
(declare-const p1_12@483@01 Bool)
(assert (=
  p1_12@483@01
  (and
    p1_10@415@01
    (and
      thisexcept1_2@481@01
      (issubtype<Bool> (typeof<PyType> tmp_2@478@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_12 := p2_10 &&
;   (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
; [eval] p2_10 && (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
(push) ; 13
; [then-branch: 1847 | !(p2_10@416@01) | live]
; [else-branch: 1847 | p2_10@416@01 | live]
(push) ; 14
; [then-branch: 1847 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1847 | p2_10@416@01]
(push) ; 15
; [then-branch: 1848 | !(thisexcept2_2@482@01) | live]
; [else-branch: 1848 | thisexcept2_2@482@01 | live]
(push) ; 16
; [then-branch: 1848 | !(thisexcept2_2@482@01)]
(assert (not thisexcept2_2@482@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1848 | thisexcept2_2@482@01]
(assert thisexcept2_2@482@01)
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_2@482@01 (not thisexcept2_2@482@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=> p2_10@416@01 (or thisexcept2_2@482@01 (not thisexcept2_2@482@01))))
(declare-const p2_12@484@01 Bool)
(assert (=
  p2_12@484@01
  (and
    p2_10@416@01
    (and
      thisexcept2_2@482@01
      (issubtype<Bool> (typeof<PyType> tmp_2@478@01) (as MyException<PyType>  PyType))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_12@483@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not p1_12@483@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1849 | p1_12@483@01 | live]
; [else-branch: 1849 | !(p1_12@483@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1849 | p1_12@483@01]
(assert p1_12@483@01)
; [exec]
; except1_2 := false
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_12@484@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not p2_12@484@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1850 | p2_12@484@01 | live]
; [else-branch: 1850 | !(p2_12@484@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1850 | p2_12@484@01]
(assert p2_12@484@01)
; [exec]
; except2_2 := false
; [exec]
; p1_13 := p1_12 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_12 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
(push) ; 15
; [then-branch: 1851 | !(p1_12@483@01) | live]
; [else-branch: 1851 | p1_12@483@01 | live]
(push) ; 16
; [then-branch: 1851 | !(p1_12@483@01)]
(assert (not p1_12@483@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1851 | p1_12@483@01]
; [eval] !except1_2
(push) ; 17
; [then-branch: 1852 | False | live]
; [else-branch: 1852 | True | live]
(push) ; 18
; [then-branch: 1852 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1852 | True]
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p1_12@483@01 (not p1_12@483@01)))
; [exec]
; p2_13 := p2_12 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_12 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
(push) ; 15
; [then-branch: 1853 | !(p2_12@484@01) | live]
; [else-branch: 1853 | p2_12@484@01 | live]
(push) ; 16
; [then-branch: 1853 | !(p2_12@484@01)]
(assert (not p2_12@484@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1853 | p2_12@484@01]
; [eval] !except2_2
(push) ; 17
; [then-branch: 1854 | False | live]
; [else-branch: 1854 | True | live]
(push) ; 18
; [then-branch: 1854 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1854 | True]
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p2_12@484@01 (not p2_12@484@01)))
; [exec]
; p3_3 := p1_12 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_12 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
(push) ; 15
; [then-branch: 1855 | !(p1_12@483@01) | live]
; [else-branch: 1855 | p1_12@483@01 | live]
(push) ; 16
; [then-branch: 1855 | !(p1_12@483@01)]
(assert (not p1_12@483@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1855 | p1_12@483@01]
; [eval] !except1_2
(push) ; 17
; [then-branch: 1856 | False | live]
; [else-branch: 1856 | True | live]
(push) ; 18
; [then-branch: 1856 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1856 | True]
; [eval] !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p4_3 := p2_12 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_12 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
(push) ; 15
; [then-branch: 1857 | !(p2_12@484@01) | live]
; [else-branch: 1857 | p2_12@484@01 | live]
(push) ; 16
; [then-branch: 1857 | !(p2_12@484@01)]
(assert (not p2_12@484@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1857 | p2_12@484@01]
; [eval] !except2_2
(push) ; 17
; [then-branch: 1858 | False | live]
; [else-branch: 1858 | True | live]
(push) ; 18
; [then-branch: 1858 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1858 | True]
; [eval] !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] p1_13 && !except1_2
; [then-branch: 1859 | False | dead]
; [else-branch: 1859 | True | live]
(push) ; 15
; [else-branch: 1859 | True]
(pop) ; 15
; [eval] !(p1_13 && !except1_2)
; [eval] p1_13 && !except1_2
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1860 | True | live]
; [else-branch: 1860 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1860 | True]
; [eval] p2_13 && !except2_2
; [then-branch: 1861 | False | dead]
; [else-branch: 1861 | True | live]
(push) ; 16
; [else-branch: 1861 | True]
(pop) ; 16
; [eval] !(p2_13 && !except2_2)
; [eval] p2_13 && !except2_2
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1862 | True | live]
; [else-branch: 1862 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1862 | True]
; [eval] p1_12 && !except1_2
(push) ; 17
; [then-branch: 1863 | !(p1_12@483@01) | live]
; [else-branch: 1863 | p1_12@483@01 | live]
(push) ; 18
; [then-branch: 1863 | !(p1_12@483@01)]
(assert (not p1_12@483@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1863 | p1_12@483@01]
; [eval] !except1_2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_12@483@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1864 | p1_12@483@01 | live]
; [else-branch: 1864 | !(p1_12@483@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1864 | p1_12@483@01]
; [exec]
; c_3.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 18
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 18
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@485@01 $Ref)
(assert (= Container_value@485@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p2_12 && !except2_2
(push) ; 18
; [then-branch: 1865 | !(p2_12@484@01) | live]
; [else-branch: 1865 | p2_12@484@01 | live]
(push) ; 19
; [then-branch: 1865 | !(p2_12@484@01)]
(assert (not p2_12@484@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1865 | p2_12@484@01]
; [eval] !except2_2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_12@484@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1866 | p2_12@484@01 | live]
; [else-branch: 1866 | !(p2_12@484@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1866 | p2_12@484@01]
; [exec]
; c_3_0.Container_valuep := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 19
(pop) ; 19
; Joined path conditions
(declare-const Container_valuep@486@01 $Ref)
(assert (= Container_valuep@486@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; tmp_3 := new()
(declare-const tmp_3@487@01 $Ref)
(assert (not (= tmp_3@487@01 $Ref.null)))
(assert (not (= tmp_3@487@01 tmp_3@466@01)))
(assert (not (= tmp_3@487@01 MyException_res_3@445@01)))
(assert (not (= tmp_3@487@01 c_7@426@01)))
(assert (not (= tmp_3@487@01 b_2_0@424@01)))
(assert (not (= tmp_3@487@01 error_2_0@436@01)))
(assert (not (= tmp_3@487@01 MyException_res_3_0@446@01)))
(assert (not (= tmp_3@487@01 error_2@435@01)))
(assert (not (= tmp_3@487@01 tmp_2@478@01)))
(assert (not (= tmp_3@487@01 c@425@01)))
(assert (not (= tmp_3@487@01 _cthread_160_0@418@01)))
(assert (not (= tmp_3@487@01 Container_value@485@01)))
(assert (not (= tmp_3@487@01 _cthread_160@417@01)))
(assert (not (= tmp_3@487@01 b_2@423@01)))
(assert (not (= tmp_3@487@01 Container_valuep@486@01)))
; [eval] p1_12 && !except1_2
(push) ; 19
; [then-branch: 1867 | !(p1_12@483@01) | live]
; [else-branch: 1867 | p1_12@483@01 | live]
(push) ; 20
; [then-branch: 1867 | !(p1_12@483@01)]
(assert (not p1_12@483@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1867 | p1_12@483@01]
; [eval] !except1_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_12@483@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1868 | p1_12@483@01 | live]
; [else-branch: 1868 | !(p1_12@483@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1868 | p1_12@483@01]
; [exec]
; MyException_res_3 := tmp_3
; [eval] p2_12 && !except2_2
(push) ; 20
; [then-branch: 1869 | !(p2_12@484@01) | live]
; [else-branch: 1869 | p2_12@484@01 | live]
(push) ; 21
; [then-branch: 1869 | !(p2_12@484@01)]
(assert (not p2_12@484@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1869 | p2_12@484@01]
; [eval] !except2_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_12@484@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1870 | p2_12@484@01 | live]
; [else-branch: 1870 | !(p2_12@484@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1870 | p2_12@484@01]
; [exec]
; MyException_res_3_0 := tmp_3
; [eval] p1_12 && !except1_2
(push) ; 21
; [then-branch: 1871 | !(p1_12@483@01) | live]
; [else-branch: 1871 | p1_12@483@01 | live]
(push) ; 22
; [then-branch: 1871 | !(p1_12@483@01)]
(assert (not p1_12@483@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1871 | p1_12@483@01]
; [eval] !except1_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_12@483@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1872 | p1_12@483@01 | live]
; [else-branch: 1872 | !(p1_12@483@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1872 | p1_12@483@01]
; [exec]
; inhale typeof(MyException_res_3) == MyException()
(declare-const $t@488@01 $Snap)
(assert (= $t@488@01 $Snap.unit))
; [eval] typeof(MyException_res_3) == MyException()
; [eval] typeof(MyException_res_3)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_12 && !except2_2
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1873 | !(p2_12@484@01) | live]
; [else-branch: 1873 | p2_12@484@01 | live]
(push) ; 23
; [then-branch: 1873 | !(p2_12@484@01)]
(assert (not p2_12@484@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1873 | p2_12@484@01]
; [eval] !except2_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_12@484@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1874 | p2_12@484@01 | live]
; [else-branch: 1874 | !(p2_12@484@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1874 | p2_12@484@01]
; [exec]
; inhale typeof(MyException_res_3_0) == MyException()
(declare-const $t@489@01 $Snap)
(assert (= $t@489@01 $Snap.unit))
; [eval] typeof(MyException_res_3_0) == MyException()
; [eval] typeof(MyException_res_3_0)
; [eval] MyException()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_12 && !except1_2
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1875 | !(p1_12@483@01) | live]
; [else-branch: 1875 | p1_12@483@01 | live]
(push) ; 24
; [then-branch: 1875 | !(p1_12@483@01)]
(assert (not p1_12@483@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1875 | p1_12@483@01]
; [eval] !except1_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_12@483@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1876 | p1_12@483@01 | live]
; [else-branch: 1876 | !(p1_12@483@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1876 | p1_12@483@01]
; [exec]
; _err := MyException_res_3
; [exec]
; except1_2 := true
; [eval] p2_12 && !except2_2
(push) ; 24
; [then-branch: 1877 | !(p2_12@484@01) | live]
; [else-branch: 1877 | p2_12@484@01 | live]
(push) ; 25
; [then-branch: 1877 | !(p2_12@484@01)]
(assert (not p2_12@484@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1877 | p2_12@484@01]
; [eval] !except2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_12@484@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1878 | p2_12@484@01 | live]
; [else-branch: 1878 | !(p2_12@484@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1878 | p2_12@484@01]
; [exec]
; _err_3 := MyException_res_3_0
; [exec]
; except2_2 := true
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 1879 | !(p1_10@415@01) | live]
; [else-branch: 1879 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 1879 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1879 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 1880 | False | dead]
; [else-branch: 1880 | True | live]
(push) ; 25
; [else-branch: 1880 | True]
(pop) ; 25
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 1881 | !(p1_10@415@01) | live]
; [else-branch: 1881 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 1881 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1881 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1882 | True | live]
; [else-branch: 1882 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1882 | True]
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 1883 | !(p2_10@416@01) | live]
; [else-branch: 1883 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 1883 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1883 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 1884 | False | dead]
; [else-branch: 1884 | True | live]
(push) ; 26
; [else-branch: 1884 | True]
(pop) ; 26
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 1885 | !(p2_10@416@01) | live]
; [else-branch: 1885 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 1885 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1885 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1886 | True | live]
; [else-branch: 1886 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1886 | True]
; [exec]
; p1_14 := p1_10 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_10 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 1887 | !(p1_10@415@01) | live]
; [else-branch: 1887 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 1887 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1887 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p2_14 := p2_10 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_10 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 1888 | !(p2_10@416@01) | live]
; [else-branch: 1888 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 1888 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1888 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p3_4 := p1_10 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_10 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 1889 | !(p1_10@415@01) | live]
; [else-branch: 1889 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 1889 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1889 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p2_10 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_10 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 1890 | !(p2_10@416@01) | live]
; [else-branch: 1890 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 1890 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1890 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_14 && !except1_2
; [then-branch: 1891 | False | dead]
; [else-branch: 1891 | True | live]
(push) ; 27
; [else-branch: 1891 | True]
(pop) ; 27
; [eval] !(p1_14 && !except1_2)
; [eval] p1_14 && !except1_2
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1892 | True | live]
; [else-branch: 1892 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1892 | True]
; [eval] p2_14 && !except2_2
; [then-branch: 1893 | False | dead]
; [else-branch: 1893 | True | live]
(push) ; 28
; [else-branch: 1893 | True]
(pop) ; 28
; [eval] !(p2_14 && !except2_2)
; [eval] p2_14 && !except2_2
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1894 | True | live]
; [else-branch: 1894 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1894 | True]
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 1895 | !(p1_10@415@01) | live]
; [else-branch: 1895 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 1895 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1895 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 1896 | False | dead]
; [else-branch: 1896 | True | live]
(push) ; 29
; [else-branch: 1896 | True]
(pop) ; 29
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 1897 | !(p1_10@415@01) | live]
; [else-branch: 1897 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 1897 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1897 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1898 | True | live]
; [else-branch: 1898 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 1898 | True]
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 1899 | !(p2_10@416@01) | live]
; [else-branch: 1899 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 1899 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1899 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 1900 | False | dead]
; [else-branch: 1900 | True | live]
(push) ; 30
; [else-branch: 1900 | True]
(pop) ; 30
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 1901 | !(p2_10@416@01) | live]
; [else-branch: 1901 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 1901 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1901 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1902 | True | live]
; [else-branch: 1902 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 1902 | True]
; [eval] p1_10 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1903 | p1_10@415@01 | live]
; [else-branch: 1903 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1903 | p1_10@415@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_10 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1904 | p2_10@416@01 | live]
; [else-branch: 1904 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1904 | p2_10@416@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1905 | p1_10@415@01 | live]
; [else-branch: 1905 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 1905 | p1_10@415@01]
; [eval] _err == null
; [then-branch: 1906 | tmp_3@487@01 == Null | dead]
; [else-branch: 1906 | tmp_3@487@01 != Null | live]
(push) ; 32
; [else-branch: 1906 | tmp_3@487@01 != Null]
(push) ; 33
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1907 | p2_10@416@01 | live]
; [else-branch: 1907 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 1907 | p2_10@416@01]
; [eval] _err_3 == null
; [then-branch: 1908 | tmp_3@487@01 == Null | dead]
; [else-branch: 1908 | tmp_3@487@01 != Null | live]
(push) ; 34
; [else-branch: 1908 | tmp_3@487@01 != Null]
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1909 | p1_10@415@01 | live]
; [else-branch: 1909 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1909 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 36
; [then-branch: 1910 | tmp_3@487@01 == Null | live]
; [else-branch: 1910 | tmp_3@487@01 != Null | live]
(push) ; 37
; [then-branch: 1910 | tmp_3@487@01 == Null]
(assert (= tmp_3@487@01 $Ref.null))
(pop) ; 37
(push) ; 37
; [else-branch: 1910 | tmp_3@487@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_3@487@01 $Ref.null)) (= tmp_3@487@01 $Ref.null)))
(push) ; 36
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_3@487@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_3@487@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1911 | tmp_3@487@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@487@01), MyException[PyType]) | live]
; [else-branch: 1911 | !(tmp_3@487@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@487@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1911 | tmp_3@487@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@487@01), MyException[PyType])]
(assert (and
  (not (= tmp_3@487@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 37
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@485@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@485@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 37
(pop) ; 37
; Joined path conditions
(push) ; 37
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 38
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@485@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 37
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@485@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(push) ; 37
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@485@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@485@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1912 | p2_10@416@01 | live]
; [else-branch: 1912 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1912 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 38
; [then-branch: 1913 | tmp_3@487@01 == Null | live]
; [else-branch: 1913 | tmp_3@487@01 != Null | live]
(push) ; 39
; [then-branch: 1913 | tmp_3@487@01 == Null]
(assert (= tmp_3@487@01 $Ref.null))
(pop) ; 39
(push) ; 39
; [else-branch: 1913 | tmp_3@487@01 != Null]
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_3@487@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_3@487@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1914 | tmp_3@487@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@487@01), MyException[PyType]) | live]
; [else-branch: 1914 | !(tmp_3@487@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@487@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 1914 | tmp_3@487@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@487@01), MyException[PyType])]
(assert (and
  (not (= tmp_3@487@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(push) ; 39
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@486@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@486@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 39
(pop) ; 39
; Joined path conditions
(push) ; 39
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@486@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 39
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@486@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(push) ; 39
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@486@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@486@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1915 | p1_10@415@01 | live]
; [else-branch: 1915 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1915 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (= tmp_3@487@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1916 | tmp_3@487@01 != Null | live]
; [else-branch: 1916 | tmp_3@487@01 == Null | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 1916 | tmp_3@487@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  (and p1_10@415@01 (not (= tmp_3@487@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_10@415@01 (not (= tmp_3@487@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType))))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1917 | p2_10@416@01 | live]
; [else-branch: 1917 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1917 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (= tmp_3@487@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1918 | tmp_3@487@01 != Null | live]
; [else-branch: 1918 | tmp_3@487@01 == Null | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 1918 | tmp_3@487@01 != Null]
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  (and p2_10@416@01 (not (= tmp_3@487@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_10@416@01 (not (= tmp_3@487@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_3@487@01) (as MyException<PyType>  PyType))))
; [eval] p1_10 ==> (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1919 | p1_10@415@01 | live]
; [else-branch: 1919 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1919 | p1_10@415@01]
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
(push) ; 41
; [then-branch: 1920 | False | live]
; [else-branch: 1920 | True | live]
(push) ; 42
; [then-branch: 1920 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 1920 | True]
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
(push) ; 43
; [then-branch: 1921 | False | live]
; [else-branch: 1921 | True | live]
(push) ; 44
; [then-branch: 1921 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 1921 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 1922 | False | live]
; [else-branch: 1922 | True | live]
(push) ; 46
; [then-branch: 1922 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 1922 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_10 ==> (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1923 | p2_10@416@01 | live]
; [else-branch: 1923 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1923 | p2_10@416@01]
; [eval] (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false)
(push) ; 41
; [then-branch: 1924 | False | live]
; [else-branch: 1924 | True | live]
(push) ; 42
; [then-branch: 1924 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 1924 | True]
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false)
(push) ; 43
; [then-branch: 1925 | False | live]
; [else-branch: 1925 | True | live]
(push) ; 44
; [then-branch: 1925 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 1925 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 1926 | False | live]
; [else-branch: 1926 | True | live]
(push) ; 46
; [then-branch: 1926 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 1926 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 24
; [then-branch: 1927 | !(p2_12@484@01) | live]
; [else-branch: 1927 | p2_12@484@01 | live]
(push) ; 25
; [then-branch: 1927 | !(p2_12@484@01)]
(assert (not p2_12@484@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1927 | p2_12@484@01]
; [eval] !except2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1928 | !(p2_12@484@01) | dead]
; [else-branch: 1928 | p2_12@484@01 | live]
(push) ; 24
; [else-branch: 1928 | p2_12@484@01]
(pop) ; 24
(pop) ; 23
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 23
; [then-branch: 1929 | !(p1_12@483@01) | live]
; [else-branch: 1929 | p1_12@483@01 | live]
(push) ; 24
; [then-branch: 1929 | !(p1_12@483@01)]
(assert (not p1_12@483@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1929 | p1_12@483@01]
; [eval] !except1_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1930 | !(p1_12@483@01) | dead]
; [else-branch: 1930 | p1_12@483@01 | live]
(push) ; 23
; [else-branch: 1930 | p1_12@483@01]
(pop) ; 23
(pop) ; 22
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 22
; [then-branch: 1931 | !(p2_12@484@01) | live]
; [else-branch: 1931 | p2_12@484@01 | live]
(push) ; 23
; [then-branch: 1931 | !(p2_12@484@01)]
(assert (not p2_12@484@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1931 | p2_12@484@01]
; [eval] !except2_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 1932 | !(p2_12@484@01) | dead]
; [else-branch: 1932 | p2_12@484@01 | live]
(push) ; 22
; [else-branch: 1932 | p2_12@484@01]
(pop) ; 22
(pop) ; 21
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 21
; [then-branch: 1933 | !(p1_12@483@01) | live]
; [else-branch: 1933 | p1_12@483@01 | live]
(push) ; 22
; [then-branch: 1933 | !(p1_12@483@01)]
(assert (not p1_12@483@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1933 | p1_12@483@01]
; [eval] !except1_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 1934 | !(p1_12@483@01) | dead]
; [else-branch: 1934 | p1_12@483@01 | live]
(push) ; 21
; [else-branch: 1934 | p1_12@483@01]
(pop) ; 21
(pop) ; 20
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 20
; [then-branch: 1935 | !(p2_12@484@01) | live]
; [else-branch: 1935 | p2_12@484@01 | live]
(push) ; 21
; [then-branch: 1935 | !(p2_12@484@01)]
(assert (not p2_12@484@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1935 | p2_12@484@01]
; [eval] !except2_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1936 | !(p2_12@484@01) | dead]
; [else-branch: 1936 | p2_12@484@01 | live]
(push) ; 20
; [else-branch: 1936 | p2_12@484@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 19
; [then-branch: 1937 | !(p1_12@483@01) | live]
; [else-branch: 1937 | p1_12@483@01 | live]
(push) ; 20
; [then-branch: 1937 | !(p1_12@483@01)]
(assert (not p1_12@483@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1937 | p1_12@483@01]
; [eval] !except1_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 1938 | !(p1_12@483@01) | dead]
; [else-branch: 1938 | p1_12@483@01 | live]
(push) ; 19
; [else-branch: 1938 | p1_12@483@01]
(pop) ; 19
(pop) ; 18
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 18
; [then-branch: 1939 | !(p2_12@484@01) | live]
; [else-branch: 1939 | p2_12@484@01 | live]
(push) ; 19
; [then-branch: 1939 | !(p2_12@484@01)]
(assert (not p2_12@484@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1939 | p2_12@484@01]
; [eval] !except2_2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 1940 | !(p2_12@484@01) | dead]
; [else-branch: 1940 | p2_12@484@01 | live]
(push) ; 18
; [else-branch: 1940 | p2_12@484@01]
(pop) ; 18
(pop) ; 17
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 17
; [then-branch: 1941 | !(p1_12@483@01) | live]
; [else-branch: 1941 | p1_12@483@01 | live]
(push) ; 18
; [then-branch: 1941 | !(p1_12@483@01)]
(assert (not p1_12@483@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1941 | p1_12@483@01]
; [eval] !except1_2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 1942 | !(p1_12@483@01) | dead]
; [else-branch: 1942 | p1_12@483@01 | live]
(push) ; 17
; [else-branch: 1942 | p1_12@483@01]
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
; [eval] !p2_12
(push) ; 14
(set-option :timeout 10)
(assert (not p2_12@484@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1943 | !(p2_12@484@01) | dead]
; [else-branch: 1943 | p2_12@484@01 | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 1943 | p2_12@484@01]
(assert p2_12@484@01)
(pop) ; 14
(pop) ; 13
; [eval] !p1_12
(push) ; 13
(set-option :timeout 10)
(assert (not p1_12@483@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1944 | !(p1_12@483@01) | dead]
; [else-branch: 1944 | p1_12@483@01 | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 1944 | p1_12@483@01]
(assert p1_12@483@01)
(pop) ; 13
(pop) ; 12
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 1945 | !(p2_11@475@01) | live]
; [else-branch: 1945 | p2_11@475@01 | live]
(push) ; 13
; [then-branch: 1945 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1945 | p2_11@475@01]
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 1946 | !(p2_11@475@01) | dead]
; [else-branch: 1946 | p2_11@475@01 | live]
(push) ; 12
; [else-branch: 1946 | p2_11@475@01]
(pop) ; 12
(pop) ; 11
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 11
; [then-branch: 1947 | !(p1_11@474@01) | live]
; [else-branch: 1947 | p1_11@474@01 | live]
(push) ; 12
; [then-branch: 1947 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1947 | p1_11@474@01]
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 1948 | !(p1_11@474@01) | dead]
; [else-branch: 1948 | p1_11@474@01 | live]
(push) ; 11
; [else-branch: 1948 | p1_11@474@01]
(pop) ; 11
(pop) ; 10
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 10
; [then-branch: 1949 | !(p2_11@475@01) | live]
; [else-branch: 1949 | p2_11@475@01 | live]
(push) ; 11
; [then-branch: 1949 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 11
(push) ; 11
; [else-branch: 1949 | p2_11@475@01]
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 1950 | !(p2_11@475@01) | dead]
; [else-branch: 1950 | p2_11@475@01 | live]
(push) ; 10
; [else-branch: 1950 | p2_11@475@01]
(pop) ; 10
(pop) ; 9
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 1951 | !(p1_11@474@01) | live]
; [else-branch: 1951 | p1_11@474@01 | live]
(push) ; 10
; [then-branch: 1951 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1951 | p1_11@474@01]
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 1952 | !(p1_11@474@01) | dead]
; [else-branch: 1952 | p1_11@474@01 | live]
(push) ; 9
; [else-branch: 1952 | p1_11@474@01]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 1834 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 8
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 8
; [then-branch: 1953 | !(p2_11@475@01) | live]
; [else-branch: 1953 | p2_11@475@01 | live]
(push) ; 9
; [then-branch: 1953 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1953 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_11@475@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_11@475@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1954 | !(p2_11@475@01) | live]
; [else-branch: 1954 | p2_11@475@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1954 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 1955 | !(p1_11@474@01) | live]
; [else-branch: 1955 | p1_11@474@01 | live]
(push) ; 10
; [then-branch: 1955 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1955 | p1_11@474@01]
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_11@474@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1956 | p1_11@474@01 | live]
; [else-branch: 1956 | !(p1_11@474@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1956 | p1_11@474@01]
; [exec]
; inhale typeof(MyException_res_2) == MyException()
(declare-const $t@490@01 $Snap)
(assert (= $t@490@01 $Snap.unit))
; [eval] typeof(MyException_res_2) == MyException()
; [eval] typeof(MyException_res_2)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_2@478@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_11 && !except2_2
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1957 | !(p2_11@475@01) | live]
; [else-branch: 1957 | p2_11@475@01 | live]
(push) ; 11
; [then-branch: 1957 | !(p2_11@475@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 1957 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 1958 | p2_11@475@01 | dead]
; [else-branch: 1958 | !(p2_11@475@01) | live]
(push) ; 10
; [else-branch: 1958 | !(p2_11@475@01)]
(pop) ; 10
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 10
; [then-branch: 1959 | !(p2_11@475@01) | live]
; [else-branch: 1959 | p2_11@475@01 | live]
(push) ; 11
; [then-branch: 1959 | !(p2_11@475@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 1959 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_11@475@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1960 | !(p2_11@475@01) | live]
; [else-branch: 1960 | p2_11@475@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1960 | !(p2_11@475@01)]
; [eval] p1_11 && !except1_2
(push) ; 11
; [then-branch: 1961 | !(p1_11@474@01) | live]
; [else-branch: 1961 | p1_11@474@01 | live]
(push) ; 12
; [then-branch: 1961 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1961 | p1_11@474@01]
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_11@474@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1962 | p1_11@474@01 | live]
; [else-branch: 1962 | !(p1_11@474@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1962 | p1_11@474@01]
; [exec]
; _err := MyException_res_2
; [exec]
; except1_2 := true
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 1963 | !(p2_11@475@01) | live]
; [else-branch: 1963 | p2_11@475@01 | live]
(push) ; 13
; [then-branch: 1963 | !(p2_11@475@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 1963 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 1964 | p2_11@475@01 | dead]
; [else-branch: 1964 | !(p2_11@475@01) | live]
(push) ; 12
; [else-branch: 1964 | !(p2_11@475@01)]
(pop) ; 12
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 1965 | !(p2_11@475@01) | live]
; [else-branch: 1965 | p2_11@475@01 | live]
(push) ; 13
; [then-branch: 1965 | !(p2_11@475@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 1965 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_11@475@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1966 | !(p2_11@475@01) | live]
; [else-branch: 1966 | p2_11@475@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1966 | !(p2_11@475@01)]
; [exec]
; thisexcept1_2 := except1_2 && !bypass1_2
; [eval] except1_2 && !bypass1_2
(push) ; 13
; [then-branch: 1967 | False | live]
; [else-branch: 1967 | True | live]
(push) ; 14
; [then-branch: 1967 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1967 | True]
; [eval] !bypass1_2
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_2@491@01 Bool)
(assert (= thisexcept1_2@491@01 (not bypass1_2@472@01)))
; [exec]
; thisexcept2_2 := except2_2 && !bypass2_2
; [eval] except2_2 && !bypass2_2
; [exec]
; p1_12 := p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
; [eval] p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 1968 | !(p1_10@415@01) | live]
; [else-branch: 1968 | p1_10@415@01 | live]
(push) ; 14
; [then-branch: 1968 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1968 | p1_10@415@01]
(push) ; 15
; [then-branch: 1969 | !(thisexcept1_2@491@01) | live]
; [else-branch: 1969 | thisexcept1_2@491@01 | live]
(push) ; 16
; [then-branch: 1969 | !(thisexcept1_2@491@01)]
(assert (not thisexcept1_2@491@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1969 | thisexcept1_2@491@01]
(assert thisexcept1_2@491@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_2@491@01 (not thisexcept1_2@491@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=> p1_10@415@01 (or thisexcept1_2@491@01 (not thisexcept1_2@491@01))))
(declare-const p1_12@492@01 Bool)
(assert (=
  p1_12@492@01
  (and
    p1_10@415@01
    (and
      thisexcept1_2@491@01
      (issubtype<Bool> (typeof<PyType> tmp_2@478@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_12 := p2_10 &&
;   (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
; [eval] p2_10 && (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
(push) ; 13
; [then-branch: 1970 | !(p2_10@416@01) | live]
; [else-branch: 1970 | p2_10@416@01 | live]
(push) ; 14
; [then-branch: 1970 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1970 | p2_10@416@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_12@492@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not p1_12@492@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1971 | p1_12@492@01 | live]
; [else-branch: 1971 | !(p1_12@492@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1971 | p1_12@492@01]
(assert p1_12@492@01)
; [exec]
; except1_2 := false
; [then-branch: 1972 | False | dead]
; [else-branch: 1972 | True | live]
(push) ; 14
; [else-branch: 1972 | True]
(pop) ; 14
; [eval] !p2_12
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1973 | True | live]
; [else-branch: 1973 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1973 | True]
; [exec]
; p1_13 := p1_12 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_12 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
(push) ; 15
; [then-branch: 1974 | !(p1_12@492@01) | live]
; [else-branch: 1974 | p1_12@492@01 | live]
(push) ; 16
; [then-branch: 1974 | !(p1_12@492@01)]
(assert (not p1_12@492@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1974 | p1_12@492@01]
; [eval] !except1_2
(push) ; 17
; [then-branch: 1975 | False | live]
; [else-branch: 1975 | True | live]
(push) ; 18
; [then-branch: 1975 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1975 | True]
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p1_12@492@01 (not p1_12@492@01)))
; [exec]
; p2_13 := p2_12 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_12 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_3 := p1_12 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_12 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
(push) ; 15
; [then-branch: 1976 | !(p1_12@492@01) | live]
; [else-branch: 1976 | p1_12@492@01 | live]
(push) ; 16
; [then-branch: 1976 | !(p1_12@492@01)]
(assert (not p1_12@492@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1976 | p1_12@492@01]
; [eval] !except1_2
(push) ; 17
; [then-branch: 1977 | False | live]
; [else-branch: 1977 | True | live]
(push) ; 18
; [then-branch: 1977 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1977 | True]
; [eval] !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p4_3 := p2_12 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_12 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_13 && !except1_2
; [then-branch: 1978 | False | dead]
; [else-branch: 1978 | True | live]
(push) ; 15
; [else-branch: 1978 | True]
(pop) ; 15
; [eval] !(p1_13 && !except1_2)
; [eval] p1_13 && !except1_2
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1979 | True | live]
; [else-branch: 1979 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1979 | True]
; [eval] p2_13 && !except2_2
; [then-branch: 1980 | False | dead]
; [else-branch: 1980 | True | live]
(push) ; 16
; [else-branch: 1980 | True]
(pop) ; 16
; [eval] !(p2_13 && !except2_2)
; [eval] p2_13 && !except2_2
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1981 | True | live]
; [else-branch: 1981 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1981 | True]
; [eval] p1_12 && !except1_2
(push) ; 17
; [then-branch: 1982 | !(p1_12@492@01) | live]
; [else-branch: 1982 | p1_12@492@01 | live]
(push) ; 18
; [then-branch: 1982 | !(p1_12@492@01)]
(assert (not p1_12@492@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1982 | p1_12@492@01]
; [eval] !except1_2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_12@492@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1983 | p1_12@492@01 | live]
; [else-branch: 1983 | !(p1_12@492@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1983 | p1_12@492@01]
; [exec]
; c_3.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 18
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 18
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@493@01 $Ref)
(assert (= Container_value@493@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p2_12 && !except2_2
; [then-branch: 1984 | False | dead]
; [else-branch: 1984 | True | live]
(push) ; 18
; [else-branch: 1984 | True]
(pop) ; 18
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1985 | True | live]
; [else-branch: 1985 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1985 | True]
; [exec]
; tmp_3 := new()
(declare-const tmp_3@494@01 $Ref)
(assert (not (= tmp_3@494@01 $Ref.null)))
(assert (not (= tmp_3@494@01 tmp_3@466@01)))
(assert (not (= tmp_3@494@01 MyException_res_3@445@01)))
(assert (not (= tmp_3@494@01 MyException_res_2_0@444@01)))
(assert (not (= tmp_3@494@01 c_7@426@01)))
(assert (not (= tmp_3@494@01 b_2_0@424@01)))
(assert (not
  (=
    tmp_3@494@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))
(assert (not (= tmp_3@494@01 error_2_0@436@01)))
(assert (not (= tmp_3@494@01 MyException_res_3_0@446@01)))
(assert (not (= tmp_3@494@01 error_2@435@01)))
(assert (not (= tmp_3@494@01 Container_value@493@01)))
(assert (not (= tmp_3@494@01 tmp_2@478@01)))
(assert (not (= tmp_3@494@01 c@425@01)))
(assert (not (= tmp_3@494@01 _cthread_160_0@418@01)))
(assert (not (= tmp_3@494@01 _cthread_160@417@01)))
(assert (not (= tmp_3@494@01 b_2@423@01)))
; [eval] p1_12 && !except1_2
(push) ; 19
; [then-branch: 1986 | !(p1_12@492@01) | live]
; [else-branch: 1986 | p1_12@492@01 | live]
(push) ; 20
; [then-branch: 1986 | !(p1_12@492@01)]
(assert (not p1_12@492@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1986 | p1_12@492@01]
; [eval] !except1_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_12@492@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1987 | p1_12@492@01 | live]
; [else-branch: 1987 | !(p1_12@492@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1987 | p1_12@492@01]
; [exec]
; MyException_res_3 := tmp_3
; [eval] p2_12 && !except2_2
; [then-branch: 1988 | False | dead]
; [else-branch: 1988 | True | live]
(push) ; 20
; [else-branch: 1988 | True]
(pop) ; 20
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1989 | True | live]
; [else-branch: 1989 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1989 | True]
; [eval] p1_12 && !except1_2
(push) ; 21
; [then-branch: 1990 | !(p1_12@492@01) | live]
; [else-branch: 1990 | p1_12@492@01 | live]
(push) ; 22
; [then-branch: 1990 | !(p1_12@492@01)]
(assert (not p1_12@492@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1990 | p1_12@492@01]
; [eval] !except1_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_12@492@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1991 | p1_12@492@01 | live]
; [else-branch: 1991 | !(p1_12@492@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1991 | p1_12@492@01]
; [exec]
; inhale typeof(MyException_res_3) == MyException()
(declare-const $t@495@01 $Snap)
(assert (= $t@495@01 $Snap.unit))
; [eval] typeof(MyException_res_3) == MyException()
; [eval] typeof(MyException_res_3)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_3@494@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_12 && !except2_2
; [then-branch: 1992 | False | dead]
; [else-branch: 1992 | True | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 1992 | True]
(pop) ; 22
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1993 | True | live]
; [else-branch: 1993 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1993 | True]
; [eval] p1_12 && !except1_2
(push) ; 23
; [then-branch: 1994 | !(p1_12@492@01) | live]
; [else-branch: 1994 | p1_12@492@01 | live]
(push) ; 24
; [then-branch: 1994 | !(p1_12@492@01)]
(assert (not p1_12@492@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1994 | p1_12@492@01]
; [eval] !except1_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_12@492@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1995 | p1_12@492@01 | live]
; [else-branch: 1995 | !(p1_12@492@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1995 | p1_12@492@01]
; [exec]
; _err := MyException_res_3
; [exec]
; except1_2 := true
; [eval] p2_12 && !except2_2
; [then-branch: 1996 | False | dead]
; [else-branch: 1996 | True | live]
(push) ; 24
; [else-branch: 1996 | True]
(pop) ; 24
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 24
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1997 | True | live]
; [else-branch: 1997 | False | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1997 | True]
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 1998 | !(p1_10@415@01) | live]
; [else-branch: 1998 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 1998 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1998 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 1999 | False | dead]
; [else-branch: 1999 | True | live]
(push) ; 25
; [else-branch: 1999 | True]
(pop) ; 25
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 2000 | !(p1_10@415@01) | live]
; [else-branch: 2000 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 2000 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2000 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2001 | True | live]
; [else-branch: 2001 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2001 | True]
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 2002 | !(p2_10@416@01) | live]
; [else-branch: 2002 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 2002 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2002 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2003 | p2_10@416@01 | live]
; [else-branch: 2003 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2003 | p2_10@416@01]
; [exec]
; _err_3 := null
; [exec]
; p1_14 := p1_10 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_10 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2004 | !(p1_10@415@01) | live]
; [else-branch: 2004 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 2004 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2004 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p2_14 := p2_10 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_10 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2005 | !(p2_10@416@01) | live]
; [else-branch: 2005 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 2005 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2005 | p2_10@416@01]
; [eval] !except2_2
(push) ; 29
; [then-branch: 2006 | False | live]
; [else-branch: 2006 | True | live]
(push) ; 30
; [then-branch: 2006 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2006 | True]
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p3_4 := p1_10 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_10 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2007 | !(p1_10@415@01) | live]
; [else-branch: 2007 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 2007 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2007 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p2_10 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_10 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2008 | !(p2_10@416@01) | live]
; [else-branch: 2008 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 2008 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2008 | p2_10@416@01]
; [eval] !except2_2
(push) ; 29
; [then-branch: 2009 | False | live]
; [else-branch: 2009 | True | live]
(push) ; 30
; [then-branch: 2009 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2009 | True]
; [eval] !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_14 && !except1_2
; [then-branch: 2010 | False | dead]
; [else-branch: 2010 | True | live]
(push) ; 27
; [else-branch: 2010 | True]
(pop) ; 27
; [eval] !(p1_14 && !except1_2)
; [eval] p1_14 && !except1_2
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2011 | True | live]
; [else-branch: 2011 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2011 | True]
; [eval] p2_14 && !except2_2
; [then-branch: 2012 | False | dead]
; [else-branch: 2012 | True | live]
(push) ; 28
; [else-branch: 2012 | True]
(pop) ; 28
; [eval] !(p2_14 && !except2_2)
; [eval] p2_14 && !except2_2
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2013 | True | live]
; [else-branch: 2013 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2013 | True]
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 2014 | !(p1_10@415@01) | live]
; [else-branch: 2014 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 2014 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2014 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 2015 | False | dead]
; [else-branch: 2015 | True | live]
(push) ; 29
; [else-branch: 2015 | True]
(pop) ; 29
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 2016 | !(p1_10@415@01) | live]
; [else-branch: 2016 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 2016 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2016 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2017 | True | live]
; [else-branch: 2017 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2017 | True]
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 2018 | !(p2_10@416@01) | live]
; [else-branch: 2018 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 2018 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2018 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2019 | p2_10@416@01 | live]
; [else-branch: 2019 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2019 | p2_10@416@01]
; [exec]
; c_3_0.Container_valuep := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_valuep@496@01 $Ref)
(assert (= Container_valuep@496@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p1_10 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2020 | p1_10@415@01 | live]
; [else-branch: 2020 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2020 | p1_10@415@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_10 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2021 | p2_10@416@01 | live]
; [else-branch: 2021 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2021 | p2_10@416@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2022 | p1_10@415@01 | live]
; [else-branch: 2022 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2022 | p1_10@415@01]
; [eval] _err == null
; [then-branch: 2023 | tmp_3@494@01 == Null | dead]
; [else-branch: 2023 | tmp_3@494@01 != Null | live]
(push) ; 32
; [else-branch: 2023 | tmp_3@494@01 != Null]
(push) ; 33
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2024 | p2_10@416@01 | live]
; [else-branch: 2024 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2024 | p2_10@416@01]
; [eval] _err_3 == null
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2025 | True | live]
; [else-branch: 2025 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2025 | True]
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(push) ; 35
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@496@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@496@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 35
(pop) ; 35
; Joined path conditions
(push) ; 35
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 36
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@496@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 35
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@496@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 35
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@496@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@496@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2026 | p1_10@415@01 | live]
; [else-branch: 2026 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2026 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 36
; [then-branch: 2027 | tmp_3@494@01 == Null | live]
; [else-branch: 2027 | tmp_3@494@01 != Null | live]
(push) ; 37
; [then-branch: 2027 | tmp_3@494@01 == Null]
(assert (= tmp_3@494@01 $Ref.null))
(pop) ; 37
(push) ; 37
; [else-branch: 2027 | tmp_3@494@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_3@494@01 $Ref.null)) (= tmp_3@494@01 $Ref.null)))
(push) ; 36
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_3@494@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_3@494@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_3@494@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_3@494@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2028 | tmp_3@494@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@494@01), MyException[PyType]) | live]
; [else-branch: 2028 | !(tmp_3@494@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@494@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 2028 | tmp_3@494@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@494@01), MyException[PyType])]
(assert (and
  (not (= tmp_3@494@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_3@494@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 37
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@493@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@493@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 37
(pop) ; 37
; Joined path conditions
(push) ; 37
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 38
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@493@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 37
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@493@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(push) ; 37
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@493@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@493@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2029 | p2_10@416@01 | live]
; [else-branch: 2029 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2029 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
; [then-branch: 2030 | False | dead]
; [else-branch: 2030 | True | live]
(push) ; 38
; [else-branch: 2030 | True]
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2031 | p1_10@415@01 | live]
; [else-branch: 2031 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2031 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (= tmp_3@494@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2032 | tmp_3@494@01 != Null | live]
; [else-branch: 2032 | tmp_3@494@01 == Null | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2032 | tmp_3@494@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  (and p1_10@415@01 (not (= tmp_3@494@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_3@494@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_10@415@01 (not (= tmp_3@494@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_3@494@01) (as MyException<PyType>  PyType))))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2033 | p2_10@416@01 | live]
; [else-branch: 2033 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2033 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 41
; [then-branch: 2034 | False | dead]
; [else-branch: 2034 | True | live]
(push) ; 42
; [else-branch: 2034 | True]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_10 ==> (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2035 | p1_10@415@01 | live]
; [else-branch: 2035 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2035 | p1_10@415@01]
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
(push) ; 41
; [then-branch: 2036 | False | live]
; [else-branch: 2036 | True | live]
(push) ; 42
; [then-branch: 2036 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2036 | True]
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
(push) ; 43
; [then-branch: 2037 | False | live]
; [else-branch: 2037 | True | live]
(push) ; 44
; [then-branch: 2037 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2037 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 2038 | False | live]
; [else-branch: 2038 | True | live]
(push) ; 46
; [then-branch: 2038 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2038 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_10 ==> (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2039 | p2_10@416@01 | live]
; [else-branch: 2039 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2039 | p2_10@416@01]
; [eval] (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false)
(push) ; 41
; [then-branch: 2040 | False | live]
; [else-branch: 2040 | True | live]
(push) ; 42
; [then-branch: 2040 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2040 | True]
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false)
(push) ; 43
; [then-branch: 2041 | False | live]
; [else-branch: 2041 | True | live]
(push) ; 44
; [then-branch: 2041 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2041 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 2042 | False | live]
; [else-branch: 2042 | True | live]
(push) ; 46
; [then-branch: 2042 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2042 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 2043 | !(p2_10@416@01) | live]
; [else-branch: 2043 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 2043 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2043 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 2044 | !(p2_10@416@01) | dead]
; [else-branch: 2044 | p2_10@416@01 | live]
(push) ; 30
; [else-branch: 2044 | p2_10@416@01]
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 2045 | !(p2_10@416@01) | live]
; [else-branch: 2045 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 2045 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2045 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2046 | !(p2_10@416@01) | dead]
; [else-branch: 2046 | p2_10@416@01 | live]
(push) ; 26
; [else-branch: 2046 | p2_10@416@01]
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 23
; [then-branch: 2047 | !(p1_12@492@01) | live]
; [else-branch: 2047 | p1_12@492@01 | live]
(push) ; 24
; [then-branch: 2047 | !(p1_12@492@01)]
(assert (not p1_12@492@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2047 | p1_12@492@01]
; [eval] !except1_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 2048 | !(p1_12@492@01) | dead]
; [else-branch: 2048 | p1_12@492@01 | live]
(push) ; 23
; [else-branch: 2048 | p1_12@492@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 21
; [then-branch: 2049 | !(p1_12@492@01) | live]
; [else-branch: 2049 | p1_12@492@01 | live]
(push) ; 22
; [then-branch: 2049 | !(p1_12@492@01)]
(assert (not p1_12@492@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2049 | p1_12@492@01]
; [eval] !except1_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 2050 | !(p1_12@492@01) | dead]
; [else-branch: 2050 | p1_12@492@01 | live]
(push) ; 21
; [else-branch: 2050 | p1_12@492@01]
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 19
; [then-branch: 2051 | !(p1_12@492@01) | live]
; [else-branch: 2051 | p1_12@492@01 | live]
(push) ; 20
; [then-branch: 2051 | !(p1_12@492@01)]
(assert (not p1_12@492@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2051 | p1_12@492@01]
; [eval] !except1_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 2052 | !(p1_12@492@01) | dead]
; [else-branch: 2052 | p1_12@492@01 | live]
(push) ; 19
; [else-branch: 2052 | p1_12@492@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 17
; [then-branch: 2053 | !(p1_12@492@01) | live]
; [else-branch: 2053 | p1_12@492@01 | live]
(push) ; 18
; [then-branch: 2053 | !(p1_12@492@01)]
(assert (not p1_12@492@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2053 | p1_12@492@01]
; [eval] !except1_2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 2054 | !(p1_12@492@01) | dead]
; [else-branch: 2054 | p1_12@492@01 | live]
(push) ; 17
; [else-branch: 2054 | p1_12@492@01]
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !p1_12
(push) ; 13
(set-option :timeout 10)
(assert (not p1_12@492@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2055 | !(p1_12@492@01) | dead]
; [else-branch: 2055 | p1_12@492@01 | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 2055 | p1_12@492@01]
(assert p1_12@492@01)
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 11
; [then-branch: 2056 | !(p1_11@474@01) | live]
; [else-branch: 2056 | p1_11@474@01 | live]
(push) ; 12
; [then-branch: 2056 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2056 | p1_11@474@01]
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 2057 | !(p1_11@474@01) | dead]
; [else-branch: 2057 | p1_11@474@01 | live]
(push) ; 11
; [else-branch: 2057 | p1_11@474@01]
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 2058 | !(p1_11@474@01) | live]
; [else-branch: 2058 | p1_11@474@01 | live]
(push) ; 10
; [then-branch: 2058 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2058 | p1_11@474@01]
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 2059 | !(p1_11@474@01) | dead]
; [else-branch: 2059 | p1_11@474@01 | live]
(push) ; 9
; [else-branch: 2059 | p1_11@474@01]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 1954 | p2_11@475@01]
(assert p2_11@475@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 1832 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 7
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 7
; [then-branch: 2060 | !(p1_11@474@01) | live]
; [else-branch: 2060 | p1_11@474@01 | live]
(push) ; 8
; [then-branch: 2060 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2060 | p1_11@474@01]
(assert p1_11@474@01)
; [eval] !except1_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_11@474@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_11@474@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2061 | !(p1_11@474@01) | live]
; [else-branch: 2061 | p1_11@474@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2061 | !(p1_11@474@01)]
(assert (not p1_11@474@01))
; [eval] p2_11 && !except2_2
(push) ; 8
; [then-branch: 2062 | !(p2_11@475@01) | live]
; [else-branch: 2062 | p2_11@475@01 | live]
(push) ; 9
; [then-branch: 2062 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2062 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_11@475@01 (not p2_11@475@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_11@475@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_11@475@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2063 | p2_11@475@01 | live]
; [else-branch: 2063 | !(p2_11@475@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2063 | p2_11@475@01]
(assert p2_11@475@01)
; [exec]
; MyException_res_2_0 := tmp_2
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 2064 | !(p1_11@474@01) | live]
; [else-branch: 2064 | p1_11@474@01 | live]
(push) ; 10
; [then-branch: 2064 | !(p1_11@474@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 2064 | p1_11@474@01]
(assert p1_11@474@01)
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 2065 | p1_11@474@01 | dead]
; [else-branch: 2065 | !(p1_11@474@01) | live]
(push) ; 9
; [else-branch: 2065 | !(p1_11@474@01)]
(pop) ; 9
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 2066 | !(p1_11@474@01) | live]
; [else-branch: 2066 | p1_11@474@01 | live]
(push) ; 10
; [then-branch: 2066 | !(p1_11@474@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 2066 | p1_11@474@01]
(assert p1_11@474@01)
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_11@474@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2067 | !(p1_11@474@01) | live]
; [else-branch: 2067 | p1_11@474@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2067 | !(p1_11@474@01)]
; [eval] p2_11 && !except2_2
(push) ; 10
; [then-branch: 2068 | !(p2_11@475@01) | live]
; [else-branch: 2068 | p2_11@475@01 | live]
(push) ; 11
; [then-branch: 2068 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2068 | p2_11@475@01]
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_11@475@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2069 | p2_11@475@01 | live]
; [else-branch: 2069 | !(p2_11@475@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2069 | p2_11@475@01]
; [exec]
; inhale typeof(MyException_res_2_0) == MyException()
(declare-const $t@497@01 $Snap)
(assert (= $t@497@01 $Snap.unit))
; [eval] typeof(MyException_res_2_0) == MyException()
; [eval] typeof(MyException_res_2_0)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_2@478@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_11 && !except1_2
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2070 | !(p1_11@474@01) | live]
; [else-branch: 2070 | p1_11@474@01 | live]
(push) ; 12
; [then-branch: 2070 | !(p1_11@474@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 2070 | p1_11@474@01]
(assert p1_11@474@01)
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 2071 | p1_11@474@01 | dead]
; [else-branch: 2071 | !(p1_11@474@01) | live]
(push) ; 11
; [else-branch: 2071 | !(p1_11@474@01)]
(pop) ; 11
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 11
; [then-branch: 2072 | !(p1_11@474@01) | live]
; [else-branch: 2072 | p1_11@474@01 | live]
(push) ; 12
; [then-branch: 2072 | !(p1_11@474@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 2072 | p1_11@474@01]
(assert p1_11@474@01)
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p1_11@474@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2073 | !(p1_11@474@01) | live]
; [else-branch: 2073 | p1_11@474@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2073 | !(p1_11@474@01)]
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 2074 | !(p2_11@475@01) | live]
; [else-branch: 2074 | p2_11@475@01 | live]
(push) ; 13
; [then-branch: 2074 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2074 | p2_11@475@01]
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_11@475@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2075 | p2_11@475@01 | live]
; [else-branch: 2075 | !(p2_11@475@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2075 | p2_11@475@01]
; [exec]
; _err_3 := MyException_res_2_0
; [exec]
; except2_2 := true
; [exec]
; thisexcept1_2 := except1_2 && !bypass1_2
; [eval] except1_2 && !bypass1_2
; [exec]
; thisexcept2_2 := except2_2 && !bypass2_2
; [eval] except2_2 && !bypass2_2
(push) ; 13
; [then-branch: 2076 | False | live]
; [else-branch: 2076 | True | live]
(push) ; 14
; [then-branch: 2076 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2076 | True]
; [eval] !bypass2_2
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_2@498@01 Bool)
(assert (= thisexcept2_2@498@01 (not bypass2_2@473@01)))
; [exec]
; p1_12 := p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
; [eval] p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 2077 | !(p1_10@415@01) | live]
; [else-branch: 2077 | p1_10@415@01 | live]
(push) ; 14
; [then-branch: 2077 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2077 | p1_10@415@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p2_12 := p2_10 &&
;   (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
; [eval] p2_10 && (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
(push) ; 13
; [then-branch: 2078 | !(p2_10@416@01) | live]
; [else-branch: 2078 | p2_10@416@01 | live]
(push) ; 14
; [then-branch: 2078 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2078 | p2_10@416@01]
(push) ; 15
; [then-branch: 2079 | !(thisexcept2_2@498@01) | live]
; [else-branch: 2079 | thisexcept2_2@498@01 | live]
(push) ; 16
; [then-branch: 2079 | !(thisexcept2_2@498@01)]
(assert (not thisexcept2_2@498@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2079 | thisexcept2_2@498@01]
(assert thisexcept2_2@498@01)
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_2@498@01 (not thisexcept2_2@498@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=> p2_10@416@01 (or thisexcept2_2@498@01 (not thisexcept2_2@498@01))))
(declare-const p2_12@499@01 Bool)
(assert (=
  p2_12@499@01
  (and
    p2_10@416@01
    (and
      thisexcept2_2@498@01
      (issubtype<Bool> (typeof<PyType> tmp_2@478@01) (as MyException<PyType>  PyType))))))
; [then-branch: 2080 | False | dead]
; [else-branch: 2080 | True | live]
(push) ; 13
; [else-branch: 2080 | True]
(pop) ; 13
; [eval] !p1_12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2081 | True | live]
; [else-branch: 2081 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2081 | True]
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_12@499@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not p2_12@499@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2082 | p2_12@499@01 | live]
; [else-branch: 2082 | !(p2_12@499@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2082 | p2_12@499@01]
(assert p2_12@499@01)
; [exec]
; except2_2 := false
; [exec]
; p1_13 := p1_12 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_12 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_13 := p2_12 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_12 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
(push) ; 15
; [then-branch: 2083 | !(p2_12@499@01) | live]
; [else-branch: 2083 | p2_12@499@01 | live]
(push) ; 16
; [then-branch: 2083 | !(p2_12@499@01)]
(assert (not p2_12@499@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2083 | p2_12@499@01]
; [eval] !except2_2
(push) ; 17
; [then-branch: 2084 | False | live]
; [else-branch: 2084 | True | live]
(push) ; 18
; [then-branch: 2084 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2084 | True]
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p2_12@499@01 (not p2_12@499@01)))
; [exec]
; p3_3 := p1_12 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_12 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_3 := p2_12 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_12 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
(push) ; 15
; [then-branch: 2085 | !(p2_12@499@01) | live]
; [else-branch: 2085 | p2_12@499@01 | live]
(push) ; 16
; [then-branch: 2085 | !(p2_12@499@01)]
(assert (not p2_12@499@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2085 | p2_12@499@01]
; [eval] !except2_2
(push) ; 17
; [then-branch: 2086 | False | live]
; [else-branch: 2086 | True | live]
(push) ; 18
; [then-branch: 2086 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2086 | True]
; [eval] !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] p1_13 && !except1_2
; [then-branch: 2087 | False | dead]
; [else-branch: 2087 | True | live]
(push) ; 15
; [else-branch: 2087 | True]
(pop) ; 15
; [eval] !(p1_13 && !except1_2)
; [eval] p1_13 && !except1_2
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2088 | True | live]
; [else-branch: 2088 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2088 | True]
; [eval] p2_13 && !except2_2
; [then-branch: 2089 | False | dead]
; [else-branch: 2089 | True | live]
(push) ; 16
; [else-branch: 2089 | True]
(pop) ; 16
; [eval] !(p2_13 && !except2_2)
; [eval] p2_13 && !except2_2
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2090 | True | live]
; [else-branch: 2090 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2090 | True]
; [eval] p1_12 && !except1_2
; [then-branch: 2091 | False | dead]
; [else-branch: 2091 | True | live]
(push) ; 17
; [else-branch: 2091 | True]
(pop) ; 17
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2092 | True | live]
; [else-branch: 2092 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2092 | True]
; [eval] p2_12 && !except2_2
(push) ; 18
; [then-branch: 2093 | !(p2_12@499@01) | live]
; [else-branch: 2093 | p2_12@499@01 | live]
(push) ; 19
; [then-branch: 2093 | !(p2_12@499@01)]
(assert (not p2_12@499@01))
(pop) ; 19
(push) ; 19
; [else-branch: 2093 | p2_12@499@01]
; [eval] !except2_2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_12@499@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2094 | p2_12@499@01 | live]
; [else-branch: 2094 | !(p2_12@499@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2094 | p2_12@499@01]
; [exec]
; c_3_0.Container_valuep := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_valuep@500@01 $Ref)
(assert (= Container_valuep@500@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; tmp_3 := new()
(declare-const tmp_3@501@01 $Ref)
(assert (not (= tmp_3@501@01 $Ref.null)))
(assert (not (= tmp_3@501@01 tmp_3@466@01)))
(assert (not (= tmp_3@501@01 MyException_res_3@445@01)))
(assert (not (= tmp_3@501@01 c_7@426@01)))
(assert (not (= tmp_3@501@01 b_2_0@424@01)))
(assert (not
  (=
    tmp_3@501@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
(assert (not (= tmp_3@501@01 error_2_0@436@01)))
(assert (not (= tmp_3@501@01 MyException_res_3_0@446@01)))
(assert (not (= tmp_3@501@01 error_2@435@01)))
(assert (not (= tmp_3@501@01 Container_valuep@500@01)))
(assert (not (= tmp_3@501@01 tmp_2@478@01)))
(assert (not (= tmp_3@501@01 c@425@01)))
(assert (not (= tmp_3@501@01 _cthread_160_0@418@01)))
(assert (not (= tmp_3@501@01 _cthread_160@417@01)))
(assert (not (= tmp_3@501@01 b_2@423@01)))
(assert (not (= tmp_3@501@01 MyException_res_2@443@01)))
; [eval] p1_12 && !except1_2
; [then-branch: 2095 | False | dead]
; [else-branch: 2095 | True | live]
(push) ; 19
; [else-branch: 2095 | True]
(pop) ; 19
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2096 | True | live]
; [else-branch: 2096 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2096 | True]
; [eval] p2_12 && !except2_2
(push) ; 20
; [then-branch: 2097 | !(p2_12@499@01) | live]
; [else-branch: 2097 | p2_12@499@01 | live]
(push) ; 21
; [then-branch: 2097 | !(p2_12@499@01)]
(assert (not p2_12@499@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2097 | p2_12@499@01]
; [eval] !except2_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_12@499@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2098 | p2_12@499@01 | live]
; [else-branch: 2098 | !(p2_12@499@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2098 | p2_12@499@01]
; [exec]
; MyException_res_3_0 := tmp_3
; [eval] p1_12 && !except1_2
; [then-branch: 2099 | False | dead]
; [else-branch: 2099 | True | live]
(push) ; 21
; [else-branch: 2099 | True]
(pop) ; 21
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2100 | True | live]
; [else-branch: 2100 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2100 | True]
; [eval] p2_12 && !except2_2
(push) ; 22
; [then-branch: 2101 | !(p2_12@499@01) | live]
; [else-branch: 2101 | p2_12@499@01 | live]
(push) ; 23
; [then-branch: 2101 | !(p2_12@499@01)]
(assert (not p2_12@499@01))
(pop) ; 23
(push) ; 23
; [else-branch: 2101 | p2_12@499@01]
; [eval] !except2_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_12@499@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2102 | p2_12@499@01 | live]
; [else-branch: 2102 | !(p2_12@499@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2102 | p2_12@499@01]
; [exec]
; inhale typeof(MyException_res_3_0) == MyException()
(declare-const $t@502@01 $Snap)
(assert (= $t@502@01 $Snap.unit))
; [eval] typeof(MyException_res_3_0) == MyException()
; [eval] typeof(MyException_res_3_0)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_3@501@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_12 && !except1_2
; [then-branch: 2103 | False | dead]
; [else-branch: 2103 | True | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 2103 | True]
(pop) ; 23
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2104 | True | live]
; [else-branch: 2104 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2104 | True]
; [eval] p2_12 && !except2_2
(push) ; 24
; [then-branch: 2105 | !(p2_12@499@01) | live]
; [else-branch: 2105 | p2_12@499@01 | live]
(push) ; 25
; [then-branch: 2105 | !(p2_12@499@01)]
(assert (not p2_12@499@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2105 | p2_12@499@01]
; [eval] !except2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_12@499@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2106 | p2_12@499@01 | live]
; [else-branch: 2106 | !(p2_12@499@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2106 | p2_12@499@01]
; [exec]
; _err_3 := MyException_res_3_0
; [exec]
; except2_2 := true
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 2107 | !(p1_10@415@01) | live]
; [else-branch: 2107 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 2107 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2107 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2108 | p1_10@415@01 | live]
; [else-branch: 2108 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2108 | p1_10@415@01]
; [exec]
; _err := null
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 2109 | !(p2_10@416@01) | live]
; [else-branch: 2109 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 2109 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2109 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2110 | False | dead]
; [else-branch: 2110 | True | live]
(push) ; 26
; [else-branch: 2110 | True]
(pop) ; 26
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 2111 | !(p2_10@416@01) | live]
; [else-branch: 2111 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 2111 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2111 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2112 | True | live]
; [else-branch: 2112 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2112 | True]
; [exec]
; p1_14 := p1_10 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_10 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2113 | !(p1_10@415@01) | live]
; [else-branch: 2113 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 2113 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2113 | p1_10@415@01]
; [eval] !except1_2
(push) ; 29
; [then-branch: 2114 | False | live]
; [else-branch: 2114 | True | live]
(push) ; 30
; [then-branch: 2114 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2114 | True]
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p2_14 := p2_10 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_10 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2115 | !(p2_10@416@01) | live]
; [else-branch: 2115 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 2115 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2115 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p3_4 := p1_10 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_10 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2116 | !(p1_10@415@01) | live]
; [else-branch: 2116 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 2116 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2116 | p1_10@415@01]
; [eval] !except1_2
(push) ; 29
; [then-branch: 2117 | False | live]
; [else-branch: 2117 | True | live]
(push) ; 30
; [then-branch: 2117 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2117 | True]
; [eval] !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p2_10 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_10 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2118 | !(p2_10@416@01) | live]
; [else-branch: 2118 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 2118 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2118 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_14 && !except1_2
; [then-branch: 2119 | False | dead]
; [else-branch: 2119 | True | live]
(push) ; 27
; [else-branch: 2119 | True]
(pop) ; 27
; [eval] !(p1_14 && !except1_2)
; [eval] p1_14 && !except1_2
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2120 | True | live]
; [else-branch: 2120 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2120 | True]
; [eval] p2_14 && !except2_2
; [then-branch: 2121 | False | dead]
; [else-branch: 2121 | True | live]
(push) ; 28
; [else-branch: 2121 | True]
(pop) ; 28
; [eval] !(p2_14 && !except2_2)
; [eval] p2_14 && !except2_2
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2122 | True | live]
; [else-branch: 2122 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2122 | True]
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 2123 | !(p1_10@415@01) | live]
; [else-branch: 2123 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 2123 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2123 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2124 | p1_10@415@01 | live]
; [else-branch: 2124 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2124 | p1_10@415@01]
; [exec]
; c_3.Container_value := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_value@503@01 $Ref)
(assert (= Container_value@503@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 2125 | !(p2_10@416@01) | live]
; [else-branch: 2125 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 2125 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2125 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 2126 | False | dead]
; [else-branch: 2126 | True | live]
(push) ; 30
; [else-branch: 2126 | True]
(pop) ; 30
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 2127 | !(p2_10@416@01) | live]
; [else-branch: 2127 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 2127 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2127 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2128 | True | live]
; [else-branch: 2128 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2128 | True]
; [eval] p1_10 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2129 | p1_10@415@01 | live]
; [else-branch: 2129 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2129 | p1_10@415@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_10 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2130 | p2_10@416@01 | live]
; [else-branch: 2130 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2130 | p2_10@416@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2131 | p1_10@415@01 | live]
; [else-branch: 2131 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2131 | p1_10@415@01]
; [eval] _err == null
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2132 | True | live]
; [else-branch: 2132 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2132 | True]
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 33
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@503@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@503@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 33
(pop) ; 33
; Joined path conditions
(push) ; 33
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@503@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@503@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 33
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@503@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@503@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 33
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2133 | p2_10@416@01 | live]
; [else-branch: 2133 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2133 | p2_10@416@01]
; [eval] _err_3 == null
; [then-branch: 2134 | tmp_3@501@01 == Null | dead]
; [else-branch: 2134 | tmp_3@501@01 != Null | live]
(push) ; 34
; [else-branch: 2134 | tmp_3@501@01 != Null]
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2135 | p1_10@415@01 | live]
; [else-branch: 2135 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2135 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
; [then-branch: 2136 | False | dead]
; [else-branch: 2136 | True | live]
(push) ; 36
; [else-branch: 2136 | True]
(push) ; 37
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2137 | p2_10@416@01 | live]
; [else-branch: 2137 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2137 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 38
; [then-branch: 2138 | tmp_3@501@01 == Null | live]
; [else-branch: 2138 | tmp_3@501@01 != Null | live]
(push) ; 39
; [then-branch: 2138 | tmp_3@501@01 == Null]
(assert (= tmp_3@501@01 $Ref.null))
(pop) ; 39
(push) ; 39
; [else-branch: 2138 | tmp_3@501@01 != Null]
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_3@501@01 $Ref.null)) (= tmp_3@501@01 $Ref.null)))
(push) ; 38
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_3@501@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_3@501@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_3@501@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_3@501@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2139 | tmp_3@501@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@501@01), MyException[PyType]) | live]
; [else-branch: 2139 | !(tmp_3@501@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@501@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2139 | tmp_3@501@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@501@01), MyException[PyType])]
(assert (and
  (not (= tmp_3@501@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_3@501@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(push) ; 39
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@500@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@500@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 39
(pop) ; 39
; Joined path conditions
(push) ; 39
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@500@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@500@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(push) ; 39
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@500@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@500@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2140 | p1_10@415@01 | live]
; [else-branch: 2140 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2140 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 41
; [then-branch: 2141 | False | dead]
; [else-branch: 2141 | True | live]
(push) ; 42
; [else-branch: 2141 | True]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2142 | p2_10@416@01 | live]
; [else-branch: 2142 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2142 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (= tmp_3@501@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2143 | tmp_3@501@01 != Null | live]
; [else-branch: 2143 | tmp_3@501@01 == Null | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2143 | tmp_3@501@01 != Null]
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  (and p2_10@416@01 (not (= tmp_3@501@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_3@501@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_10@416@01 (not (= tmp_3@501@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_3@501@01) (as MyException<PyType>  PyType))))
; [eval] p1_10 ==> (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2144 | p1_10@415@01 | live]
; [else-branch: 2144 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2144 | p1_10@415@01]
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
(push) ; 41
; [then-branch: 2145 | False | live]
; [else-branch: 2145 | True | live]
(push) ; 42
; [then-branch: 2145 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2145 | True]
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
(push) ; 43
; [then-branch: 2146 | False | live]
; [else-branch: 2146 | True | live]
(push) ; 44
; [then-branch: 2146 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2146 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 2147 | False | live]
; [else-branch: 2147 | True | live]
(push) ; 46
; [then-branch: 2147 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2147 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_10 ==> (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2148 | p2_10@416@01 | live]
; [else-branch: 2148 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2148 | p2_10@416@01]
; [eval] (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false)
(push) ; 41
; [then-branch: 2149 | False | live]
; [else-branch: 2149 | True | live]
(push) ; 42
; [then-branch: 2149 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2149 | True]
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false)
(push) ; 43
; [then-branch: 2150 | False | live]
; [else-branch: 2150 | True | live]
(push) ; 44
; [then-branch: 2150 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2150 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 2151 | False | live]
; [else-branch: 2151 | True | live]
(push) ; 46
; [then-branch: 2151 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2151 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 2152 | !(p1_10@415@01) | live]
; [else-branch: 2152 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 2152 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2152 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 2153 | !(p1_10@415@01) | dead]
; [else-branch: 2153 | p1_10@415@01 | live]
(push) ; 29
; [else-branch: 2153 | p1_10@415@01]
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 2154 | !(p1_10@415@01) | live]
; [else-branch: 2154 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 2154 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2154 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2155 | !(p1_10@415@01) | dead]
; [else-branch: 2155 | p1_10@415@01 | live]
(push) ; 25
; [else-branch: 2155 | p1_10@415@01]
(pop) ; 25
(pop) ; 24
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 24
; [then-branch: 2156 | !(p2_12@499@01) | live]
; [else-branch: 2156 | p2_12@499@01 | live]
(push) ; 25
; [then-branch: 2156 | !(p2_12@499@01)]
(assert (not p2_12@499@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2156 | p2_12@499@01]
; [eval] !except2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 2157 | !(p2_12@499@01) | dead]
; [else-branch: 2157 | p2_12@499@01 | live]
(push) ; 24
; [else-branch: 2157 | p2_12@499@01]
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 22
; [then-branch: 2158 | !(p2_12@499@01) | live]
; [else-branch: 2158 | p2_12@499@01 | live]
(push) ; 23
; [then-branch: 2158 | !(p2_12@499@01)]
(assert (not p2_12@499@01))
(pop) ; 23
(push) ; 23
; [else-branch: 2158 | p2_12@499@01]
; [eval] !except2_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 2159 | !(p2_12@499@01) | dead]
; [else-branch: 2159 | p2_12@499@01 | live]
(push) ; 22
; [else-branch: 2159 | p2_12@499@01]
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 20
; [then-branch: 2160 | !(p2_12@499@01) | live]
; [else-branch: 2160 | p2_12@499@01 | live]
(push) ; 21
; [then-branch: 2160 | !(p2_12@499@01)]
(assert (not p2_12@499@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2160 | p2_12@499@01]
; [eval] !except2_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 2161 | !(p2_12@499@01) | dead]
; [else-branch: 2161 | p2_12@499@01 | live]
(push) ; 20
; [else-branch: 2161 | p2_12@499@01]
(pop) ; 20
(pop) ; 19
(pop) ; 18
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 18
; [then-branch: 2162 | !(p2_12@499@01) | live]
; [else-branch: 2162 | p2_12@499@01 | live]
(push) ; 19
; [then-branch: 2162 | !(p2_12@499@01)]
(assert (not p2_12@499@01))
(pop) ; 19
(push) ; 19
; [else-branch: 2162 | p2_12@499@01]
; [eval] !except2_2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 2163 | !(p2_12@499@01) | dead]
; [else-branch: 2163 | p2_12@499@01 | live]
(push) ; 18
; [else-branch: 2163 | p2_12@499@01]
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
; [eval] !p2_12
(push) ; 14
(set-option :timeout 10)
(assert (not p2_12@499@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2164 | !(p2_12@499@01) | dead]
; [else-branch: 2164 | p2_12@499@01 | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2164 | p2_12@499@01]
(assert p2_12@499@01)
(pop) ; 14
(pop) ; 13
(pop) ; 12
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 2165 | !(p2_11@475@01) | live]
; [else-branch: 2165 | p2_11@475@01 | live]
(push) ; 13
; [then-branch: 2165 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2165 | p2_11@475@01]
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 2166 | !(p2_11@475@01) | dead]
; [else-branch: 2166 | p2_11@475@01 | live]
(push) ; 12
; [else-branch: 2166 | p2_11@475@01]
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 10
; [then-branch: 2167 | !(p2_11@475@01) | live]
; [else-branch: 2167 | p2_11@475@01 | live]
(push) ; 11
; [then-branch: 2167 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2167 | p2_11@475@01]
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 2168 | !(p2_11@475@01) | dead]
; [else-branch: 2168 | p2_11@475@01 | live]
(push) ; 10
; [else-branch: 2168 | p2_11@475@01]
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 2063 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 8
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 8
; [then-branch: 2169 | !(p2_11@475@01) | live]
; [else-branch: 2169 | p2_11@475@01 | live]
(push) ; 9
; [then-branch: 2169 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2169 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_11@475@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_11@475@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2170 | !(p2_11@475@01) | live]
; [else-branch: 2170 | p2_11@475@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2170 | !(p2_11@475@01)]
(assert (not p2_11@475@01))
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 2171 | !(p1_11@474@01) | live]
; [else-branch: 2171 | p1_11@474@01 | live]
(push) ; 10
; [then-branch: 2171 | !(p1_11@474@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 2171 | p1_11@474@01]
(assert p1_11@474@01)
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 2172 | p1_11@474@01 | dead]
; [else-branch: 2172 | !(p1_11@474@01) | live]
(push) ; 9
; [else-branch: 2172 | !(p1_11@474@01)]
(pop) ; 9
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 2173 | !(p1_11@474@01) | live]
; [else-branch: 2173 | p1_11@474@01 | live]
(push) ; 10
; [then-branch: 2173 | !(p1_11@474@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 2173 | p1_11@474@01]
(assert p1_11@474@01)
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_11@474@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2174 | !(p1_11@474@01) | live]
; [else-branch: 2174 | p1_11@474@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2174 | !(p1_11@474@01)]
; [eval] p2_11 && !except2_2
(push) ; 10
; [then-branch: 2175 | !(p2_11@475@01) | live]
; [else-branch: 2175 | p2_11@475@01 | live]
(push) ; 11
; [then-branch: 2175 | !(p2_11@475@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 2175 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 2176 | p2_11@475@01 | dead]
; [else-branch: 2176 | !(p2_11@475@01) | live]
(push) ; 10
; [else-branch: 2176 | !(p2_11@475@01)]
(pop) ; 10
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 10
; [then-branch: 2177 | !(p2_11@475@01) | live]
; [else-branch: 2177 | p2_11@475@01 | live]
(push) ; 11
; [then-branch: 2177 | !(p2_11@475@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 2177 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_11@475@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2178 | !(p2_11@475@01) | live]
; [else-branch: 2178 | p2_11@475@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2178 | !(p2_11@475@01)]
; [eval] p1_11 && !except1_2
(push) ; 11
; [then-branch: 2179 | !(p1_11@474@01) | live]
; [else-branch: 2179 | p1_11@474@01 | live]
(push) ; 12
; [then-branch: 2179 | !(p1_11@474@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 2179 | p1_11@474@01]
(assert p1_11@474@01)
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 2180 | p1_11@474@01 | dead]
; [else-branch: 2180 | !(p1_11@474@01) | live]
(push) ; 11
; [else-branch: 2180 | !(p1_11@474@01)]
(pop) ; 11
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 11
; [then-branch: 2181 | !(p1_11@474@01) | live]
; [else-branch: 2181 | p1_11@474@01 | live]
(push) ; 12
; [then-branch: 2181 | !(p1_11@474@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 2181 | p1_11@474@01]
(assert p1_11@474@01)
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p1_11@474@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2182 | !(p1_11@474@01) | live]
; [else-branch: 2182 | p1_11@474@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2182 | !(p1_11@474@01)]
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 2183 | !(p2_11@475@01) | live]
; [else-branch: 2183 | p2_11@475@01 | live]
(push) ; 13
; [then-branch: 2183 | !(p2_11@475@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2183 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 2184 | p2_11@475@01 | dead]
; [else-branch: 2184 | !(p2_11@475@01) | live]
(push) ; 12
; [else-branch: 2184 | !(p2_11@475@01)]
(pop) ; 12
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 2185 | !(p2_11@475@01) | live]
; [else-branch: 2185 | p2_11@475@01 | live]
(push) ; 13
; [then-branch: 2185 | !(p2_11@475@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2185 | p2_11@475@01]
(assert p2_11@475@01)
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_11@475@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2186 | !(p2_11@475@01) | live]
; [else-branch: 2186 | p2_11@475@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2186 | !(p2_11@475@01)]
; [exec]
; thisexcept1_2 := except1_2 && !bypass1_2
; [eval] except1_2 && !bypass1_2
; [exec]
; thisexcept2_2 := except2_2 && !bypass2_2
; [eval] except2_2 && !bypass2_2
; [exec]
; p1_12 := p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
; [eval] p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 2187 | !(p1_10@415@01) | live]
; [else-branch: 2187 | p1_10@415@01 | live]
(push) ; 14
; [then-branch: 2187 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2187 | p1_10@415@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p2_12 := p2_10 &&
;   (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
; [eval] p2_10 && (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
(push) ; 13
; [then-branch: 2188 | !(p2_10@416@01) | live]
; [else-branch: 2188 | p2_10@416@01 | live]
(push) ; 14
; [then-branch: 2188 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2188 | p2_10@416@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 2189 | False | dead]
; [else-branch: 2189 | True | live]
(push) ; 13
; [else-branch: 2189 | True]
(pop) ; 13
; [eval] !p1_12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2190 | True | live]
; [else-branch: 2190 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2190 | True]
; [then-branch: 2191 | False | dead]
; [else-branch: 2191 | True | live]
(push) ; 14
; [else-branch: 2191 | True]
(pop) ; 14
; [eval] !p2_12
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2192 | True | live]
; [else-branch: 2192 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2192 | True]
; [exec]
; p1_13 := p1_12 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_12 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_13 := p2_12 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_12 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_3 := p1_12 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_12 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_3 := p2_12 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_12 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_13 && !except1_2
; [then-branch: 2193 | False | dead]
; [else-branch: 2193 | True | live]
(push) ; 15
; [else-branch: 2193 | True]
(pop) ; 15
; [eval] !(p1_13 && !except1_2)
; [eval] p1_13 && !except1_2
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2194 | True | live]
; [else-branch: 2194 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2194 | True]
; [eval] p2_13 && !except2_2
; [then-branch: 2195 | False | dead]
; [else-branch: 2195 | True | live]
(push) ; 16
; [else-branch: 2195 | True]
(pop) ; 16
; [eval] !(p2_13 && !except2_2)
; [eval] p2_13 && !except2_2
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2196 | True | live]
; [else-branch: 2196 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2196 | True]
; [eval] p1_12 && !except1_2
; [then-branch: 2197 | False | dead]
; [else-branch: 2197 | True | live]
(push) ; 17
; [else-branch: 2197 | True]
(pop) ; 17
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2198 | True | live]
; [else-branch: 2198 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2198 | True]
; [eval] p2_12 && !except2_2
; [then-branch: 2199 | False | dead]
; [else-branch: 2199 | True | live]
(push) ; 18
; [else-branch: 2199 | True]
(pop) ; 18
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2200 | True | live]
; [else-branch: 2200 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2200 | True]
; [exec]
; tmp_3 := new()
(declare-const tmp_3@504@01 $Ref)
(assert (not (= tmp_3@504@01 $Ref.null)))
(assert (not (= tmp_3@504@01 tmp_3@466@01)))
(assert (not (= tmp_3@504@01 MyException_res_3@445@01)))
(assert (not (= tmp_3@504@01 MyException_res_2_0@444@01)))
(assert (not (= tmp_3@504@01 c_7@426@01)))
(assert (not (= tmp_3@504@01 b_2_0@424@01)))
(assert (not
  (=
    tmp_3@504@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))
(assert (not
  (=
    tmp_3@504@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
(assert (not (= tmp_3@504@01 error_2_0@436@01)))
(assert (not (= tmp_3@504@01 MyException_res_3_0@446@01)))
(assert (not (= tmp_3@504@01 error_2@435@01)))
(assert (not (= tmp_3@504@01 tmp_2@478@01)))
(assert (not (= tmp_3@504@01 c@425@01)))
(assert (not (= tmp_3@504@01 _cthread_160_0@418@01)))
(assert (not (= tmp_3@504@01 _cthread_160@417@01)))
(assert (not (= tmp_3@504@01 b_2@423@01)))
(assert (not (= tmp_3@504@01 MyException_res_2@443@01)))
; [eval] p1_12 && !except1_2
; [then-branch: 2201 | False | dead]
; [else-branch: 2201 | True | live]
(push) ; 19
; [else-branch: 2201 | True]
(pop) ; 19
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2202 | True | live]
; [else-branch: 2202 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2202 | True]
; [eval] p2_12 && !except2_2
; [then-branch: 2203 | False | dead]
; [else-branch: 2203 | True | live]
(push) ; 20
; [else-branch: 2203 | True]
(pop) ; 20
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2204 | True | live]
; [else-branch: 2204 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2204 | True]
; [eval] p1_12 && !except1_2
; [then-branch: 2205 | False | dead]
; [else-branch: 2205 | True | live]
(push) ; 21
; [else-branch: 2205 | True]
(pop) ; 21
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2206 | True | live]
; [else-branch: 2206 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2206 | True]
; [eval] p2_12 && !except2_2
; [then-branch: 2207 | False | dead]
; [else-branch: 2207 | True | live]
(push) ; 22
; [else-branch: 2207 | True]
(pop) ; 22
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2208 | True | live]
; [else-branch: 2208 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2208 | True]
; [eval] p1_12 && !except1_2
; [then-branch: 2209 | False | dead]
; [else-branch: 2209 | True | live]
(push) ; 23
; [else-branch: 2209 | True]
(pop) ; 23
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2210 | True | live]
; [else-branch: 2210 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2210 | True]
; [eval] p2_12 && !except2_2
; [then-branch: 2211 | False | dead]
; [else-branch: 2211 | True | live]
(push) ; 24
; [else-branch: 2211 | True]
(pop) ; 24
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 24
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2212 | True | live]
; [else-branch: 2212 | False | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2212 | True]
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 2213 | !(p1_10@415@01) | live]
; [else-branch: 2213 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 2213 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2213 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2214 | p1_10@415@01 | live]
; [else-branch: 2214 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2214 | p1_10@415@01]
; [exec]
; _err := null
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 2215 | !(p2_10@416@01) | live]
; [else-branch: 2215 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 2215 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2215 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2216 | p2_10@416@01 | live]
; [else-branch: 2216 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2216 | p2_10@416@01]
; [exec]
; _err_3 := null
; [exec]
; p1_14 := p1_10 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_10 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2217 | !(p1_10@415@01) | live]
; [else-branch: 2217 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 2217 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2217 | p1_10@415@01]
; [eval] !except1_2
(push) ; 29
; [then-branch: 2218 | False | live]
; [else-branch: 2218 | True | live]
(push) ; 30
; [then-branch: 2218 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2218 | True]
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p2_14 := p2_10 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_10 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2219 | !(p2_10@416@01) | live]
; [else-branch: 2219 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 2219 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2219 | p2_10@416@01]
; [eval] !except2_2
(push) ; 29
; [then-branch: 2220 | False | live]
; [else-branch: 2220 | True | live]
(push) ; 30
; [then-branch: 2220 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2220 | True]
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p3_4 := p1_10 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_10 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2221 | !(p1_10@415@01) | live]
; [else-branch: 2221 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 2221 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2221 | p1_10@415@01]
; [eval] !except1_2
(push) ; 29
; [then-branch: 2222 | False | live]
; [else-branch: 2222 | True | live]
(push) ; 30
; [then-branch: 2222 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2222 | True]
; [eval] !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p2_10 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_10 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2223 | !(p2_10@416@01) | live]
; [else-branch: 2223 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 2223 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2223 | p2_10@416@01]
; [eval] !except2_2
(push) ; 29
; [then-branch: 2224 | False | live]
; [else-branch: 2224 | True | live]
(push) ; 30
; [then-branch: 2224 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2224 | True]
; [eval] !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_14 && !except1_2
; [then-branch: 2225 | False | dead]
; [else-branch: 2225 | True | live]
(push) ; 27
; [else-branch: 2225 | True]
(pop) ; 27
; [eval] !(p1_14 && !except1_2)
; [eval] p1_14 && !except1_2
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2226 | True | live]
; [else-branch: 2226 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2226 | True]
; [eval] p2_14 && !except2_2
; [then-branch: 2227 | False | dead]
; [else-branch: 2227 | True | live]
(push) ; 28
; [else-branch: 2227 | True]
(pop) ; 28
; [eval] !(p2_14 && !except2_2)
; [eval] p2_14 && !except2_2
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2228 | True | live]
; [else-branch: 2228 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2228 | True]
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 2229 | !(p1_10@415@01) | live]
; [else-branch: 2229 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 2229 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2229 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2230 | p1_10@415@01 | live]
; [else-branch: 2230 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2230 | p1_10@415@01]
; [exec]
; c_3.Container_value := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_value@505@01 $Ref)
(assert (= Container_value@505@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 2231 | !(p2_10@416@01) | live]
; [else-branch: 2231 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 2231 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2231 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2232 | p2_10@416@01 | live]
; [else-branch: 2232 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2232 | p2_10@416@01]
; [exec]
; c_3_0.Container_valuep := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 31
(pop) ; 31
; Joined path conditions
(declare-const Container_valuep@506@01 $Ref)
(assert (= Container_valuep@506@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p1_10 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2233 | p1_10@415@01 | live]
; [else-branch: 2233 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2233 | p1_10@415@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_10 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2234 | p2_10@416@01 | live]
; [else-branch: 2234 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2234 | p2_10@416@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2235 | p1_10@415@01 | live]
; [else-branch: 2235 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2235 | p1_10@415@01]
; [eval] _err == null
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2236 | True | live]
; [else-branch: 2236 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2236 | True]
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 33
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@505@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@505@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 33
(pop) ; 33
; Joined path conditions
(push) ; 33
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@505@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@505@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 33
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@505@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@505@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 33
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2237 | p2_10@416@01 | live]
; [else-branch: 2237 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2237 | p2_10@416@01]
; [eval] _err_3 == null
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2238 | True | live]
; [else-branch: 2238 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2238 | True]
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(push) ; 35
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@506@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@506@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 35
(pop) ; 35
; Joined path conditions
(push) ; 35
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@506@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 35
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@506@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 35
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@506@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@506@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2239 | p1_10@415@01 | live]
; [else-branch: 2239 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2239 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
; [then-branch: 2240 | False | dead]
; [else-branch: 2240 | True | live]
(push) ; 36
; [else-branch: 2240 | True]
(push) ; 37
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2241 | p2_10@416@01 | live]
; [else-branch: 2241 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2241 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
; [then-branch: 2242 | False | dead]
; [else-branch: 2242 | True | live]
(push) ; 38
; [else-branch: 2242 | True]
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2243 | p1_10@415@01 | live]
; [else-branch: 2243 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2243 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 41
; [then-branch: 2244 | False | dead]
; [else-branch: 2244 | True | live]
(push) ; 42
; [else-branch: 2244 | True]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2245 | p2_10@416@01 | live]
; [else-branch: 2245 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2245 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 41
; [then-branch: 2246 | False | dead]
; [else-branch: 2246 | True | live]
(push) ; 42
; [else-branch: 2246 | True]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_10 ==> (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2247 | p1_10@415@01 | live]
; [else-branch: 2247 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2247 | p1_10@415@01]
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
(push) ; 41
; [then-branch: 2248 | False | live]
; [else-branch: 2248 | True | live]
(push) ; 42
; [then-branch: 2248 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2248 | True]
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
(push) ; 43
; [then-branch: 2249 | False | live]
; [else-branch: 2249 | True | live]
(push) ; 44
; [then-branch: 2249 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2249 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 2250 | False | live]
; [else-branch: 2250 | True | live]
(push) ; 46
; [then-branch: 2250 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2250 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_10 ==> (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2251 | p2_10@416@01 | live]
; [else-branch: 2251 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2251 | p2_10@416@01]
; [eval] (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false)
(push) ; 41
; [then-branch: 2252 | False | live]
; [else-branch: 2252 | True | live]
(push) ; 42
; [then-branch: 2252 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2252 | True]
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false)
(push) ; 43
; [then-branch: 2253 | False | live]
; [else-branch: 2253 | True | live]
(push) ; 44
; [then-branch: 2253 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2253 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 2254 | False | live]
; [else-branch: 2254 | True | live]
(push) ; 46
; [then-branch: 2254 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2254 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 2255 | !(p2_10@416@01) | live]
; [else-branch: 2255 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 2255 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2255 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 2256 | !(p2_10@416@01) | dead]
; [else-branch: 2256 | p2_10@416@01 | live]
(push) ; 30
; [else-branch: 2256 | p2_10@416@01]
(pop) ; 30
(pop) ; 29
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 2257 | !(p1_10@415@01) | live]
; [else-branch: 2257 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 2257 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2257 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 2258 | !(p1_10@415@01) | dead]
; [else-branch: 2258 | p1_10@415@01 | live]
(push) ; 29
; [else-branch: 2258 | p1_10@415@01]
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 2259 | !(p2_10@416@01) | live]
; [else-branch: 2259 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 2259 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2259 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2260 | !(p2_10@416@01) | dead]
; [else-branch: 2260 | p2_10@416@01 | live]
(push) ; 26
; [else-branch: 2260 | p2_10@416@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 2261 | !(p1_10@415@01) | live]
; [else-branch: 2261 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 2261 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2261 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2262 | !(p1_10@415@01) | dead]
; [else-branch: 2262 | p1_10@415@01 | live]
(push) ; 25
; [else-branch: 2262 | p1_10@415@01]
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 2170 | p2_11@475@01]
(assert p2_11@475@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 2061 | p1_11@474@01]
(assert p1_11@474@01)
(pop) ; 7
(pop) ; 6
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 6
; [then-branch: 2263 | !(p2_10@416@01) | live]
; [else-branch: 2263 | p2_10@416@01 | live]
(push) ; 7
; [then-branch: 2263 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2263 | p2_10@416@01]
; [eval] !except2_2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [then-branch: 2264 | !(p2_10@416@01) | dead]
; [else-branch: 2264 | p2_10@416@01 | live]
(push) ; 6
; [else-branch: 2264 | p2_10@416@01]
(pop) ; 6
(pop) ; 5
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 5
; [then-branch: 2265 | !(p1_10@415@01) | live]
; [else-branch: 2265 | p1_10@415@01 | live]
(push) ; 6
; [then-branch: 2265 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2265 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 2266 | !(p1_10@415@01) | dead]
; [else-branch: 2266 | p1_10@415@01 | live]
(push) ; 5
; [else-branch: 2266 | p1_10@415@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 1719 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
  $Snap.unit))
; [eval] p1_10 ==> issubtype(typeof(c.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2267 | p1_10@415@01 | live]
; [else-branch: 2267 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2267 | p1_10@415@01]
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_10@415@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
  $Snap.unit))
; [eval] p2_10 ==> issubtype(typeof(c_7.Container_valuep), int())
(push) ; 4
; [then-branch: 2268 | p2_10@416@01 | dead]
; [else-branch: 2268 | !(p2_10@416@01) | live]
(push) ; 5
; [else-branch: 2268 | !(p2_10@416@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2269 | p1_10@415@01 | live]
; [else-branch: 2269 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2269 | p1_10@415@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 4
; [then-branch: 2270 | p2_10@416@01 | dead]
; [else-branch: 2270 | !(p2_10@416@01) | live]
(push) ; 5
; [else-branch: 2270 | !(p2_10@416@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@507@01 $Snap)
(assert (= $t@507@01 ($Snap.combine ($Snap.first $t@507@01) ($Snap.second $t@507@01))))
(assert (= ($Snap.first $t@507@01) $Snap.unit))
; [eval] p1_10 ==> (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_160) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2271 | p1_10@415@01 | live]
; [else-branch: 2271 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2271 | p1_10@415@01]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_160) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_160)
(push) ; 7
; [then-branch: 2272 | False | live]
; [else-branch: 2272 | True | live]
(push) ; 8
; [then-branch: 2272 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2272 | True]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_160)
(push) ; 9
; [then-branch: 2273 | False | live]
; [else-branch: 2273 | True | live]
(push) ; 10
; [then-branch: 2273 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2273 | True]
; [eval] _residue_160 <= _current_wait_level_160
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_10@415@01 (<= _residue_160@421@01 _current_wait_level_160@427@01)))
(assert (=
  ($Snap.second $t@507@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@507@01))
    ($Snap.second ($Snap.second $t@507@01)))))
(assert (= ($Snap.first ($Snap.second $t@507@01)) $Snap.unit))
; [eval] p2_10 ==> (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_160_0) && ((forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
(push) ; 5
; [then-branch: 2274 | p2_10@416@01 | dead]
; [else-branch: 2274 | !(p2_10@416@01) | live]
(push) ; 6
; [else-branch: 2274 | !(p2_10@416@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@507@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@507@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2275 | p1_10@415@01 | live]
; [else-branch: 2275 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2275 | p1_10@415@01]
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@429@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@429@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2276 | _err@429@01 == Null | live]
; [else-branch: 2276 | _err@429@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2276 | _err@429@01 == Null]
(assert (= _err@429@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@507@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@507@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@507@01)))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@507@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@507@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@507@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@507@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@507@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@507@01)))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@507@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@507@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@507@01))))) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@507@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@507@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
; [then-branch: 2277 | p2_10@416@01 | dead]
; [else-branch: 2277 | !(p2_10@416@01) | live]
(push) ; 7
; [else-branch: 2277 | !(p2_10@416@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@507@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2278 | p1_10@415@01 | live]
; [else-branch: 2278 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2278 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 9
; [then-branch: 2279 | _err@429@01 == Null | live]
; [else-branch: 2279 | _err@429@01 != Null | live]
(push) ; 10
; [then-branch: 2279 | _err@429@01 == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 2279 | _err@429@01 != Null]
(assert (not (= _err@429@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@429@01 $Ref.null)) (= _err@429@01 $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2280 | _err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]) | dead]
; [else-branch: 2280 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 2280 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
; [then-branch: 2281 | p2_10@416@01 | dead]
; [else-branch: 2281 | !(p2_10@416@01) | live]
(push) ; 10
; [else-branch: 2281 | !(p2_10@416@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2282 | p1_10@415@01 | live]
; [else-branch: 2282 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2282 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 13
; [then-branch: 2283 | _err@429@01 != Null | dead]
; [else-branch: 2283 | _err@429@01 == Null | live]
(push) ; 14
; [else-branch: 2283 | _err@429@01 == Null]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 11
; [then-branch: 2284 | p2_10@416@01 | dead]
; [else-branch: 2284 | !(p2_10@416@01) | live]
(push) ; 12
; [else-branch: 2284 | !(p2_10@416@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2285 | p1_10@415@01 | live]
; [else-branch: 2285 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2285 | p1_10@415@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 11
; [then-branch: 2286 | p2_10@416@01 | dead]
; [else-branch: 2286 | !(p2_10@416@01) | live]
(push) ; 12
; [else-branch: 2286 | !(p2_10@416@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2276 | _err@429@01 != Null]
(assert (not (= _err@429@01 $Ref.null)))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@507@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@507@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@507@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
; [then-branch: 2287 | p2_10@416@01 | dead]
; [else-branch: 2287 | !(p2_10@416@01) | live]
(push) ; 7
; [else-branch: 2287 | !(p2_10@416@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@507@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2288 | p1_10@415@01 | live]
; [else-branch: 2288 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2288 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 9
; [then-branch: 2289 | _err@429@01 == Null | live]
; [else-branch: 2289 | _err@429@01 != Null | live]
(push) ; 10
; [then-branch: 2289 | _err@429@01 == Null]
(assert (= _err@429@01 $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 2289 | _err@429@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@429@01 $Ref.null)) (= _err@429@01 $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not (= _err@429@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2290 | _err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]) | live]
; [else-branch: 2290 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2290 | _err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType])]
(assert (and
  (not (= _err@429@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
; [then-branch: 2291 | p2_10@416@01 | dead]
; [else-branch: 2291 | !(p2_10@416@01) | live]
(push) ; 10
; [else-branch: 2291 | !(p2_10@416@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2292 | p1_10@415@01 | live]
; [else-branch: 2292 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2292 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err@429@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2293 | _err@429@01 != Null | live]
; [else-branch: 2293 | _err@429@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2293 | _err@429@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and p1_10@415@01 (not (= _err@429@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 11
; [then-branch: 2294 | p2_10@416@01 | dead]
; [else-branch: 2294 | !(p2_10@416@01) | live]
(push) ; 12
; [else-branch: 2294 | !(p2_10@416@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2295 | p1_10@415@01 | live]
; [else-branch: 2295 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2295 | p1_10@415@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 11
; [then-branch: 2296 | p2_10@416@01 | dead]
; [else-branch: 2296 | !(p2_10@416@01) | live]
(push) ; 12
; [else-branch: 2296 | !(p2_10@416@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 2290 | !(_err@429@01 != Null && issubtype[Bool](typeof[PyType](_err@429@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@429@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
; [then-branch: 2297 | p2_10@416@01 | dead]
; [else-branch: 2297 | !(p2_10@416@01) | live]
(push) ; 10
; [else-branch: 2297 | !(p2_10@416@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2298 | p1_10@415@01 | live]
; [else-branch: 2298 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2298 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err@429@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= _err@429@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2299 | _err@429@01 != Null | live]
; [else-branch: 2299 | _err@429@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2299 | _err@429@01 != Null]
(assert (not (= _err@429@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not (= _err@429@01 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=> p1_10@415@01 (not (= _err@429@01 $Ref.null))))
(assert (=>
  (and p1_10@415@01 (not (= _err@429@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@429@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 11
; [then-branch: 2300 | p2_10@416@01 | dead]
; [else-branch: 2300 | !(p2_10@416@01) | live]
(push) ; 12
; [else-branch: 2300 | !(p2_10@416@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2301 | p1_10@415@01 | dead]
; [else-branch: 2301 | !(p1_10@415@01) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 2301 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not p1_10@415@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@507@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 11
; [then-branch: 2302 | p2_10@416@01 | dead]
; [else-branch: 2302 | !(p2_10@416@01) | live]
(push) ; 12
; [else-branch: 2302 | !(p2_10@416@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_2: Bool
(declare-const except1_2@508@01 Bool)
; [exec]
; var except2_2: Bool
(declare-const except2_2@509@01 Bool)
; [exec]
; var error_2: Ref
(declare-const error_2@510@01 $Ref)
; [exec]
; var error_2_0: Ref
(declare-const error_2_0@511@01 $Ref)
; [exec]
; var try_finally_10: Int
(declare-const try_finally_10@512@01 Int)
; [exec]
; var try_finally_10_0: Int
(declare-const try_finally_10_0@513@01 Int)
; [exec]
; var b_7: Ref
(declare-const b_7@514@01 $Ref)
; [exec]
; var b_7_0: Ref
(declare-const b_7_0@515@01 $Ref)
; [exec]
; var c_3: Ref
(declare-const c_3@516@01 $Ref)
; [exec]
; var c_3_0: Ref
(declare-const c_3_0@517@01 $Ref)
; [exec]
; var MyException_res_2: Ref
(declare-const MyException_res_2@518@01 $Ref)
; [exec]
; var MyException_res_2_0: Ref
(declare-const MyException_res_2_0@519@01 $Ref)
; [exec]
; var MyException_res_3: Ref
(declare-const MyException_res_3@520@01 $Ref)
; [exec]
; var MyException_res_3_0: Ref
(declare-const MyException_res_3_0@521@01 $Ref)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@522@01 $Perm)
; [exec]
; var _cwl_160_0: Perm
(declare-const _cwl_160_0@523@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@524@01 Seq<Measure$>)
; [exec]
; var _method_measures_160_0: Seq[Measure$]
(declare-const _method_measures_160_0@525@01 Seq<Measure$>)
; [exec]
; var bypass1_2: Bool
(declare-const bypass1_2@526@01 Bool)
; [exec]
; var bypass2_2: Bool
(declare-const bypass2_2@527@01 Bool)
; [exec]
; var thisexcept1_2: Bool
(declare-const thisexcept1_2@528@01 Bool)
; [exec]
; var thisexcept2_2: Bool
(declare-const thisexcept2_2@529@01 Bool)
; [exec]
; var p1_12: Bool
(declare-const p1_12@530@01 Bool)
; [exec]
; var p2_12: Bool
(declare-const p2_12@531@01 Bool)
; [exec]
; var p1_11: Bool
(declare-const p1_11@532@01 Bool)
; [exec]
; var p2_11: Bool
(declare-const p2_11@533@01 Bool)
; [exec]
; var p3_2: Bool
(declare-const p3_2@534@01 Bool)
; [exec]
; var p4_2: Bool
(declare-const p4_2@535@01 Bool)
; [exec]
; var tmp_2: Ref
(declare-const tmp_2@536@01 $Ref)
; [exec]
; var p1_13: Bool
(declare-const p1_13@537@01 Bool)
; [exec]
; var p2_13: Bool
(declare-const p2_13@538@01 Bool)
; [exec]
; var p3_3: Bool
(declare-const p3_3@539@01 Bool)
; [exec]
; var p4_3: Bool
(declare-const p4_3@540@01 Bool)
; [exec]
; var tmp_3: Ref
(declare-const tmp_3@541@01 $Ref)
; [exec]
; var p1_14: Bool
(declare-const p1_14@542@01 Bool)
; [exec]
; var p2_14: Bool
(declare-const p2_14@543@01 Bool)
; [exec]
; var p3_4: Bool
(declare-const p3_4@544@01 Bool)
; [exec]
; var p4_4: Bool
(declare-const p4_4@545@01 Bool)
; [exec]
; inhale p1_10
(declare-const $t@546@01 $Snap)
(assert (= $t@546@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; except1_2 := false
; [exec]
; except2_2 := false
; [eval] p1_10 && !except1_2
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2303 | !(p1_10@415@01) | live]
; [else-branch: 2303 | p1_10@415@01 | live]
(push) ; 6
; [then-branch: 2303 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2303 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_10@415@01 (not p1_10@415@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2304 | p1_10@415@01 | live]
; [else-branch: 2304 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2304 | p1_10@415@01]
; [exec]
; _method_measures_160 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; b_7 := b_2
; [exec]
; c_3 := c
; [eval] p2_10 && !except2_2
(push) ; 6
; [then-branch: 2305 | !(p2_10@416@01) | live]
; [else-branch: 2305 | p2_10@416@01 | live]
(push) ; 7
; [then-branch: 2305 | !(p2_10@416@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 2305 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_10@416@01 (not p2_10@416@01)))
; [then-branch: 2306 | p2_10@416@01 | dead]
; [else-branch: 2306 | !(p2_10@416@01) | live]
(push) ; 6
; [else-branch: 2306 | !(p2_10@416@01)]
(pop) ; 6
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 6
; [then-branch: 2307 | !(p2_10@416@01) | live]
; [else-branch: 2307 | p2_10@416@01 | live]
(push) ; 7
; [then-branch: 2307 | !(p2_10@416@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 2307 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2308 | !(p2_10@416@01) | live]
; [else-branch: 2308 | p2_10@416@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2308 | !(p2_10@416@01)]
; [exec]
; bypass1_2 := !(p1_10 && !except1_2)
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 7
; [then-branch: 2309 | !(p1_10@415@01) | live]
; [else-branch: 2309 | p1_10@415@01 | live]
(push) ; 8
; [then-branch: 2309 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2309 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1_2@547@01 Bool)
(assert (= bypass1_2@547@01 (not p1_10@415@01)))
; [exec]
; bypass2_2 := !(p2_10 && !except2_2)
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 7
; [then-branch: 2310 | !(p2_10@416@01) | live]
; [else-branch: 2310 | p2_10@416@01 | live]
(push) ; 8
; [then-branch: 2310 | !(p2_10@416@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 2310 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2_2@548@01 Bool)
(assert (= bypass2_2@548@01 (not p2_10@416@01)))
; [exec]
; p1_11 := p1_10 && (!except1_2 && bool___unbox__(b_7))
; [eval] p1_10 && (!except1_2 && bool___unbox__(b_7))
(push) ; 7
; [then-branch: 2311 | !(p1_10@415@01) | live]
; [else-branch: 2311 | p1_10@415@01 | live]
(push) ; 8
; [then-branch: 2311 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2311 | p1_10@415@01]
; [eval] !except1_2
(push) ; 9
; [then-branch: 2312 | False | live]
; [else-branch: 2312 | True | live]
(push) ; 10
; [then-branch: 2312 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2312 | True]
; [eval] bool___unbox__(b_7)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_2@423@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2@423@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2@423@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_10@415@01
  (and
    (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_2@423@01))))
(declare-const p1_11@549@01 Bool)
(assert (= p1_11@549@01 (and p1_10@415@01 (bool___unbox__ $Snap.unit b_2@423@01))))
; [exec]
; p2_11 := p2_10 && (!except2_2 && bool___unbox__(b_7_0))
; [eval] p2_10 && (!except2_2 && bool___unbox__(b_7_0))
(push) ; 7
; [then-branch: 2313 | !(p2_10@416@01) | live]
; [else-branch: 2313 | p2_10@416@01 | live]
(push) ; 8
; [then-branch: 2313 | !(p2_10@416@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 2313 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(push) ; 9
; [then-branch: 2314 | False | live]
; [else-branch: 2314 | True | live]
(push) ; 10
; [then-branch: 2314 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2314 | True]
; [eval] bool___unbox__(b_7_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_7_0@515@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_7_0@515@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_7_0@515@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_7_0@515@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_7_0@515@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_7_0@515@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_7_0@515@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_10@416@01
  (and
    p2_10@416@01
    (issubtype<Bool> (typeof<PyType> b_7_0@515@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_7_0@515@01))))
(declare-const p2_11@550@01 Bool)
(assert (= p2_11@550@01 (and p2_10@416@01 (bool___unbox__ $Snap.unit b_7_0@515@01))))
; [exec]
; p3_2 := p1_10 && (!except1_2 && !bool___unbox__(b_7))
; [eval] p1_10 && (!except1_2 && !bool___unbox__(b_7))
(push) ; 7
; [then-branch: 2315 | !(p1_10@415@01) | live]
; [else-branch: 2315 | p1_10@415@01 | live]
(push) ; 8
; [then-branch: 2315 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2315 | p1_10@415@01]
; [eval] !except1_2
(push) ; 9
; [then-branch: 2316 | False | live]
; [else-branch: 2316 | True | live]
(push) ; 10
; [then-branch: 2316 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2316 | True]
; [eval] !bool___unbox__(b_7)
; [eval] bool___unbox__(b_7)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_2@423@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2@423@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_2@423@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_2@423@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p3_2@551@01 Bool)
(assert (= p3_2@551@01 (and p1_10@415@01 (not (bool___unbox__ $Snap.unit b_2@423@01)))))
; [exec]
; p4_2 := p2_10 && (!except2_2 && !bool___unbox__(b_7_0))
; [eval] p2_10 && (!except2_2 && !bool___unbox__(b_7_0))
(push) ; 7
; [then-branch: 2317 | !(p2_10@416@01) | live]
; [else-branch: 2317 | p2_10@416@01 | live]
(push) ; 8
; [then-branch: 2317 | !(p2_10@416@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 2317 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(push) ; 9
; [then-branch: 2318 | False | live]
; [else-branch: 2318 | True | live]
(push) ; 10
; [then-branch: 2318 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2318 | True]
; [eval] !bool___unbox__(b_7_0)
; [eval] bool___unbox__(b_7_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_7_0@515@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_7_0@515@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_7_0@515@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_7_0@515@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_7_0@515@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_7_0@515@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_7_0@515@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p4_2@552@01 Bool)
(assert (= p4_2@552@01 (and p2_10@416@01 (not (bool___unbox__ $Snap.unit b_7_0@515@01)))))
; [exec]
; tmp_2 := new()
(declare-const tmp_2@553@01 $Ref)
(assert (not (= tmp_2@553@01 $Ref.null)))
(assert (not (= tmp_2@553@01 _err_3@430@01)))
(assert (not (= tmp_2@553@01 c_7@426@01)))
(assert (not (= tmp_2@553@01 b_2_0@424@01)))
(assert (not
  (=
    tmp_2@553@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
(assert (not (= tmp_2@553@01 b_7_0@515@01)))
(assert (not (= tmp_2@553@01 MyException_res_3@520@01)))
(assert (not (= tmp_2@553@01 error_2@510@01)))
(assert (not (= tmp_2@553@01 MyException_res_3_0@521@01)))
(assert (not (= tmp_2@553@01 MyException_res_2@518@01)))
(assert (not (= tmp_2@553@01 c@425@01)))
(assert (not (= tmp_2@553@01 _cthread_160_0@418@01)))
(assert (not (= tmp_2@553@01 tmp_3@541@01)))
(assert (not (= tmp_2@553@01 error_2_0@511@01)))
(assert (not (= tmp_2@553@01 _cthread_160@417@01)))
(assert (not (= tmp_2@553@01 b_2@423@01)))
(assert (not (= tmp_2@553@01 MyException_res_2_0@519@01)))
(assert (not (= tmp_2@553@01 tmp_2@536@01)))
(assert (not (= tmp_2@553@01 c_3_0@517@01)))
; [eval] p1_11 && !except1_2
(push) ; 7
; [then-branch: 2319 | !(p1_11@549@01) | live]
; [else-branch: 2319 | p1_11@549@01 | live]
(push) ; 8
; [then-branch: 2319 | !(p1_11@549@01)]
(assert (not p1_11@549@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2319 | p1_11@549@01]
(assert p1_11@549@01)
; [eval] !except1_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_11@549@01 (not p1_11@549@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_11@549@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_11@549@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2320 | p1_11@549@01 | live]
; [else-branch: 2320 | !(p1_11@549@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2320 | p1_11@549@01]
(assert p1_11@549@01)
; [exec]
; MyException_res_2 := tmp_2
; [eval] p2_11 && !except2_2
(push) ; 8
; [then-branch: 2321 | !(p2_11@550@01) | live]
; [else-branch: 2321 | p2_11@550@01 | live]
(push) ; 9
; [then-branch: 2321 | !(p2_11@550@01)]
(assert (not p2_11@550@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2321 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_11@550@01 (not p2_11@550@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_11@550@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2322 | p2_11@550@01 | dead]
; [else-branch: 2322 | !(p2_11@550@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 2322 | !(p2_11@550@01)]
(assert (not p2_11@550@01))
(pop) ; 8
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 8
; [then-branch: 2323 | !(p2_11@550@01) | live]
; [else-branch: 2323 | p2_11@550@01 | live]
(push) ; 9
; [then-branch: 2323 | !(p2_11@550@01)]
(assert (not p2_11@550@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2323 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_11@550@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_11@550@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2324 | !(p2_11@550@01) | live]
; [else-branch: 2324 | p2_11@550@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2324 | !(p2_11@550@01)]
(assert (not p2_11@550@01))
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 2325 | !(p1_11@549@01) | live]
; [else-branch: 2325 | p1_11@549@01 | live]
(push) ; 10
; [then-branch: 2325 | !(p1_11@549@01)]
(assert (not p1_11@549@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2325 | p1_11@549@01]
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_11@549@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2326 | p1_11@549@01 | live]
; [else-branch: 2326 | !(p1_11@549@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2326 | p1_11@549@01]
; [exec]
; inhale typeof(MyException_res_2) == MyException()
(declare-const $t@554@01 $Snap)
(assert (= $t@554@01 $Snap.unit))
; [eval] typeof(MyException_res_2) == MyException()
; [eval] typeof(MyException_res_2)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_2@553@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_11 && !except2_2
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2327 | !(p2_11@550@01) | live]
; [else-branch: 2327 | p2_11@550@01 | live]
(push) ; 11
; [then-branch: 2327 | !(p2_11@550@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 2327 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 2328 | p2_11@550@01 | dead]
; [else-branch: 2328 | !(p2_11@550@01) | live]
(push) ; 10
; [else-branch: 2328 | !(p2_11@550@01)]
(pop) ; 10
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 10
; [then-branch: 2329 | !(p2_11@550@01) | live]
; [else-branch: 2329 | p2_11@550@01 | live]
(push) ; 11
; [then-branch: 2329 | !(p2_11@550@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 2329 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_11@550@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2330 | !(p2_11@550@01) | live]
; [else-branch: 2330 | p2_11@550@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2330 | !(p2_11@550@01)]
; [eval] p1_11 && !except1_2
(push) ; 11
; [then-branch: 2331 | !(p1_11@549@01) | live]
; [else-branch: 2331 | p1_11@549@01 | live]
(push) ; 12
; [then-branch: 2331 | !(p1_11@549@01)]
(assert (not p1_11@549@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2331 | p1_11@549@01]
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_11@549@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2332 | p1_11@549@01 | live]
; [else-branch: 2332 | !(p1_11@549@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2332 | p1_11@549@01]
; [exec]
; _err := MyException_res_2
; [exec]
; except1_2 := true
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 2333 | !(p2_11@550@01) | live]
; [else-branch: 2333 | p2_11@550@01 | live]
(push) ; 13
; [then-branch: 2333 | !(p2_11@550@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2333 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 2334 | p2_11@550@01 | dead]
; [else-branch: 2334 | !(p2_11@550@01) | live]
(push) ; 12
; [else-branch: 2334 | !(p2_11@550@01)]
(pop) ; 12
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 2335 | !(p2_11@550@01) | live]
; [else-branch: 2335 | p2_11@550@01 | live]
(push) ; 13
; [then-branch: 2335 | !(p2_11@550@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2335 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_11@550@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2336 | !(p2_11@550@01) | live]
; [else-branch: 2336 | p2_11@550@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2336 | !(p2_11@550@01)]
; [exec]
; thisexcept1_2 := except1_2 && !bypass1_2
; [eval] except1_2 && !bypass1_2
(push) ; 13
; [then-branch: 2337 | False | live]
; [else-branch: 2337 | True | live]
(push) ; 14
; [then-branch: 2337 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2337 | True]
; [eval] !bypass1_2
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_2@555@01 Bool)
(assert (= thisexcept1_2@555@01 (not bypass1_2@547@01)))
; [exec]
; thisexcept2_2 := except2_2 && !bypass2_2
; [eval] except2_2 && !bypass2_2
; [exec]
; p1_12 := p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
; [eval] p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 2338 | !(p1_10@415@01) | live]
; [else-branch: 2338 | p1_10@415@01 | live]
(push) ; 14
; [then-branch: 2338 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2338 | p1_10@415@01]
(push) ; 15
; [then-branch: 2339 | !(thisexcept1_2@555@01) | live]
; [else-branch: 2339 | thisexcept1_2@555@01 | live]
(push) ; 16
; [then-branch: 2339 | !(thisexcept1_2@555@01)]
(assert (not thisexcept1_2@555@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2339 | thisexcept1_2@555@01]
(assert thisexcept1_2@555@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_2@555@01 (not thisexcept1_2@555@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=> p1_10@415@01 (or thisexcept1_2@555@01 (not thisexcept1_2@555@01))))
(declare-const p1_12@556@01 Bool)
(assert (=
  p1_12@556@01
  (and
    p1_10@415@01
    (and
      thisexcept1_2@555@01
      (issubtype<Bool> (typeof<PyType> tmp_2@553@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_12 := p2_10 &&
;   (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
; [eval] p2_10 && (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
(push) ; 13
; [then-branch: 2340 | !(p2_10@416@01) | live]
; [else-branch: 2340 | p2_10@416@01 | live]
(push) ; 14
; [then-branch: 2340 | !(p2_10@416@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 2340 | p2_10@416@01]
(assert p2_10@416@01)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_12@556@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not p1_12@556@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2341 | p1_12@556@01 | live]
; [else-branch: 2341 | !(p1_12@556@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2341 | p1_12@556@01]
(assert p1_12@556@01)
; [exec]
; except1_2 := false
; [then-branch: 2342 | False | dead]
; [else-branch: 2342 | True | live]
(push) ; 14
; [else-branch: 2342 | True]
(pop) ; 14
; [eval] !p2_12
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2343 | True | live]
; [else-branch: 2343 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2343 | True]
; [exec]
; p1_13 := p1_12 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_12 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
(push) ; 15
; [then-branch: 2344 | !(p1_12@556@01) | live]
; [else-branch: 2344 | p1_12@556@01 | live]
(push) ; 16
; [then-branch: 2344 | !(p1_12@556@01)]
(assert (not p1_12@556@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2344 | p1_12@556@01]
; [eval] !except1_2
(push) ; 17
; [then-branch: 2345 | False | live]
; [else-branch: 2345 | True | live]
(push) ; 18
; [then-branch: 2345 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2345 | True]
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p1_12@556@01 (not p1_12@556@01)))
; [exec]
; p2_13 := p2_12 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_12 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_3 := p1_12 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_12 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
(push) ; 15
; [then-branch: 2346 | !(p1_12@556@01) | live]
; [else-branch: 2346 | p1_12@556@01 | live]
(push) ; 16
; [then-branch: 2346 | !(p1_12@556@01)]
(assert (not p1_12@556@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2346 | p1_12@556@01]
; [eval] !except1_2
(push) ; 17
; [then-branch: 2347 | False | live]
; [else-branch: 2347 | True | live]
(push) ; 18
; [then-branch: 2347 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2347 | True]
; [eval] !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p4_3 := p2_12 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_12 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_13 && !except1_2
; [then-branch: 2348 | False | dead]
; [else-branch: 2348 | True | live]
(push) ; 15
; [else-branch: 2348 | True]
(pop) ; 15
; [eval] !(p1_13 && !except1_2)
; [eval] p1_13 && !except1_2
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2349 | True | live]
; [else-branch: 2349 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2349 | True]
; [eval] p2_13 && !except2_2
; [then-branch: 2350 | False | dead]
; [else-branch: 2350 | True | live]
(push) ; 16
; [else-branch: 2350 | True]
(pop) ; 16
; [eval] !(p2_13 && !except2_2)
; [eval] p2_13 && !except2_2
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2351 | True | live]
; [else-branch: 2351 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2351 | True]
; [eval] p1_12 && !except1_2
(push) ; 17
; [then-branch: 2352 | !(p1_12@556@01) | live]
; [else-branch: 2352 | p1_12@556@01 | live]
(push) ; 18
; [then-branch: 2352 | !(p1_12@556@01)]
(assert (not p1_12@556@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2352 | p1_12@556@01]
; [eval] !except1_2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_12@556@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2353 | p1_12@556@01 | live]
; [else-branch: 2353 | !(p1_12@556@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2353 | p1_12@556@01]
; [exec]
; c_3.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 18
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 18
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@557@01 $Ref)
(assert (= Container_value@557@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p2_12 && !except2_2
; [then-branch: 2354 | False | dead]
; [else-branch: 2354 | True | live]
(push) ; 18
; [else-branch: 2354 | True]
(pop) ; 18
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2355 | True | live]
; [else-branch: 2355 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2355 | True]
; [exec]
; tmp_3 := new()
(declare-const tmp_3@558@01 $Ref)
(assert (not (= tmp_3@558@01 $Ref.null)))
(assert (not (= tmp_3@558@01 _err_3@430@01)))
(assert (not (= tmp_3@558@01 tmp_2@553@01)))
(assert (not (= tmp_3@558@01 c_7@426@01)))
(assert (not (= tmp_3@558@01 b_2_0@424@01)))
(assert (not (= tmp_3@558@01 b_7_0@515@01)))
(assert (not (= tmp_3@558@01 MyException_res_3@520@01)))
(assert (not (= tmp_3@558@01 error_2@510@01)))
(assert (not (= tmp_3@558@01 Container_value@557@01)))
(assert (not (= tmp_3@558@01 MyException_res_3_0@521@01)))
(assert (not (= tmp_3@558@01 c@425@01)))
(assert (not (= tmp_3@558@01 _cthread_160_0@418@01)))
(assert (not (= tmp_3@558@01 tmp_3@541@01)))
(assert (not (= tmp_3@558@01 error_2_0@511@01)))
(assert (not (= tmp_3@558@01 _cthread_160@417@01)))
(assert (not (= tmp_3@558@01 b_2@423@01)))
(assert (not (= tmp_3@558@01 MyException_res_2_0@519@01)))
(assert (not (= tmp_3@558@01 c_3_0@517@01)))
; [eval] p1_12 && !except1_2
(push) ; 19
; [then-branch: 2356 | !(p1_12@556@01) | live]
; [else-branch: 2356 | p1_12@556@01 | live]
(push) ; 20
; [then-branch: 2356 | !(p1_12@556@01)]
(assert (not p1_12@556@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2356 | p1_12@556@01]
; [eval] !except1_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_12@556@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2357 | p1_12@556@01 | live]
; [else-branch: 2357 | !(p1_12@556@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2357 | p1_12@556@01]
; [exec]
; MyException_res_3 := tmp_3
; [eval] p2_12 && !except2_2
; [then-branch: 2358 | False | dead]
; [else-branch: 2358 | True | live]
(push) ; 20
; [else-branch: 2358 | True]
(pop) ; 20
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2359 | True | live]
; [else-branch: 2359 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2359 | True]
; [eval] p1_12 && !except1_2
(push) ; 21
; [then-branch: 2360 | !(p1_12@556@01) | live]
; [else-branch: 2360 | p1_12@556@01 | live]
(push) ; 22
; [then-branch: 2360 | !(p1_12@556@01)]
(assert (not p1_12@556@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2360 | p1_12@556@01]
; [eval] !except1_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_12@556@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2361 | p1_12@556@01 | live]
; [else-branch: 2361 | !(p1_12@556@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2361 | p1_12@556@01]
; [exec]
; inhale typeof(MyException_res_3) == MyException()
(declare-const $t@559@01 $Snap)
(assert (= $t@559@01 $Snap.unit))
; [eval] typeof(MyException_res_3) == MyException()
; [eval] typeof(MyException_res_3)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_3@558@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_12 && !except2_2
; [then-branch: 2362 | False | dead]
; [else-branch: 2362 | True | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 2362 | True]
(pop) ; 22
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2363 | True | live]
; [else-branch: 2363 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2363 | True]
; [eval] p1_12 && !except1_2
(push) ; 23
; [then-branch: 2364 | !(p1_12@556@01) | live]
; [else-branch: 2364 | p1_12@556@01 | live]
(push) ; 24
; [then-branch: 2364 | !(p1_12@556@01)]
(assert (not p1_12@556@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2364 | p1_12@556@01]
; [eval] !except1_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_12@556@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2365 | p1_12@556@01 | live]
; [else-branch: 2365 | !(p1_12@556@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2365 | p1_12@556@01]
; [exec]
; _err := MyException_res_3
; [exec]
; except1_2 := true
; [eval] p2_12 && !except2_2
; [then-branch: 2366 | False | dead]
; [else-branch: 2366 | True | live]
(push) ; 24
; [else-branch: 2366 | True]
(pop) ; 24
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 24
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2367 | True | live]
; [else-branch: 2367 | False | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2367 | True]
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 2368 | !(p1_10@415@01) | live]
; [else-branch: 2368 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 2368 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2368 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2369 | False | dead]
; [else-branch: 2369 | True | live]
(push) ; 25
; [else-branch: 2369 | True]
(pop) ; 25
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 2370 | !(p1_10@415@01) | live]
; [else-branch: 2370 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 2370 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2370 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2371 | True | live]
; [else-branch: 2371 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2371 | True]
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 2372 | !(p2_10@416@01) | live]
; [else-branch: 2372 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 2372 | !(p2_10@416@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2372 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2373 | p2_10@416@01 | dead]
; [else-branch: 2373 | !(p2_10@416@01) | live]
(push) ; 26
; [else-branch: 2373 | !(p2_10@416@01)]
(pop) ; 26
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 2374 | !(p2_10@416@01) | live]
; [else-branch: 2374 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 2374 | !(p2_10@416@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2374 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2375 | !(p2_10@416@01) | live]
; [else-branch: 2375 | p2_10@416@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2375 | !(p2_10@416@01)]
; [exec]
; p1_14 := p1_10 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_10 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2376 | !(p1_10@415@01) | live]
; [else-branch: 2376 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 2376 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2376 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p2_14 := p2_10 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_10 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2377 | !(p2_10@416@01) | live]
; [else-branch: 2377 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 2377 | !(p2_10@416@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 2377 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(push) ; 29
; [then-branch: 2378 | False | live]
; [else-branch: 2378 | True | live]
(push) ; 30
; [then-branch: 2378 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2378 | True]
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p3_4 := p1_10 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_10 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2379 | !(p1_10@415@01) | live]
; [else-branch: 2379 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 2379 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2379 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p2_10 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_10 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2380 | !(p2_10@416@01) | live]
; [else-branch: 2380 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 2380 | !(p2_10@416@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 2380 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(push) ; 29
; [then-branch: 2381 | False | live]
; [else-branch: 2381 | True | live]
(push) ; 30
; [then-branch: 2381 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2381 | True]
; [eval] !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_14 && !except1_2
; [then-branch: 2382 | False | dead]
; [else-branch: 2382 | True | live]
(push) ; 27
; [else-branch: 2382 | True]
(pop) ; 27
; [eval] !(p1_14 && !except1_2)
; [eval] p1_14 && !except1_2
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2383 | True | live]
; [else-branch: 2383 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2383 | True]
; [eval] p2_14 && !except2_2
; [then-branch: 2384 | False | dead]
; [else-branch: 2384 | True | live]
(push) ; 28
; [else-branch: 2384 | True]
(pop) ; 28
; [eval] !(p2_14 && !except2_2)
; [eval] p2_14 && !except2_2
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2385 | True | live]
; [else-branch: 2385 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2385 | True]
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 2386 | !(p1_10@415@01) | live]
; [else-branch: 2386 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 2386 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2386 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 2387 | False | dead]
; [else-branch: 2387 | True | live]
(push) ; 29
; [else-branch: 2387 | True]
(pop) ; 29
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 2388 | !(p1_10@415@01) | live]
; [else-branch: 2388 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 2388 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2388 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2389 | True | live]
; [else-branch: 2389 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2389 | True]
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 2390 | !(p2_10@416@01) | live]
; [else-branch: 2390 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 2390 | !(p2_10@416@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 2390 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 2391 | p2_10@416@01 | dead]
; [else-branch: 2391 | !(p2_10@416@01) | live]
(push) ; 30
; [else-branch: 2391 | !(p2_10@416@01)]
(pop) ; 30
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 2392 | !(p2_10@416@01) | live]
; [else-branch: 2392 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 2392 | !(p2_10@416@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 2392 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2393 | !(p2_10@416@01) | live]
; [else-branch: 2393 | p2_10@416@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2393 | !(p2_10@416@01)]
; [eval] p1_10 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2394 | p1_10@415@01 | live]
; [else-branch: 2394 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2394 | p1_10@415@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_10 ==> true
(push) ; 31
; [then-branch: 2395 | p2_10@416@01 | dead]
; [else-branch: 2395 | !(p2_10@416@01) | live]
(push) ; 32
; [else-branch: 2395 | !(p2_10@416@01)]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2396 | p1_10@415@01 | live]
; [else-branch: 2396 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2396 | p1_10@415@01]
; [eval] _err == null
; [then-branch: 2397 | tmp_3@558@01 == Null | dead]
; [else-branch: 2397 | tmp_3@558@01 != Null | live]
(push) ; 32
; [else-branch: 2397 | tmp_3@558@01 != Null]
; [then-branch: 2398 | p2_10@416@01 | dead]
; [else-branch: 2398 | !(p2_10@416@01) | live]
(push) ; 33
; [else-branch: 2398 | !(p2_10@416@01)]
(push) ; 34
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2399 | p1_10@415@01 | live]
; [else-branch: 2399 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2399 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 35
; [then-branch: 2400 | tmp_3@558@01 == Null | live]
; [else-branch: 2400 | tmp_3@558@01 != Null | live]
(push) ; 36
; [then-branch: 2400 | tmp_3@558@01 == Null]
(assert (= tmp_3@558@01 $Ref.null))
(pop) ; 36
(push) ; 36
; [else-branch: 2400 | tmp_3@558@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_3@558@01 $Ref.null)) (= tmp_3@558@01 $Ref.null)))
(push) ; 35
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_3@558@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_3@558@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_3@558@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_3@558@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2401 | tmp_3@558@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@558@01), MyException[PyType]) | live]
; [else-branch: 2401 | !(tmp_3@558@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@558@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2401 | tmp_3@558@01 != Null && issubtype[Bool](typeof[PyType](tmp_3@558@01), MyException[PyType])]
(assert (and
  (not (= tmp_3@558@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_3@558@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 36
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@557@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@557@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 36
(pop) ; 36
; Joined path conditions
(push) ; 36
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 37
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@557@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 36
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@557@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(push) ; 36
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@557@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@557@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [then-branch: 2402 | p2_10@416@01 | dead]
; [else-branch: 2402 | !(p2_10@416@01) | live]
(push) ; 36
; [else-branch: 2402 | !(p2_10@416@01)]
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2403 | p1_10@415@01 | live]
; [else-branch: 2403 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2403 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (= tmp_3@558@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2404 | tmp_3@558@01 != Null | live]
; [else-branch: 2404 | tmp_3@558@01 == Null | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2404 | tmp_3@558@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
(push) ; 37
(assert (not (=>
  (and p1_10@415@01 (not (= tmp_3@558@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_3@558@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_10@415@01 (not (= tmp_3@558@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_3@558@01) (as MyException<PyType>  PyType))))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 37
; [then-branch: 2405 | p2_10@416@01 | dead]
; [else-branch: 2405 | !(p2_10@416@01) | live]
(push) ; 38
; [else-branch: 2405 | !(p2_10@416@01)]
(pop) ; 38
(pop) ; 37
; Joined path conditions
; [eval] p1_10 ==> (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2406 | p1_10@415@01 | live]
; [else-branch: 2406 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2406 | p1_10@415@01]
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
(push) ; 39
; [then-branch: 2407 | False | live]
; [else-branch: 2407 | True | live]
(push) ; 40
; [then-branch: 2407 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 2407 | True]
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
(push) ; 41
; [then-branch: 2408 | False | live]
; [else-branch: 2408 | True | live]
(push) ; 42
; [then-branch: 2408 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2408 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
(push) ; 43
; [then-branch: 2409 | False | live]
; [else-branch: 2409 | True | live]
(push) ; 44
; [then-branch: 2409 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2409 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; [eval] p2_10 ==> (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))
(push) ; 37
; [then-branch: 2410 | p2_10@416@01 | dead]
; [else-branch: 2410 | !(p2_10@416@01) | live]
(push) ; 38
; [else-branch: 2410 | !(p2_10@416@01)]
(pop) ; 38
(pop) ; 37
; Joined path conditions
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 23
; [then-branch: 2411 | !(p1_12@556@01) | live]
; [else-branch: 2411 | p1_12@556@01 | live]
(push) ; 24
; [then-branch: 2411 | !(p1_12@556@01)]
(assert (not p1_12@556@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2411 | p1_12@556@01]
; [eval] !except1_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 2412 | !(p1_12@556@01) | dead]
; [else-branch: 2412 | p1_12@556@01 | live]
(push) ; 23
; [else-branch: 2412 | p1_12@556@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 21
; [then-branch: 2413 | !(p1_12@556@01) | live]
; [else-branch: 2413 | p1_12@556@01 | live]
(push) ; 22
; [then-branch: 2413 | !(p1_12@556@01)]
(assert (not p1_12@556@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2413 | p1_12@556@01]
; [eval] !except1_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 2414 | !(p1_12@556@01) | dead]
; [else-branch: 2414 | p1_12@556@01 | live]
(push) ; 21
; [else-branch: 2414 | p1_12@556@01]
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 19
; [then-branch: 2415 | !(p1_12@556@01) | live]
; [else-branch: 2415 | p1_12@556@01 | live]
(push) ; 20
; [then-branch: 2415 | !(p1_12@556@01)]
(assert (not p1_12@556@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2415 | p1_12@556@01]
; [eval] !except1_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 2416 | !(p1_12@556@01) | dead]
; [else-branch: 2416 | p1_12@556@01 | live]
(push) ; 19
; [else-branch: 2416 | p1_12@556@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 17
; [then-branch: 2417 | !(p1_12@556@01) | live]
; [else-branch: 2417 | p1_12@556@01 | live]
(push) ; 18
; [then-branch: 2417 | !(p1_12@556@01)]
(assert (not p1_12@556@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2417 | p1_12@556@01]
; [eval] !except1_2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 2418 | !(p1_12@556@01) | dead]
; [else-branch: 2418 | p1_12@556@01 | live]
(push) ; 17
; [else-branch: 2418 | p1_12@556@01]
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !p1_12
(push) ; 13
(set-option :timeout 10)
(assert (not p1_12@556@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2419 | !(p1_12@556@01) | dead]
; [else-branch: 2419 | p1_12@556@01 | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 2419 | p1_12@556@01]
(assert p1_12@556@01)
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 11
; [then-branch: 2420 | !(p1_11@549@01) | live]
; [else-branch: 2420 | p1_11@549@01 | live]
(push) ; 12
; [then-branch: 2420 | !(p1_11@549@01)]
(assert (not p1_11@549@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2420 | p1_11@549@01]
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 2421 | !(p1_11@549@01) | dead]
; [else-branch: 2421 | p1_11@549@01 | live]
(push) ; 11
; [else-branch: 2421 | p1_11@549@01]
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 2422 | !(p1_11@549@01) | live]
; [else-branch: 2422 | p1_11@549@01 | live]
(push) ; 10
; [then-branch: 2422 | !(p1_11@549@01)]
(assert (not p1_11@549@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2422 | p1_11@549@01]
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 2423 | !(p1_11@549@01) | dead]
; [else-branch: 2423 | p1_11@549@01 | live]
(push) ; 9
; [else-branch: 2423 | p1_11@549@01]
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 2320 | !(p1_11@549@01)]
(assert (not p1_11@549@01))
(pop) ; 7
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 7
; [then-branch: 2424 | !(p1_11@549@01) | live]
; [else-branch: 2424 | p1_11@549@01 | live]
(push) ; 8
; [then-branch: 2424 | !(p1_11@549@01)]
(assert (not p1_11@549@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2424 | p1_11@549@01]
(assert p1_11@549@01)
; [eval] !except1_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_11@549@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_11@549@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2425 | !(p1_11@549@01) | live]
; [else-branch: 2425 | p1_11@549@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2425 | !(p1_11@549@01)]
(assert (not p1_11@549@01))
; [eval] p2_11 && !except2_2
(push) ; 8
; [then-branch: 2426 | !(p2_11@550@01) | live]
; [else-branch: 2426 | p2_11@550@01 | live]
(push) ; 9
; [then-branch: 2426 | !(p2_11@550@01)]
(assert (not p2_11@550@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2426 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_11@550@01 (not p2_11@550@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_11@550@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2427 | p2_11@550@01 | dead]
; [else-branch: 2427 | !(p2_11@550@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 2427 | !(p2_11@550@01)]
(assert (not p2_11@550@01))
(pop) ; 8
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 8
; [then-branch: 2428 | !(p2_11@550@01) | live]
; [else-branch: 2428 | p2_11@550@01 | live]
(push) ; 9
; [then-branch: 2428 | !(p2_11@550@01)]
(assert (not p2_11@550@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2428 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_11@550@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_11@550@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2429 | !(p2_11@550@01) | live]
; [else-branch: 2429 | p2_11@550@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2429 | !(p2_11@550@01)]
(assert (not p2_11@550@01))
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 2430 | !(p1_11@549@01) | live]
; [else-branch: 2430 | p1_11@549@01 | live]
(push) ; 10
; [then-branch: 2430 | !(p1_11@549@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 2430 | p1_11@549@01]
(assert p1_11@549@01)
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 2431 | p1_11@549@01 | dead]
; [else-branch: 2431 | !(p1_11@549@01) | live]
(push) ; 9
; [else-branch: 2431 | !(p1_11@549@01)]
(pop) ; 9
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 9
; [then-branch: 2432 | !(p1_11@549@01) | live]
; [else-branch: 2432 | p1_11@549@01 | live]
(push) ; 10
; [then-branch: 2432 | !(p1_11@549@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 2432 | p1_11@549@01]
(assert p1_11@549@01)
; [eval] !except1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_11@549@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2433 | !(p1_11@549@01) | live]
; [else-branch: 2433 | p1_11@549@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2433 | !(p1_11@549@01)]
; [eval] p2_11 && !except2_2
(push) ; 10
; [then-branch: 2434 | !(p2_11@550@01) | live]
; [else-branch: 2434 | p2_11@550@01 | live]
(push) ; 11
; [then-branch: 2434 | !(p2_11@550@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 2434 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 2435 | p2_11@550@01 | dead]
; [else-branch: 2435 | !(p2_11@550@01) | live]
(push) ; 10
; [else-branch: 2435 | !(p2_11@550@01)]
(pop) ; 10
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 10
; [then-branch: 2436 | !(p2_11@550@01) | live]
; [else-branch: 2436 | p2_11@550@01 | live]
(push) ; 11
; [then-branch: 2436 | !(p2_11@550@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 2436 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_11@550@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2437 | !(p2_11@550@01) | live]
; [else-branch: 2437 | p2_11@550@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2437 | !(p2_11@550@01)]
; [eval] p1_11 && !except1_2
(push) ; 11
; [then-branch: 2438 | !(p1_11@549@01) | live]
; [else-branch: 2438 | p1_11@549@01 | live]
(push) ; 12
; [then-branch: 2438 | !(p1_11@549@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 2438 | p1_11@549@01]
(assert p1_11@549@01)
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 2439 | p1_11@549@01 | dead]
; [else-branch: 2439 | !(p1_11@549@01) | live]
(push) ; 11
; [else-branch: 2439 | !(p1_11@549@01)]
(pop) ; 11
; [eval] !(p1_11 && !except1_2)
; [eval] p1_11 && !except1_2
(push) ; 11
; [then-branch: 2440 | !(p1_11@549@01) | live]
; [else-branch: 2440 | p1_11@549@01 | live]
(push) ; 12
; [then-branch: 2440 | !(p1_11@549@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 2440 | p1_11@549@01]
(assert p1_11@549@01)
; [eval] !except1_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p1_11@549@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2441 | !(p1_11@549@01) | live]
; [else-branch: 2441 | p1_11@549@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2441 | !(p1_11@549@01)]
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 2442 | !(p2_11@550@01) | live]
; [else-branch: 2442 | p2_11@550@01 | live]
(push) ; 13
; [then-branch: 2442 | !(p2_11@550@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2442 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 2443 | p2_11@550@01 | dead]
; [else-branch: 2443 | !(p2_11@550@01) | live]
(push) ; 12
; [else-branch: 2443 | !(p2_11@550@01)]
(pop) ; 12
; [eval] !(p2_11 && !except2_2)
; [eval] p2_11 && !except2_2
(push) ; 12
; [then-branch: 2444 | !(p2_11@550@01) | live]
; [else-branch: 2444 | p2_11@550@01 | live]
(push) ; 13
; [then-branch: 2444 | !(p2_11@550@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2444 | p2_11@550@01]
(assert p2_11@550@01)
; [eval] !except2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_11@550@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2445 | !(p2_11@550@01) | live]
; [else-branch: 2445 | p2_11@550@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2445 | !(p2_11@550@01)]
; [exec]
; thisexcept1_2 := except1_2 && !bypass1_2
; [eval] except1_2 && !bypass1_2
; [exec]
; thisexcept2_2 := except2_2 && !bypass2_2
; [eval] except2_2 && !bypass2_2
; [exec]
; p1_12 := p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
; [eval] p1_10 && (thisexcept1_2 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 2446 | !(p1_10@415@01) | live]
; [else-branch: 2446 | p1_10@415@01 | live]
(push) ; 14
; [then-branch: 2446 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2446 | p1_10@415@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p2_12 := p2_10 &&
;   (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
; [eval] p2_10 && (thisexcept2_2 && issubtype(typeof(_err_3), MyException()))
(push) ; 13
; [then-branch: 2447 | !(p2_10@416@01) | live]
; [else-branch: 2447 | p2_10@416@01 | live]
(push) ; 14
; [then-branch: 2447 | !(p2_10@416@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 2447 | p2_10@416@01]
(assert p2_10@416@01)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 2448 | False | dead]
; [else-branch: 2448 | True | live]
(push) ; 13
; [else-branch: 2448 | True]
(pop) ; 13
; [eval] !p1_12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2449 | True | live]
; [else-branch: 2449 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2449 | True]
; [then-branch: 2450 | False | dead]
; [else-branch: 2450 | True | live]
(push) ; 14
; [else-branch: 2450 | True]
(pop) ; 14
; [eval] !p2_12
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2451 | True | live]
; [else-branch: 2451 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2451 | True]
; [exec]
; p1_13 := p1_12 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_12 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_13 := p2_12 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_12 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_3 := p1_12 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_12 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_3 := p2_12 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_12 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_13 && !except1_2
; [then-branch: 2452 | False | dead]
; [else-branch: 2452 | True | live]
(push) ; 15
; [else-branch: 2452 | True]
(pop) ; 15
; [eval] !(p1_13 && !except1_2)
; [eval] p1_13 && !except1_2
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2453 | True | live]
; [else-branch: 2453 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2453 | True]
; [eval] p2_13 && !except2_2
; [then-branch: 2454 | False | dead]
; [else-branch: 2454 | True | live]
(push) ; 16
; [else-branch: 2454 | True]
(pop) ; 16
; [eval] !(p2_13 && !except2_2)
; [eval] p2_13 && !except2_2
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2455 | True | live]
; [else-branch: 2455 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2455 | True]
; [eval] p1_12 && !except1_2
; [then-branch: 2456 | False | dead]
; [else-branch: 2456 | True | live]
(push) ; 17
; [else-branch: 2456 | True]
(pop) ; 17
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2457 | True | live]
; [else-branch: 2457 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2457 | True]
; [eval] p2_12 && !except2_2
; [then-branch: 2458 | False | dead]
; [else-branch: 2458 | True | live]
(push) ; 18
; [else-branch: 2458 | True]
(pop) ; 18
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2459 | True | live]
; [else-branch: 2459 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2459 | True]
; [exec]
; tmp_3 := new()
(declare-const tmp_3@560@01 $Ref)
(assert (not (= tmp_3@560@01 $Ref.null)))
(assert (not (= tmp_3@560@01 _err_3@430@01)))
(assert (not (= tmp_3@560@01 tmp_2@553@01)))
(assert (not (= tmp_3@560@01 c_7@426@01)))
(assert (not (= tmp_3@560@01 b_2_0@424@01)))
(assert (not
  (=
    tmp_3@560@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
(assert (not (= tmp_3@560@01 b_7_0@515@01)))
(assert (not (= tmp_3@560@01 MyException_res_3@520@01)))
(assert (not (= tmp_3@560@01 error_2@510@01)))
(assert (not (= tmp_3@560@01 MyException_res_3_0@521@01)))
(assert (not (= tmp_3@560@01 MyException_res_2@518@01)))
(assert (not (= tmp_3@560@01 c@425@01)))
(assert (not (= tmp_3@560@01 _cthread_160_0@418@01)))
(assert (not (= tmp_3@560@01 tmp_3@541@01)))
(assert (not (= tmp_3@560@01 error_2_0@511@01)))
(assert (not (= tmp_3@560@01 _cthread_160@417@01)))
(assert (not (= tmp_3@560@01 b_2@423@01)))
(assert (not (= tmp_3@560@01 MyException_res_2_0@519@01)))
(assert (not (= tmp_3@560@01 c_3_0@517@01)))
; [eval] p1_12 && !except1_2
; [then-branch: 2460 | False | dead]
; [else-branch: 2460 | True | live]
(push) ; 19
; [else-branch: 2460 | True]
(pop) ; 19
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2461 | True | live]
; [else-branch: 2461 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2461 | True]
; [eval] p2_12 && !except2_2
; [then-branch: 2462 | False | dead]
; [else-branch: 2462 | True | live]
(push) ; 20
; [else-branch: 2462 | True]
(pop) ; 20
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2463 | True | live]
; [else-branch: 2463 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2463 | True]
; [eval] p1_12 && !except1_2
; [then-branch: 2464 | False | dead]
; [else-branch: 2464 | True | live]
(push) ; 21
; [else-branch: 2464 | True]
(pop) ; 21
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2465 | True | live]
; [else-branch: 2465 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2465 | True]
; [eval] p2_12 && !except2_2
; [then-branch: 2466 | False | dead]
; [else-branch: 2466 | True | live]
(push) ; 22
; [else-branch: 2466 | True]
(pop) ; 22
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2467 | True | live]
; [else-branch: 2467 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2467 | True]
; [eval] p1_12 && !except1_2
; [then-branch: 2468 | False | dead]
; [else-branch: 2468 | True | live]
(push) ; 23
; [else-branch: 2468 | True]
(pop) ; 23
; [eval] !(p1_12 && !except1_2)
; [eval] p1_12 && !except1_2
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2469 | True | live]
; [else-branch: 2469 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2469 | True]
; [eval] p2_12 && !except2_2
; [then-branch: 2470 | False | dead]
; [else-branch: 2470 | True | live]
(push) ; 24
; [else-branch: 2470 | True]
(pop) ; 24
; [eval] !(p2_12 && !except2_2)
; [eval] p2_12 && !except2_2
(push) ; 24
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2471 | True | live]
; [else-branch: 2471 | False | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2471 | True]
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 2472 | !(p1_10@415@01) | live]
; [else-branch: 2472 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 2472 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2472 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2473 | p1_10@415@01 | live]
; [else-branch: 2473 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2473 | p1_10@415@01]
; [exec]
; _err := null
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 2474 | !(p2_10@416@01) | live]
; [else-branch: 2474 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 2474 | !(p2_10@416@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2474 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2475 | p2_10@416@01 | dead]
; [else-branch: 2475 | !(p2_10@416@01) | live]
(push) ; 26
; [else-branch: 2475 | !(p2_10@416@01)]
(pop) ; 26
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 26
; [then-branch: 2476 | !(p2_10@416@01) | live]
; [else-branch: 2476 | p2_10@416@01 | live]
(push) ; 27
; [then-branch: 2476 | !(p2_10@416@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2476 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2477 | !(p2_10@416@01) | live]
; [else-branch: 2477 | p2_10@416@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2477 | !(p2_10@416@01)]
; [exec]
; p1_14 := p1_10 &&
;   (!except1_2 &&
;   perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] p1_10 && (!except1_2 && perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2478 | !(p1_10@415@01) | live]
; [else-branch: 2478 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 2478 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2478 | p1_10@415@01]
; [eval] !except1_2
(push) ; 29
; [then-branch: 2479 | False | live]
; [else-branch: 2479 | True | live]
(push) ; 30
; [then-branch: 2479 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2479 | True]
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p2_14 := p2_10 &&
;   (!except2_2 &&
;   perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_10 && (!except2_2 && perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2480 | !(p2_10@416@01) | live]
; [else-branch: 2480 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 2480 | !(p2_10@416@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 2480 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(push) ; 29
; [then-branch: 2481 | False | live]
; [else-branch: 2481 | True | live]
(push) ; 30
; [then-branch: 2481 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2481 | True]
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p3_4 := p1_10 &&
;   (!except1_2 &&
;   !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
; [eval] p1_10 && (!except1_2 && !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2482 | !(p1_10@415@01) | live]
; [else-branch: 2482 | p1_10@415@01 | live]
(push) ; 28
; [then-branch: 2482 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2482 | p1_10@415@01]
; [eval] !except1_2
(push) ; 29
; [then-branch: 2483 | False | live]
; [else-branch: 2483 | True | live]
(push) ; 30
; [then-branch: 2483 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2483 | True]
; [eval] !(perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_3, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p2_10 &&
;   (!except2_2 &&
;   !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_10 && (!except2_2 && !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2484 | !(p2_10@416@01) | live]
; [else-branch: 2484 | p2_10@416@01 | live]
(push) ; 28
; [then-branch: 2484 | !(p2_10@416@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 2484 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(push) ; 29
; [then-branch: 2485 | False | live]
; [else-branch: 2485 | True | live]
(push) ; 30
; [then-branch: 2485 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2485 | True]
; [eval] !(perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_3_0, 526803611440346310908232101056638787))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_14 && !except1_2
; [then-branch: 2486 | False | dead]
; [else-branch: 2486 | True | live]
(push) ; 27
; [else-branch: 2486 | True]
(pop) ; 27
; [eval] !(p1_14 && !except1_2)
; [eval] p1_14 && !except1_2
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2487 | True | live]
; [else-branch: 2487 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2487 | True]
; [eval] p2_14 && !except2_2
; [then-branch: 2488 | False | dead]
; [else-branch: 2488 | True | live]
(push) ; 28
; [else-branch: 2488 | True]
(pop) ; 28
; [eval] !(p2_14 && !except2_2)
; [eval] p2_14 && !except2_2
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2489 | True | live]
; [else-branch: 2489 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2489 | True]
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 2490 | !(p1_10@415@01) | live]
; [else-branch: 2490 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 2490 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2490 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2491 | p1_10@415@01 | live]
; [else-branch: 2491 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2491 | p1_10@415@01]
; [exec]
; c_3.Container_value := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_value@561@01 $Ref)
(assert (= Container_value@561@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 2492 | !(p2_10@416@01) | live]
; [else-branch: 2492 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 2492 | !(p2_10@416@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 2492 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 2493 | p2_10@416@01 | dead]
; [else-branch: 2493 | !(p2_10@416@01) | live]
(push) ; 30
; [else-branch: 2493 | !(p2_10@416@01)]
(pop) ; 30
; [eval] !(p2_10 && !except2_2)
; [eval] p2_10 && !except2_2
(push) ; 30
; [then-branch: 2494 | !(p2_10@416@01) | live]
; [else-branch: 2494 | p2_10@416@01 | live]
(push) ; 31
; [then-branch: 2494 | !(p2_10@416@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 2494 | p2_10@416@01]
(assert p2_10@416@01)
; [eval] !except2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2495 | !(p2_10@416@01) | live]
; [else-branch: 2495 | p2_10@416@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2495 | !(p2_10@416@01)]
; [eval] p1_10 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2496 | p1_10@415@01 | live]
; [else-branch: 2496 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2496 | p1_10@415@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_10 ==> true
(push) ; 31
; [then-branch: 2497 | p2_10@416@01 | dead]
; [else-branch: 2497 | !(p2_10@416@01) | live]
(push) ; 32
; [else-branch: 2497 | !(p2_10@416@01)]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2498 | p1_10@415@01 | live]
; [else-branch: 2498 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2498 | p1_10@415@01]
; [eval] _err == null
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2499 | True | live]
; [else-branch: 2499 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2499 | True]
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 33
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@561@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@561@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 33
(pop) ; 33
; Joined path conditions
(push) ; 33
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@561@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@561@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 33
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@561@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@561@01 (__prim__int___box__ $Snap.unit 0)))
; [then-branch: 2500 | p2_10@416@01 | dead]
; [else-branch: 2500 | !(p2_10@416@01) | live]
(push) ; 33
; [else-branch: 2500 | !(p2_10@416@01)]
(push) ; 34
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2501 | p1_10@415@01 | live]
; [else-branch: 2501 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2501 | p1_10@415@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
; [then-branch: 2502 | False | dead]
; [else-branch: 2502 | True | live]
(push) ; 35
; [else-branch: 2502 | True]
; [then-branch: 2503 | p2_10@416@01 | dead]
; [else-branch: 2503 | !(p2_10@416@01) | live]
(push) ; 36
; [else-branch: 2503 | !(p2_10@416@01)]
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2504 | p1_10@415@01 | live]
; [else-branch: 2504 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2504 | p1_10@415@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 39
; [then-branch: 2505 | False | dead]
; [else-branch: 2505 | True | live]
(push) ; 40
; [else-branch: 2505 | True]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 37
; [then-branch: 2506 | p2_10@416@01 | dead]
; [else-branch: 2506 | !(p2_10@416@01) | live]
(push) ; 38
; [else-branch: 2506 | !(p2_10@416@01)]
(pop) ; 38
(pop) ; 37
; Joined path conditions
; [eval] p1_10 ==> (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_10@415@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2507 | p1_10@415@01 | live]
; [else-branch: 2507 | !(p1_10@415@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2507 | p1_10@415@01]
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
(push) ; 39
; [then-branch: 2508 | False | live]
; [else-branch: 2508 | True | live]
(push) ; 40
; [then-branch: 2508 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 2508 | True]
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
(push) ; 41
; [then-branch: 2509 | False | live]
; [else-branch: 2509 | True | live]
(push) ; 42
; [then-branch: 2509 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2509 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
(push) ; 43
; [then-branch: 2510 | False | live]
; [else-branch: 2510 | True | live]
(push) ; 44
; [then-branch: 2510 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2510 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; [eval] p2_10 ==> (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))
(push) ; 37
; [then-branch: 2511 | p2_10@416@01 | dead]
; [else-branch: 2511 | !(p2_10@416@01) | live]
(push) ; 38
; [else-branch: 2511 | !(p2_10@416@01)]
(pop) ; 38
(pop) ; 37
; Joined path conditions
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 29
; [then-branch: 2512 | !(p1_10@415@01) | live]
; [else-branch: 2512 | p1_10@415@01 | live]
(push) ; 30
; [then-branch: 2512 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2512 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 2513 | !(p1_10@415@01) | dead]
; [else-branch: 2513 | p1_10@415@01 | live]
(push) ; 29
; [else-branch: 2513 | p1_10@415@01]
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 25
; [then-branch: 2514 | !(p1_10@415@01) | live]
; [else-branch: 2514 | p1_10@415@01 | live]
(push) ; 26
; [then-branch: 2514 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2514 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2515 | !(p1_10@415@01) | dead]
; [else-branch: 2515 | p1_10@415@01 | live]
(push) ; 25
; [else-branch: 2515 | p1_10@415@01]
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 2425 | p1_11@549@01]
(assert p1_11@549@01)
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 5
; [then-branch: 2516 | !(p1_10@415@01) | live]
; [else-branch: 2516 | p1_10@415@01 | live]
(push) ; 6
; [then-branch: 2516 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2516 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 2517 | !(p1_10@415@01) | dead]
; [else-branch: 2517 | p1_10@415@01 | live]
(push) ; 5
; [else-branch: 2517 | p1_10@415@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 1718 | !(p1_10@415@01)]
(assert (not p1_10@415@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_10@416@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2518 | p2_10@416@01 | live]
; [else-branch: 2518 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2518 | p2_10@416@01]
(assert p2_10@416@01)
(assert (not (= c_7@426@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
  $Snap.unit))
; [eval] p1_10 ==> issubtype(typeof(c.Container_value), int())
(push) ; 4
; [then-branch: 2519 | p1_10@415@01 | dead]
; [else-branch: 2519 | !(p1_10@415@01) | live]
(push) ; 5
; [else-branch: 2519 | !(p1_10@415@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
  $Snap.unit))
; [eval] p2_10 ==> issubtype(typeof(c_7.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2520 | p2_10@416@01 | live]
; [else-branch: 2520 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2520 | p2_10@416@01]
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_10@416@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 4
; [then-branch: 2521 | p1_10@415@01 | dead]
; [else-branch: 2521 | !(p1_10@415@01) | live]
(push) ; 5
; [else-branch: 2521 | !(p1_10@415@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2522 | p2_10@416@01 | live]
; [else-branch: 2522 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2522 | p2_10@416@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@562@01 $Snap)
(assert (= $t@562@01 ($Snap.combine ($Snap.first $t@562@01) ($Snap.second $t@562@01))))
(assert (= ($Snap.first $t@562@01) $Snap.unit))
; [eval] p1_10 ==> (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_160) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
(push) ; 5
; [then-branch: 2523 | p1_10@415@01 | dead]
; [else-branch: 2523 | !(p1_10@415@01) | live]
(push) ; 6
; [else-branch: 2523 | !(p1_10@415@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@562@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@562@01))
    ($Snap.second ($Snap.second $t@562@01)))))
(assert (= ($Snap.first ($Snap.second $t@562@01)) $Snap.unit))
; [eval] p2_10 ==> (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_160_0) && ((forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2524 | p2_10@416@01 | live]
; [else-branch: 2524 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2524 | p2_10@416@01]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_160_0) && ((forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_160_0)
(push) ; 7
; [then-branch: 2525 | False | live]
; [else-branch: 2525 | True | live]
(push) ; 8
; [then-branch: 2525 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2525 | True]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_160_0)
(push) ; 9
; [then-branch: 2526 | False | live]
; [else-branch: 2526 | True | live]
(push) ; 10
; [then-branch: 2526 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2526 | True]
; [eval] _residue_160_0 <= _current_wait_level_160_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_10@416@01 (<= _residue_160_0@422@01 _current_wait_level_160_0@428@01)))
(assert (=
  ($Snap.second ($Snap.second $t@562@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@562@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
; [then-branch: 2527 | p1_10@415@01 | dead]
; [else-branch: 2527 | !(p1_10@415@01) | live]
(push) ; 5
; [else-branch: 2527 | !(p1_10@415@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@562@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@562@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2528 | p2_10@416@01 | live]
; [else-branch: 2528 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2528 | p2_10@416@01]
; [eval] _err_3 == null
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err_3@430@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _err_3@430@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2529 | _err_3@430@01 == Null | live]
; [else-branch: 2529 | _err_3@430@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2529 | _err_3@430@01 == Null]
(assert (= _err_3@430@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
  $Snap.unit))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))) (__prim__int___box__ $Snap.unit 0))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
; [then-branch: 2530 | p1_10@415@01 | dead]
; [else-branch: 2530 | !(p1_10@415@01) | live]
(push) ; 8
; [else-branch: 2530 | !(p1_10@415@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2531 | p2_10@416@01 | live]
; [else-branch: 2531 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2531 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 10
; [then-branch: 2532 | _err_3@430@01 == Null | live]
; [else-branch: 2532 | _err_3@430@01 != Null | live]
(push) ; 11
; [then-branch: 2532 | _err_3@430@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 2532 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_3@430@01 $Ref.null)) (= _err_3@430@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2533 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]) | dead]
; [else-branch: 2533 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2533 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
; [then-branch: 2534 | p1_10@415@01 | dead]
; [else-branch: 2534 | !(p1_10@415@01) | live]
(push) ; 12
; [else-branch: 2534 | !(p1_10@415@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2535 | p2_10@416@01 | live]
; [else-branch: 2535 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2535 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 13
; [then-branch: 2536 | _err_3@430@01 != Null | dead]
; [else-branch: 2536 | _err_3@430@01 == Null | live]
(push) ; 14
; [else-branch: 2536 | _err_3@430@01 == Null]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 11
; [then-branch: 2537 | p1_10@415@01 | dead]
; [else-branch: 2537 | !(p1_10@415@01) | live]
(push) ; 12
; [else-branch: 2537 | !(p1_10@415@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2538 | p2_10@416@01 | live]
; [else-branch: 2538 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2538 | p2_10@416@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 2529 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@562@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
; [then-branch: 2539 | p1_10@415@01 | dead]
; [else-branch: 2539 | !(p1_10@415@01) | live]
(push) ; 8
; [else-branch: 2539 | !(p1_10@415@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2540 | p2_10@416@01 | live]
; [else-branch: 2540 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2540 | p2_10@416@01]
; [eval] _err_3 != null && issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 10
; [then-branch: 2541 | _err_3@430@01 == Null | live]
; [else-branch: 2541 | _err_3@430@01 != Null | live]
(push) ; 11
; [then-branch: 2541 | _err_3@430@01 == Null]
(assert (= _err_3@430@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 2541 | _err_3@430@01 != Null]
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_3@430@01 $Ref.null)) (= _err_3@430@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err_3@430@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2542 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]) | live]
; [else-branch: 2542 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2542 | _err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType])]
(assert (and
  (not (= _err_3@430@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_7.Container_valuep), int())
; [eval] typeof(c_7.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_7.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
; [then-branch: 2543 | p1_10@415@01 | dead]
; [else-branch: 2543 | !(p1_10@415@01) | live]
(push) ; 12
; [else-branch: 2543 | !(p1_10@415@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2544 | p2_10@416@01 | live]
; [else-branch: 2544 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2544 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err_3@430@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2545 | _err_3@430@01 != Null | live]
; [else-branch: 2545 | _err_3@430@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2545 | _err_3@430@01 != Null]
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and p2_10@416@01 (not (= _err_3@430@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 11
; [then-branch: 2546 | p1_10@415@01 | dead]
; [else-branch: 2546 | !(p1_10@415@01) | live]
(push) ; 12
; [else-branch: 2546 | !(p1_10@415@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2547 | p2_10@416@01 | live]
; [else-branch: 2547 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2547 | p2_10@416@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 2542 | !(_err_3@430@01 != Null && issubtype[Bool](typeof[PyType](_err_3@430@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_3@430@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
; [then-branch: 2548 | p1_10@415@01 | dead]
; [else-branch: 2548 | !(p1_10@415@01) | live]
(push) ; 12
; [else-branch: 2548 | !(p1_10@415@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2549 | p2_10@416@01 | live]
; [else-branch: 2549 | !(p2_10@416@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2549 | p2_10@416@01]
; [eval] _err_3 != null ==> issubtype(typeof(_err_3), MyException())
; [eval] _err_3 != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err_3@430@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= _err_3@430@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2550 | _err_3@430@01 != Null | live]
; [else-branch: 2550 | _err_3@430@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2550 | _err_3@430@01 != Null]
(assert (not (= _err_3@430@01 $Ref.null)))
; [eval] issubtype(typeof(_err_3), MyException())
; [eval] typeof(_err_3)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not (= _err_3@430@01 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=> p2_10@416@01 (not (= _err_3@430@01 $Ref.null))))
(assert (=>
  (and p2_10@416@01 (not (= _err_3@430@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_3@430@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 11
; [then-branch: 2551 | p1_10@415@01 | dead]
; [else-branch: 2551 | !(p1_10@415@01) | live]
(push) ; 12
; [else-branch: 2551 | !(p1_10@415@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@562@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_10@416@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2552 | p2_10@416@01 | dead]
; [else-branch: 2552 | !(p2_10@416@01) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 2552 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not p2_10@416@01))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_2: Bool
(declare-const except1_2@563@01 Bool)
; [exec]
; var except2_2: Bool
(declare-const except2_2@564@01 Bool)
; [exec]
; var error_2: Ref
(declare-const error_2@565@01 $Ref)
; [exec]
; var error_2_0: Ref
(declare-const error_2_0@566@01 $Ref)
; [exec]
; var try_finally_10: Int
(declare-const try_finally_10@567@01 Int)
; [exec]
; var try_finally_10_0: Int
(declare-const try_finally_10_0@568@01 Int)
; [exec]
; var b_7: Ref
(declare-const b_7@569@01 $Ref)
; [exec]
; var b_7_0: Ref
(declare-const b_7_0@570@01 $Ref)
; [exec]
; var c_3: Ref
(declare-const c_3@571@01 $Ref)
; [exec]
; var c_3_0: Ref
(declare-const c_3_0@572@01 $Ref)
; [exec]
; var MyException_res_2: Ref
(declare-const MyException_res_2@573@01 $Ref)
; [exec]
; var MyException_res_2_0: Ref
(declare-const MyException_res_2_0@574@01 $Ref)
; [exec]
; var MyException_res_3: Ref
(declare-const MyException_res_3@575@01 $Ref)
; [exec]
; var MyException_res_3_0: Ref
(declare-const MyException_res_3_0@576@01 $Ref)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@577@01 $Perm)
; [exec]
; var _cwl_160_0: Perm
(declare-const _cwl_160_0@578@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@579@01 Seq<Measure$>)
; [exec]
; var _method_measures_160_0: Seq[Measure$]
(declare-const _method_measures_160_0@580@01 Seq<Measure$>)
; [exec]
; var bypass1_2: Bool
(declare-const bypass1_2@581@01 Bool)
; [exec]
; var bypass2_2: Bool
(declare-const bypass2_2@582@01 Bool)
; [exec]
; var thisexcept1_2: Bool
(declare-const thisexcept1_2@583@01 Bool)
; [exec]
; var thisexcept2_2: Bool
(declare-const thisexcept2_2@584@01 Bool)
; [exec]
; var p1_12: Bool
(declare-const p1_12@585@01 Bool)
; [exec]
; var p2_12: Bool
(declare-const p2_12@586@01 Bool)
; [exec]
; var p1_11: Bool
(declare-const p1_11@587@01 Bool)
; [exec]
; var p2_11: Bool
(declare-const p2_11@588@01 Bool)
; [exec]
; var p3_2: Bool
(declare-const p3_2@589@01 Bool)
; [exec]
; var p4_2: Bool
(declare-const p4_2@590@01 Bool)
; [exec]
; var tmp_2: Ref
(declare-const tmp_2@591@01 $Ref)
; [exec]
; var p1_13: Bool
(declare-const p1_13@592@01 Bool)
; [exec]
; var p2_13: Bool
(declare-const p2_13@593@01 Bool)
; [exec]
; var p3_3: Bool
(declare-const p3_3@594@01 Bool)
; [exec]
; var p4_3: Bool
(declare-const p4_3@595@01 Bool)
; [exec]
; var tmp_3: Ref
(declare-const tmp_3@596@01 $Ref)
; [exec]
; var p1_14: Bool
(declare-const p1_14@597@01 Bool)
; [exec]
; var p2_14: Bool
(declare-const p2_14@598@01 Bool)
; [exec]
; var p3_4: Bool
(declare-const p3_4@599@01 Bool)
; [exec]
; var p4_4: Bool
(declare-const p4_4@600@01 Bool)
; [exec]
; inhale p1_10
(declare-const $t@601@01 $Snap)
(assert (= $t@601@01 $Snap.unit))
(assert p1_10@415@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; except1_2 := false
; [exec]
; except2_2 := false
; [eval] p1_10 && !except1_2
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2553 | !(p1_10@415@01) | live]
; [else-branch: 2553 | p1_10@415@01 | live]
(push) ; 6
; [then-branch: 2553 | !(p1_10@415@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 2553 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_10@415@01 (not p1_10@415@01)))
; [then-branch: 2554 | p1_10@415@01 | dead]
; [else-branch: 2554 | !(p1_10@415@01) | live]
(push) ; 5
; [else-branch: 2554 | !(p1_10@415@01)]
(pop) ; 5
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 5
; [then-branch: 2555 | !(p1_10@415@01) | live]
; [else-branch: 2555 | p1_10@415@01 | live]
(push) ; 6
; [then-branch: 2555 | !(p1_10@415@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 2555 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 2556 | !(p1_10@415@01) | dead]
; [else-branch: 2556 | p1_10@415@01 | live]
(push) ; 5
; [else-branch: 2556 | p1_10@415@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 2518 | !(p2_10@416@01)]
(assert (not p2_10@416@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
  $Snap.unit))
; [eval] p1_10 ==> issubtype(typeof(c.Container_value), int())
(push) ; 4
; [then-branch: 2557 | p1_10@415@01 | dead]
; [else-branch: 2557 | !(p1_10@415@01) | live]
(push) ; 5
; [else-branch: 2557 | !(p1_10@415@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
  $Snap.unit))
; [eval] p2_10 ==> issubtype(typeof(c_7.Container_valuep), int())
(push) ; 4
; [then-branch: 2558 | p2_10@416@01 | dead]
; [else-branch: 2558 | !(p2_10@416@01) | live]
(push) ; 5
; [else-branch: 2558 | !(p2_10@416@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 4
; [then-branch: 2559 | p1_10@415@01 | dead]
; [else-branch: 2559 | !(p1_10@415@01) | live]
(push) ; 5
; [else-branch: 2559 | !(p1_10@415@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@431@01)))))))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 4
; [then-branch: 2560 | p2_10@416@01 | dead]
; [else-branch: 2560 | !(p2_10@416@01) | live]
(push) ; 5
; [else-branch: 2560 | !(p2_10@416@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@602@01 $Snap)
(assert (= $t@602@01 ($Snap.combine ($Snap.first $t@602@01) ($Snap.second $t@602@01))))
(assert (= ($Snap.first $t@602@01) $Snap.unit))
; [eval] p1_10 ==> (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_160) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
(push) ; 5
; [then-branch: 2561 | p1_10@415@01 | dead]
; [else-branch: 2561 | !(p1_10@415@01) | live]
(push) ; 6
; [else-branch: 2561 | !(p1_10@415@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@602@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@602@01))
    ($Snap.second ($Snap.second $t@602@01)))))
(assert (= ($Snap.first ($Snap.second $t@602@01)) $Snap.unit))
; [eval] p2_10 ==> (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_160_0) && ((forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
(push) ; 5
; [then-branch: 2562 | p2_10@416@01 | dead]
; [else-branch: 2562 | !(p2_10@416@01) | live]
(push) ; 6
; [else-branch: 2562 | !(p2_10@416@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@602@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@602@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@602@01))))))
; [then-branch: 2563 | p1_10@415@01 | dead]
; [else-branch: 2563 | !(p1_10@415@01) | live]
(push) ; 5
; [else-branch: 2563 | !(p1_10@415@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@602@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@602@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@602@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))))
; [then-branch: 2564 | p2_10@416@01 | dead]
; [else-branch: 2564 | !(p2_10@416@01) | live]
(push) ; 6
; [else-branch: 2564 | !(p2_10@416@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@602@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01))))))))
; [then-branch: 2565 | p1_10@415@01 | dead]
; [else-branch: 2565 | !(p1_10@415@01) | live]
(push) ; 7
; [else-branch: 2565 | !(p1_10@415@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))))))
; [then-branch: 2566 | p2_10@416@01 | dead]
; [else-branch: 2566 | !(p2_10@416@01) | live]
(push) ; 8
; [else-branch: 2566 | !(p2_10@416@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))))
  $Snap.unit))
; [eval] p1_10 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 9
; [then-branch: 2567 | p1_10@415@01 | dead]
; [else-branch: 2567 | !(p1_10@415@01) | live]
(push) ; 10
; [else-branch: 2567 | !(p1_10@415@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01))))))))
  $Snap.unit))
; [eval] p2_10 ==> _err_3 != null ==> issubtype(typeof(_err_3), MyException())
(push) ; 9
; [then-branch: 2568 | p2_10@416@01 | dead]
; [else-branch: 2568 | !(p2_10@416@01) | live]
(push) ; 10
; [else-branch: 2568 | !(p2_10@416@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))))))
  $Snap.unit))
; [eval] p1_10 ==> true
(push) ; 9
; [then-branch: 2569 | p1_10@415@01 | dead]
; [else-branch: 2569 | !(p1_10@415@01) | live]
(push) ; 10
; [else-branch: 2569 | !(p1_10@415@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@602@01)))))))))
  $Snap.unit))
; [eval] p2_10 ==> true
(push) ; 9
; [then-branch: 2570 | p2_10@416@01 | dead]
; [else-branch: 2570 | !(p2_10@416@01) | live]
(push) ; 10
; [else-branch: 2570 | !(p2_10@416@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_2: Bool
(declare-const except1_2@603@01 Bool)
; [exec]
; var except2_2: Bool
(declare-const except2_2@604@01 Bool)
; [exec]
; var error_2: Ref
(declare-const error_2@605@01 $Ref)
; [exec]
; var error_2_0: Ref
(declare-const error_2_0@606@01 $Ref)
; [exec]
; var try_finally_10: Int
(declare-const try_finally_10@607@01 Int)
; [exec]
; var try_finally_10_0: Int
(declare-const try_finally_10_0@608@01 Int)
; [exec]
; var b_7: Ref
(declare-const b_7@609@01 $Ref)
; [exec]
; var b_7_0: Ref
(declare-const b_7_0@610@01 $Ref)
; [exec]
; var c_3: Ref
(declare-const c_3@611@01 $Ref)
; [exec]
; var c_3_0: Ref
(declare-const c_3_0@612@01 $Ref)
; [exec]
; var MyException_res_2: Ref
(declare-const MyException_res_2@613@01 $Ref)
; [exec]
; var MyException_res_2_0: Ref
(declare-const MyException_res_2_0@614@01 $Ref)
; [exec]
; var MyException_res_3: Ref
(declare-const MyException_res_3@615@01 $Ref)
; [exec]
; var MyException_res_3_0: Ref
(declare-const MyException_res_3_0@616@01 $Ref)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@617@01 $Perm)
; [exec]
; var _cwl_160_0: Perm
(declare-const _cwl_160_0@618@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@619@01 Seq<Measure$>)
; [exec]
; var _method_measures_160_0: Seq[Measure$]
(declare-const _method_measures_160_0@620@01 Seq<Measure$>)
; [exec]
; var bypass1_2: Bool
(declare-const bypass1_2@621@01 Bool)
; [exec]
; var bypass2_2: Bool
(declare-const bypass2_2@622@01 Bool)
; [exec]
; var thisexcept1_2: Bool
(declare-const thisexcept1_2@623@01 Bool)
; [exec]
; var thisexcept2_2: Bool
(declare-const thisexcept2_2@624@01 Bool)
; [exec]
; var p1_12: Bool
(declare-const p1_12@625@01 Bool)
; [exec]
; var p2_12: Bool
(declare-const p2_12@626@01 Bool)
; [exec]
; var p1_11: Bool
(declare-const p1_11@627@01 Bool)
; [exec]
; var p2_11: Bool
(declare-const p2_11@628@01 Bool)
; [exec]
; var p3_2: Bool
(declare-const p3_2@629@01 Bool)
; [exec]
; var p4_2: Bool
(declare-const p4_2@630@01 Bool)
; [exec]
; var tmp_2: Ref
(declare-const tmp_2@631@01 $Ref)
; [exec]
; var p1_13: Bool
(declare-const p1_13@632@01 Bool)
; [exec]
; var p2_13: Bool
(declare-const p2_13@633@01 Bool)
; [exec]
; var p3_3: Bool
(declare-const p3_3@634@01 Bool)
; [exec]
; var p4_3: Bool
(declare-const p4_3@635@01 Bool)
; [exec]
; var tmp_3: Ref
(declare-const tmp_3@636@01 $Ref)
; [exec]
; var p1_14: Bool
(declare-const p1_14@637@01 Bool)
; [exec]
; var p2_14: Bool
(declare-const p2_14@638@01 Bool)
; [exec]
; var p3_4: Bool
(declare-const p3_4@639@01 Bool)
; [exec]
; var p4_4: Bool
(declare-const p4_4@640@01 Bool)
; [exec]
; inhale p1_10
(declare-const $t@641@01 $Snap)
(assert (= $t@641@01 $Snap.unit))
(assert p1_10@415@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; except1_2 := false
; [exec]
; except2_2 := false
; [eval] p1_10 && !except1_2
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2571 | !(p1_10@415@01) | live]
; [else-branch: 2571 | p1_10@415@01 | live]
(push) ; 6
; [then-branch: 2571 | !(p1_10@415@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 2571 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_10@415@01 (not p1_10@415@01)))
; [then-branch: 2572 | p1_10@415@01 | dead]
; [else-branch: 2572 | !(p1_10@415@01) | live]
(push) ; 5
; [else-branch: 2572 | !(p1_10@415@01)]
(pop) ; 5
; [eval] !(p1_10 && !except1_2)
; [eval] p1_10 && !except1_2
(push) ; 5
; [then-branch: 2573 | !(p1_10@415@01) | live]
; [else-branch: 2573 | p1_10@415@01 | live]
(push) ; 6
; [then-branch: 2573 | !(p1_10@415@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 2573 | p1_10@415@01]
; [eval] !except1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 2574 | !(p1_10@415@01) | dead]
; [else-branch: 2574 | p1_10@415@01 | live]
(push) ; 5
; [else-branch: 2574 | p1_10@415@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- m5 ----------
(declare-const p1_15@642@01 Bool)
(declare-const p2_15@643@01 Bool)
(declare-const _cthread_161@644@01 $Ref)
(declare-const _cthread_161_0@645@01 $Ref)
(declare-const _caller_measures_161@646@01 Seq<Measure$>)
(declare-const _caller_measures_161_0@647@01 Seq<Measure$>)
(declare-const _residue_161@648@01 $Perm)
(declare-const _residue_161_0@649@01 $Perm)
(declare-const b_3@650@01 $Ref)
(declare-const b_3_0@651@01 $Ref)
(declare-const c_0@652@01 $Ref)
(declare-const c_0_0@653@01 $Ref)
(declare-const _current_wait_level_161@654@01 $Perm)
(declare-const _current_wait_level_161_0@655@01 $Perm)
(declare-const _err@656@01 $Ref)
(declare-const _err_4@657@01 $Ref)
(declare-const p1_15@658@01 Bool)
(declare-const p2_15@659@01 Bool)
(declare-const _cthread_161@660@01 $Ref)
(declare-const _cthread_161_0@661@01 $Ref)
(declare-const _caller_measures_161@662@01 Seq<Measure$>)
(declare-const _caller_measures_161_0@663@01 Seq<Measure$>)
(declare-const _residue_161@664@01 $Perm)
(declare-const _residue_161_0@665@01 $Perm)
(declare-const b_3@666@01 $Ref)
(declare-const b_3_0@667@01 $Ref)
(declare-const c_0@668@01 $Ref)
(declare-const c_0_0@669@01 $Ref)
(declare-const _current_wait_level_161@670@01 $Perm)
(declare-const _current_wait_level_161_0@671@01 $Perm)
(declare-const _err@672@01 $Ref)
(declare-const _err_4@673@01 $Ref)
(push) ; 1
(declare-const $t@674@01 $Snap)
(assert (= $t@674@01 ($Snap.combine ($Snap.first $t@674@01) ($Snap.second $t@674@01))))
(assert (= ($Snap.first $t@674@01) $Snap.unit))
; [eval] p1_15 ==> _cthread_161 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_15@658@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2575 | p1_15@658@01 | live]
; [else-branch: 2575 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2575 | p1_15@658@01]
(assert p1_15@658@01)
; [eval] _cthread_161 != null
(pop) ; 3
(push) ; 3
; [else-branch: 2575 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_15@658@01) p1_15@658@01))
(assert (=> p1_15@658@01 (not (= _cthread_161@660@01 $Ref.null))))
(assert (=
  ($Snap.second $t@674@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@674@01))
    ($Snap.second ($Snap.second $t@674@01)))))
(assert (= ($Snap.first ($Snap.second $t@674@01)) $Snap.unit))
; [eval] p2_15 ==> _cthread_161_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2576 | p2_15@659@01 | live]
; [else-branch: 2576 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2576 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] _cthread_161_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 2576 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_15@659@01) p2_15@659@01))
(assert (=> p2_15@659@01 (not (= _cthread_161_0@661@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@674@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@674@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@674@01))) $Snap.unit))
; [eval] p1_15 ==> issubtype(typeof(_cthread_161), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_15@658@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2577 | p1_15@658@01 | live]
; [else-branch: 2577 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2577 | p1_15@658@01]
(assert p1_15@658@01)
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2577 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_15@658@01
  (issubtype<Bool> (typeof<PyType> _cthread_161@660@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@674@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@674@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@674@01))))
  $Snap.unit))
; [eval] p2_15 ==> issubtype(typeof(_cthread_161_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2578 | p2_15@659@01 | live]
; [else-branch: 2578 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2578 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] issubtype(typeof(_cthread_161_0), Thread_0())
; [eval] typeof(_cthread_161_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2578 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_15@659@01
  (issubtype<Bool> (typeof<PyType> _cthread_161_0@661@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))
  $Snap.unit))
; [eval] p1_15 ==> issubtype(typeof(b_3), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_15@658@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2579 | p1_15@658@01 | live]
; [else-branch: 2579 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2579 | p1_15@658@01]
(assert p1_15@658@01)
; [eval] issubtype(typeof(b_3), bool())
; [eval] typeof(b_3)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 2579 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_15@658@01
  (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))
  $Snap.unit))
; [eval] p2_15 ==> issubtype(typeof(b_3_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2580 | p2_15@659@01 | live]
; [else-branch: 2580 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2580 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] issubtype(typeof(b_3_0), bool())
; [eval] typeof(b_3_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 2580 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_15@659@01
  (issubtype<Bool> (typeof<PyType> b_3_0@667@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> issubtype(typeof(c_0), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_15@658@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2581 | p1_15@658@01 | live]
; [else-branch: 2581 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2581 | p1_15@658@01]
(assert p1_15@658@01)
; [eval] issubtype(typeof(c_0), Container())
; [eval] typeof(c_0)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 2581 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_15@658@01
  (issubtype<Bool> (typeof<PyType> c_0@668@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> issubtype(typeof(c_0_0), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2582 | p2_15@659@01 | live]
; [else-branch: 2582 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2582 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] issubtype(typeof(c_0_0), Container())
; [eval] typeof(c_0_0)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 2582 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_15@659@01
  (issubtype<Bool> (typeof<PyType> c_0_0@669@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1_15@658@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2583 | p1_15@658@01 | live]
; [else-branch: 2583 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 2583 | p1_15@658@01]
(assert p1_15@658@01)
(assert (not (= c_0@668@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2584 | p2_15@659@01 | live]
; [else-branch: 2584 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2584 | p2_15@659@01]
(assert p2_15@659@01)
(assert (not (= c_0_0@669@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
  $Snap.unit))
; [eval] p1_15 ==> issubtype(typeof(c_0.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2585 | p1_15@658@01 | live]
; [else-branch: 2585 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2585 | p1_15@658@01]
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_15@658@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
  $Snap.unit))
; [eval] p2_15 ==> issubtype(typeof(c_0_0.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2586 | p2_15@659@01 | live]
; [else-branch: 2586 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2586 | p2_15@659@01]
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_15@659@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2587 | p1_15@658@01 | live]
; [else-branch: 2587 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2587 | p1_15@658@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2588 | p2_15@659@01 | live]
; [else-branch: 2588 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2588 | p2_15@659@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@675@01 $Snap)
(assert (= $t@675@01 ($Snap.combine ($Snap.first $t@675@01) ($Snap.second $t@675@01))))
(assert (= ($Snap.first $t@675@01) $Snap.unit))
; [eval] p1_15 ==> (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_161) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2589 | p1_15@658@01 | live]
; [else-branch: 2589 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2589 | p1_15@658@01]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_161) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_161)
(push) ; 7
; [then-branch: 2590 | False | live]
; [else-branch: 2590 | True | live]
(push) ; 8
; [then-branch: 2590 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2590 | True]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_161)
(push) ; 9
; [then-branch: 2591 | False | live]
; [else-branch: 2591 | True | live]
(push) ; 10
; [then-branch: 2591 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2591 | True]
; [eval] _residue_161 <= _current_wait_level_161
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_15@658@01 (<= _residue_161@664@01 _current_wait_level_161@670@01)))
(assert (=
  ($Snap.second $t@675@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@675@01))
    ($Snap.second ($Snap.second $t@675@01)))))
(assert (= ($Snap.first ($Snap.second $t@675@01)) $Snap.unit))
; [eval] p2_15 ==> (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_161_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_161_0) && _residue_161_0 <= _current_wait_level_161_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2592 | p2_15@659@01 | live]
; [else-branch: 2592 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2592 | p2_15@659@01]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_161_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_161_0) && _residue_161_0 <= _current_wait_level_161_0)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_161_0)
(push) ; 7
; [then-branch: 2593 | False | live]
; [else-branch: 2593 | True | live]
(push) ; 8
; [then-branch: 2593 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2593 | True]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_161_0)
(push) ; 9
; [then-branch: 2594 | False | live]
; [else-branch: 2594 | True | live]
(push) ; 10
; [then-branch: 2594 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2594 | True]
; [eval] _residue_161_0 <= _current_wait_level_161_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_15@659@01 (<= _residue_161_0@665@01 _current_wait_level_161_0@671@01)))
(assert (=
  ($Snap.second ($Snap.second $t@675@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@675@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2595 | p1_15@658@01 | live]
; [else-branch: 2595 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2595 | p1_15@658@01]
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@672@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@672@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2596 | _err@672@01 == Null | live]
; [else-branch: 2596 | _err@672@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2596 | _err@672@01 == Null]
(assert (= _err@672@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@675@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@675@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@675@01)))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@675@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@675@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@675@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@675@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@675@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@675@01)))))
  $Snap.unit))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@675@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@675@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@675@01))))) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@675@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2597 | p2_15@659@01 | live]
; [else-branch: 2597 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2597 | p2_15@659@01]
; [eval] _err_4 == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err_4@673@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err_4@673@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2598 | _err_4@673@01 == Null | live]
; [else-branch: 2598 | _err_4@673@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2598 | _err_4@673@01 == Null]
(assert (= _err_4@673@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))) (__prim__int___box__ $Snap.unit 0)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2599 | p1_15@658@01 | live]
; [else-branch: 2599 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2599 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 10
; [then-branch: 2600 | _err@672@01 == Null | live]
; [else-branch: 2600 | _err@672@01 != Null | live]
(push) ; 11
; [then-branch: 2600 | _err@672@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 2600 | _err@672@01 != Null]
(assert (not (= _err@672@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@672@01 $Ref.null)) (= _err@672@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2601 | _err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]) | dead]
; [else-branch: 2601 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2601 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2602 | p2_15@659@01 | live]
; [else-branch: 2602 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2602 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 12
; [then-branch: 2603 | _err_4@673@01 == Null | live]
; [else-branch: 2603 | _err_4@673@01 != Null | live]
(push) ; 13
; [then-branch: 2603 | _err_4@673@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 2603 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_4@673@01 $Ref.null)) (= _err_4@673@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2604 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]) | dead]
; [else-branch: 2604 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 2604 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2605 | p1_15@658@01 | live]
; [else-branch: 2605 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2605 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
; [then-branch: 2606 | _err@672@01 != Null | dead]
; [else-branch: 2606 | _err@672@01 == Null | live]
(push) ; 16
; [else-branch: 2606 | _err@672@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2607 | p2_15@659@01 | live]
; [else-branch: 2607 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2607 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 15
; [then-branch: 2608 | _err_4@673@01 != Null | dead]
; [else-branch: 2608 | _err_4@673@01 == Null | live]
(push) ; 16
; [else-branch: 2608 | _err_4@673@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2609 | p1_15@658@01 | live]
; [else-branch: 2609 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2609 | p1_15@658@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2610 | p2_15@659@01 | live]
; [else-branch: 2610 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2610 | p2_15@659@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 2598 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2611 | p1_15@658@01 | live]
; [else-branch: 2611 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2611 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 10
; [then-branch: 2612 | _err@672@01 == Null | live]
; [else-branch: 2612 | _err@672@01 != Null | live]
(push) ; 11
; [then-branch: 2612 | _err@672@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 2612 | _err@672@01 != Null]
(assert (not (= _err@672@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@672@01 $Ref.null)) (= _err@672@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2613 | _err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]) | dead]
; [else-branch: 2613 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2613 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2614 | p2_15@659@01 | live]
; [else-branch: 2614 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2614 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 12
; [then-branch: 2615 | _err_4@673@01 == Null | live]
; [else-branch: 2615 | _err_4@673@01 != Null | live]
(push) ; 13
; [then-branch: 2615 | _err_4@673@01 == Null]
(assert (= _err_4@673@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 2615 | _err_4@673@01 != Null]
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_4@673@01 $Ref.null)) (= _err_4@673@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_4@673@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2616 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]) | live]
; [else-branch: 2616 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2616 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])]
(assert (and
  (not (= _err_4@673@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2617 | p1_15@658@01 | live]
; [else-branch: 2617 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2617 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
; [then-branch: 2618 | _err@672@01 != Null | dead]
; [else-branch: 2618 | _err@672@01 == Null | live]
(push) ; 16
; [else-branch: 2618 | _err@672@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2619 | p2_15@659@01 | live]
; [else-branch: 2619 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2619 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_4@673@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2620 | _err_4@673@01 != Null | live]
; [else-branch: 2620 | _err_4@673@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2620 | _err_4@673@01 != Null]
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p2_15@659@01 (not (= _err_4@673@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2621 | p1_15@658@01 | live]
; [else-branch: 2621 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2621 | p1_15@658@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2622 | p2_15@659@01 | live]
; [else-branch: 2622 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2622 | p2_15@659@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 2616 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2623 | p1_15@658@01 | live]
; [else-branch: 2623 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2623 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
; [then-branch: 2624 | _err@672@01 != Null | dead]
; [else-branch: 2624 | _err@672@01 == Null | live]
(push) ; 16
; [else-branch: 2624 | _err@672@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2625 | p2_15@659@01 | live]
; [else-branch: 2625 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2625 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_4@673@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err_4@673@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2626 | _err_4@673@01 != Null | live]
; [else-branch: 2626 | _err_4@673@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2626 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err_4@673@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p2_15@659@01 (not (= _err_4@673@01 $Ref.null))))
(assert (=>
  (and p2_15@659@01 (not (= _err_4@673@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2627 | p1_15@658@01 | dead]
; [else-branch: 2627 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2627 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_15@658@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2628 | p2_15@659@01 | dead]
; [else-branch: 2628 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2628 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_15@659@01))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2596 | _err@672@01 != Null]
(assert (not (= _err@672@01 $Ref.null)))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@675@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@675@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2629 | p2_15@659@01 | live]
; [else-branch: 2629 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2629 | p2_15@659@01]
; [eval] _err_4 == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err_4@673@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err_4@673@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2630 | _err_4@673@01 == Null | live]
; [else-branch: 2630 | _err_4@673@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2630 | _err_4@673@01 == Null]
(assert (= _err_4@673@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))) (__prim__int___box__ $Snap.unit 0))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2631 | p1_15@658@01 | live]
; [else-branch: 2631 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2631 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 10
; [then-branch: 2632 | _err@672@01 == Null | live]
; [else-branch: 2632 | _err@672@01 != Null | live]
(push) ; 11
; [then-branch: 2632 | _err@672@01 == Null]
(assert (= _err@672@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 2632 | _err@672@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@672@01 $Ref.null)) (= _err@672@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err@672@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2633 | _err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]) | live]
; [else-branch: 2633 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2633 | _err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType])]
(assert (and
  (not (= _err@672@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2634 | p2_15@659@01 | live]
; [else-branch: 2634 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2634 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 12
; [then-branch: 2635 | _err_4@673@01 == Null | live]
; [else-branch: 2635 | _err_4@673@01 != Null | live]
(push) ; 13
; [then-branch: 2635 | _err_4@673@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 2635 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_4@673@01 $Ref.null)) (= _err_4@673@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2636 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]) | dead]
; [else-branch: 2636 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 2636 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2637 | p1_15@658@01 | live]
; [else-branch: 2637 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2637 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@672@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2638 | _err@672@01 != Null | live]
; [else-branch: 2638 | _err@672@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2638 | _err@672@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_15@658@01 (not (= _err@672@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2639 | p2_15@659@01 | live]
; [else-branch: 2639 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2639 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 15
; [then-branch: 2640 | _err_4@673@01 != Null | dead]
; [else-branch: 2640 | _err_4@673@01 == Null | live]
(push) ; 16
; [else-branch: 2640 | _err_4@673@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2641 | p1_15@658@01 | live]
; [else-branch: 2641 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2641 | p1_15@658@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2642 | p2_15@659@01 | live]
; [else-branch: 2642 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2642 | p2_15@659@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 2633 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2643 | p2_15@659@01 | live]
; [else-branch: 2643 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2643 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 12
; [then-branch: 2644 | _err_4@673@01 == Null | live]
; [else-branch: 2644 | _err_4@673@01 != Null | live]
(push) ; 13
; [then-branch: 2644 | _err_4@673@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 2644 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_4@673@01 $Ref.null)) (= _err_4@673@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2645 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]) | dead]
; [else-branch: 2645 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 2645 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2646 | p1_15@658@01 | live]
; [else-branch: 2646 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2646 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@672@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@672@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2647 | _err@672@01 != Null | live]
; [else-branch: 2647 | _err@672@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2647 | _err@672@01 != Null]
(assert (not (= _err@672@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@672@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_15@658@01 (not (= _err@672@01 $Ref.null))))
(assert (=>
  (and p1_15@658@01 (not (= _err@672@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2648 | p2_15@659@01 | dead]
; [else-branch: 2648 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2648 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_15@659@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2649 | p1_15@658@01 | dead]
; [else-branch: 2649 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2649 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_15@658@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 13
; [then-branch: 2650 | p2_15@659@01 | dead]
; [else-branch: 2650 | !(p2_15@659@01) | live]
(push) ; 14
; [else-branch: 2650 | !(p2_15@659@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 2630 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2651 | p1_15@658@01 | live]
; [else-branch: 2651 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2651 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 10
; [then-branch: 2652 | _err@672@01 == Null | live]
; [else-branch: 2652 | _err@672@01 != Null | live]
(push) ; 11
; [then-branch: 2652 | _err@672@01 == Null]
(assert (= _err@672@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 2652 | _err@672@01 != Null]
(assert (not (= _err@672@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@672@01 $Ref.null)) (= _err@672@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err@672@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2653 | _err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]) | live]
; [else-branch: 2653 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2653 | _err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType])]
(assert (and
  (not (= _err@672@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2654 | p2_15@659@01 | live]
; [else-branch: 2654 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2654 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 12
; [then-branch: 2655 | _err_4@673@01 == Null | live]
; [else-branch: 2655 | _err_4@673@01 != Null | live]
(push) ; 13
; [then-branch: 2655 | _err_4@673@01 == Null]
(assert (= _err_4@673@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 2655 | _err_4@673@01 != Null]
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_4@673@01 $Ref.null)) (= _err_4@673@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_4@673@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2656 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]) | live]
; [else-branch: 2656 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2656 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])]
(assert (and
  (not (= _err_4@673@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 13
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2657 | p1_15@658@01 | live]
; [else-branch: 2657 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2657 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@672@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2658 | _err@672@01 != Null | live]
; [else-branch: 2658 | _err@672@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2658 | _err@672@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_15@658@01 (not (= _err@672@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2659 | p2_15@659@01 | live]
; [else-branch: 2659 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2659 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_4@673@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2660 | _err_4@673@01 != Null | live]
; [else-branch: 2660 | _err_4@673@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2660 | _err_4@673@01 != Null]
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p2_15@659@01 (not (= _err_4@673@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2661 | p1_15@658@01 | live]
; [else-branch: 2661 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2661 | p1_15@658@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2662 | p2_15@659@01 | live]
; [else-branch: 2662 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2662 | p2_15@659@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 2656 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2663 | p1_15@658@01 | live]
; [else-branch: 2663 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2663 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@672@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2664 | _err@672@01 != Null | live]
; [else-branch: 2664 | _err@672@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2664 | _err@672@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_15@658@01 (not (= _err@672@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2665 | p2_15@659@01 | live]
; [else-branch: 2665 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2665 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_4@673@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err_4@673@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2666 | _err_4@673@01 != Null | live]
; [else-branch: 2666 | _err_4@673@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2666 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err_4@673@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p2_15@659@01 (not (= _err_4@673@01 $Ref.null))))
(assert (=>
  (and p2_15@659@01 (not (= _err_4@673@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2667 | p1_15@658@01 | dead]
; [else-branch: 2667 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2667 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_15@658@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2668 | p2_15@659@01 | dead]
; [else-branch: 2668 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2668 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_15@659@01))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 2653 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2669 | p2_15@659@01 | live]
; [else-branch: 2669 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2669 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 12
; [then-branch: 2670 | _err_4@673@01 == Null | live]
; [else-branch: 2670 | _err_4@673@01 != Null | live]
(push) ; 13
; [then-branch: 2670 | _err_4@673@01 == Null]
(assert (= _err_4@673@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 2670 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_4@673@01 $Ref.null)) (= _err_4@673@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_4@673@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2671 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]) | live]
; [else-branch: 2671 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2671 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])]
(assert (and
  (not (= _err_4@673@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2672 | p1_15@658@01 | live]
; [else-branch: 2672 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2672 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@672@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@672@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2673 | _err@672@01 != Null | live]
; [else-branch: 2673 | _err@672@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2673 | _err@672@01 != Null]
(assert (not (= _err@672@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@672@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_15@658@01 (not (= _err@672@01 $Ref.null))))
(assert (=>
  (and p1_15@658@01 (not (= _err@672@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2674 | p2_15@659@01 | dead]
; [else-branch: 2674 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2674 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_15@659@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2675 | p1_15@658@01 | dead]
; [else-branch: 2675 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2675 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_15@658@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 13
; [then-branch: 2676 | p2_15@659@01 | dead]
; [else-branch: 2676 | !(p2_15@659@01) | live]
(push) ; 14
; [else-branch: 2676 | !(p2_15@659@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 2671 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2677 | p1_15@658@01 | live]
; [else-branch: 2677 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2677 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@672@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@672@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2678 | _err@672@01 != Null | live]
; [else-branch: 2678 | _err@672@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2678 | _err@672@01 != Null]
(assert (not (= _err@672@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@672@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_15@658@01 (not (= _err@672@01 $Ref.null))))
(assert (=>
  (and p1_15@658@01 (not (= _err@672@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2679 | p2_15@659@01 | dead]
; [else-branch: 2679 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2679 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_15@659@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2680 | p1_15@658@01 | dead]
; [else-branch: 2680 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2680 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_15@658@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 13
; [then-branch: 2681 | p2_15@659@01 | dead]
; [else-branch: 2681 | !(p2_15@659@01) | live]
(push) ; 14
; [else-branch: 2681 | !(p2_15@659@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_3: Bool
(declare-const except1_3@676@01 Bool)
; [exec]
; var except2_3: Bool
(declare-const except2_3@677@01 Bool)
; [exec]
; var error_3: Ref
(declare-const error_3@678@01 $Ref)
; [exec]
; var error_3_0: Ref
(declare-const error_3_0@679@01 $Ref)
; [exec]
; var try_finally_11: Int
(declare-const try_finally_11@680@01 Int)
; [exec]
; var try_finally_11_0: Int
(declare-const try_finally_11_0@681@01 Int)
; [exec]
; var b_8: Ref
(declare-const b_8@682@01 $Ref)
; [exec]
; var b_8_0: Ref
(declare-const b_8_0@683@01 $Ref)
; [exec]
; var c_4: Ref
(declare-const c_4@684@01 $Ref)
; [exec]
; var c_4_0: Ref
(declare-const c_4_0@685@01 $Ref)
; [exec]
; var MyException_res_4: Ref
(declare-const MyException_res_4@686@01 $Ref)
; [exec]
; var MyException_res_4_0: Ref
(declare-const MyException_res_4_0@687@01 $Ref)
; [exec]
; var MyException_res_5: Ref
(declare-const MyException_res_5@688@01 $Ref)
; [exec]
; var MyException_res_5_0: Ref
(declare-const MyException_res_5_0@689@01 $Ref)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@690@01 $Perm)
; [exec]
; var _cwl_161_0: Perm
(declare-const _cwl_161_0@691@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@692@01 Seq<Measure$>)
; [exec]
; var _method_measures_161_0: Seq[Measure$]
(declare-const _method_measures_161_0@693@01 Seq<Measure$>)
; [exec]
; var bypass1_3: Bool
(declare-const bypass1_3@694@01 Bool)
; [exec]
; var bypass2_3: Bool
(declare-const bypass2_3@695@01 Bool)
; [exec]
; var thisexcept1_3: Bool
(declare-const thisexcept1_3@696@01 Bool)
; [exec]
; var thisexcept2_3: Bool
(declare-const thisexcept2_3@697@01 Bool)
; [exec]
; var p1_17: Bool
(declare-const p1_17@698@01 Bool)
; [exec]
; var p2_17: Bool
(declare-const p2_17@699@01 Bool)
; [exec]
; var p1_19: Bool
(declare-const p1_19@700@01 Bool)
; [exec]
; var p2_19: Bool
(declare-const p2_19@701@01 Bool)
; [exec]
; var p1_16: Bool
(declare-const p1_16@702@01 Bool)
; [exec]
; var p2_16: Bool
(declare-const p2_16@703@01 Bool)
; [exec]
; var p3_5: Bool
(declare-const p3_5@704@01 Bool)
; [exec]
; var p4_5: Bool
(declare-const p4_5@705@01 Bool)
; [exec]
; var tmp_4: Ref
(declare-const tmp_4@706@01 $Ref)
; [exec]
; var p1_18: Bool
(declare-const p1_18@707@01 Bool)
; [exec]
; var p2_18: Bool
(declare-const p2_18@708@01 Bool)
; [exec]
; var p3_6: Bool
(declare-const p3_6@709@01 Bool)
; [exec]
; var p4_6: Bool
(declare-const p4_6@710@01 Bool)
; [exec]
; var p1_20: Bool
(declare-const p1_20@711@01 Bool)
; [exec]
; var p2_20: Bool
(declare-const p2_20@712@01 Bool)
; [exec]
; var p3_7: Bool
(declare-const p3_7@713@01 Bool)
; [exec]
; var p4_7: Bool
(declare-const p4_7@714@01 Bool)
; [exec]
; var tmp_5: Ref
(declare-const tmp_5@715@01 $Ref)
; [exec]
; inhale p1_15
(declare-const $t@716@01 $Snap)
(assert (= $t@716@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; except1_3 := false
; [exec]
; except2_3 := false
; [eval] p1_15 && !except1_3
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2682 | !(p1_15@658@01) | live]
; [else-branch: 2682 | p1_15@658@01 | live]
(push) ; 6
; [then-branch: 2682 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2682 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_15@658@01 (not p1_15@658@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2683 | p1_15@658@01 | live]
; [else-branch: 2683 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2683 | p1_15@658@01]
; [exec]
; _method_measures_161 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; b_8 := b_3
; [exec]
; c_4 := c_0
; [eval] p2_15 && !except2_3
(push) ; 6
; [then-branch: 2684 | !(p2_15@659@01) | live]
; [else-branch: 2684 | p2_15@659@01 | live]
(push) ; 7
; [then-branch: 2684 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2684 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_15@659@01 (not p2_15@659@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2685 | p2_15@659@01 | live]
; [else-branch: 2685 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2685 | p2_15@659@01]
; [exec]
; _method_measures_161_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err_4 := null
; [exec]
; b_8_0 := b_3_0
; [exec]
; c_4_0 := c_0_0
; [exec]
; bypass1_3 := !(p1_15 && !except1_3)
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 7
; [then-branch: 2686 | !(p1_15@658@01) | live]
; [else-branch: 2686 | p1_15@658@01 | live]
(push) ; 8
; [then-branch: 2686 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2686 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1_3@717@01 Bool)
(assert (= bypass1_3@717@01 (not p1_15@658@01)))
; [exec]
; bypass2_3 := !(p2_15 && !except2_3)
; [eval] !(p2_15 && !except2_3)
; [eval] p2_15 && !except2_3
(push) ; 7
; [then-branch: 2687 | !(p2_15@659@01) | live]
; [else-branch: 2687 | p2_15@659@01 | live]
(push) ; 8
; [then-branch: 2687 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2687 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2_3@718@01 Bool)
(assert (= bypass2_3@718@01 (not p2_15@659@01)))
; [exec]
; p1_16 := p1_15 && (!except1_3 && bool___unbox__(b_8))
; [eval] p1_15 && (!except1_3 && bool___unbox__(b_8))
(push) ; 7
; [then-branch: 2688 | !(p1_15@658@01) | live]
; [else-branch: 2688 | p1_15@658@01 | live]
(push) ; 8
; [then-branch: 2688 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2688 | p1_15@658@01]
; [eval] !except1_3
(push) ; 9
; [then-branch: 2689 | False | live]
; [else-branch: 2689 | True | live]
(push) ; 10
; [then-branch: 2689 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2689 | True]
; [eval] bool___unbox__(b_8)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_3@666@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3@666@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3@666@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_15@658@01
  (and
    (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_3@666@01))))
(declare-const p1_16@719@01 Bool)
(assert (= p1_16@719@01 (and p1_15@658@01 (bool___unbox__ $Snap.unit b_3@666@01))))
; [exec]
; p2_16 := p2_15 && (!except2_3 && bool___unbox__(b_8_0))
; [eval] p2_15 && (!except2_3 && bool___unbox__(b_8_0))
(push) ; 7
; [then-branch: 2690 | !(p2_15@659@01) | live]
; [else-branch: 2690 | p2_15@659@01 | live]
(push) ; 8
; [then-branch: 2690 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2690 | p2_15@659@01]
; [eval] !except2_3
(push) ; 9
; [then-branch: 2691 | False | live]
; [else-branch: 2691 | True | live]
(push) ; 10
; [then-branch: 2691 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2691 | True]
; [eval] bool___unbox__(b_8_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_3_0@667@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_3_0@667@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_3_0@667@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3_0@667@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3_0@667@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3_0@667@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3_0@667@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_15@659@01
  (and
    (issubtype<Bool> (typeof<PyType> b_3_0@667@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_3_0@667@01))))
(declare-const p2_16@720@01 Bool)
(assert (= p2_16@720@01 (and p2_15@659@01 (bool___unbox__ $Snap.unit b_3_0@667@01))))
; [exec]
; p3_5 := p1_15 && (!except1_3 && !bool___unbox__(b_8))
; [eval] p1_15 && (!except1_3 && !bool___unbox__(b_8))
(push) ; 7
; [then-branch: 2692 | !(p1_15@658@01) | live]
; [else-branch: 2692 | p1_15@658@01 | live]
(push) ; 8
; [then-branch: 2692 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2692 | p1_15@658@01]
; [eval] !except1_3
(push) ; 9
; [then-branch: 2693 | False | live]
; [else-branch: 2693 | True | live]
(push) ; 10
; [then-branch: 2693 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2693 | True]
; [eval] !bool___unbox__(b_8)
; [eval] bool___unbox__(b_8)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_3@666@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3@666@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3@666@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p3_5@721@01 Bool)
(assert (= p3_5@721@01 (and p1_15@658@01 (not (bool___unbox__ $Snap.unit b_3@666@01)))))
; [exec]
; p4_5 := p2_15 && (!except2_3 && !bool___unbox__(b_8_0))
; [eval] p2_15 && (!except2_3 && !bool___unbox__(b_8_0))
(push) ; 7
; [then-branch: 2694 | !(p2_15@659@01) | live]
; [else-branch: 2694 | p2_15@659@01 | live]
(push) ; 8
; [then-branch: 2694 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2694 | p2_15@659@01]
; [eval] !except2_3
(push) ; 9
; [then-branch: 2695 | False | live]
; [else-branch: 2695 | True | live]
(push) ; 10
; [then-branch: 2695 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2695 | True]
; [eval] !bool___unbox__(b_8_0)
; [eval] bool___unbox__(b_8_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_3_0@667@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_3_0@667@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_3_0@667@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3_0@667@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3_0@667@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3_0@667@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3_0@667@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p4_5@722@01 Bool)
(assert (= p4_5@722@01 (and p2_15@659@01 (not (bool___unbox__ $Snap.unit b_3_0@667@01)))))
; [exec]
; tmp_4 := new()
(declare-const tmp_4@723@01 $Ref)
(assert (not (= tmp_4@723@01 $Ref.null)))
(assert (not (= tmp_4@723@01 MyException_res_5_0@689@01)))
(assert (not (= tmp_4@723@01 c_0@668@01)))
(assert (not (= tmp_4@723@01 _cthread_161_0@661@01)))
(assert (not (= tmp_4@723@01 MyException_res_5@688@01)))
(assert (not (= tmp_4@723@01 b_3_0@667@01)))
(assert (not (= tmp_4@723@01 error_3_0@679@01)))
(assert (not (= tmp_4@723@01 MyException_res_4@686@01)))
(assert (not
  (=
    tmp_4@723@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))))
(assert (not
  (=
    tmp_4@723@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
(assert (not (= tmp_4@723@01 MyException_res_4_0@687@01)))
(assert (not (= tmp_4@723@01 b_3@666@01)))
(assert (not (= tmp_4@723@01 error_3@678@01)))
(assert (not (= tmp_4@723@01 tmp_5@715@01)))
(assert (not (= tmp_4@723@01 tmp_4@706@01)))
(assert (not (= tmp_4@723@01 _cthread_161@660@01)))
(assert (not (= tmp_4@723@01 c_0_0@669@01)))
; [eval] p1_16 && !except1_3
(push) ; 7
; [then-branch: 2696 | !(p1_16@719@01) | live]
; [else-branch: 2696 | p1_16@719@01 | live]
(push) ; 8
; [then-branch: 2696 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2696 | p1_16@719@01]
(assert p1_16@719@01)
; [eval] !except1_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_16@719@01 (not p1_16@719@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_16@719@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_16@719@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2697 | p1_16@719@01 | live]
; [else-branch: 2697 | !(p1_16@719@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2697 | p1_16@719@01]
(assert p1_16@719@01)
; [exec]
; MyException_res_4 := tmp_4
; [eval] p2_16 && !except2_3
(push) ; 8
; [then-branch: 2698 | !(p2_16@720@01) | live]
; [else-branch: 2698 | p2_16@720@01 | live]
(push) ; 9
; [then-branch: 2698 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2698 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_16@720@01 (not p2_16@720@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_16@720@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_16@720@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2699 | p2_16@720@01 | live]
; [else-branch: 2699 | !(p2_16@720@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2699 | p2_16@720@01]
(assert p2_16@720@01)
; [exec]
; MyException_res_4_0 := tmp_4
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 2700 | !(p1_16@719@01) | live]
; [else-branch: 2700 | p1_16@719@01 | live]
(push) ; 10
; [then-branch: 2700 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2700 | p1_16@719@01]
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_16@719@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2701 | p1_16@719@01 | live]
; [else-branch: 2701 | !(p1_16@719@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2701 | p1_16@719@01]
; [exec]
; inhale typeof(MyException_res_4) == MyException()
(declare-const $t@724@01 $Snap)
(assert (= $t@724@01 $Snap.unit))
; [eval] typeof(MyException_res_4) == MyException()
; [eval] typeof(MyException_res_4)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_4@723@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_16 && !except2_3
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2702 | !(p2_16@720@01) | live]
; [else-branch: 2702 | p2_16@720@01 | live]
(push) ; 11
; [then-branch: 2702 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2702 | p2_16@720@01]
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_16@720@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2703 | p2_16@720@01 | live]
; [else-branch: 2703 | !(p2_16@720@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2703 | p2_16@720@01]
; [exec]
; inhale typeof(MyException_res_4_0) == MyException()
(declare-const $t@725@01 $Snap)
(assert (= $t@725@01 $Snap.unit))
; [eval] typeof(MyException_res_4_0) == MyException()
; [eval] typeof(MyException_res_4_0)
; [eval] MyException()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_16 && !except1_3
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2704 | !(p1_16@719@01) | live]
; [else-branch: 2704 | p1_16@719@01 | live]
(push) ; 12
; [then-branch: 2704 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2704 | p1_16@719@01]
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_16@719@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2705 | p1_16@719@01 | live]
; [else-branch: 2705 | !(p1_16@719@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2705 | p1_16@719@01]
; [exec]
; _err := MyException_res_4
; [exec]
; except1_3 := true
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 2706 | !(p2_16@720@01) | live]
; [else-branch: 2706 | p2_16@720@01 | live]
(push) ; 13
; [then-branch: 2706 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2706 | p2_16@720@01]
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_16@720@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2707 | p2_16@720@01 | live]
; [else-branch: 2707 | !(p2_16@720@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2707 | p2_16@720@01]
; [exec]
; _err_4 := MyException_res_4_0
; [exec]
; except2_3 := true
; [exec]
; thisexcept1_3 := except1_3 && !bypass1_3
; [eval] except1_3 && !bypass1_3
(push) ; 13
; [then-branch: 2708 | False | live]
; [else-branch: 2708 | True | live]
(push) ; 14
; [then-branch: 2708 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2708 | True]
; [eval] !bypass1_3
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_3@726@01 Bool)
(assert (= thisexcept1_3@726@01 (not bypass1_3@717@01)))
; [exec]
; thisexcept2_3 := except2_3 && !bypass2_3
; [eval] except2_3 && !bypass2_3
(push) ; 13
; [then-branch: 2709 | False | live]
; [else-branch: 2709 | True | live]
(push) ; 14
; [then-branch: 2709 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2709 | True]
; [eval] !bypass2_3
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_3@727@01 Bool)
(assert (= thisexcept2_3@727@01 (not bypass2_3@718@01)))
; [exec]
; p1_17 := p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
; [eval] p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 2710 | !(p1_15@658@01) | live]
; [else-branch: 2710 | p1_15@658@01 | live]
(push) ; 14
; [then-branch: 2710 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2710 | p1_15@658@01]
(push) ; 15
; [then-branch: 2711 | !(thisexcept1_3@726@01) | live]
; [else-branch: 2711 | thisexcept1_3@726@01 | live]
(push) ; 16
; [then-branch: 2711 | !(thisexcept1_3@726@01)]
(assert (not thisexcept1_3@726@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2711 | thisexcept1_3@726@01]
(assert thisexcept1_3@726@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_3@726@01 (not thisexcept1_3@726@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=> p1_15@658@01 (or thisexcept1_3@726@01 (not thisexcept1_3@726@01))))
(declare-const p1_17@728@01 Bool)
(assert (=
  p1_17@728@01
  (and
    p1_15@658@01
    (and
      thisexcept1_3@726@01
      (issubtype<Bool> (typeof<PyType> tmp_4@723@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_17 := p2_15 &&
;   (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
; [eval] p2_15 && (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
(push) ; 13
; [then-branch: 2712 | !(p2_15@659@01) | live]
; [else-branch: 2712 | p2_15@659@01 | live]
(push) ; 14
; [then-branch: 2712 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2712 | p2_15@659@01]
(push) ; 15
; [then-branch: 2713 | !(thisexcept2_3@727@01) | live]
; [else-branch: 2713 | thisexcept2_3@727@01 | live]
(push) ; 16
; [then-branch: 2713 | !(thisexcept2_3@727@01)]
(assert (not thisexcept2_3@727@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2713 | thisexcept2_3@727@01]
(assert thisexcept2_3@727@01)
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_3@727@01 (not thisexcept2_3@727@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=> p2_15@659@01 (or thisexcept2_3@727@01 (not thisexcept2_3@727@01))))
(declare-const p2_17@729@01 Bool)
(assert (=
  p2_17@729@01
  (and
    p2_15@659@01
    (and
      thisexcept2_3@727@01
      (issubtype<Bool> (typeof<PyType> tmp_4@723@01) (as MyException<PyType>  PyType))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_17@728@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not p1_17@728@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2714 | p1_17@728@01 | live]
; [else-branch: 2714 | !(p1_17@728@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2714 | p1_17@728@01]
(assert p1_17@728@01)
; [exec]
; except1_3 := false
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_17@729@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not p2_17@729@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2715 | p2_17@729@01 | live]
; [else-branch: 2715 | !(p2_17@729@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2715 | p2_17@729@01]
(assert p2_17@729@01)
; [exec]
; except2_3 := false
; [exec]
; p1_18 := p1_17 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_17 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 15
; [then-branch: 2716 | !(p1_17@728@01) | live]
; [else-branch: 2716 | p1_17@728@01 | live]
(push) ; 16
; [then-branch: 2716 | !(p1_17@728@01)]
(assert (not p1_17@728@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2716 | p1_17@728@01]
; [eval] !except1_3
(push) ; 17
; [then-branch: 2717 | False | live]
; [else-branch: 2717 | True | live]
(push) ; 18
; [then-branch: 2717 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2717 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p1_17@728@01 (not p1_17@728@01)))
; [exec]
; p2_18 := p2_17 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_17 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 15
; [then-branch: 2718 | !(p2_17@729@01) | live]
; [else-branch: 2718 | p2_17@729@01 | live]
(push) ; 16
; [then-branch: 2718 | !(p2_17@729@01)]
(assert (not p2_17@729@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2718 | p2_17@729@01]
; [eval] !except2_3
(push) ; 17
; [then-branch: 2719 | False | live]
; [else-branch: 2719 | True | live]
(push) ; 18
; [then-branch: 2719 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2719 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p2_17@729@01 (not p2_17@729@01)))
; [exec]
; p3_6 := p1_17 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_17 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 15
; [then-branch: 2720 | !(p1_17@728@01) | live]
; [else-branch: 2720 | p1_17@728@01 | live]
(push) ; 16
; [then-branch: 2720 | !(p1_17@728@01)]
(assert (not p1_17@728@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2720 | p1_17@728@01]
; [eval] !except1_3
(push) ; 17
; [then-branch: 2721 | False | live]
; [else-branch: 2721 | True | live]
(push) ; 18
; [then-branch: 2721 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2721 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p4_6 := p2_17 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_17 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 15
; [then-branch: 2722 | !(p2_17@729@01) | live]
; [else-branch: 2722 | p2_17@729@01 | live]
(push) ; 16
; [then-branch: 2722 | !(p2_17@729@01)]
(assert (not p2_17@729@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2722 | p2_17@729@01]
; [eval] !except2_3
(push) ; 17
; [then-branch: 2723 | False | live]
; [else-branch: 2723 | True | live]
(push) ; 18
; [then-branch: 2723 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2723 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] p1_18 && !except1_3
; [then-branch: 2724 | False | dead]
; [else-branch: 2724 | True | live]
(push) ; 15
; [else-branch: 2724 | True]
(pop) ; 15
; [eval] !(p1_18 && !except1_3)
; [eval] p1_18 && !except1_3
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2725 | True | live]
; [else-branch: 2725 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2725 | True]
; [eval] p2_18 && !except2_3
; [then-branch: 2726 | False | dead]
; [else-branch: 2726 | True | live]
(push) ; 16
; [else-branch: 2726 | True]
(pop) ; 16
; [eval] !(p2_18 && !except2_3)
; [eval] p2_18 && !except2_3
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2727 | True | live]
; [else-branch: 2727 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2727 | True]
; [eval] p1_17 && !except1_3
(push) ; 17
; [then-branch: 2728 | !(p1_17@728@01) | live]
; [else-branch: 2728 | p1_17@728@01 | live]
(push) ; 18
; [then-branch: 2728 | !(p1_17@728@01)]
(assert (not p1_17@728@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2728 | p1_17@728@01]
; [eval] !except1_3
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_17@728@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2729 | p1_17@728@01 | live]
; [else-branch: 2729 | !(p1_17@728@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2729 | p1_17@728@01]
; [exec]
; c_4.Container_value := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 18
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 18
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_value@730@01 $Ref)
(assert (= Container_value@730@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p2_17 && !except2_3
(push) ; 18
; [then-branch: 2730 | !(p2_17@729@01) | live]
; [else-branch: 2730 | p2_17@729@01 | live]
(push) ; 19
; [then-branch: 2730 | !(p2_17@729@01)]
(assert (not p2_17@729@01))
(pop) ; 19
(push) ; 19
; [else-branch: 2730 | p2_17@729@01]
; [eval] !except2_3
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_17@729@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2731 | p2_17@729@01 | live]
; [else-branch: 2731 | !(p2_17@729@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2731 | p2_17@729@01]
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 19
(pop) ; 19
; Joined path conditions
(declare-const Container_valuep@731@01 $Ref)
(assert (= Container_valuep@731@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 2732 | !(p1_15@658@01) | live]
; [else-branch: 2732 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 2732 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2732 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2733 | p1_15@658@01 | live]
; [else-branch: 2733 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2733 | p1_15@658@01]
; [exec]
; _err := null
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 2734 | !(p2_15@659@01) | live]
; [else-branch: 2734 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 2734 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2734 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2735 | p2_15@659@01 | live]
; [else-branch: 2735 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2735 | p2_15@659@01]
; [exec]
; _err_4 := null
; [exec]
; p1_19 := p1_15 && !thisexcept1_3
; [eval] p1_15 && !thisexcept1_3
(push) ; 21
; [then-branch: 2736 | !(p1_15@658@01) | live]
; [else-branch: 2736 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 2736 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2736 | p1_15@658@01]
; [eval] !thisexcept1_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(declare-const p1_19@732@01 Bool)
(assert (= p1_19@732@01 (and p1_15@658@01 (not thisexcept1_3@726@01))))
; [exec]
; p2_19 := p2_15 && !thisexcept2_3
; [eval] p2_15 && !thisexcept2_3
(push) ; 21
; [then-branch: 2737 | !(p2_15@659@01) | live]
; [else-branch: 2737 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 2737 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2737 | p2_15@659@01]
; [eval] !thisexcept2_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(declare-const p2_19@733@01 Bool)
(assert (= p2_19@733@01 (and p2_15@659@01 (not thisexcept2_3@727@01))))
; [exec]
; p1_20 := p1_19 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_19 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 2738 | !(p1_19@732@01) | live]
; [else-branch: 2738 | p1_19@732@01 | live]
(push) ; 22
; [then-branch: 2738 | !(p1_19@732@01)]
(assert (not p1_19@732@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2738 | p1_19@732@01]
(assert p1_19@732@01)
; [eval] !except1_3
(push) ; 23
; [then-branch: 2739 | False | live]
; [else-branch: 2739 | True | live]
(push) ; 24
; [then-branch: 2739 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2739 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or p1_19@732@01 (not p1_19@732@01)))
; [exec]
; p2_20 := p2_19 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_19 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 2740 | !(p2_19@733@01) | live]
; [else-branch: 2740 | p2_19@733@01 | live]
(push) ; 22
; [then-branch: 2740 | !(p2_19@733@01)]
(assert (not p2_19@733@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2740 | p2_19@733@01]
(assert p2_19@733@01)
; [eval] !except2_3
(push) ; 23
; [then-branch: 2741 | False | live]
; [else-branch: 2741 | True | live]
(push) ; 24
; [then-branch: 2741 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2741 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or p2_19@733@01 (not p2_19@733@01)))
; [exec]
; p3_7 := p1_19 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_19 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 2742 | !(p1_19@732@01) | live]
; [else-branch: 2742 | p1_19@732@01 | live]
(push) ; 22
; [then-branch: 2742 | !(p1_19@732@01)]
(assert (not p1_19@732@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2742 | p1_19@732@01]
(assert p1_19@732@01)
; [eval] !except1_3
(push) ; 23
; [then-branch: 2743 | False | live]
; [else-branch: 2743 | True | live]
(push) ; 24
; [then-branch: 2743 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2743 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p4_7 := p2_19 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_19 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 2744 | !(p2_19@733@01) | live]
; [else-branch: 2744 | p2_19@733@01 | live]
(push) ; 22
; [then-branch: 2744 | !(p2_19@733@01)]
(assert (not p2_19@733@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2744 | p2_19@733@01]
(assert p2_19@733@01)
; [eval] !except2_3
(push) ; 23
; [then-branch: 2745 | False | live]
; [else-branch: 2745 | True | live]
(push) ; 24
; [then-branch: 2745 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2745 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [eval] p1_20 && !except1_3
; [then-branch: 2746 | False | dead]
; [else-branch: 2746 | True | live]
(push) ; 21
; [else-branch: 2746 | True]
(pop) ; 21
; [eval] !(p1_20 && !except1_3)
; [eval] p1_20 && !except1_3
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2747 | True | live]
; [else-branch: 2747 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2747 | True]
; [eval] p2_20 && !except2_3
; [then-branch: 2748 | False | dead]
; [else-branch: 2748 | True | live]
(push) ; 22
; [else-branch: 2748 | True]
(pop) ; 22
; [eval] !(p2_20 && !except2_3)
; [eval] p2_20 && !except2_3
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2749 | True | live]
; [else-branch: 2749 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2749 | True]
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 2750 | !(p1_19@732@01) | live]
; [else-branch: 2750 | p1_19@732@01 | live]
(push) ; 24
; [then-branch: 2750 | !(p1_19@732@01)]
(assert (not p1_19@732@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2750 | p1_19@732@01]
(assert p1_19@732@01)
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_19@732@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2751 | p1_19@732@01 | dead]
; [else-branch: 2751 | !(p1_19@732@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 2751 | !(p1_19@732@01)]
(assert (not p1_19@732@01))
(pop) ; 23
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 2752 | !(p1_19@732@01) | live]
; [else-branch: 2752 | p1_19@732@01 | live]
(push) ; 24
; [then-branch: 2752 | !(p1_19@732@01)]
(assert (not p1_19@732@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2752 | p1_19@732@01]
(assert p1_19@732@01)
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p1_19@732@01))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_19@732@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2753 | !(p1_19@732@01) | live]
; [else-branch: 2753 | p1_19@732@01 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2753 | !(p1_19@732@01)]
(assert (not p1_19@732@01))
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 2754 | !(p2_19@733@01) | live]
; [else-branch: 2754 | p2_19@733@01 | live]
(push) ; 25
; [then-branch: 2754 | !(p2_19@733@01)]
(assert (not p2_19@733@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2754 | p2_19@733@01]
(assert p2_19@733@01)
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_19@733@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2755 | p2_19@733@01 | dead]
; [else-branch: 2755 | !(p2_19@733@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 2755 | !(p2_19@733@01)]
(assert (not p2_19@733@01))
(pop) ; 24
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 2756 | !(p2_19@733@01) | live]
; [else-branch: 2756 | p2_19@733@01 | live]
(push) ; 25
; [then-branch: 2756 | !(p2_19@733@01)]
(assert (not p2_19@733@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2756 | p2_19@733@01]
(assert p2_19@733@01)
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_19@733@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_19@733@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2757 | !(p2_19@733@01) | live]
; [else-branch: 2757 | p2_19@733@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2757 | !(p2_19@733@01)]
(assert (not p2_19@733@01))
; [exec]
; tmp_5 := new()
(declare-const tmp_5@734@01 $Ref)
(assert (not (= tmp_5@734@01 $Ref.null)))
(assert (not (= tmp_5@734@01 MyException_res_5_0@689@01)))
(assert (not (= tmp_5@734@01 c_0@668@01)))
(assert (not (= tmp_5@734@01 _cthread_161_0@661@01)))
(assert (not (= tmp_5@734@01 MyException_res_5@688@01)))
(assert (not (= tmp_5@734@01 b_3_0@667@01)))
(assert (not (= tmp_5@734@01 tmp_4@723@01)))
(assert (not (= tmp_5@734@01 error_3_0@679@01)))
(assert (not (= tmp_5@734@01 Container_valuep@731@01)))
(assert (not (= tmp_5@734@01 b_3@666@01)))
(assert (not (= tmp_5@734@01 error_3@678@01)))
(assert (not (= tmp_5@734@01 tmp_5@715@01)))
(assert (not (= tmp_5@734@01 _cthread_161@660@01)))
(assert (not (= tmp_5@734@01 Container_value@730@01)))
(assert (not (= tmp_5@734@01 c_0_0@669@01)))
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 2758 | !(p1_19@732@01) | live]
; [else-branch: 2758 | p1_19@732@01 | live]
(push) ; 26
; [then-branch: 2758 | !(p1_19@732@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 2758 | p1_19@732@01]
(assert p1_19@732@01)
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2759 | p1_19@732@01 | dead]
; [else-branch: 2759 | !(p1_19@732@01) | live]
(push) ; 25
; [else-branch: 2759 | !(p1_19@732@01)]
(pop) ; 25
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 2760 | !(p1_19@732@01) | live]
; [else-branch: 2760 | p1_19@732@01 | live]
(push) ; 26
; [then-branch: 2760 | !(p1_19@732@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 2760 | p1_19@732@01]
(assert p1_19@732@01)
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not p1_19@732@01))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2761 | !(p1_19@732@01) | live]
; [else-branch: 2761 | p1_19@732@01 | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2761 | !(p1_19@732@01)]
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 2762 | !(p2_19@733@01) | live]
; [else-branch: 2762 | p2_19@733@01 | live]
(push) ; 27
; [then-branch: 2762 | !(p2_19@733@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2762 | p2_19@733@01]
(assert p2_19@733@01)
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2763 | p2_19@733@01 | dead]
; [else-branch: 2763 | !(p2_19@733@01) | live]
(push) ; 26
; [else-branch: 2763 | !(p2_19@733@01)]
(pop) ; 26
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 2764 | !(p2_19@733@01) | live]
; [else-branch: 2764 | p2_19@733@01 | live]
(push) ; 27
; [then-branch: 2764 | !(p2_19@733@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2764 | p2_19@733@01]
(assert p2_19@733@01)
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_19@733@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2765 | !(p2_19@733@01) | live]
; [else-branch: 2765 | p2_19@733@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2765 | !(p2_19@733@01)]
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 2766 | !(p1_19@732@01) | live]
; [else-branch: 2766 | p1_19@732@01 | live]
(push) ; 28
; [then-branch: 2766 | !(p1_19@732@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 2766 | p1_19@732@01]
(assert p1_19@732@01)
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 2767 | p1_19@732@01 | dead]
; [else-branch: 2767 | !(p1_19@732@01) | live]
(push) ; 27
; [else-branch: 2767 | !(p1_19@732@01)]
(pop) ; 27
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 2768 | !(p1_19@732@01) | live]
; [else-branch: 2768 | p1_19@732@01 | live]
(push) ; 28
; [then-branch: 2768 | !(p1_19@732@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 2768 | p1_19@732@01]
(assert p1_19@732@01)
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not p1_19@732@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2769 | !(p1_19@732@01) | live]
; [else-branch: 2769 | p1_19@732@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2769 | !(p1_19@732@01)]
; [eval] p2_19 && !except2_3
(push) ; 28
; [then-branch: 2770 | !(p2_19@733@01) | live]
; [else-branch: 2770 | p2_19@733@01 | live]
(push) ; 29
; [then-branch: 2770 | !(p2_19@733@01)]
(pop) ; 29
(push) ; 29
; [else-branch: 2770 | p2_19@733@01]
(assert p2_19@733@01)
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 2771 | p2_19@733@01 | dead]
; [else-branch: 2771 | !(p2_19@733@01) | live]
(push) ; 28
; [else-branch: 2771 | !(p2_19@733@01)]
(pop) ; 28
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 28
; [then-branch: 2772 | !(p2_19@733@01) | live]
; [else-branch: 2772 | p2_19@733@01 | live]
(push) ; 29
; [then-branch: 2772 | !(p2_19@733@01)]
(pop) ; 29
(push) ; 29
; [else-branch: 2772 | p2_19@733@01]
(assert p2_19@733@01)
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not p2_19@733@01))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2773 | !(p2_19@733@01) | live]
; [else-branch: 2773 | p2_19@733@01 | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2773 | !(p2_19@733@01)]
; [eval] p1_19 && !except1_3
(push) ; 29
; [then-branch: 2774 | !(p1_19@732@01) | live]
; [else-branch: 2774 | p1_19@732@01 | live]
(push) ; 30
; [then-branch: 2774 | !(p1_19@732@01)]
(pop) ; 30
(push) ; 30
; [else-branch: 2774 | p1_19@732@01]
(assert p1_19@732@01)
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 2775 | p1_19@732@01 | dead]
; [else-branch: 2775 | !(p1_19@732@01) | live]
(push) ; 29
; [else-branch: 2775 | !(p1_19@732@01)]
(pop) ; 29
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 29
; [then-branch: 2776 | !(p1_19@732@01) | live]
; [else-branch: 2776 | p1_19@732@01 | live]
(push) ; 30
; [then-branch: 2776 | !(p1_19@732@01)]
(pop) ; 30
(push) ; 30
; [else-branch: 2776 | p1_19@732@01]
(assert p1_19@732@01)
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not p1_19@732@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2777 | !(p1_19@732@01) | live]
; [else-branch: 2777 | p1_19@732@01 | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2777 | !(p1_19@732@01)]
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 2778 | !(p2_19@733@01) | live]
; [else-branch: 2778 | p2_19@733@01 | live]
(push) ; 31
; [then-branch: 2778 | !(p2_19@733@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 2778 | p2_19@733@01]
(assert p2_19@733@01)
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 2779 | p2_19@733@01 | dead]
; [else-branch: 2779 | !(p2_19@733@01) | live]
(push) ; 30
; [else-branch: 2779 | !(p2_19@733@01)]
(pop) ; 30
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 2780 | !(p2_19@733@01) | live]
; [else-branch: 2780 | p2_19@733@01 | live]
(push) ; 31
; [then-branch: 2780 | !(p2_19@733@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 2780 | p2_19@733@01]
(assert p2_19@733@01)
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_19@733@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2781 | !(p2_19@733@01) | live]
; [else-branch: 2781 | p2_19@733@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2781 | !(p2_19@733@01)]
; [eval] p1_15 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2782 | p1_15@658@01 | live]
; [else-branch: 2782 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2782 | p1_15@658@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_15 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2783 | p2_15@659@01 | live]
; [else-branch: 2783 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2783 | p2_15@659@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2784 | p1_15@658@01 | live]
; [else-branch: 2784 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2784 | p1_15@658@01]
; [eval] _err == null
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2785 | True | live]
; [else-branch: 2785 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2785 | True]
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(push) ; 33
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@730@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@730@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 33
(pop) ; 33
; Joined path conditions
(push) ; 33
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@730@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@730@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 33
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@730@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@730@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 33
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2786 | p2_15@659@01 | live]
; [else-branch: 2786 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2786 | p2_15@659@01]
; [eval] _err_4 == null
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2787 | True | live]
; [else-branch: 2787 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2787 | True]
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(push) ; 35
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@731@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@731@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 35
(pop) ; 35
; Joined path conditions
(push) ; 35
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@731@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 35
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@731@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 35
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@731@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@731@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2788 | p1_15@658@01 | live]
; [else-branch: 2788 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2788 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
; [then-branch: 2789 | False | dead]
; [else-branch: 2789 | True | live]
(push) ; 36
; [else-branch: 2789 | True]
(push) ; 37
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2790 | p2_15@659@01 | live]
; [else-branch: 2790 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2790 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
; [then-branch: 2791 | False | dead]
; [else-branch: 2791 | True | live]
(push) ; 38
; [else-branch: 2791 | True]
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2792 | p1_15@658@01 | live]
; [else-branch: 2792 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2792 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 41
; [then-branch: 2793 | False | dead]
; [else-branch: 2793 | True | live]
(push) ; 42
; [else-branch: 2793 | True]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2794 | p2_15@659@01 | live]
; [else-branch: 2794 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2794 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 41
; [then-branch: 2795 | False | dead]
; [else-branch: 2795 | True | live]
(push) ; 42
; [else-branch: 2795 | True]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_15 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2796 | p1_15@658@01 | live]
; [else-branch: 2796 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2796 | p1_15@658@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 41
; [then-branch: 2797 | False | live]
; [else-branch: 2797 | True | live]
(push) ; 42
; [then-branch: 2797 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2797 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 43
; [then-branch: 2798 | False | live]
; [else-branch: 2798 | True | live]
(push) ; 44
; [then-branch: 2798 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2798 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 2799 | False | live]
; [else-branch: 2799 | True | live]
(push) ; 46
; [then-branch: 2799 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2799 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_15 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2800 | p2_15@659@01 | live]
; [else-branch: 2800 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2800 | p2_15@659@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false)
(push) ; 41
; [then-branch: 2801 | False | live]
; [else-branch: 2801 | True | live]
(push) ; 42
; [then-branch: 2801 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2801 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false)
(push) ; 43
; [then-branch: 2802 | False | live]
; [else-branch: 2802 | True | live]
(push) ; 44
; [then-branch: 2802 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2802 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 2803 | False | live]
; [else-branch: 2803 | True | live]
(push) ; 46
; [then-branch: 2803 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2803 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p2_15 && !except2_3)
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 2804 | !(p2_15@659@01) | live]
; [else-branch: 2804 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 2804 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2804 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 2805 | !(p2_15@659@01) | dead]
; [else-branch: 2805 | p2_15@659@01 | live]
(push) ; 20
; [else-branch: 2805 | p2_15@659@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 2806 | !(p1_15@658@01) | live]
; [else-branch: 2806 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 2806 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2806 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 2807 | !(p1_15@658@01) | dead]
; [else-branch: 2807 | p1_15@658@01 | live]
(push) ; 19
; [else-branch: 2807 | p1_15@658@01]
(pop) ; 19
(pop) ; 18
; [eval] !(p2_17 && !except2_3)
; [eval] p2_17 && !except2_3
(push) ; 18
; [then-branch: 2808 | !(p2_17@729@01) | live]
; [else-branch: 2808 | p2_17@729@01 | live]
(push) ; 19
; [then-branch: 2808 | !(p2_17@729@01)]
(assert (not p2_17@729@01))
(pop) ; 19
(push) ; 19
; [else-branch: 2808 | p2_17@729@01]
; [eval] !except2_3
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 2809 | !(p2_17@729@01) | dead]
; [else-branch: 2809 | p2_17@729@01 | live]
(push) ; 18
; [else-branch: 2809 | p2_17@729@01]
(pop) ; 18
(pop) ; 17
; [eval] !(p1_17 && !except1_3)
; [eval] p1_17 && !except1_3
(push) ; 17
; [then-branch: 2810 | !(p1_17@728@01) | live]
; [else-branch: 2810 | p1_17@728@01 | live]
(push) ; 18
; [then-branch: 2810 | !(p1_17@728@01)]
(assert (not p1_17@728@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2810 | p1_17@728@01]
; [eval] !except1_3
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 2811 | !(p1_17@728@01) | dead]
; [else-branch: 2811 | p1_17@728@01 | live]
(push) ; 17
; [else-branch: 2811 | p1_17@728@01]
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
; [eval] !p2_17
(push) ; 14
(set-option :timeout 10)
(assert (not p2_17@729@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2812 | !(p2_17@729@01) | dead]
; [else-branch: 2812 | p2_17@729@01 | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2812 | p2_17@729@01]
(assert p2_17@729@01)
(pop) ; 14
(pop) ; 13
; [eval] !p1_17
(push) ; 13
(set-option :timeout 10)
(assert (not p1_17@728@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2813 | !(p1_17@728@01) | dead]
; [else-branch: 2813 | p1_17@728@01 | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 2813 | p1_17@728@01]
(assert p1_17@728@01)
(pop) ; 13
(pop) ; 12
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 2814 | !(p2_16@720@01) | live]
; [else-branch: 2814 | p2_16@720@01 | live]
(push) ; 13
; [then-branch: 2814 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2814 | p2_16@720@01]
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 2815 | !(p2_16@720@01) | dead]
; [else-branch: 2815 | p2_16@720@01 | live]
(push) ; 12
; [else-branch: 2815 | p2_16@720@01]
(pop) ; 12
(pop) ; 11
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 11
; [then-branch: 2816 | !(p1_16@719@01) | live]
; [else-branch: 2816 | p1_16@719@01 | live]
(push) ; 12
; [then-branch: 2816 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2816 | p1_16@719@01]
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 2817 | !(p1_16@719@01) | dead]
; [else-branch: 2817 | p1_16@719@01 | live]
(push) ; 11
; [else-branch: 2817 | p1_16@719@01]
(pop) ; 11
(pop) ; 10
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 10
; [then-branch: 2818 | !(p2_16@720@01) | live]
; [else-branch: 2818 | p2_16@720@01 | live]
(push) ; 11
; [then-branch: 2818 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2818 | p2_16@720@01]
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 2819 | !(p2_16@720@01) | dead]
; [else-branch: 2819 | p2_16@720@01 | live]
(push) ; 10
; [else-branch: 2819 | p2_16@720@01]
(pop) ; 10
(pop) ; 9
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 2820 | !(p1_16@719@01) | live]
; [else-branch: 2820 | p1_16@719@01 | live]
(push) ; 10
; [then-branch: 2820 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2820 | p1_16@719@01]
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 2821 | !(p1_16@719@01) | dead]
; [else-branch: 2821 | p1_16@719@01 | live]
(push) ; 9
; [else-branch: 2821 | p1_16@719@01]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 2699 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 8
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 8
; [then-branch: 2822 | !(p2_16@720@01) | live]
; [else-branch: 2822 | p2_16@720@01 | live]
(push) ; 9
; [then-branch: 2822 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2822 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_16@720@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_16@720@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2823 | !(p2_16@720@01) | live]
; [else-branch: 2823 | p2_16@720@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2823 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 2824 | !(p1_16@719@01) | live]
; [else-branch: 2824 | p1_16@719@01 | live]
(push) ; 10
; [then-branch: 2824 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2824 | p1_16@719@01]
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_16@719@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2825 | p1_16@719@01 | live]
; [else-branch: 2825 | !(p1_16@719@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2825 | p1_16@719@01]
; [exec]
; inhale typeof(MyException_res_4) == MyException()
(declare-const $t@735@01 $Snap)
(assert (= $t@735@01 $Snap.unit))
; [eval] typeof(MyException_res_4) == MyException()
; [eval] typeof(MyException_res_4)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_4@723@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_16 && !except2_3
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2826 | !(p2_16@720@01) | live]
; [else-branch: 2826 | p2_16@720@01 | live]
(push) ; 11
; [then-branch: 2826 | !(p2_16@720@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 2826 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 2827 | p2_16@720@01 | dead]
; [else-branch: 2827 | !(p2_16@720@01) | live]
(push) ; 10
; [else-branch: 2827 | !(p2_16@720@01)]
(pop) ; 10
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 10
; [then-branch: 2828 | !(p2_16@720@01) | live]
; [else-branch: 2828 | p2_16@720@01 | live]
(push) ; 11
; [then-branch: 2828 | !(p2_16@720@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 2828 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_16@720@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2829 | !(p2_16@720@01) | live]
; [else-branch: 2829 | p2_16@720@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2829 | !(p2_16@720@01)]
; [eval] p1_16 && !except1_3
(push) ; 11
; [then-branch: 2830 | !(p1_16@719@01) | live]
; [else-branch: 2830 | p1_16@719@01 | live]
(push) ; 12
; [then-branch: 2830 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2830 | p1_16@719@01]
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_16@719@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2831 | p1_16@719@01 | live]
; [else-branch: 2831 | !(p1_16@719@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2831 | p1_16@719@01]
; [exec]
; _err := MyException_res_4
; [exec]
; except1_3 := true
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 2832 | !(p2_16@720@01) | live]
; [else-branch: 2832 | p2_16@720@01 | live]
(push) ; 13
; [then-branch: 2832 | !(p2_16@720@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2832 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 2833 | p2_16@720@01 | dead]
; [else-branch: 2833 | !(p2_16@720@01) | live]
(push) ; 12
; [else-branch: 2833 | !(p2_16@720@01)]
(pop) ; 12
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 2834 | !(p2_16@720@01) | live]
; [else-branch: 2834 | p2_16@720@01 | live]
(push) ; 13
; [then-branch: 2834 | !(p2_16@720@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2834 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_16@720@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2835 | !(p2_16@720@01) | live]
; [else-branch: 2835 | p2_16@720@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2835 | !(p2_16@720@01)]
; [exec]
; thisexcept1_3 := except1_3 && !bypass1_3
; [eval] except1_3 && !bypass1_3
(push) ; 13
; [then-branch: 2836 | False | live]
; [else-branch: 2836 | True | live]
(push) ; 14
; [then-branch: 2836 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2836 | True]
; [eval] !bypass1_3
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_3@736@01 Bool)
(assert (= thisexcept1_3@736@01 (not bypass1_3@717@01)))
; [exec]
; thisexcept2_3 := except2_3 && !bypass2_3
; [eval] except2_3 && !bypass2_3
; [exec]
; p1_17 := p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
; [eval] p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 2837 | !(p1_15@658@01) | live]
; [else-branch: 2837 | p1_15@658@01 | live]
(push) ; 14
; [then-branch: 2837 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2837 | p1_15@658@01]
(push) ; 15
; [then-branch: 2838 | !(thisexcept1_3@736@01) | live]
; [else-branch: 2838 | thisexcept1_3@736@01 | live]
(push) ; 16
; [then-branch: 2838 | !(thisexcept1_3@736@01)]
(assert (not thisexcept1_3@736@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2838 | thisexcept1_3@736@01]
(assert thisexcept1_3@736@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_3@736@01 (not thisexcept1_3@736@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=> p1_15@658@01 (or thisexcept1_3@736@01 (not thisexcept1_3@736@01))))
(declare-const p1_17@737@01 Bool)
(assert (=
  p1_17@737@01
  (and
    p1_15@658@01
    (and
      thisexcept1_3@736@01
      (issubtype<Bool> (typeof<PyType> tmp_4@723@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_17 := p2_15 &&
;   (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
; [eval] p2_15 && (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
(push) ; 13
; [then-branch: 2839 | !(p2_15@659@01) | live]
; [else-branch: 2839 | p2_15@659@01 | live]
(push) ; 14
; [then-branch: 2839 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2839 | p2_15@659@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_17@737@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not p1_17@737@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2840 | p1_17@737@01 | live]
; [else-branch: 2840 | !(p1_17@737@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2840 | p1_17@737@01]
(assert p1_17@737@01)
; [exec]
; except1_3 := false
; [then-branch: 2841 | False | dead]
; [else-branch: 2841 | True | live]
(push) ; 14
; [else-branch: 2841 | True]
(pop) ; 14
; [eval] !p2_17
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2842 | True | live]
; [else-branch: 2842 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2842 | True]
; [exec]
; p1_18 := p1_17 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_17 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 15
; [then-branch: 2843 | !(p1_17@737@01) | live]
; [else-branch: 2843 | p1_17@737@01 | live]
(push) ; 16
; [then-branch: 2843 | !(p1_17@737@01)]
(assert (not p1_17@737@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2843 | p1_17@737@01]
; [eval] !except1_3
(push) ; 17
; [then-branch: 2844 | False | live]
; [else-branch: 2844 | True | live]
(push) ; 18
; [then-branch: 2844 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2844 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p1_17@737@01 (not p1_17@737@01)))
; [exec]
; p2_18 := p2_17 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_17 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_6 := p1_17 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_17 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 15
; [then-branch: 2845 | !(p1_17@737@01) | live]
; [else-branch: 2845 | p1_17@737@01 | live]
(push) ; 16
; [then-branch: 2845 | !(p1_17@737@01)]
(assert (not p1_17@737@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2845 | p1_17@737@01]
; [eval] !except1_3
(push) ; 17
; [then-branch: 2846 | False | live]
; [else-branch: 2846 | True | live]
(push) ; 18
; [then-branch: 2846 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2846 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p4_6 := p2_17 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_17 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_18 && !except1_3
; [then-branch: 2847 | False | dead]
; [else-branch: 2847 | True | live]
(push) ; 15
; [else-branch: 2847 | True]
(pop) ; 15
; [eval] !(p1_18 && !except1_3)
; [eval] p1_18 && !except1_3
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2848 | True | live]
; [else-branch: 2848 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2848 | True]
; [eval] p2_18 && !except2_3
; [then-branch: 2849 | False | dead]
; [else-branch: 2849 | True | live]
(push) ; 16
; [else-branch: 2849 | True]
(pop) ; 16
; [eval] !(p2_18 && !except2_3)
; [eval] p2_18 && !except2_3
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2850 | True | live]
; [else-branch: 2850 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2850 | True]
; [eval] p1_17 && !except1_3
(push) ; 17
; [then-branch: 2851 | !(p1_17@737@01) | live]
; [else-branch: 2851 | p1_17@737@01 | live]
(push) ; 18
; [then-branch: 2851 | !(p1_17@737@01)]
(assert (not p1_17@737@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2851 | p1_17@737@01]
; [eval] !except1_3
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_17@737@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2852 | p1_17@737@01 | live]
; [else-branch: 2852 | !(p1_17@737@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2852 | p1_17@737@01]
; [exec]
; c_4.Container_value := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 18
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 18
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_value@738@01 $Ref)
(assert (= Container_value@738@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p2_17 && !except2_3
; [then-branch: 2853 | False | dead]
; [else-branch: 2853 | True | live]
(push) ; 18
; [else-branch: 2853 | True]
(pop) ; 18
; [eval] !(p2_17 && !except2_3)
; [eval] p2_17 && !except2_3
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2854 | True | live]
; [else-branch: 2854 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2854 | True]
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 2855 | !(p1_15@658@01) | live]
; [else-branch: 2855 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 2855 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2855 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2856 | p1_15@658@01 | live]
; [else-branch: 2856 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2856 | p1_15@658@01]
; [exec]
; _err := null
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 2857 | !(p2_15@659@01) | live]
; [else-branch: 2857 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 2857 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2857 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2858 | p2_15@659@01 | live]
; [else-branch: 2858 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2858 | p2_15@659@01]
; [exec]
; _err_4 := null
; [exec]
; p1_19 := p1_15 && !thisexcept1_3
; [eval] p1_15 && !thisexcept1_3
(push) ; 21
; [then-branch: 2859 | !(p1_15@658@01) | live]
; [else-branch: 2859 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 2859 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2859 | p1_15@658@01]
; [eval] !thisexcept1_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(declare-const p1_19@739@01 Bool)
(assert (= p1_19@739@01 (and p1_15@658@01 (not thisexcept1_3@736@01))))
; [exec]
; p2_19 := p2_15 && !thisexcept2_3
; [eval] p2_15 && !thisexcept2_3
(push) ; 21
; [then-branch: 2860 | !(p2_15@659@01) | live]
; [else-branch: 2860 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 2860 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2860 | p2_15@659@01]
; [eval] !thisexcept2_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p1_20 := p1_19 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_19 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 2861 | !(p1_19@739@01) | live]
; [else-branch: 2861 | p1_19@739@01 | live]
(push) ; 22
; [then-branch: 2861 | !(p1_19@739@01)]
(assert (not p1_19@739@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2861 | p1_19@739@01]
(assert p1_19@739@01)
; [eval] !except1_3
(push) ; 23
; [then-branch: 2862 | False | live]
; [else-branch: 2862 | True | live]
(push) ; 24
; [then-branch: 2862 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2862 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or p1_19@739@01 (not p1_19@739@01)))
; [exec]
; p2_20 := p2_19 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_19 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 2863 | !(p2_15@659@01) | live]
; [else-branch: 2863 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 2863 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2863 | p2_15@659@01]
; [eval] !except2_3
(push) ; 23
; [then-branch: 2864 | False | live]
; [else-branch: 2864 | True | live]
(push) ; 24
; [then-branch: 2864 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2864 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p3_7 := p1_19 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_19 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 2865 | !(p1_19@739@01) | live]
; [else-branch: 2865 | p1_19@739@01 | live]
(push) ; 22
; [then-branch: 2865 | !(p1_19@739@01)]
(assert (not p1_19@739@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2865 | p1_19@739@01]
(assert p1_19@739@01)
; [eval] !except1_3
(push) ; 23
; [then-branch: 2866 | False | live]
; [else-branch: 2866 | True | live]
(push) ; 24
; [then-branch: 2866 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2866 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p4_7 := p2_19 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_19 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 2867 | !(p2_15@659@01) | live]
; [else-branch: 2867 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 2867 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2867 | p2_15@659@01]
; [eval] !except2_3
(push) ; 23
; [then-branch: 2868 | False | live]
; [else-branch: 2868 | True | live]
(push) ; 24
; [then-branch: 2868 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2868 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [eval] p1_20 && !except1_3
; [then-branch: 2869 | False | dead]
; [else-branch: 2869 | True | live]
(push) ; 21
; [else-branch: 2869 | True]
(pop) ; 21
; [eval] !(p1_20 && !except1_3)
; [eval] p1_20 && !except1_3
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2870 | True | live]
; [else-branch: 2870 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2870 | True]
; [eval] p2_20 && !except2_3
; [then-branch: 2871 | False | dead]
; [else-branch: 2871 | True | live]
(push) ; 22
; [else-branch: 2871 | True]
(pop) ; 22
; [eval] !(p2_20 && !except2_3)
; [eval] p2_20 && !except2_3
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2872 | True | live]
; [else-branch: 2872 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2872 | True]
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 2873 | !(p1_19@739@01) | live]
; [else-branch: 2873 | p1_19@739@01 | live]
(push) ; 24
; [then-branch: 2873 | !(p1_19@739@01)]
(assert (not p1_19@739@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2873 | p1_19@739@01]
(assert p1_19@739@01)
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_19@739@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2874 | p1_19@739@01 | dead]
; [else-branch: 2874 | !(p1_19@739@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 2874 | !(p1_19@739@01)]
(assert (not p1_19@739@01))
(pop) ; 23
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 2875 | !(p1_19@739@01) | live]
; [else-branch: 2875 | p1_19@739@01 | live]
(push) ; 24
; [then-branch: 2875 | !(p1_19@739@01)]
(assert (not p1_19@739@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2875 | p1_19@739@01]
(assert p1_19@739@01)
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p1_19@739@01))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_19@739@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2876 | !(p1_19@739@01) | live]
; [else-branch: 2876 | p1_19@739@01 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2876 | !(p1_19@739@01)]
(assert (not p1_19@739@01))
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 2877 | !(p2_15@659@01) | live]
; [else-branch: 2877 | p2_15@659@01 | live]
(push) ; 25
; [then-branch: 2877 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2877 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2878 | p2_15@659@01 | live]
; [else-branch: 2878 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2878 | p2_15@659@01]
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 25
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 25
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_valuep@740@01 $Ref)
(assert (= Container_valuep@740@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; tmp_5 := new()
(declare-const tmp_5@741@01 $Ref)
(assert (not (= tmp_5@741@01 $Ref.null)))
(assert (not (= tmp_5@741@01 MyException_res_5_0@689@01)))
(assert (not (= tmp_5@741@01 c_0@668@01)))
(assert (not (= tmp_5@741@01 _cthread_161_0@661@01)))
(assert (not (= tmp_5@741@01 MyException_res_5@688@01)))
(assert (not (= tmp_5@741@01 b_3_0@667@01)))
(assert (not (= tmp_5@741@01 tmp_4@723@01)))
(assert (not (= tmp_5@741@01 error_3_0@679@01)))
(assert (not (= tmp_5@741@01 Container_value@738@01)))
(assert (not (= tmp_5@741@01 MyException_res_4_0@687@01)))
(assert (not (= tmp_5@741@01 b_3@666@01)))
(assert (not (= tmp_5@741@01 error_3@678@01)))
(assert (not (= tmp_5@741@01 Container_valuep@740@01)))
(assert (not (= tmp_5@741@01 tmp_5@715@01)))
(assert (not (= tmp_5@741@01 _cthread_161@660@01)))
(assert (not (= tmp_5@741@01 c_0_0@669@01)))
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 2879 | !(p1_19@739@01) | live]
; [else-branch: 2879 | p1_19@739@01 | live]
(push) ; 26
; [then-branch: 2879 | !(p1_19@739@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 2879 | p1_19@739@01]
(assert p1_19@739@01)
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2880 | p1_19@739@01 | dead]
; [else-branch: 2880 | !(p1_19@739@01) | live]
(push) ; 25
; [else-branch: 2880 | !(p1_19@739@01)]
(pop) ; 25
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 2881 | !(p1_19@739@01) | live]
; [else-branch: 2881 | p1_19@739@01 | live]
(push) ; 26
; [then-branch: 2881 | !(p1_19@739@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 2881 | p1_19@739@01]
(assert p1_19@739@01)
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not p1_19@739@01))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2882 | !(p1_19@739@01) | live]
; [else-branch: 2882 | p1_19@739@01 | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2882 | !(p1_19@739@01)]
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 2883 | !(p2_15@659@01) | live]
; [else-branch: 2883 | p2_15@659@01 | live]
(push) ; 27
; [then-branch: 2883 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2883 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2884 | p2_15@659@01 | live]
; [else-branch: 2884 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2884 | p2_15@659@01]
; [exec]
; MyException_res_5_0 := tmp_5
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 2885 | !(p1_19@739@01) | live]
; [else-branch: 2885 | p1_19@739@01 | live]
(push) ; 28
; [then-branch: 2885 | !(p1_19@739@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 2885 | p1_19@739@01]
(assert p1_19@739@01)
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 2886 | p1_19@739@01 | dead]
; [else-branch: 2886 | !(p1_19@739@01) | live]
(push) ; 27
; [else-branch: 2886 | !(p1_19@739@01)]
(pop) ; 27
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 2887 | !(p1_19@739@01) | live]
; [else-branch: 2887 | p1_19@739@01 | live]
(push) ; 28
; [then-branch: 2887 | !(p1_19@739@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 2887 | p1_19@739@01]
(assert p1_19@739@01)
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not p1_19@739@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2888 | !(p1_19@739@01) | live]
; [else-branch: 2888 | p1_19@739@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2888 | !(p1_19@739@01)]
; [eval] p2_19 && !except2_3
(push) ; 28
; [then-branch: 2889 | !(p2_15@659@01) | live]
; [else-branch: 2889 | p2_15@659@01 | live]
(push) ; 29
; [then-branch: 2889 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 29
(push) ; 29
; [else-branch: 2889 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2890 | p2_15@659@01 | live]
; [else-branch: 2890 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2890 | p2_15@659@01]
; [exec]
; inhale typeof(MyException_res_5_0) == MyException()
(declare-const $t@742@01 $Snap)
(assert (= $t@742@01 $Snap.unit))
; [eval] typeof(MyException_res_5_0) == MyException()
; [eval] typeof(MyException_res_5_0)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_5@741@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_19 && !except1_3
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2891 | !(p1_19@739@01) | live]
; [else-branch: 2891 | p1_19@739@01 | live]
(push) ; 30
; [then-branch: 2891 | !(p1_19@739@01)]
(pop) ; 30
(push) ; 30
; [else-branch: 2891 | p1_19@739@01]
(assert p1_19@739@01)
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 2892 | p1_19@739@01 | dead]
; [else-branch: 2892 | !(p1_19@739@01) | live]
(push) ; 29
; [else-branch: 2892 | !(p1_19@739@01)]
(pop) ; 29
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 29
; [then-branch: 2893 | !(p1_19@739@01) | live]
; [else-branch: 2893 | p1_19@739@01 | live]
(push) ; 30
; [then-branch: 2893 | !(p1_19@739@01)]
(pop) ; 30
(push) ; 30
; [else-branch: 2893 | p1_19@739@01]
(assert p1_19@739@01)
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not p1_19@739@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2894 | !(p1_19@739@01) | live]
; [else-branch: 2894 | p1_19@739@01 | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2894 | !(p1_19@739@01)]
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 2895 | !(p2_15@659@01) | live]
; [else-branch: 2895 | p2_15@659@01 | live]
(push) ; 31
; [then-branch: 2895 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2895 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2896 | p2_15@659@01 | live]
; [else-branch: 2896 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2896 | p2_15@659@01]
; [exec]
; _err_4 := MyException_res_5_0
; [exec]
; except2_3 := true
; [eval] p1_15 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2897 | p1_15@658@01 | live]
; [else-branch: 2897 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2897 | p1_15@658@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_15 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2898 | p2_15@659@01 | live]
; [else-branch: 2898 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2898 | p2_15@659@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2899 | p1_15@658@01 | live]
; [else-branch: 2899 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2899 | p1_15@658@01]
; [eval] _err == null
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2900 | True | live]
; [else-branch: 2900 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2900 | True]
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(push) ; 33
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@738@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@738@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 33
(pop) ; 33
; Joined path conditions
(push) ; 33
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@738@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@738@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 33
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@738@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@738@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 33
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2901 | p2_15@659@01 | live]
; [else-branch: 2901 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2901 | p2_15@659@01]
; [eval] _err_4 == null
; [then-branch: 2902 | tmp_5@741@01 == Null | dead]
; [else-branch: 2902 | tmp_5@741@01 != Null | live]
(push) ; 34
; [else-branch: 2902 | tmp_5@741@01 != Null]
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2903 | p1_15@658@01 | live]
; [else-branch: 2903 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2903 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
; [then-branch: 2904 | False | dead]
; [else-branch: 2904 | True | live]
(push) ; 36
; [else-branch: 2904 | True]
(push) ; 37
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2905 | p2_15@659@01 | live]
; [else-branch: 2905 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2905 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 38
; [then-branch: 2906 | tmp_5@741@01 == Null | live]
; [else-branch: 2906 | tmp_5@741@01 != Null | live]
(push) ; 39
; [then-branch: 2906 | tmp_5@741@01 == Null]
(assert (= tmp_5@741@01 $Ref.null))
(pop) ; 39
(push) ; 39
; [else-branch: 2906 | tmp_5@741@01 != Null]
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_5@741@01 $Ref.null)) (= tmp_5@741@01 $Ref.null)))
(push) ; 38
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_5@741@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_5@741@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_5@741@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_5@741@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2907 | tmp_5@741@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@741@01), MyException[PyType]) | live]
; [else-branch: 2907 | !(tmp_5@741@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@741@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2907 | tmp_5@741@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@741@01), MyException[PyType])]
(assert (and
  (not (= tmp_5@741@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_5@741@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(push) ; 39
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@740@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@740@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 39
(pop) ; 39
; Joined path conditions
(push) ; 39
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@740@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@740@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(push) ; 39
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@740@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@740@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2908 | p1_15@658@01 | live]
; [else-branch: 2908 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2908 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 41
; [then-branch: 2909 | False | dead]
; [else-branch: 2909 | True | live]
(push) ; 42
; [else-branch: 2909 | True]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2910 | p2_15@659@01 | live]
; [else-branch: 2910 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2910 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (= tmp_5@741@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2911 | tmp_5@741@01 != Null | live]
; [else-branch: 2911 | tmp_5@741@01 == Null | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2911 | tmp_5@741@01 != Null]
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  (and p2_15@659@01 (not (= tmp_5@741@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_5@741@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_15@659@01 (not (= tmp_5@741@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_5@741@01) (as MyException<PyType>  PyType))))
; [eval] p1_15 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2912 | p1_15@658@01 | live]
; [else-branch: 2912 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2912 | p1_15@658@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 41
; [then-branch: 2913 | False | live]
; [else-branch: 2913 | True | live]
(push) ; 42
; [then-branch: 2913 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2913 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 43
; [then-branch: 2914 | False | live]
; [else-branch: 2914 | True | live]
(push) ; 44
; [then-branch: 2914 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2914 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 2915 | False | live]
; [else-branch: 2915 | True | live]
(push) ; 46
; [then-branch: 2915 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2915 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_15 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2916 | p2_15@659@01 | live]
; [else-branch: 2916 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2916 | p2_15@659@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false)
(push) ; 41
; [then-branch: 2917 | False | live]
; [else-branch: 2917 | True | live]
(push) ; 42
; [then-branch: 2917 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2917 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false)
(push) ; 43
; [then-branch: 2918 | False | live]
; [else-branch: 2918 | True | live]
(push) ; 44
; [then-branch: 2918 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2918 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 2919 | False | live]
; [else-branch: 2919 | True | live]
(push) ; 46
; [then-branch: 2919 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2919 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 2920 | !(p2_15@659@01) | live]
; [else-branch: 2920 | p2_15@659@01 | live]
(push) ; 31
; [then-branch: 2920 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2920 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 2921 | !(p2_15@659@01) | dead]
; [else-branch: 2921 | p2_15@659@01 | live]
(push) ; 30
; [else-branch: 2921 | p2_15@659@01]
(pop) ; 30
(pop) ; 29
(pop) ; 28
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 28
; [then-branch: 2922 | !(p2_15@659@01) | live]
; [else-branch: 2922 | p2_15@659@01 | live]
(push) ; 29
; [then-branch: 2922 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 29
(push) ; 29
; [else-branch: 2922 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 2923 | !(p2_15@659@01) | dead]
; [else-branch: 2923 | p2_15@659@01 | live]
(push) ; 28
; [else-branch: 2923 | p2_15@659@01]
(pop) ; 28
(pop) ; 27
(pop) ; 26
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 2924 | !(p2_15@659@01) | live]
; [else-branch: 2924 | p2_15@659@01 | live]
(push) ; 27
; [then-branch: 2924 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2924 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2925 | !(p2_15@659@01) | dead]
; [else-branch: 2925 | p2_15@659@01 | live]
(push) ; 26
; [else-branch: 2925 | p2_15@659@01]
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 2926 | !(p2_15@659@01) | live]
; [else-branch: 2926 | p2_15@659@01 | live]
(push) ; 25
; [then-branch: 2926 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2926 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 2927 | !(p2_15@659@01) | dead]
; [else-branch: 2927 | p2_15@659@01 | live]
(push) ; 24
; [else-branch: 2927 | p2_15@659@01]
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p2_15 && !except2_3)
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 2928 | !(p2_15@659@01) | live]
; [else-branch: 2928 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 2928 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2928 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 2929 | !(p2_15@659@01) | dead]
; [else-branch: 2929 | p2_15@659@01 | live]
(push) ; 20
; [else-branch: 2929 | p2_15@659@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 2930 | !(p1_15@658@01) | live]
; [else-branch: 2930 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 2930 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2930 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 2931 | !(p1_15@658@01) | dead]
; [else-branch: 2931 | p1_15@658@01 | live]
(push) ; 19
; [else-branch: 2931 | p1_15@658@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !(p1_17 && !except1_3)
; [eval] p1_17 && !except1_3
(push) ; 17
; [then-branch: 2932 | !(p1_17@737@01) | live]
; [else-branch: 2932 | p1_17@737@01 | live]
(push) ; 18
; [then-branch: 2932 | !(p1_17@737@01)]
(assert (not p1_17@737@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2932 | p1_17@737@01]
; [eval] !except1_3
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 2933 | !(p1_17@737@01) | dead]
; [else-branch: 2933 | p1_17@737@01 | live]
(push) ; 17
; [else-branch: 2933 | p1_17@737@01]
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !p1_17
(push) ; 13
(set-option :timeout 10)
(assert (not p1_17@737@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2934 | !(p1_17@737@01) | dead]
; [else-branch: 2934 | p1_17@737@01 | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 2934 | p1_17@737@01]
(assert p1_17@737@01)
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 11
; [then-branch: 2935 | !(p1_16@719@01) | live]
; [else-branch: 2935 | p1_16@719@01 | live]
(push) ; 12
; [then-branch: 2935 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2935 | p1_16@719@01]
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 2936 | !(p1_16@719@01) | dead]
; [else-branch: 2936 | p1_16@719@01 | live]
(push) ; 11
; [else-branch: 2936 | p1_16@719@01]
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 2937 | !(p1_16@719@01) | live]
; [else-branch: 2937 | p1_16@719@01 | live]
(push) ; 10
; [then-branch: 2937 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2937 | p1_16@719@01]
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 2938 | !(p1_16@719@01) | dead]
; [else-branch: 2938 | p1_16@719@01 | live]
(push) ; 9
; [else-branch: 2938 | p1_16@719@01]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 2823 | p2_16@720@01]
(assert p2_16@720@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 2697 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 7
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 7
; [then-branch: 2939 | !(p1_16@719@01) | live]
; [else-branch: 2939 | p1_16@719@01 | live]
(push) ; 8
; [then-branch: 2939 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2939 | p1_16@719@01]
(assert p1_16@719@01)
; [eval] !except1_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_16@719@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_16@719@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2940 | !(p1_16@719@01) | live]
; [else-branch: 2940 | p1_16@719@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2940 | !(p1_16@719@01)]
(assert (not p1_16@719@01))
; [eval] p2_16 && !except2_3
(push) ; 8
; [then-branch: 2941 | !(p2_16@720@01) | live]
; [else-branch: 2941 | p2_16@720@01 | live]
(push) ; 9
; [then-branch: 2941 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2941 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_16@720@01 (not p2_16@720@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_16@720@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_16@720@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2942 | p2_16@720@01 | live]
; [else-branch: 2942 | !(p2_16@720@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2942 | p2_16@720@01]
(assert p2_16@720@01)
; [exec]
; MyException_res_4_0 := tmp_4
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 2943 | !(p1_16@719@01) | live]
; [else-branch: 2943 | p1_16@719@01 | live]
(push) ; 10
; [then-branch: 2943 | !(p1_16@719@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 2943 | p1_16@719@01]
(assert p1_16@719@01)
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 2944 | p1_16@719@01 | dead]
; [else-branch: 2944 | !(p1_16@719@01) | live]
(push) ; 9
; [else-branch: 2944 | !(p1_16@719@01)]
(pop) ; 9
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 2945 | !(p1_16@719@01) | live]
; [else-branch: 2945 | p1_16@719@01 | live]
(push) ; 10
; [then-branch: 2945 | !(p1_16@719@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 2945 | p1_16@719@01]
(assert p1_16@719@01)
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_16@719@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2946 | !(p1_16@719@01) | live]
; [else-branch: 2946 | p1_16@719@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2946 | !(p1_16@719@01)]
; [eval] p2_16 && !except2_3
(push) ; 10
; [then-branch: 2947 | !(p2_16@720@01) | live]
; [else-branch: 2947 | p2_16@720@01 | live]
(push) ; 11
; [then-branch: 2947 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2947 | p2_16@720@01]
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_16@720@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2948 | p2_16@720@01 | live]
; [else-branch: 2948 | !(p2_16@720@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2948 | p2_16@720@01]
; [exec]
; inhale typeof(MyException_res_4_0) == MyException()
(declare-const $t@743@01 $Snap)
(assert (= $t@743@01 $Snap.unit))
; [eval] typeof(MyException_res_4_0) == MyException()
; [eval] typeof(MyException_res_4_0)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_4@723@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_16 && !except1_3
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2949 | !(p1_16@719@01) | live]
; [else-branch: 2949 | p1_16@719@01 | live]
(push) ; 12
; [then-branch: 2949 | !(p1_16@719@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 2949 | p1_16@719@01]
(assert p1_16@719@01)
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 2950 | p1_16@719@01 | dead]
; [else-branch: 2950 | !(p1_16@719@01) | live]
(push) ; 11
; [else-branch: 2950 | !(p1_16@719@01)]
(pop) ; 11
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 11
; [then-branch: 2951 | !(p1_16@719@01) | live]
; [else-branch: 2951 | p1_16@719@01 | live]
(push) ; 12
; [then-branch: 2951 | !(p1_16@719@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 2951 | p1_16@719@01]
(assert p1_16@719@01)
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p1_16@719@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2952 | !(p1_16@719@01) | live]
; [else-branch: 2952 | p1_16@719@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2952 | !(p1_16@719@01)]
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 2953 | !(p2_16@720@01) | live]
; [else-branch: 2953 | p2_16@720@01 | live]
(push) ; 13
; [then-branch: 2953 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2953 | p2_16@720@01]
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_16@720@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2954 | p2_16@720@01 | live]
; [else-branch: 2954 | !(p2_16@720@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2954 | p2_16@720@01]
; [exec]
; _err_4 := MyException_res_4_0
; [exec]
; except2_3 := true
; [exec]
; thisexcept1_3 := except1_3 && !bypass1_3
; [eval] except1_3 && !bypass1_3
; [exec]
; thisexcept2_3 := except2_3 && !bypass2_3
; [eval] except2_3 && !bypass2_3
(push) ; 13
; [then-branch: 2955 | False | live]
; [else-branch: 2955 | True | live]
(push) ; 14
; [then-branch: 2955 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2955 | True]
; [eval] !bypass2_3
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_3@744@01 Bool)
(assert (= thisexcept2_3@744@01 (not bypass2_3@718@01)))
; [exec]
; p1_17 := p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
; [eval] p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 2956 | !(p1_15@658@01) | live]
; [else-branch: 2956 | p1_15@658@01 | live]
(push) ; 14
; [then-branch: 2956 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2956 | p1_15@658@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p2_17 := p2_15 &&
;   (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
; [eval] p2_15 && (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
(push) ; 13
; [then-branch: 2957 | !(p2_15@659@01) | live]
; [else-branch: 2957 | p2_15@659@01 | live]
(push) ; 14
; [then-branch: 2957 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2957 | p2_15@659@01]
(push) ; 15
; [then-branch: 2958 | !(thisexcept2_3@744@01) | live]
; [else-branch: 2958 | thisexcept2_3@744@01 | live]
(push) ; 16
; [then-branch: 2958 | !(thisexcept2_3@744@01)]
(assert (not thisexcept2_3@744@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2958 | thisexcept2_3@744@01]
(assert thisexcept2_3@744@01)
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_3@744@01 (not thisexcept2_3@744@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=> p2_15@659@01 (or thisexcept2_3@744@01 (not thisexcept2_3@744@01))))
(declare-const p2_17@745@01 Bool)
(assert (=
  p2_17@745@01
  (and
    p2_15@659@01
    (and
      thisexcept2_3@744@01
      (issubtype<Bool> (typeof<PyType> tmp_4@723@01) (as MyException<PyType>  PyType))))))
; [then-branch: 2959 | False | dead]
; [else-branch: 2959 | True | live]
(push) ; 13
; [else-branch: 2959 | True]
(pop) ; 13
; [eval] !p1_17
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2960 | True | live]
; [else-branch: 2960 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2960 | True]
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_17@745@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not p2_17@745@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2961 | p2_17@745@01 | live]
; [else-branch: 2961 | !(p2_17@745@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2961 | p2_17@745@01]
(assert p2_17@745@01)
; [exec]
; except2_3 := false
; [exec]
; p1_18 := p1_17 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_17 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_18 := p2_17 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_17 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 15
; [then-branch: 2962 | !(p2_17@745@01) | live]
; [else-branch: 2962 | p2_17@745@01 | live]
(push) ; 16
; [then-branch: 2962 | !(p2_17@745@01)]
(assert (not p2_17@745@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2962 | p2_17@745@01]
; [eval] !except2_3
(push) ; 17
; [then-branch: 2963 | False | live]
; [else-branch: 2963 | True | live]
(push) ; 18
; [then-branch: 2963 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2963 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p2_17@745@01 (not p2_17@745@01)))
; [exec]
; p3_6 := p1_17 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_17 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_6 := p2_17 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_17 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 15
; [then-branch: 2964 | !(p2_17@745@01) | live]
; [else-branch: 2964 | p2_17@745@01 | live]
(push) ; 16
; [then-branch: 2964 | !(p2_17@745@01)]
(assert (not p2_17@745@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2964 | p2_17@745@01]
; [eval] !except2_3
(push) ; 17
; [then-branch: 2965 | False | live]
; [else-branch: 2965 | True | live]
(push) ; 18
; [then-branch: 2965 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2965 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] p1_18 && !except1_3
; [then-branch: 2966 | False | dead]
; [else-branch: 2966 | True | live]
(push) ; 15
; [else-branch: 2966 | True]
(pop) ; 15
; [eval] !(p1_18 && !except1_3)
; [eval] p1_18 && !except1_3
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2967 | True | live]
; [else-branch: 2967 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2967 | True]
; [eval] p2_18 && !except2_3
; [then-branch: 2968 | False | dead]
; [else-branch: 2968 | True | live]
(push) ; 16
; [else-branch: 2968 | True]
(pop) ; 16
; [eval] !(p2_18 && !except2_3)
; [eval] p2_18 && !except2_3
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2969 | True | live]
; [else-branch: 2969 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2969 | True]
; [eval] p1_17 && !except1_3
; [then-branch: 2970 | False | dead]
; [else-branch: 2970 | True | live]
(push) ; 17
; [else-branch: 2970 | True]
(pop) ; 17
; [eval] !(p1_17 && !except1_3)
; [eval] p1_17 && !except1_3
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2971 | True | live]
; [else-branch: 2971 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2971 | True]
; [eval] p2_17 && !except2_3
(push) ; 18
; [then-branch: 2972 | !(p2_17@745@01) | live]
; [else-branch: 2972 | p2_17@745@01 | live]
(push) ; 19
; [then-branch: 2972 | !(p2_17@745@01)]
(assert (not p2_17@745@01))
(pop) ; 19
(push) ; 19
; [else-branch: 2972 | p2_17@745@01]
; [eval] !except2_3
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_17@745@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2973 | p2_17@745@01 | live]
; [else-branch: 2973 | !(p2_17@745@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2973 | p2_17@745@01]
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_valuep@746@01 $Ref)
(assert (= Container_valuep@746@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 2974 | !(p1_15@658@01) | live]
; [else-branch: 2974 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 2974 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2974 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2975 | p1_15@658@01 | live]
; [else-branch: 2975 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2975 | p1_15@658@01]
; [exec]
; _err := null
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 2976 | !(p2_15@659@01) | live]
; [else-branch: 2976 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 2976 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2976 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2977 | p2_15@659@01 | live]
; [else-branch: 2977 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2977 | p2_15@659@01]
; [exec]
; _err_4 := null
; [exec]
; p1_19 := p1_15 && !thisexcept1_3
; [eval] p1_15 && !thisexcept1_3
(push) ; 21
; [then-branch: 2978 | !(p1_15@658@01) | live]
; [else-branch: 2978 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 2978 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2978 | p1_15@658@01]
; [eval] !thisexcept1_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p2_19 := p2_15 && !thisexcept2_3
; [eval] p2_15 && !thisexcept2_3
(push) ; 21
; [then-branch: 2979 | !(p2_15@659@01) | live]
; [else-branch: 2979 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 2979 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2979 | p2_15@659@01]
; [eval] !thisexcept2_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(declare-const p2_19@747@01 Bool)
(assert (= p2_19@747@01 (and p2_15@659@01 (not thisexcept2_3@744@01))))
; [exec]
; p1_20 := p1_19 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_19 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 2980 | !(p1_15@658@01) | live]
; [else-branch: 2980 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 2980 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2980 | p1_15@658@01]
; [eval] !except1_3
(push) ; 23
; [then-branch: 2981 | False | live]
; [else-branch: 2981 | True | live]
(push) ; 24
; [then-branch: 2981 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2981 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p2_20 := p2_19 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_19 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 2982 | !(p2_19@747@01) | live]
; [else-branch: 2982 | p2_19@747@01 | live]
(push) ; 22
; [then-branch: 2982 | !(p2_19@747@01)]
(assert (not p2_19@747@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2982 | p2_19@747@01]
(assert p2_19@747@01)
; [eval] !except2_3
(push) ; 23
; [then-branch: 2983 | False | live]
; [else-branch: 2983 | True | live]
(push) ; 24
; [then-branch: 2983 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2983 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or p2_19@747@01 (not p2_19@747@01)))
; [exec]
; p3_7 := p1_19 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_19 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 2984 | !(p1_15@658@01) | live]
; [else-branch: 2984 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 2984 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2984 | p1_15@658@01]
; [eval] !except1_3
(push) ; 23
; [then-branch: 2985 | False | live]
; [else-branch: 2985 | True | live]
(push) ; 24
; [then-branch: 2985 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2985 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p4_7 := p2_19 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_19 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 2986 | !(p2_19@747@01) | live]
; [else-branch: 2986 | p2_19@747@01 | live]
(push) ; 22
; [then-branch: 2986 | !(p2_19@747@01)]
(assert (not p2_19@747@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2986 | p2_19@747@01]
(assert p2_19@747@01)
; [eval] !except2_3
(push) ; 23
; [then-branch: 2987 | False | live]
; [else-branch: 2987 | True | live]
(push) ; 24
; [then-branch: 2987 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2987 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [eval] p1_20 && !except1_3
; [then-branch: 2988 | False | dead]
; [else-branch: 2988 | True | live]
(push) ; 21
; [else-branch: 2988 | True]
(pop) ; 21
; [eval] !(p1_20 && !except1_3)
; [eval] p1_20 && !except1_3
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2989 | True | live]
; [else-branch: 2989 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2989 | True]
; [eval] p2_20 && !except2_3
; [then-branch: 2990 | False | dead]
; [else-branch: 2990 | True | live]
(push) ; 22
; [else-branch: 2990 | True]
(pop) ; 22
; [eval] !(p2_20 && !except2_3)
; [eval] p2_20 && !except2_3
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2991 | True | live]
; [else-branch: 2991 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2991 | True]
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 2992 | !(p1_15@658@01) | live]
; [else-branch: 2992 | p1_15@658@01 | live]
(push) ; 24
; [then-branch: 2992 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2992 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2993 | p1_15@658@01 | live]
; [else-branch: 2993 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2993 | p1_15@658@01]
; [exec]
; c_4.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@748@01 $Ref)
(assert (= Container_value@748@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 2994 | !(p2_19@747@01) | live]
; [else-branch: 2994 | p2_19@747@01 | live]
(push) ; 25
; [then-branch: 2994 | !(p2_19@747@01)]
(assert (not p2_19@747@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2994 | p2_19@747@01]
(assert p2_19@747@01)
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_19@747@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2995 | p2_19@747@01 | dead]
; [else-branch: 2995 | !(p2_19@747@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 2995 | !(p2_19@747@01)]
(assert (not p2_19@747@01))
(pop) ; 24
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 2996 | !(p2_19@747@01) | live]
; [else-branch: 2996 | p2_19@747@01 | live]
(push) ; 25
; [then-branch: 2996 | !(p2_19@747@01)]
(assert (not p2_19@747@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2996 | p2_19@747@01]
(assert p2_19@747@01)
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_19@747@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_19@747@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2997 | !(p2_19@747@01) | live]
; [else-branch: 2997 | p2_19@747@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2997 | !(p2_19@747@01)]
(assert (not p2_19@747@01))
; [exec]
; tmp_5 := new()
(declare-const tmp_5@749@01 $Ref)
(assert (not (= tmp_5@749@01 $Ref.null)))
(assert (not (= tmp_5@749@01 MyException_res_5_0@689@01)))
(assert (not (= tmp_5@749@01 c_0@668@01)))
(assert (not (= tmp_5@749@01 _cthread_161_0@661@01)))
(assert (not (= tmp_5@749@01 MyException_res_5@688@01)))
(assert (not (= tmp_5@749@01 b_3_0@667@01)))
(assert (not (= tmp_5@749@01 tmp_4@723@01)))
(assert (not (= tmp_5@749@01 error_3_0@679@01)))
(assert (not (= tmp_5@749@01 MyException_res_4@686@01)))
(assert (not (= tmp_5@749@01 Container_valuep@746@01)))
(assert (not (= tmp_5@749@01 b_3@666@01)))
(assert (not (= tmp_5@749@01 error_3@678@01)))
(assert (not (= tmp_5@749@01 tmp_5@715@01)))
(assert (not (= tmp_5@749@01 _cthread_161@660@01)))
(assert (not (= tmp_5@749@01 Container_value@748@01)))
(assert (not (= tmp_5@749@01 c_0_0@669@01)))
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 2998 | !(p1_15@658@01) | live]
; [else-branch: 2998 | p1_15@658@01 | live]
(push) ; 26
; [then-branch: 2998 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2998 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2999 | p1_15@658@01 | live]
; [else-branch: 2999 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2999 | p1_15@658@01]
; [exec]
; MyException_res_5 := tmp_5
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 3000 | !(p2_19@747@01) | live]
; [else-branch: 3000 | p2_19@747@01 | live]
(push) ; 27
; [then-branch: 3000 | !(p2_19@747@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 3000 | p2_19@747@01]
(assert p2_19@747@01)
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 3001 | p2_19@747@01 | dead]
; [else-branch: 3001 | !(p2_19@747@01) | live]
(push) ; 26
; [else-branch: 3001 | !(p2_19@747@01)]
(pop) ; 26
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 3002 | !(p2_19@747@01) | live]
; [else-branch: 3002 | p2_19@747@01 | live]
(push) ; 27
; [then-branch: 3002 | !(p2_19@747@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 3002 | p2_19@747@01]
(assert p2_19@747@01)
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_19@747@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3003 | !(p2_19@747@01) | live]
; [else-branch: 3003 | p2_19@747@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3003 | !(p2_19@747@01)]
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 3004 | !(p1_15@658@01) | live]
; [else-branch: 3004 | p1_15@658@01 | live]
(push) ; 28
; [then-branch: 3004 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 28
(push) ; 28
; [else-branch: 3004 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3005 | p1_15@658@01 | live]
; [else-branch: 3005 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3005 | p1_15@658@01]
; [exec]
; inhale typeof(MyException_res_5) == MyException()
(declare-const $t@750@01 $Snap)
(assert (= $t@750@01 $Snap.unit))
; [eval] typeof(MyException_res_5) == MyException()
; [eval] typeof(MyException_res_5)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_5@749@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_19 && !except2_3
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3006 | !(p2_19@747@01) | live]
; [else-branch: 3006 | p2_19@747@01 | live]
(push) ; 29
; [then-branch: 3006 | !(p2_19@747@01)]
(pop) ; 29
(push) ; 29
; [else-branch: 3006 | p2_19@747@01]
(assert p2_19@747@01)
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 3007 | p2_19@747@01 | dead]
; [else-branch: 3007 | !(p2_19@747@01) | live]
(push) ; 28
; [else-branch: 3007 | !(p2_19@747@01)]
(pop) ; 28
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 28
; [then-branch: 3008 | !(p2_19@747@01) | live]
; [else-branch: 3008 | p2_19@747@01 | live]
(push) ; 29
; [then-branch: 3008 | !(p2_19@747@01)]
(pop) ; 29
(push) ; 29
; [else-branch: 3008 | p2_19@747@01]
(assert p2_19@747@01)
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not p2_19@747@01))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3009 | !(p2_19@747@01) | live]
; [else-branch: 3009 | p2_19@747@01 | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3009 | !(p2_19@747@01)]
; [eval] p1_19 && !except1_3
(push) ; 29
; [then-branch: 3010 | !(p1_15@658@01) | live]
; [else-branch: 3010 | p1_15@658@01 | live]
(push) ; 30
; [then-branch: 3010 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3010 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3011 | p1_15@658@01 | live]
; [else-branch: 3011 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3011 | p1_15@658@01]
; [exec]
; _err := MyException_res_5
; [exec]
; except1_3 := true
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 3012 | !(p2_19@747@01) | live]
; [else-branch: 3012 | p2_19@747@01 | live]
(push) ; 31
; [then-branch: 3012 | !(p2_19@747@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 3012 | p2_19@747@01]
(assert p2_19@747@01)
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 3013 | p2_19@747@01 | dead]
; [else-branch: 3013 | !(p2_19@747@01) | live]
(push) ; 30
; [else-branch: 3013 | !(p2_19@747@01)]
(pop) ; 30
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 3014 | !(p2_19@747@01) | live]
; [else-branch: 3014 | p2_19@747@01 | live]
(push) ; 31
; [then-branch: 3014 | !(p2_19@747@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 3014 | p2_19@747@01]
(assert p2_19@747@01)
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_19@747@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3015 | !(p2_19@747@01) | live]
; [else-branch: 3015 | p2_19@747@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3015 | !(p2_19@747@01)]
; [eval] p1_15 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3016 | p1_15@658@01 | live]
; [else-branch: 3016 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3016 | p1_15@658@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_15 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3017 | p2_15@659@01 | live]
; [else-branch: 3017 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3017 | p2_15@659@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3018 | p1_15@658@01 | live]
; [else-branch: 3018 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3018 | p1_15@658@01]
; [eval] _err == null
; [then-branch: 3019 | tmp_5@749@01 == Null | dead]
; [else-branch: 3019 | tmp_5@749@01 != Null | live]
(push) ; 32
; [else-branch: 3019 | tmp_5@749@01 != Null]
(push) ; 33
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3020 | p2_15@659@01 | live]
; [else-branch: 3020 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 3020 | p2_15@659@01]
; [eval] _err_4 == null
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3021 | True | live]
; [else-branch: 3021 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3021 | True]
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(push) ; 35
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@746@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@746@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 35
(pop) ; 35
; Joined path conditions
(push) ; 35
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 36
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@746@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 35
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@746@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 35
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@746@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@746@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3022 | p1_15@658@01 | live]
; [else-branch: 3022 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3022 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 36
; [then-branch: 3023 | tmp_5@749@01 == Null | live]
; [else-branch: 3023 | tmp_5@749@01 != Null | live]
(push) ; 37
; [then-branch: 3023 | tmp_5@749@01 == Null]
(assert (= tmp_5@749@01 $Ref.null))
(pop) ; 37
(push) ; 37
; [else-branch: 3023 | tmp_5@749@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_5@749@01 $Ref.null)) (= tmp_5@749@01 $Ref.null)))
(push) ; 36
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_5@749@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_5@749@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_5@749@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_5@749@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3024 | tmp_5@749@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@749@01), MyException[PyType]) | live]
; [else-branch: 3024 | !(tmp_5@749@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@749@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 3024 | tmp_5@749@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@749@01), MyException[PyType])]
(assert (and
  (not (= tmp_5@749@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_5@749@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(push) ; 37
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@748@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@748@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 37
(pop) ; 37
; Joined path conditions
(push) ; 37
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 38
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@748@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 37
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@748@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(push) ; 37
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@748@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@748@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3025 | p2_15@659@01 | live]
; [else-branch: 3025 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3025 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
; [then-branch: 3026 | False | dead]
; [else-branch: 3026 | True | live]
(push) ; 38
; [else-branch: 3026 | True]
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3027 | p1_15@658@01 | live]
; [else-branch: 3027 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3027 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (= tmp_5@749@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3028 | tmp_5@749@01 != Null | live]
; [else-branch: 3028 | tmp_5@749@01 == Null | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3028 | tmp_5@749@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  (and p1_15@658@01 (not (= tmp_5@749@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_5@749@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_15@658@01 (not (= tmp_5@749@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_5@749@01) (as MyException<PyType>  PyType))))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3029 | p2_15@659@01 | live]
; [else-branch: 3029 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3029 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 41
; [then-branch: 3030 | False | dead]
; [else-branch: 3030 | True | live]
(push) ; 42
; [else-branch: 3030 | True]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_15 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3031 | p1_15@658@01 | live]
; [else-branch: 3031 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3031 | p1_15@658@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 41
; [then-branch: 3032 | False | live]
; [else-branch: 3032 | True | live]
(push) ; 42
; [then-branch: 3032 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 3032 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 43
; [then-branch: 3033 | False | live]
; [else-branch: 3033 | True | live]
(push) ; 44
; [then-branch: 3033 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3033 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 3034 | False | live]
; [else-branch: 3034 | True | live]
(push) ; 46
; [then-branch: 3034 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3034 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_15 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3035 | p2_15@659@01 | live]
; [else-branch: 3035 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3035 | p2_15@659@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false)
(push) ; 41
; [then-branch: 3036 | False | live]
; [else-branch: 3036 | True | live]
(push) ; 42
; [then-branch: 3036 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 3036 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false)
(push) ; 43
; [then-branch: 3037 | False | live]
; [else-branch: 3037 | True | live]
(push) ; 44
; [then-branch: 3037 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3037 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 3038 | False | live]
; [else-branch: 3038 | True | live]
(push) ; 46
; [then-branch: 3038 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3038 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 29
; [then-branch: 3039 | !(p1_15@658@01) | live]
; [else-branch: 3039 | p1_15@658@01 | live]
(push) ; 30
; [then-branch: 3039 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3039 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 3040 | !(p1_15@658@01) | dead]
; [else-branch: 3040 | p1_15@658@01 | live]
(push) ; 29
; [else-branch: 3040 | p1_15@658@01]
(pop) ; 29
(pop) ; 28
(pop) ; 27
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 3041 | !(p1_15@658@01) | live]
; [else-branch: 3041 | p1_15@658@01 | live]
(push) ; 28
; [then-branch: 3041 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 28
(push) ; 28
; [else-branch: 3041 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 3042 | !(p1_15@658@01) | dead]
; [else-branch: 3042 | p1_15@658@01 | live]
(push) ; 27
; [else-branch: 3042 | p1_15@658@01]
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 3043 | !(p1_15@658@01) | live]
; [else-branch: 3043 | p1_15@658@01 | live]
(push) ; 26
; [then-branch: 3043 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3043 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 3044 | !(p1_15@658@01) | dead]
; [else-branch: 3044 | p1_15@658@01 | live]
(push) ; 25
; [else-branch: 3044 | p1_15@658@01]
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 3045 | !(p1_15@658@01) | live]
; [else-branch: 3045 | p1_15@658@01 | live]
(push) ; 24
; [then-branch: 3045 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3045 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 3046 | !(p1_15@658@01) | dead]
; [else-branch: 3046 | p1_15@658@01 | live]
(push) ; 23
; [else-branch: 3046 | p1_15@658@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p2_15 && !except2_3)
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 3047 | !(p2_15@659@01) | live]
; [else-branch: 3047 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 3047 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3047 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 3048 | !(p2_15@659@01) | dead]
; [else-branch: 3048 | p2_15@659@01 | live]
(push) ; 20
; [else-branch: 3048 | p2_15@659@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 3049 | !(p1_15@658@01) | live]
; [else-branch: 3049 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 3049 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3049 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 3050 | !(p1_15@658@01) | dead]
; [else-branch: 3050 | p1_15@658@01 | live]
(push) ; 19
; [else-branch: 3050 | p1_15@658@01]
(pop) ; 19
(pop) ; 18
; [eval] !(p2_17 && !except2_3)
; [eval] p2_17 && !except2_3
(push) ; 18
; [then-branch: 3051 | !(p2_17@745@01) | live]
; [else-branch: 3051 | p2_17@745@01 | live]
(push) ; 19
; [then-branch: 3051 | !(p2_17@745@01)]
(assert (not p2_17@745@01))
(pop) ; 19
(push) ; 19
; [else-branch: 3051 | p2_17@745@01]
; [eval] !except2_3
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 3052 | !(p2_17@745@01) | dead]
; [else-branch: 3052 | p2_17@745@01 | live]
(push) ; 18
; [else-branch: 3052 | p2_17@745@01]
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
; [eval] !p2_17
(push) ; 14
(set-option :timeout 10)
(assert (not p2_17@745@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3053 | !(p2_17@745@01) | dead]
; [else-branch: 3053 | p2_17@745@01 | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3053 | p2_17@745@01]
(assert p2_17@745@01)
(pop) ; 14
(pop) ; 13
(pop) ; 12
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 3054 | !(p2_16@720@01) | live]
; [else-branch: 3054 | p2_16@720@01 | live]
(push) ; 13
; [then-branch: 3054 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3054 | p2_16@720@01]
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 3055 | !(p2_16@720@01) | dead]
; [else-branch: 3055 | p2_16@720@01 | live]
(push) ; 12
; [else-branch: 3055 | p2_16@720@01]
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 10
; [then-branch: 3056 | !(p2_16@720@01) | live]
; [else-branch: 3056 | p2_16@720@01 | live]
(push) ; 11
; [then-branch: 3056 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3056 | p2_16@720@01]
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 3057 | !(p2_16@720@01) | dead]
; [else-branch: 3057 | p2_16@720@01 | live]
(push) ; 10
; [else-branch: 3057 | p2_16@720@01]
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 2942 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 8
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 8
; [then-branch: 3058 | !(p2_16@720@01) | live]
; [else-branch: 3058 | p2_16@720@01 | live]
(push) ; 9
; [then-branch: 3058 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
(pop) ; 9
(push) ; 9
; [else-branch: 3058 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_16@720@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_16@720@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3059 | !(p2_16@720@01) | live]
; [else-branch: 3059 | p2_16@720@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3059 | !(p2_16@720@01)]
(assert (not p2_16@720@01))
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 3060 | !(p1_16@719@01) | live]
; [else-branch: 3060 | p1_16@719@01 | live]
(push) ; 10
; [then-branch: 3060 | !(p1_16@719@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 3060 | p1_16@719@01]
(assert p1_16@719@01)
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 3061 | p1_16@719@01 | dead]
; [else-branch: 3061 | !(p1_16@719@01) | live]
(push) ; 9
; [else-branch: 3061 | !(p1_16@719@01)]
(pop) ; 9
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 3062 | !(p1_16@719@01) | live]
; [else-branch: 3062 | p1_16@719@01 | live]
(push) ; 10
; [then-branch: 3062 | !(p1_16@719@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 3062 | p1_16@719@01]
(assert p1_16@719@01)
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_16@719@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3063 | !(p1_16@719@01) | live]
; [else-branch: 3063 | p1_16@719@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3063 | !(p1_16@719@01)]
; [eval] p2_16 && !except2_3
(push) ; 10
; [then-branch: 3064 | !(p2_16@720@01) | live]
; [else-branch: 3064 | p2_16@720@01 | live]
(push) ; 11
; [then-branch: 3064 | !(p2_16@720@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 3064 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 3065 | p2_16@720@01 | dead]
; [else-branch: 3065 | !(p2_16@720@01) | live]
(push) ; 10
; [else-branch: 3065 | !(p2_16@720@01)]
(pop) ; 10
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 10
; [then-branch: 3066 | !(p2_16@720@01) | live]
; [else-branch: 3066 | p2_16@720@01 | live]
(push) ; 11
; [then-branch: 3066 | !(p2_16@720@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 3066 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_16@720@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3067 | !(p2_16@720@01) | live]
; [else-branch: 3067 | p2_16@720@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3067 | !(p2_16@720@01)]
; [eval] p1_16 && !except1_3
(push) ; 11
; [then-branch: 3068 | !(p1_16@719@01) | live]
; [else-branch: 3068 | p1_16@719@01 | live]
(push) ; 12
; [then-branch: 3068 | !(p1_16@719@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 3068 | p1_16@719@01]
(assert p1_16@719@01)
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 3069 | p1_16@719@01 | dead]
; [else-branch: 3069 | !(p1_16@719@01) | live]
(push) ; 11
; [else-branch: 3069 | !(p1_16@719@01)]
(pop) ; 11
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 11
; [then-branch: 3070 | !(p1_16@719@01) | live]
; [else-branch: 3070 | p1_16@719@01 | live]
(push) ; 12
; [then-branch: 3070 | !(p1_16@719@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 3070 | p1_16@719@01]
(assert p1_16@719@01)
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p1_16@719@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3071 | !(p1_16@719@01) | live]
; [else-branch: 3071 | p1_16@719@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3071 | !(p1_16@719@01)]
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 3072 | !(p2_16@720@01) | live]
; [else-branch: 3072 | p2_16@720@01 | live]
(push) ; 13
; [then-branch: 3072 | !(p2_16@720@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 3072 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 3073 | p2_16@720@01 | dead]
; [else-branch: 3073 | !(p2_16@720@01) | live]
(push) ; 12
; [else-branch: 3073 | !(p2_16@720@01)]
(pop) ; 12
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 3074 | !(p2_16@720@01) | live]
; [else-branch: 3074 | p2_16@720@01 | live]
(push) ; 13
; [then-branch: 3074 | !(p2_16@720@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 3074 | p2_16@720@01]
(assert p2_16@720@01)
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_16@720@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3075 | !(p2_16@720@01) | live]
; [else-branch: 3075 | p2_16@720@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3075 | !(p2_16@720@01)]
; [exec]
; thisexcept1_3 := except1_3 && !bypass1_3
; [eval] except1_3 && !bypass1_3
; [exec]
; thisexcept2_3 := except2_3 && !bypass2_3
; [eval] except2_3 && !bypass2_3
; [exec]
; p1_17 := p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
; [eval] p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 3076 | !(p1_15@658@01) | live]
; [else-branch: 3076 | p1_15@658@01 | live]
(push) ; 14
; [then-branch: 3076 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3076 | p1_15@658@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p2_17 := p2_15 &&
;   (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
; [eval] p2_15 && (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
(push) ; 13
; [then-branch: 3077 | !(p2_15@659@01) | live]
; [else-branch: 3077 | p2_15@659@01 | live]
(push) ; 14
; [then-branch: 3077 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3077 | p2_15@659@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 3078 | False | dead]
; [else-branch: 3078 | True | live]
(push) ; 13
; [else-branch: 3078 | True]
(pop) ; 13
; [eval] !p1_17
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3079 | True | live]
; [else-branch: 3079 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3079 | True]
; [then-branch: 3080 | False | dead]
; [else-branch: 3080 | True | live]
(push) ; 14
; [else-branch: 3080 | True]
(pop) ; 14
; [eval] !p2_17
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3081 | True | live]
; [else-branch: 3081 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3081 | True]
; [exec]
; p1_18 := p1_17 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_17 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_18 := p2_17 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_17 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_6 := p1_17 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_17 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_6 := p2_17 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_17 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_18 && !except1_3
; [then-branch: 3082 | False | dead]
; [else-branch: 3082 | True | live]
(push) ; 15
; [else-branch: 3082 | True]
(pop) ; 15
; [eval] !(p1_18 && !except1_3)
; [eval] p1_18 && !except1_3
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3083 | True | live]
; [else-branch: 3083 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3083 | True]
; [eval] p2_18 && !except2_3
; [then-branch: 3084 | False | dead]
; [else-branch: 3084 | True | live]
(push) ; 16
; [else-branch: 3084 | True]
(pop) ; 16
; [eval] !(p2_18 && !except2_3)
; [eval] p2_18 && !except2_3
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3085 | True | live]
; [else-branch: 3085 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3085 | True]
; [eval] p1_17 && !except1_3
; [then-branch: 3086 | False | dead]
; [else-branch: 3086 | True | live]
(push) ; 17
; [else-branch: 3086 | True]
(pop) ; 17
; [eval] !(p1_17 && !except1_3)
; [eval] p1_17 && !except1_3
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3087 | True | live]
; [else-branch: 3087 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3087 | True]
; [eval] p2_17 && !except2_3
; [then-branch: 3088 | False | dead]
; [else-branch: 3088 | True | live]
(push) ; 18
; [else-branch: 3088 | True]
(pop) ; 18
; [eval] !(p2_17 && !except2_3)
; [eval] p2_17 && !except2_3
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3089 | True | live]
; [else-branch: 3089 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3089 | True]
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 3090 | !(p1_15@658@01) | live]
; [else-branch: 3090 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 3090 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3090 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3091 | p1_15@658@01 | live]
; [else-branch: 3091 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3091 | p1_15@658@01]
; [exec]
; _err := null
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 3092 | !(p2_15@659@01) | live]
; [else-branch: 3092 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 3092 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3092 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3093 | p2_15@659@01 | live]
; [else-branch: 3093 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3093 | p2_15@659@01]
; [exec]
; _err_4 := null
; [exec]
; p1_19 := p1_15 && !thisexcept1_3
; [eval] p1_15 && !thisexcept1_3
(push) ; 21
; [then-branch: 3094 | !(p1_15@658@01) | live]
; [else-branch: 3094 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 3094 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3094 | p1_15@658@01]
; [eval] !thisexcept1_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p2_19 := p2_15 && !thisexcept2_3
; [eval] p2_15 && !thisexcept2_3
(push) ; 21
; [then-branch: 3095 | !(p2_15@659@01) | live]
; [else-branch: 3095 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 3095 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3095 | p2_15@659@01]
; [eval] !thisexcept2_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p1_20 := p1_19 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_19 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 3096 | !(p1_15@658@01) | live]
; [else-branch: 3096 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 3096 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3096 | p1_15@658@01]
; [eval] !except1_3
(push) ; 23
; [then-branch: 3097 | False | live]
; [else-branch: 3097 | True | live]
(push) ; 24
; [then-branch: 3097 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3097 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p2_20 := p2_19 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_19 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 3098 | !(p2_15@659@01) | live]
; [else-branch: 3098 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 3098 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3098 | p2_15@659@01]
; [eval] !except2_3
(push) ; 23
; [then-branch: 3099 | False | live]
; [else-branch: 3099 | True | live]
(push) ; 24
; [then-branch: 3099 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3099 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p3_7 := p1_19 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_19 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 3100 | !(p1_15@658@01) | live]
; [else-branch: 3100 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 3100 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3100 | p1_15@658@01]
; [eval] !except1_3
(push) ; 23
; [then-branch: 3101 | False | live]
; [else-branch: 3101 | True | live]
(push) ; 24
; [then-branch: 3101 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3101 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p4_7 := p2_19 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_19 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 3102 | !(p2_15@659@01) | live]
; [else-branch: 3102 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 3102 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3102 | p2_15@659@01]
; [eval] !except2_3
(push) ; 23
; [then-branch: 3103 | False | live]
; [else-branch: 3103 | True | live]
(push) ; 24
; [then-branch: 3103 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3103 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [eval] p1_20 && !except1_3
; [then-branch: 3104 | False | dead]
; [else-branch: 3104 | True | live]
(push) ; 21
; [else-branch: 3104 | True]
(pop) ; 21
; [eval] !(p1_20 && !except1_3)
; [eval] p1_20 && !except1_3
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3105 | True | live]
; [else-branch: 3105 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3105 | True]
; [eval] p2_20 && !except2_3
; [then-branch: 3106 | False | dead]
; [else-branch: 3106 | True | live]
(push) ; 22
; [else-branch: 3106 | True]
(pop) ; 22
; [eval] !(p2_20 && !except2_3)
; [eval] p2_20 && !except2_3
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3107 | True | live]
; [else-branch: 3107 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3107 | True]
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 3108 | !(p1_15@658@01) | live]
; [else-branch: 3108 | p1_15@658@01 | live]
(push) ; 24
; [then-branch: 3108 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3108 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3109 | p1_15@658@01 | live]
; [else-branch: 3109 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3109 | p1_15@658@01]
; [exec]
; c_4.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@751@01 $Ref)
(assert (= Container_value@751@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 3110 | !(p2_15@659@01) | live]
; [else-branch: 3110 | p2_15@659@01 | live]
(push) ; 25
; [then-branch: 3110 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3110 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3111 | p2_15@659@01 | live]
; [else-branch: 3111 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3111 | p2_15@659@01]
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 25
(pop) ; 25
; Joined path conditions
(declare-const Container_valuep@752@01 $Ref)
(assert (= Container_valuep@752@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; tmp_5 := new()
(declare-const tmp_5@753@01 $Ref)
(assert (not (= tmp_5@753@01 $Ref.null)))
(assert (not (= tmp_5@753@01 MyException_res_5_0@689@01)))
(assert (not (= tmp_5@753@01 c_0@668@01)))
(assert (not (= tmp_5@753@01 _cthread_161_0@661@01)))
(assert (not (= tmp_5@753@01 MyException_res_5@688@01)))
(assert (not (= tmp_5@753@01 b_3_0@667@01)))
(assert (not (= tmp_5@753@01 tmp_4@723@01)))
(assert (not (= tmp_5@753@01 error_3_0@679@01)))
(assert (not (= tmp_5@753@01 MyException_res_4@686@01)))
(assert (not (= tmp_5@753@01 MyException_res_4_0@687@01)))
(assert (not (= tmp_5@753@01 Container_valuep@752@01)))
(assert (not (= tmp_5@753@01 b_3@666@01)))
(assert (not (= tmp_5@753@01 error_3@678@01)))
(assert (not (= tmp_5@753@01 Container_value@751@01)))
(assert (not (= tmp_5@753@01 tmp_5@715@01)))
(assert (not (= tmp_5@753@01 _cthread_161@660@01)))
(assert (not (= tmp_5@753@01 c_0_0@669@01)))
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 3112 | !(p1_15@658@01) | live]
; [else-branch: 3112 | p1_15@658@01 | live]
(push) ; 26
; [then-branch: 3112 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3112 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3113 | p1_15@658@01 | live]
; [else-branch: 3113 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3113 | p1_15@658@01]
; [exec]
; MyException_res_5 := tmp_5
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 3114 | !(p2_15@659@01) | live]
; [else-branch: 3114 | p2_15@659@01 | live]
(push) ; 27
; [then-branch: 3114 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3114 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3115 | p2_15@659@01 | live]
; [else-branch: 3115 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3115 | p2_15@659@01]
; [exec]
; MyException_res_5_0 := tmp_5
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 3116 | !(p1_15@658@01) | live]
; [else-branch: 3116 | p1_15@658@01 | live]
(push) ; 28
; [then-branch: 3116 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 28
(push) ; 28
; [else-branch: 3116 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3117 | p1_15@658@01 | live]
; [else-branch: 3117 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3117 | p1_15@658@01]
; [exec]
; inhale typeof(MyException_res_5) == MyException()
(declare-const $t@754@01 $Snap)
(assert (= $t@754@01 $Snap.unit))
; [eval] typeof(MyException_res_5) == MyException()
; [eval] typeof(MyException_res_5)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_19 && !except2_3
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3118 | !(p2_15@659@01) | live]
; [else-branch: 3118 | p2_15@659@01 | live]
(push) ; 29
; [then-branch: 3118 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3118 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3119 | p2_15@659@01 | live]
; [else-branch: 3119 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3119 | p2_15@659@01]
; [exec]
; inhale typeof(MyException_res_5_0) == MyException()
(declare-const $t@755@01 $Snap)
(assert (= $t@755@01 $Snap.unit))
; [eval] typeof(MyException_res_5_0) == MyException()
; [eval] typeof(MyException_res_5_0)
; [eval] MyException()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_19 && !except1_3
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3120 | !(p1_15@658@01) | live]
; [else-branch: 3120 | p1_15@658@01 | live]
(push) ; 30
; [then-branch: 3120 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3120 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3121 | p1_15@658@01 | live]
; [else-branch: 3121 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3121 | p1_15@658@01]
; [exec]
; _err := MyException_res_5
; [exec]
; except1_3 := true
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 3122 | !(p2_15@659@01) | live]
; [else-branch: 3122 | p2_15@659@01 | live]
(push) ; 31
; [then-branch: 3122 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3122 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3123 | p2_15@659@01 | live]
; [else-branch: 3123 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3123 | p2_15@659@01]
; [exec]
; _err_4 := MyException_res_5_0
; [exec]
; except2_3 := true
; [eval] p1_15 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3124 | p1_15@658@01 | live]
; [else-branch: 3124 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3124 | p1_15@658@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_15 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3125 | p2_15@659@01 | live]
; [else-branch: 3125 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3125 | p2_15@659@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3126 | p1_15@658@01 | live]
; [else-branch: 3126 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3126 | p1_15@658@01]
; [eval] _err == null
; [then-branch: 3127 | tmp_5@753@01 == Null | dead]
; [else-branch: 3127 | tmp_5@753@01 != Null | live]
(push) ; 32
; [else-branch: 3127 | tmp_5@753@01 != Null]
(push) ; 33
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3128 | p2_15@659@01 | live]
; [else-branch: 3128 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 3128 | p2_15@659@01]
; [eval] _err_4 == null
; [then-branch: 3129 | tmp_5@753@01 == Null | dead]
; [else-branch: 3129 | tmp_5@753@01 != Null | live]
(push) ; 34
; [else-branch: 3129 | tmp_5@753@01 != Null]
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3130 | p1_15@658@01 | live]
; [else-branch: 3130 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3130 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 36
; [then-branch: 3131 | tmp_5@753@01 == Null | live]
; [else-branch: 3131 | tmp_5@753@01 != Null | live]
(push) ; 37
; [then-branch: 3131 | tmp_5@753@01 == Null]
(assert (= tmp_5@753@01 $Ref.null))
(pop) ; 37
(push) ; 37
; [else-branch: 3131 | tmp_5@753@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_5@753@01 $Ref.null)) (= tmp_5@753@01 $Ref.null)))
(push) ; 36
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_5@753@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_5@753@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3132 | tmp_5@753@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@753@01), MyException[PyType]) | live]
; [else-branch: 3132 | !(tmp_5@753@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@753@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 3132 | tmp_5@753@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@753@01), MyException[PyType])]
(assert (and
  (not (= tmp_5@753@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(push) ; 37
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@751@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@751@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 37
(pop) ; 37
; Joined path conditions
(push) ; 37
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 38
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@751@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 37
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@751@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(push) ; 37
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@751@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@751@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3133 | p2_15@659@01 | live]
; [else-branch: 3133 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3133 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 38
; [then-branch: 3134 | tmp_5@753@01 == Null | live]
; [else-branch: 3134 | tmp_5@753@01 != Null | live]
(push) ; 39
; [then-branch: 3134 | tmp_5@753@01 == Null]
(assert (= tmp_5@753@01 $Ref.null))
(pop) ; 39
(push) ; 39
; [else-branch: 3134 | tmp_5@753@01 != Null]
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_5@753@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_5@753@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3135 | tmp_5@753@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@753@01), MyException[PyType]) | live]
; [else-branch: 3135 | !(tmp_5@753@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@753@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3135 | tmp_5@753@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@753@01), MyException[PyType])]
(assert (and
  (not (= tmp_5@753@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(push) ; 39
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@752@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@752@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 39
(pop) ; 39
; Joined path conditions
(push) ; 39
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@752@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 39
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@752@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(push) ; 39
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@752@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@752@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3136 | p1_15@658@01 | live]
; [else-branch: 3136 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3136 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (= tmp_5@753@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3137 | tmp_5@753@01 != Null | live]
; [else-branch: 3137 | tmp_5@753@01 == Null | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3137 | tmp_5@753@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  (and p1_15@658@01 (not (= tmp_5@753@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_15@658@01 (not (= tmp_5@753@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType))))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3138 | p2_15@659@01 | live]
; [else-branch: 3138 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3138 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (= tmp_5@753@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3139 | tmp_5@753@01 != Null | live]
; [else-branch: 3139 | tmp_5@753@01 == Null | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3139 | tmp_5@753@01 != Null]
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  (and p2_15@659@01 (not (= tmp_5@753@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_15@659@01 (not (= tmp_5@753@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_5@753@01) (as MyException<PyType>  PyType))))
; [eval] p1_15 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3140 | p1_15@658@01 | live]
; [else-branch: 3140 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3140 | p1_15@658@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 41
; [then-branch: 3141 | False | live]
; [else-branch: 3141 | True | live]
(push) ; 42
; [then-branch: 3141 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 3141 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 43
; [then-branch: 3142 | False | live]
; [else-branch: 3142 | True | live]
(push) ; 44
; [then-branch: 3142 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3142 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 3143 | False | live]
; [else-branch: 3143 | True | live]
(push) ; 46
; [then-branch: 3143 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3143 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_15 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3144 | p2_15@659@01 | live]
; [else-branch: 3144 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3144 | p2_15@659@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false)
(push) ; 41
; [then-branch: 3145 | False | live]
; [else-branch: 3145 | True | live]
(push) ; 42
; [then-branch: 3145 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 3145 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false)
(push) ; 43
; [then-branch: 3146 | False | live]
; [else-branch: 3146 | True | live]
(push) ; 44
; [then-branch: 3146 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3146 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 3147 | False | live]
; [else-branch: 3147 | True | live]
(push) ; 46
; [then-branch: 3147 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3147 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 3148 | !(p2_15@659@01) | live]
; [else-branch: 3148 | p2_15@659@01 | live]
(push) ; 31
; [then-branch: 3148 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3148 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 3149 | !(p2_15@659@01) | dead]
; [else-branch: 3149 | p2_15@659@01 | live]
(push) ; 30
; [else-branch: 3149 | p2_15@659@01]
(pop) ; 30
(pop) ; 29
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 29
; [then-branch: 3150 | !(p1_15@658@01) | live]
; [else-branch: 3150 | p1_15@658@01 | live]
(push) ; 30
; [then-branch: 3150 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3150 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 3151 | !(p1_15@658@01) | dead]
; [else-branch: 3151 | p1_15@658@01 | live]
(push) ; 29
; [else-branch: 3151 | p1_15@658@01]
(pop) ; 29
(pop) ; 28
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 28
; [then-branch: 3152 | !(p2_15@659@01) | live]
; [else-branch: 3152 | p2_15@659@01 | live]
(push) ; 29
; [then-branch: 3152 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3152 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 3153 | !(p2_15@659@01) | dead]
; [else-branch: 3153 | p2_15@659@01 | live]
(push) ; 28
; [else-branch: 3153 | p2_15@659@01]
(pop) ; 28
(pop) ; 27
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 3154 | !(p1_15@658@01) | live]
; [else-branch: 3154 | p1_15@658@01 | live]
(push) ; 28
; [then-branch: 3154 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 28
(push) ; 28
; [else-branch: 3154 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 3155 | !(p1_15@658@01) | dead]
; [else-branch: 3155 | p1_15@658@01 | live]
(push) ; 27
; [else-branch: 3155 | p1_15@658@01]
(pop) ; 27
(pop) ; 26
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 3156 | !(p2_15@659@01) | live]
; [else-branch: 3156 | p2_15@659@01 | live]
(push) ; 27
; [then-branch: 3156 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3156 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 3157 | !(p2_15@659@01) | dead]
; [else-branch: 3157 | p2_15@659@01 | live]
(push) ; 26
; [else-branch: 3157 | p2_15@659@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 3158 | !(p1_15@658@01) | live]
; [else-branch: 3158 | p1_15@658@01 | live]
(push) ; 26
; [then-branch: 3158 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3158 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 3159 | !(p1_15@658@01) | dead]
; [else-branch: 3159 | p1_15@658@01 | live]
(push) ; 25
; [else-branch: 3159 | p1_15@658@01]
(pop) ; 25
(pop) ; 24
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 3160 | !(p2_15@659@01) | live]
; [else-branch: 3160 | p2_15@659@01 | live]
(push) ; 25
; [then-branch: 3160 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3160 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 3161 | !(p2_15@659@01) | dead]
; [else-branch: 3161 | p2_15@659@01 | live]
(push) ; 24
; [else-branch: 3161 | p2_15@659@01]
(pop) ; 24
(pop) ; 23
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 3162 | !(p1_15@658@01) | live]
; [else-branch: 3162 | p1_15@658@01 | live]
(push) ; 24
; [then-branch: 3162 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3162 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 3163 | !(p1_15@658@01) | dead]
; [else-branch: 3163 | p1_15@658@01 | live]
(push) ; 23
; [else-branch: 3163 | p1_15@658@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p2_15 && !except2_3)
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 3164 | !(p2_15@659@01) | live]
; [else-branch: 3164 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 3164 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3164 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 3165 | !(p2_15@659@01) | dead]
; [else-branch: 3165 | p2_15@659@01 | live]
(push) ; 20
; [else-branch: 3165 | p2_15@659@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 3166 | !(p1_15@658@01) | live]
; [else-branch: 3166 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 3166 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3166 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 3167 | !(p1_15@658@01) | dead]
; [else-branch: 3167 | p1_15@658@01 | live]
(push) ; 19
; [else-branch: 3167 | p1_15@658@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 3059 | p2_16@720@01]
(assert p2_16@720@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 2940 | p1_16@719@01]
(assert p1_16@719@01)
(pop) ; 7
(pop) ; 6
; [eval] !(p2_15 && !except2_3)
; [eval] p2_15 && !except2_3
(push) ; 6
; [then-branch: 3168 | !(p2_15@659@01) | live]
; [else-branch: 3168 | p2_15@659@01 | live]
(push) ; 7
; [then-branch: 3168 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 7
(push) ; 7
; [else-branch: 3168 | p2_15@659@01]
; [eval] !except2_3
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [then-branch: 3169 | !(p2_15@659@01) | dead]
; [else-branch: 3169 | p2_15@659@01 | live]
(push) ; 6
; [else-branch: 3169 | p2_15@659@01]
(pop) ; 6
(pop) ; 5
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 5
; [then-branch: 3170 | !(p1_15@658@01) | live]
; [else-branch: 3170 | p1_15@658@01 | live]
(push) ; 6
; [then-branch: 3170 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 6
(push) ; 6
; [else-branch: 3170 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 3171 | !(p1_15@658@01) | dead]
; [else-branch: 3171 | p1_15@658@01 | live]
(push) ; 5
; [else-branch: 3171 | p1_15@658@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 2584 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
  $Snap.unit))
; [eval] p1_15 ==> issubtype(typeof(c_0.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3172 | p1_15@658@01 | live]
; [else-branch: 3172 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3172 | p1_15@658@01]
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_15@658@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
  $Snap.unit))
; [eval] p2_15 ==> issubtype(typeof(c_0_0.Container_valuep), int())
(push) ; 4
; [then-branch: 3173 | p2_15@659@01 | dead]
; [else-branch: 3173 | !(p2_15@659@01) | live]
(push) ; 5
; [else-branch: 3173 | !(p2_15@659@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3174 | p1_15@658@01 | live]
; [else-branch: 3174 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3174 | p1_15@658@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 4
; [then-branch: 3175 | p2_15@659@01 | dead]
; [else-branch: 3175 | !(p2_15@659@01) | live]
(push) ; 5
; [else-branch: 3175 | !(p2_15@659@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@756@01 $Snap)
(assert (= $t@756@01 ($Snap.combine ($Snap.first $t@756@01) ($Snap.second $t@756@01))))
(assert (= ($Snap.first $t@756@01) $Snap.unit))
; [eval] p1_15 ==> (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_161) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3176 | p1_15@658@01 | live]
; [else-branch: 3176 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3176 | p1_15@658@01]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_161) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_161)
(push) ; 7
; [then-branch: 3177 | False | live]
; [else-branch: 3177 | True | live]
(push) ; 8
; [then-branch: 3177 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3177 | True]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_161)
(push) ; 9
; [then-branch: 3178 | False | live]
; [else-branch: 3178 | True | live]
(push) ; 10
; [then-branch: 3178 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3178 | True]
; [eval] _residue_161 <= _current_wait_level_161
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_15@658@01 (<= _residue_161@664@01 _current_wait_level_161@670@01)))
(assert (=
  ($Snap.second $t@756@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@756@01))
    ($Snap.second ($Snap.second $t@756@01)))))
(assert (= ($Snap.first ($Snap.second $t@756@01)) $Snap.unit))
; [eval] p2_15 ==> (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_161_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_161_0) && _residue_161_0 <= _current_wait_level_161_0)
(push) ; 5
; [then-branch: 3179 | p2_15@659@01 | dead]
; [else-branch: 3179 | !(p2_15@659@01) | live]
(push) ; 6
; [else-branch: 3179 | !(p2_15@659@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@756@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@756@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3180 | p1_15@658@01 | live]
; [else-branch: 3180 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3180 | p1_15@658@01]
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@672@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@672@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3181 | _err@672@01 == Null | live]
; [else-branch: 3181 | _err@672@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3181 | _err@672@01 == Null]
(assert (= _err@672@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@756@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@756@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@756@01)))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@756@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@756@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@756@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@756@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@756@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@756@01)))))
  $Snap.unit))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@756@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@756@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@756@01))))) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@756@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@756@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
; [then-branch: 3182 | p2_15@659@01 | dead]
; [else-branch: 3182 | !(p2_15@659@01) | live]
(push) ; 7
; [else-branch: 3182 | !(p2_15@659@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@756@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3183 | p1_15@658@01 | live]
; [else-branch: 3183 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3183 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 9
; [then-branch: 3184 | _err@672@01 == Null | live]
; [else-branch: 3184 | _err@672@01 != Null | live]
(push) ; 10
; [then-branch: 3184 | _err@672@01 == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 3184 | _err@672@01 != Null]
(assert (not (= _err@672@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@672@01 $Ref.null)) (= _err@672@01 $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3185 | _err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]) | dead]
; [else-branch: 3185 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 3185 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
; [then-branch: 3186 | p2_15@659@01 | dead]
; [else-branch: 3186 | !(p2_15@659@01) | live]
(push) ; 10
; [else-branch: 3186 | !(p2_15@659@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3187 | p1_15@658@01 | live]
; [else-branch: 3187 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3187 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 13
; [then-branch: 3188 | _err@672@01 != Null | dead]
; [else-branch: 3188 | _err@672@01 == Null | live]
(push) ; 14
; [else-branch: 3188 | _err@672@01 == Null]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 11
; [then-branch: 3189 | p2_15@659@01 | dead]
; [else-branch: 3189 | !(p2_15@659@01) | live]
(push) ; 12
; [else-branch: 3189 | !(p2_15@659@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3190 | p1_15@658@01 | live]
; [else-branch: 3190 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3190 | p1_15@658@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 11
; [then-branch: 3191 | p2_15@659@01 | dead]
; [else-branch: 3191 | !(p2_15@659@01) | live]
(push) ; 12
; [else-branch: 3191 | !(p2_15@659@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 3181 | _err@672@01 != Null]
(assert (not (= _err@672@01 $Ref.null)))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@756@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@756@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@756@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
; [then-branch: 3192 | p2_15@659@01 | dead]
; [else-branch: 3192 | !(p2_15@659@01) | live]
(push) ; 7
; [else-branch: 3192 | !(p2_15@659@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@756@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3193 | p1_15@658@01 | live]
; [else-branch: 3193 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3193 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 9
; [then-branch: 3194 | _err@672@01 == Null | live]
; [else-branch: 3194 | _err@672@01 != Null | live]
(push) ; 10
; [then-branch: 3194 | _err@672@01 == Null]
(assert (= _err@672@01 $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 3194 | _err@672@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@672@01 $Ref.null)) (= _err@672@01 $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not (= _err@672@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3195 | _err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]) | live]
; [else-branch: 3195 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3195 | _err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType])]
(assert (and
  (not (= _err@672@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
  $Snap.unit))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
; [then-branch: 3196 | p2_15@659@01 | dead]
; [else-branch: 3196 | !(p2_15@659@01) | live]
(push) ; 10
; [else-branch: 3196 | !(p2_15@659@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3197 | p1_15@658@01 | live]
; [else-branch: 3197 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3197 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err@672@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3198 | _err@672@01 != Null | live]
; [else-branch: 3198 | _err@672@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3198 | _err@672@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and p1_15@658@01 (not (= _err@672@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 11
; [then-branch: 3199 | p2_15@659@01 | dead]
; [else-branch: 3199 | !(p2_15@659@01) | live]
(push) ; 12
; [else-branch: 3199 | !(p2_15@659@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3200 | p1_15@658@01 | live]
; [else-branch: 3200 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3200 | p1_15@658@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 11
; [then-branch: 3201 | p2_15@659@01 | dead]
; [else-branch: 3201 | !(p2_15@659@01) | live]
(push) ; 12
; [else-branch: 3201 | !(p2_15@659@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 3195 | !(_err@672@01 != Null && issubtype[Bool](typeof[PyType](_err@672@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@672@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
; [then-branch: 3202 | p2_15@659@01 | dead]
; [else-branch: 3202 | !(p2_15@659@01) | live]
(push) ; 10
; [else-branch: 3202 | !(p2_15@659@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3203 | p1_15@658@01 | live]
; [else-branch: 3203 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3203 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err@672@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= _err@672@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3204 | _err@672@01 != Null | live]
; [else-branch: 3204 | _err@672@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3204 | _err@672@01 != Null]
(assert (not (= _err@672@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not (= _err@672@01 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=> p1_15@658@01 (not (= _err@672@01 $Ref.null))))
(assert (=>
  (and p1_15@658@01 (not (= _err@672@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@672@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 11
; [then-branch: 3205 | p2_15@659@01 | dead]
; [else-branch: 3205 | !(p2_15@659@01) | live]
(push) ; 12
; [else-branch: 3205 | !(p2_15@659@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3206 | p1_15@658@01 | dead]
; [else-branch: 3206 | !(p1_15@658@01) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 3206 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not p1_15@658@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@756@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 11
; [then-branch: 3207 | p2_15@659@01 | dead]
; [else-branch: 3207 | !(p2_15@659@01) | live]
(push) ; 12
; [else-branch: 3207 | !(p2_15@659@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_3: Bool
(declare-const except1_3@757@01 Bool)
; [exec]
; var except2_3: Bool
(declare-const except2_3@758@01 Bool)
; [exec]
; var error_3: Ref
(declare-const error_3@759@01 $Ref)
; [exec]
; var error_3_0: Ref
(declare-const error_3_0@760@01 $Ref)
; [exec]
; var try_finally_11: Int
(declare-const try_finally_11@761@01 Int)
; [exec]
; var try_finally_11_0: Int
(declare-const try_finally_11_0@762@01 Int)
; [exec]
; var b_8: Ref
(declare-const b_8@763@01 $Ref)
; [exec]
; var b_8_0: Ref
(declare-const b_8_0@764@01 $Ref)
; [exec]
; var c_4: Ref
(declare-const c_4@765@01 $Ref)
; [exec]
; var c_4_0: Ref
(declare-const c_4_0@766@01 $Ref)
; [exec]
; var MyException_res_4: Ref
(declare-const MyException_res_4@767@01 $Ref)
; [exec]
; var MyException_res_4_0: Ref
(declare-const MyException_res_4_0@768@01 $Ref)
; [exec]
; var MyException_res_5: Ref
(declare-const MyException_res_5@769@01 $Ref)
; [exec]
; var MyException_res_5_0: Ref
(declare-const MyException_res_5_0@770@01 $Ref)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@771@01 $Perm)
; [exec]
; var _cwl_161_0: Perm
(declare-const _cwl_161_0@772@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@773@01 Seq<Measure$>)
; [exec]
; var _method_measures_161_0: Seq[Measure$]
(declare-const _method_measures_161_0@774@01 Seq<Measure$>)
; [exec]
; var bypass1_3: Bool
(declare-const bypass1_3@775@01 Bool)
; [exec]
; var bypass2_3: Bool
(declare-const bypass2_3@776@01 Bool)
; [exec]
; var thisexcept1_3: Bool
(declare-const thisexcept1_3@777@01 Bool)
; [exec]
; var thisexcept2_3: Bool
(declare-const thisexcept2_3@778@01 Bool)
; [exec]
; var p1_17: Bool
(declare-const p1_17@779@01 Bool)
; [exec]
; var p2_17: Bool
(declare-const p2_17@780@01 Bool)
; [exec]
; var p1_19: Bool
(declare-const p1_19@781@01 Bool)
; [exec]
; var p2_19: Bool
(declare-const p2_19@782@01 Bool)
; [exec]
; var p1_16: Bool
(declare-const p1_16@783@01 Bool)
; [exec]
; var p2_16: Bool
(declare-const p2_16@784@01 Bool)
; [exec]
; var p3_5: Bool
(declare-const p3_5@785@01 Bool)
; [exec]
; var p4_5: Bool
(declare-const p4_5@786@01 Bool)
; [exec]
; var tmp_4: Ref
(declare-const tmp_4@787@01 $Ref)
; [exec]
; var p1_18: Bool
(declare-const p1_18@788@01 Bool)
; [exec]
; var p2_18: Bool
(declare-const p2_18@789@01 Bool)
; [exec]
; var p3_6: Bool
(declare-const p3_6@790@01 Bool)
; [exec]
; var p4_6: Bool
(declare-const p4_6@791@01 Bool)
; [exec]
; var p1_20: Bool
(declare-const p1_20@792@01 Bool)
; [exec]
; var p2_20: Bool
(declare-const p2_20@793@01 Bool)
; [exec]
; var p3_7: Bool
(declare-const p3_7@794@01 Bool)
; [exec]
; var p4_7: Bool
(declare-const p4_7@795@01 Bool)
; [exec]
; var tmp_5: Ref
(declare-const tmp_5@796@01 $Ref)
; [exec]
; inhale p1_15
(declare-const $t@797@01 $Snap)
(assert (= $t@797@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; except1_3 := false
; [exec]
; except2_3 := false
; [eval] p1_15 && !except1_3
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3208 | !(p1_15@658@01) | live]
; [else-branch: 3208 | p1_15@658@01 | live]
(push) ; 6
; [then-branch: 3208 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 6
(push) ; 6
; [else-branch: 3208 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_15@658@01 (not p1_15@658@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3209 | p1_15@658@01 | live]
; [else-branch: 3209 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3209 | p1_15@658@01]
; [exec]
; _method_measures_161 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; b_8 := b_3
; [exec]
; c_4 := c_0
; [eval] p2_15 && !except2_3
(push) ; 6
; [then-branch: 3210 | !(p2_15@659@01) | live]
; [else-branch: 3210 | p2_15@659@01 | live]
(push) ; 7
; [then-branch: 3210 | !(p2_15@659@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 3210 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_15@659@01 (not p2_15@659@01)))
; [then-branch: 3211 | p2_15@659@01 | dead]
; [else-branch: 3211 | !(p2_15@659@01) | live]
(push) ; 6
; [else-branch: 3211 | !(p2_15@659@01)]
(pop) ; 6
; [eval] !(p2_15 && !except2_3)
; [eval] p2_15 && !except2_3
(push) ; 6
; [then-branch: 3212 | !(p2_15@659@01) | live]
; [else-branch: 3212 | p2_15@659@01 | live]
(push) ; 7
; [then-branch: 3212 | !(p2_15@659@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 3212 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3213 | !(p2_15@659@01) | live]
; [else-branch: 3213 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3213 | !(p2_15@659@01)]
; [exec]
; bypass1_3 := !(p1_15 && !except1_3)
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 7
; [then-branch: 3214 | !(p1_15@658@01) | live]
; [else-branch: 3214 | p1_15@658@01 | live]
(push) ; 8
; [then-branch: 3214 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3214 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1_3@798@01 Bool)
(assert (= bypass1_3@798@01 (not p1_15@658@01)))
; [exec]
; bypass2_3 := !(p2_15 && !except2_3)
; [eval] !(p2_15 && !except2_3)
; [eval] p2_15 && !except2_3
(push) ; 7
; [then-branch: 3215 | !(p2_15@659@01) | live]
; [else-branch: 3215 | p2_15@659@01 | live]
(push) ; 8
; [then-branch: 3215 | !(p2_15@659@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 3215 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2_3@799@01 Bool)
(assert (= bypass2_3@799@01 (not p2_15@659@01)))
; [exec]
; p1_16 := p1_15 && (!except1_3 && bool___unbox__(b_8))
; [eval] p1_15 && (!except1_3 && bool___unbox__(b_8))
(push) ; 7
; [then-branch: 3216 | !(p1_15@658@01) | live]
; [else-branch: 3216 | p1_15@658@01 | live]
(push) ; 8
; [then-branch: 3216 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3216 | p1_15@658@01]
; [eval] !except1_3
(push) ; 9
; [then-branch: 3217 | False | live]
; [else-branch: 3217 | True | live]
(push) ; 10
; [then-branch: 3217 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3217 | True]
; [eval] bool___unbox__(b_8)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_3@666@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3@666@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3@666@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_15@658@01
  (and
    (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_3@666@01))))
(declare-const p1_16@800@01 Bool)
(assert (= p1_16@800@01 (and p1_15@658@01 (bool___unbox__ $Snap.unit b_3@666@01))))
; [exec]
; p2_16 := p2_15 && (!except2_3 && bool___unbox__(b_8_0))
; [eval] p2_15 && (!except2_3 && bool___unbox__(b_8_0))
(push) ; 7
; [then-branch: 3218 | !(p2_15@659@01) | live]
; [else-branch: 3218 | p2_15@659@01 | live]
(push) ; 8
; [then-branch: 3218 | !(p2_15@659@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 3218 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(push) ; 9
; [then-branch: 3219 | False | live]
; [else-branch: 3219 | True | live]
(push) ; 10
; [then-branch: 3219 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3219 | True]
; [eval] bool___unbox__(b_8_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_8_0@764@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_8_0@764@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_8_0@764@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_8_0@764@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_8_0@764@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_8_0@764@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_8_0@764@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_15@659@01
  (and
    p2_15@659@01
    (issubtype<Bool> (typeof<PyType> b_8_0@764@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_8_0@764@01))))
(declare-const p2_16@801@01 Bool)
(assert (= p2_16@801@01 (and p2_15@659@01 (bool___unbox__ $Snap.unit b_8_0@764@01))))
; [exec]
; p3_5 := p1_15 && (!except1_3 && !bool___unbox__(b_8))
; [eval] p1_15 && (!except1_3 && !bool___unbox__(b_8))
(push) ; 7
; [then-branch: 3220 | !(p1_15@658@01) | live]
; [else-branch: 3220 | p1_15@658@01 | live]
(push) ; 8
; [then-branch: 3220 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3220 | p1_15@658@01]
; [eval] !except1_3
(push) ; 9
; [then-branch: 3221 | False | live]
; [else-branch: 3221 | True | live]
(push) ; 10
; [then-branch: 3221 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3221 | True]
; [eval] !bool___unbox__(b_8)
; [eval] bool___unbox__(b_8)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_3@666@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3@666@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_3@666@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_3@666@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p3_5@802@01 Bool)
(assert (= p3_5@802@01 (and p1_15@658@01 (not (bool___unbox__ $Snap.unit b_3@666@01)))))
; [exec]
; p4_5 := p2_15 && (!except2_3 && !bool___unbox__(b_8_0))
; [eval] p2_15 && (!except2_3 && !bool___unbox__(b_8_0))
(push) ; 7
; [then-branch: 3222 | !(p2_15@659@01) | live]
; [else-branch: 3222 | p2_15@659@01 | live]
(push) ; 8
; [then-branch: 3222 | !(p2_15@659@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 3222 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(push) ; 9
; [then-branch: 3223 | False | live]
; [else-branch: 3223 | True | live]
(push) ; 10
; [then-branch: 3223 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3223 | True]
; [eval] !bool___unbox__(b_8_0)
; [eval] bool___unbox__(b_8_0)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> b_8_0@764@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_8_0@764@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_8_0@764@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_8_0@764@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_8_0@764@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_8_0@764@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_8_0@764@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p4_5@803@01 Bool)
(assert (= p4_5@803@01 (and p2_15@659@01 (not (bool___unbox__ $Snap.unit b_8_0@764@01)))))
; [exec]
; tmp_4 := new()
(declare-const tmp_4@804@01 $Ref)
(assert (not (= tmp_4@804@01 $Ref.null)))
(assert (not (= tmp_4@804@01 c_4_0@766@01)))
(assert (not (= tmp_4@804@01 c_0@668@01)))
(assert (not (= tmp_4@804@01 _cthread_161_0@661@01)))
(assert (not (= tmp_4@804@01 MyException_res_5_0@770@01)))
(assert (not (= tmp_4@804@01 MyException_res_4@767@01)))
(assert (not (= tmp_4@804@01 b_3_0@667@01)))
(assert (not (= tmp_4@804@01 error_3@759@01)))
(assert (not (= tmp_4@804@01 MyException_res_5@769@01)))
(assert (not (= tmp_4@804@01 b_8_0@764@01)))
(assert (not
  (=
    tmp_4@804@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
(assert (not (= tmp_4@804@01 b_3@666@01)))
(assert (not (= tmp_4@804@01 tmp_4@787@01)))
(assert (not (= tmp_4@804@01 _err_4@673@01)))
(assert (not (= tmp_4@804@01 tmp_5@796@01)))
(assert (not (= tmp_4@804@01 error_3_0@760@01)))
(assert (not (= tmp_4@804@01 _cthread_161@660@01)))
(assert (not (= tmp_4@804@01 MyException_res_4_0@768@01)))
(assert (not (= tmp_4@804@01 c_0_0@669@01)))
; [eval] p1_16 && !except1_3
(push) ; 7
; [then-branch: 3224 | !(p1_16@800@01) | live]
; [else-branch: 3224 | p1_16@800@01 | live]
(push) ; 8
; [then-branch: 3224 | !(p1_16@800@01)]
(assert (not p1_16@800@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3224 | p1_16@800@01]
(assert p1_16@800@01)
; [eval] !except1_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_16@800@01 (not p1_16@800@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_16@800@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_16@800@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3225 | p1_16@800@01 | live]
; [else-branch: 3225 | !(p1_16@800@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3225 | p1_16@800@01]
(assert p1_16@800@01)
; [exec]
; MyException_res_4 := tmp_4
; [eval] p2_16 && !except2_3
(push) ; 8
; [then-branch: 3226 | !(p2_16@801@01) | live]
; [else-branch: 3226 | p2_16@801@01 | live]
(push) ; 9
; [then-branch: 3226 | !(p2_16@801@01)]
(assert (not p2_16@801@01))
(pop) ; 9
(push) ; 9
; [else-branch: 3226 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_16@801@01 (not p2_16@801@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_16@801@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3227 | p2_16@801@01 | dead]
; [else-branch: 3227 | !(p2_16@801@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 3227 | !(p2_16@801@01)]
(assert (not p2_16@801@01))
(pop) ; 8
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 8
; [then-branch: 3228 | !(p2_16@801@01) | live]
; [else-branch: 3228 | p2_16@801@01 | live]
(push) ; 9
; [then-branch: 3228 | !(p2_16@801@01)]
(assert (not p2_16@801@01))
(pop) ; 9
(push) ; 9
; [else-branch: 3228 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_16@801@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_16@801@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3229 | !(p2_16@801@01) | live]
; [else-branch: 3229 | p2_16@801@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3229 | !(p2_16@801@01)]
(assert (not p2_16@801@01))
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 3230 | !(p1_16@800@01) | live]
; [else-branch: 3230 | p1_16@800@01 | live]
(push) ; 10
; [then-branch: 3230 | !(p1_16@800@01)]
(assert (not p1_16@800@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3230 | p1_16@800@01]
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_16@800@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3231 | p1_16@800@01 | live]
; [else-branch: 3231 | !(p1_16@800@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3231 | p1_16@800@01]
; [exec]
; inhale typeof(MyException_res_4) == MyException()
(declare-const $t@805@01 $Snap)
(assert (= $t@805@01 $Snap.unit))
; [eval] typeof(MyException_res_4) == MyException()
; [eval] typeof(MyException_res_4)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_4@804@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_16 && !except2_3
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3232 | !(p2_16@801@01) | live]
; [else-branch: 3232 | p2_16@801@01 | live]
(push) ; 11
; [then-branch: 3232 | !(p2_16@801@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 3232 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 3233 | p2_16@801@01 | dead]
; [else-branch: 3233 | !(p2_16@801@01) | live]
(push) ; 10
; [else-branch: 3233 | !(p2_16@801@01)]
(pop) ; 10
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 10
; [then-branch: 3234 | !(p2_16@801@01) | live]
; [else-branch: 3234 | p2_16@801@01 | live]
(push) ; 11
; [then-branch: 3234 | !(p2_16@801@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 3234 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_16@801@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3235 | !(p2_16@801@01) | live]
; [else-branch: 3235 | p2_16@801@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3235 | !(p2_16@801@01)]
; [eval] p1_16 && !except1_3
(push) ; 11
; [then-branch: 3236 | !(p1_16@800@01) | live]
; [else-branch: 3236 | p1_16@800@01 | live]
(push) ; 12
; [then-branch: 3236 | !(p1_16@800@01)]
(assert (not p1_16@800@01))
(pop) ; 12
(push) ; 12
; [else-branch: 3236 | p1_16@800@01]
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_16@800@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3237 | p1_16@800@01 | live]
; [else-branch: 3237 | !(p1_16@800@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3237 | p1_16@800@01]
; [exec]
; _err := MyException_res_4
; [exec]
; except1_3 := true
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 3238 | !(p2_16@801@01) | live]
; [else-branch: 3238 | p2_16@801@01 | live]
(push) ; 13
; [then-branch: 3238 | !(p2_16@801@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 3238 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 3239 | p2_16@801@01 | dead]
; [else-branch: 3239 | !(p2_16@801@01) | live]
(push) ; 12
; [else-branch: 3239 | !(p2_16@801@01)]
(pop) ; 12
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 3240 | !(p2_16@801@01) | live]
; [else-branch: 3240 | p2_16@801@01 | live]
(push) ; 13
; [then-branch: 3240 | !(p2_16@801@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 3240 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_16@801@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3241 | !(p2_16@801@01) | live]
; [else-branch: 3241 | p2_16@801@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3241 | !(p2_16@801@01)]
; [exec]
; thisexcept1_3 := except1_3 && !bypass1_3
; [eval] except1_3 && !bypass1_3
(push) ; 13
; [then-branch: 3242 | False | live]
; [else-branch: 3242 | True | live]
(push) ; 14
; [then-branch: 3242 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 3242 | True]
; [eval] !bypass1_3
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_3@806@01 Bool)
(assert (= thisexcept1_3@806@01 (not bypass1_3@798@01)))
; [exec]
; thisexcept2_3 := except2_3 && !bypass2_3
; [eval] except2_3 && !bypass2_3
; [exec]
; p1_17 := p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
; [eval] p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 3243 | !(p1_15@658@01) | live]
; [else-branch: 3243 | p1_15@658@01 | live]
(push) ; 14
; [then-branch: 3243 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3243 | p1_15@658@01]
(push) ; 15
; [then-branch: 3244 | !(thisexcept1_3@806@01) | live]
; [else-branch: 3244 | thisexcept1_3@806@01 | live]
(push) ; 16
; [then-branch: 3244 | !(thisexcept1_3@806@01)]
(assert (not thisexcept1_3@806@01))
(pop) ; 16
(push) ; 16
; [else-branch: 3244 | thisexcept1_3@806@01]
(assert thisexcept1_3@806@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_3@806@01 (not thisexcept1_3@806@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=> p1_15@658@01 (or thisexcept1_3@806@01 (not thisexcept1_3@806@01))))
(declare-const p1_17@807@01 Bool)
(assert (=
  p1_17@807@01
  (and
    p1_15@658@01
    (and
      thisexcept1_3@806@01
      (issubtype<Bool> (typeof<PyType> tmp_4@804@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_17 := p2_15 &&
;   (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
; [eval] p2_15 && (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
(push) ; 13
; [then-branch: 3245 | !(p2_15@659@01) | live]
; [else-branch: 3245 | p2_15@659@01 | live]
(push) ; 14
; [then-branch: 3245 | !(p2_15@659@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 3245 | p2_15@659@01]
(assert p2_15@659@01)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_17@807@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not p1_17@807@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3246 | p1_17@807@01 | live]
; [else-branch: 3246 | !(p1_17@807@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3246 | p1_17@807@01]
(assert p1_17@807@01)
; [exec]
; except1_3 := false
; [then-branch: 3247 | False | dead]
; [else-branch: 3247 | True | live]
(push) ; 14
; [else-branch: 3247 | True]
(pop) ; 14
; [eval] !p2_17
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3248 | True | live]
; [else-branch: 3248 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3248 | True]
; [exec]
; p1_18 := p1_17 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_17 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 15
; [then-branch: 3249 | !(p1_17@807@01) | live]
; [else-branch: 3249 | p1_17@807@01 | live]
(push) ; 16
; [then-branch: 3249 | !(p1_17@807@01)]
(assert (not p1_17@807@01))
(pop) ; 16
(push) ; 16
; [else-branch: 3249 | p1_17@807@01]
; [eval] !except1_3
(push) ; 17
; [then-branch: 3250 | False | live]
; [else-branch: 3250 | True | live]
(push) ; 18
; [then-branch: 3250 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 3250 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p1_17@807@01 (not p1_17@807@01)))
; [exec]
; p2_18 := p2_17 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_17 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_6 := p1_17 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_17 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 15
; [then-branch: 3251 | !(p1_17@807@01) | live]
; [else-branch: 3251 | p1_17@807@01 | live]
(push) ; 16
; [then-branch: 3251 | !(p1_17@807@01)]
(assert (not p1_17@807@01))
(pop) ; 16
(push) ; 16
; [else-branch: 3251 | p1_17@807@01]
; [eval] !except1_3
(push) ; 17
; [then-branch: 3252 | False | live]
; [else-branch: 3252 | True | live]
(push) ; 18
; [then-branch: 3252 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 3252 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p4_6 := p2_17 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_17 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_18 && !except1_3
; [then-branch: 3253 | False | dead]
; [else-branch: 3253 | True | live]
(push) ; 15
; [else-branch: 3253 | True]
(pop) ; 15
; [eval] !(p1_18 && !except1_3)
; [eval] p1_18 && !except1_3
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3254 | True | live]
; [else-branch: 3254 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3254 | True]
; [eval] p2_18 && !except2_3
; [then-branch: 3255 | False | dead]
; [else-branch: 3255 | True | live]
(push) ; 16
; [else-branch: 3255 | True]
(pop) ; 16
; [eval] !(p2_18 && !except2_3)
; [eval] p2_18 && !except2_3
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3256 | True | live]
; [else-branch: 3256 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3256 | True]
; [eval] p1_17 && !except1_3
(push) ; 17
; [then-branch: 3257 | !(p1_17@807@01) | live]
; [else-branch: 3257 | p1_17@807@01 | live]
(push) ; 18
; [then-branch: 3257 | !(p1_17@807@01)]
(assert (not p1_17@807@01))
(pop) ; 18
(push) ; 18
; [else-branch: 3257 | p1_17@807@01]
; [eval] !except1_3
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_17@807@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3258 | p1_17@807@01 | live]
; [else-branch: 3258 | !(p1_17@807@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3258 | p1_17@807@01]
; [exec]
; c_4.Container_value := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 18
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 18
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_value@808@01 $Ref)
(assert (= Container_value@808@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p2_17 && !except2_3
; [then-branch: 3259 | False | dead]
; [else-branch: 3259 | True | live]
(push) ; 18
; [else-branch: 3259 | True]
(pop) ; 18
; [eval] !(p2_17 && !except2_3)
; [eval] p2_17 && !except2_3
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3260 | True | live]
; [else-branch: 3260 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3260 | True]
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 3261 | !(p1_15@658@01) | live]
; [else-branch: 3261 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 3261 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3261 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3262 | p1_15@658@01 | live]
; [else-branch: 3262 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3262 | p1_15@658@01]
; [exec]
; _err := null
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 3263 | !(p2_15@659@01) | live]
; [else-branch: 3263 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 3263 | !(p2_15@659@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 3263 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 3264 | p2_15@659@01 | dead]
; [else-branch: 3264 | !(p2_15@659@01) | live]
(push) ; 20
; [else-branch: 3264 | !(p2_15@659@01)]
(pop) ; 20
; [eval] !(p2_15 && !except2_3)
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 3265 | !(p2_15@659@01) | live]
; [else-branch: 3265 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 3265 | !(p2_15@659@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 3265 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3266 | !(p2_15@659@01) | live]
; [else-branch: 3266 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3266 | !(p2_15@659@01)]
; [exec]
; p1_19 := p1_15 && !thisexcept1_3
; [eval] p1_15 && !thisexcept1_3
(push) ; 21
; [then-branch: 3267 | !(p1_15@658@01) | live]
; [else-branch: 3267 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 3267 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3267 | p1_15@658@01]
; [eval] !thisexcept1_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(declare-const p1_19@809@01 Bool)
(assert (= p1_19@809@01 (and p1_15@658@01 (not thisexcept1_3@806@01))))
; [exec]
; p2_19 := p2_15 && !thisexcept2_3
; [eval] p2_15 && !thisexcept2_3
(push) ; 21
; [then-branch: 3268 | !(p2_15@659@01) | live]
; [else-branch: 3268 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 3268 | !(p2_15@659@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 3268 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !thisexcept2_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p1_20 := p1_19 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_19 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 3269 | !(p1_19@809@01) | live]
; [else-branch: 3269 | p1_19@809@01 | live]
(push) ; 22
; [then-branch: 3269 | !(p1_19@809@01)]
(assert (not p1_19@809@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3269 | p1_19@809@01]
(assert p1_19@809@01)
; [eval] !except1_3
(push) ; 23
; [then-branch: 3270 | False | live]
; [else-branch: 3270 | True | live]
(push) ; 24
; [then-branch: 3270 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3270 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or p1_19@809@01 (not p1_19@809@01)))
; [exec]
; p2_20 := p2_19 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_19 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 3271 | !(p2_15@659@01) | live]
; [else-branch: 3271 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 3271 | !(p2_15@659@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 3271 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(push) ; 23
; [then-branch: 3272 | False | live]
; [else-branch: 3272 | True | live]
(push) ; 24
; [then-branch: 3272 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3272 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p3_7 := p1_19 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_19 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 3273 | !(p1_19@809@01) | live]
; [else-branch: 3273 | p1_19@809@01 | live]
(push) ; 22
; [then-branch: 3273 | !(p1_19@809@01)]
(assert (not p1_19@809@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3273 | p1_19@809@01]
(assert p1_19@809@01)
; [eval] !except1_3
(push) ; 23
; [then-branch: 3274 | False | live]
; [else-branch: 3274 | True | live]
(push) ; 24
; [then-branch: 3274 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3274 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p4_7 := p2_19 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_19 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 3275 | !(p2_15@659@01) | live]
; [else-branch: 3275 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 3275 | !(p2_15@659@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 3275 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(push) ; 23
; [then-branch: 3276 | False | live]
; [else-branch: 3276 | True | live]
(push) ; 24
; [then-branch: 3276 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3276 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [eval] p1_20 && !except1_3
; [then-branch: 3277 | False | dead]
; [else-branch: 3277 | True | live]
(push) ; 21
; [else-branch: 3277 | True]
(pop) ; 21
; [eval] !(p1_20 && !except1_3)
; [eval] p1_20 && !except1_3
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3278 | True | live]
; [else-branch: 3278 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3278 | True]
; [eval] p2_20 && !except2_3
; [then-branch: 3279 | False | dead]
; [else-branch: 3279 | True | live]
(push) ; 22
; [else-branch: 3279 | True]
(pop) ; 22
; [eval] !(p2_20 && !except2_3)
; [eval] p2_20 && !except2_3
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3280 | True | live]
; [else-branch: 3280 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3280 | True]
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 3281 | !(p1_19@809@01) | live]
; [else-branch: 3281 | p1_19@809@01 | live]
(push) ; 24
; [then-branch: 3281 | !(p1_19@809@01)]
(assert (not p1_19@809@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3281 | p1_19@809@01]
(assert p1_19@809@01)
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_19@809@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3282 | p1_19@809@01 | dead]
; [else-branch: 3282 | !(p1_19@809@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 3282 | !(p1_19@809@01)]
(assert (not p1_19@809@01))
(pop) ; 23
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 3283 | !(p1_19@809@01) | live]
; [else-branch: 3283 | p1_19@809@01 | live]
(push) ; 24
; [then-branch: 3283 | !(p1_19@809@01)]
(assert (not p1_19@809@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3283 | p1_19@809@01]
(assert p1_19@809@01)
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p1_19@809@01))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_19@809@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3284 | !(p1_19@809@01) | live]
; [else-branch: 3284 | p1_19@809@01 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3284 | !(p1_19@809@01)]
(assert (not p1_19@809@01))
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 3285 | !(p2_15@659@01) | live]
; [else-branch: 3285 | p2_15@659@01 | live]
(push) ; 25
; [then-branch: 3285 | !(p2_15@659@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 3285 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 3286 | p2_15@659@01 | dead]
; [else-branch: 3286 | !(p2_15@659@01) | live]
(push) ; 24
; [else-branch: 3286 | !(p2_15@659@01)]
(pop) ; 24
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 3287 | !(p2_15@659@01) | live]
; [else-branch: 3287 | p2_15@659@01 | live]
(push) ; 25
; [then-branch: 3287 | !(p2_15@659@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 3287 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3288 | !(p2_15@659@01) | live]
; [else-branch: 3288 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3288 | !(p2_15@659@01)]
; [exec]
; tmp_5 := new()
(declare-const tmp_5@810@01 $Ref)
(assert (not (= tmp_5@810@01 $Ref.null)))
(assert (not (= tmp_5@810@01 c_4_0@766@01)))
(assert (not (= tmp_5@810@01 c_0@668@01)))
(assert (not (= tmp_5@810@01 _cthread_161_0@661@01)))
(assert (not (= tmp_5@810@01 MyException_res_5_0@770@01)))
(assert (not (= tmp_5@810@01 b_3_0@667@01)))
(assert (not (= tmp_5@810@01 error_3@759@01)))
(assert (not (= tmp_5@810@01 MyException_res_5@769@01)))
(assert (not (= tmp_5@810@01 b_8_0@764@01)))
(assert (not (= tmp_5@810@01 b_3@666@01)))
(assert (not (= tmp_5@810@01 _err_4@673@01)))
(assert (not (= tmp_5@810@01 tmp_5@796@01)))
(assert (not (= tmp_5@810@01 error_3_0@760@01)))
(assert (not (= tmp_5@810@01 _cthread_161@660@01)))
(assert (not (= tmp_5@810@01 tmp_4@804@01)))
(assert (not (= tmp_5@810@01 Container_value@808@01)))
(assert (not (= tmp_5@810@01 MyException_res_4_0@768@01)))
(assert (not (= tmp_5@810@01 c_0_0@669@01)))
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 3289 | !(p1_19@809@01) | live]
; [else-branch: 3289 | p1_19@809@01 | live]
(push) ; 26
; [then-branch: 3289 | !(p1_19@809@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 3289 | p1_19@809@01]
(assert p1_19@809@01)
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 3290 | p1_19@809@01 | dead]
; [else-branch: 3290 | !(p1_19@809@01) | live]
(push) ; 25
; [else-branch: 3290 | !(p1_19@809@01)]
(pop) ; 25
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 3291 | !(p1_19@809@01) | live]
; [else-branch: 3291 | p1_19@809@01 | live]
(push) ; 26
; [then-branch: 3291 | !(p1_19@809@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 3291 | p1_19@809@01]
(assert p1_19@809@01)
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not p1_19@809@01))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3292 | !(p1_19@809@01) | live]
; [else-branch: 3292 | p1_19@809@01 | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3292 | !(p1_19@809@01)]
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 3293 | !(p2_15@659@01) | live]
; [else-branch: 3293 | p2_15@659@01 | live]
(push) ; 27
; [then-branch: 3293 | !(p2_15@659@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 3293 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 3294 | p2_15@659@01 | dead]
; [else-branch: 3294 | !(p2_15@659@01) | live]
(push) ; 26
; [else-branch: 3294 | !(p2_15@659@01)]
(pop) ; 26
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 3295 | !(p2_15@659@01) | live]
; [else-branch: 3295 | p2_15@659@01 | live]
(push) ; 27
; [then-branch: 3295 | !(p2_15@659@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 3295 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3296 | !(p2_15@659@01) | live]
; [else-branch: 3296 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3296 | !(p2_15@659@01)]
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 3297 | !(p1_19@809@01) | live]
; [else-branch: 3297 | p1_19@809@01 | live]
(push) ; 28
; [then-branch: 3297 | !(p1_19@809@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 3297 | p1_19@809@01]
(assert p1_19@809@01)
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 3298 | p1_19@809@01 | dead]
; [else-branch: 3298 | !(p1_19@809@01) | live]
(push) ; 27
; [else-branch: 3298 | !(p1_19@809@01)]
(pop) ; 27
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 3299 | !(p1_19@809@01) | live]
; [else-branch: 3299 | p1_19@809@01 | live]
(push) ; 28
; [then-branch: 3299 | !(p1_19@809@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 3299 | p1_19@809@01]
(assert p1_19@809@01)
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not p1_19@809@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3300 | !(p1_19@809@01) | live]
; [else-branch: 3300 | p1_19@809@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3300 | !(p1_19@809@01)]
; [eval] p2_19 && !except2_3
(push) ; 28
; [then-branch: 3301 | !(p2_15@659@01) | live]
; [else-branch: 3301 | p2_15@659@01 | live]
(push) ; 29
; [then-branch: 3301 | !(p2_15@659@01)]
(pop) ; 29
(push) ; 29
; [else-branch: 3301 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 3302 | p2_15@659@01 | dead]
; [else-branch: 3302 | !(p2_15@659@01) | live]
(push) ; 28
; [else-branch: 3302 | !(p2_15@659@01)]
(pop) ; 28
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 28
; [then-branch: 3303 | !(p2_15@659@01) | live]
; [else-branch: 3303 | p2_15@659@01 | live]
(push) ; 29
; [then-branch: 3303 | !(p2_15@659@01)]
(pop) ; 29
(push) ; 29
; [else-branch: 3303 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3304 | !(p2_15@659@01) | live]
; [else-branch: 3304 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3304 | !(p2_15@659@01)]
; [eval] p1_19 && !except1_3
(push) ; 29
; [then-branch: 3305 | !(p1_19@809@01) | live]
; [else-branch: 3305 | p1_19@809@01 | live]
(push) ; 30
; [then-branch: 3305 | !(p1_19@809@01)]
(pop) ; 30
(push) ; 30
; [else-branch: 3305 | p1_19@809@01]
(assert p1_19@809@01)
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 3306 | p1_19@809@01 | dead]
; [else-branch: 3306 | !(p1_19@809@01) | live]
(push) ; 29
; [else-branch: 3306 | !(p1_19@809@01)]
(pop) ; 29
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 29
; [then-branch: 3307 | !(p1_19@809@01) | live]
; [else-branch: 3307 | p1_19@809@01 | live]
(push) ; 30
; [then-branch: 3307 | !(p1_19@809@01)]
(pop) ; 30
(push) ; 30
; [else-branch: 3307 | p1_19@809@01]
(assert p1_19@809@01)
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not p1_19@809@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3308 | !(p1_19@809@01) | live]
; [else-branch: 3308 | p1_19@809@01 | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3308 | !(p1_19@809@01)]
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 3309 | !(p2_15@659@01) | live]
; [else-branch: 3309 | p2_15@659@01 | live]
(push) ; 31
; [then-branch: 3309 | !(p2_15@659@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 3309 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 3310 | p2_15@659@01 | dead]
; [else-branch: 3310 | !(p2_15@659@01) | live]
(push) ; 30
; [else-branch: 3310 | !(p2_15@659@01)]
(pop) ; 30
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 3311 | !(p2_15@659@01) | live]
; [else-branch: 3311 | p2_15@659@01 | live]
(push) ; 31
; [then-branch: 3311 | !(p2_15@659@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 3311 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3312 | !(p2_15@659@01) | live]
; [else-branch: 3312 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3312 | !(p2_15@659@01)]
; [eval] p1_15 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3313 | p1_15@658@01 | live]
; [else-branch: 3313 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3313 | p1_15@658@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_15 ==> true
(push) ; 31
; [then-branch: 3314 | p2_15@659@01 | dead]
; [else-branch: 3314 | !(p2_15@659@01) | live]
(push) ; 32
; [else-branch: 3314 | !(p2_15@659@01)]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3315 | p1_15@658@01 | live]
; [else-branch: 3315 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3315 | p1_15@658@01]
; [eval] _err == null
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3316 | True | live]
; [else-branch: 3316 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3316 | True]
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(push) ; 33
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@808@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@808@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 33
(pop) ; 33
; Joined path conditions
(push) ; 33
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@808@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@808@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 33
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@808@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@808@01 (__prim__int___box__ $Snap.unit 0)))
; [then-branch: 3317 | p2_15@659@01 | dead]
; [else-branch: 3317 | !(p2_15@659@01) | live]
(push) ; 33
; [else-branch: 3317 | !(p2_15@659@01)]
(push) ; 34
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3318 | p1_15@658@01 | live]
; [else-branch: 3318 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3318 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
; [then-branch: 3319 | False | dead]
; [else-branch: 3319 | True | live]
(push) ; 35
; [else-branch: 3319 | True]
; [then-branch: 3320 | p2_15@659@01 | dead]
; [else-branch: 3320 | !(p2_15@659@01) | live]
(push) ; 36
; [else-branch: 3320 | !(p2_15@659@01)]
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3321 | p1_15@658@01 | live]
; [else-branch: 3321 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3321 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 39
; [then-branch: 3322 | False | dead]
; [else-branch: 3322 | True | live]
(push) ; 40
; [else-branch: 3322 | True]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 37
; [then-branch: 3323 | p2_15@659@01 | dead]
; [else-branch: 3323 | !(p2_15@659@01) | live]
(push) ; 38
; [else-branch: 3323 | !(p2_15@659@01)]
(pop) ; 38
(pop) ; 37
; Joined path conditions
; [eval] p1_15 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3324 | p1_15@658@01 | live]
; [else-branch: 3324 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3324 | p1_15@658@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 39
; [then-branch: 3325 | False | live]
; [else-branch: 3325 | True | live]
(push) ; 40
; [then-branch: 3325 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 3325 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 41
; [then-branch: 3326 | False | live]
; [else-branch: 3326 | True | live]
(push) ; 42
; [then-branch: 3326 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 3326 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 43
; [then-branch: 3327 | False | live]
; [else-branch: 3327 | True | live]
(push) ; 44
; [then-branch: 3327 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3327 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; [eval] p2_15 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 37
; [then-branch: 3328 | p2_15@659@01 | dead]
; [else-branch: 3328 | !(p2_15@659@01) | live]
(push) ; 38
; [else-branch: 3328 | !(p2_15@659@01)]
(pop) ; 38
(pop) ; 37
; Joined path conditions
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 3329 | !(p1_15@658@01) | live]
; [else-branch: 3329 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 3329 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3329 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 3330 | !(p1_15@658@01) | dead]
; [else-branch: 3330 | p1_15@658@01 | live]
(push) ; 19
; [else-branch: 3330 | p1_15@658@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !(p1_17 && !except1_3)
; [eval] p1_17 && !except1_3
(push) ; 17
; [then-branch: 3331 | !(p1_17@807@01) | live]
; [else-branch: 3331 | p1_17@807@01 | live]
(push) ; 18
; [then-branch: 3331 | !(p1_17@807@01)]
(assert (not p1_17@807@01))
(pop) ; 18
(push) ; 18
; [else-branch: 3331 | p1_17@807@01]
; [eval] !except1_3
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 3332 | !(p1_17@807@01) | dead]
; [else-branch: 3332 | p1_17@807@01 | live]
(push) ; 17
; [else-branch: 3332 | p1_17@807@01]
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !p1_17
(push) ; 13
(set-option :timeout 10)
(assert (not p1_17@807@01))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3333 | !(p1_17@807@01) | dead]
; [else-branch: 3333 | p1_17@807@01 | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 3333 | p1_17@807@01]
(assert p1_17@807@01)
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 11
; [then-branch: 3334 | !(p1_16@800@01) | live]
; [else-branch: 3334 | p1_16@800@01 | live]
(push) ; 12
; [then-branch: 3334 | !(p1_16@800@01)]
(assert (not p1_16@800@01))
(pop) ; 12
(push) ; 12
; [else-branch: 3334 | p1_16@800@01]
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 3335 | !(p1_16@800@01) | dead]
; [else-branch: 3335 | p1_16@800@01 | live]
(push) ; 11
; [else-branch: 3335 | p1_16@800@01]
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 3336 | !(p1_16@800@01) | live]
; [else-branch: 3336 | p1_16@800@01 | live]
(push) ; 10
; [then-branch: 3336 | !(p1_16@800@01)]
(assert (not p1_16@800@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3336 | p1_16@800@01]
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 3337 | !(p1_16@800@01) | dead]
; [else-branch: 3337 | p1_16@800@01 | live]
(push) ; 9
; [else-branch: 3337 | p1_16@800@01]
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 3225 | !(p1_16@800@01)]
(assert (not p1_16@800@01))
(pop) ; 7
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 7
; [then-branch: 3338 | !(p1_16@800@01) | live]
; [else-branch: 3338 | p1_16@800@01 | live]
(push) ; 8
; [then-branch: 3338 | !(p1_16@800@01)]
(assert (not p1_16@800@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3338 | p1_16@800@01]
(assert p1_16@800@01)
; [eval] !except1_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_16@800@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_16@800@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3339 | !(p1_16@800@01) | live]
; [else-branch: 3339 | p1_16@800@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3339 | !(p1_16@800@01)]
(assert (not p1_16@800@01))
; [eval] p2_16 && !except2_3
(push) ; 8
; [then-branch: 3340 | !(p2_16@801@01) | live]
; [else-branch: 3340 | p2_16@801@01 | live]
(push) ; 9
; [then-branch: 3340 | !(p2_16@801@01)]
(assert (not p2_16@801@01))
(pop) ; 9
(push) ; 9
; [else-branch: 3340 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_16@801@01 (not p2_16@801@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_16@801@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3341 | p2_16@801@01 | dead]
; [else-branch: 3341 | !(p2_16@801@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 3341 | !(p2_16@801@01)]
(assert (not p2_16@801@01))
(pop) ; 8
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 8
; [then-branch: 3342 | !(p2_16@801@01) | live]
; [else-branch: 3342 | p2_16@801@01 | live]
(push) ; 9
; [then-branch: 3342 | !(p2_16@801@01)]
(assert (not p2_16@801@01))
(pop) ; 9
(push) ; 9
; [else-branch: 3342 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_16@801@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_16@801@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3343 | !(p2_16@801@01) | live]
; [else-branch: 3343 | p2_16@801@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3343 | !(p2_16@801@01)]
(assert (not p2_16@801@01))
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 3344 | !(p1_16@800@01) | live]
; [else-branch: 3344 | p1_16@800@01 | live]
(push) ; 10
; [then-branch: 3344 | !(p1_16@800@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 3344 | p1_16@800@01]
(assert p1_16@800@01)
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 3345 | p1_16@800@01 | dead]
; [else-branch: 3345 | !(p1_16@800@01) | live]
(push) ; 9
; [else-branch: 3345 | !(p1_16@800@01)]
(pop) ; 9
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 9
; [then-branch: 3346 | !(p1_16@800@01) | live]
; [else-branch: 3346 | p1_16@800@01 | live]
(push) ; 10
; [then-branch: 3346 | !(p1_16@800@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 3346 | p1_16@800@01]
(assert p1_16@800@01)
; [eval] !except1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_16@800@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3347 | !(p1_16@800@01) | live]
; [else-branch: 3347 | p1_16@800@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3347 | !(p1_16@800@01)]
; [eval] p2_16 && !except2_3
(push) ; 10
; [then-branch: 3348 | !(p2_16@801@01) | live]
; [else-branch: 3348 | p2_16@801@01 | live]
(push) ; 11
; [then-branch: 3348 | !(p2_16@801@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 3348 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 3349 | p2_16@801@01 | dead]
; [else-branch: 3349 | !(p2_16@801@01) | live]
(push) ; 10
; [else-branch: 3349 | !(p2_16@801@01)]
(pop) ; 10
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 10
; [then-branch: 3350 | !(p2_16@801@01) | live]
; [else-branch: 3350 | p2_16@801@01 | live]
(push) ; 11
; [then-branch: 3350 | !(p2_16@801@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 3350 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_16@801@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3351 | !(p2_16@801@01) | live]
; [else-branch: 3351 | p2_16@801@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3351 | !(p2_16@801@01)]
; [eval] p1_16 && !except1_3
(push) ; 11
; [then-branch: 3352 | !(p1_16@800@01) | live]
; [else-branch: 3352 | p1_16@800@01 | live]
(push) ; 12
; [then-branch: 3352 | !(p1_16@800@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 3352 | p1_16@800@01]
(assert p1_16@800@01)
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 3353 | p1_16@800@01 | dead]
; [else-branch: 3353 | !(p1_16@800@01) | live]
(push) ; 11
; [else-branch: 3353 | !(p1_16@800@01)]
(pop) ; 11
; [eval] !(p1_16 && !except1_3)
; [eval] p1_16 && !except1_3
(push) ; 11
; [then-branch: 3354 | !(p1_16@800@01) | live]
; [else-branch: 3354 | p1_16@800@01 | live]
(push) ; 12
; [then-branch: 3354 | !(p1_16@800@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 3354 | p1_16@800@01]
(assert p1_16@800@01)
; [eval] !except1_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p1_16@800@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3355 | !(p1_16@800@01) | live]
; [else-branch: 3355 | p1_16@800@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3355 | !(p1_16@800@01)]
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 3356 | !(p2_16@801@01) | live]
; [else-branch: 3356 | p2_16@801@01 | live]
(push) ; 13
; [then-branch: 3356 | !(p2_16@801@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 3356 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 3357 | p2_16@801@01 | dead]
; [else-branch: 3357 | !(p2_16@801@01) | live]
(push) ; 12
; [else-branch: 3357 | !(p2_16@801@01)]
(pop) ; 12
; [eval] !(p2_16 && !except2_3)
; [eval] p2_16 && !except2_3
(push) ; 12
; [then-branch: 3358 | !(p2_16@801@01) | live]
; [else-branch: 3358 | p2_16@801@01 | live]
(push) ; 13
; [then-branch: 3358 | !(p2_16@801@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 3358 | p2_16@801@01]
(assert p2_16@801@01)
; [eval] !except2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_16@801@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3359 | !(p2_16@801@01) | live]
; [else-branch: 3359 | p2_16@801@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3359 | !(p2_16@801@01)]
; [exec]
; thisexcept1_3 := except1_3 && !bypass1_3
; [eval] except1_3 && !bypass1_3
; [exec]
; thisexcept2_3 := except2_3 && !bypass2_3
; [eval] except2_3 && !bypass2_3
; [exec]
; p1_17 := p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
; [eval] p1_15 && (thisexcept1_3 && issubtype(typeof(_err), MyException()))
(push) ; 13
; [then-branch: 3360 | !(p1_15@658@01) | live]
; [else-branch: 3360 | p1_15@658@01 | live]
(push) ; 14
; [then-branch: 3360 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3360 | p1_15@658@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p2_17 := p2_15 &&
;   (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
; [eval] p2_15 && (thisexcept2_3 && issubtype(typeof(_err_4), MyException()))
(push) ; 13
; [then-branch: 3361 | !(p2_15@659@01) | live]
; [else-branch: 3361 | p2_15@659@01 | live]
(push) ; 14
; [then-branch: 3361 | !(p2_15@659@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 3361 | p2_15@659@01]
(assert p2_15@659@01)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 3362 | False | dead]
; [else-branch: 3362 | True | live]
(push) ; 13
; [else-branch: 3362 | True]
(pop) ; 13
; [eval] !p1_17
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3363 | True | live]
; [else-branch: 3363 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3363 | True]
; [then-branch: 3364 | False | dead]
; [else-branch: 3364 | True | live]
(push) ; 14
; [else-branch: 3364 | True]
(pop) ; 14
; [eval] !p2_17
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3365 | True | live]
; [else-branch: 3365 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3365 | True]
; [exec]
; p1_18 := p1_17 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_17 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_18 := p2_17 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_17 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_6 := p1_17 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_17 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_6 := p2_17 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_17 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_18 && !except1_3
; [then-branch: 3366 | False | dead]
; [else-branch: 3366 | True | live]
(push) ; 15
; [else-branch: 3366 | True]
(pop) ; 15
; [eval] !(p1_18 && !except1_3)
; [eval] p1_18 && !except1_3
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3367 | True | live]
; [else-branch: 3367 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3367 | True]
; [eval] p2_18 && !except2_3
; [then-branch: 3368 | False | dead]
; [else-branch: 3368 | True | live]
(push) ; 16
; [else-branch: 3368 | True]
(pop) ; 16
; [eval] !(p2_18 && !except2_3)
; [eval] p2_18 && !except2_3
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3369 | True | live]
; [else-branch: 3369 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3369 | True]
; [eval] p1_17 && !except1_3
; [then-branch: 3370 | False | dead]
; [else-branch: 3370 | True | live]
(push) ; 17
; [else-branch: 3370 | True]
(pop) ; 17
; [eval] !(p1_17 && !except1_3)
; [eval] p1_17 && !except1_3
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3371 | True | live]
; [else-branch: 3371 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3371 | True]
; [eval] p2_17 && !except2_3
; [then-branch: 3372 | False | dead]
; [else-branch: 3372 | True | live]
(push) ; 18
; [else-branch: 3372 | True]
(pop) ; 18
; [eval] !(p2_17 && !except2_3)
; [eval] p2_17 && !except2_3
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3373 | True | live]
; [else-branch: 3373 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3373 | True]
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 3374 | !(p1_15@658@01) | live]
; [else-branch: 3374 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 3374 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3374 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3375 | p1_15@658@01 | live]
; [else-branch: 3375 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3375 | p1_15@658@01]
; [exec]
; _err := null
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 3376 | !(p2_15@659@01) | live]
; [else-branch: 3376 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 3376 | !(p2_15@659@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 3376 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 3377 | p2_15@659@01 | dead]
; [else-branch: 3377 | !(p2_15@659@01) | live]
(push) ; 20
; [else-branch: 3377 | !(p2_15@659@01)]
(pop) ; 20
; [eval] !(p2_15 && !except2_3)
; [eval] p2_15 && !except2_3
(push) ; 20
; [then-branch: 3378 | !(p2_15@659@01) | live]
; [else-branch: 3378 | p2_15@659@01 | live]
(push) ; 21
; [then-branch: 3378 | !(p2_15@659@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 3378 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3379 | !(p2_15@659@01) | live]
; [else-branch: 3379 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3379 | !(p2_15@659@01)]
; [exec]
; p1_19 := p1_15 && !thisexcept1_3
; [eval] p1_15 && !thisexcept1_3
(push) ; 21
; [then-branch: 3380 | !(p1_15@658@01) | live]
; [else-branch: 3380 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 3380 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3380 | p1_15@658@01]
; [eval] !thisexcept1_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p2_19 := p2_15 && !thisexcept2_3
; [eval] p2_15 && !thisexcept2_3
(push) ; 21
; [then-branch: 3381 | !(p2_15@659@01) | live]
; [else-branch: 3381 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 3381 | !(p2_15@659@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 3381 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !thisexcept2_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p1_20 := p1_19 &&
;   (!except1_3 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_19 && (!except1_3 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 3382 | !(p1_15@658@01) | live]
; [else-branch: 3382 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 3382 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3382 | p1_15@658@01]
; [eval] !except1_3
(push) ; 23
; [then-branch: 3383 | False | live]
; [else-branch: 3383 | True | live]
(push) ; 24
; [then-branch: 3383 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3383 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p2_20 := p2_19 &&
;   (!except2_3 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_19 && (!except2_3 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 21
; [then-branch: 3384 | !(p2_15@659@01) | live]
; [else-branch: 3384 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 3384 | !(p2_15@659@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 3384 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(push) ; 23
; [then-branch: 3385 | False | live]
; [else-branch: 3385 | True | live]
(push) ; 24
; [then-branch: 3385 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3385 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p3_7 := p1_19 &&
;   (!except1_3 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_19 && (!except1_3 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 3386 | !(p1_15@658@01) | live]
; [else-branch: 3386 | p1_15@658@01 | live]
(push) ; 22
; [then-branch: 3386 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3386 | p1_15@658@01]
; [eval] !except1_3
(push) ; 23
; [then-branch: 3387 | False | live]
; [else-branch: 3387 | True | live]
(push) ; 24
; [then-branch: 3387 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3387 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; p4_7 := p2_19 &&
;   (!except2_3 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_19 && (!except2_3 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 21
; [then-branch: 3388 | !(p2_15@659@01) | live]
; [else-branch: 3388 | p2_15@659@01 | live]
(push) ; 22
; [then-branch: 3388 | !(p2_15@659@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 3388 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(push) ; 23
; [then-branch: 3389 | False | live]
; [else-branch: 3389 | True | live]
(push) ; 24
; [then-branch: 3389 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3389 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [eval] p1_20 && !except1_3
; [then-branch: 3390 | False | dead]
; [else-branch: 3390 | True | live]
(push) ; 21
; [else-branch: 3390 | True]
(pop) ; 21
; [eval] !(p1_20 && !except1_3)
; [eval] p1_20 && !except1_3
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3391 | True | live]
; [else-branch: 3391 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3391 | True]
; [eval] p2_20 && !except2_3
; [then-branch: 3392 | False | dead]
; [else-branch: 3392 | True | live]
(push) ; 22
; [else-branch: 3392 | True]
(pop) ; 22
; [eval] !(p2_20 && !except2_3)
; [eval] p2_20 && !except2_3
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3393 | True | live]
; [else-branch: 3393 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3393 | True]
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 3394 | !(p1_15@658@01) | live]
; [else-branch: 3394 | p1_15@658@01 | live]
(push) ; 24
; [then-branch: 3394 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3394 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3395 | p1_15@658@01 | live]
; [else-branch: 3395 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3395 | p1_15@658@01]
; [exec]
; c_4.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@811@01 $Ref)
(assert (= Container_value@811@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 3396 | !(p2_15@659@01) | live]
; [else-branch: 3396 | p2_15@659@01 | live]
(push) ; 25
; [then-branch: 3396 | !(p2_15@659@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 3396 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 3397 | p2_15@659@01 | dead]
; [else-branch: 3397 | !(p2_15@659@01) | live]
(push) ; 24
; [else-branch: 3397 | !(p2_15@659@01)]
(pop) ; 24
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 24
; [then-branch: 3398 | !(p2_15@659@01) | live]
; [else-branch: 3398 | p2_15@659@01 | live]
(push) ; 25
; [then-branch: 3398 | !(p2_15@659@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 3398 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3399 | !(p2_15@659@01) | live]
; [else-branch: 3399 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3399 | !(p2_15@659@01)]
; [exec]
; tmp_5 := new()
(declare-const tmp_5@812@01 $Ref)
(assert (not (= tmp_5@812@01 $Ref.null)))
(assert (not (= tmp_5@812@01 c_4_0@766@01)))
(assert (not (= tmp_5@812@01 c_0@668@01)))
(assert (not (= tmp_5@812@01 _cthread_161_0@661@01)))
(assert (not (= tmp_5@812@01 MyException_res_5_0@770@01)))
(assert (not (= tmp_5@812@01 MyException_res_4@767@01)))
(assert (not (= tmp_5@812@01 b_3_0@667@01)))
(assert (not (= tmp_5@812@01 error_3@759@01)))
(assert (not (= tmp_5@812@01 MyException_res_5@769@01)))
(assert (not (= tmp_5@812@01 b_8_0@764@01)))
(assert (not (= tmp_5@812@01 b_3@666@01)))
(assert (not (= tmp_5@812@01 _err_4@673@01)))
(assert (not (= tmp_5@812@01 Container_value@811@01)))
(assert (not (= tmp_5@812@01 tmp_5@796@01)))
(assert (not (= tmp_5@812@01 error_3_0@760@01)))
(assert (not (= tmp_5@812@01 _cthread_161@660@01)))
(assert (not (= tmp_5@812@01 tmp_4@804@01)))
(assert (not (= tmp_5@812@01 MyException_res_4_0@768@01)))
(assert (not (= tmp_5@812@01 c_0_0@669@01)))
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 3400 | !(p1_15@658@01) | live]
; [else-branch: 3400 | p1_15@658@01 | live]
(push) ; 26
; [then-branch: 3400 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3400 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3401 | p1_15@658@01 | live]
; [else-branch: 3401 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3401 | p1_15@658@01]
; [exec]
; MyException_res_5 := tmp_5
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 3402 | !(p2_15@659@01) | live]
; [else-branch: 3402 | p2_15@659@01 | live]
(push) ; 27
; [then-branch: 3402 | !(p2_15@659@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 3402 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 3403 | p2_15@659@01 | dead]
; [else-branch: 3403 | !(p2_15@659@01) | live]
(push) ; 26
; [else-branch: 3403 | !(p2_15@659@01)]
(pop) ; 26
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 26
; [then-branch: 3404 | !(p2_15@659@01) | live]
; [else-branch: 3404 | p2_15@659@01 | live]
(push) ; 27
; [then-branch: 3404 | !(p2_15@659@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 3404 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3405 | !(p2_15@659@01) | live]
; [else-branch: 3405 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3405 | !(p2_15@659@01)]
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 3406 | !(p1_15@658@01) | live]
; [else-branch: 3406 | p1_15@658@01 | live]
(push) ; 28
; [then-branch: 3406 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 28
(push) ; 28
; [else-branch: 3406 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3407 | p1_15@658@01 | live]
; [else-branch: 3407 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3407 | p1_15@658@01]
; [exec]
; inhale typeof(MyException_res_5) == MyException()
(declare-const $t@813@01 $Snap)
(assert (= $t@813@01 $Snap.unit))
; [eval] typeof(MyException_res_5) == MyException()
; [eval] typeof(MyException_res_5)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_5@812@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_19 && !except2_3
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3408 | !(p2_15@659@01) | live]
; [else-branch: 3408 | p2_15@659@01 | live]
(push) ; 29
; [then-branch: 3408 | !(p2_15@659@01)]
(pop) ; 29
(push) ; 29
; [else-branch: 3408 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 3409 | p2_15@659@01 | dead]
; [else-branch: 3409 | !(p2_15@659@01) | live]
(push) ; 28
; [else-branch: 3409 | !(p2_15@659@01)]
(pop) ; 28
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 28
; [then-branch: 3410 | !(p2_15@659@01) | live]
; [else-branch: 3410 | p2_15@659@01 | live]
(push) ; 29
; [then-branch: 3410 | !(p2_15@659@01)]
(pop) ; 29
(push) ; 29
; [else-branch: 3410 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3411 | !(p2_15@659@01) | live]
; [else-branch: 3411 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3411 | !(p2_15@659@01)]
; [eval] p1_19 && !except1_3
(push) ; 29
; [then-branch: 3412 | !(p1_15@658@01) | live]
; [else-branch: 3412 | p1_15@658@01 | live]
(push) ; 30
; [then-branch: 3412 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3412 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3413 | p1_15@658@01 | live]
; [else-branch: 3413 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3413 | p1_15@658@01]
; [exec]
; _err := MyException_res_5
; [exec]
; except1_3 := true
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 3414 | !(p2_15@659@01) | live]
; [else-branch: 3414 | p2_15@659@01 | live]
(push) ; 31
; [then-branch: 3414 | !(p2_15@659@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 3414 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 3415 | p2_15@659@01 | dead]
; [else-branch: 3415 | !(p2_15@659@01) | live]
(push) ; 30
; [else-branch: 3415 | !(p2_15@659@01)]
(pop) ; 30
; [eval] !(p2_19 && !except2_3)
; [eval] p2_19 && !except2_3
(push) ; 30
; [then-branch: 3416 | !(p2_15@659@01) | live]
; [else-branch: 3416 | p2_15@659@01 | live]
(push) ; 31
; [then-branch: 3416 | !(p2_15@659@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 3416 | p2_15@659@01]
(assert p2_15@659@01)
; [eval] !except2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3417 | !(p2_15@659@01) | live]
; [else-branch: 3417 | p2_15@659@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3417 | !(p2_15@659@01)]
; [eval] p1_15 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3418 | p1_15@658@01 | live]
; [else-branch: 3418 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3418 | p1_15@658@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_15 ==> true
(push) ; 31
; [then-branch: 3419 | p2_15@659@01 | dead]
; [else-branch: 3419 | !(p2_15@659@01) | live]
(push) ; 32
; [else-branch: 3419 | !(p2_15@659@01)]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3420 | p1_15@658@01 | live]
; [else-branch: 3420 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3420 | p1_15@658@01]
; [eval] _err == null
; [then-branch: 3421 | tmp_5@812@01 == Null | dead]
; [else-branch: 3421 | tmp_5@812@01 != Null | live]
(push) ; 32
; [else-branch: 3421 | tmp_5@812@01 != Null]
; [then-branch: 3422 | p2_15@659@01 | dead]
; [else-branch: 3422 | !(p2_15@659@01) | live]
(push) ; 33
; [else-branch: 3422 | !(p2_15@659@01)]
(push) ; 34
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3423 | p1_15@658@01 | live]
; [else-branch: 3423 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3423 | p1_15@658@01]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 35
; [then-branch: 3424 | tmp_5@812@01 == Null | live]
; [else-branch: 3424 | tmp_5@812@01 != Null | live]
(push) ; 36
; [then-branch: 3424 | tmp_5@812@01 == Null]
(assert (= tmp_5@812@01 $Ref.null))
(pop) ; 36
(push) ; 36
; [else-branch: 3424 | tmp_5@812@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_5@812@01 $Ref.null)) (= tmp_5@812@01 $Ref.null)))
(push) ; 35
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_5@812@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_5@812@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_5@812@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_5@812@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3425 | tmp_5@812@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@812@01), MyException[PyType]) | live]
; [else-branch: 3425 | !(tmp_5@812@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@812@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3425 | tmp_5@812@01 != Null && issubtype[Bool](typeof[PyType](tmp_5@812@01), MyException[PyType])]
(assert (and
  (not (= tmp_5@812@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_5@812@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(push) ; 36
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@811@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@811@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 36
(pop) ; 36
; Joined path conditions
(push) ; 36
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 37
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@811@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 36
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@811@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(push) ; 36
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@811@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@811@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [then-branch: 3426 | p2_15@659@01 | dead]
; [else-branch: 3426 | !(p2_15@659@01) | live]
(push) ; 36
; [else-branch: 3426 | !(p2_15@659@01)]
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3427 | p1_15@658@01 | live]
; [else-branch: 3427 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3427 | p1_15@658@01]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (= tmp_5@812@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3428 | tmp_5@812@01 != Null | live]
; [else-branch: 3428 | tmp_5@812@01 == Null | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3428 | tmp_5@812@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
(push) ; 37
(assert (not (=>
  (and p1_15@658@01 (not (= tmp_5@812@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_5@812@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_15@658@01 (not (= tmp_5@812@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_5@812@01) (as MyException<PyType>  PyType))))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 37
; [then-branch: 3429 | p2_15@659@01 | dead]
; [else-branch: 3429 | !(p2_15@659@01) | live]
(push) ; 38
; [else-branch: 3429 | !(p2_15@659@01)]
(pop) ; 38
(pop) ; 37
; Joined path conditions
; [eval] p1_15 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_15@658@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3430 | p1_15@658@01 | live]
; [else-branch: 3430 | !(p1_15@658@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3430 | p1_15@658@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 39
; [then-branch: 3431 | False | live]
; [else-branch: 3431 | True | live]
(push) ; 40
; [then-branch: 3431 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 3431 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 41
; [then-branch: 3432 | False | live]
; [else-branch: 3432 | True | live]
(push) ; 42
; [then-branch: 3432 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 3432 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 43
; [then-branch: 3433 | False | live]
; [else-branch: 3433 | True | live]
(push) ; 44
; [then-branch: 3433 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3433 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; [eval] p2_15 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 37
; [then-branch: 3434 | p2_15@659@01 | dead]
; [else-branch: 3434 | !(p2_15@659@01) | live]
(push) ; 38
; [else-branch: 3434 | !(p2_15@659@01)]
(pop) ; 38
(pop) ; 37
; Joined path conditions
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 29
; [then-branch: 3435 | !(p1_15@658@01) | live]
; [else-branch: 3435 | p1_15@658@01 | live]
(push) ; 30
; [then-branch: 3435 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3435 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 3436 | !(p1_15@658@01) | dead]
; [else-branch: 3436 | p1_15@658@01 | live]
(push) ; 29
; [else-branch: 3436 | p1_15@658@01]
(pop) ; 29
(pop) ; 28
(pop) ; 27
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 27
; [then-branch: 3437 | !(p1_15@658@01) | live]
; [else-branch: 3437 | p1_15@658@01 | live]
(push) ; 28
; [then-branch: 3437 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 28
(push) ; 28
; [else-branch: 3437 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 3438 | !(p1_15@658@01) | dead]
; [else-branch: 3438 | p1_15@658@01 | live]
(push) ; 27
; [else-branch: 3438 | p1_15@658@01]
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 25
; [then-branch: 3439 | !(p1_15@658@01) | live]
; [else-branch: 3439 | p1_15@658@01 | live]
(push) ; 26
; [then-branch: 3439 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3439 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 3440 | !(p1_15@658@01) | dead]
; [else-branch: 3440 | p1_15@658@01 | live]
(push) ; 25
; [else-branch: 3440 | p1_15@658@01]
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p1_19 && !except1_3)
; [eval] p1_19 && !except1_3
(push) ; 23
; [then-branch: 3441 | !(p1_15@658@01) | live]
; [else-branch: 3441 | p1_15@658@01 | live]
(push) ; 24
; [then-branch: 3441 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3441 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 3442 | !(p1_15@658@01) | dead]
; [else-branch: 3442 | p1_15@658@01 | live]
(push) ; 23
; [else-branch: 3442 | p1_15@658@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 19
; [then-branch: 3443 | !(p1_15@658@01) | live]
; [else-branch: 3443 | p1_15@658@01 | live]
(push) ; 20
; [then-branch: 3443 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3443 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 3444 | !(p1_15@658@01) | dead]
; [else-branch: 3444 | p1_15@658@01 | live]
(push) ; 19
; [else-branch: 3444 | p1_15@658@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 3339 | p1_16@800@01]
(assert p1_16@800@01)
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 5
; [then-branch: 3445 | !(p1_15@658@01) | live]
; [else-branch: 3445 | p1_15@658@01 | live]
(push) ; 6
; [then-branch: 3445 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(pop) ; 6
(push) ; 6
; [else-branch: 3445 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 3446 | !(p1_15@658@01) | dead]
; [else-branch: 3446 | p1_15@658@01 | live]
(push) ; 5
; [else-branch: 3446 | p1_15@658@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 2583 | !(p1_15@658@01)]
(assert (not p1_15@658@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_15@659@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3447 | p2_15@659@01 | live]
; [else-branch: 3447 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3447 | p2_15@659@01]
(assert p2_15@659@01)
(assert (not (= c_0_0@669@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
  $Snap.unit))
; [eval] p1_15 ==> issubtype(typeof(c_0.Container_value), int())
(push) ; 4
; [then-branch: 3448 | p1_15@658@01 | dead]
; [else-branch: 3448 | !(p1_15@658@01) | live]
(push) ; 5
; [else-branch: 3448 | !(p1_15@658@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
  $Snap.unit))
; [eval] p2_15 ==> issubtype(typeof(c_0_0.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3449 | p2_15@659@01 | live]
; [else-branch: 3449 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3449 | p2_15@659@01]
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_15@659@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 4
; [then-branch: 3450 | p1_15@658@01 | dead]
; [else-branch: 3450 | !(p1_15@658@01) | live]
(push) ; 5
; [else-branch: 3450 | !(p1_15@658@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3451 | p2_15@659@01 | live]
; [else-branch: 3451 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3451 | p2_15@659@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@814@01 $Snap)
(assert (= $t@814@01 ($Snap.combine ($Snap.first $t@814@01) ($Snap.second $t@814@01))))
(assert (= ($Snap.first $t@814@01) $Snap.unit))
; [eval] p1_15 ==> (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_161) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161)
(push) ; 5
; [then-branch: 3452 | p1_15@658@01 | dead]
; [else-branch: 3452 | !(p1_15@658@01) | live]
(push) ; 6
; [else-branch: 3452 | !(p1_15@658@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@814@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@814@01))
    ($Snap.second ($Snap.second $t@814@01)))))
(assert (= ($Snap.first ($Snap.second $t@814@01)) $Snap.unit))
; [eval] p2_15 ==> (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_161_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_161_0) && _residue_161_0 <= _current_wait_level_161_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3453 | p2_15@659@01 | live]
; [else-branch: 3453 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3453 | p2_15@659@01]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_161_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_161_0) && _residue_161_0 <= _current_wait_level_161_0)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_161_0)
(push) ; 7
; [then-branch: 3454 | False | live]
; [else-branch: 3454 | True | live]
(push) ; 8
; [then-branch: 3454 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3454 | True]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_161_0)
(push) ; 9
; [then-branch: 3455 | False | live]
; [else-branch: 3455 | True | live]
(push) ; 10
; [then-branch: 3455 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3455 | True]
; [eval] _residue_161_0 <= _current_wait_level_161_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_15@659@01 (<= _residue_161_0@665@01 _current_wait_level_161_0@671@01)))
(assert (=
  ($Snap.second ($Snap.second $t@814@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@814@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
; [then-branch: 3456 | p1_15@658@01 | dead]
; [else-branch: 3456 | !(p1_15@658@01) | live]
(push) ; 5
; [else-branch: 3456 | !(p1_15@658@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@814@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@814@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3457 | p2_15@659@01 | live]
; [else-branch: 3457 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3457 | p2_15@659@01]
; [eval] _err_4 == null
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err_4@673@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _err_4@673@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3458 | _err_4@673@01 == Null | live]
; [else-branch: 3458 | _err_4@673@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3458 | _err_4@673@01 == Null]
(assert (= _err_4@673@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))) (__prim__int___box__ $Snap.unit 0))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
; [then-branch: 3459 | p1_15@658@01 | dead]
; [else-branch: 3459 | !(p1_15@658@01) | live]
(push) ; 8
; [else-branch: 3459 | !(p1_15@658@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3460 | p2_15@659@01 | live]
; [else-branch: 3460 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3460 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 10
; [then-branch: 3461 | _err_4@673@01 == Null | live]
; [else-branch: 3461 | _err_4@673@01 != Null | live]
(push) ; 11
; [then-branch: 3461 | _err_4@673@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 3461 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_4@673@01 $Ref.null)) (= _err_4@673@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3462 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]) | dead]
; [else-branch: 3462 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 3462 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
; [then-branch: 3463 | p1_15@658@01 | dead]
; [else-branch: 3463 | !(p1_15@658@01) | live]
(push) ; 12
; [else-branch: 3463 | !(p1_15@658@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3464 | p2_15@659@01 | live]
; [else-branch: 3464 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3464 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 13
; [then-branch: 3465 | _err_4@673@01 != Null | dead]
; [else-branch: 3465 | _err_4@673@01 == Null | live]
(push) ; 14
; [else-branch: 3465 | _err_4@673@01 == Null]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 11
; [then-branch: 3466 | p1_15@658@01 | dead]
; [else-branch: 3466 | !(p1_15@658@01) | live]
(push) ; 12
; [else-branch: 3466 | !(p1_15@658@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3467 | p2_15@659@01 | live]
; [else-branch: 3467 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3467 | p2_15@659@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 3458 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@814@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
; [then-branch: 3468 | p1_15@658@01 | dead]
; [else-branch: 3468 | !(p1_15@658@01) | live]
(push) ; 8
; [else-branch: 3468 | !(p1_15@658@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3469 | p2_15@659@01 | live]
; [else-branch: 3469 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3469 | p2_15@659@01]
; [eval] _err_4 != null && issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 10
; [then-branch: 3470 | _err_4@673@01 == Null | live]
; [else-branch: 3470 | _err_4@673@01 != Null | live]
(push) ; 11
; [then-branch: 3470 | _err_4@673@01 == Null]
(assert (= _err_4@673@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 3470 | _err_4@673@01 != Null]
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_4@673@01 $Ref.null)) (= _err_4@673@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err_4@673@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3471 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]) | live]
; [else-branch: 3471 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3471 | _err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType])]
(assert (and
  (not (= _err_4@673@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
; [then-branch: 3472 | p1_15@658@01 | dead]
; [else-branch: 3472 | !(p1_15@658@01) | live]
(push) ; 12
; [else-branch: 3472 | !(p1_15@658@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3473 | p2_15@659@01 | live]
; [else-branch: 3473 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3473 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err_4@673@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3474 | _err_4@673@01 != Null | live]
; [else-branch: 3474 | _err_4@673@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3474 | _err_4@673@01 != Null]
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and p2_15@659@01 (not (= _err_4@673@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 11
; [then-branch: 3475 | p1_15@658@01 | dead]
; [else-branch: 3475 | !(p1_15@658@01) | live]
(push) ; 12
; [else-branch: 3475 | !(p1_15@658@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3476 | p2_15@659@01 | live]
; [else-branch: 3476 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3476 | p2_15@659@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 3471 | !(_err_4@673@01 != Null && issubtype[Bool](typeof[PyType](_err_4@673@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err_4@673@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 11
; [then-branch: 3477 | p1_15@658@01 | dead]
; [else-branch: 3477 | !(p1_15@658@01) | live]
(push) ; 12
; [else-branch: 3477 | !(p1_15@658@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3478 | p2_15@659@01 | live]
; [else-branch: 3478 | !(p2_15@659@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3478 | p2_15@659@01]
; [eval] _err_4 != null ==> issubtype(typeof(_err_4), MyException())
; [eval] _err_4 != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err_4@673@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= _err_4@673@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3479 | _err_4@673@01 != Null | live]
; [else-branch: 3479 | _err_4@673@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3479 | _err_4@673@01 != Null]
(assert (not (= _err_4@673@01 $Ref.null)))
; [eval] issubtype(typeof(_err_4), MyException())
; [eval] typeof(_err_4)
; [eval] MyException()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not (= _err_4@673@01 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=> p2_15@659@01 (not (= _err_4@673@01 $Ref.null))))
(assert (=>
  (and p2_15@659@01 (not (= _err_4@673@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_4@673@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 11
; [then-branch: 3480 | p1_15@658@01 | dead]
; [else-branch: 3480 | !(p1_15@658@01) | live]
(push) ; 12
; [else-branch: 3480 | !(p1_15@658@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@814@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_15@659@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3481 | p2_15@659@01 | dead]
; [else-branch: 3481 | !(p2_15@659@01) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 3481 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not p2_15@659@01))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_3: Bool
(declare-const except1_3@815@01 Bool)
; [exec]
; var except2_3: Bool
(declare-const except2_3@816@01 Bool)
; [exec]
; var error_3: Ref
(declare-const error_3@817@01 $Ref)
; [exec]
; var error_3_0: Ref
(declare-const error_3_0@818@01 $Ref)
; [exec]
; var try_finally_11: Int
(declare-const try_finally_11@819@01 Int)
; [exec]
; var try_finally_11_0: Int
(declare-const try_finally_11_0@820@01 Int)
; [exec]
; var b_8: Ref
(declare-const b_8@821@01 $Ref)
; [exec]
; var b_8_0: Ref
(declare-const b_8_0@822@01 $Ref)
; [exec]
; var c_4: Ref
(declare-const c_4@823@01 $Ref)
; [exec]
; var c_4_0: Ref
(declare-const c_4_0@824@01 $Ref)
; [exec]
; var MyException_res_4: Ref
(declare-const MyException_res_4@825@01 $Ref)
; [exec]
; var MyException_res_4_0: Ref
(declare-const MyException_res_4_0@826@01 $Ref)
; [exec]
; var MyException_res_5: Ref
(declare-const MyException_res_5@827@01 $Ref)
; [exec]
; var MyException_res_5_0: Ref
(declare-const MyException_res_5_0@828@01 $Ref)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@829@01 $Perm)
; [exec]
; var _cwl_161_0: Perm
(declare-const _cwl_161_0@830@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@831@01 Seq<Measure$>)
; [exec]
; var _method_measures_161_0: Seq[Measure$]
(declare-const _method_measures_161_0@832@01 Seq<Measure$>)
; [exec]
; var bypass1_3: Bool
(declare-const bypass1_3@833@01 Bool)
; [exec]
; var bypass2_3: Bool
(declare-const bypass2_3@834@01 Bool)
; [exec]
; var thisexcept1_3: Bool
(declare-const thisexcept1_3@835@01 Bool)
; [exec]
; var thisexcept2_3: Bool
(declare-const thisexcept2_3@836@01 Bool)
; [exec]
; var p1_17: Bool
(declare-const p1_17@837@01 Bool)
; [exec]
; var p2_17: Bool
(declare-const p2_17@838@01 Bool)
; [exec]
; var p1_19: Bool
(declare-const p1_19@839@01 Bool)
; [exec]
; var p2_19: Bool
(declare-const p2_19@840@01 Bool)
; [exec]
; var p1_16: Bool
(declare-const p1_16@841@01 Bool)
; [exec]
; var p2_16: Bool
(declare-const p2_16@842@01 Bool)
; [exec]
; var p3_5: Bool
(declare-const p3_5@843@01 Bool)
; [exec]
; var p4_5: Bool
(declare-const p4_5@844@01 Bool)
; [exec]
; var tmp_4: Ref
(declare-const tmp_4@845@01 $Ref)
; [exec]
; var p1_18: Bool
(declare-const p1_18@846@01 Bool)
; [exec]
; var p2_18: Bool
(declare-const p2_18@847@01 Bool)
; [exec]
; var p3_6: Bool
(declare-const p3_6@848@01 Bool)
; [exec]
; var p4_6: Bool
(declare-const p4_6@849@01 Bool)
; [exec]
; var p1_20: Bool
(declare-const p1_20@850@01 Bool)
; [exec]
; var p2_20: Bool
(declare-const p2_20@851@01 Bool)
; [exec]
; var p3_7: Bool
(declare-const p3_7@852@01 Bool)
; [exec]
; var p4_7: Bool
(declare-const p4_7@853@01 Bool)
; [exec]
; var tmp_5: Ref
(declare-const tmp_5@854@01 $Ref)
; [exec]
; inhale p1_15
(declare-const $t@855@01 $Snap)
(assert (= $t@855@01 $Snap.unit))
(assert p1_15@658@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; except1_3 := false
; [exec]
; except2_3 := false
; [eval] p1_15 && !except1_3
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3482 | !(p1_15@658@01) | live]
; [else-branch: 3482 | p1_15@658@01 | live]
(push) ; 6
; [then-branch: 3482 | !(p1_15@658@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 3482 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_15@658@01 (not p1_15@658@01)))
; [then-branch: 3483 | p1_15@658@01 | dead]
; [else-branch: 3483 | !(p1_15@658@01) | live]
(push) ; 5
; [else-branch: 3483 | !(p1_15@658@01)]
(pop) ; 5
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 5
; [then-branch: 3484 | !(p1_15@658@01) | live]
; [else-branch: 3484 | p1_15@658@01 | live]
(push) ; 6
; [then-branch: 3484 | !(p1_15@658@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 3484 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 3485 | !(p1_15@658@01) | dead]
; [else-branch: 3485 | p1_15@658@01 | live]
(push) ; 5
; [else-branch: 3485 | p1_15@658@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 3447 | !(p2_15@659@01)]
(assert (not p2_15@659@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
  $Snap.unit))
; [eval] p1_15 ==> issubtype(typeof(c_0.Container_value), int())
(push) ; 4
; [then-branch: 3486 | p1_15@658@01 | dead]
; [else-branch: 3486 | !(p1_15@658@01) | live]
(push) ; 5
; [else-branch: 3486 | !(p1_15@658@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
  $Snap.unit))
; [eval] p2_15 ==> issubtype(typeof(c_0_0.Container_valuep), int())
(push) ; 4
; [then-branch: 3487 | p2_15@659@01 | dead]
; [else-branch: 3487 | !(p2_15@659@01) | live]
(push) ; 5
; [else-branch: 3487 | !(p2_15@659@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 4
; [then-branch: 3488 | p1_15@658@01 | dead]
; [else-branch: 3488 | !(p1_15@658@01) | live]
(push) ; 5
; [else-branch: 3488 | !(p1_15@658@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@01)))))))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 4
; [then-branch: 3489 | p2_15@659@01 | dead]
; [else-branch: 3489 | !(p2_15@659@01) | live]
(push) ; 5
; [else-branch: 3489 | !(p2_15@659@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@856@01 $Snap)
(assert (= $t@856@01 ($Snap.combine ($Snap.first $t@856@01) ($Snap.second $t@856@01))))
(assert (= ($Snap.first $t@856@01) $Snap.unit))
; [eval] p1_15 ==> (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_161) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161)
(push) ; 5
; [then-branch: 3490 | p1_15@658@01 | dead]
; [else-branch: 3490 | !(p1_15@658@01) | live]
(push) ; 6
; [else-branch: 3490 | !(p1_15@658@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@856@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@856@01))
    ($Snap.second ($Snap.second $t@856@01)))))
(assert (= ($Snap.first ($Snap.second $t@856@01)) $Snap.unit))
; [eval] p2_15 ==> (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_161_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_161_0) && _residue_161_0 <= _current_wait_level_161_0)
(push) ; 5
; [then-branch: 3491 | p2_15@659@01 | dead]
; [else-branch: 3491 | !(p2_15@659@01) | live]
(push) ; 6
; [else-branch: 3491 | !(p2_15@659@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@856@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@856@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@856@01))))))
; [then-branch: 3492 | p1_15@658@01 | dead]
; [else-branch: 3492 | !(p1_15@658@01) | live]
(push) ; 5
; [else-branch: 3492 | !(p1_15@658@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@856@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@856@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@856@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))))
; [then-branch: 3493 | p2_15@659@01 | dead]
; [else-branch: 3493 | !(p2_15@659@01) | live]
(push) ; 6
; [else-branch: 3493 | !(p2_15@659@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@856@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01))))))))
; [then-branch: 3494 | p1_15@658@01 | dead]
; [else-branch: 3494 | !(p1_15@658@01) | live]
(push) ; 7
; [else-branch: 3494 | !(p1_15@658@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))))))
; [then-branch: 3495 | p2_15@659@01 | dead]
; [else-branch: 3495 | !(p2_15@659@01) | live]
(push) ; 8
; [else-branch: 3495 | !(p2_15@659@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> _err != null ==> issubtype(typeof(_err), MyException())
(push) ; 9
; [then-branch: 3496 | p1_15@658@01 | dead]
; [else-branch: 3496 | !(p1_15@658@01) | live]
(push) ; 10
; [else-branch: 3496 | !(p1_15@658@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01))))))))
  $Snap.unit))
; [eval] p2_15 ==> _err_4 != null ==> issubtype(typeof(_err_4), MyException())
(push) ; 9
; [then-branch: 3497 | p2_15@659@01 | dead]
; [else-branch: 3497 | !(p2_15@659@01) | live]
(push) ; 10
; [else-branch: 3497 | !(p2_15@659@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 9
; [then-branch: 3498 | p1_15@658@01 | dead]
; [else-branch: 3498 | !(p1_15@658@01) | live]
(push) ; 10
; [else-branch: 3498 | !(p1_15@658@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@856@01)))))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 9
; [then-branch: 3499 | p2_15@659@01 | dead]
; [else-branch: 3499 | !(p2_15@659@01) | live]
(push) ; 10
; [else-branch: 3499 | !(p2_15@659@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_3: Bool
(declare-const except1_3@857@01 Bool)
; [exec]
; var except2_3: Bool
(declare-const except2_3@858@01 Bool)
; [exec]
; var error_3: Ref
(declare-const error_3@859@01 $Ref)
; [exec]
; var error_3_0: Ref
(declare-const error_3_0@860@01 $Ref)
; [exec]
; var try_finally_11: Int
(declare-const try_finally_11@861@01 Int)
; [exec]
; var try_finally_11_0: Int
(declare-const try_finally_11_0@862@01 Int)
; [exec]
; var b_8: Ref
(declare-const b_8@863@01 $Ref)
; [exec]
; var b_8_0: Ref
(declare-const b_8_0@864@01 $Ref)
; [exec]
; var c_4: Ref
(declare-const c_4@865@01 $Ref)
; [exec]
; var c_4_0: Ref
(declare-const c_4_0@866@01 $Ref)
; [exec]
; var MyException_res_4: Ref
(declare-const MyException_res_4@867@01 $Ref)
; [exec]
; var MyException_res_4_0: Ref
(declare-const MyException_res_4_0@868@01 $Ref)
; [exec]
; var MyException_res_5: Ref
(declare-const MyException_res_5@869@01 $Ref)
; [exec]
; var MyException_res_5_0: Ref
(declare-const MyException_res_5_0@870@01 $Ref)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@871@01 $Perm)
; [exec]
; var _cwl_161_0: Perm
(declare-const _cwl_161_0@872@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@873@01 Seq<Measure$>)
; [exec]
; var _method_measures_161_0: Seq[Measure$]
(declare-const _method_measures_161_0@874@01 Seq<Measure$>)
; [exec]
; var bypass1_3: Bool
(declare-const bypass1_3@875@01 Bool)
; [exec]
; var bypass2_3: Bool
(declare-const bypass2_3@876@01 Bool)
; [exec]
; var thisexcept1_3: Bool
(declare-const thisexcept1_3@877@01 Bool)
; [exec]
; var thisexcept2_3: Bool
(declare-const thisexcept2_3@878@01 Bool)
; [exec]
; var p1_17: Bool
(declare-const p1_17@879@01 Bool)
; [exec]
; var p2_17: Bool
(declare-const p2_17@880@01 Bool)
; [exec]
; var p1_19: Bool
(declare-const p1_19@881@01 Bool)
; [exec]
; var p2_19: Bool
(declare-const p2_19@882@01 Bool)
; [exec]
; var p1_16: Bool
(declare-const p1_16@883@01 Bool)
; [exec]
; var p2_16: Bool
(declare-const p2_16@884@01 Bool)
; [exec]
; var p3_5: Bool
(declare-const p3_5@885@01 Bool)
; [exec]
; var p4_5: Bool
(declare-const p4_5@886@01 Bool)
; [exec]
; var tmp_4: Ref
(declare-const tmp_4@887@01 $Ref)
; [exec]
; var p1_18: Bool
(declare-const p1_18@888@01 Bool)
; [exec]
; var p2_18: Bool
(declare-const p2_18@889@01 Bool)
; [exec]
; var p3_6: Bool
(declare-const p3_6@890@01 Bool)
; [exec]
; var p4_6: Bool
(declare-const p4_6@891@01 Bool)
; [exec]
; var p1_20: Bool
(declare-const p1_20@892@01 Bool)
; [exec]
; var p2_20: Bool
(declare-const p2_20@893@01 Bool)
; [exec]
; var p3_7: Bool
(declare-const p3_7@894@01 Bool)
; [exec]
; var p4_7: Bool
(declare-const p4_7@895@01 Bool)
; [exec]
; var tmp_5: Ref
(declare-const tmp_5@896@01 $Ref)
; [exec]
; inhale p1_15
(declare-const $t@897@01 $Snap)
(assert (= $t@897@01 $Snap.unit))
(assert p1_15@658@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; except1_3 := false
; [exec]
; except2_3 := false
; [eval] p1_15 && !except1_3
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3500 | !(p1_15@658@01) | live]
; [else-branch: 3500 | p1_15@658@01 | live]
(push) ; 6
; [then-branch: 3500 | !(p1_15@658@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 3500 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_15@658@01 (not p1_15@658@01)))
; [then-branch: 3501 | p1_15@658@01 | dead]
; [else-branch: 3501 | !(p1_15@658@01) | live]
(push) ; 5
; [else-branch: 3501 | !(p1_15@658@01)]
(pop) ; 5
; [eval] !(p1_15 && !except1_3)
; [eval] p1_15 && !except1_3
(push) ; 5
; [then-branch: 3502 | !(p1_15@658@01) | live]
; [else-branch: 3502 | p1_15@658@01 | live]
(push) ; 6
; [then-branch: 3502 | !(p1_15@658@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 3502 | p1_15@658@01]
; [eval] !except1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 3503 | !(p1_15@658@01) | dead]
; [else-branch: 3503 | p1_15@658@01 | live]
(push) ; 5
; [else-branch: 3503 | p1_15@658@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- m6 ----------
(declare-const p1_21@898@01 Bool)
(declare-const p2_21@899@01 Bool)
(declare-const _cthread_162@900@01 $Ref)
(declare-const _cthread_162_0@901@01 $Ref)
(declare-const _caller_measures_162@902@01 Seq<Measure$>)
(declare-const _caller_measures_162_0@903@01 Seq<Measure$>)
(declare-const _residue_162@904@01 $Perm)
(declare-const _residue_162_0@905@01 $Perm)
(declare-const i@906@01 $Ref)
(declare-const i_7@907@01 $Ref)
(declare-const c_1@908@01 $Ref)
(declare-const c_1_0@909@01 $Ref)
(declare-const _current_wait_level_162@910@01 $Perm)
(declare-const _current_wait_level_162_0@911@01 $Perm)
(declare-const p1_21@912@01 Bool)
(declare-const p2_21@913@01 Bool)
(declare-const _cthread_162@914@01 $Ref)
(declare-const _cthread_162_0@915@01 $Ref)
(declare-const _caller_measures_162@916@01 Seq<Measure$>)
(declare-const _caller_measures_162_0@917@01 Seq<Measure$>)
(declare-const _residue_162@918@01 $Perm)
(declare-const _residue_162_0@919@01 $Perm)
(declare-const i@920@01 $Ref)
(declare-const i_7@921@01 $Ref)
(declare-const c_1@922@01 $Ref)
(declare-const c_1_0@923@01 $Ref)
(declare-const _current_wait_level_162@924@01 $Perm)
(declare-const _current_wait_level_162_0@925@01 $Perm)
(push) ; 1
(declare-const $t@926@01 $Snap)
(assert (= $t@926@01 ($Snap.combine ($Snap.first $t@926@01) ($Snap.second $t@926@01))))
(assert (= ($Snap.first $t@926@01) $Snap.unit))
; [eval] p1_21 ==> _cthread_162 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3504 | p1_21@912@01 | live]
; [else-branch: 3504 | !(p1_21@912@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3504 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] _cthread_162 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3504 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_21@912@01) p1_21@912@01))
(assert (=> p1_21@912@01 (not (= _cthread_162@914@01 $Ref.null))))
(assert (=
  ($Snap.second $t@926@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@926@01))
    ($Snap.second ($Snap.second $t@926@01)))))
(assert (= ($Snap.first ($Snap.second $t@926@01)) $Snap.unit))
; [eval] p2_21 ==> _cthread_162_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3505 | p2_21@913@01 | live]
; [else-branch: 3505 | !(p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3505 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] _cthread_162_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3505 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_21@913@01) p2_21@913@01))
(assert (=> p2_21@913@01 (not (= _cthread_162_0@915@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@926@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@926@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@926@01))) $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(_cthread_162), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3506 | p1_21@912@01 | live]
; [else-branch: 3506 | !(p1_21@912@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3506 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3506 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> _cthread_162@914@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@926@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@926@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@926@01))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(_cthread_162_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3507 | p2_21@913@01 | live]
; [else-branch: 3507 | !(p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3507 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] issubtype(typeof(_cthread_162_0), Thread_0())
; [eval] typeof(_cthread_162_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3507 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> _cthread_162_0@915@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(i), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3508 | p1_21@912@01 | live]
; [else-branch: 3508 | !(p1_21@912@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3508 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 3508 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(i_7), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3509 | p2_21@913@01 | live]
; [else-branch: 3509 | !(p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3509 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] issubtype(typeof(i_7), int())
; [eval] typeof(i_7)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 3509 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(c_1), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3510 | p1_21@912@01 | live]
; [else-branch: 3510 | !(p1_21@912@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3510 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] issubtype(typeof(c_1), Container())
; [eval] typeof(c_1)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 3510 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> c_1@922@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(c_1_0), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3511 | p2_21@913@01 | live]
; [else-branch: 3511 | !(p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3511 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] issubtype(typeof(c_1_0), Container())
; [eval] typeof(c_1_0)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 3511 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> c_1_0@923@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))
  $Snap.unit))
; [eval] p1_21 && p2_21 ==> i == i_7
; [eval] p1_21 && p2_21
(push) ; 2
; [then-branch: 3512 | !(p1_21@912@01) | live]
; [else-branch: 3512 | p1_21@912@01 | live]
(push) ; 3
; [then-branch: 3512 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 3
(push) ; 3
; [else-branch: 3512 | p1_21@912@01]
(assert p1_21@912@01)
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or p1_21@912@01 (not p1_21@912@01)))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and p1_21@912@01 p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3513 | p1_21@912@01 && p2_21@913@01 | live]
; [else-branch: 3513 | !(p1_21@912@01 && p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3513 | p1_21@912@01 && p2_21@913@01]
(assert (and p1_21@912@01 p2_21@913@01))
; [eval] i == i_7
(pop) ; 3
(push) ; 3
; [else-branch: 3513 | !(p1_21@912@01 && p2_21@913@01)]
(assert (not (and p1_21@912@01 p2_21@913@01)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (and p1_21@912@01 p2_21@913@01)) (and p1_21@912@01 p2_21@913@01)))
(assert (=> (and p1_21@912@01 p2_21@913@01) (= i@920@01 i_7@921@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3514 | p1_21@912@01 | live]
; [else-branch: 3514 | !(p1_21@912@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 3514 | p1_21@912@01]
(assert p1_21@912@01)
(assert (not (= c_1@922@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3515 | p2_21@913@01 | live]
; [else-branch: 3515 | !(p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3515 | p2_21@913@01]
(assert p2_21@913@01)
(assert (not (= c_1_0@923@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3516 | p1_21@912@01 | live]
; [else-branch: 3516 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3516 | p1_21@912@01]
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3517 | p2_21@913@01 | live]
; [else-branch: 3517 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3517 | p2_21@913@01]
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3518 | p1_21@912@01 | live]
; [else-branch: 3518 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3518 | p1_21@912@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3519 | p2_21@913@01 | live]
; [else-branch: 3519 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3519 | p2_21@913@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@927@01 $Snap)
(assert (= $t@927@01 ($Snap.combine ($Snap.first $t@927@01) ($Snap.second $t@927@01))))
(assert (= ($Snap.first $t@927@01) $Snap.unit))
; [eval] p1_21 ==> (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_162) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3520 | p1_21@912@01 | live]
; [else-branch: 3520 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3520 | p1_21@912@01]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_162) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_162)
(push) ; 7
; [then-branch: 3521 | False | live]
; [else-branch: 3521 | True | live]
(push) ; 8
; [then-branch: 3521 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3521 | True]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_162)
(push) ; 9
; [then-branch: 3522 | False | live]
; [else-branch: 3522 | True | live]
(push) ; 10
; [then-branch: 3522 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3522 | True]
; [eval] _residue_162 <= _current_wait_level_162
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_21@912@01 (<= _residue_162@918@01 _current_wait_level_162@924@01)))
(assert (=
  ($Snap.second $t@927@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@927@01))
    ($Snap.second ($Snap.second $t@927@01)))))
(assert (= ($Snap.first ($Snap.second $t@927@01)) $Snap.unit))
; [eval] p2_21 ==> (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_162_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_162_0) && _residue_162_0 <= _current_wait_level_162_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3523 | p2_21@913@01 | live]
; [else-branch: 3523 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3523 | p2_21@913@01]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_162_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_162_0) && _residue_162_0 <= _current_wait_level_162_0)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_162_0)
(push) ; 7
; [then-branch: 3524 | False | live]
; [else-branch: 3524 | True | live]
(push) ; 8
; [then-branch: 3524 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3524 | True]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_162_0)
(push) ; 9
; [then-branch: 3525 | False | live]
; [else-branch: 3525 | True | live]
(push) ; 10
; [then-branch: 3525 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3525 | True]
; [eval] _residue_162_0 <= _current_wait_level_162_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_21@913@01 (<= _residue_162_0@919@01 _current_wait_level_162_0@925@01)))
(assert (=
  ($Snap.second ($Snap.second $t@927@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@927@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3526 | p1_21@912@01 | live]
; [else-branch: 3526 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3526 | p1_21@912@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@927@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3527 | p2_21@913@01 | live]
; [else-branch: 3527 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3527 | p2_21@913@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3528 | p1_21@912@01 | live]
; [else-branch: 3528 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3528 | p1_21@912@01]
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3529 | p2_21@913@01 | live]
; [else-branch: 3529 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3529 | p2_21@913@01]
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))
  $Snap.unit))
; [eval] p1_21 && p2_21 ==> c_1.Container_value == c_1_0.Container_valuep
; [eval] p1_21 && p2_21
(push) ; 7
; [then-branch: 3530 | !(p1_21@912@01) | live]
; [else-branch: 3530 | p1_21@912@01 | live]
(push) ; 8
; [then-branch: 3530 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3530 | p1_21@912@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and p1_21@912@01 p2_21@913@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3531 | p1_21@912@01 && p2_21@913@01 | live]
; [else-branch: 3531 | !(p1_21@912@01 && p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3531 | p1_21@912@01 && p2_21@913@01]
(assert (and p1_21@912@01 p2_21@913@01))
; [eval] c_1.Container_value == c_1_0.Container_valuep
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (and p1_21@912@01 p2_21@913@01))
(assert (=>
  (and p1_21@912@01 p2_21@913@01)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3532 | p1_21@912@01 | live]
; [else-branch: 3532 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3532 | p1_21@912@01]
; [eval] int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] int___eq__(i, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3533 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 3533 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3533 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(push) ; 10
; [else-branch: 3533 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit 0)))))
; Joined path conditions
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit 0))))
    (or
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))))
(assert (=>
  (and
    p1_21@912@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3534 | p2_21@913@01 | live]
; [else-branch: 3534 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3534 | p2_21@913@01]
; [eval] int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
; [eval] int___eq__(i_7, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3535 | int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 3535 | !(int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3535 | int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(push) ; 10
; [else-branch: 3535 | !(int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit 0)))))
; Joined path conditions
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit 0))))
    (or
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))))
(assert (=>
  (and
    p2_21@913@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3536 | p1_21@912@01 | live]
; [else-branch: 3536 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3536 | p1_21@912@01]
; [eval] int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 9
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 9
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3537 | int___lt__(_, int___unbox__(_, i@920@01), 0) | live]
; [else-branch: 3537 | !(int___lt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3537 | int___lt__(_, int___unbox__(_, i@920@01), 0)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 3537 | !(int___lt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (__prim__int___box__%precondition $Snap.unit (- 0 1))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit (- 0 1))))))
; Joined path conditions
(assert (or
  (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
        (__prim__int___box__%precondition $Snap.unit (- 0 1))
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit (- 0 1)))))
    (or
      (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
(assert (=>
  (and
    p1_21@912@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3538 | p2_21@913@01 | live]
; [else-branch: 3538 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3538 | p2_21@913@01]
; [eval] int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i_7), 0)
; [eval] int___unbox__(i_7)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 9
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 9
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3539 | int___lt__(_, int___unbox__(_, i_7@921@01), 0) | live]
; [else-branch: 3539 | !(int___lt__(_, int___unbox__(_, i_7@921@01), 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3539 | int___lt__(_, int___unbox__(_, i_7@921@01), 0)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 3539 | !(int___lt__(_, int___unbox__(_, i_7@921@01), 0))]
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (__prim__int___box__%precondition $Snap.unit (- 0 1))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit (- 0 1))))))
; Joined path conditions
(assert (or
  (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
        (__prim__int___box__%precondition $Snap.unit (- 0 1))
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
    (or
      (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))))
(assert (=>
  (and
    p2_21@913@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3540 | p1_21@912@01 | live]
; [else-branch: 3540 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3540 | p1_21@912@01]
; [eval] int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3541 | int___gt__(_, int___unbox__(_, i@920@01), 0) | live]
; [else-branch: 3541 | !(int___gt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3541 | int___gt__(_, int___unbox__(_, i@920@01), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 10
(push) ; 10
; [else-branch: 3541 | !(int___gt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit 1)))))
; Joined path conditions
(assert (or
  (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (=>
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
      (and
        (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
        (__prim__int___box__%precondition $Snap.unit 1)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit 1))))
    (or
      (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
(assert (=>
  (and
    p1_21@912@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@927@01)))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3542 | p2_21@913@01 | live]
; [else-branch: 3542 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3542 | p2_21@913@01]
; [eval] int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i_7), 0)
; [eval] int___unbox__(i_7)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3543 | int___gt__(_, int___unbox__(_, i_7@921@01), 0) | live]
; [else-branch: 3543 | !(int___gt__(_, int___unbox__(_, i_7@921@01), 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3543 | int___gt__(_, int___unbox__(_, i_7@921@01), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 10
(push) ; 10
; [else-branch: 3543 | !(int___gt__(_, int___unbox__(_, i_7@921@01), 0))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit 1)))))
; Joined path conditions
(assert (or
  (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (=>
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
      (and
        (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
        (__prim__int___box__%precondition $Snap.unit 1)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit 1))))
    (or
      (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))))
(assert (=>
  (and
    p2_21@913@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3544 | p1_21@912@01 | live]
; [else-branch: 3544 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3544 | p1_21@912@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3545 | p2_21@913@01 | live]
; [else-branch: 3545 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3545 | p2_21@913@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_4: Bool
(declare-const except1_4@928@01 Bool)
; [exec]
; var except2_4: Bool
(declare-const except2_4@929@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@930@01 $Ref)
; [exec]
; var _err_5: Ref
(declare-const _err_5@931@01 $Ref)
; [exec]
; var error_4: Ref
(declare-const error_4@932@01 $Ref)
; [exec]
; var error_4_0: Ref
(declare-const error_4_0@933@01 $Ref)
; [exec]
; var try_finally_12: Int
(declare-const try_finally_12@934@01 Int)
; [exec]
; var try_finally_12_0: Int
(declare-const try_finally_12_0@935@01 Int)
; [exec]
; var i_5: Ref
(declare-const i_5@936@01 $Ref)
; [exec]
; var i_5_0: Ref
(declare-const i_5_0@937@01 $Ref)
; [exec]
; var c_5: Ref
(declare-const c_5@938@01 $Ref)
; [exec]
; var c_5_0: Ref
(declare-const c_5_0@939@01 $Ref)
; [exec]
; var MyException_res_6: Ref
(declare-const MyException_res_6@940@01 $Ref)
; [exec]
; var MyException_res_6_0: Ref
(declare-const MyException_res_6_0@941@01 $Ref)
; [exec]
; var MyException2_res: Ref
(declare-const MyException2_res@942@01 $Ref)
; [exec]
; var MyException2_res_1: Ref
(declare-const MyException2_res_1@943@01 $Ref)
; [exec]
; var _cwl_162: Perm
(declare-const _cwl_162@944@01 $Perm)
; [exec]
; var _cwl_162_0: Perm
(declare-const _cwl_162_0@945@01 $Perm)
; [exec]
; var _method_measures_162: Seq[Measure$]
(declare-const _method_measures_162@946@01 Seq<Measure$>)
; [exec]
; var _method_measures_162_0: Seq[Measure$]
(declare-const _method_measures_162_0@947@01 Seq<Measure$>)
; [exec]
; var bypass1_4: Bool
(declare-const bypass1_4@948@01 Bool)
; [exec]
; var bypass2_4: Bool
(declare-const bypass2_4@949@01 Bool)
; [exec]
; var thisexcept1_4: Bool
(declare-const thisexcept1_4@950@01 Bool)
; [exec]
; var thisexcept2_4: Bool
(declare-const thisexcept2_4@951@01 Bool)
; [exec]
; var p1_25: Bool
(declare-const p1_25@952@01 Bool)
; [exec]
; var p2_25: Bool
(declare-const p2_25@953@01 Bool)
; [exec]
; var p1_27: Bool
(declare-const p1_27@954@01 Bool)
; [exec]
; var p2_27: Bool
(declare-const p2_27@955@01 Bool)
; [exec]
; var p1_22: Bool
(declare-const p1_22@956@01 Bool)
; [exec]
; var p2_22: Bool
(declare-const p2_22@957@01 Bool)
; [exec]
; var p3_8: Bool
(declare-const p3_8@958@01 Bool)
; [exec]
; var p4_8: Bool
(declare-const p4_8@959@01 Bool)
; [exec]
; var tmp_6: Ref
(declare-const tmp_6@960@01 $Ref)
; [exec]
; var p1_23: Bool
(declare-const p1_23@961@01 Bool)
; [exec]
; var p2_23: Bool
(declare-const p2_23@962@01 Bool)
; [exec]
; var p3_9: Bool
(declare-const p3_9@963@01 Bool)
; [exec]
; var p4_9: Bool
(declare-const p4_9@964@01 Bool)
; [exec]
; var tmp_7: Ref
(declare-const tmp_7@965@01 $Ref)
; [exec]
; var p1_24: Bool
(declare-const p1_24@966@01 Bool)
; [exec]
; var p2_24: Bool
(declare-const p2_24@967@01 Bool)
; [exec]
; var p3_10: Bool
(declare-const p3_10@968@01 Bool)
; [exec]
; var p4_10: Bool
(declare-const p4_10@969@01 Bool)
; [exec]
; var p1_26: Bool
(declare-const p1_26@970@01 Bool)
; [exec]
; var p2_26: Bool
(declare-const p2_26@971@01 Bool)
; [exec]
; var p3_11: Bool
(declare-const p3_11@972@01 Bool)
; [exec]
; var p4_11: Bool
(declare-const p4_11@973@01 Bool)
; [exec]
; var p1_28: Bool
(declare-const p1_28@974@01 Bool)
; [exec]
; var p2_28: Bool
(declare-const p2_28@975@01 Bool)
; [exec]
; var p3_12: Bool
(declare-const p3_12@976@01 Bool)
; [exec]
; var p4_12: Bool
(declare-const p4_12@977@01 Bool)
; [exec]
; inhale p1_21
(declare-const $t@978@01 $Snap)
(assert (= $t@978@01 $Snap.unit))
(assert p1_21@912@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; except1_4 := false
; [exec]
; except2_4 := false
; [eval] p1_21 && !except1_4
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3546 | !(p1_21@912@01) | live]
; [else-branch: 3546 | p1_21@912@01 | live]
(push) ; 6
; [then-branch: 3546 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 6
(push) ; 6
; [else-branch: 3546 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3547 | p1_21@912@01 | live]
; [else-branch: 3547 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3547 | p1_21@912@01]
; [exec]
; _method_measures_162 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_5 := i
; [exec]
; c_5 := c_1
; [eval] p2_21 && !except2_4
(push) ; 6
; [then-branch: 3548 | !(p2_21@913@01) | live]
; [else-branch: 3548 | p2_21@913@01 | live]
(push) ; 7
; [then-branch: 3548 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 7
(push) ; 7
; [else-branch: 3548 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_21@913@01 (not p2_21@913@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3549 | p2_21@913@01 | live]
; [else-branch: 3549 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3549 | p2_21@913@01]
(assert p2_21@913@01)
; [exec]
; _method_measures_162_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err_5 := null
; [exec]
; i_5_0 := i_7
; [exec]
; c_5_0 := c_1_0
; [exec]
; bypass1_4 := !(p1_21 && !except1_4)
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 7
; [then-branch: 3550 | !(p1_21@912@01) | live]
; [else-branch: 3550 | p1_21@912@01 | live]
(push) ; 8
; [then-branch: 3550 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3550 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1_4@979@01 Bool)
(assert (= bypass1_4@979@01 (not p1_21@912@01)))
; [exec]
; bypass2_4 := !(p2_21 && !except2_4)
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 7
; [then-branch: 3551 | !(p2_21@913@01) | live]
; [else-branch: 3551 | p2_21@913@01 | live]
(push) ; 8
; [then-branch: 3551 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3551 | p2_21@913@01]
; [eval] !except2_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2_4@980@01 Bool)
(assert (= bypass2_4@980@01 (not p2_21@913@01)))
; [exec]
; p1_22 := p1_21 && (!except1_4 && int___lt__(int___unbox__(i_5), 0))
; [eval] p1_21 && (!except1_4 && int___lt__(int___unbox__(i_5), 0))
(push) ; 7
; [then-branch: 3552 | !(p1_21@912@01) | live]
; [else-branch: 3552 | p1_21@912@01 | live]
(push) ; 8
; [then-branch: 3552 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3552 | p1_21@912@01]
; [eval] !except1_4
(push) ; 9
; [then-branch: 3553 | False | live]
; [else-branch: 3553 | True | live]
(push) ; 10
; [then-branch: 3553 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3553 | True]
; [eval] int___lt__(int___unbox__(i_5), 0)
; [eval] int___unbox__(i_5)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(declare-const p1_22@981@01 Bool)
(assert (=
  p1_22@981@01
  (and
    p1_21@912@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
; [exec]
; p2_22 := p2_21 && (!except2_4 && int___lt__(int___unbox__(i_5_0), 0))
; [eval] p2_21 && (!except2_4 && int___lt__(int___unbox__(i_5_0), 0))
(push) ; 7
; [then-branch: 3554 | !(p2_21@913@01) | live]
; [else-branch: 3554 | p2_21@913@01 | live]
(push) ; 8
; [then-branch: 3554 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3554 | p2_21@913@01]
; [eval] !except2_4
(push) ; 9
; [then-branch: 3555 | False | live]
; [else-branch: 3555 | True | live]
(push) ; 10
; [then-branch: 3555 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3555 | True]
; [eval] int___lt__(int___unbox__(i_5_0), 0)
; [eval] int___unbox__(i_5_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(declare-const p2_22@982@01 Bool)
(assert (=
  p2_22@982@01
  (and
    p2_21@913@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
; [exec]
; p3_8 := p1_21 && (!except1_4 && !int___lt__(int___unbox__(i_5), 0))
; [eval] p1_21 && (!except1_4 && !int___lt__(int___unbox__(i_5), 0))
(push) ; 7
; [then-branch: 3556 | !(p1_21@912@01) | live]
; [else-branch: 3556 | p1_21@912@01 | live]
(push) ; 8
; [then-branch: 3556 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3556 | p1_21@912@01]
; [eval] !except1_4
(push) ; 9
; [then-branch: 3557 | False | live]
; [else-branch: 3557 | True | live]
(push) ; 10
; [then-branch: 3557 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3557 | True]
; [eval] !int___lt__(int___unbox__(i_5), 0)
; [eval] int___lt__(int___unbox__(i_5), 0)
; [eval] int___unbox__(i_5)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p3_8@983@01 Bool)
(assert (=
  p3_8@983@01
  (and
    p1_21@912@01
    (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [exec]
; p4_8 := p2_21 && (!except2_4 && !int___lt__(int___unbox__(i_5_0), 0))
; [eval] p2_21 && (!except2_4 && !int___lt__(int___unbox__(i_5_0), 0))
(push) ; 7
; [then-branch: 3558 | !(p2_21@913@01) | live]
; [else-branch: 3558 | p2_21@913@01 | live]
(push) ; 8
; [then-branch: 3558 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3558 | p2_21@913@01]
; [eval] !except2_4
(push) ; 9
; [then-branch: 3559 | False | live]
; [else-branch: 3559 | True | live]
(push) ; 10
; [then-branch: 3559 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3559 | True]
; [eval] !int___lt__(int___unbox__(i_5_0), 0)
; [eval] int___lt__(int___unbox__(i_5_0), 0)
; [eval] int___unbox__(i_5_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p4_8@984@01 Bool)
(assert (=
  p4_8@984@01
  (and
    p2_21@913@01
    (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))))
; [exec]
; tmp_6 := new()
(declare-const tmp_6@985@01 $Ref)
(assert (not (= tmp_6@985@01 $Ref.null)))
(assert (not (= tmp_6@985@01 MyException_res_6_0@941@01)))
(assert (not
  (=
    tmp_6@985@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))
(assert (not
  (=
    tmp_6@985@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
(assert (not (= tmp_6@985@01 i_7@921@01)))
(assert (not (= tmp_6@985@01 _cthread_162_0@915@01)))
(assert (not (= tmp_6@985@01 tmp_6@960@01)))
(assert (not (= tmp_6@985@01 error_4@932@01)))
(assert (not (= tmp_6@985@01 error_4_0@933@01)))
(assert (not (= tmp_6@985@01 c_1_0@923@01)))
(assert (not (= tmp_6@985@01 c_1@922@01)))
(assert (not (= tmp_6@985@01 MyException_res_6@940@01)))
(assert (not (= tmp_6@985@01 tmp_7@965@01)))
(assert (not (= tmp_6@985@01 _cthread_162@914@01)))
(assert (not (= tmp_6@985@01 MyException2_res@942@01)))
(assert (not (= tmp_6@985@01 i@920@01)))
(assert (not (= tmp_6@985@01 MyException2_res_1@943@01)))
; [eval] p1_22 && !except1_4
(push) ; 7
; [then-branch: 3560 | !(p1_22@981@01) | live]
; [else-branch: 3560 | p1_22@981@01 | live]
(push) ; 8
; [then-branch: 3560 | !(p1_22@981@01)]
(assert (not p1_22@981@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3560 | p1_22@981@01]
(assert p1_22@981@01)
; [eval] !except1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_22@981@01 (not p1_22@981@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_22@981@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_22@981@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3561 | p1_22@981@01 | live]
; [else-branch: 3561 | !(p1_22@981@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3561 | p1_22@981@01]
(assert p1_22@981@01)
; [exec]
; MyException_res_6 := tmp_6
; [eval] p2_22 && !except2_4
(push) ; 8
; [then-branch: 3562 | !(p2_22@982@01) | live]
; [else-branch: 3562 | p2_22@982@01 | live]
(push) ; 9
; [then-branch: 3562 | !(p2_22@982@01)]
(assert (not p2_22@982@01))
(pop) ; 9
(push) ; 9
; [else-branch: 3562 | p2_22@982@01]
(assert p2_22@982@01)
; [eval] !except2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_22@982@01 (not p2_22@982@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_22@982@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_22@982@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3563 | p2_22@982@01 | live]
; [else-branch: 3563 | !(p2_22@982@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3563 | p2_22@982@01]
(assert p2_22@982@01)
; [exec]
; MyException_res_6_0 := tmp_6
; [eval] p1_22 && !except1_4
(push) ; 9
; [then-branch: 3564 | !(p1_22@981@01) | live]
; [else-branch: 3564 | p1_22@981@01 | live]
(push) ; 10
; [then-branch: 3564 | !(p1_22@981@01)]
(assert (not p1_22@981@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3564 | p1_22@981@01]
; [eval] !except1_4
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_22@981@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3565 | p1_22@981@01 | live]
; [else-branch: 3565 | !(p1_22@981@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3565 | p1_22@981@01]
; [exec]
; inhale typeof(MyException_res_6) == MyException()
(declare-const $t@986@01 $Snap)
(assert (= $t@986@01 $Snap.unit))
; [eval] typeof(MyException_res_6) == MyException()
; [eval] typeof(MyException_res_6)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_6@985@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_22 && !except2_4
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3566 | !(p2_22@982@01) | live]
; [else-branch: 3566 | p2_22@982@01 | live]
(push) ; 11
; [then-branch: 3566 | !(p2_22@982@01)]
(assert (not p2_22@982@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3566 | p2_22@982@01]
; [eval] !except2_4
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_22@982@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3567 | p2_22@982@01 | live]
; [else-branch: 3567 | !(p2_22@982@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3567 | p2_22@982@01]
; [exec]
; inhale typeof(MyException_res_6_0) == MyException()
(declare-const $t@987@01 $Snap)
(assert (= $t@987@01 $Snap.unit))
; [eval] typeof(MyException_res_6_0) == MyException()
; [eval] typeof(MyException_res_6_0)
; [eval] MyException()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_22 && !except1_4
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3568 | !(p1_22@981@01) | live]
; [else-branch: 3568 | p1_22@981@01 | live]
(push) ; 12
; [then-branch: 3568 | !(p1_22@981@01)]
(assert (not p1_22@981@01))
(pop) ; 12
(push) ; 12
; [else-branch: 3568 | p1_22@981@01]
; [eval] !except1_4
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_22@981@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3569 | p1_22@981@01 | live]
; [else-branch: 3569 | !(p1_22@981@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3569 | p1_22@981@01]
; [exec]
; _err := MyException_res_6
; [exec]
; except1_4 := true
; [eval] p2_22 && !except2_4
(push) ; 12
; [then-branch: 3570 | !(p2_22@982@01) | live]
; [else-branch: 3570 | p2_22@982@01 | live]
(push) ; 13
; [then-branch: 3570 | !(p2_22@982@01)]
(assert (not p2_22@982@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3570 | p2_22@982@01]
; [eval] !except2_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_22@982@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3571 | p2_22@982@01 | live]
; [else-branch: 3571 | !(p2_22@982@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3571 | p2_22@982@01]
; [exec]
; _err_5 := MyException_res_6_0
; [exec]
; except2_4 := true
; [exec]
; p1_23 := p3_8 && (!except1_4 && int___gt__(int___unbox__(i_5), 0))
; [eval] p3_8 && (!except1_4 && int___gt__(int___unbox__(i_5), 0))
(push) ; 13
; [then-branch: 3572 | !(p3_8@983@01) | live]
; [else-branch: 3572 | p3_8@983@01 | live]
(push) ; 14
; [then-branch: 3572 | !(p3_8@983@01)]
(assert (not p3_8@983@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3572 | p3_8@983@01]
(assert p3_8@983@01)
; [eval] !except1_4
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p3_8@983@01 (not p3_8@983@01)))
; [exec]
; p2_23 := p4_8 && (!except2_4 && int___gt__(int___unbox__(i_5_0), 0))
; [eval] p4_8 && (!except2_4 && int___gt__(int___unbox__(i_5_0), 0))
(push) ; 13
; [then-branch: 3573 | !(p4_8@984@01) | live]
; [else-branch: 3573 | p4_8@984@01 | live]
(push) ; 14
; [then-branch: 3573 | !(p4_8@984@01)]
(assert (not p4_8@984@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3573 | p4_8@984@01]
(assert p4_8@984@01)
; [eval] !except2_4
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p4_8@984@01 (not p4_8@984@01)))
; [exec]
; p3_9 := p3_8 && (!except1_4 && !int___gt__(int___unbox__(i_5), 0))
; [eval] p3_8 && (!except1_4 && !int___gt__(int___unbox__(i_5), 0))
(push) ; 13
; [then-branch: 3574 | !(p3_8@983@01) | live]
; [else-branch: 3574 | p3_8@983@01 | live]
(push) ; 14
; [then-branch: 3574 | !(p3_8@983@01)]
(assert (not p3_8@983@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3574 | p3_8@983@01]
(assert p3_8@983@01)
; [eval] !except1_4
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p4_9 := p4_8 && (!except2_4 && !int___gt__(int___unbox__(i_5_0), 0))
; [eval] p4_8 && (!except2_4 && !int___gt__(int___unbox__(i_5_0), 0))
(push) ; 13
; [then-branch: 3575 | !(p4_8@984@01) | live]
; [else-branch: 3575 | p4_8@984@01 | live]
(push) ; 14
; [then-branch: 3575 | !(p4_8@984@01)]
(assert (not p4_8@984@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3575 | p4_8@984@01]
(assert p4_8@984@01)
; [eval] !except2_4
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; tmp_7 := new()
(declare-const tmp_7@988@01 $Ref)
(assert (not (= tmp_7@988@01 $Ref.null)))
(assert (not
  (=
    tmp_7@988@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))
(assert (not
  (=
    tmp_7@988@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
(assert (not (= tmp_7@988@01 i_7@921@01)))
(assert (not (= tmp_7@988@01 _cthread_162_0@915@01)))
(assert (not (= tmp_7@988@01 error_4@932@01)))
(assert (not (= tmp_7@988@01 error_4_0@933@01)))
(assert (not (= tmp_7@988@01 c_1_0@923@01)))
(assert (not (= tmp_7@988@01 c_1@922@01)))
(assert (not (= tmp_7@988@01 tmp_7@965@01)))
(assert (not (= tmp_7@988@01 _cthread_162@914@01)))
(assert (not (= tmp_7@988@01 MyException2_res@942@01)))
(assert (not (= tmp_7@988@01 tmp_6@985@01)))
(assert (not (= tmp_7@988@01 i@920@01)))
(assert (not (= tmp_7@988@01 MyException2_res_1@943@01)))
; [eval] p1_23 && !except1_4
; [then-branch: 3576 | False | dead]
; [else-branch: 3576 | True | live]
(push) ; 13
; [else-branch: 3576 | True]
(pop) ; 13
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3577 | True | live]
; [else-branch: 3577 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3577 | True]
; [eval] p2_23 && !except2_4
; [then-branch: 3578 | False | dead]
; [else-branch: 3578 | True | live]
(push) ; 14
; [else-branch: 3578 | True]
(pop) ; 14
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3579 | True | live]
; [else-branch: 3579 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3579 | True]
; [eval] p1_23 && !except1_4
; [then-branch: 3580 | False | dead]
; [else-branch: 3580 | True | live]
(push) ; 15
; [else-branch: 3580 | True]
(pop) ; 15
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3581 | True | live]
; [else-branch: 3581 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3581 | True]
; [eval] p2_23 && !except2_4
; [then-branch: 3582 | False | dead]
; [else-branch: 3582 | True | live]
(push) ; 16
; [else-branch: 3582 | True]
(pop) ; 16
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3583 | True | live]
; [else-branch: 3583 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3583 | True]
; [eval] p1_23 && !except1_4
; [then-branch: 3584 | False | dead]
; [else-branch: 3584 | True | live]
(push) ; 17
; [else-branch: 3584 | True]
(pop) ; 17
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3585 | True | live]
; [else-branch: 3585 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3585 | True]
; [eval] p2_23 && !except2_4
; [then-branch: 3586 | False | dead]
; [else-branch: 3586 | True | live]
(push) ; 18
; [else-branch: 3586 | True]
(pop) ; 18
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3587 | True | live]
; [else-branch: 3587 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3587 | True]
; [exec]
; p1_24 := p3_9 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_9 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_24 := p4_9 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_9 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_10 := p3_9 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_9 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_10 := p4_9 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_9 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_24 && !except1_4
; [then-branch: 3588 | False | dead]
; [else-branch: 3588 | True | live]
(push) ; 19
; [else-branch: 3588 | True]
(pop) ; 19
; [eval] !(p1_24 && !except1_4)
; [eval] p1_24 && !except1_4
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3589 | True | live]
; [else-branch: 3589 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3589 | True]
; [eval] p2_24 && !except2_4
; [then-branch: 3590 | False | dead]
; [else-branch: 3590 | True | live]
(push) ; 20
; [else-branch: 3590 | True]
(pop) ; 20
; [eval] !(p2_24 && !except2_4)
; [eval] p2_24 && !except2_4
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3591 | True | live]
; [else-branch: 3591 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3591 | True]
; [eval] p3_9 && !except1_4
; [then-branch: 3592 | False | dead]
; [else-branch: 3592 | True | live]
(push) ; 21
; [else-branch: 3592 | True]
(pop) ; 21
; [eval] !(p3_9 && !except1_4)
; [eval] p3_9 && !except1_4
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3593 | True | live]
; [else-branch: 3593 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3593 | True]
; [eval] p4_9 && !except2_4
; [then-branch: 3594 | False | dead]
; [else-branch: 3594 | True | live]
(push) ; 22
; [else-branch: 3594 | True]
(pop) ; 22
; [eval] !(p4_9 && !except2_4)
; [eval] p4_9 && !except2_4
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3595 | True | live]
; [else-branch: 3595 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3595 | True]
; [exec]
; thisexcept1_4 := except1_4 && !bypass1_4
; [eval] except1_4 && !bypass1_4
(push) ; 23
; [then-branch: 3596 | False | live]
; [else-branch: 3596 | True | live]
(push) ; 24
; [then-branch: 3596 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3596 | True]
; [eval] !bypass1_4
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_4@989@01 Bool)
(assert (= thisexcept1_4@989@01 (not bypass1_4@979@01)))
; [exec]
; thisexcept2_4 := except2_4 && !bypass2_4
; [eval] except2_4 && !bypass2_4
(push) ; 23
; [then-branch: 3597 | False | live]
; [else-branch: 3597 | True | live]
(push) ; 24
; [then-branch: 3597 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3597 | True]
; [eval] !bypass2_4
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_4@990@01 Bool)
(assert (= thisexcept2_4@990@01 (not bypass2_4@980@01)))
; [exec]
; p1_25 := p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
(push) ; 23
; [then-branch: 3598 | !(p1_21@912@01) | live]
; [else-branch: 3598 | p1_21@912@01 | live]
(push) ; 24
; [then-branch: 3598 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3598 | p1_21@912@01]
(push) ; 25
; [then-branch: 3599 | !(thisexcept1_4@989@01) | live]
; [else-branch: 3599 | thisexcept1_4@989@01 | live]
(push) ; 26
; [then-branch: 3599 | !(thisexcept1_4@989@01)]
(assert (not thisexcept1_4@989@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3599 | thisexcept1_4@989@01]
(assert thisexcept1_4@989@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_4@989@01 (not thisexcept1_4@989@01)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=> p1_21@912@01 (or thisexcept1_4@989@01 (not thisexcept1_4@989@01))))
(declare-const p1_25@991@01 Bool)
(assert (=
  p1_25@991@01
  (and
    p1_21@912@01
    (and
      thisexcept1_4@989@01
      (issubtype<Bool> (typeof<PyType> tmp_6@985@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_25 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
(push) ; 23
; [then-branch: 3600 | !(p2_21@913@01) | live]
; [else-branch: 3600 | p2_21@913@01 | live]
(push) ; 24
; [then-branch: 3600 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3600 | p2_21@913@01]
(push) ; 25
; [then-branch: 3601 | !(thisexcept2_4@990@01) | live]
; [else-branch: 3601 | thisexcept2_4@990@01 | live]
(push) ; 26
; [then-branch: 3601 | !(thisexcept2_4@990@01)]
(assert (not thisexcept2_4@990@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3601 | thisexcept2_4@990@01]
(assert thisexcept2_4@990@01)
; [eval] issubtype(typeof(_err_5), MyException())
; [eval] typeof(_err_5)
; [eval] MyException()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_4@990@01 (not thisexcept2_4@990@01)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=> p2_21@913@01 (or thisexcept2_4@990@01 (not thisexcept2_4@990@01))))
(declare-const p2_25@992@01 Bool)
(assert (=
  p2_25@992@01
  (and
    p2_21@913@01
    (and
      thisexcept2_4@990@01
      (issubtype<Bool> (typeof<PyType> tmp_6@985@01) (as MyException<PyType>  PyType))))))
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_25@991@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not p1_25@991@01))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3602 | p1_25@991@01 | live]
; [else-branch: 3602 | !(p1_25@991@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3602 | p1_25@991@01]
(assert p1_25@991@01)
; [exec]
; except1_4 := false
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_25@992@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not p2_25@992@01))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3603 | p2_25@992@01 | live]
; [else-branch: 3603 | !(p2_25@992@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3603 | p2_25@992@01]
(assert p2_25@992@01)
; [exec]
; except2_4 := false
; [exec]
; p1_26 := p1_25 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_25 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 25
; [then-branch: 3604 | !(p1_25@991@01) | live]
; [else-branch: 3604 | p1_25@991@01 | live]
(push) ; 26
; [then-branch: 3604 | !(p1_25@991@01)]
(assert (not p1_25@991@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3604 | p1_25@991@01]
; [eval] !except1_4
(push) ; 27
; [then-branch: 3605 | False | live]
; [else-branch: 3605 | True | live]
(push) ; 28
; [then-branch: 3605 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 3605 | True]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or p1_25@991@01 (not p1_25@991@01)))
; [exec]
; p2_26 := p2_25 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_25 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 25
; [then-branch: 3606 | !(p2_25@992@01) | live]
; [else-branch: 3606 | p2_25@992@01 | live]
(push) ; 26
; [then-branch: 3606 | !(p2_25@992@01)]
(assert (not p2_25@992@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3606 | p2_25@992@01]
; [eval] !except2_4
(push) ; 27
; [then-branch: 3607 | False | live]
; [else-branch: 3607 | True | live]
(push) ; 28
; [then-branch: 3607 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 3607 | True]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or p2_25@992@01 (not p2_25@992@01)))
; [exec]
; p3_11 := p1_25 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_25 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 25
; [then-branch: 3608 | !(p1_25@991@01) | live]
; [else-branch: 3608 | p1_25@991@01 | live]
(push) ; 26
; [then-branch: 3608 | !(p1_25@991@01)]
(assert (not p1_25@991@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3608 | p1_25@991@01]
; [eval] !except1_4
(push) ; 27
; [then-branch: 3609 | False | live]
; [else-branch: 3609 | True | live]
(push) ; 28
; [then-branch: 3609 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 3609 | True]
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [exec]
; p4_11 := p2_25 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_25 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 25
; [then-branch: 3610 | !(p2_25@992@01) | live]
; [else-branch: 3610 | p2_25@992@01 | live]
(push) ; 26
; [then-branch: 3610 | !(p2_25@992@01)]
(assert (not p2_25@992@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3610 | p2_25@992@01]
; [eval] !except2_4
(push) ; 27
; [then-branch: 3611 | False | live]
; [else-branch: 3611 | True | live]
(push) ; 28
; [then-branch: 3611 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 3611 | True]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [eval] p1_26 && !except1_4
; [then-branch: 3612 | False | dead]
; [else-branch: 3612 | True | live]
(push) ; 25
; [else-branch: 3612 | True]
(pop) ; 25
; [eval] !(p1_26 && !except1_4)
; [eval] p1_26 && !except1_4
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3613 | True | live]
; [else-branch: 3613 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3613 | True]
; [eval] p2_26 && !except2_4
; [then-branch: 3614 | False | dead]
; [else-branch: 3614 | True | live]
(push) ; 26
; [else-branch: 3614 | True]
(pop) ; 26
; [eval] !(p2_26 && !except2_4)
; [eval] p2_26 && !except2_4
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3615 | True | live]
; [else-branch: 3615 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3615 | True]
; [eval] p1_25 && !except1_4
(push) ; 27
; [then-branch: 3616 | !(p1_25@991@01) | live]
; [else-branch: 3616 | p1_25@991@01 | live]
(push) ; 28
; [then-branch: 3616 | !(p1_25@991@01)]
(assert (not p1_25@991@01))
(pop) ; 28
(push) ; 28
; [else-branch: 3616 | p1_25@991@01]
; [eval] !except1_4
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_25@991@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3617 | p1_25@991@01 | live]
; [else-branch: 3617 | !(p1_25@991@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3617 | p1_25@991@01]
; [exec]
; c_5.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 28
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 28
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@993@01 $Ref)
(assert (= Container_value@993@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p2_25 && !except2_4
(push) ; 28
; [then-branch: 3618 | !(p2_25@992@01) | live]
; [else-branch: 3618 | p2_25@992@01 | live]
(push) ; 29
; [then-branch: 3618 | !(p2_25@992@01)]
(assert (not p2_25@992@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3618 | p2_25@992@01]
; [eval] !except2_4
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_25@992@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3619 | p2_25@992@01 | live]
; [else-branch: 3619 | !(p2_25@992@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3619 | p2_25@992@01]
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 29
(pop) ; 29
; Joined path conditions
(declare-const Container_valuep@994@01 $Ref)
(assert (= Container_valuep@994@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 3620 | !(p1_21@912@01) | live]
; [else-branch: 3620 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 3620 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3620 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3621 | p1_21@912@01 | live]
; [else-branch: 3621 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3621 | p1_21@912@01]
; [exec]
; _err := null
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 3622 | !(p2_21@913@01) | live]
; [else-branch: 3622 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 3622 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3622 | p2_21@913@01]
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3623 | p2_21@913@01 | live]
; [else-branch: 3623 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3623 | p2_21@913@01]
; [exec]
; _err_5 := null
; [exec]
; p1_27 := p1_21 &&
;   (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
(push) ; 31
; [then-branch: 3624 | !(p1_21@912@01) | live]
; [else-branch: 3624 | p1_21@912@01 | live]
(push) ; 32
; [then-branch: 3624 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3624 | p1_21@912@01]
(push) ; 33
; [then-branch: 3625 | !(thisexcept1_4@989@01) | live]
; [else-branch: 3625 | thisexcept1_4@989@01 | live]
(push) ; 34
; [then-branch: 3625 | !(thisexcept1_4@989@01)]
(assert (not thisexcept1_4@989@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3625 | thisexcept1_4@989@01]
(assert thisexcept1_4@989@01)
; [eval] issubtype(typeof(_err), MyException2())
; [eval] typeof(_err)
; [eval] MyException2()
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_4@989@01 (not thisexcept1_4@989@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(declare-const p1_27@995@01 Bool)
(assert (=
  p1_27@995@01
  (and
    p1_21@912@01
    (and
      thisexcept1_4@989@01
      (issubtype<Bool> (typeof<PyType> $Ref.null) (as MyException2<PyType>  PyType))))))
; [exec]
; p2_27 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
(push) ; 31
; [then-branch: 3626 | !(p2_21@913@01) | live]
; [else-branch: 3626 | p2_21@913@01 | live]
(push) ; 32
; [then-branch: 3626 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3626 | p2_21@913@01]
(push) ; 33
; [then-branch: 3627 | !(thisexcept2_4@990@01) | live]
; [else-branch: 3627 | thisexcept2_4@990@01 | live]
(push) ; 34
; [then-branch: 3627 | !(thisexcept2_4@990@01)]
(assert (not thisexcept2_4@990@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3627 | thisexcept2_4@990@01]
(assert thisexcept2_4@990@01)
; [eval] issubtype(typeof(_err_5), MyException2())
; [eval] typeof(_err_5)
; [eval] MyException2()
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_4@990@01 (not thisexcept2_4@990@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(declare-const p2_27@996@01 Bool)
(assert (=
  p2_27@996@01
  (and
    p2_21@913@01
    (and
      thisexcept2_4@990@01
      (issubtype<Bool> (typeof<PyType> $Ref.null) (as MyException2<PyType>  PyType))))))
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_27@995@01)))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3628 | p1_27@995@01 | dead]
; [else-branch: 3628 | !(p1_27@995@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 3628 | !(p1_27@995@01)]
(assert (not p1_27@995@01))
(pop) ; 31
; [eval] !p1_27
(push) ; 31
(set-option :timeout 10)
(assert (not p1_27@995@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_27@995@01)))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3629 | !(p1_27@995@01) | live]
; [else-branch: 3629 | p1_27@995@01 | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3629 | !(p1_27@995@01)]
(assert (not p1_27@995@01))
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_27@996@01)))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3630 | p2_27@996@01 | dead]
; [else-branch: 3630 | !(p2_27@996@01) | live]
(set-option :timeout 0)
(push) ; 32
; [else-branch: 3630 | !(p2_27@996@01)]
(assert (not p2_27@996@01))
(pop) ; 32
; [eval] !p2_27
(push) ; 32
(set-option :timeout 10)
(assert (not p2_27@996@01))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_27@996@01)))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3631 | !(p2_27@996@01) | live]
; [else-branch: 3631 | p2_27@996@01 | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3631 | !(p2_27@996@01)]
(assert (not p2_27@996@01))
; [exec]
; p1_28 := p1_27 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_27 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 33
; [then-branch: 3632 | !(p1_27@995@01) | live]
; [else-branch: 3632 | p1_27@995@01 | live]
(push) ; 34
; [then-branch: 3632 | !(p1_27@995@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 3632 | p1_27@995@01]
(assert p1_27@995@01)
; [eval] !except1_4
(push) ; 35
; [then-branch: 3633 | False | live]
; [else-branch: 3633 | True | live]
(push) ; 36
; [then-branch: 3633 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 3633 | True]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or p1_27@995@01 (not p1_27@995@01)))
; [exec]
; p2_28 := p2_27 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_27 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 33
; [then-branch: 3634 | !(p2_27@996@01) | live]
; [else-branch: 3634 | p2_27@996@01 | live]
(push) ; 34
; [then-branch: 3634 | !(p2_27@996@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 3634 | p2_27@996@01]
(assert p2_27@996@01)
; [eval] !except2_4
(push) ; 35
; [then-branch: 3635 | False | live]
; [else-branch: 3635 | True | live]
(push) ; 36
; [then-branch: 3635 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 3635 | True]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or p2_27@996@01 (not p2_27@996@01)))
; [exec]
; p3_12 := p1_27 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_27 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 33
; [then-branch: 3636 | !(p1_27@995@01) | live]
; [else-branch: 3636 | p1_27@995@01 | live]
(push) ; 34
; [then-branch: 3636 | !(p1_27@995@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 3636 | p1_27@995@01]
(assert p1_27@995@01)
; [eval] !except1_4
(push) ; 35
; [then-branch: 3637 | False | live]
; [else-branch: 3637 | True | live]
(push) ; 36
; [then-branch: 3637 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 3637 | True]
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [exec]
; p4_12 := p2_27 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_27 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 33
; [then-branch: 3638 | !(p2_27@996@01) | live]
; [else-branch: 3638 | p2_27@996@01 | live]
(push) ; 34
; [then-branch: 3638 | !(p2_27@996@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 3638 | p2_27@996@01]
(assert p2_27@996@01)
; [eval] !except2_4
(push) ; 35
; [then-branch: 3639 | False | live]
; [else-branch: 3639 | True | live]
(push) ; 36
; [then-branch: 3639 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 3639 | True]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [eval] p1_28 && !except1_4
; [then-branch: 3640 | False | dead]
; [else-branch: 3640 | True | live]
(push) ; 33
; [else-branch: 3640 | True]
(pop) ; 33
; [eval] !(p1_28 && !except1_4)
; [eval] p1_28 && !except1_4
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3641 | True | live]
; [else-branch: 3641 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 3641 | True]
; [eval] p2_28 && !except2_4
; [then-branch: 3642 | False | dead]
; [else-branch: 3642 | True | live]
(push) ; 34
; [else-branch: 3642 | True]
(pop) ; 34
; [eval] !(p2_28 && !except2_4)
; [eval] p2_28 && !except2_4
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3643 | True | live]
; [else-branch: 3643 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3643 | True]
; [eval] p1_27 && !except1_4
(push) ; 35
; [then-branch: 3644 | !(p1_27@995@01) | live]
; [else-branch: 3644 | p1_27@995@01 | live]
(push) ; 36
; [then-branch: 3644 | !(p1_27@995@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 3644 | p1_27@995@01]
(assert p1_27@995@01)
; [eval] !except1_4
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 3645 | p1_27@995@01 | dead]
; [else-branch: 3645 | !(p1_27@995@01) | live]
(push) ; 35
; [else-branch: 3645 | !(p1_27@995@01)]
(pop) ; 35
; [eval] !(p1_27 && !except1_4)
; [eval] p1_27 && !except1_4
(push) ; 35
; [then-branch: 3646 | !(p1_27@995@01) | live]
; [else-branch: 3646 | p1_27@995@01 | live]
(push) ; 36
; [then-branch: 3646 | !(p1_27@995@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 3646 | p1_27@995@01]
(assert p1_27@995@01)
; [eval] !except1_4
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not p1_27@995@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3647 | !(p1_27@995@01) | live]
; [else-branch: 3647 | p1_27@995@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3647 | !(p1_27@995@01)]
; [eval] p2_27 && !except2_4
(push) ; 36
; [then-branch: 3648 | !(p2_27@996@01) | live]
; [else-branch: 3648 | p2_27@996@01 | live]
(push) ; 37
; [then-branch: 3648 | !(p2_27@996@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 3648 | p2_27@996@01]
(assert p2_27@996@01)
; [eval] !except2_4
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
; [then-branch: 3649 | p2_27@996@01 | dead]
; [else-branch: 3649 | !(p2_27@996@01) | live]
(push) ; 36
; [else-branch: 3649 | !(p2_27@996@01)]
(pop) ; 36
; [eval] !(p2_27 && !except2_4)
; [eval] p2_27 && !except2_4
(push) ; 36
; [then-branch: 3650 | !(p2_27@996@01) | live]
; [else-branch: 3650 | p2_27@996@01 | live]
(push) ; 37
; [then-branch: 3650 | !(p2_27@996@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 3650 | p2_27@996@01]
(assert p2_27@996@01)
; [eval] !except2_4
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not p2_27@996@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3651 | !(p2_27@996@01) | live]
; [else-branch: 3651 | p2_27@996@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 3651 | !(p2_27@996@01)]
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 3652 | !(p1_21@912@01) | live]
; [else-branch: 3652 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 3652 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3652 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3653 | p1_21@912@01 | live]
; [else-branch: 3653 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3653 | p1_21@912@01]
; [exec]
; _err := null
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 3654 | !(p2_21@913@01) | live]
; [else-branch: 3654 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 3654 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 39
(push) ; 39
; [else-branch: 3654 | p2_21@913@01]
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3655 | p2_21@913@01 | live]
; [else-branch: 3655 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3655 | p2_21@913@01]
; [exec]
; _err_5 := null
; [exec]
; assert (p1_21 ==> !except1_4) && (p2_21 ==> !except2_4)
; [eval] p1_21 ==> !except1_4
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3656 | p1_21@912@01 | live]
; [else-branch: 3656 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3656 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> !except2_4
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3657 | p2_21@913@01 | live]
; [else-branch: 3657 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3657 | p2_21@913@01]
; [eval] !except2_4
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3658 | p1_21@912@01 | live]
; [else-branch: 3658 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3658 | p1_21@912@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3659 | p2_21@913@01 | live]
; [else-branch: 3659 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3659 | p2_21@913@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3660 | p1_21@912@01 | live]
; [else-branch: 3660 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3660 | p1_21@912@01]
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3661 | p2_21@913@01 | live]
; [else-branch: 3661 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3661 | p2_21@913@01]
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3662 | p1_21@912@01 | live]
; [else-branch: 3662 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3662 | p1_21@912@01]
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(push) ; 41
(assert (not (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@993@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@993@01) (as int<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3663 | p2_21@913@01 | live]
; [else-branch: 3663 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3663 | p2_21@913@01]
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(push) ; 41
(assert (not (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@994@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@994@01) (as int<PyType>  PyType))))
; [eval] p1_21 && p2_21 ==> c_1.Container_value == c_1_0.Container_valuep
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 3664 | !(p1_21@912@01) | live]
; [else-branch: 3664 | p1_21@912@01 | live]
(push) ; 42
; [then-branch: 3664 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 42
(push) ; 42
; [else-branch: 3664 | p1_21@912@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_21@912@01 p2_21@913@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3665 | p1_21@912@01 && p2_21@913@01 | live]
; [else-branch: 3665 | !(p1_21@912@01 && p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3665 | p1_21@912@01 && p2_21@913@01]
(assert (and p1_21@912@01 p2_21@913@01))
; [eval] c_1.Container_value == c_1_0.Container_valuep
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (and p1_21@912@01 p2_21@913@01))
(push) ; 41
(assert (not (=>
  (and p1_21@912@01 p2_21@913@01)
  (= Container_value@993@01 Container_valuep@994@01))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_21@912@01 p2_21@913@01)
  (= Container_value@993@01 Container_valuep@994@01)))
; [eval] p1_21 ==> int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3666 | p1_21@912@01 | live]
; [else-branch: 3666 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3666 | p1_21@912@01]
; [eval] int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] int___eq__(i, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 43
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 43
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 43
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3667 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 3667 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3667 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p2_21 ==> int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3668 | p2_21@913@01 | live]
; [else-branch: 3668 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3668 | p2_21@913@01]
; [eval] int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
; [eval] int___eq__(i_7, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 43
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 43
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 43
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3669 | int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 3669 | !(int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3669 | !(int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p1_21 ==> int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3670 | p1_21@912@01 | live]
; [else-branch: 3670 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3670 | p1_21@912@01]
; [eval] int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3671 | int___lt__(_, int___unbox__(_, i@920@01), 0) | live]
; [else-branch: 3671 | !(int___lt__(_, int___unbox__(_, i@920@01), 0)) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 3671 | int___lt__(_, int___unbox__(_, i@920@01), 0)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@993@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@993@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@993@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@993@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@993@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (issubtype<Bool> (typeof<PyType> Container_value@993@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@993@01 (__prim__int___box__ $Snap.unit (- 0 1))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
        (issubtype<Bool> (typeof<PyType> Container_value@993@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@993@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(push) ; 41
(assert (not (=>
  (and
    p1_21@912@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@993@01 (__prim__int___box__ $Snap.unit (- 0 1))))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_21@912@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@993@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
; [eval] p2_21 ==> int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3672 | p2_21@913@01 | live]
; [else-branch: 3672 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3672 | p2_21@913@01]
; [eval] int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i_7), 0)
; [eval] int___unbox__(i_7)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 43
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3673 | int___lt__(_, int___unbox__(_, i_7@921@01), 0) | live]
; [else-branch: 3673 | !(int___lt__(_, int___unbox__(_, i_7@921@01), 0)) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 3673 | int___lt__(_, int___unbox__(_, i_7@921@01), 0)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@994@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@994@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@994@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@994@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@994@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (issubtype<Bool> (typeof<PyType> Container_valuep@994@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@994@01 (__prim__int___box__ $Snap.unit (- 0 1))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
        (issubtype<Bool> (typeof<PyType> Container_valuep@994@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@994@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(push) ; 41
(assert (not (=>
  (and
    p2_21@913@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@994@01 (__prim__int___box__ $Snap.unit (- 0 1))))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p2_21@913@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@994@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
; [eval] p1_21 ==> int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3674 | p1_21@912@01 | live]
; [else-branch: 3674 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3674 | p1_21@912@01]
; [eval] int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3675 | int___gt__(_, int___unbox__(_, i@920@01), 0) | dead]
; [else-branch: 3675 | !(int___gt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3675 | !(int___gt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [eval] p2_21 ==> int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3676 | p2_21@913@01 | live]
; [else-branch: 3676 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3676 | p2_21@913@01]
; [eval] int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i_7), 0)
; [eval] int___unbox__(i_7)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 43
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3677 | int___gt__(_, int___unbox__(_, i_7@921@01), 0) | dead]
; [else-branch: 3677 | !(int___gt__(_, int___unbox__(_, i_7@921@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3677 | !(int___gt__(_, int___unbox__(_, i_7@921@01), 0))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))))
; [eval] p1_21 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3678 | p1_21@912@01 | live]
; [else-branch: 3678 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3678 | p1_21@912@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 43
; [then-branch: 3679 | False | live]
; [else-branch: 3679 | True | live]
(push) ; 44
; [then-branch: 3679 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3679 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 45
; [then-branch: 3680 | False | live]
; [else-branch: 3680 | True | live]
(push) ; 46
; [then-branch: 3680 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3680 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 47
; [then-branch: 3681 | False | live]
; [else-branch: 3681 | True | live]
(push) ; 48
; [then-branch: 3681 | False]
(assert false)
(pop) ; 48
(push) ; 48
; [else-branch: 3681 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p2_21 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3682 | p2_21@913@01 | live]
; [else-branch: 3682 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3682 | p2_21@913@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 43
; [then-branch: 3683 | False | live]
; [else-branch: 3683 | True | live]
(push) ; 44
; [then-branch: 3683 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3683 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 45
; [then-branch: 3684 | False | live]
; [else-branch: 3684 | True | live]
(push) ; 46
; [then-branch: 3684 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3684 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 47
; [then-branch: 3685 | False | live]
; [else-branch: 3685 | True | live]
(push) ; 48
; [then-branch: 3685 | False]
(assert false)
(pop) ; 48
(push) ; 48
; [else-branch: 3685 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
(pop) ; 38
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 3686 | !(p2_21@913@01) | live]
; [else-branch: 3686 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 3686 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 39
(push) ; 39
; [else-branch: 3686 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3687 | !(p2_21@913@01) | dead]
; [else-branch: 3687 | p2_21@913@01 | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 3687 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 38
(pop) ; 37
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 3688 | !(p1_21@912@01) | live]
; [else-branch: 3688 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 3688 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3688 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3689 | !(p1_21@912@01) | dead]
; [else-branch: 3689 | p1_21@912@01 | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 3689 | p1_21@912@01]
(assert p1_21@912@01)
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 3690 | !(p2_21@913@01) | live]
; [else-branch: 3690 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 3690 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3690 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3691 | !(p2_21@913@01) | dead]
; [else-branch: 3691 | p2_21@913@01 | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 3691 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 30
(pop) ; 29
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 3692 | !(p1_21@912@01) | live]
; [else-branch: 3692 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 3692 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3692 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3693 | !(p1_21@912@01) | dead]
; [else-branch: 3693 | p1_21@912@01 | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 3693 | p1_21@912@01]
(assert p1_21@912@01)
(pop) ; 29
(pop) ; 28
; [eval] !(p2_25 && !except2_4)
; [eval] p2_25 && !except2_4
(push) ; 28
; [then-branch: 3694 | !(p2_25@992@01) | live]
; [else-branch: 3694 | p2_25@992@01 | live]
(push) ; 29
; [then-branch: 3694 | !(p2_25@992@01)]
(assert (not p2_25@992@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3694 | p2_25@992@01]
; [eval] !except2_4
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 3695 | !(p2_25@992@01) | dead]
; [else-branch: 3695 | p2_25@992@01 | live]
(push) ; 28
; [else-branch: 3695 | p2_25@992@01]
(pop) ; 28
(pop) ; 27
; [eval] !(p1_25 && !except1_4)
; [eval] p1_25 && !except1_4
(push) ; 27
; [then-branch: 3696 | !(p1_25@991@01) | live]
; [else-branch: 3696 | p1_25@991@01 | live]
(push) ; 28
; [then-branch: 3696 | !(p1_25@991@01)]
(assert (not p1_25@991@01))
(pop) ; 28
(push) ; 28
; [else-branch: 3696 | p1_25@991@01]
; [eval] !except1_4
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 3697 | !(p1_25@991@01) | dead]
; [else-branch: 3697 | p1_25@991@01 | live]
(push) ; 27
; [else-branch: 3697 | p1_25@991@01]
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !p2_25
(push) ; 24
(set-option :timeout 10)
(assert (not p2_25@992@01))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3698 | !(p2_25@992@01) | dead]
; [else-branch: 3698 | p2_25@992@01 | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 3698 | p2_25@992@01]
(assert p2_25@992@01)
(pop) ; 24
(pop) ; 23
; [eval] !p1_25
(push) ; 23
(set-option :timeout 10)
(assert (not p1_25@991@01))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3699 | !(p1_25@991@01) | dead]
; [else-branch: 3699 | p1_25@991@01 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 3699 | p1_25@991@01]
(assert p1_25@991@01)
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 12
; [then-branch: 3700 | !(p2_22@982@01) | live]
; [else-branch: 3700 | p2_22@982@01 | live]
(push) ; 13
; [then-branch: 3700 | !(p2_22@982@01)]
(assert (not p2_22@982@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3700 | p2_22@982@01]
; [eval] !except2_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 3701 | !(p2_22@982@01) | dead]
; [else-branch: 3701 | p2_22@982@01 | live]
(push) ; 12
; [else-branch: 3701 | p2_22@982@01]
(pop) ; 12
(pop) ; 11
; [eval] !(p1_22 && !except1_4)
; [eval] p1_22 && !except1_4
(push) ; 11
; [then-branch: 3702 | !(p1_22@981@01) | live]
; [else-branch: 3702 | p1_22@981@01 | live]
(push) ; 12
; [then-branch: 3702 | !(p1_22@981@01)]
(assert (not p1_22@981@01))
(pop) ; 12
(push) ; 12
; [else-branch: 3702 | p1_22@981@01]
; [eval] !except1_4
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 3703 | !(p1_22@981@01) | dead]
; [else-branch: 3703 | p1_22@981@01 | live]
(push) ; 11
; [else-branch: 3703 | p1_22@981@01]
(pop) ; 11
(pop) ; 10
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 10
; [then-branch: 3704 | !(p2_22@982@01) | live]
; [else-branch: 3704 | p2_22@982@01 | live]
(push) ; 11
; [then-branch: 3704 | !(p2_22@982@01)]
(assert (not p2_22@982@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3704 | p2_22@982@01]
; [eval] !except2_4
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 3705 | !(p2_22@982@01) | dead]
; [else-branch: 3705 | p2_22@982@01 | live]
(push) ; 10
; [else-branch: 3705 | p2_22@982@01]
(pop) ; 10
(pop) ; 9
; [eval] !(p1_22 && !except1_4)
; [eval] p1_22 && !except1_4
(push) ; 9
; [then-branch: 3706 | !(p1_22@981@01) | live]
; [else-branch: 3706 | p1_22@981@01 | live]
(push) ; 10
; [then-branch: 3706 | !(p1_22@981@01)]
(assert (not p1_22@981@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3706 | p1_22@981@01]
; [eval] !except1_4
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 3707 | !(p1_22@981@01) | dead]
; [else-branch: 3707 | p1_22@981@01 | live]
(push) ; 9
; [else-branch: 3707 | p1_22@981@01]
(pop) ; 9
(pop) ; 8
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 8
; [then-branch: 3708 | !(p2_22@982@01) | live]
; [else-branch: 3708 | p2_22@982@01 | live]
(push) ; 9
; [then-branch: 3708 | !(p2_22@982@01)]
(assert (not p2_22@982@01))
(pop) ; 9
(push) ; 9
; [else-branch: 3708 | p2_22@982@01]
(assert p2_22@982@01)
; [eval] !except2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_22@982@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3709 | !(p2_22@982@01) | dead]
; [else-branch: 3709 | p2_22@982@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 3709 | p2_22@982@01]
(assert p2_22@982@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 3561 | !(p1_22@981@01)]
(assert (not p1_22@981@01))
(pop) ; 7
; [eval] !(p1_22 && !except1_4)
; [eval] p1_22 && !except1_4
(push) ; 7
; [then-branch: 3710 | !(p1_22@981@01) | live]
; [else-branch: 3710 | p1_22@981@01 | live]
(push) ; 8
; [then-branch: 3710 | !(p1_22@981@01)]
(assert (not p1_22@981@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3710 | p1_22@981@01]
(assert p1_22@981@01)
; [eval] !except1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_22@981@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_22@981@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3711 | !(p1_22@981@01) | live]
; [else-branch: 3711 | p1_22@981@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3711 | !(p1_22@981@01)]
(assert (not p1_22@981@01))
; [eval] p2_22 && !except2_4
(push) ; 8
; [then-branch: 3712 | !(p2_22@982@01) | live]
; [else-branch: 3712 | p2_22@982@01 | live]
(push) ; 9
; [then-branch: 3712 | !(p2_22@982@01)]
(assert (not p2_22@982@01))
(pop) ; 9
(push) ; 9
; [else-branch: 3712 | p2_22@982@01]
(assert p2_22@982@01)
; [eval] !except2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_22@982@01 (not p2_22@982@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_22@982@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3713 | p2_22@982@01 | dead]
; [else-branch: 3713 | !(p2_22@982@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 3713 | !(p2_22@982@01)]
(assert (not p2_22@982@01))
(pop) ; 8
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 8
; [then-branch: 3714 | !(p2_22@982@01) | live]
; [else-branch: 3714 | p2_22@982@01 | live]
(push) ; 9
; [then-branch: 3714 | !(p2_22@982@01)]
(assert (not p2_22@982@01))
(pop) ; 9
(push) ; 9
; [else-branch: 3714 | p2_22@982@01]
(assert p2_22@982@01)
; [eval] !except2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_22@982@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_22@982@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3715 | !(p2_22@982@01) | live]
; [else-branch: 3715 | p2_22@982@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3715 | !(p2_22@982@01)]
(assert (not p2_22@982@01))
; [eval] p1_22 && !except1_4
(push) ; 9
; [then-branch: 3716 | !(p1_22@981@01) | live]
; [else-branch: 3716 | p1_22@981@01 | live]
(push) ; 10
; [then-branch: 3716 | !(p1_22@981@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 3716 | p1_22@981@01]
(assert p1_22@981@01)
; [eval] !except1_4
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 3717 | p1_22@981@01 | dead]
; [else-branch: 3717 | !(p1_22@981@01) | live]
(push) ; 9
; [else-branch: 3717 | !(p1_22@981@01)]
(pop) ; 9
; [eval] !(p1_22 && !except1_4)
; [eval] p1_22 && !except1_4
(push) ; 9
; [then-branch: 3718 | !(p1_22@981@01) | live]
; [else-branch: 3718 | p1_22@981@01 | live]
(push) ; 10
; [then-branch: 3718 | !(p1_22@981@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 3718 | p1_22@981@01]
(assert p1_22@981@01)
; [eval] !except1_4
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_22@981@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3719 | !(p1_22@981@01) | live]
; [else-branch: 3719 | p1_22@981@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3719 | !(p1_22@981@01)]
; [eval] p2_22 && !except2_4
(push) ; 10
; [then-branch: 3720 | !(p2_22@982@01) | live]
; [else-branch: 3720 | p2_22@982@01 | live]
(push) ; 11
; [then-branch: 3720 | !(p2_22@982@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 3720 | p2_22@982@01]
(assert p2_22@982@01)
; [eval] !except2_4
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 3721 | p2_22@982@01 | dead]
; [else-branch: 3721 | !(p2_22@982@01) | live]
(push) ; 10
; [else-branch: 3721 | !(p2_22@982@01)]
(pop) ; 10
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 10
; [then-branch: 3722 | !(p2_22@982@01) | live]
; [else-branch: 3722 | p2_22@982@01 | live]
(push) ; 11
; [then-branch: 3722 | !(p2_22@982@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 3722 | p2_22@982@01]
(assert p2_22@982@01)
; [eval] !except2_4
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_22@982@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3723 | !(p2_22@982@01) | live]
; [else-branch: 3723 | p2_22@982@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3723 | !(p2_22@982@01)]
; [eval] p1_22 && !except1_4
(push) ; 11
; [then-branch: 3724 | !(p1_22@981@01) | live]
; [else-branch: 3724 | p1_22@981@01 | live]
(push) ; 12
; [then-branch: 3724 | !(p1_22@981@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 3724 | p1_22@981@01]
(assert p1_22@981@01)
; [eval] !except1_4
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 3725 | p1_22@981@01 | dead]
; [else-branch: 3725 | !(p1_22@981@01) | live]
(push) ; 11
; [else-branch: 3725 | !(p1_22@981@01)]
(pop) ; 11
; [eval] !(p1_22 && !except1_4)
; [eval] p1_22 && !except1_4
(push) ; 11
; [then-branch: 3726 | !(p1_22@981@01) | live]
; [else-branch: 3726 | p1_22@981@01 | live]
(push) ; 12
; [then-branch: 3726 | !(p1_22@981@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 3726 | p1_22@981@01]
(assert p1_22@981@01)
; [eval] !except1_4
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p1_22@981@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3727 | !(p1_22@981@01) | live]
; [else-branch: 3727 | p1_22@981@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3727 | !(p1_22@981@01)]
; [eval] p2_22 && !except2_4
(push) ; 12
; [then-branch: 3728 | !(p2_22@982@01) | live]
; [else-branch: 3728 | p2_22@982@01 | live]
(push) ; 13
; [then-branch: 3728 | !(p2_22@982@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 3728 | p2_22@982@01]
(assert p2_22@982@01)
; [eval] !except2_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 3729 | p2_22@982@01 | dead]
; [else-branch: 3729 | !(p2_22@982@01) | live]
(push) ; 12
; [else-branch: 3729 | !(p2_22@982@01)]
(pop) ; 12
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 12
; [then-branch: 3730 | !(p2_22@982@01) | live]
; [else-branch: 3730 | p2_22@982@01 | live]
(push) ; 13
; [then-branch: 3730 | !(p2_22@982@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 3730 | p2_22@982@01]
(assert p2_22@982@01)
; [eval] !except2_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_22@982@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3731 | !(p2_22@982@01) | live]
; [else-branch: 3731 | p2_22@982@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3731 | !(p2_22@982@01)]
; [exec]
; p1_23 := p3_8 && (!except1_4 && int___gt__(int___unbox__(i_5), 0))
; [eval] p3_8 && (!except1_4 && int___gt__(int___unbox__(i_5), 0))
(push) ; 13
; [then-branch: 3732 | !(p3_8@983@01) | live]
; [else-branch: 3732 | p3_8@983@01 | live]
(push) ; 14
; [then-branch: 3732 | !(p3_8@983@01)]
(assert (not p3_8@983@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3732 | p3_8@983@01]
(assert p3_8@983@01)
; [eval] !except1_4
(push) ; 15
; [then-branch: 3733 | False | live]
; [else-branch: 3733 | True | live]
(push) ; 16
; [then-branch: 3733 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 3733 | True]
; [eval] int___gt__(int___unbox__(i_5), 0)
; [eval] int___unbox__(i_5)
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 17
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 17
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_8@983@01
  (and
    p3_8@983@01
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(assert (or p3_8@983@01 (not p3_8@983@01)))
(declare-const p1_23@997@01 Bool)
(assert (=
  p1_23@997@01
  (and p3_8@983@01 (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
; [exec]
; p2_23 := p4_8 && (!except2_4 && int___gt__(int___unbox__(i_5_0), 0))
; [eval] p4_8 && (!except2_4 && int___gt__(int___unbox__(i_5_0), 0))
(push) ; 13
; [then-branch: 3734 | !(p4_8@984@01) | live]
; [else-branch: 3734 | p4_8@984@01 | live]
(push) ; 14
; [then-branch: 3734 | !(p4_8@984@01)]
(assert (not p4_8@984@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3734 | p4_8@984@01]
(assert p4_8@984@01)
; [eval] !except2_4
(push) ; 15
; [then-branch: 3735 | False | live]
; [else-branch: 3735 | True | live]
(push) ; 16
; [then-branch: 3735 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 3735 | True]
; [eval] int___gt__(int___unbox__(i_5_0), 0)
; [eval] int___unbox__(i_5_0)
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 17
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 17
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_8@984@01
  (and
    p4_8@984@01
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(assert (or p4_8@984@01 (not p4_8@984@01)))
(declare-const p2_23@998@01 Bool)
(assert (=
  p2_23@998@01
  (and
    p4_8@984@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
; [exec]
; p3_9 := p3_8 && (!except1_4 && !int___gt__(int___unbox__(i_5), 0))
; [eval] p3_8 && (!except1_4 && !int___gt__(int___unbox__(i_5), 0))
(push) ; 13
; [then-branch: 3736 | !(p3_8@983@01) | live]
; [else-branch: 3736 | p3_8@983@01 | live]
(push) ; 14
; [then-branch: 3736 | !(p3_8@983@01)]
(assert (not p3_8@983@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3736 | p3_8@983@01]
(assert p3_8@983@01)
; [eval] !except1_4
(push) ; 15
; [then-branch: 3737 | False | live]
; [else-branch: 3737 | True | live]
(push) ; 16
; [then-branch: 3737 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 3737 | True]
; [eval] !int___gt__(int___unbox__(i_5), 0)
; [eval] int___gt__(int___unbox__(i_5), 0)
; [eval] int___unbox__(i_5)
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 17
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 17
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const p3_9@999@01 Bool)
(assert (=
  p3_9@999@01
  (and
    p3_8@983@01
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [exec]
; p4_9 := p4_8 && (!except2_4 && !int___gt__(int___unbox__(i_5_0), 0))
; [eval] p4_8 && (!except2_4 && !int___gt__(int___unbox__(i_5_0), 0))
(push) ; 13
; [then-branch: 3738 | !(p4_8@984@01) | live]
; [else-branch: 3738 | p4_8@984@01 | live]
(push) ; 14
; [then-branch: 3738 | !(p4_8@984@01)]
(assert (not p4_8@984@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3738 | p4_8@984@01]
(assert p4_8@984@01)
; [eval] !except2_4
(push) ; 15
; [then-branch: 3739 | False | live]
; [else-branch: 3739 | True | live]
(push) ; 16
; [then-branch: 3739 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 3739 | True]
; [eval] !int___gt__(int___unbox__(i_5_0), 0)
; [eval] int___gt__(int___unbox__(i_5_0), 0)
; [eval] int___unbox__(i_5_0)
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 17
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 17
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const p4_9@1000@01 Bool)
(assert (=
  p4_9@1000@01
  (and
    p4_8@984@01
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))))
; [exec]
; tmp_7 := new()
(declare-const tmp_7@1001@01 $Ref)
(assert (not (= tmp_7@1001@01 $Ref.null)))
(assert (not (= tmp_7@1001@01 MyException_res_6_0@941@01)))
(assert (not
  (=
    tmp_7@1001@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))
(assert (not
  (=
    tmp_7@1001@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
(assert (not (= tmp_7@1001@01 i_7@921@01)))
(assert (not (= tmp_7@1001@01 _cthread_162_0@915@01)))
(assert (not (= tmp_7@1001@01 error_4@932@01)))
(assert (not (= tmp_7@1001@01 error_4_0@933@01)))
(assert (not (= tmp_7@1001@01 c_1_0@923@01)))
(assert (not (= tmp_7@1001@01 c_1@922@01)))
(assert (not (= tmp_7@1001@01 MyException_res_6@940@01)))
(assert (not (= tmp_7@1001@01 tmp_7@965@01)))
(assert (not (= tmp_7@1001@01 _cthread_162@914@01)))
(assert (not (= tmp_7@1001@01 MyException2_res@942@01)))
(assert (not (= tmp_7@1001@01 tmp_6@985@01)))
(assert (not (= tmp_7@1001@01 i@920@01)))
(assert (not (= tmp_7@1001@01 MyException2_res_1@943@01)))
; [eval] p1_23 && !except1_4
(push) ; 13
; [then-branch: 3740 | !(p1_23@997@01) | live]
; [else-branch: 3740 | p1_23@997@01 | live]
(push) ; 14
; [then-branch: 3740 | !(p1_23@997@01)]
(assert (not p1_23@997@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3740 | p1_23@997@01]
(assert p1_23@997@01)
; [eval] !except1_4
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p1_23@997@01 (not p1_23@997@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_23@997@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not p1_23@997@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3741 | p1_23@997@01 | live]
; [else-branch: 3741 | !(p1_23@997@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3741 | p1_23@997@01]
(assert p1_23@997@01)
; [exec]
; MyException2_res := tmp_7
; [eval] p2_23 && !except2_4
(push) ; 14
; [then-branch: 3742 | !(p2_23@998@01) | live]
; [else-branch: 3742 | p2_23@998@01 | live]
(push) ; 15
; [then-branch: 3742 | !(p2_23@998@01)]
(assert (not p2_23@998@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3742 | p2_23@998@01]
(assert p2_23@998@01)
; [eval] !except2_4
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p2_23@998@01 (not p2_23@998@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_23@998@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not p2_23@998@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3743 | p2_23@998@01 | live]
; [else-branch: 3743 | !(p2_23@998@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3743 | p2_23@998@01]
(assert p2_23@998@01)
; [exec]
; MyException2_res_1 := tmp_7
; [eval] p1_23 && !except1_4
(push) ; 15
; [then-branch: 3744 | !(p1_23@997@01) | live]
; [else-branch: 3744 | p1_23@997@01 | live]
(push) ; 16
; [then-branch: 3744 | !(p1_23@997@01)]
(assert (not p1_23@997@01))
(pop) ; 16
(push) ; 16
; [else-branch: 3744 | p1_23@997@01]
; [eval] !except1_4
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_23@997@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3745 | p1_23@997@01 | live]
; [else-branch: 3745 | !(p1_23@997@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3745 | p1_23@997@01]
; [exec]
; inhale typeof(MyException2_res) == MyException2()
(declare-const $t@1002@01 $Snap)
(assert (= $t@1002@01 $Snap.unit))
; [eval] typeof(MyException2_res) == MyException2()
; [eval] typeof(MyException2_res)
; [eval] MyException2()
(assert (= (typeof<PyType> tmp_7@1001@01) (as MyException2<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_23 && !except2_4
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3746 | !(p2_23@998@01) | live]
; [else-branch: 3746 | p2_23@998@01 | live]
(push) ; 17
; [then-branch: 3746 | !(p2_23@998@01)]
(assert (not p2_23@998@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3746 | p2_23@998@01]
; [eval] !except2_4
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_23@998@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3747 | p2_23@998@01 | live]
; [else-branch: 3747 | !(p2_23@998@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3747 | p2_23@998@01]
; [exec]
; inhale typeof(MyException2_res_1) == MyException2()
(declare-const $t@1003@01 $Snap)
(assert (= $t@1003@01 $Snap.unit))
; [eval] typeof(MyException2_res_1) == MyException2()
; [eval] typeof(MyException2_res_1)
; [eval] MyException2()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_23 && !except1_4
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3748 | !(p1_23@997@01) | live]
; [else-branch: 3748 | p1_23@997@01 | live]
(push) ; 18
; [then-branch: 3748 | !(p1_23@997@01)]
(assert (not p1_23@997@01))
(pop) ; 18
(push) ; 18
; [else-branch: 3748 | p1_23@997@01]
; [eval] !except1_4
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_23@997@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3749 | p1_23@997@01 | live]
; [else-branch: 3749 | !(p1_23@997@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3749 | p1_23@997@01]
; [exec]
; _err := MyException2_res
; [exec]
; except1_4 := true
; [eval] p2_23 && !except2_4
(push) ; 18
; [then-branch: 3750 | !(p2_23@998@01) | live]
; [else-branch: 3750 | p2_23@998@01 | live]
(push) ; 19
; [then-branch: 3750 | !(p2_23@998@01)]
(assert (not p2_23@998@01))
(pop) ; 19
(push) ; 19
; [else-branch: 3750 | p2_23@998@01]
; [eval] !except2_4
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_23@998@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3751 | p2_23@998@01 | live]
; [else-branch: 3751 | !(p2_23@998@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3751 | p2_23@998@01]
; [exec]
; _err_5 := MyException2_res_1
; [exec]
; except2_4 := true
; [exec]
; p1_24 := p3_9 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_9 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 19
; [then-branch: 3752 | !(p3_9@999@01) | live]
; [else-branch: 3752 | p3_9@999@01 | live]
(push) ; 20
; [then-branch: 3752 | !(p3_9@999@01)]
(assert (not p3_9@999@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3752 | p3_9@999@01]
(assert p3_9@999@01)
; [eval] !except1_4
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p3_9@999@01 (not p3_9@999@01)))
; [exec]
; p2_24 := p4_9 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_9 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 19
; [then-branch: 3753 | !(p4_9@1000@01) | live]
; [else-branch: 3753 | p4_9@1000@01 | live]
(push) ; 20
; [then-branch: 3753 | !(p4_9@1000@01)]
(assert (not p4_9@1000@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3753 | p4_9@1000@01]
(assert p4_9@1000@01)
; [eval] !except2_4
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p4_9@1000@01 (not p4_9@1000@01)))
; [exec]
; p3_10 := p3_9 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_9 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 19
; [then-branch: 3754 | !(p3_9@999@01) | live]
; [else-branch: 3754 | p3_9@999@01 | live]
(push) ; 20
; [then-branch: 3754 | !(p3_9@999@01)]
(assert (not p3_9@999@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3754 | p3_9@999@01]
(assert p3_9@999@01)
; [eval] !except1_4
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [exec]
; p4_10 := p4_9 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_9 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 19
; [then-branch: 3755 | !(p4_9@1000@01) | live]
; [else-branch: 3755 | p4_9@1000@01 | live]
(push) ; 20
; [then-branch: 3755 | !(p4_9@1000@01)]
(assert (not p4_9@1000@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3755 | p4_9@1000@01]
(assert p4_9@1000@01)
; [eval] !except2_4
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [eval] p1_24 && !except1_4
; [then-branch: 3756 | False | dead]
; [else-branch: 3756 | True | live]
(push) ; 19
; [else-branch: 3756 | True]
(pop) ; 19
; [eval] !(p1_24 && !except1_4)
; [eval] p1_24 && !except1_4
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3757 | True | live]
; [else-branch: 3757 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3757 | True]
; [eval] p2_24 && !except2_4
; [then-branch: 3758 | False | dead]
; [else-branch: 3758 | True | live]
(push) ; 20
; [else-branch: 3758 | True]
(pop) ; 20
; [eval] !(p2_24 && !except2_4)
; [eval] p2_24 && !except2_4
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3759 | True | live]
; [else-branch: 3759 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3759 | True]
; [eval] p3_9 && !except1_4
(push) ; 21
; [then-branch: 3760 | !(p3_9@999@01) | live]
; [else-branch: 3760 | p3_9@999@01 | live]
(push) ; 22
; [then-branch: 3760 | !(p3_9@999@01)]
(assert (not p3_9@999@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3760 | p3_9@999@01]
(assert p3_9@999@01)
; [eval] !except1_4
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 3761 | False | dead]
; [else-branch: 3761 | True | live]
(push) ; 21
; [else-branch: 3761 | True]
(pop) ; 21
; [eval] !(p3_9 && !except1_4)
; [eval] p3_9 && !except1_4
(push) ; 21
; [then-branch: 3762 | !(p3_9@999@01) | live]
; [else-branch: 3762 | p3_9@999@01 | live]
(push) ; 22
; [then-branch: 3762 | !(p3_9@999@01)]
(assert (not p3_9@999@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3762 | p3_9@999@01]
(assert p3_9@999@01)
; [eval] !except1_4
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3763 | True | live]
; [else-branch: 3763 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3763 | True]
; [eval] p4_9 && !except2_4
(push) ; 22
; [then-branch: 3764 | !(p4_9@1000@01) | live]
; [else-branch: 3764 | p4_9@1000@01 | live]
(push) ; 23
; [then-branch: 3764 | !(p4_9@1000@01)]
(assert (not p4_9@1000@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3764 | p4_9@1000@01]
(assert p4_9@1000@01)
; [eval] !except2_4
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 3765 | False | dead]
; [else-branch: 3765 | True | live]
(push) ; 22
; [else-branch: 3765 | True]
(pop) ; 22
; [eval] !(p4_9 && !except2_4)
; [eval] p4_9 && !except2_4
(push) ; 22
; [then-branch: 3766 | !(p4_9@1000@01) | live]
; [else-branch: 3766 | p4_9@1000@01 | live]
(push) ; 23
; [then-branch: 3766 | !(p4_9@1000@01)]
(assert (not p4_9@1000@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3766 | p4_9@1000@01]
(assert p4_9@1000@01)
; [eval] !except2_4
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3767 | True | live]
; [else-branch: 3767 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3767 | True]
; [exec]
; thisexcept1_4 := except1_4 && !bypass1_4
; [eval] except1_4 && !bypass1_4
(push) ; 23
; [then-branch: 3768 | False | live]
; [else-branch: 3768 | True | live]
(push) ; 24
; [then-branch: 3768 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3768 | True]
; [eval] !bypass1_4
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_4@1004@01 Bool)
(assert (= thisexcept1_4@1004@01 (not bypass1_4@979@01)))
; [exec]
; thisexcept2_4 := except2_4 && !bypass2_4
; [eval] except2_4 && !bypass2_4
(push) ; 23
; [then-branch: 3769 | False | live]
; [else-branch: 3769 | True | live]
(push) ; 24
; [then-branch: 3769 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3769 | True]
; [eval] !bypass2_4
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_4@1005@01 Bool)
(assert (= thisexcept2_4@1005@01 (not bypass2_4@980@01)))
; [exec]
; p1_25 := p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
(push) ; 23
; [then-branch: 3770 | !(p1_21@912@01) | live]
; [else-branch: 3770 | p1_21@912@01 | live]
(push) ; 24
; [then-branch: 3770 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3770 | p1_21@912@01]
(assert p1_21@912@01)
(push) ; 25
; [then-branch: 3771 | !(thisexcept1_4@1004@01) | live]
; [else-branch: 3771 | thisexcept1_4@1004@01 | live]
(push) ; 26
; [then-branch: 3771 | !(thisexcept1_4@1004@01)]
(assert (not thisexcept1_4@1004@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3771 | thisexcept1_4@1004@01]
(assert thisexcept1_4@1004@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_4@1004@01 (not thisexcept1_4@1004@01)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and p1_21@912@01 (or thisexcept1_4@1004@01 (not thisexcept1_4@1004@01)))))
(declare-const p1_25@1006@01 Bool)
(assert (=
  p1_25@1006@01
  (and
    p1_21@912@01
    (and
      thisexcept1_4@1004@01
      (issubtype<Bool> (typeof<PyType> tmp_7@1001@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_25 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
(push) ; 23
; [then-branch: 3772 | !(p2_21@913@01) | live]
; [else-branch: 3772 | p2_21@913@01 | live]
(push) ; 24
; [then-branch: 3772 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3772 | p2_21@913@01]
(assert p2_21@913@01)
(push) ; 25
; [then-branch: 3773 | !(thisexcept2_4@1005@01) | live]
; [else-branch: 3773 | thisexcept2_4@1005@01 | live]
(push) ; 26
; [then-branch: 3773 | !(thisexcept2_4@1005@01)]
(assert (not thisexcept2_4@1005@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3773 | thisexcept2_4@1005@01]
(assert thisexcept2_4@1005@01)
; [eval] issubtype(typeof(_err_5), MyException())
; [eval] typeof(_err_5)
; [eval] MyException()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_4@1005@01 (not thisexcept2_4@1005@01)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and p2_21@913@01 (or thisexcept2_4@1005@01 (not thisexcept2_4@1005@01)))))
(declare-const p2_25@1007@01 Bool)
(assert (=
  p2_25@1007@01
  (and
    p2_21@913@01
    (and
      thisexcept2_4@1005@01
      (issubtype<Bool> (typeof<PyType> tmp_7@1001@01) (as MyException<PyType>  PyType))))))
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_25@1006@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3774 | p1_25@1006@01 | dead]
; [else-branch: 3774 | !(p1_25@1006@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 3774 | !(p1_25@1006@01)]
(assert (not p1_25@1006@01))
(pop) ; 23
; [eval] !p1_25
(push) ; 23
(set-option :timeout 10)
(assert (not p1_25@1006@01))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_25@1006@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3775 | !(p1_25@1006@01) | live]
; [else-branch: 3775 | p1_25@1006@01 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3775 | !(p1_25@1006@01)]
(assert (not p1_25@1006@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_25@1007@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3776 | p2_25@1007@01 | dead]
; [else-branch: 3776 | !(p2_25@1007@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 3776 | !(p2_25@1007@01)]
(assert (not p2_25@1007@01))
(pop) ; 24
; [eval] !p2_25
(push) ; 24
(set-option :timeout 10)
(assert (not p2_25@1007@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_25@1007@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3777 | !(p2_25@1007@01) | live]
; [else-branch: 3777 | p2_25@1007@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3777 | !(p2_25@1007@01)]
(assert (not p2_25@1007@01))
; [exec]
; p1_26 := p1_25 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_25 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 25
; [then-branch: 3778 | !(p1_25@1006@01) | live]
; [else-branch: 3778 | p1_25@1006@01 | live]
(push) ; 26
; [then-branch: 3778 | !(p1_25@1006@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 3778 | p1_25@1006@01]
(assert p1_25@1006@01)
; [eval] !except1_4
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or p1_25@1006@01 (not p1_25@1006@01)))
; [exec]
; p2_26 := p2_25 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_25 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 25
; [then-branch: 3779 | !(p2_25@1007@01) | live]
; [else-branch: 3779 | p2_25@1007@01 | live]
(push) ; 26
; [then-branch: 3779 | !(p2_25@1007@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 3779 | p2_25@1007@01]
(assert p2_25@1007@01)
; [eval] !except2_4
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or p2_25@1007@01 (not p2_25@1007@01)))
; [exec]
; p3_11 := p1_25 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_25 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 25
; [then-branch: 3780 | !(p1_25@1006@01) | live]
; [else-branch: 3780 | p1_25@1006@01 | live]
(push) ; 26
; [then-branch: 3780 | !(p1_25@1006@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 3780 | p1_25@1006@01]
(assert p1_25@1006@01)
; [eval] !except1_4
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [exec]
; p4_11 := p2_25 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_25 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 25
; [then-branch: 3781 | !(p2_25@1007@01) | live]
; [else-branch: 3781 | p2_25@1007@01 | live]
(push) ; 26
; [then-branch: 3781 | !(p2_25@1007@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 3781 | p2_25@1007@01]
(assert p2_25@1007@01)
; [eval] !except2_4
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [eval] p1_26 && !except1_4
; [then-branch: 3782 | False | dead]
; [else-branch: 3782 | True | live]
(push) ; 25
; [else-branch: 3782 | True]
(pop) ; 25
; [eval] !(p1_26 && !except1_4)
; [eval] p1_26 && !except1_4
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3783 | True | live]
; [else-branch: 3783 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3783 | True]
; [eval] p2_26 && !except2_4
; [then-branch: 3784 | False | dead]
; [else-branch: 3784 | True | live]
(push) ; 26
; [else-branch: 3784 | True]
(pop) ; 26
; [eval] !(p2_26 && !except2_4)
; [eval] p2_26 && !except2_4
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3785 | True | live]
; [else-branch: 3785 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3785 | True]
; [eval] p1_25 && !except1_4
(push) ; 27
; [then-branch: 3786 | !(p1_25@1006@01) | live]
; [else-branch: 3786 | p1_25@1006@01 | live]
(push) ; 28
; [then-branch: 3786 | !(p1_25@1006@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 3786 | p1_25@1006@01]
(assert p1_25@1006@01)
; [eval] !except1_4
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 3787 | False | dead]
; [else-branch: 3787 | True | live]
(push) ; 27
; [else-branch: 3787 | True]
(pop) ; 27
; [eval] !(p1_25 && !except1_4)
; [eval] p1_25 && !except1_4
(push) ; 27
; [then-branch: 3788 | !(p1_25@1006@01) | live]
; [else-branch: 3788 | p1_25@1006@01 | live]
(push) ; 28
; [then-branch: 3788 | !(p1_25@1006@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 3788 | p1_25@1006@01]
(assert p1_25@1006@01)
; [eval] !except1_4
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3789 | True | live]
; [else-branch: 3789 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3789 | True]
; [eval] p2_25 && !except2_4
(push) ; 28
; [then-branch: 3790 | !(p2_25@1007@01) | live]
; [else-branch: 3790 | p2_25@1007@01 | live]
(push) ; 29
; [then-branch: 3790 | !(p2_25@1007@01)]
(pop) ; 29
(push) ; 29
; [else-branch: 3790 | p2_25@1007@01]
(assert p2_25@1007@01)
; [eval] !except2_4
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 3791 | False | dead]
; [else-branch: 3791 | True | live]
(push) ; 28
; [else-branch: 3791 | True]
(pop) ; 28
; [eval] !(p2_25 && !except2_4)
; [eval] p2_25 && !except2_4
(push) ; 28
; [then-branch: 3792 | !(p2_25@1007@01) | live]
; [else-branch: 3792 | p2_25@1007@01 | live]
(push) ; 29
; [then-branch: 3792 | !(p2_25@1007@01)]
(pop) ; 29
(push) ; 29
; [else-branch: 3792 | p2_25@1007@01]
(assert p2_25@1007@01)
; [eval] !except2_4
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3793 | True | live]
; [else-branch: 3793 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3793 | True]
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 3794 | !(p1_21@912@01) | live]
; [else-branch: 3794 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 3794 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3794 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 3795 | False | dead]
; [else-branch: 3795 | True | live]
(push) ; 29
; [else-branch: 3795 | True]
(pop) ; 29
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 3796 | !(p1_21@912@01) | live]
; [else-branch: 3796 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 3796 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3796 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3797 | True | live]
; [else-branch: 3797 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3797 | True]
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 3798 | !(p2_21@913@01) | live]
; [else-branch: 3798 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 3798 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3798 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 3799 | False | dead]
; [else-branch: 3799 | True | live]
(push) ; 30
; [else-branch: 3799 | True]
(pop) ; 30
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 3800 | !(p2_21@913@01) | live]
; [else-branch: 3800 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 3800 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3800 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3801 | True | live]
; [else-branch: 3801 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3801 | True]
; [exec]
; p1_27 := p1_21 &&
;   (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
(push) ; 31
; [then-branch: 3802 | !(p1_21@912@01) | live]
; [else-branch: 3802 | p1_21@912@01 | live]
(push) ; 32
; [then-branch: 3802 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3802 | p1_21@912@01]
(assert p1_21@912@01)
(push) ; 33
; [then-branch: 3803 | !(thisexcept1_4@1004@01) | live]
; [else-branch: 3803 | thisexcept1_4@1004@01 | live]
(push) ; 34
; [then-branch: 3803 | !(thisexcept1_4@1004@01)]
(assert (not thisexcept1_4@1004@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3803 | thisexcept1_4@1004@01]
(assert thisexcept1_4@1004@01)
; [eval] issubtype(typeof(_err), MyException2())
; [eval] typeof(_err)
; [eval] MyException2()
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_4@1004@01 (not thisexcept1_4@1004@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(declare-const p1_27@1008@01 Bool)
(assert (=
  p1_27@1008@01
  (and
    p1_21@912@01
    (and
      thisexcept1_4@1004@01
      (issubtype<Bool> (typeof<PyType> tmp_7@1001@01) (as MyException2<PyType>  PyType))))))
; [exec]
; p2_27 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
(push) ; 31
; [then-branch: 3804 | !(p2_21@913@01) | live]
; [else-branch: 3804 | p2_21@913@01 | live]
(push) ; 32
; [then-branch: 3804 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3804 | p2_21@913@01]
(assert p2_21@913@01)
(push) ; 33
; [then-branch: 3805 | !(thisexcept2_4@1005@01) | live]
; [else-branch: 3805 | thisexcept2_4@1005@01 | live]
(push) ; 34
; [then-branch: 3805 | !(thisexcept2_4@1005@01)]
(assert (not thisexcept2_4@1005@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3805 | thisexcept2_4@1005@01]
(assert thisexcept2_4@1005@01)
; [eval] issubtype(typeof(_err_5), MyException2())
; [eval] typeof(_err_5)
; [eval] MyException2()
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_4@1005@01 (not thisexcept2_4@1005@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(declare-const p2_27@1009@01 Bool)
(assert (=
  p2_27@1009@01
  (and
    p2_21@913@01
    (and
      thisexcept2_4@1005@01
      (issubtype<Bool> (typeof<PyType> tmp_7@1001@01) (as MyException2<PyType>  PyType))))))
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_27@1008@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not p1_27@1008@01))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3806 | p1_27@1008@01 | live]
; [else-branch: 3806 | !(p1_27@1008@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3806 | p1_27@1008@01]
(assert p1_27@1008@01)
; [exec]
; except1_4 := false
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_27@1009@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 32
(set-option :timeout 10)
(assert (not p2_27@1009@01))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3807 | p2_27@1009@01 | live]
; [else-branch: 3807 | !(p2_27@1009@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3807 | p2_27@1009@01]
(assert p2_27@1009@01)
; [exec]
; except2_4 := false
; [exec]
; p1_28 := p1_27 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_27 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 33
; [then-branch: 3808 | !(p1_27@1008@01) | live]
; [else-branch: 3808 | p1_27@1008@01 | live]
(push) ; 34
; [then-branch: 3808 | !(p1_27@1008@01)]
(assert (not p1_27@1008@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3808 | p1_27@1008@01]
; [eval] !except1_4
(push) ; 35
; [then-branch: 3809 | False | live]
; [else-branch: 3809 | True | live]
(push) ; 36
; [then-branch: 3809 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 3809 | True]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or p1_27@1008@01 (not p1_27@1008@01)))
; [exec]
; p2_28 := p2_27 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_27 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 33
; [then-branch: 3810 | !(p2_27@1009@01) | live]
; [else-branch: 3810 | p2_27@1009@01 | live]
(push) ; 34
; [then-branch: 3810 | !(p2_27@1009@01)]
(assert (not p2_27@1009@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3810 | p2_27@1009@01]
; [eval] !except2_4
(push) ; 35
; [then-branch: 3811 | False | live]
; [else-branch: 3811 | True | live]
(push) ; 36
; [then-branch: 3811 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 3811 | True]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or p2_27@1009@01 (not p2_27@1009@01)))
; [exec]
; p3_12 := p1_27 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_27 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 33
; [then-branch: 3812 | !(p1_27@1008@01) | live]
; [else-branch: 3812 | p1_27@1008@01 | live]
(push) ; 34
; [then-branch: 3812 | !(p1_27@1008@01)]
(assert (not p1_27@1008@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3812 | p1_27@1008@01]
; [eval] !except1_4
(push) ; 35
; [then-branch: 3813 | False | live]
; [else-branch: 3813 | True | live]
(push) ; 36
; [then-branch: 3813 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 3813 | True]
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [exec]
; p4_12 := p2_27 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_27 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 33
; [then-branch: 3814 | !(p2_27@1009@01) | live]
; [else-branch: 3814 | p2_27@1009@01 | live]
(push) ; 34
; [then-branch: 3814 | !(p2_27@1009@01)]
(assert (not p2_27@1009@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3814 | p2_27@1009@01]
; [eval] !except2_4
(push) ; 35
; [then-branch: 3815 | False | live]
; [else-branch: 3815 | True | live]
(push) ; 36
; [then-branch: 3815 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 3815 | True]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [eval] p1_28 && !except1_4
; [then-branch: 3816 | False | dead]
; [else-branch: 3816 | True | live]
(push) ; 33
; [else-branch: 3816 | True]
(pop) ; 33
; [eval] !(p1_28 && !except1_4)
; [eval] p1_28 && !except1_4
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3817 | True | live]
; [else-branch: 3817 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 3817 | True]
; [eval] p2_28 && !except2_4
; [then-branch: 3818 | False | dead]
; [else-branch: 3818 | True | live]
(push) ; 34
; [else-branch: 3818 | True]
(pop) ; 34
; [eval] !(p2_28 && !except2_4)
; [eval] p2_28 && !except2_4
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3819 | True | live]
; [else-branch: 3819 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3819 | True]
; [eval] p1_27 && !except1_4
(push) ; 35
; [then-branch: 3820 | !(p1_27@1008@01) | live]
; [else-branch: 3820 | p1_27@1008@01 | live]
(push) ; 36
; [then-branch: 3820 | !(p1_27@1008@01)]
(assert (not p1_27@1008@01))
(pop) ; 36
(push) ; 36
; [else-branch: 3820 | p1_27@1008@01]
; [eval] !except1_4
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_27@1008@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3821 | p1_27@1008@01 | live]
; [else-branch: 3821 | !(p1_27@1008@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3821 | p1_27@1008@01]
; [exec]
; c_5.Container_value := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 36
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 36
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const Container_value@1010@01 $Ref)
(assert (= Container_value@1010@01 (__prim__int___box__ $Snap.unit 1)))
; [eval] p2_27 && !except2_4
(push) ; 36
; [then-branch: 3822 | !(p2_27@1009@01) | live]
; [else-branch: 3822 | p2_27@1009@01 | live]
(push) ; 37
; [then-branch: 3822 | !(p2_27@1009@01)]
(assert (not p2_27@1009@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3822 | p2_27@1009@01]
; [eval] !except2_4
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_27@1009@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3823 | p2_27@1009@01 | live]
; [else-branch: 3823 | !(p2_27@1009@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 3823 | p2_27@1009@01]
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 37
(pop) ; 37
; Joined path conditions
(declare-const Container_valuep@1011@01 $Ref)
(assert (= Container_valuep@1011@01 (__prim__int___box__ $Snap.unit 1)))
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 3824 | !(p1_21@912@01) | live]
; [else-branch: 3824 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 3824 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3824 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3825 | p1_21@912@01 | live]
; [else-branch: 3825 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3825 | p1_21@912@01]
(assert p1_21@912@01)
; [exec]
; _err := null
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 3826 | !(p2_21@913@01) | live]
; [else-branch: 3826 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 3826 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 39
(push) ; 39
; [else-branch: 3826 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3827 | p2_21@913@01 | live]
; [else-branch: 3827 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3827 | p2_21@913@01]
(assert p2_21@913@01)
; [exec]
; _err_5 := null
; [exec]
; assert (p1_21 ==> !except1_4) && (p2_21 ==> !except2_4)
; [eval] p1_21 ==> !except1_4
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3828 | p1_21@912@01 | live]
; [else-branch: 3828 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3828 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> !except2_4
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3829 | p2_21@913@01 | live]
; [else-branch: 3829 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3829 | p2_21@913@01]
; [eval] !except2_4
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3830 | p1_21@912@01 | live]
; [else-branch: 3830 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3830 | p1_21@912@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3831 | p2_21@913@01 | live]
; [else-branch: 3831 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3831 | p2_21@913@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3832 | p1_21@912@01 | live]
; [else-branch: 3832 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3832 | p1_21@912@01]
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3833 | p2_21@913@01 | live]
; [else-branch: 3833 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3833 | p2_21@913@01]
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3834 | p1_21@912@01 | live]
; [else-branch: 3834 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3834 | p1_21@912@01]
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(push) ; 41
(assert (not (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@1010@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@1010@01) (as int<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3835 | p2_21@913@01 | live]
; [else-branch: 3835 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3835 | p2_21@913@01]
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(push) ; 41
(assert (not (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1011@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1011@01) (as int<PyType>  PyType))))
; [eval] p1_21 && p2_21 ==> c_1.Container_value == c_1_0.Container_valuep
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 3836 | !(p1_21@912@01) | live]
; [else-branch: 3836 | p1_21@912@01 | live]
(push) ; 42
; [then-branch: 3836 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 42
(push) ; 42
; [else-branch: 3836 | p1_21@912@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_21@912@01 p2_21@913@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3837 | p1_21@912@01 && p2_21@913@01 | live]
; [else-branch: 3837 | !(p1_21@912@01 && p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3837 | p1_21@912@01 && p2_21@913@01]
(assert (and p1_21@912@01 p2_21@913@01))
; [eval] c_1.Container_value == c_1_0.Container_valuep
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (and p1_21@912@01 p2_21@913@01))
(push) ; 41
(assert (not (=>
  (and p1_21@912@01 p2_21@913@01)
  (= Container_value@1010@01 Container_valuep@1011@01))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_21@912@01 p2_21@913@01)
  (= Container_value@1010@01 Container_valuep@1011@01)))
; [eval] p1_21 ==> int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3838 | p1_21@912@01 | live]
; [else-branch: 3838 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3838 | p1_21@912@01]
; [eval] int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] int___eq__(i, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 43
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 43
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 43
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3839 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 3839 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3839 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p2_21 ==> int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3840 | p2_21@913@01 | live]
; [else-branch: 3840 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3840 | p2_21@913@01]
; [eval] int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
; [eval] int___eq__(i_7, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 43
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 43
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 43
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3841 | int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 3841 | !(int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3841 | !(int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p1_21 ==> int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3842 | p1_21@912@01 | live]
; [else-branch: 3842 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3842 | p1_21@912@01]
; [eval] int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3843 | int___lt__(_, int___unbox__(_, i@920@01), 0) | dead]
; [else-branch: 3843 | !(int___lt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3843 | !(int___lt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [eval] p2_21 ==> int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3844 | p2_21@913@01 | live]
; [else-branch: 3844 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3844 | p2_21@913@01]
; [eval] int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i_7), 0)
; [eval] int___unbox__(i_7)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 43
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3845 | int___lt__(_, int___unbox__(_, i_7@921@01), 0) | dead]
; [else-branch: 3845 | !(int___lt__(_, int___unbox__(_, i_7@921@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3845 | !(int___lt__(_, int___unbox__(_, i_7@921@01), 0))]
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))))
; [eval] p1_21 ==> int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3846 | p1_21@912@01 | live]
; [else-branch: 3846 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3846 | p1_21@912@01]
; [eval] int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3847 | int___gt__(_, int___unbox__(_, i@920@01), 0) | live]
; [else-branch: 3847 | !(int___gt__(_, int___unbox__(_, i@920@01), 0)) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 3847 | int___gt__(_, int___unbox__(_, i@920@01), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1010@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1010@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1010@01 (__prim__int___box__ $Snap.unit 1)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1010@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1010@01 (__prim__int___box__ $Snap.unit 1))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (issubtype<Bool> (typeof<PyType> Container_value@1010@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1010@01 (__prim__int___box__ $Snap.unit 1)))))
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (=>
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
      (and
        (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
        (issubtype<Bool> (typeof<PyType> Container_value@1010@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1010@01 (__prim__int___box__ $Snap.unit 1))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(push) ; 41
(assert (not (=>
  (and
    p1_21@912@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1010@01 (__prim__int___box__ $Snap.unit 1)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_21@912@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1010@01 (__prim__int___box__ $Snap.unit 1))))
; [eval] p2_21 ==> int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3848 | p2_21@913@01 | live]
; [else-branch: 3848 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3848 | p2_21@913@01]
; [eval] int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i_7), 0)
; [eval] int___unbox__(i_7)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 43
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3849 | int___gt__(_, int___unbox__(_, i_7@921@01), 0) | live]
; [else-branch: 3849 | !(int___gt__(_, int___unbox__(_, i_7@921@01), 0)) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 3849 | int___gt__(_, int___unbox__(_, i_7@921@01), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@1011@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@1011@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1011@01 (__prim__int___box__ $Snap.unit 1)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@1011@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1011@01 (__prim__int___box__ $Snap.unit 1))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (issubtype<Bool> (typeof<PyType> Container_valuep@1011@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1011@01 (__prim__int___box__ $Snap.unit 1)))))
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (=>
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
      (and
        (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
        (issubtype<Bool> (typeof<PyType> Container_valuep@1011@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1011@01 (__prim__int___box__ $Snap.unit 1))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(push) ; 41
(assert (not (=>
  (and
    p2_21@913@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1011@01 (__prim__int___box__ $Snap.unit 1)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p2_21@913@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1011@01 (__prim__int___box__ $Snap.unit 1))))
; [eval] p1_21 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3850 | p1_21@912@01 | live]
; [else-branch: 3850 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3850 | p1_21@912@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 43
; [then-branch: 3851 | False | live]
; [else-branch: 3851 | True | live]
(push) ; 44
; [then-branch: 3851 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3851 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 45
; [then-branch: 3852 | False | live]
; [else-branch: 3852 | True | live]
(push) ; 46
; [then-branch: 3852 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3852 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 47
; [then-branch: 3853 | False | live]
; [else-branch: 3853 | True | live]
(push) ; 48
; [then-branch: 3853 | False]
(assert false)
(pop) ; 48
(push) ; 48
; [else-branch: 3853 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p2_21 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3854 | p2_21@913@01 | live]
; [else-branch: 3854 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3854 | p2_21@913@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 43
; [then-branch: 3855 | False | live]
; [else-branch: 3855 | True | live]
(push) ; 44
; [then-branch: 3855 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3855 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 45
; [then-branch: 3856 | False | live]
; [else-branch: 3856 | True | live]
(push) ; 46
; [then-branch: 3856 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3856 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 47
; [then-branch: 3857 | False | live]
; [else-branch: 3857 | True | live]
(push) ; 48
; [then-branch: 3857 | False]
(assert false)
(pop) ; 48
(push) ; 48
; [else-branch: 3857 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
(pop) ; 38
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 3858 | !(p2_21@913@01) | live]
; [else-branch: 3858 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 3858 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 39
(push) ; 39
; [else-branch: 3858 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3859 | !(p2_21@913@01) | dead]
; [else-branch: 3859 | p2_21@913@01 | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 3859 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 38
(pop) ; 37
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 3860 | !(p1_21@912@01) | live]
; [else-branch: 3860 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 3860 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3860 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3861 | !(p1_21@912@01) | dead]
; [else-branch: 3861 | p1_21@912@01 | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 3861 | p1_21@912@01]
(assert p1_21@912@01)
(pop) ; 37
(pop) ; 36
; [eval] !(p2_27 && !except2_4)
; [eval] p2_27 && !except2_4
(push) ; 36
; [then-branch: 3862 | !(p2_27@1009@01) | live]
; [else-branch: 3862 | p2_27@1009@01 | live]
(push) ; 37
; [then-branch: 3862 | !(p2_27@1009@01)]
(assert (not p2_27@1009@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3862 | p2_27@1009@01]
; [eval] !except2_4
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
; [then-branch: 3863 | !(p2_27@1009@01) | dead]
; [else-branch: 3863 | p2_27@1009@01 | live]
(push) ; 36
; [else-branch: 3863 | p2_27@1009@01]
(pop) ; 36
(pop) ; 35
; [eval] !(p1_27 && !except1_4)
; [eval] p1_27 && !except1_4
(push) ; 35
; [then-branch: 3864 | !(p1_27@1008@01) | live]
; [else-branch: 3864 | p1_27@1008@01 | live]
(push) ; 36
; [then-branch: 3864 | !(p1_27@1008@01)]
(assert (not p1_27@1008@01))
(pop) ; 36
(push) ; 36
; [else-branch: 3864 | p1_27@1008@01]
; [eval] !except1_4
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 3865 | !(p1_27@1008@01) | dead]
; [else-branch: 3865 | p1_27@1008@01 | live]
(push) ; 35
; [else-branch: 3865 | p1_27@1008@01]
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
; [eval] !p2_27
(push) ; 32
(set-option :timeout 10)
(assert (not p2_27@1009@01))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3866 | !(p2_27@1009@01) | dead]
; [else-branch: 3866 | p2_27@1009@01 | live]
(set-option :timeout 0)
(push) ; 32
; [else-branch: 3866 | p2_27@1009@01]
(assert p2_27@1009@01)
(pop) ; 32
(pop) ; 31
; [eval] !p1_27
(push) ; 31
(set-option :timeout 10)
(assert (not p1_27@1008@01))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3867 | !(p1_27@1008@01) | dead]
; [else-branch: 3867 | p1_27@1008@01 | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 3867 | p1_27@1008@01]
(assert p1_27@1008@01)
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 18
; [then-branch: 3868 | !(p2_23@998@01) | live]
; [else-branch: 3868 | p2_23@998@01 | live]
(push) ; 19
; [then-branch: 3868 | !(p2_23@998@01)]
(assert (not p2_23@998@01))
(pop) ; 19
(push) ; 19
; [else-branch: 3868 | p2_23@998@01]
; [eval] !except2_4
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 3869 | !(p2_23@998@01) | dead]
; [else-branch: 3869 | p2_23@998@01 | live]
(push) ; 18
; [else-branch: 3869 | p2_23@998@01]
(pop) ; 18
(pop) ; 17
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 17
; [then-branch: 3870 | !(p1_23@997@01) | live]
; [else-branch: 3870 | p1_23@997@01 | live]
(push) ; 18
; [then-branch: 3870 | !(p1_23@997@01)]
(assert (not p1_23@997@01))
(pop) ; 18
(push) ; 18
; [else-branch: 3870 | p1_23@997@01]
; [eval] !except1_4
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 3871 | !(p1_23@997@01) | dead]
; [else-branch: 3871 | p1_23@997@01 | live]
(push) ; 17
; [else-branch: 3871 | p1_23@997@01]
(pop) ; 17
(pop) ; 16
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 16
; [then-branch: 3872 | !(p2_23@998@01) | live]
; [else-branch: 3872 | p2_23@998@01 | live]
(push) ; 17
; [then-branch: 3872 | !(p2_23@998@01)]
(assert (not p2_23@998@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3872 | p2_23@998@01]
; [eval] !except2_4
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 3873 | !(p2_23@998@01) | dead]
; [else-branch: 3873 | p2_23@998@01 | live]
(push) ; 16
; [else-branch: 3873 | p2_23@998@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 15
; [then-branch: 3874 | !(p1_23@997@01) | live]
; [else-branch: 3874 | p1_23@997@01 | live]
(push) ; 16
; [then-branch: 3874 | !(p1_23@997@01)]
(assert (not p1_23@997@01))
(pop) ; 16
(push) ; 16
; [else-branch: 3874 | p1_23@997@01]
; [eval] !except1_4
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 3875 | !(p1_23@997@01) | dead]
; [else-branch: 3875 | p1_23@997@01 | live]
(push) ; 15
; [else-branch: 3875 | p1_23@997@01]
(pop) ; 15
(pop) ; 14
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 14
; [then-branch: 3876 | !(p2_23@998@01) | live]
; [else-branch: 3876 | p2_23@998@01 | live]
(push) ; 15
; [then-branch: 3876 | !(p2_23@998@01)]
(assert (not p2_23@998@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3876 | p2_23@998@01]
(assert p2_23@998@01)
; [eval] !except2_4
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not p2_23@998@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3877 | !(p2_23@998@01) | dead]
; [else-branch: 3877 | p2_23@998@01 | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3877 | p2_23@998@01]
(assert p2_23@998@01)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 3741 | !(p1_23@997@01)]
(assert (not p1_23@997@01))
(pop) ; 13
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 13
; [then-branch: 3878 | !(p1_23@997@01) | live]
; [else-branch: 3878 | p1_23@997@01 | live]
(push) ; 14
; [then-branch: 3878 | !(p1_23@997@01)]
(assert (not p1_23@997@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3878 | p1_23@997@01]
(assert p1_23@997@01)
; [eval] !except1_4
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not p1_23@997@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_23@997@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3879 | !(p1_23@997@01) | live]
; [else-branch: 3879 | p1_23@997@01 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3879 | !(p1_23@997@01)]
(assert (not p1_23@997@01))
; [eval] p2_23 && !except2_4
(push) ; 14
; [then-branch: 3880 | !(p2_23@998@01) | live]
; [else-branch: 3880 | p2_23@998@01 | live]
(push) ; 15
; [then-branch: 3880 | !(p2_23@998@01)]
(assert (not p2_23@998@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3880 | p2_23@998@01]
(assert p2_23@998@01)
; [eval] !except2_4
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p2_23@998@01 (not p2_23@998@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_23@998@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3881 | p2_23@998@01 | dead]
; [else-branch: 3881 | !(p2_23@998@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3881 | !(p2_23@998@01)]
(assert (not p2_23@998@01))
(pop) ; 14
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 14
; [then-branch: 3882 | !(p2_23@998@01) | live]
; [else-branch: 3882 | p2_23@998@01 | live]
(push) ; 15
; [then-branch: 3882 | !(p2_23@998@01)]
(assert (not p2_23@998@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3882 | p2_23@998@01]
(assert p2_23@998@01)
; [eval] !except2_4
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not p2_23@998@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_23@998@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3883 | !(p2_23@998@01) | live]
; [else-branch: 3883 | p2_23@998@01 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3883 | !(p2_23@998@01)]
(assert (not p2_23@998@01))
; [eval] p1_23 && !except1_4
(push) ; 15
; [then-branch: 3884 | !(p1_23@997@01) | live]
; [else-branch: 3884 | p1_23@997@01 | live]
(push) ; 16
; [then-branch: 3884 | !(p1_23@997@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 3884 | p1_23@997@01]
(assert p1_23@997@01)
; [eval] !except1_4
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 3885 | p1_23@997@01 | dead]
; [else-branch: 3885 | !(p1_23@997@01) | live]
(push) ; 15
; [else-branch: 3885 | !(p1_23@997@01)]
(pop) ; 15
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 15
; [then-branch: 3886 | !(p1_23@997@01) | live]
; [else-branch: 3886 | p1_23@997@01 | live]
(push) ; 16
; [then-branch: 3886 | !(p1_23@997@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 3886 | p1_23@997@01]
(assert p1_23@997@01)
; [eval] !except1_4
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not p1_23@997@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3887 | !(p1_23@997@01) | live]
; [else-branch: 3887 | p1_23@997@01 | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3887 | !(p1_23@997@01)]
; [eval] p2_23 && !except2_4
(push) ; 16
; [then-branch: 3888 | !(p2_23@998@01) | live]
; [else-branch: 3888 | p2_23@998@01 | live]
(push) ; 17
; [then-branch: 3888 | !(p2_23@998@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 3888 | p2_23@998@01]
(assert p2_23@998@01)
; [eval] !except2_4
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 3889 | p2_23@998@01 | dead]
; [else-branch: 3889 | !(p2_23@998@01) | live]
(push) ; 16
; [else-branch: 3889 | !(p2_23@998@01)]
(pop) ; 16
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 16
; [then-branch: 3890 | !(p2_23@998@01) | live]
; [else-branch: 3890 | p2_23@998@01 | live]
(push) ; 17
; [then-branch: 3890 | !(p2_23@998@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 3890 | p2_23@998@01]
(assert p2_23@998@01)
; [eval] !except2_4
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2_23@998@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3891 | !(p2_23@998@01) | live]
; [else-branch: 3891 | p2_23@998@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3891 | !(p2_23@998@01)]
; [eval] p1_23 && !except1_4
(push) ; 17
; [then-branch: 3892 | !(p1_23@997@01) | live]
; [else-branch: 3892 | p1_23@997@01 | live]
(push) ; 18
; [then-branch: 3892 | !(p1_23@997@01)]
(pop) ; 18
(push) ; 18
; [else-branch: 3892 | p1_23@997@01]
(assert p1_23@997@01)
; [eval] !except1_4
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 3893 | p1_23@997@01 | dead]
; [else-branch: 3893 | !(p1_23@997@01) | live]
(push) ; 17
; [else-branch: 3893 | !(p1_23@997@01)]
(pop) ; 17
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 17
; [then-branch: 3894 | !(p1_23@997@01) | live]
; [else-branch: 3894 | p1_23@997@01 | live]
(push) ; 18
; [then-branch: 3894 | !(p1_23@997@01)]
(pop) ; 18
(push) ; 18
; [else-branch: 3894 | p1_23@997@01]
(assert p1_23@997@01)
; [eval] !except1_4
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p1_23@997@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3895 | !(p1_23@997@01) | live]
; [else-branch: 3895 | p1_23@997@01 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3895 | !(p1_23@997@01)]
; [eval] p2_23 && !except2_4
(push) ; 18
; [then-branch: 3896 | !(p2_23@998@01) | live]
; [else-branch: 3896 | p2_23@998@01 | live]
(push) ; 19
; [then-branch: 3896 | !(p2_23@998@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 3896 | p2_23@998@01]
(assert p2_23@998@01)
; [eval] !except2_4
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 3897 | p2_23@998@01 | dead]
; [else-branch: 3897 | !(p2_23@998@01) | live]
(push) ; 18
; [else-branch: 3897 | !(p2_23@998@01)]
(pop) ; 18
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 18
; [then-branch: 3898 | !(p2_23@998@01) | live]
; [else-branch: 3898 | p2_23@998@01 | live]
(push) ; 19
; [then-branch: 3898 | !(p2_23@998@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 3898 | p2_23@998@01]
(assert p2_23@998@01)
; [eval] !except2_4
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p2_23@998@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3899 | !(p2_23@998@01) | live]
; [else-branch: 3899 | p2_23@998@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3899 | !(p2_23@998@01)]
; [exec]
; p1_24 := p3_9 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_9 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 19
; [then-branch: 3900 | !(p3_9@999@01) | live]
; [else-branch: 3900 | p3_9@999@01 | live]
(push) ; 20
; [then-branch: 3900 | !(p3_9@999@01)]
(assert (not p3_9@999@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3900 | p3_9@999@01]
(assert p3_9@999@01)
; [eval] !except1_4
(push) ; 21
; [then-branch: 3901 | False | live]
; [else-branch: 3901 | True | live]
(push) ; 22
; [then-branch: 3901 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 3901 | True]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p3_9@999@01 (not p3_9@999@01)))
; [exec]
; p2_24 := p4_9 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_9 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 19
; [then-branch: 3902 | !(p4_9@1000@01) | live]
; [else-branch: 3902 | p4_9@1000@01 | live]
(push) ; 20
; [then-branch: 3902 | !(p4_9@1000@01)]
(assert (not p4_9@1000@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3902 | p4_9@1000@01]
(assert p4_9@1000@01)
; [eval] !except2_4
(push) ; 21
; [then-branch: 3903 | False | live]
; [else-branch: 3903 | True | live]
(push) ; 22
; [then-branch: 3903 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 3903 | True]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p4_9@1000@01 (not p4_9@1000@01)))
; [exec]
; p3_10 := p3_9 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_9 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 19
; [then-branch: 3904 | !(p3_9@999@01) | live]
; [else-branch: 3904 | p3_9@999@01 | live]
(push) ; 20
; [then-branch: 3904 | !(p3_9@999@01)]
(assert (not p3_9@999@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3904 | p3_9@999@01]
(assert p3_9@999@01)
; [eval] !except1_4
(push) ; 21
; [then-branch: 3905 | False | live]
; [else-branch: 3905 | True | live]
(push) ; 22
; [then-branch: 3905 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 3905 | True]
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [exec]
; p4_10 := p4_9 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_9 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 19
; [then-branch: 3906 | !(p4_9@1000@01) | live]
; [else-branch: 3906 | p4_9@1000@01 | live]
(push) ; 20
; [then-branch: 3906 | !(p4_9@1000@01)]
(assert (not p4_9@1000@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3906 | p4_9@1000@01]
(assert p4_9@1000@01)
; [eval] !except2_4
(push) ; 21
; [then-branch: 3907 | False | live]
; [else-branch: 3907 | True | live]
(push) ; 22
; [then-branch: 3907 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 3907 | True]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [eval] p1_24 && !except1_4
; [then-branch: 3908 | False | dead]
; [else-branch: 3908 | True | live]
(push) ; 19
; [else-branch: 3908 | True]
(pop) ; 19
; [eval] !(p1_24 && !except1_4)
; [eval] p1_24 && !except1_4
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3909 | True | live]
; [else-branch: 3909 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3909 | True]
; [eval] p2_24 && !except2_4
; [then-branch: 3910 | False | dead]
; [else-branch: 3910 | True | live]
(push) ; 20
; [else-branch: 3910 | True]
(pop) ; 20
; [eval] !(p2_24 && !except2_4)
; [eval] p2_24 && !except2_4
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3911 | True | live]
; [else-branch: 3911 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3911 | True]
; [eval] p3_9 && !except1_4
(push) ; 21
; [then-branch: 3912 | !(p3_9@999@01) | live]
; [else-branch: 3912 | p3_9@999@01 | live]
(push) ; 22
; [then-branch: 3912 | !(p3_9@999@01)]
(assert (not p3_9@999@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3912 | p3_9@999@01]
(assert p3_9@999@01)
; [eval] !except1_4
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p3_9@999@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not p3_9@999@01))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3913 | p3_9@999@01 | live]
; [else-branch: 3913 | !(p3_9@999@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3913 | p3_9@999@01]
(assert p3_9@999@01)
; [exec]
; c_5.Container_value := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_value@1012@01 $Ref)
(assert (= Container_value@1012@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p4_9 && !except2_4
(push) ; 22
; [then-branch: 3914 | !(p4_9@1000@01) | live]
; [else-branch: 3914 | p4_9@1000@01 | live]
(push) ; 23
; [then-branch: 3914 | !(p4_9@1000@01)]
(assert (not p4_9@1000@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3914 | p4_9@1000@01]
(assert p4_9@1000@01)
; [eval] !except2_4
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p4_9@1000@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not p4_9@1000@01))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3915 | p4_9@1000@01 | live]
; [else-branch: 3915 | !(p4_9@1000@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3915 | p4_9@1000@01]
(assert p4_9@1000@01)
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 23
(pop) ; 23
; Joined path conditions
(declare-const Container_valuep@1013@01 $Ref)
(assert (= Container_valuep@1013@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; thisexcept1_4 := except1_4 && !bypass1_4
; [eval] except1_4 && !bypass1_4
; [exec]
; thisexcept2_4 := except2_4 && !bypass2_4
; [eval] except2_4 && !bypass2_4
; [exec]
; p1_25 := p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
(push) ; 23
; [then-branch: 3916 | !(p1_21@912@01) | live]
; [else-branch: 3916 | p1_21@912@01 | live]
(push) ; 24
; [then-branch: 3916 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3916 | p1_21@912@01]
(assert p1_21@912@01)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [exec]
; p2_25 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
(push) ; 23
; [then-branch: 3917 | !(p2_21@913@01) | live]
; [else-branch: 3917 | p2_21@913@01 | live]
(push) ; 24
; [then-branch: 3917 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3917 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 3918 | False | dead]
; [else-branch: 3918 | True | live]
(push) ; 23
; [else-branch: 3918 | True]
(pop) ; 23
; [eval] !p1_25
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3919 | True | live]
; [else-branch: 3919 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3919 | True]
; [then-branch: 3920 | False | dead]
; [else-branch: 3920 | True | live]
(push) ; 24
; [else-branch: 3920 | True]
(pop) ; 24
; [eval] !p2_25
(push) ; 24
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3921 | True | live]
; [else-branch: 3921 | False | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3921 | True]
; [exec]
; p1_26 := p1_25 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_25 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_26 := p2_25 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_25 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_11 := p1_25 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_25 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_11 := p2_25 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_25 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_26 && !except1_4
; [then-branch: 3922 | False | dead]
; [else-branch: 3922 | True | live]
(push) ; 25
; [else-branch: 3922 | True]
(pop) ; 25
; [eval] !(p1_26 && !except1_4)
; [eval] p1_26 && !except1_4
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3923 | True | live]
; [else-branch: 3923 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3923 | True]
; [eval] p2_26 && !except2_4
; [then-branch: 3924 | False | dead]
; [else-branch: 3924 | True | live]
(push) ; 26
; [else-branch: 3924 | True]
(pop) ; 26
; [eval] !(p2_26 && !except2_4)
; [eval] p2_26 && !except2_4
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3925 | True | live]
; [else-branch: 3925 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3925 | True]
; [eval] p1_25 && !except1_4
; [then-branch: 3926 | False | dead]
; [else-branch: 3926 | True | live]
(push) ; 27
; [else-branch: 3926 | True]
(pop) ; 27
; [eval] !(p1_25 && !except1_4)
; [eval] p1_25 && !except1_4
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3927 | True | live]
; [else-branch: 3927 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3927 | True]
; [eval] p2_25 && !except2_4
; [then-branch: 3928 | False | dead]
; [else-branch: 3928 | True | live]
(push) ; 28
; [else-branch: 3928 | True]
(pop) ; 28
; [eval] !(p2_25 && !except2_4)
; [eval] p2_25 && !except2_4
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3929 | True | live]
; [else-branch: 3929 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3929 | True]
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 3930 | !(p1_21@912@01) | live]
; [else-branch: 3930 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 3930 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3930 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3931 | p1_21@912@01 | live]
; [else-branch: 3931 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3931 | p1_21@912@01]
(assert p1_21@912@01)
; [exec]
; _err := null
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 3932 | !(p2_21@913@01) | live]
; [else-branch: 3932 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 3932 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3932 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3933 | p2_21@913@01 | live]
; [else-branch: 3933 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3933 | p2_21@913@01]
(assert p2_21@913@01)
; [exec]
; _err_5 := null
; [exec]
; p1_27 := p1_21 &&
;   (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
(push) ; 31
; [then-branch: 3934 | !(p1_21@912@01) | live]
; [else-branch: 3934 | p1_21@912@01 | live]
(push) ; 32
; [then-branch: 3934 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3934 | p1_21@912@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [exec]
; p2_27 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
(push) ; 31
; [then-branch: 3935 | !(p2_21@913@01) | live]
; [else-branch: 3935 | p2_21@913@01 | live]
(push) ; 32
; [then-branch: 3935 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3935 | p2_21@913@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 3936 | False | dead]
; [else-branch: 3936 | True | live]
(push) ; 31
; [else-branch: 3936 | True]
(pop) ; 31
; [eval] !p1_27
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3937 | True | live]
; [else-branch: 3937 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3937 | True]
; [then-branch: 3938 | False | dead]
; [else-branch: 3938 | True | live]
(push) ; 32
; [else-branch: 3938 | True]
(pop) ; 32
; [eval] !p2_27
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3939 | True | live]
; [else-branch: 3939 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3939 | True]
; [exec]
; p1_28 := p1_27 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_27 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_28 := p2_27 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_27 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_12 := p1_27 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_27 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_12 := p2_27 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_27 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_28 && !except1_4
; [then-branch: 3940 | False | dead]
; [else-branch: 3940 | True | live]
(push) ; 33
; [else-branch: 3940 | True]
(pop) ; 33
; [eval] !(p1_28 && !except1_4)
; [eval] p1_28 && !except1_4
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3941 | True | live]
; [else-branch: 3941 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 3941 | True]
; [eval] p2_28 && !except2_4
; [then-branch: 3942 | False | dead]
; [else-branch: 3942 | True | live]
(push) ; 34
; [else-branch: 3942 | True]
(pop) ; 34
; [eval] !(p2_28 && !except2_4)
; [eval] p2_28 && !except2_4
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3943 | True | live]
; [else-branch: 3943 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3943 | True]
; [eval] p1_27 && !except1_4
; [then-branch: 3944 | False | dead]
; [else-branch: 3944 | True | live]
(push) ; 35
; [else-branch: 3944 | True]
(pop) ; 35
; [eval] !(p1_27 && !except1_4)
; [eval] p1_27 && !except1_4
(push) ; 35
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3945 | True | live]
; [else-branch: 3945 | False | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3945 | True]
; [eval] p2_27 && !except2_4
; [then-branch: 3946 | False | dead]
; [else-branch: 3946 | True | live]
(push) ; 36
; [else-branch: 3946 | True]
(pop) ; 36
; [eval] !(p2_27 && !except2_4)
; [eval] p2_27 && !except2_4
(push) ; 36
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3947 | True | live]
; [else-branch: 3947 | False | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 3947 | True]
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 3948 | !(p1_21@912@01) | live]
; [else-branch: 3948 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 3948 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3948 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3949 | p1_21@912@01 | live]
; [else-branch: 3949 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3949 | p1_21@912@01]
; [exec]
; _err := null
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 3950 | !(p2_21@913@01) | live]
; [else-branch: 3950 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 3950 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 39
(push) ; 39
; [else-branch: 3950 | p2_21@913@01]
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3951 | p2_21@913@01 | live]
; [else-branch: 3951 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3951 | p2_21@913@01]
; [exec]
; _err_5 := null
; [exec]
; assert (p1_21 ==> !except1_4) && (p2_21 ==> !except2_4)
; [eval] p1_21 ==> !except1_4
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3952 | p1_21@912@01 | live]
; [else-branch: 3952 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3952 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> !except2_4
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3953 | p2_21@913@01 | live]
; [else-branch: 3953 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3953 | p2_21@913@01]
; [eval] !except2_4
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3954 | p1_21@912@01 | live]
; [else-branch: 3954 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3954 | p1_21@912@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3955 | p2_21@913@01 | live]
; [else-branch: 3955 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3955 | p2_21@913@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3956 | p1_21@912@01 | live]
; [else-branch: 3956 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3956 | p1_21@912@01]
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3957 | p2_21@913@01 | live]
; [else-branch: 3957 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3957 | p2_21@913@01]
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3958 | p1_21@912@01 | live]
; [else-branch: 3958 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3958 | p1_21@912@01]
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(push) ; 41
(assert (not (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@1012@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@1012@01) (as int<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3959 | p2_21@913@01 | live]
; [else-branch: 3959 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3959 | p2_21@913@01]
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(push) ; 41
(assert (not (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1013@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1013@01) (as int<PyType>  PyType))))
; [eval] p1_21 && p2_21 ==> c_1.Container_value == c_1_0.Container_valuep
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 3960 | !(p1_21@912@01) | live]
; [else-branch: 3960 | p1_21@912@01 | live]
(push) ; 42
; [then-branch: 3960 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 42
(push) ; 42
; [else-branch: 3960 | p1_21@912@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_21@912@01 p2_21@913@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3961 | p1_21@912@01 && p2_21@913@01 | live]
; [else-branch: 3961 | !(p1_21@912@01 && p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3961 | p1_21@912@01 && p2_21@913@01]
(assert (and p1_21@912@01 p2_21@913@01))
; [eval] c_1.Container_value == c_1_0.Container_valuep
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (and p1_21@912@01 p2_21@913@01))
(push) ; 41
(assert (not (=>
  (and p1_21@912@01 p2_21@913@01)
  (= Container_value@1012@01 Container_valuep@1013@01))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_21@912@01 p2_21@913@01)
  (= Container_value@1012@01 Container_valuep@1013@01)))
; [eval] p1_21 ==> int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3962 | p1_21@912@01 | live]
; [else-branch: 3962 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3962 | p1_21@912@01]
; [eval] int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] int___eq__(i, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 43
(pop) ; 43
; Joined path conditions
(push) ; 43
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3963 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 3963 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 3963 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1012@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1012@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1012@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1012@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1012@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (issubtype<Bool> (typeof<PyType> Container_value@1012@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1012@01 (__prim__int___box__ $Snap.unit 0)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
        (issubtype<Bool> (typeof<PyType> Container_value@1012@01) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1012@01 (__prim__int___box__ $Snap.unit 0))))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 41
(assert (not (=>
  (and
    p1_21@912@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1012@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_21@912@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1012@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_21 ==> int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3964 | p2_21@913@01 | live]
; [else-branch: 3964 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3964 | p2_21@913@01]
; [eval] int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
; [eval] int___eq__(i_7, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 43
(pop) ; 43
; Joined path conditions
(push) ; 43
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3965 | int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 3965 | !(int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0))) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 3965 | int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@1013@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@1013@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1013@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@1013@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1013@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
    (issubtype<Bool> (typeof<PyType> Container_valuep@1013@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1013@01 (__prim__int___box__ $Snap.unit 0)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
        (issubtype<Bool> (typeof<PyType> Container_valuep@1013@01) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1013@01 (__prim__int___box__ $Snap.unit 0))))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 41
(assert (not (=>
  (and
    p2_21@913@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1013@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p2_21@913@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1013@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p1_21 ==> int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3966 | p1_21@912@01 | live]
; [else-branch: 3966 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3966 | p1_21@912@01]
; [eval] int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3967 | int___lt__(_, int___unbox__(_, i@920@01), 0) | dead]
; [else-branch: 3967 | !(int___lt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3967 | !(int___lt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [eval] p2_21 ==> int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3968 | p2_21@913@01 | live]
; [else-branch: 3968 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3968 | p2_21@913@01]
; [eval] int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i_7), 0)
; [eval] int___unbox__(i_7)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 43
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3969 | int___lt__(_, int___unbox__(_, i_7@921@01), 0) | dead]
; [else-branch: 3969 | !(int___lt__(_, int___unbox__(_, i_7@921@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3969 | !(int___lt__(_, int___unbox__(_, i_7@921@01), 0))]
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))))
; [eval] p1_21 ==> int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3970 | p1_21@912@01 | live]
; [else-branch: 3970 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3970 | p1_21@912@01]
; [eval] int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3971 | int___gt__(_, int___unbox__(_, i@920@01), 0) | dead]
; [else-branch: 3971 | !(int___gt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3971 | !(int___gt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [eval] p2_21 ==> int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3972 | p2_21@913@01 | live]
; [else-branch: 3972 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3972 | p2_21@913@01]
; [eval] int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i_7), 0)
; [eval] int___unbox__(i_7)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 43
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3973 | int___gt__(_, int___unbox__(_, i_7@921@01), 0) | dead]
; [else-branch: 3973 | !(int___gt__(_, int___unbox__(_, i_7@921@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 3973 | !(int___gt__(_, int___unbox__(_, i_7@921@01), 0))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))))
; [eval] p1_21 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3974 | p1_21@912@01 | live]
; [else-branch: 3974 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3974 | p1_21@912@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 43
; [then-branch: 3975 | False | live]
; [else-branch: 3975 | True | live]
(push) ; 44
; [then-branch: 3975 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3975 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 45
; [then-branch: 3976 | False | live]
; [else-branch: 3976 | True | live]
(push) ; 46
; [then-branch: 3976 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3976 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 47
; [then-branch: 3977 | False | live]
; [else-branch: 3977 | True | live]
(push) ; 48
; [then-branch: 3977 | False]
(assert false)
(pop) ; 48
(push) ; 48
; [else-branch: 3977 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p2_21 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3978 | p2_21@913@01 | live]
; [else-branch: 3978 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 3978 | p2_21@913@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 43
; [then-branch: 3979 | False | live]
; [else-branch: 3979 | True | live]
(push) ; 44
; [then-branch: 3979 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3979 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 45
; [then-branch: 3980 | False | live]
; [else-branch: 3980 | True | live]
(push) ; 46
; [then-branch: 3980 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3980 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 47
; [then-branch: 3981 | False | live]
; [else-branch: 3981 | True | live]
(push) ; 48
; [then-branch: 3981 | False]
(assert false)
(pop) ; 48
(push) ; 48
; [else-branch: 3981 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
(pop) ; 38
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 3982 | !(p2_21@913@01) | live]
; [else-branch: 3982 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 3982 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 39
(push) ; 39
; [else-branch: 3982 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3983 | !(p2_21@913@01) | dead]
; [else-branch: 3983 | p2_21@913@01 | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 3983 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 38
(pop) ; 37
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 3984 | !(p1_21@912@01) | live]
; [else-branch: 3984 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 3984 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3984 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3985 | !(p1_21@912@01) | dead]
; [else-branch: 3985 | p1_21@912@01 | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 3985 | p1_21@912@01]
(assert p1_21@912@01)
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 3986 | !(p2_21@913@01) | live]
; [else-branch: 3986 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 3986 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3986 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3987 | !(p2_21@913@01) | dead]
; [else-branch: 3987 | p2_21@913@01 | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 3987 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 30
(pop) ; 29
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 3988 | !(p1_21@912@01) | live]
; [else-branch: 3988 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 3988 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3988 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3989 | !(p1_21@912@01) | dead]
; [else-branch: 3989 | p1_21@912@01 | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 3989 | p1_21@912@01]
(assert p1_21@912@01)
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p4_9 && !except2_4)
; [eval] p4_9 && !except2_4
(push) ; 22
; [then-branch: 3990 | !(p4_9@1000@01) | live]
; [else-branch: 3990 | p4_9@1000@01 | live]
(push) ; 23
; [then-branch: 3990 | !(p4_9@1000@01)]
(assert (not p4_9@1000@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3990 | p4_9@1000@01]
(assert p4_9@1000@01)
; [eval] !except2_4
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p4_9@1000@01))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3991 | !(p4_9@1000@01) | dead]
; [else-branch: 3991 | p4_9@1000@01 | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 3991 | p4_9@1000@01]
(assert p4_9@1000@01)
(pop) ; 22
(pop) ; 21
; [eval] !(p3_9 && !except1_4)
; [eval] p3_9 && !except1_4
(push) ; 21
; [then-branch: 3992 | !(p3_9@999@01) | live]
; [else-branch: 3992 | p3_9@999@01 | live]
(push) ; 22
; [then-branch: 3992 | !(p3_9@999@01)]
(assert (not p3_9@999@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3992 | p3_9@999@01]
(assert p3_9@999@01)
; [eval] !except1_4
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not p3_9@999@01))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3993 | !(p3_9@999@01) | dead]
; [else-branch: 3993 | p3_9@999@01 | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 3993 | p3_9@999@01]
(assert p3_9@999@01)
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 3879 | p1_23@997@01]
(assert p1_23@997@01)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 3711 | p1_22@981@01]
(assert p1_22@981@01)
(pop) ; 7
(pop) ; 6
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 6
; [then-branch: 3994 | !(p2_21@913@01) | live]
; [else-branch: 3994 | p2_21@913@01 | live]
(push) ; 7
; [then-branch: 3994 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(pop) ; 7
(push) ; 7
; [else-branch: 3994 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3995 | !(p2_21@913@01) | dead]
; [else-branch: 3995 | p2_21@913@01 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 3995 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 6
(pop) ; 5
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 5
; [then-branch: 3996 | !(p1_21@912@01) | live]
; [else-branch: 3996 | p1_21@912@01 | live]
(push) ; 6
; [then-branch: 3996 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 6
(push) ; 6
; [else-branch: 3996 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] !except1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3997 | !(p1_21@912@01) | dead]
; [else-branch: 3997 | p1_21@912@01 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 3997 | p1_21@912@01]
(assert p1_21@912@01)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 3515 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_21@912@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3998 | p1_21@912@01 | live]
; [else-branch: 3998 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3998 | p1_21@912@01]
(assert p1_21@912@01)
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert p1_21@912@01)
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 4
; [then-branch: 3999 | p2_21@913@01 | dead]
; [else-branch: 3999 | !(p2_21@913@01) | live]
(push) ; 5
; [else-branch: 3999 | !(p2_21@913@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4000 | p1_21@912@01 | live]
; [else-branch: 4000 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4000 | p1_21@912@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> true
(push) ; 4
; [then-branch: 4001 | p2_21@913@01 | dead]
; [else-branch: 4001 | !(p2_21@913@01) | live]
(push) ; 5
; [else-branch: 4001 | !(p2_21@913@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@1014@01 $Snap)
(assert (= $t@1014@01 ($Snap.combine ($Snap.first $t@1014@01) ($Snap.second $t@1014@01))))
(assert (= ($Snap.first $t@1014@01) $Snap.unit))
; [eval] p1_21 ==> (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_162) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4002 | p1_21@912@01 | live]
; [else-branch: 4002 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 4002 | p1_21@912@01]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_162) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_162)
(push) ; 7
; [then-branch: 4003 | False | live]
; [else-branch: 4003 | True | live]
(push) ; 8
; [then-branch: 4003 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 4003 | True]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_162)
(push) ; 9
; [then-branch: 4004 | False | live]
; [else-branch: 4004 | True | live]
(push) ; 10
; [then-branch: 4004 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4004 | True]
; [eval] _residue_162 <= _current_wait_level_162
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_21@912@01 (<= _residue_162@918@01 _current_wait_level_162@924@01)))
(assert (=
  ($Snap.second $t@1014@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1014@01))
    ($Snap.second ($Snap.second $t@1014@01)))))
(assert (= ($Snap.first ($Snap.second $t@1014@01)) $Snap.unit))
; [eval] p2_21 ==> (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_162_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_162_0) && _residue_162_0 <= _current_wait_level_162_0)
(push) ; 5
; [then-branch: 4005 | p2_21@913@01 | dead]
; [else-branch: 4005 | !(p2_21@913@01) | live]
(push) ; 6
; [else-branch: 4005 | !(p2_21@913@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@1014@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4006 | p1_21@912@01 | live]
; [else-branch: 4006 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4006 | p1_21@912@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))
; [then-branch: 4007 | p2_21@913@01 | dead]
; [else-branch: 4007 | !(p2_21@913@01) | live]
(push) ; 6
; [else-branch: 4007 | !(p2_21@913@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4008 | p1_21@912@01 | live]
; [else-branch: 4008 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4008 | p1_21@912@01]
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 7
; [then-branch: 4009 | p2_21@913@01 | dead]
; [else-branch: 4009 | !(p2_21@913@01) | live]
(push) ; 8
; [else-branch: 4009 | !(p2_21@913@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))
  $Snap.unit))
; [eval] p1_21 && p2_21 ==> c_1.Container_value == c_1_0.Container_valuep
; [eval] p1_21 && p2_21
(push) ; 7
; [then-branch: 4010 | !(p1_21@912@01) | live]
; [else-branch: 4010 | p1_21@912@01 | live]
(push) ; 8
; [then-branch: 4010 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 8
(push) ; 8
; [else-branch: 4010 | p1_21@912@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4011 | p1_21@912@01 && p2_21@913@01 | dead]
; [else-branch: 4011 | !(p1_21@912@01 && p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 4011 | !(p1_21@912@01 && p2_21@913@01)]
(assert (not (and p1_21@912@01 p2_21@913@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_21@912@01 p2_21@913@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4012 | p1_21@912@01 | live]
; [else-branch: 4012 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4012 | p1_21@912@01]
; [eval] int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] int___eq__(i, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4013 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 4013 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4013 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(push) ; 10
; [else-branch: 4013 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit 0)))))
; Joined path conditions
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit 0))))
    (or
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))))
(assert (=>
  (and
    p1_21@912@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
(push) ; 7
; [then-branch: 4014 | p2_21@913@01 | dead]
; [else-branch: 4014 | !(p2_21@913@01) | live]
(push) ; 8
; [else-branch: 4014 | !(p2_21@913@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4015 | p1_21@912@01 | live]
; [else-branch: 4015 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4015 | p1_21@912@01]
; [eval] int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 9
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 9
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4016 | int___lt__(_, int___unbox__(_, i@920@01), 0) | live]
; [else-branch: 4016 | !(int___lt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4016 | int___lt__(_, int___unbox__(_, i@920@01), 0)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 4016 | !(int___lt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (__prim__int___box__%precondition $Snap.unit (- 0 1))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit (- 0 1))))))
; Joined path conditions
(assert (or
  (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
        (__prim__int___box__%precondition $Snap.unit (- 0 1))
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit (- 0 1)))))
    (or
      (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
(assert (=>
  (and
    p1_21@912@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
(push) ; 7
; [then-branch: 4017 | p2_21@913@01 | dead]
; [else-branch: 4017 | !(p2_21@913@01) | live]
(push) ; 8
; [else-branch: 4017 | !(p2_21@913@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4018 | p1_21@912@01 | live]
; [else-branch: 4018 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4018 | p1_21@912@01]
; [eval] int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4019 | int___gt__(_, int___unbox__(_, i@920@01), 0) | live]
; [else-branch: 4019 | !(int___gt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4019 | int___gt__(_, int___unbox__(_, i@920@01), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 10
(push) ; 10
; [else-branch: 4019 | !(int___gt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit 1)))))
; Joined path conditions
(assert (or
  (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (=>
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
      (and
        (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
        (__prim__int___box__%precondition $Snap.unit 1)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit 1))))
    (or
      (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
(assert (=>
  (and
    p1_21@912@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1014@01)))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
(push) ; 7
; [then-branch: 4020 | p2_21@913@01 | dead]
; [else-branch: 4020 | !(p2_21@913@01) | live]
(push) ; 8
; [else-branch: 4020 | !(p2_21@913@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4021 | p1_21@912@01 | live]
; [else-branch: 4021 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4021 | p1_21@912@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1014@01))))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> true
(push) ; 7
; [then-branch: 4022 | p2_21@913@01 | dead]
; [else-branch: 4022 | !(p2_21@913@01) | live]
(push) ; 8
; [else-branch: 4022 | !(p2_21@913@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_4: Bool
(declare-const except1_4@1015@01 Bool)
; [exec]
; var except2_4: Bool
(declare-const except2_4@1016@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@1017@01 $Ref)
; [exec]
; var _err_5: Ref
(declare-const _err_5@1018@01 $Ref)
; [exec]
; var error_4: Ref
(declare-const error_4@1019@01 $Ref)
; [exec]
; var error_4_0: Ref
(declare-const error_4_0@1020@01 $Ref)
; [exec]
; var try_finally_12: Int
(declare-const try_finally_12@1021@01 Int)
; [exec]
; var try_finally_12_0: Int
(declare-const try_finally_12_0@1022@01 Int)
; [exec]
; var i_5: Ref
(declare-const i_5@1023@01 $Ref)
; [exec]
; var i_5_0: Ref
(declare-const i_5_0@1024@01 $Ref)
; [exec]
; var c_5: Ref
(declare-const c_5@1025@01 $Ref)
; [exec]
; var c_5_0: Ref
(declare-const c_5_0@1026@01 $Ref)
; [exec]
; var MyException_res_6: Ref
(declare-const MyException_res_6@1027@01 $Ref)
; [exec]
; var MyException_res_6_0: Ref
(declare-const MyException_res_6_0@1028@01 $Ref)
; [exec]
; var MyException2_res: Ref
(declare-const MyException2_res@1029@01 $Ref)
; [exec]
; var MyException2_res_1: Ref
(declare-const MyException2_res_1@1030@01 $Ref)
; [exec]
; var _cwl_162: Perm
(declare-const _cwl_162@1031@01 $Perm)
; [exec]
; var _cwl_162_0: Perm
(declare-const _cwl_162_0@1032@01 $Perm)
; [exec]
; var _method_measures_162: Seq[Measure$]
(declare-const _method_measures_162@1033@01 Seq<Measure$>)
; [exec]
; var _method_measures_162_0: Seq[Measure$]
(declare-const _method_measures_162_0@1034@01 Seq<Measure$>)
; [exec]
; var bypass1_4: Bool
(declare-const bypass1_4@1035@01 Bool)
; [exec]
; var bypass2_4: Bool
(declare-const bypass2_4@1036@01 Bool)
; [exec]
; var thisexcept1_4: Bool
(declare-const thisexcept1_4@1037@01 Bool)
; [exec]
; var thisexcept2_4: Bool
(declare-const thisexcept2_4@1038@01 Bool)
; [exec]
; var p1_25: Bool
(declare-const p1_25@1039@01 Bool)
; [exec]
; var p2_25: Bool
(declare-const p2_25@1040@01 Bool)
; [exec]
; var p1_27: Bool
(declare-const p1_27@1041@01 Bool)
; [exec]
; var p2_27: Bool
(declare-const p2_27@1042@01 Bool)
; [exec]
; var p1_22: Bool
(declare-const p1_22@1043@01 Bool)
; [exec]
; var p2_22: Bool
(declare-const p2_22@1044@01 Bool)
; [exec]
; var p3_8: Bool
(declare-const p3_8@1045@01 Bool)
; [exec]
; var p4_8: Bool
(declare-const p4_8@1046@01 Bool)
; [exec]
; var tmp_6: Ref
(declare-const tmp_6@1047@01 $Ref)
; [exec]
; var p1_23: Bool
(declare-const p1_23@1048@01 Bool)
; [exec]
; var p2_23: Bool
(declare-const p2_23@1049@01 Bool)
; [exec]
; var p3_9: Bool
(declare-const p3_9@1050@01 Bool)
; [exec]
; var p4_9: Bool
(declare-const p4_9@1051@01 Bool)
; [exec]
; var tmp_7: Ref
(declare-const tmp_7@1052@01 $Ref)
; [exec]
; var p1_24: Bool
(declare-const p1_24@1053@01 Bool)
; [exec]
; var p2_24: Bool
(declare-const p2_24@1054@01 Bool)
; [exec]
; var p3_10: Bool
(declare-const p3_10@1055@01 Bool)
; [exec]
; var p4_10: Bool
(declare-const p4_10@1056@01 Bool)
; [exec]
; var p1_26: Bool
(declare-const p1_26@1057@01 Bool)
; [exec]
; var p2_26: Bool
(declare-const p2_26@1058@01 Bool)
; [exec]
; var p3_11: Bool
(declare-const p3_11@1059@01 Bool)
; [exec]
; var p4_11: Bool
(declare-const p4_11@1060@01 Bool)
; [exec]
; var p1_28: Bool
(declare-const p1_28@1061@01 Bool)
; [exec]
; var p2_28: Bool
(declare-const p2_28@1062@01 Bool)
; [exec]
; var p3_12: Bool
(declare-const p3_12@1063@01 Bool)
; [exec]
; var p4_12: Bool
(declare-const p4_12@1064@01 Bool)
; [exec]
; inhale p1_21
(declare-const $t@1065@01 $Snap)
(assert (= $t@1065@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; except1_4 := false
; [exec]
; except2_4 := false
; [eval] p1_21 && !except1_4
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4023 | !(p1_21@912@01) | live]
; [else-branch: 4023 | p1_21@912@01 | live]
(push) ; 6
; [then-branch: 4023 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 6
(push) ; 6
; [else-branch: 4023 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4024 | p1_21@912@01 | live]
; [else-branch: 4024 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4024 | p1_21@912@01]
; [exec]
; _method_measures_162 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_5 := i
; [exec]
; c_5 := c_1
; [eval] p2_21 && !except2_4
(push) ; 6
; [then-branch: 4025 | !(p2_21@913@01) | live]
; [else-branch: 4025 | p2_21@913@01 | live]
(push) ; 7
; [then-branch: 4025 | !(p2_21@913@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 4025 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_21@913@01 (not p2_21@913@01)))
; [then-branch: 4026 | p2_21@913@01 | dead]
; [else-branch: 4026 | !(p2_21@913@01) | live]
(push) ; 6
; [else-branch: 4026 | !(p2_21@913@01)]
(pop) ; 6
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 6
; [then-branch: 4027 | !(p2_21@913@01) | live]
; [else-branch: 4027 | p2_21@913@01 | live]
(push) ; 7
; [then-branch: 4027 | !(p2_21@913@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 4027 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4028 | !(p2_21@913@01) | live]
; [else-branch: 4028 | p2_21@913@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 4028 | !(p2_21@913@01)]
; [exec]
; bypass1_4 := !(p1_21 && !except1_4)
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 7
; [then-branch: 4029 | !(p1_21@912@01) | live]
; [else-branch: 4029 | p1_21@912@01 | live]
(push) ; 8
; [then-branch: 4029 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 8
(push) ; 8
; [else-branch: 4029 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1_4@1066@01 Bool)
(assert (= bypass1_4@1066@01 (not p1_21@912@01)))
; [exec]
; bypass2_4 := !(p2_21 && !except2_4)
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 7
; [then-branch: 4030 | !(p2_21@913@01) | live]
; [else-branch: 4030 | p2_21@913@01 | live]
(push) ; 8
; [then-branch: 4030 | !(p2_21@913@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 4030 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2_4@1067@01 Bool)
(assert (= bypass2_4@1067@01 (not p2_21@913@01)))
; [exec]
; p1_22 := p1_21 && (!except1_4 && int___lt__(int___unbox__(i_5), 0))
; [eval] p1_21 && (!except1_4 && int___lt__(int___unbox__(i_5), 0))
(push) ; 7
; [then-branch: 4031 | !(p1_21@912@01) | live]
; [else-branch: 4031 | p1_21@912@01 | live]
(push) ; 8
; [then-branch: 4031 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 8
(push) ; 8
; [else-branch: 4031 | p1_21@912@01]
; [eval] !except1_4
(push) ; 9
; [then-branch: 4032 | False | live]
; [else-branch: 4032 | True | live]
(push) ; 10
; [then-branch: 4032 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4032 | True]
; [eval] int___lt__(int___unbox__(i_5), 0)
; [eval] int___unbox__(i_5)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(declare-const p1_22@1068@01 Bool)
(assert (=
  p1_22@1068@01
  (and
    p1_21@912@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
; [exec]
; p2_22 := p2_21 && (!except2_4 && int___lt__(int___unbox__(i_5_0), 0))
; [eval] p2_21 && (!except2_4 && int___lt__(int___unbox__(i_5_0), 0))
(push) ; 7
; [then-branch: 4033 | !(p2_21@913@01) | live]
; [else-branch: 4033 | p2_21@913@01 | live]
(push) ; 8
; [then-branch: 4033 | !(p2_21@913@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 4033 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(push) ; 9
; [then-branch: 4034 | False | live]
; [else-branch: 4034 | True | live]
(push) ; 10
; [then-branch: 4034 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4034 | True]
; [eval] int___lt__(int___unbox__(i_5_0), 0)
; [eval] int___unbox__(i_5_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_5_0@1024@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    p2_21@913@01
    (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_5_0@1024@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))))
(declare-const p2_22@1069@01 Bool)
(assert (=
  p2_22@1069@01
  (and
    p2_21@913@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))))
; [exec]
; p3_8 := p1_21 && (!except1_4 && !int___lt__(int___unbox__(i_5), 0))
; [eval] p1_21 && (!except1_4 && !int___lt__(int___unbox__(i_5), 0))
(push) ; 7
; [then-branch: 4035 | !(p1_21@912@01) | live]
; [else-branch: 4035 | p1_21@912@01 | live]
(push) ; 8
; [then-branch: 4035 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 8
(push) ; 8
; [else-branch: 4035 | p1_21@912@01]
; [eval] !except1_4
(push) ; 9
; [then-branch: 4036 | False | live]
; [else-branch: 4036 | True | live]
(push) ; 10
; [then-branch: 4036 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4036 | True]
; [eval] !int___lt__(int___unbox__(i_5), 0)
; [eval] int___lt__(int___unbox__(i_5), 0)
; [eval] int___unbox__(i_5)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p3_8@1070@01 Bool)
(assert (=
  p3_8@1070@01
  (and
    p1_21@912@01
    (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [exec]
; p4_8 := p2_21 && (!except2_4 && !int___lt__(int___unbox__(i_5_0), 0))
; [eval] p2_21 && (!except2_4 && !int___lt__(int___unbox__(i_5_0), 0))
(push) ; 7
; [then-branch: 4037 | !(p2_21@913@01) | live]
; [else-branch: 4037 | p2_21@913@01 | live]
(push) ; 8
; [then-branch: 4037 | !(p2_21@913@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 4037 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(push) ; 9
; [then-branch: 4038 | False | live]
; [else-branch: 4038 | True | live]
(push) ; 10
; [then-branch: 4038 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4038 | True]
; [eval] !int___lt__(int___unbox__(i_5_0), 0)
; [eval] int___lt__(int___unbox__(i_5_0), 0)
; [eval] int___unbox__(i_5_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_5_0@1024@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const p4_8@1071@01 Bool)
(assert (=
  p4_8@1071@01
  (and
    p2_21@913@01
    (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0)))))
; [exec]
; tmp_6 := new()
(declare-const tmp_6@1072@01 $Ref)
(assert (not (= tmp_6@1072@01 $Ref.null)))
(assert (not (= tmp_6@1072@01 _err_5@1018@01)))
(assert (not (= tmp_6@1072@01 c_5_0@1026@01)))
(assert (not (= tmp_6@1072@01 MyException_res_6_0@1028@01)))
(assert (not (= tmp_6@1072@01 i_5_0@1024@01)))
(assert (not
  (=
    tmp_6@1072@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
(assert (not (= tmp_6@1072@01 i_7@921@01)))
(assert (not (= tmp_6@1072@01 MyException_res_6@1027@01)))
(assert (not (= tmp_6@1072@01 _cthread_162_0@915@01)))
(assert (not (= tmp_6@1072@01 tmp_6@1047@01)))
(assert (not (= tmp_6@1072@01 error_4_0@1020@01)))
(assert (not (= tmp_6@1072@01 MyException2_res@1029@01)))
(assert (not (= tmp_6@1072@01 c_1_0@923@01)))
(assert (not (= tmp_6@1072@01 c_1@922@01)))
(assert (not (= tmp_6@1072@01 _cthread_162@914@01)))
(assert (not (= tmp_6@1072@01 tmp_7@1052@01)))
(assert (not (= tmp_6@1072@01 error_4@1019@01)))
(assert (not (= tmp_6@1072@01 i@920@01)))
(assert (not (= tmp_6@1072@01 MyException2_res_1@1030@01)))
; [eval] p1_22 && !except1_4
(push) ; 7
; [then-branch: 4039 | !(p1_22@1068@01) | live]
; [else-branch: 4039 | p1_22@1068@01 | live]
(push) ; 8
; [then-branch: 4039 | !(p1_22@1068@01)]
(assert (not p1_22@1068@01))
(pop) ; 8
(push) ; 8
; [else-branch: 4039 | p1_22@1068@01]
(assert p1_22@1068@01)
; [eval] !except1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_22@1068@01 (not p1_22@1068@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_22@1068@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_22@1068@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4040 | p1_22@1068@01 | live]
; [else-branch: 4040 | !(p1_22@1068@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 4040 | p1_22@1068@01]
(assert p1_22@1068@01)
; [exec]
; MyException_res_6 := tmp_6
; [eval] p2_22 && !except2_4
(push) ; 8
; [then-branch: 4041 | !(p2_22@1069@01) | live]
; [else-branch: 4041 | p2_22@1069@01 | live]
(push) ; 9
; [then-branch: 4041 | !(p2_22@1069@01)]
(assert (not p2_22@1069@01))
(pop) ; 9
(push) ; 9
; [else-branch: 4041 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_22@1069@01 (not p2_22@1069@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_22@1069@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4042 | p2_22@1069@01 | dead]
; [else-branch: 4042 | !(p2_22@1069@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 4042 | !(p2_22@1069@01)]
(assert (not p2_22@1069@01))
(pop) ; 8
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 8
; [then-branch: 4043 | !(p2_22@1069@01) | live]
; [else-branch: 4043 | p2_22@1069@01 | live]
(push) ; 9
; [then-branch: 4043 | !(p2_22@1069@01)]
(assert (not p2_22@1069@01))
(pop) ; 9
(push) ; 9
; [else-branch: 4043 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_22@1069@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_22@1069@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4044 | !(p2_22@1069@01) | live]
; [else-branch: 4044 | p2_22@1069@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4044 | !(p2_22@1069@01)]
(assert (not p2_22@1069@01))
; [eval] p1_22 && !except1_4
(push) ; 9
; [then-branch: 4045 | !(p1_22@1068@01) | live]
; [else-branch: 4045 | p1_22@1068@01 | live]
(push) ; 10
; [then-branch: 4045 | !(p1_22@1068@01)]
(assert (not p1_22@1068@01))
(pop) ; 10
(push) ; 10
; [else-branch: 4045 | p1_22@1068@01]
; [eval] !except1_4
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_22@1068@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4046 | p1_22@1068@01 | live]
; [else-branch: 4046 | !(p1_22@1068@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 4046 | p1_22@1068@01]
; [exec]
; inhale typeof(MyException_res_6) == MyException()
(declare-const $t@1073@01 $Snap)
(assert (= $t@1073@01 $Snap.unit))
; [eval] typeof(MyException_res_6) == MyException()
; [eval] typeof(MyException_res_6)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_6@1072@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_22 && !except2_4
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4047 | !(p2_22@1069@01) | live]
; [else-branch: 4047 | p2_22@1069@01 | live]
(push) ; 11
; [then-branch: 4047 | !(p2_22@1069@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 4047 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 4048 | p2_22@1069@01 | dead]
; [else-branch: 4048 | !(p2_22@1069@01) | live]
(push) ; 10
; [else-branch: 4048 | !(p2_22@1069@01)]
(pop) ; 10
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 10
; [then-branch: 4049 | !(p2_22@1069@01) | live]
; [else-branch: 4049 | p2_22@1069@01 | live]
(push) ; 11
; [then-branch: 4049 | !(p2_22@1069@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 4049 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_22@1069@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4050 | !(p2_22@1069@01) | live]
; [else-branch: 4050 | p2_22@1069@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4050 | !(p2_22@1069@01)]
; [eval] p1_22 && !except1_4
(push) ; 11
; [then-branch: 4051 | !(p1_22@1068@01) | live]
; [else-branch: 4051 | p1_22@1068@01 | live]
(push) ; 12
; [then-branch: 4051 | !(p1_22@1068@01)]
(assert (not p1_22@1068@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4051 | p1_22@1068@01]
; [eval] !except1_4
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_22@1068@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4052 | p1_22@1068@01 | live]
; [else-branch: 4052 | !(p1_22@1068@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 4052 | p1_22@1068@01]
; [exec]
; _err := MyException_res_6
; [exec]
; except1_4 := true
; [eval] p2_22 && !except2_4
(push) ; 12
; [then-branch: 4053 | !(p2_22@1069@01) | live]
; [else-branch: 4053 | p2_22@1069@01 | live]
(push) ; 13
; [then-branch: 4053 | !(p2_22@1069@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 4053 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 4054 | p2_22@1069@01 | dead]
; [else-branch: 4054 | !(p2_22@1069@01) | live]
(push) ; 12
; [else-branch: 4054 | !(p2_22@1069@01)]
(pop) ; 12
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 12
; [then-branch: 4055 | !(p2_22@1069@01) | live]
; [else-branch: 4055 | p2_22@1069@01 | live]
(push) ; 13
; [then-branch: 4055 | !(p2_22@1069@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 4055 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_22@1069@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4056 | !(p2_22@1069@01) | live]
; [else-branch: 4056 | p2_22@1069@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 4056 | !(p2_22@1069@01)]
; [exec]
; p1_23 := p3_8 && (!except1_4 && int___gt__(int___unbox__(i_5), 0))
; [eval] p3_8 && (!except1_4 && int___gt__(int___unbox__(i_5), 0))
(push) ; 13
; [then-branch: 4057 | !(p3_8@1070@01) | live]
; [else-branch: 4057 | p3_8@1070@01 | live]
(push) ; 14
; [then-branch: 4057 | !(p3_8@1070@01)]
(assert (not p3_8@1070@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4057 | p3_8@1070@01]
(assert p3_8@1070@01)
; [eval] !except1_4
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p3_8@1070@01 (not p3_8@1070@01)))
; [exec]
; p2_23 := p4_8 && (!except2_4 && int___gt__(int___unbox__(i_5_0), 0))
; [eval] p4_8 && (!except2_4 && int___gt__(int___unbox__(i_5_0), 0))
(push) ; 13
; [then-branch: 4058 | !(p4_8@1071@01) | live]
; [else-branch: 4058 | p4_8@1071@01 | live]
(push) ; 14
; [then-branch: 4058 | !(p4_8@1071@01)]
(assert (not p4_8@1071@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4058 | p4_8@1071@01]
(assert p4_8@1071@01)
; [eval] !except2_4
(push) ; 15
; [then-branch: 4059 | False | live]
; [else-branch: 4059 | True | live]
(push) ; 16
; [then-branch: 4059 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 4059 | True]
; [eval] int___gt__(int___unbox__(i_5_0), 0)
; [eval] int___unbox__(i_5_0)
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_5_0@1024@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)))
(push) ; 17
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 17
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_8@1071@01
  (and
    p4_8@1071@01
    (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_5_0@1024@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))))
(assert (or p4_8@1071@01 (not p4_8@1071@01)))
(declare-const p2_23@1074@01 Bool)
(assert (=
  p2_23@1074@01
  (and
    p4_8@1071@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))))
; [exec]
; p3_9 := p3_8 && (!except1_4 && !int___gt__(int___unbox__(i_5), 0))
; [eval] p3_8 && (!except1_4 && !int___gt__(int___unbox__(i_5), 0))
(push) ; 13
; [then-branch: 4060 | !(p3_8@1070@01) | live]
; [else-branch: 4060 | p3_8@1070@01 | live]
(push) ; 14
; [then-branch: 4060 | !(p3_8@1070@01)]
(assert (not p3_8@1070@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4060 | p3_8@1070@01]
(assert p3_8@1070@01)
; [eval] !except1_4
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p4_9 := p4_8 && (!except2_4 && !int___gt__(int___unbox__(i_5_0), 0))
; [eval] p4_8 && (!except2_4 && !int___gt__(int___unbox__(i_5_0), 0))
(push) ; 13
; [then-branch: 4061 | !(p4_8@1071@01) | live]
; [else-branch: 4061 | p4_8@1071@01 | live]
(push) ; 14
; [then-branch: 4061 | !(p4_8@1071@01)]
(assert (not p4_8@1071@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4061 | p4_8@1071@01]
(assert p4_8@1071@01)
; [eval] !except2_4
(push) ; 15
; [then-branch: 4062 | False | live]
; [else-branch: 4062 | True | live]
(push) ; 16
; [then-branch: 4062 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 4062 | True]
; [eval] !int___gt__(int___unbox__(i_5_0), 0)
; [eval] int___gt__(int___unbox__(i_5_0), 0)
; [eval] int___unbox__(i_5_0)
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_5_0@1024@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)))
(push) ; 17
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 17
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const p4_9@1075@01 Bool)
(assert (=
  p4_9@1075@01
  (and
    p4_8@1071@01
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0)))))
; [exec]
; tmp_7 := new()
(declare-const tmp_7@1076@01 $Ref)
(assert (not (= tmp_7@1076@01 $Ref.null)))
(assert (not (= tmp_7@1076@01 _err_5@1018@01)))
(assert (not (= tmp_7@1076@01 c_5_0@1026@01)))
(assert (not (= tmp_7@1076@01 MyException_res_6_0@1028@01)))
(assert (not (= tmp_7@1076@01 i_5_0@1024@01)))
(assert (not (= tmp_7@1076@01 tmp_6@1072@01)))
(assert (not
  (=
    tmp_7@1076@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
(assert (not (= tmp_7@1076@01 i_7@921@01)))
(assert (not (= tmp_7@1076@01 _cthread_162_0@915@01)))
(assert (not (= tmp_7@1076@01 error_4_0@1020@01)))
(assert (not (= tmp_7@1076@01 MyException2_res@1029@01)))
(assert (not (= tmp_7@1076@01 c_1_0@923@01)))
(assert (not (= tmp_7@1076@01 c_1@922@01)))
(assert (not (= tmp_7@1076@01 _cthread_162@914@01)))
(assert (not (= tmp_7@1076@01 tmp_7@1052@01)))
(assert (not (= tmp_7@1076@01 error_4@1019@01)))
(assert (not (= tmp_7@1076@01 i@920@01)))
(assert (not (= tmp_7@1076@01 MyException2_res_1@1030@01)))
; [eval] p1_23 && !except1_4
; [then-branch: 4063 | False | dead]
; [else-branch: 4063 | True | live]
(push) ; 13
; [else-branch: 4063 | True]
(pop) ; 13
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4064 | True | live]
; [else-branch: 4064 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 4064 | True]
; [eval] p2_23 && !except2_4
(push) ; 14
; [then-branch: 4065 | !(p2_23@1074@01) | live]
; [else-branch: 4065 | p2_23@1074@01 | live]
(push) ; 15
; [then-branch: 4065 | !(p2_23@1074@01)]
(assert (not p2_23@1074@01))
(pop) ; 15
(push) ; 15
; [else-branch: 4065 | p2_23@1074@01]
(assert p2_23@1074@01)
; [eval] !except2_4
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p2_23@1074@01 (not p2_23@1074@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_23@1074@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4066 | p2_23@1074@01 | dead]
; [else-branch: 4066 | !(p2_23@1074@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 4066 | !(p2_23@1074@01)]
(assert (not p2_23@1074@01))
(pop) ; 14
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 14
; [then-branch: 4067 | !(p2_23@1074@01) | live]
; [else-branch: 4067 | p2_23@1074@01 | live]
(push) ; 15
; [then-branch: 4067 | !(p2_23@1074@01)]
(assert (not p2_23@1074@01))
(pop) ; 15
(push) ; 15
; [else-branch: 4067 | p2_23@1074@01]
(assert p2_23@1074@01)
; [eval] !except2_4
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not p2_23@1074@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_23@1074@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4068 | !(p2_23@1074@01) | live]
; [else-branch: 4068 | p2_23@1074@01 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 4068 | !(p2_23@1074@01)]
(assert (not p2_23@1074@01))
; [eval] p1_23 && !except1_4
; [then-branch: 4069 | False | dead]
; [else-branch: 4069 | True | live]
(push) ; 15
; [else-branch: 4069 | True]
(pop) ; 15
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4070 | True | live]
; [else-branch: 4070 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4070 | True]
; [eval] p2_23 && !except2_4
(push) ; 16
; [then-branch: 4071 | !(p2_23@1074@01) | live]
; [else-branch: 4071 | p2_23@1074@01 | live]
(push) ; 17
; [then-branch: 4071 | !(p2_23@1074@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 4071 | p2_23@1074@01]
(assert p2_23@1074@01)
; [eval] !except2_4
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 4072 | p2_23@1074@01 | dead]
; [else-branch: 4072 | !(p2_23@1074@01) | live]
(push) ; 16
; [else-branch: 4072 | !(p2_23@1074@01)]
(pop) ; 16
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 16
; [then-branch: 4073 | !(p2_23@1074@01) | live]
; [else-branch: 4073 | p2_23@1074@01 | live]
(push) ; 17
; [then-branch: 4073 | !(p2_23@1074@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 4073 | p2_23@1074@01]
(assert p2_23@1074@01)
; [eval] !except2_4
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2_23@1074@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4074 | !(p2_23@1074@01) | live]
; [else-branch: 4074 | p2_23@1074@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4074 | !(p2_23@1074@01)]
; [eval] p1_23 && !except1_4
; [then-branch: 4075 | False | dead]
; [else-branch: 4075 | True | live]
(push) ; 17
; [else-branch: 4075 | True]
(pop) ; 17
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4076 | True | live]
; [else-branch: 4076 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 4076 | True]
; [eval] p2_23 && !except2_4
(push) ; 18
; [then-branch: 4077 | !(p2_23@1074@01) | live]
; [else-branch: 4077 | p2_23@1074@01 | live]
(push) ; 19
; [then-branch: 4077 | !(p2_23@1074@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 4077 | p2_23@1074@01]
(assert p2_23@1074@01)
; [eval] !except2_4
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 4078 | p2_23@1074@01 | dead]
; [else-branch: 4078 | !(p2_23@1074@01) | live]
(push) ; 18
; [else-branch: 4078 | !(p2_23@1074@01)]
(pop) ; 18
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 18
; [then-branch: 4079 | !(p2_23@1074@01) | live]
; [else-branch: 4079 | p2_23@1074@01 | live]
(push) ; 19
; [then-branch: 4079 | !(p2_23@1074@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 4079 | p2_23@1074@01]
(assert p2_23@1074@01)
; [eval] !except2_4
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p2_23@1074@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4080 | !(p2_23@1074@01) | live]
; [else-branch: 4080 | p2_23@1074@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 4080 | !(p2_23@1074@01)]
; [exec]
; p1_24 := p3_9 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_9 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_24 := p4_9 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_9 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 19
; [then-branch: 4081 | !(p4_9@1075@01) | live]
; [else-branch: 4081 | p4_9@1075@01 | live]
(push) ; 20
; [then-branch: 4081 | !(p4_9@1075@01)]
(assert (not p4_9@1075@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4081 | p4_9@1075@01]
(assert p4_9@1075@01)
; [eval] !except2_4
(push) ; 21
; [then-branch: 4082 | False | live]
; [else-branch: 4082 | True | live]
(push) ; 22
; [then-branch: 4082 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4082 | True]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p4_9@1075@01 (not p4_9@1075@01)))
; [exec]
; p3_10 := p3_9 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_9 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_10 := p4_9 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_9 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 19
; [then-branch: 4083 | !(p4_9@1075@01) | live]
; [else-branch: 4083 | p4_9@1075@01 | live]
(push) ; 20
; [then-branch: 4083 | !(p4_9@1075@01)]
(assert (not p4_9@1075@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4083 | p4_9@1075@01]
(assert p4_9@1075@01)
; [eval] !except2_4
(push) ; 21
; [then-branch: 4084 | False | live]
; [else-branch: 4084 | True | live]
(push) ; 22
; [then-branch: 4084 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4084 | True]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [eval] p1_24 && !except1_4
; [then-branch: 4085 | False | dead]
; [else-branch: 4085 | True | live]
(push) ; 19
; [else-branch: 4085 | True]
(pop) ; 19
; [eval] !(p1_24 && !except1_4)
; [eval] p1_24 && !except1_4
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4086 | True | live]
; [else-branch: 4086 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4086 | True]
; [eval] p2_24 && !except2_4
; [then-branch: 4087 | False | dead]
; [else-branch: 4087 | True | live]
(push) ; 20
; [else-branch: 4087 | True]
(pop) ; 20
; [eval] !(p2_24 && !except2_4)
; [eval] p2_24 && !except2_4
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4088 | True | live]
; [else-branch: 4088 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4088 | True]
; [eval] p3_9 && !except1_4
; [then-branch: 4089 | False | dead]
; [else-branch: 4089 | True | live]
(push) ; 21
; [else-branch: 4089 | True]
(pop) ; 21
; [eval] !(p3_9 && !except1_4)
; [eval] p3_9 && !except1_4
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4090 | True | live]
; [else-branch: 4090 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4090 | True]
; [eval] p4_9 && !except2_4
(push) ; 22
; [then-branch: 4091 | !(p4_9@1075@01) | live]
; [else-branch: 4091 | p4_9@1075@01 | live]
(push) ; 23
; [then-branch: 4091 | !(p4_9@1075@01)]
(assert (not p4_9@1075@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4091 | p4_9@1075@01]
(assert p4_9@1075@01)
; [eval] !except2_4
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p4_9@1075@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4092 | p4_9@1075@01 | dead]
; [else-branch: 4092 | !(p4_9@1075@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 4092 | !(p4_9@1075@01)]
(assert (not p4_9@1075@01))
(pop) ; 22
; [eval] !(p4_9 && !except2_4)
; [eval] p4_9 && !except2_4
(push) ; 22
; [then-branch: 4093 | !(p4_9@1075@01) | live]
; [else-branch: 4093 | p4_9@1075@01 | live]
(push) ; 23
; [then-branch: 4093 | !(p4_9@1075@01)]
(assert (not p4_9@1075@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4093 | p4_9@1075@01]
(assert p4_9@1075@01)
; [eval] !except2_4
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p4_9@1075@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not p4_9@1075@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4094 | !(p4_9@1075@01) | live]
; [else-branch: 4094 | p4_9@1075@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4094 | !(p4_9@1075@01)]
(assert (not p4_9@1075@01))
; [exec]
; thisexcept1_4 := except1_4 && !bypass1_4
; [eval] except1_4 && !bypass1_4
(push) ; 23
; [then-branch: 4095 | False | live]
; [else-branch: 4095 | True | live]
(push) ; 24
; [then-branch: 4095 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4095 | True]
; [eval] !bypass1_4
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_4@1077@01 Bool)
(assert (= thisexcept1_4@1077@01 (not bypass1_4@1066@01)))
; [exec]
; thisexcept2_4 := except2_4 && !bypass2_4
; [eval] except2_4 && !bypass2_4
; [exec]
; p1_25 := p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
(push) ; 23
; [then-branch: 4096 | !(p1_21@912@01) | live]
; [else-branch: 4096 | p1_21@912@01 | live]
(push) ; 24
; [then-branch: 4096 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4096 | p1_21@912@01]
(push) ; 25
; [then-branch: 4097 | !(thisexcept1_4@1077@01) | live]
; [else-branch: 4097 | thisexcept1_4@1077@01 | live]
(push) ; 26
; [then-branch: 4097 | !(thisexcept1_4@1077@01)]
(assert (not thisexcept1_4@1077@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4097 | thisexcept1_4@1077@01]
(assert thisexcept1_4@1077@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_4@1077@01 (not thisexcept1_4@1077@01)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=> p1_21@912@01 (or thisexcept1_4@1077@01 (not thisexcept1_4@1077@01))))
(declare-const p1_25@1078@01 Bool)
(assert (=
  p1_25@1078@01
  (and
    p1_21@912@01
    (and
      thisexcept1_4@1077@01
      (issubtype<Bool> (typeof<PyType> tmp_6@1072@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_25 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
(push) ; 23
; [then-branch: 4098 | !(p2_21@913@01) | live]
; [else-branch: 4098 | p2_21@913@01 | live]
(push) ; 24
; [then-branch: 4098 | !(p2_21@913@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 4098 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_25@1078@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not p1_25@1078@01))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4099 | p1_25@1078@01 | live]
; [else-branch: 4099 | !(p1_25@1078@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4099 | p1_25@1078@01]
(assert p1_25@1078@01)
; [exec]
; except1_4 := false
; [then-branch: 4100 | False | dead]
; [else-branch: 4100 | True | live]
(push) ; 24
; [else-branch: 4100 | True]
(pop) ; 24
; [eval] !p2_25
(push) ; 24
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4101 | True | live]
; [else-branch: 4101 | False | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4101 | True]
; [exec]
; p1_26 := p1_25 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_25 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 25
; [then-branch: 4102 | !(p1_25@1078@01) | live]
; [else-branch: 4102 | p1_25@1078@01 | live]
(push) ; 26
; [then-branch: 4102 | !(p1_25@1078@01)]
(assert (not p1_25@1078@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4102 | p1_25@1078@01]
; [eval] !except1_4
(push) ; 27
; [then-branch: 4103 | False | live]
; [else-branch: 4103 | True | live]
(push) ; 28
; [then-branch: 4103 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 4103 | True]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or p1_25@1078@01 (not p1_25@1078@01)))
; [exec]
; p2_26 := p2_25 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_25 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_11 := p1_25 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_25 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 25
; [then-branch: 4104 | !(p1_25@1078@01) | live]
; [else-branch: 4104 | p1_25@1078@01 | live]
(push) ; 26
; [then-branch: 4104 | !(p1_25@1078@01)]
(assert (not p1_25@1078@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4104 | p1_25@1078@01]
; [eval] !except1_4
(push) ; 27
; [then-branch: 4105 | False | live]
; [else-branch: 4105 | True | live]
(push) ; 28
; [then-branch: 4105 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 4105 | True]
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [exec]
; p4_11 := p2_25 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_25 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_26 && !except1_4
; [then-branch: 4106 | False | dead]
; [else-branch: 4106 | True | live]
(push) ; 25
; [else-branch: 4106 | True]
(pop) ; 25
; [eval] !(p1_26 && !except1_4)
; [eval] p1_26 && !except1_4
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4107 | True | live]
; [else-branch: 4107 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4107 | True]
; [eval] p2_26 && !except2_4
; [then-branch: 4108 | False | dead]
; [else-branch: 4108 | True | live]
(push) ; 26
; [else-branch: 4108 | True]
(pop) ; 26
; [eval] !(p2_26 && !except2_4)
; [eval] p2_26 && !except2_4
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4109 | True | live]
; [else-branch: 4109 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4109 | True]
; [eval] p1_25 && !except1_4
(push) ; 27
; [then-branch: 4110 | !(p1_25@1078@01) | live]
; [else-branch: 4110 | p1_25@1078@01 | live]
(push) ; 28
; [then-branch: 4110 | !(p1_25@1078@01)]
(assert (not p1_25@1078@01))
(pop) ; 28
(push) ; 28
; [else-branch: 4110 | p1_25@1078@01]
; [eval] !except1_4
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_25@1078@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4111 | p1_25@1078@01 | live]
; [else-branch: 4111 | !(p1_25@1078@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4111 | p1_25@1078@01]
; [exec]
; c_5.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 28
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 28
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@1079@01 $Ref)
(assert (= Container_value@1079@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] p2_25 && !except2_4
; [then-branch: 4112 | False | dead]
; [else-branch: 4112 | True | live]
(push) ; 28
; [else-branch: 4112 | True]
(pop) ; 28
; [eval] !(p2_25 && !except2_4)
; [eval] p2_25 && !except2_4
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4113 | True | live]
; [else-branch: 4113 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4113 | True]
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 4114 | !(p1_21@912@01) | live]
; [else-branch: 4114 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 4114 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4114 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4115 | p1_21@912@01 | live]
; [else-branch: 4115 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4115 | p1_21@912@01]
; [exec]
; _err := null
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 4116 | !(p2_21@913@01) | live]
; [else-branch: 4116 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 4116 | !(p2_21@913@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 4116 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 4117 | p2_21@913@01 | dead]
; [else-branch: 4117 | !(p2_21@913@01) | live]
(push) ; 30
; [else-branch: 4117 | !(p2_21@913@01)]
(pop) ; 30
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 4118 | !(p2_21@913@01) | live]
; [else-branch: 4118 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 4118 | !(p2_21@913@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 4118 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4119 | !(p2_21@913@01) | live]
; [else-branch: 4119 | p2_21@913@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4119 | !(p2_21@913@01)]
; [exec]
; p1_27 := p1_21 &&
;   (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
(push) ; 31
; [then-branch: 4120 | !(p1_21@912@01) | live]
; [else-branch: 4120 | p1_21@912@01 | live]
(push) ; 32
; [then-branch: 4120 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4120 | p1_21@912@01]
(push) ; 33
; [then-branch: 4121 | !(thisexcept1_4@1077@01) | live]
; [else-branch: 4121 | thisexcept1_4@1077@01 | live]
(push) ; 34
; [then-branch: 4121 | !(thisexcept1_4@1077@01)]
(assert (not thisexcept1_4@1077@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4121 | thisexcept1_4@1077@01]
(assert thisexcept1_4@1077@01)
; [eval] issubtype(typeof(_err), MyException2())
; [eval] typeof(_err)
; [eval] MyException2()
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_4@1077@01 (not thisexcept1_4@1077@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(declare-const p1_27@1080@01 Bool)
(assert (=
  p1_27@1080@01
  (and
    p1_21@912@01
    (and
      thisexcept1_4@1077@01
      (issubtype<Bool> (typeof<PyType> $Ref.null) (as MyException2<PyType>  PyType))))))
; [exec]
; p2_27 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
(push) ; 31
; [then-branch: 4122 | !(p2_21@913@01) | live]
; [else-branch: 4122 | p2_21@913@01 | live]
(push) ; 32
; [then-branch: 4122 | !(p2_21@913@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 4122 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_27@1080@01)))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4123 | p1_27@1080@01 | dead]
; [else-branch: 4123 | !(p1_27@1080@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 4123 | !(p1_27@1080@01)]
(assert (not p1_27@1080@01))
(pop) ; 31
; [eval] !p1_27
(push) ; 31
(set-option :timeout 10)
(assert (not p1_27@1080@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_27@1080@01)))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4124 | !(p1_27@1080@01) | live]
; [else-branch: 4124 | p1_27@1080@01 | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4124 | !(p1_27@1080@01)]
(assert (not p1_27@1080@01))
; [then-branch: 4125 | False | dead]
; [else-branch: 4125 | True | live]
(push) ; 32
; [else-branch: 4125 | True]
(pop) ; 32
; [eval] !p2_27
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4126 | True | live]
; [else-branch: 4126 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4126 | True]
; [exec]
; p1_28 := p1_27 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_27 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 33
; [then-branch: 4127 | !(p1_27@1080@01) | live]
; [else-branch: 4127 | p1_27@1080@01 | live]
(push) ; 34
; [then-branch: 4127 | !(p1_27@1080@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 4127 | p1_27@1080@01]
(assert p1_27@1080@01)
; [eval] !except1_4
(push) ; 35
; [then-branch: 4128 | False | live]
; [else-branch: 4128 | True | live]
(push) ; 36
; [then-branch: 4128 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 4128 | True]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or p1_27@1080@01 (not p1_27@1080@01)))
; [exec]
; p2_28 := p2_27 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_27 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_12 := p1_27 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_27 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 33
; [then-branch: 4129 | !(p1_27@1080@01) | live]
; [else-branch: 4129 | p1_27@1080@01 | live]
(push) ; 34
; [then-branch: 4129 | !(p1_27@1080@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 4129 | p1_27@1080@01]
(assert p1_27@1080@01)
; [eval] !except1_4
(push) ; 35
; [then-branch: 4130 | False | live]
; [else-branch: 4130 | True | live]
(push) ; 36
; [then-branch: 4130 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 4130 | True]
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [exec]
; p4_12 := p2_27 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_27 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_28 && !except1_4
; [then-branch: 4131 | False | dead]
; [else-branch: 4131 | True | live]
(push) ; 33
; [else-branch: 4131 | True]
(pop) ; 33
; [eval] !(p1_28 && !except1_4)
; [eval] p1_28 && !except1_4
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4132 | True | live]
; [else-branch: 4132 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4132 | True]
; [eval] p2_28 && !except2_4
; [then-branch: 4133 | False | dead]
; [else-branch: 4133 | True | live]
(push) ; 34
; [else-branch: 4133 | True]
(pop) ; 34
; [eval] !(p2_28 && !except2_4)
; [eval] p2_28 && !except2_4
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4134 | True | live]
; [else-branch: 4134 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4134 | True]
; [eval] p1_27 && !except1_4
(push) ; 35
; [then-branch: 4135 | !(p1_27@1080@01) | live]
; [else-branch: 4135 | p1_27@1080@01 | live]
(push) ; 36
; [then-branch: 4135 | !(p1_27@1080@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 4135 | p1_27@1080@01]
(assert p1_27@1080@01)
; [eval] !except1_4
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 4136 | p1_27@1080@01 | dead]
; [else-branch: 4136 | !(p1_27@1080@01) | live]
(push) ; 35
; [else-branch: 4136 | !(p1_27@1080@01)]
(pop) ; 35
; [eval] !(p1_27 && !except1_4)
; [eval] p1_27 && !except1_4
(push) ; 35
; [then-branch: 4137 | !(p1_27@1080@01) | live]
; [else-branch: 4137 | p1_27@1080@01 | live]
(push) ; 36
; [then-branch: 4137 | !(p1_27@1080@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 4137 | p1_27@1080@01]
(assert p1_27@1080@01)
; [eval] !except1_4
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not p1_27@1080@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4138 | !(p1_27@1080@01) | live]
; [else-branch: 4138 | p1_27@1080@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4138 | !(p1_27@1080@01)]
; [eval] p2_27 && !except2_4
; [then-branch: 4139 | False | dead]
; [else-branch: 4139 | True | live]
(push) ; 36
; [else-branch: 4139 | True]
(pop) ; 36
; [eval] !(p2_27 && !except2_4)
; [eval] p2_27 && !except2_4
(push) ; 36
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4140 | True | live]
; [else-branch: 4140 | False | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 4140 | True]
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 4141 | !(p1_21@912@01) | live]
; [else-branch: 4141 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 4141 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4141 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4142 | p1_21@912@01 | live]
; [else-branch: 4142 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4142 | p1_21@912@01]
; [exec]
; _err := null
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 4143 | !(p2_21@913@01) | live]
; [else-branch: 4143 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 4143 | !(p2_21@913@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 4143 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 4144 | p2_21@913@01 | dead]
; [else-branch: 4144 | !(p2_21@913@01) | live]
(push) ; 38
; [else-branch: 4144 | !(p2_21@913@01)]
(pop) ; 38
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 4145 | !(p2_21@913@01) | live]
; [else-branch: 4145 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 4145 | !(p2_21@913@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 4145 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4146 | !(p2_21@913@01) | live]
; [else-branch: 4146 | p2_21@913@01 | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 4146 | !(p2_21@913@01)]
; [exec]
; assert (p1_21 ==> !except1_4) && (p2_21 ==> !except2_4)
; [eval] p1_21 ==> !except1_4
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4147 | p1_21@912@01 | live]
; [else-branch: 4147 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4147 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> !except2_4
(push) ; 39
; [then-branch: 4148 | p2_21@913@01 | dead]
; [else-branch: 4148 | !(p2_21@913@01) | live]
(push) ; 40
; [else-branch: 4148 | !(p2_21@913@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4149 | p1_21@912@01 | live]
; [else-branch: 4149 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4149 | p1_21@912@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
; [then-branch: 4150 | p2_21@913@01 | dead]
; [else-branch: 4150 | !(p2_21@913@01) | live]
(push) ; 40
; [else-branch: 4150 | !(p2_21@913@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4151 | p1_21@912@01 | live]
; [else-branch: 4151 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4151 | p1_21@912@01]
; [then-branch: 4152 | p2_21@913@01 | dead]
; [else-branch: 4152 | !(p2_21@913@01) | live]
(push) ; 40
; [else-branch: 4152 | !(p2_21@913@01)]
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4153 | p1_21@912@01 | live]
; [else-branch: 4153 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4153 | p1_21@912@01]
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(push) ; 41
(assert (not (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@1079@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@1079@01) (as int<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 41
; [then-branch: 4154 | p2_21@913@01 | dead]
; [else-branch: 4154 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4154 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 && p2_21 ==> c_1.Container_value == c_1_0.Container_valuep
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 4155 | !(p1_21@912@01) | live]
; [else-branch: 4155 | p1_21@912@01 | live]
(push) ; 42
; [then-branch: 4155 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 42
(push) ; 42
; [else-branch: 4155 | p1_21@912@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4156 | p1_21@912@01 && p2_21@913@01 | dead]
; [else-branch: 4156 | !(p1_21@912@01 && p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 42
; [else-branch: 4156 | !(p1_21@912@01 && p2_21@913@01)]
(assert (not (and p1_21@912@01 p2_21@913@01)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (not (and p1_21@912@01 p2_21@913@01)))
; [eval] p1_21 ==> int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4157 | p1_21@912@01 | live]
; [else-branch: 4157 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4157 | p1_21@912@01]
; [eval] int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] int___eq__(i, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 43
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 43
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 43
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4158 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 4158 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 4158 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p2_21 ==> int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
(push) ; 41
; [then-branch: 4159 | p2_21@913@01 | dead]
; [else-branch: 4159 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4159 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 ==> int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4160 | p1_21@912@01 | live]
; [else-branch: 4160 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4160 | p1_21@912@01]
; [eval] int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4161 | int___lt__(_, int___unbox__(_, i@920@01), 0) | live]
; [else-branch: 4161 | !(int___lt__(_, int___unbox__(_, i@920@01), 0)) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 4161 | int___lt__(_, int___unbox__(_, i@920@01), 0)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1079@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1079@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1079@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1079@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1079@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (issubtype<Bool> (typeof<PyType> Container_value@1079@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1079@01 (__prim__int___box__ $Snap.unit (- 0 1))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
        (issubtype<Bool> (typeof<PyType> Container_value@1079@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1079@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(push) ; 41
(assert (not (=>
  (and
    p1_21@912@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1079@01 (__prim__int___box__ $Snap.unit (- 0 1))))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_21@912@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1079@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
; [eval] p2_21 ==> int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
(push) ; 41
; [then-branch: 4162 | p2_21@913@01 | dead]
; [else-branch: 4162 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4162 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 ==> int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4163 | p1_21@912@01 | live]
; [else-branch: 4163 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4163 | p1_21@912@01]
; [eval] int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4164 | int___gt__(_, int___unbox__(_, i@920@01), 0) | dead]
; [else-branch: 4164 | !(int___gt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 4164 | !(int___gt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [eval] p2_21 ==> int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
(push) ; 41
; [then-branch: 4165 | p2_21@913@01 | dead]
; [else-branch: 4165 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4165 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4166 | p1_21@912@01 | live]
; [else-branch: 4166 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4166 | p1_21@912@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 43
; [then-branch: 4167 | False | live]
; [else-branch: 4167 | True | live]
(push) ; 44
; [then-branch: 4167 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 4167 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 45
; [then-branch: 4168 | False | live]
; [else-branch: 4168 | True | live]
(push) ; 46
; [then-branch: 4168 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 4168 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 47
; [then-branch: 4169 | False | live]
; [else-branch: 4169 | True | live]
(push) ; 48
; [then-branch: 4169 | False]
(assert false)
(pop) ; 48
(push) ; 48
; [else-branch: 4169 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p2_21 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 41
; [then-branch: 4170 | p2_21@913@01 | dead]
; [else-branch: 4170 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4170 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 4171 | !(p1_21@912@01) | live]
; [else-branch: 4171 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 4171 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4171 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 4172 | !(p1_21@912@01) | dead]
; [else-branch: 4172 | p1_21@912@01 | live]
(push) ; 37
; [else-branch: 4172 | p1_21@912@01]
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 4173 | !(p1_21@912@01) | live]
; [else-branch: 4173 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 4173 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4173 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 4174 | !(p1_21@912@01) | dead]
; [else-branch: 4174 | p1_21@912@01 | live]
(push) ; 29
; [else-branch: 4174 | p1_21@912@01]
(pop) ; 29
(pop) ; 28
(pop) ; 27
; [eval] !(p1_25 && !except1_4)
; [eval] p1_25 && !except1_4
(push) ; 27
; [then-branch: 4175 | !(p1_25@1078@01) | live]
; [else-branch: 4175 | p1_25@1078@01 | live]
(push) ; 28
; [then-branch: 4175 | !(p1_25@1078@01)]
(assert (not p1_25@1078@01))
(pop) ; 28
(push) ; 28
; [else-branch: 4175 | p1_25@1078@01]
; [eval] !except1_4
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 4176 | !(p1_25@1078@01) | dead]
; [else-branch: 4176 | p1_25@1078@01 | live]
(push) ; 27
; [else-branch: 4176 | p1_25@1078@01]
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !p1_25
(push) ; 23
(set-option :timeout 10)
(assert (not p1_25@1078@01))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4177 | !(p1_25@1078@01) | dead]
; [else-branch: 4177 | p1_25@1078@01 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 4177 | p1_25@1078@01]
(assert p1_25@1078@01)
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !(p1_22 && !except1_4)
; [eval] p1_22 && !except1_4
(push) ; 11
; [then-branch: 4178 | !(p1_22@1068@01) | live]
; [else-branch: 4178 | p1_22@1068@01 | live]
(push) ; 12
; [then-branch: 4178 | !(p1_22@1068@01)]
(assert (not p1_22@1068@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4178 | p1_22@1068@01]
; [eval] !except1_4
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 4179 | !(p1_22@1068@01) | dead]
; [else-branch: 4179 | p1_22@1068@01 | live]
(push) ; 11
; [else-branch: 4179 | p1_22@1068@01]
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(p1_22 && !except1_4)
; [eval] p1_22 && !except1_4
(push) ; 9
; [then-branch: 4180 | !(p1_22@1068@01) | live]
; [else-branch: 4180 | p1_22@1068@01 | live]
(push) ; 10
; [then-branch: 4180 | !(p1_22@1068@01)]
(assert (not p1_22@1068@01))
(pop) ; 10
(push) ; 10
; [else-branch: 4180 | p1_22@1068@01]
; [eval] !except1_4
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 4181 | !(p1_22@1068@01) | dead]
; [else-branch: 4181 | p1_22@1068@01 | live]
(push) ; 9
; [else-branch: 4181 | p1_22@1068@01]
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 4040 | !(p1_22@1068@01)]
(assert (not p1_22@1068@01))
(pop) ; 7
; [eval] !(p1_22 && !except1_4)
; [eval] p1_22 && !except1_4
(push) ; 7
; [then-branch: 4182 | !(p1_22@1068@01) | live]
; [else-branch: 4182 | p1_22@1068@01 | live]
(push) ; 8
; [then-branch: 4182 | !(p1_22@1068@01)]
(assert (not p1_22@1068@01))
(pop) ; 8
(push) ; 8
; [else-branch: 4182 | p1_22@1068@01]
(assert p1_22@1068@01)
; [eval] !except1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_22@1068@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_22@1068@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4183 | !(p1_22@1068@01) | live]
; [else-branch: 4183 | p1_22@1068@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 4183 | !(p1_22@1068@01)]
(assert (not p1_22@1068@01))
; [eval] p2_22 && !except2_4
(push) ; 8
; [then-branch: 4184 | !(p2_22@1069@01) | live]
; [else-branch: 4184 | p2_22@1069@01 | live]
(push) ; 9
; [then-branch: 4184 | !(p2_22@1069@01)]
(assert (not p2_22@1069@01))
(pop) ; 9
(push) ; 9
; [else-branch: 4184 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_22@1069@01 (not p2_22@1069@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_22@1069@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4185 | p2_22@1069@01 | dead]
; [else-branch: 4185 | !(p2_22@1069@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 4185 | !(p2_22@1069@01)]
(assert (not p2_22@1069@01))
(pop) ; 8
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 8
; [then-branch: 4186 | !(p2_22@1069@01) | live]
; [else-branch: 4186 | p2_22@1069@01 | live]
(push) ; 9
; [then-branch: 4186 | !(p2_22@1069@01)]
(assert (not p2_22@1069@01))
(pop) ; 9
(push) ; 9
; [else-branch: 4186 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_22@1069@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_22@1069@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4187 | !(p2_22@1069@01) | live]
; [else-branch: 4187 | p2_22@1069@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4187 | !(p2_22@1069@01)]
(assert (not p2_22@1069@01))
; [eval] p1_22 && !except1_4
(push) ; 9
; [then-branch: 4188 | !(p1_22@1068@01) | live]
; [else-branch: 4188 | p1_22@1068@01 | live]
(push) ; 10
; [then-branch: 4188 | !(p1_22@1068@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 4188 | p1_22@1068@01]
(assert p1_22@1068@01)
; [eval] !except1_4
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 4189 | p1_22@1068@01 | dead]
; [else-branch: 4189 | !(p1_22@1068@01) | live]
(push) ; 9
; [else-branch: 4189 | !(p1_22@1068@01)]
(pop) ; 9
; [eval] !(p1_22 && !except1_4)
; [eval] p1_22 && !except1_4
(push) ; 9
; [then-branch: 4190 | !(p1_22@1068@01) | live]
; [else-branch: 4190 | p1_22@1068@01 | live]
(push) ; 10
; [then-branch: 4190 | !(p1_22@1068@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 4190 | p1_22@1068@01]
(assert p1_22@1068@01)
; [eval] !except1_4
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not p1_22@1068@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4191 | !(p1_22@1068@01) | live]
; [else-branch: 4191 | p1_22@1068@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 4191 | !(p1_22@1068@01)]
; [eval] p2_22 && !except2_4
(push) ; 10
; [then-branch: 4192 | !(p2_22@1069@01) | live]
; [else-branch: 4192 | p2_22@1069@01 | live]
(push) ; 11
; [then-branch: 4192 | !(p2_22@1069@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 4192 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 4193 | p2_22@1069@01 | dead]
; [else-branch: 4193 | !(p2_22@1069@01) | live]
(push) ; 10
; [else-branch: 4193 | !(p2_22@1069@01)]
(pop) ; 10
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 10
; [then-branch: 4194 | !(p2_22@1069@01) | live]
; [else-branch: 4194 | p2_22@1069@01 | live]
(push) ; 11
; [then-branch: 4194 | !(p2_22@1069@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 4194 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_22@1069@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4195 | !(p2_22@1069@01) | live]
; [else-branch: 4195 | p2_22@1069@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4195 | !(p2_22@1069@01)]
; [eval] p1_22 && !except1_4
(push) ; 11
; [then-branch: 4196 | !(p1_22@1068@01) | live]
; [else-branch: 4196 | p1_22@1068@01 | live]
(push) ; 12
; [then-branch: 4196 | !(p1_22@1068@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 4196 | p1_22@1068@01]
(assert p1_22@1068@01)
; [eval] !except1_4
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 4197 | p1_22@1068@01 | dead]
; [else-branch: 4197 | !(p1_22@1068@01) | live]
(push) ; 11
; [else-branch: 4197 | !(p1_22@1068@01)]
(pop) ; 11
; [eval] !(p1_22 && !except1_4)
; [eval] p1_22 && !except1_4
(push) ; 11
; [then-branch: 4198 | !(p1_22@1068@01) | live]
; [else-branch: 4198 | p1_22@1068@01 | live]
(push) ; 12
; [then-branch: 4198 | !(p1_22@1068@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 4198 | p1_22@1068@01]
(assert p1_22@1068@01)
; [eval] !except1_4
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p1_22@1068@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4199 | !(p1_22@1068@01) | live]
; [else-branch: 4199 | p1_22@1068@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 4199 | !(p1_22@1068@01)]
; [eval] p2_22 && !except2_4
(push) ; 12
; [then-branch: 4200 | !(p2_22@1069@01) | live]
; [else-branch: 4200 | p2_22@1069@01 | live]
(push) ; 13
; [then-branch: 4200 | !(p2_22@1069@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 4200 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 4201 | p2_22@1069@01 | dead]
; [else-branch: 4201 | !(p2_22@1069@01) | live]
(push) ; 12
; [else-branch: 4201 | !(p2_22@1069@01)]
(pop) ; 12
; [eval] !(p2_22 && !except2_4)
; [eval] p2_22 && !except2_4
(push) ; 12
; [then-branch: 4202 | !(p2_22@1069@01) | live]
; [else-branch: 4202 | p2_22@1069@01 | live]
(push) ; 13
; [then-branch: 4202 | !(p2_22@1069@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 4202 | p2_22@1069@01]
(assert p2_22@1069@01)
; [eval] !except2_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_22@1069@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4203 | !(p2_22@1069@01) | live]
; [else-branch: 4203 | p2_22@1069@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 4203 | !(p2_22@1069@01)]
; [exec]
; p1_23 := p3_8 && (!except1_4 && int___gt__(int___unbox__(i_5), 0))
; [eval] p3_8 && (!except1_4 && int___gt__(int___unbox__(i_5), 0))
(push) ; 13
; [then-branch: 4204 | !(p3_8@1070@01) | live]
; [else-branch: 4204 | p3_8@1070@01 | live]
(push) ; 14
; [then-branch: 4204 | !(p3_8@1070@01)]
(assert (not p3_8@1070@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4204 | p3_8@1070@01]
(assert p3_8@1070@01)
; [eval] !except1_4
(push) ; 15
; [then-branch: 4205 | False | live]
; [else-branch: 4205 | True | live]
(push) ; 16
; [then-branch: 4205 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 4205 | True]
; [eval] int___gt__(int___unbox__(i_5), 0)
; [eval] int___unbox__(i_5)
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 17
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 17
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_8@1070@01
  (and
    p3_8@1070@01
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(assert (or p3_8@1070@01 (not p3_8@1070@01)))
(declare-const p1_23@1081@01 Bool)
(assert (=
  p1_23@1081@01
  (and
    p3_8@1070@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
; [exec]
; p2_23 := p4_8 && (!except2_4 && int___gt__(int___unbox__(i_5_0), 0))
; [eval] p4_8 && (!except2_4 && int___gt__(int___unbox__(i_5_0), 0))
(push) ; 13
; [then-branch: 4206 | !(p4_8@1071@01) | live]
; [else-branch: 4206 | p4_8@1071@01 | live]
(push) ; 14
; [then-branch: 4206 | !(p4_8@1071@01)]
(assert (not p4_8@1071@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4206 | p4_8@1071@01]
(assert p4_8@1071@01)
; [eval] !except2_4
(push) ; 15
; [then-branch: 4207 | False | live]
; [else-branch: 4207 | True | live]
(push) ; 16
; [then-branch: 4207 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 4207 | True]
; [eval] int___gt__(int___unbox__(i_5_0), 0)
; [eval] int___unbox__(i_5_0)
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_5_0@1024@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)))
(push) ; 17
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 17
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_8@1071@01
  (and
    p4_8@1071@01
    (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_5_0@1024@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))))
(assert (or p4_8@1071@01 (not p4_8@1071@01)))
(declare-const p2_23@1082@01 Bool)
(assert (=
  p2_23@1082@01
  (and
    p4_8@1071@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))))
; [exec]
; p3_9 := p3_8 && (!except1_4 && !int___gt__(int___unbox__(i_5), 0))
; [eval] p3_8 && (!except1_4 && !int___gt__(int___unbox__(i_5), 0))
(push) ; 13
; [then-branch: 4208 | !(p3_8@1070@01) | live]
; [else-branch: 4208 | p3_8@1070@01 | live]
(push) ; 14
; [then-branch: 4208 | !(p3_8@1070@01)]
(assert (not p3_8@1070@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4208 | p3_8@1070@01]
(assert p3_8@1070@01)
; [eval] !except1_4
(push) ; 15
; [then-branch: 4209 | False | live]
; [else-branch: 4209 | True | live]
(push) ; 16
; [then-branch: 4209 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 4209 | True]
; [eval] !int___gt__(int___unbox__(i_5), 0)
; [eval] int___gt__(int___unbox__(i_5), 0)
; [eval] int___unbox__(i_5)
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 17
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 17
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const p3_9@1083@01 Bool)
(assert (=
  p3_9@1083@01
  (and
    p3_8@1070@01
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [exec]
; p4_9 := p4_8 && (!except2_4 && !int___gt__(int___unbox__(i_5_0), 0))
; [eval] p4_8 && (!except2_4 && !int___gt__(int___unbox__(i_5_0), 0))
(push) ; 13
; [then-branch: 4210 | !(p4_8@1071@01) | live]
; [else-branch: 4210 | p4_8@1071@01 | live]
(push) ; 14
; [then-branch: 4210 | !(p4_8@1071@01)]
(assert (not p4_8@1071@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4210 | p4_8@1071@01]
(assert p4_8@1071@01)
; [eval] !except2_4
(push) ; 15
; [then-branch: 4211 | False | live]
; [else-branch: 4211 | True | live]
(push) ; 16
; [then-branch: 4211 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 4211 | True]
; [eval] !int___gt__(int___unbox__(i_5_0), 0)
; [eval] int___gt__(int___unbox__(i_5_0), 0)
; [eval] int___unbox__(i_5_0)
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_5_0@1024@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)))
(push) ; 17
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 17
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_5_0@1024@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_5_0@1024@01)
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(declare-const p4_9@1084@01 Bool)
(assert (=
  p4_9@1084@01
  (and
    p4_8@1071@01
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_5_0@1024@01) 0)))))
; [exec]
; tmp_7 := new()
(declare-const tmp_7@1085@01 $Ref)
(assert (not (= tmp_7@1085@01 $Ref.null)))
(assert (not (= tmp_7@1085@01 _err_5@1018@01)))
(assert (not (= tmp_7@1085@01 c_5_0@1026@01)))
(assert (not (= tmp_7@1085@01 MyException_res_6_0@1028@01)))
(assert (not (= tmp_7@1085@01 i_5_0@1024@01)))
(assert (not (= tmp_7@1085@01 tmp_6@1072@01)))
(assert (not
  (=
    tmp_7@1085@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
(assert (not (= tmp_7@1085@01 i_7@921@01)))
(assert (not (= tmp_7@1085@01 MyException_res_6@1027@01)))
(assert (not (= tmp_7@1085@01 _cthread_162_0@915@01)))
(assert (not (= tmp_7@1085@01 error_4_0@1020@01)))
(assert (not (= tmp_7@1085@01 MyException2_res@1029@01)))
(assert (not (= tmp_7@1085@01 c_1_0@923@01)))
(assert (not (= tmp_7@1085@01 c_1@922@01)))
(assert (not (= tmp_7@1085@01 _cthread_162@914@01)))
(assert (not (= tmp_7@1085@01 tmp_7@1052@01)))
(assert (not (= tmp_7@1085@01 error_4@1019@01)))
(assert (not (= tmp_7@1085@01 i@920@01)))
(assert (not (= tmp_7@1085@01 MyException2_res_1@1030@01)))
; [eval] p1_23 && !except1_4
(push) ; 13
; [then-branch: 4212 | !(p1_23@1081@01) | live]
; [else-branch: 4212 | p1_23@1081@01 | live]
(push) ; 14
; [then-branch: 4212 | !(p1_23@1081@01)]
(assert (not p1_23@1081@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4212 | p1_23@1081@01]
(assert p1_23@1081@01)
; [eval] !except1_4
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or p1_23@1081@01 (not p1_23@1081@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_23@1081@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not p1_23@1081@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4213 | p1_23@1081@01 | live]
; [else-branch: 4213 | !(p1_23@1081@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 4213 | p1_23@1081@01]
(assert p1_23@1081@01)
; [exec]
; MyException2_res := tmp_7
; [eval] p2_23 && !except2_4
(push) ; 14
; [then-branch: 4214 | !(p2_23@1082@01) | live]
; [else-branch: 4214 | p2_23@1082@01 | live]
(push) ; 15
; [then-branch: 4214 | !(p2_23@1082@01)]
(assert (not p2_23@1082@01))
(pop) ; 15
(push) ; 15
; [else-branch: 4214 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p2_23@1082@01 (not p2_23@1082@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_23@1082@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4215 | p2_23@1082@01 | dead]
; [else-branch: 4215 | !(p2_23@1082@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 4215 | !(p2_23@1082@01)]
(assert (not p2_23@1082@01))
(pop) ; 14
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 14
; [then-branch: 4216 | !(p2_23@1082@01) | live]
; [else-branch: 4216 | p2_23@1082@01 | live]
(push) ; 15
; [then-branch: 4216 | !(p2_23@1082@01)]
(assert (not p2_23@1082@01))
(pop) ; 15
(push) ; 15
; [else-branch: 4216 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not p2_23@1082@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_23@1082@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4217 | !(p2_23@1082@01) | live]
; [else-branch: 4217 | p2_23@1082@01 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 4217 | !(p2_23@1082@01)]
(assert (not p2_23@1082@01))
; [eval] p1_23 && !except1_4
(push) ; 15
; [then-branch: 4218 | !(p1_23@1081@01) | live]
; [else-branch: 4218 | p1_23@1081@01 | live]
(push) ; 16
; [then-branch: 4218 | !(p1_23@1081@01)]
(assert (not p1_23@1081@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4218 | p1_23@1081@01]
; [eval] !except1_4
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_23@1081@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4219 | p1_23@1081@01 | live]
; [else-branch: 4219 | !(p1_23@1081@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4219 | p1_23@1081@01]
; [exec]
; inhale typeof(MyException2_res) == MyException2()
(declare-const $t@1086@01 $Snap)
(assert (= $t@1086@01 $Snap.unit))
; [eval] typeof(MyException2_res) == MyException2()
; [eval] typeof(MyException2_res)
; [eval] MyException2()
(assert (= (typeof<PyType> tmp_7@1085@01) (as MyException2<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_23 && !except2_4
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4220 | !(p2_23@1082@01) | live]
; [else-branch: 4220 | p2_23@1082@01 | live]
(push) ; 17
; [then-branch: 4220 | !(p2_23@1082@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 4220 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 4221 | p2_23@1082@01 | dead]
; [else-branch: 4221 | !(p2_23@1082@01) | live]
(push) ; 16
; [else-branch: 4221 | !(p2_23@1082@01)]
(pop) ; 16
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 16
; [then-branch: 4222 | !(p2_23@1082@01) | live]
; [else-branch: 4222 | p2_23@1082@01 | live]
(push) ; 17
; [then-branch: 4222 | !(p2_23@1082@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 4222 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2_23@1082@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4223 | !(p2_23@1082@01) | live]
; [else-branch: 4223 | p2_23@1082@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4223 | !(p2_23@1082@01)]
; [eval] p1_23 && !except1_4
(push) ; 17
; [then-branch: 4224 | !(p1_23@1081@01) | live]
; [else-branch: 4224 | p1_23@1081@01 | live]
(push) ; 18
; [then-branch: 4224 | !(p1_23@1081@01)]
(assert (not p1_23@1081@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4224 | p1_23@1081@01]
; [eval] !except1_4
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_23@1081@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4225 | p1_23@1081@01 | live]
; [else-branch: 4225 | !(p1_23@1081@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 4225 | p1_23@1081@01]
; [exec]
; _err := MyException2_res
; [exec]
; except1_4 := true
; [eval] p2_23 && !except2_4
(push) ; 18
; [then-branch: 4226 | !(p2_23@1082@01) | live]
; [else-branch: 4226 | p2_23@1082@01 | live]
(push) ; 19
; [then-branch: 4226 | !(p2_23@1082@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 4226 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 4227 | p2_23@1082@01 | dead]
; [else-branch: 4227 | !(p2_23@1082@01) | live]
(push) ; 18
; [else-branch: 4227 | !(p2_23@1082@01)]
(pop) ; 18
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 18
; [then-branch: 4228 | !(p2_23@1082@01) | live]
; [else-branch: 4228 | p2_23@1082@01 | live]
(push) ; 19
; [then-branch: 4228 | !(p2_23@1082@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 4228 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p2_23@1082@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4229 | !(p2_23@1082@01) | live]
; [else-branch: 4229 | p2_23@1082@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 4229 | !(p2_23@1082@01)]
; [exec]
; p1_24 := p3_9 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_9 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 19
; [then-branch: 4230 | !(p3_9@1083@01) | live]
; [else-branch: 4230 | p3_9@1083@01 | live]
(push) ; 20
; [then-branch: 4230 | !(p3_9@1083@01)]
(assert (not p3_9@1083@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4230 | p3_9@1083@01]
(assert p3_9@1083@01)
; [eval] !except1_4
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p3_9@1083@01 (not p3_9@1083@01)))
; [exec]
; p2_24 := p4_9 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_9 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 19
; [then-branch: 4231 | !(p4_9@1084@01) | live]
; [else-branch: 4231 | p4_9@1084@01 | live]
(push) ; 20
; [then-branch: 4231 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4231 | p4_9@1084@01]
(assert p4_9@1084@01)
; [eval] !except2_4
(push) ; 21
; [then-branch: 4232 | False | live]
; [else-branch: 4232 | True | live]
(push) ; 22
; [then-branch: 4232 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4232 | True]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p4_9@1084@01 (not p4_9@1084@01)))
; [exec]
; p3_10 := p3_9 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_9 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 19
; [then-branch: 4233 | !(p3_9@1083@01) | live]
; [else-branch: 4233 | p3_9@1083@01 | live]
(push) ; 20
; [then-branch: 4233 | !(p3_9@1083@01)]
(assert (not p3_9@1083@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4233 | p3_9@1083@01]
(assert p3_9@1083@01)
; [eval] !except1_4
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [exec]
; p4_10 := p4_9 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_9 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 19
; [then-branch: 4234 | !(p4_9@1084@01) | live]
; [else-branch: 4234 | p4_9@1084@01 | live]
(push) ; 20
; [then-branch: 4234 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4234 | p4_9@1084@01]
(assert p4_9@1084@01)
; [eval] !except2_4
(push) ; 21
; [then-branch: 4235 | False | live]
; [else-branch: 4235 | True | live]
(push) ; 22
; [then-branch: 4235 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4235 | True]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [eval] p1_24 && !except1_4
; [then-branch: 4236 | False | dead]
; [else-branch: 4236 | True | live]
(push) ; 19
; [else-branch: 4236 | True]
(pop) ; 19
; [eval] !(p1_24 && !except1_4)
; [eval] p1_24 && !except1_4
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4237 | True | live]
; [else-branch: 4237 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4237 | True]
; [eval] p2_24 && !except2_4
; [then-branch: 4238 | False | dead]
; [else-branch: 4238 | True | live]
(push) ; 20
; [else-branch: 4238 | True]
(pop) ; 20
; [eval] !(p2_24 && !except2_4)
; [eval] p2_24 && !except2_4
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4239 | True | live]
; [else-branch: 4239 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4239 | True]
; [eval] p3_9 && !except1_4
(push) ; 21
; [then-branch: 4240 | !(p3_9@1083@01) | live]
; [else-branch: 4240 | p3_9@1083@01 | live]
(push) ; 22
; [then-branch: 4240 | !(p3_9@1083@01)]
(assert (not p3_9@1083@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4240 | p3_9@1083@01]
(assert p3_9@1083@01)
; [eval] !except1_4
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 4241 | False | dead]
; [else-branch: 4241 | True | live]
(push) ; 21
; [else-branch: 4241 | True]
(pop) ; 21
; [eval] !(p3_9 && !except1_4)
; [eval] p3_9 && !except1_4
(push) ; 21
; [then-branch: 4242 | !(p3_9@1083@01) | live]
; [else-branch: 4242 | p3_9@1083@01 | live]
(push) ; 22
; [then-branch: 4242 | !(p3_9@1083@01)]
(assert (not p3_9@1083@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4242 | p3_9@1083@01]
(assert p3_9@1083@01)
; [eval] !except1_4
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4243 | True | live]
; [else-branch: 4243 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4243 | True]
; [eval] p4_9 && !except2_4
(push) ; 22
; [then-branch: 4244 | !(p4_9@1084@01) | live]
; [else-branch: 4244 | p4_9@1084@01 | live]
(push) ; 23
; [then-branch: 4244 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4244 | p4_9@1084@01]
(assert p4_9@1084@01)
; [eval] !except2_4
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p4_9@1084@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4245 | p4_9@1084@01 | dead]
; [else-branch: 4245 | !(p4_9@1084@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 4245 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
(pop) ; 22
; [eval] !(p4_9 && !except2_4)
; [eval] p4_9 && !except2_4
(push) ; 22
; [then-branch: 4246 | !(p4_9@1084@01) | live]
; [else-branch: 4246 | p4_9@1084@01 | live]
(push) ; 23
; [then-branch: 4246 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4246 | p4_9@1084@01]
(assert p4_9@1084@01)
; [eval] !except2_4
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p4_9@1084@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not p4_9@1084@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4247 | !(p4_9@1084@01) | live]
; [else-branch: 4247 | p4_9@1084@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4247 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
; [exec]
; thisexcept1_4 := except1_4 && !bypass1_4
; [eval] except1_4 && !bypass1_4
(push) ; 23
; [then-branch: 4248 | False | live]
; [else-branch: 4248 | True | live]
(push) ; 24
; [then-branch: 4248 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4248 | True]
; [eval] !bypass1_4
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_4@1087@01 Bool)
(assert (= thisexcept1_4@1087@01 (not bypass1_4@1066@01)))
; [exec]
; thisexcept2_4 := except2_4 && !bypass2_4
; [eval] except2_4 && !bypass2_4
; [exec]
; p1_25 := p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
(push) ; 23
; [then-branch: 4249 | !(p1_21@912@01) | live]
; [else-branch: 4249 | p1_21@912@01 | live]
(push) ; 24
; [then-branch: 4249 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4249 | p1_21@912@01]
(push) ; 25
; [then-branch: 4250 | !(thisexcept1_4@1087@01) | live]
; [else-branch: 4250 | thisexcept1_4@1087@01 | live]
(push) ; 26
; [then-branch: 4250 | !(thisexcept1_4@1087@01)]
(assert (not thisexcept1_4@1087@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4250 | thisexcept1_4@1087@01]
(assert thisexcept1_4@1087@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_4@1087@01 (not thisexcept1_4@1087@01)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=> p1_21@912@01 (or thisexcept1_4@1087@01 (not thisexcept1_4@1087@01))))
(declare-const p1_25@1088@01 Bool)
(assert (=
  p1_25@1088@01
  (and
    p1_21@912@01
    (and
      thisexcept1_4@1087@01
      (issubtype<Bool> (typeof<PyType> tmp_7@1085@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_25 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
(push) ; 23
; [then-branch: 4251 | !(p2_21@913@01) | live]
; [else-branch: 4251 | p2_21@913@01 | live]
(push) ; 24
; [then-branch: 4251 | !(p2_21@913@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 4251 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_25@1088@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4252 | p1_25@1088@01 | dead]
; [else-branch: 4252 | !(p1_25@1088@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 4252 | !(p1_25@1088@01)]
(assert (not p1_25@1088@01))
(pop) ; 23
; [eval] !p1_25
(push) ; 23
(set-option :timeout 10)
(assert (not p1_25@1088@01))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_25@1088@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4253 | !(p1_25@1088@01) | live]
; [else-branch: 4253 | p1_25@1088@01 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4253 | !(p1_25@1088@01)]
(assert (not p1_25@1088@01))
; [then-branch: 4254 | False | dead]
; [else-branch: 4254 | True | live]
(push) ; 24
; [else-branch: 4254 | True]
(pop) ; 24
; [eval] !p2_25
(push) ; 24
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4255 | True | live]
; [else-branch: 4255 | False | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4255 | True]
; [exec]
; p1_26 := p1_25 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_25 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 25
; [then-branch: 4256 | !(p1_25@1088@01) | live]
; [else-branch: 4256 | p1_25@1088@01 | live]
(push) ; 26
; [then-branch: 4256 | !(p1_25@1088@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 4256 | p1_25@1088@01]
(assert p1_25@1088@01)
; [eval] !except1_4
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or p1_25@1088@01 (not p1_25@1088@01)))
; [exec]
; p2_26 := p2_25 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_25 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_11 := p1_25 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_25 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 25
; [then-branch: 4257 | !(p1_25@1088@01) | live]
; [else-branch: 4257 | p1_25@1088@01 | live]
(push) ; 26
; [then-branch: 4257 | !(p1_25@1088@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 4257 | p1_25@1088@01]
(assert p1_25@1088@01)
; [eval] !except1_4
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [exec]
; p4_11 := p2_25 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_25 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_26 && !except1_4
; [then-branch: 4258 | False | dead]
; [else-branch: 4258 | True | live]
(push) ; 25
; [else-branch: 4258 | True]
(pop) ; 25
; [eval] !(p1_26 && !except1_4)
; [eval] p1_26 && !except1_4
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4259 | True | live]
; [else-branch: 4259 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4259 | True]
; [eval] p2_26 && !except2_4
; [then-branch: 4260 | False | dead]
; [else-branch: 4260 | True | live]
(push) ; 26
; [else-branch: 4260 | True]
(pop) ; 26
; [eval] !(p2_26 && !except2_4)
; [eval] p2_26 && !except2_4
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4261 | True | live]
; [else-branch: 4261 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4261 | True]
; [eval] p1_25 && !except1_4
(push) ; 27
; [then-branch: 4262 | !(p1_25@1088@01) | live]
; [else-branch: 4262 | p1_25@1088@01 | live]
(push) ; 28
; [then-branch: 4262 | !(p1_25@1088@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 4262 | p1_25@1088@01]
(assert p1_25@1088@01)
; [eval] !except1_4
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 4263 | False | dead]
; [else-branch: 4263 | True | live]
(push) ; 27
; [else-branch: 4263 | True]
(pop) ; 27
; [eval] !(p1_25 && !except1_4)
; [eval] p1_25 && !except1_4
(push) ; 27
; [then-branch: 4264 | !(p1_25@1088@01) | live]
; [else-branch: 4264 | p1_25@1088@01 | live]
(push) ; 28
; [then-branch: 4264 | !(p1_25@1088@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 4264 | p1_25@1088@01]
(assert p1_25@1088@01)
; [eval] !except1_4
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4265 | True | live]
; [else-branch: 4265 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4265 | True]
; [eval] p2_25 && !except2_4
; [then-branch: 4266 | False | dead]
; [else-branch: 4266 | True | live]
(push) ; 28
; [else-branch: 4266 | True]
(pop) ; 28
; [eval] !(p2_25 && !except2_4)
; [eval] p2_25 && !except2_4
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4267 | True | live]
; [else-branch: 4267 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4267 | True]
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 4268 | !(p1_21@912@01) | live]
; [else-branch: 4268 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 4268 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4268 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 4269 | False | dead]
; [else-branch: 4269 | True | live]
(push) ; 29
; [else-branch: 4269 | True]
(pop) ; 29
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 4270 | !(p1_21@912@01) | live]
; [else-branch: 4270 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 4270 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4270 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4271 | True | live]
; [else-branch: 4271 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4271 | True]
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 4272 | !(p2_21@913@01) | live]
; [else-branch: 4272 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 4272 | !(p2_21@913@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 4272 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 4273 | p2_21@913@01 | dead]
; [else-branch: 4273 | !(p2_21@913@01) | live]
(push) ; 30
; [else-branch: 4273 | !(p2_21@913@01)]
(pop) ; 30
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 4274 | !(p2_21@913@01) | live]
; [else-branch: 4274 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 4274 | !(p2_21@913@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 4274 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4275 | !(p2_21@913@01) | live]
; [else-branch: 4275 | p2_21@913@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4275 | !(p2_21@913@01)]
; [exec]
; p1_27 := p1_21 &&
;   (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
(push) ; 31
; [then-branch: 4276 | !(p1_21@912@01) | live]
; [else-branch: 4276 | p1_21@912@01 | live]
(push) ; 32
; [then-branch: 4276 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4276 | p1_21@912@01]
(push) ; 33
; [then-branch: 4277 | !(thisexcept1_4@1087@01) | live]
; [else-branch: 4277 | thisexcept1_4@1087@01 | live]
(push) ; 34
; [then-branch: 4277 | !(thisexcept1_4@1087@01)]
(assert (not thisexcept1_4@1087@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4277 | thisexcept1_4@1087@01]
(assert thisexcept1_4@1087@01)
; [eval] issubtype(typeof(_err), MyException2())
; [eval] typeof(_err)
; [eval] MyException2()
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_4@1087@01 (not thisexcept1_4@1087@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(declare-const p1_27@1089@01 Bool)
(assert (=
  p1_27@1089@01
  (and
    p1_21@912@01
    (and
      thisexcept1_4@1087@01
      (issubtype<Bool> (typeof<PyType> tmp_7@1085@01) (as MyException2<PyType>  PyType))))))
; [exec]
; p2_27 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
(push) ; 31
; [then-branch: 4278 | !(p2_21@913@01) | live]
; [else-branch: 4278 | p2_21@913@01 | live]
(push) ; 32
; [then-branch: 4278 | !(p2_21@913@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 4278 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_27@1089@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not p1_27@1089@01))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4279 | p1_27@1089@01 | live]
; [else-branch: 4279 | !(p1_27@1089@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4279 | p1_27@1089@01]
(assert p1_27@1089@01)
; [exec]
; except1_4 := false
; [then-branch: 4280 | False | dead]
; [else-branch: 4280 | True | live]
(push) ; 32
; [else-branch: 4280 | True]
(pop) ; 32
; [eval] !p2_27
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4281 | True | live]
; [else-branch: 4281 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4281 | True]
; [exec]
; p1_28 := p1_27 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_27 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 33
; [then-branch: 4282 | !(p1_27@1089@01) | live]
; [else-branch: 4282 | p1_27@1089@01 | live]
(push) ; 34
; [then-branch: 4282 | !(p1_27@1089@01)]
(assert (not p1_27@1089@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4282 | p1_27@1089@01]
; [eval] !except1_4
(push) ; 35
; [then-branch: 4283 | False | live]
; [else-branch: 4283 | True | live]
(push) ; 36
; [then-branch: 4283 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 4283 | True]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or p1_27@1089@01 (not p1_27@1089@01)))
; [exec]
; p2_28 := p2_27 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_27 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_12 := p1_27 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_27 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 33
; [then-branch: 4284 | !(p1_27@1089@01) | live]
; [else-branch: 4284 | p1_27@1089@01 | live]
(push) ; 34
; [then-branch: 4284 | !(p1_27@1089@01)]
(assert (not p1_27@1089@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4284 | p1_27@1089@01]
; [eval] !except1_4
(push) ; 35
; [then-branch: 4285 | False | live]
; [else-branch: 4285 | True | live]
(push) ; 36
; [then-branch: 4285 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 4285 | True]
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [exec]
; p4_12 := p2_27 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_27 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_28 && !except1_4
; [then-branch: 4286 | False | dead]
; [else-branch: 4286 | True | live]
(push) ; 33
; [else-branch: 4286 | True]
(pop) ; 33
; [eval] !(p1_28 && !except1_4)
; [eval] p1_28 && !except1_4
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4287 | True | live]
; [else-branch: 4287 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4287 | True]
; [eval] p2_28 && !except2_4
; [then-branch: 4288 | False | dead]
; [else-branch: 4288 | True | live]
(push) ; 34
; [else-branch: 4288 | True]
(pop) ; 34
; [eval] !(p2_28 && !except2_4)
; [eval] p2_28 && !except2_4
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4289 | True | live]
; [else-branch: 4289 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4289 | True]
; [eval] p1_27 && !except1_4
(push) ; 35
; [then-branch: 4290 | !(p1_27@1089@01) | live]
; [else-branch: 4290 | p1_27@1089@01 | live]
(push) ; 36
; [then-branch: 4290 | !(p1_27@1089@01)]
(assert (not p1_27@1089@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4290 | p1_27@1089@01]
; [eval] !except1_4
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_27@1089@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4291 | p1_27@1089@01 | live]
; [else-branch: 4291 | !(p1_27@1089@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4291 | p1_27@1089@01]
; [exec]
; c_5.Container_value := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 36
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 36
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const Container_value@1090@01 $Ref)
(assert (= Container_value@1090@01 (__prim__int___box__ $Snap.unit 1)))
; [eval] p2_27 && !except2_4
; [then-branch: 4292 | False | dead]
; [else-branch: 4292 | True | live]
(push) ; 36
; [else-branch: 4292 | True]
(pop) ; 36
; [eval] !(p2_27 && !except2_4)
; [eval] p2_27 && !except2_4
(push) ; 36
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4293 | True | live]
; [else-branch: 4293 | False | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 4293 | True]
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 4294 | !(p1_21@912@01) | live]
; [else-branch: 4294 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 4294 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4294 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4295 | p1_21@912@01 | live]
; [else-branch: 4295 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4295 | p1_21@912@01]
; [exec]
; _err := null
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 4296 | !(p2_21@913@01) | live]
; [else-branch: 4296 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 4296 | !(p2_21@913@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 4296 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 4297 | p2_21@913@01 | dead]
; [else-branch: 4297 | !(p2_21@913@01) | live]
(push) ; 38
; [else-branch: 4297 | !(p2_21@913@01)]
(pop) ; 38
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 4298 | !(p2_21@913@01) | live]
; [else-branch: 4298 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 4298 | !(p2_21@913@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 4298 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4299 | !(p2_21@913@01) | live]
; [else-branch: 4299 | p2_21@913@01 | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 4299 | !(p2_21@913@01)]
; [exec]
; assert (p1_21 ==> !except1_4) && (p2_21 ==> !except2_4)
; [eval] p1_21 ==> !except1_4
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4300 | p1_21@912@01 | live]
; [else-branch: 4300 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4300 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> !except2_4
(push) ; 39
; [then-branch: 4301 | p2_21@913@01 | dead]
; [else-branch: 4301 | !(p2_21@913@01) | live]
(push) ; 40
; [else-branch: 4301 | !(p2_21@913@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4302 | p1_21@912@01 | live]
; [else-branch: 4302 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4302 | p1_21@912@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
; [then-branch: 4303 | p2_21@913@01 | dead]
; [else-branch: 4303 | !(p2_21@913@01) | live]
(push) ; 40
; [else-branch: 4303 | !(p2_21@913@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4304 | p1_21@912@01 | live]
; [else-branch: 4304 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4304 | p1_21@912@01]
; [then-branch: 4305 | p2_21@913@01 | dead]
; [else-branch: 4305 | !(p2_21@913@01) | live]
(push) ; 40
; [else-branch: 4305 | !(p2_21@913@01)]
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4306 | p1_21@912@01 | live]
; [else-branch: 4306 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4306 | p1_21@912@01]
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(push) ; 41
(assert (not (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@1090@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@1090@01) (as int<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 41
; [then-branch: 4307 | p2_21@913@01 | dead]
; [else-branch: 4307 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4307 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 && p2_21 ==> c_1.Container_value == c_1_0.Container_valuep
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 4308 | !(p1_21@912@01) | live]
; [else-branch: 4308 | p1_21@912@01 | live]
(push) ; 42
; [then-branch: 4308 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 42
(push) ; 42
; [else-branch: 4308 | p1_21@912@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4309 | p1_21@912@01 && p2_21@913@01 | dead]
; [else-branch: 4309 | !(p1_21@912@01 && p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 42
; [else-branch: 4309 | !(p1_21@912@01 && p2_21@913@01)]
(assert (not (and p1_21@912@01 p2_21@913@01)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (not (and p1_21@912@01 p2_21@913@01)))
; [eval] p1_21 ==> int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4310 | p1_21@912@01 | live]
; [else-branch: 4310 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4310 | p1_21@912@01]
; [eval] int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] int___eq__(i, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 43
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 43
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 43
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4311 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 4311 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 4311 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p2_21 ==> int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
(push) ; 41
; [then-branch: 4312 | p2_21@913@01 | dead]
; [else-branch: 4312 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4312 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 ==> int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4313 | p1_21@912@01 | live]
; [else-branch: 4313 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4313 | p1_21@912@01]
; [eval] int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4314 | int___lt__(_, int___unbox__(_, i@920@01), 0) | dead]
; [else-branch: 4314 | !(int___lt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 4314 | !(int___lt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [eval] p2_21 ==> int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
(push) ; 41
; [then-branch: 4315 | p2_21@913@01 | dead]
; [else-branch: 4315 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4315 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 ==> int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4316 | p1_21@912@01 | live]
; [else-branch: 4316 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4316 | p1_21@912@01]
; [eval] int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4317 | int___gt__(_, int___unbox__(_, i@920@01), 0) | live]
; [else-branch: 4317 | !(int___gt__(_, int___unbox__(_, i@920@01), 0)) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 4317 | int___gt__(_, int___unbox__(_, i@920@01), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1090@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1090@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1090@01 (__prim__int___box__ $Snap.unit 1)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1090@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1090@01 (__prim__int___box__ $Snap.unit 1))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (issubtype<Bool> (typeof<PyType> Container_value@1090@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1090@01 (__prim__int___box__ $Snap.unit 1)))))
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (=>
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
      (and
        (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
        (issubtype<Bool> (typeof<PyType> Container_value@1090@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1090@01 (__prim__int___box__ $Snap.unit 1))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(push) ; 41
(assert (not (=>
  (and
    p1_21@912@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1090@01 (__prim__int___box__ $Snap.unit 1)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_21@912@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1090@01 (__prim__int___box__ $Snap.unit 1))))
; [eval] p2_21 ==> int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
(push) ; 41
; [then-branch: 4318 | p2_21@913@01 | dead]
; [else-branch: 4318 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4318 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4319 | p1_21@912@01 | live]
; [else-branch: 4319 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4319 | p1_21@912@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 43
; [then-branch: 4320 | False | live]
; [else-branch: 4320 | True | live]
(push) ; 44
; [then-branch: 4320 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 4320 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 45
; [then-branch: 4321 | False | live]
; [else-branch: 4321 | True | live]
(push) ; 46
; [then-branch: 4321 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 4321 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 47
; [then-branch: 4322 | False | live]
; [else-branch: 4322 | True | live]
(push) ; 48
; [then-branch: 4322 | False]
(assert false)
(pop) ; 48
(push) ; 48
; [else-branch: 4322 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p2_21 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 41
; [then-branch: 4323 | p2_21@913@01 | dead]
; [else-branch: 4323 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4323 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 4324 | !(p1_21@912@01) | live]
; [else-branch: 4324 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 4324 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4324 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 4325 | !(p1_21@912@01) | dead]
; [else-branch: 4325 | p1_21@912@01 | live]
(push) ; 37
; [else-branch: 4325 | p1_21@912@01]
(pop) ; 37
(pop) ; 36
(pop) ; 35
; [eval] !(p1_27 && !except1_4)
; [eval] p1_27 && !except1_4
(push) ; 35
; [then-branch: 4326 | !(p1_27@1089@01) | live]
; [else-branch: 4326 | p1_27@1089@01 | live]
(push) ; 36
; [then-branch: 4326 | !(p1_27@1089@01)]
(assert (not p1_27@1089@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4326 | p1_27@1089@01]
; [eval] !except1_4
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 4327 | !(p1_27@1089@01) | dead]
; [else-branch: 4327 | p1_27@1089@01 | live]
(push) ; 35
; [else-branch: 4327 | p1_27@1089@01]
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !p1_27
(push) ; 31
(set-option :timeout 10)
(assert (not p1_27@1089@01))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4328 | !(p1_27@1089@01) | dead]
; [else-branch: 4328 | p1_27@1089@01 | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 4328 | p1_27@1089@01]
(assert p1_27@1089@01)
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 17
; [then-branch: 4329 | !(p1_23@1081@01) | live]
; [else-branch: 4329 | p1_23@1081@01 | live]
(push) ; 18
; [then-branch: 4329 | !(p1_23@1081@01)]
(assert (not p1_23@1081@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4329 | p1_23@1081@01]
; [eval] !except1_4
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 4330 | !(p1_23@1081@01) | dead]
; [else-branch: 4330 | p1_23@1081@01 | live]
(push) ; 17
; [else-branch: 4330 | p1_23@1081@01]
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 15
; [then-branch: 4331 | !(p1_23@1081@01) | live]
; [else-branch: 4331 | p1_23@1081@01 | live]
(push) ; 16
; [then-branch: 4331 | !(p1_23@1081@01)]
(assert (not p1_23@1081@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4331 | p1_23@1081@01]
; [eval] !except1_4
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 4332 | !(p1_23@1081@01) | dead]
; [else-branch: 4332 | p1_23@1081@01 | live]
(push) ; 15
; [else-branch: 4332 | p1_23@1081@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 4213 | !(p1_23@1081@01)]
(assert (not p1_23@1081@01))
(pop) ; 13
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 13
; [then-branch: 4333 | !(p1_23@1081@01) | live]
; [else-branch: 4333 | p1_23@1081@01 | live]
(push) ; 14
; [then-branch: 4333 | !(p1_23@1081@01)]
(assert (not p1_23@1081@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4333 | p1_23@1081@01]
(assert p1_23@1081@01)
; [eval] !except1_4
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not p1_23@1081@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_23@1081@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4334 | !(p1_23@1081@01) | live]
; [else-branch: 4334 | p1_23@1081@01 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 4334 | !(p1_23@1081@01)]
(assert (not p1_23@1081@01))
; [eval] p2_23 && !except2_4
(push) ; 14
; [then-branch: 4335 | !(p2_23@1082@01) | live]
; [else-branch: 4335 | p2_23@1082@01 | live]
(push) ; 15
; [then-branch: 4335 | !(p2_23@1082@01)]
(assert (not p2_23@1082@01))
(pop) ; 15
(push) ; 15
; [else-branch: 4335 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p2_23@1082@01 (not p2_23@1082@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_23@1082@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4336 | p2_23@1082@01 | dead]
; [else-branch: 4336 | !(p2_23@1082@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 4336 | !(p2_23@1082@01)]
(assert (not p2_23@1082@01))
(pop) ; 14
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 14
; [then-branch: 4337 | !(p2_23@1082@01) | live]
; [else-branch: 4337 | p2_23@1082@01 | live]
(push) ; 15
; [then-branch: 4337 | !(p2_23@1082@01)]
(assert (not p2_23@1082@01))
(pop) ; 15
(push) ; 15
; [else-branch: 4337 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not p2_23@1082@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_23@1082@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4338 | !(p2_23@1082@01) | live]
; [else-branch: 4338 | p2_23@1082@01 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 4338 | !(p2_23@1082@01)]
(assert (not p2_23@1082@01))
; [eval] p1_23 && !except1_4
(push) ; 15
; [then-branch: 4339 | !(p1_23@1081@01) | live]
; [else-branch: 4339 | p1_23@1081@01 | live]
(push) ; 16
; [then-branch: 4339 | !(p1_23@1081@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 4339 | p1_23@1081@01]
(assert p1_23@1081@01)
; [eval] !except1_4
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 4340 | p1_23@1081@01 | dead]
; [else-branch: 4340 | !(p1_23@1081@01) | live]
(push) ; 15
; [else-branch: 4340 | !(p1_23@1081@01)]
(pop) ; 15
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 15
; [then-branch: 4341 | !(p1_23@1081@01) | live]
; [else-branch: 4341 | p1_23@1081@01 | live]
(push) ; 16
; [then-branch: 4341 | !(p1_23@1081@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 4341 | p1_23@1081@01]
(assert p1_23@1081@01)
; [eval] !except1_4
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not p1_23@1081@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4342 | !(p1_23@1081@01) | live]
; [else-branch: 4342 | p1_23@1081@01 | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4342 | !(p1_23@1081@01)]
; [eval] p2_23 && !except2_4
(push) ; 16
; [then-branch: 4343 | !(p2_23@1082@01) | live]
; [else-branch: 4343 | p2_23@1082@01 | live]
(push) ; 17
; [then-branch: 4343 | !(p2_23@1082@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 4343 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 4344 | p2_23@1082@01 | dead]
; [else-branch: 4344 | !(p2_23@1082@01) | live]
(push) ; 16
; [else-branch: 4344 | !(p2_23@1082@01)]
(pop) ; 16
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 16
; [then-branch: 4345 | !(p2_23@1082@01) | live]
; [else-branch: 4345 | p2_23@1082@01 | live]
(push) ; 17
; [then-branch: 4345 | !(p2_23@1082@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 4345 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2_23@1082@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4346 | !(p2_23@1082@01) | live]
; [else-branch: 4346 | p2_23@1082@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4346 | !(p2_23@1082@01)]
; [eval] p1_23 && !except1_4
(push) ; 17
; [then-branch: 4347 | !(p1_23@1081@01) | live]
; [else-branch: 4347 | p1_23@1081@01 | live]
(push) ; 18
; [then-branch: 4347 | !(p1_23@1081@01)]
(pop) ; 18
(push) ; 18
; [else-branch: 4347 | p1_23@1081@01]
(assert p1_23@1081@01)
; [eval] !except1_4
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 4348 | p1_23@1081@01 | dead]
; [else-branch: 4348 | !(p1_23@1081@01) | live]
(push) ; 17
; [else-branch: 4348 | !(p1_23@1081@01)]
(pop) ; 17
; [eval] !(p1_23 && !except1_4)
; [eval] p1_23 && !except1_4
(push) ; 17
; [then-branch: 4349 | !(p1_23@1081@01) | live]
; [else-branch: 4349 | p1_23@1081@01 | live]
(push) ; 18
; [then-branch: 4349 | !(p1_23@1081@01)]
(pop) ; 18
(push) ; 18
; [else-branch: 4349 | p1_23@1081@01]
(assert p1_23@1081@01)
; [eval] !except1_4
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p1_23@1081@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4350 | !(p1_23@1081@01) | live]
; [else-branch: 4350 | p1_23@1081@01 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 4350 | !(p1_23@1081@01)]
; [eval] p2_23 && !except2_4
(push) ; 18
; [then-branch: 4351 | !(p2_23@1082@01) | live]
; [else-branch: 4351 | p2_23@1082@01 | live]
(push) ; 19
; [then-branch: 4351 | !(p2_23@1082@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 4351 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 4352 | p2_23@1082@01 | dead]
; [else-branch: 4352 | !(p2_23@1082@01) | live]
(push) ; 18
; [else-branch: 4352 | !(p2_23@1082@01)]
(pop) ; 18
; [eval] !(p2_23 && !except2_4)
; [eval] p2_23 && !except2_4
(push) ; 18
; [then-branch: 4353 | !(p2_23@1082@01) | live]
; [else-branch: 4353 | p2_23@1082@01 | live]
(push) ; 19
; [then-branch: 4353 | !(p2_23@1082@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 4353 | p2_23@1082@01]
(assert p2_23@1082@01)
; [eval] !except2_4
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p2_23@1082@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4354 | !(p2_23@1082@01) | live]
; [else-branch: 4354 | p2_23@1082@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 4354 | !(p2_23@1082@01)]
; [exec]
; p1_24 := p3_9 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_9 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 19
; [then-branch: 4355 | !(p3_9@1083@01) | live]
; [else-branch: 4355 | p3_9@1083@01 | live]
(push) ; 20
; [then-branch: 4355 | !(p3_9@1083@01)]
(assert (not p3_9@1083@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4355 | p3_9@1083@01]
(assert p3_9@1083@01)
; [eval] !except1_4
(push) ; 21
; [then-branch: 4356 | False | live]
; [else-branch: 4356 | True | live]
(push) ; 22
; [then-branch: 4356 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4356 | True]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p3_9@1083@01 (not p3_9@1083@01)))
; [exec]
; p2_24 := p4_9 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_9 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 19
; [then-branch: 4357 | !(p4_9@1084@01) | live]
; [else-branch: 4357 | p4_9@1084@01 | live]
(push) ; 20
; [then-branch: 4357 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4357 | p4_9@1084@01]
(assert p4_9@1084@01)
; [eval] !except2_4
(push) ; 21
; [then-branch: 4358 | False | live]
; [else-branch: 4358 | True | live]
(push) ; 22
; [then-branch: 4358 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4358 | True]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p4_9@1084@01 (not p4_9@1084@01)))
; [exec]
; p3_10 := p3_9 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_9 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 19
; [then-branch: 4359 | !(p3_9@1083@01) | live]
; [else-branch: 4359 | p3_9@1083@01 | live]
(push) ; 20
; [then-branch: 4359 | !(p3_9@1083@01)]
(assert (not p3_9@1083@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4359 | p3_9@1083@01]
(assert p3_9@1083@01)
; [eval] !except1_4
(push) ; 21
; [then-branch: 4360 | False | live]
; [else-branch: 4360 | True | live]
(push) ; 22
; [then-branch: 4360 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4360 | True]
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [exec]
; p4_10 := p4_9 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_9 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 19
; [then-branch: 4361 | !(p4_9@1084@01) | live]
; [else-branch: 4361 | p4_9@1084@01 | live]
(push) ; 20
; [then-branch: 4361 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4361 | p4_9@1084@01]
(assert p4_9@1084@01)
; [eval] !except2_4
(push) ; 21
; [then-branch: 4362 | False | live]
; [else-branch: 4362 | True | live]
(push) ; 22
; [then-branch: 4362 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4362 | True]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [eval] p1_24 && !except1_4
; [then-branch: 4363 | False | dead]
; [else-branch: 4363 | True | live]
(push) ; 19
; [else-branch: 4363 | True]
(pop) ; 19
; [eval] !(p1_24 && !except1_4)
; [eval] p1_24 && !except1_4
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4364 | True | live]
; [else-branch: 4364 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4364 | True]
; [eval] p2_24 && !except2_4
; [then-branch: 4365 | False | dead]
; [else-branch: 4365 | True | live]
(push) ; 20
; [else-branch: 4365 | True]
(pop) ; 20
; [eval] !(p2_24 && !except2_4)
; [eval] p2_24 && !except2_4
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4366 | True | live]
; [else-branch: 4366 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4366 | True]
; [eval] p3_9 && !except1_4
(push) ; 21
; [then-branch: 4367 | !(p3_9@1083@01) | live]
; [else-branch: 4367 | p3_9@1083@01 | live]
(push) ; 22
; [then-branch: 4367 | !(p3_9@1083@01)]
(assert (not p3_9@1083@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4367 | p3_9@1083@01]
(assert p3_9@1083@01)
; [eval] !except1_4
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p3_9@1083@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not p3_9@1083@01))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4368 | p3_9@1083@01 | live]
; [else-branch: 4368 | !(p3_9@1083@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4368 | p3_9@1083@01]
(assert p3_9@1083@01)
; [exec]
; c_5.Container_value := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_value@1091@01 $Ref)
(assert (= Container_value@1091@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] p4_9 && !except2_4
(push) ; 22
; [then-branch: 4369 | !(p4_9@1084@01) | live]
; [else-branch: 4369 | p4_9@1084@01 | live]
(push) ; 23
; [then-branch: 4369 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4369 | p4_9@1084@01]
(assert p4_9@1084@01)
; [eval] !except2_4
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p4_9@1084@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4370 | p4_9@1084@01 | dead]
; [else-branch: 4370 | !(p4_9@1084@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 4370 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
(pop) ; 22
; [eval] !(p4_9 && !except2_4)
; [eval] p4_9 && !except2_4
(push) ; 22
; [then-branch: 4371 | !(p4_9@1084@01) | live]
; [else-branch: 4371 | p4_9@1084@01 | live]
(push) ; 23
; [then-branch: 4371 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4371 | p4_9@1084@01]
(assert p4_9@1084@01)
; [eval] !except2_4
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p4_9@1084@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not p4_9@1084@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4372 | !(p4_9@1084@01) | live]
; [else-branch: 4372 | p4_9@1084@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4372 | !(p4_9@1084@01)]
(assert (not p4_9@1084@01))
; [exec]
; thisexcept1_4 := except1_4 && !bypass1_4
; [eval] except1_4 && !bypass1_4
; [exec]
; thisexcept2_4 := except2_4 && !bypass2_4
; [eval] except2_4 && !bypass2_4
; [exec]
; p1_25 := p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException()))
(push) ; 23
; [then-branch: 4373 | !(p1_21@912@01) | live]
; [else-branch: 4373 | p1_21@912@01 | live]
(push) ; 24
; [then-branch: 4373 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4373 | p1_21@912@01]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [exec]
; p2_25 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException()))
(push) ; 23
; [then-branch: 4374 | !(p2_21@913@01) | live]
; [else-branch: 4374 | p2_21@913@01 | live]
(push) ; 24
; [then-branch: 4374 | !(p2_21@913@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 4374 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 4375 | False | dead]
; [else-branch: 4375 | True | live]
(push) ; 23
; [else-branch: 4375 | True]
(pop) ; 23
; [eval] !p1_25
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4376 | True | live]
; [else-branch: 4376 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4376 | True]
; [then-branch: 4377 | False | dead]
; [else-branch: 4377 | True | live]
(push) ; 24
; [else-branch: 4377 | True]
(pop) ; 24
; [eval] !p2_25
(push) ; 24
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4378 | True | live]
; [else-branch: 4378 | False | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4378 | True]
; [exec]
; p1_26 := p1_25 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_25 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_26 := p2_25 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_25 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_11 := p1_25 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_25 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_11 := p2_25 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_25 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_26 && !except1_4
; [then-branch: 4379 | False | dead]
; [else-branch: 4379 | True | live]
(push) ; 25
; [else-branch: 4379 | True]
(pop) ; 25
; [eval] !(p1_26 && !except1_4)
; [eval] p1_26 && !except1_4
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4380 | True | live]
; [else-branch: 4380 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4380 | True]
; [eval] p2_26 && !except2_4
; [then-branch: 4381 | False | dead]
; [else-branch: 4381 | True | live]
(push) ; 26
; [else-branch: 4381 | True]
(pop) ; 26
; [eval] !(p2_26 && !except2_4)
; [eval] p2_26 && !except2_4
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4382 | True | live]
; [else-branch: 4382 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4382 | True]
; [eval] p1_25 && !except1_4
; [then-branch: 4383 | False | dead]
; [else-branch: 4383 | True | live]
(push) ; 27
; [else-branch: 4383 | True]
(pop) ; 27
; [eval] !(p1_25 && !except1_4)
; [eval] p1_25 && !except1_4
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4384 | True | live]
; [else-branch: 4384 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4384 | True]
; [eval] p2_25 && !except2_4
; [then-branch: 4385 | False | dead]
; [else-branch: 4385 | True | live]
(push) ; 28
; [else-branch: 4385 | True]
(pop) ; 28
; [eval] !(p2_25 && !except2_4)
; [eval] p2_25 && !except2_4
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4386 | True | live]
; [else-branch: 4386 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4386 | True]
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 4387 | !(p1_21@912@01) | live]
; [else-branch: 4387 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 4387 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4387 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4388 | p1_21@912@01 | live]
; [else-branch: 4388 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4388 | p1_21@912@01]
; [exec]
; _err := null
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 4389 | !(p2_21@913@01) | live]
; [else-branch: 4389 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 4389 | !(p2_21@913@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 4389 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 4390 | p2_21@913@01 | dead]
; [else-branch: 4390 | !(p2_21@913@01) | live]
(push) ; 30
; [else-branch: 4390 | !(p2_21@913@01)]
(pop) ; 30
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 30
; [then-branch: 4391 | !(p2_21@913@01) | live]
; [else-branch: 4391 | p2_21@913@01 | live]
(push) ; 31
; [then-branch: 4391 | !(p2_21@913@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 4391 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4392 | !(p2_21@913@01) | live]
; [else-branch: 4392 | p2_21@913@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4392 | !(p2_21@913@01)]
; [exec]
; p1_27 := p1_21 &&
;   (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
; [eval] p1_21 && (thisexcept1_4 && issubtype(typeof(_err), MyException2()))
(push) ; 31
; [then-branch: 4393 | !(p1_21@912@01) | live]
; [else-branch: 4393 | p1_21@912@01 | live]
(push) ; 32
; [then-branch: 4393 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4393 | p1_21@912@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [exec]
; p2_27 := p2_21 &&
;   (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
; [eval] p2_21 && (thisexcept2_4 && issubtype(typeof(_err_5), MyException2()))
(push) ; 31
; [then-branch: 4394 | !(p2_21@913@01) | live]
; [else-branch: 4394 | p2_21@913@01 | live]
(push) ; 32
; [then-branch: 4394 | !(p2_21@913@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 4394 | p2_21@913@01]
(assert p2_21@913@01)
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 4395 | False | dead]
; [else-branch: 4395 | True | live]
(push) ; 31
; [else-branch: 4395 | True]
(pop) ; 31
; [eval] !p1_27
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4396 | True | live]
; [else-branch: 4396 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4396 | True]
; [then-branch: 4397 | False | dead]
; [else-branch: 4397 | True | live]
(push) ; 32
; [else-branch: 4397 | True]
(pop) ; 32
; [eval] !p2_27
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4398 | True | live]
; [else-branch: 4398 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4398 | True]
; [exec]
; p1_28 := p1_27 &&
;   (!except1_4 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_27 && (!except1_4 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [exec]
; p2_28 := p2_27 &&
;   (!except2_4 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_27 && (!except2_4 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_12 := p1_27 &&
;   (!except1_4 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_27 && (!except1_4 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [exec]
; p4_12 := p2_27 &&
;   (!except2_4 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_27 && (!except2_4 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_28 && !except1_4
; [then-branch: 4399 | False | dead]
; [else-branch: 4399 | True | live]
(push) ; 33
; [else-branch: 4399 | True]
(pop) ; 33
; [eval] !(p1_28 && !except1_4)
; [eval] p1_28 && !except1_4
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4400 | True | live]
; [else-branch: 4400 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4400 | True]
; [eval] p2_28 && !except2_4
; [then-branch: 4401 | False | dead]
; [else-branch: 4401 | True | live]
(push) ; 34
; [else-branch: 4401 | True]
(pop) ; 34
; [eval] !(p2_28 && !except2_4)
; [eval] p2_28 && !except2_4
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4402 | True | live]
; [else-branch: 4402 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4402 | True]
; [eval] p1_27 && !except1_4
; [then-branch: 4403 | False | dead]
; [else-branch: 4403 | True | live]
(push) ; 35
; [else-branch: 4403 | True]
(pop) ; 35
; [eval] !(p1_27 && !except1_4)
; [eval] p1_27 && !except1_4
(push) ; 35
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4404 | True | live]
; [else-branch: 4404 | False | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4404 | True]
; [eval] p2_27 && !except2_4
; [then-branch: 4405 | False | dead]
; [else-branch: 4405 | True | live]
(push) ; 36
; [else-branch: 4405 | True]
(pop) ; 36
; [eval] !(p2_27 && !except2_4)
; [eval] p2_27 && !except2_4
(push) ; 36
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4406 | True | live]
; [else-branch: 4406 | False | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 4406 | True]
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 4407 | !(p1_21@912@01) | live]
; [else-branch: 4407 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 4407 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4407 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4408 | p1_21@912@01 | live]
; [else-branch: 4408 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4408 | p1_21@912@01]
; [exec]
; _err := null
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 4409 | !(p2_21@913@01) | live]
; [else-branch: 4409 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 4409 | !(p2_21@913@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 4409 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 4410 | p2_21@913@01 | dead]
; [else-branch: 4410 | !(p2_21@913@01) | live]
(push) ; 38
; [else-branch: 4410 | !(p2_21@913@01)]
(pop) ; 38
; [eval] !(p2_21 && !except2_4)
; [eval] p2_21 && !except2_4
(push) ; 38
; [then-branch: 4411 | !(p2_21@913@01) | live]
; [else-branch: 4411 | p2_21@913@01 | live]
(push) ; 39
; [then-branch: 4411 | !(p2_21@913@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 4411 | p2_21@913@01]
(assert p2_21@913@01)
; [eval] !except2_4
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4412 | !(p2_21@913@01) | live]
; [else-branch: 4412 | p2_21@913@01 | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 4412 | !(p2_21@913@01)]
; [exec]
; assert (p1_21 ==> !except1_4) && (p2_21 ==> !except2_4)
; [eval] p1_21 ==> !except1_4
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4413 | p1_21@912@01 | live]
; [else-branch: 4413 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4413 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> !except2_4
(push) ; 39
; [then-branch: 4414 | p2_21@913@01 | dead]
; [else-branch: 4414 | !(p2_21@913@01) | live]
(push) ; 40
; [else-branch: 4414 | !(p2_21@913@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4415 | p1_21@912@01 | live]
; [else-branch: 4415 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4415 | p1_21@912@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
; [then-branch: 4416 | p2_21@913@01 | dead]
; [else-branch: 4416 | !(p2_21@913@01) | live]
(push) ; 40
; [else-branch: 4416 | !(p2_21@913@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4417 | p1_21@912@01 | live]
; [else-branch: 4417 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4417 | p1_21@912@01]
; [then-branch: 4418 | p2_21@913@01 | dead]
; [else-branch: 4418 | !(p2_21@913@01) | live]
(push) ; 40
; [else-branch: 4418 | !(p2_21@913@01)]
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4419 | p1_21@912@01 | live]
; [else-branch: 4419 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4419 | p1_21@912@01]
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 42
(pop) ; 41
; Joined path conditions
(push) ; 41
(assert (not (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@1091@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@912@01
  (issubtype<Bool> (typeof<PyType> Container_value@1091@01) (as int<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 41
; [then-branch: 4420 | p2_21@913@01 | dead]
; [else-branch: 4420 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4420 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 && p2_21 ==> c_1.Container_value == c_1_0.Container_valuep
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 4421 | !(p1_21@912@01) | live]
; [else-branch: 4421 | p1_21@912@01 | live]
(push) ; 42
; [then-branch: 4421 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 42
(push) ; 42
; [else-branch: 4421 | p1_21@912@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4422 | p1_21@912@01 && p2_21@913@01 | dead]
; [else-branch: 4422 | !(p1_21@912@01 && p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 42
; [else-branch: 4422 | !(p1_21@912@01 && p2_21@913@01)]
(assert (not (and p1_21@912@01 p2_21@913@01)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (not (and p1_21@912@01 p2_21@913@01)))
; [eval] p1_21 ==> int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4423 | p1_21@912@01 | live]
; [else-branch: 4423 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4423 | p1_21@912@01]
; [eval] int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] int___eq__(i, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 43
(pop) ; 43
; Joined path conditions
(push) ; 43
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4424 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 4424 | !(int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 4424 | int___eq__((_, _), i@920@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1091@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1091@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1091@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1091@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1091@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (issubtype<Bool> (typeof<PyType> Container_value@1091@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1091@01 (__prim__int___box__ $Snap.unit 0)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0))
        (issubtype<Bool> (typeof<PyType> Container_value@1091@01) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1091@01 (__prim__int___box__ $Snap.unit 0))))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 41
(assert (not (=>
  (and
    p1_21@912@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1091@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_21@912@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i@920@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1091@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_21 ==> int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
(push) ; 41
; [then-branch: 4425 | p2_21@913@01 | dead]
; [else-branch: 4425 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4425 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 ==> int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4426 | p1_21@912@01 | live]
; [else-branch: 4426 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4426 | p1_21@912@01]
; [eval] int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4427 | int___lt__(_, int___unbox__(_, i@920@01), 0) | dead]
; [else-branch: 4427 | !(int___lt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 4427 | !(int___lt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [eval] p2_21 ==> int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
(push) ; 41
; [then-branch: 4428 | p2_21@913@01 | dead]
; [else-branch: 4428 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4428 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 ==> int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4429 | p1_21@912@01 | live]
; [else-branch: 4429 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4429 | p1_21@912@01]
; [eval] int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i), 0)
; [eval] int___unbox__(i)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@920@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@920@01)))
(push) ; 43
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(pop) ; 43
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))
(push) ; 43
(push) ; 44
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4430 | int___gt__(_, int___unbox__(_, i@920@01), 0) | dead]
; [else-branch: 4430 | !(int___gt__(_, int___unbox__(_, i@920@01), 0)) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 4430 | !(int___gt__(_, int___unbox__(_, i@920@01), 0))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  p1_21@912@01
  (and
    (issubtype<Bool> (typeof<PyType> i@920@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i@920@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)
    (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@920@01) 0)))))
; [eval] p2_21 ==> int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
(push) ; 41
; [then-branch: 4431 | p2_21@913@01 | dead]
; [else-branch: 4431 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4431 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p1_21 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1_21@912@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4432 | p1_21@912@01 | live]
; [else-branch: 4432 | !(p1_21@912@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4432 | p1_21@912@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 43
; [then-branch: 4433 | False | live]
; [else-branch: 4433 | True | live]
(push) ; 44
; [then-branch: 4433 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 4433 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 45
; [then-branch: 4434 | False | live]
; [else-branch: 4434 | True | live]
(push) ; 46
; [then-branch: 4434 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 4434 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 47
; [then-branch: 4435 | False | live]
; [else-branch: 4435 | True | live]
(push) ; 48
; [then-branch: 4435 | False]
(assert false)
(pop) ; 48
(push) ; 48
; [else-branch: 4435 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p2_21 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 41
; [then-branch: 4436 | p2_21@913@01 | dead]
; [else-branch: 4436 | !(p2_21@913@01) | live]
(push) ; 42
; [else-branch: 4436 | !(p2_21@913@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 37
; [then-branch: 4437 | !(p1_21@912@01) | live]
; [else-branch: 4437 | p1_21@912@01 | live]
(push) ; 38
; [then-branch: 4437 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4437 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 4438 | !(p1_21@912@01) | dead]
; [else-branch: 4438 | p1_21@912@01 | live]
(push) ; 37
; [else-branch: 4438 | p1_21@912@01]
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 29
; [then-branch: 4439 | !(p1_21@912@01) | live]
; [else-branch: 4439 | p1_21@912@01 | live]
(push) ; 30
; [then-branch: 4439 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4439 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 4440 | !(p1_21@912@01) | dead]
; [else-branch: 4440 | p1_21@912@01 | live]
(push) ; 29
; [else-branch: 4440 | p1_21@912@01]
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p3_9 && !except1_4)
; [eval] p3_9 && !except1_4
(push) ; 21
; [then-branch: 4441 | !(p3_9@1083@01) | live]
; [else-branch: 4441 | p3_9@1083@01 | live]
(push) ; 22
; [then-branch: 4441 | !(p3_9@1083@01)]
(assert (not p3_9@1083@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4441 | p3_9@1083@01]
(assert p3_9@1083@01)
; [eval] !except1_4
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not p3_9@1083@01))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4442 | !(p3_9@1083@01) | dead]
; [else-branch: 4442 | p3_9@1083@01 | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 4442 | p3_9@1083@01]
(assert p3_9@1083@01)
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 4334 | p1_23@1081@01]
(assert p1_23@1081@01)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 4183 | p1_22@1068@01]
(assert p1_22@1068@01)
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 5
; [then-branch: 4443 | !(p1_21@912@01) | live]
; [else-branch: 4443 | p1_21@912@01 | live]
(push) ; 6
; [then-branch: 4443 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(pop) ; 6
(push) ; 6
; [else-branch: 4443 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 4444 | !(p1_21@912@01) | dead]
; [else-branch: 4444 | p1_21@912@01 | live]
(push) ; 5
; [else-branch: 4444 | p1_21@912@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 3514 | !(p1_21@912@01)]
(assert (not p1_21@912@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@913@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4445 | p2_21@913@01 | live]
; [else-branch: 4445 | !(p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4445 | p2_21@913@01]
(assert p2_21@913@01)
(assert (not (= c_1_0@923@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 4
; [then-branch: 4446 | p1_21@912@01 | dead]
; [else-branch: 4446 | !(p1_21@912@01) | live]
(push) ; 5
; [else-branch: 4446 | !(p1_21@912@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4447 | p2_21@913@01 | live]
; [else-branch: 4447 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4447 | p2_21@913@01]
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> true
(push) ; 4
; [then-branch: 4448 | p1_21@912@01 | dead]
; [else-branch: 4448 | !(p1_21@912@01) | live]
(push) ; 5
; [else-branch: 4448 | !(p1_21@912@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4449 | p2_21@913@01 | live]
; [else-branch: 4449 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4449 | p2_21@913@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@1092@01 $Snap)
(assert (= $t@1092@01 ($Snap.combine ($Snap.first $t@1092@01) ($Snap.second $t@1092@01))))
(assert (= ($Snap.first $t@1092@01) $Snap.unit))
; [eval] p1_21 ==> (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_162) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162)
(push) ; 5
; [then-branch: 4450 | p1_21@912@01 | dead]
; [else-branch: 4450 | !(p1_21@912@01) | live]
(push) ; 6
; [else-branch: 4450 | !(p1_21@912@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@1092@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1092@01))
    ($Snap.second ($Snap.second $t@1092@01)))))
(assert (= ($Snap.first ($Snap.second $t@1092@01)) $Snap.unit))
; [eval] p2_21 ==> (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_162_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_162_0) && _residue_162_0 <= _current_wait_level_162_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4451 | p2_21@913@01 | live]
; [else-branch: 4451 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 4451 | p2_21@913@01]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_162_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_162_0) && _residue_162_0 <= _current_wait_level_162_0)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_162_0)
(push) ; 7
; [then-branch: 4452 | False | live]
; [else-branch: 4452 | True | live]
(push) ; 8
; [then-branch: 4452 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 4452 | True]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_162_0)
(push) ; 9
; [then-branch: 4453 | False | live]
; [else-branch: 4453 | True | live]
(push) ; 10
; [then-branch: 4453 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4453 | True]
; [eval] _residue_162_0 <= _current_wait_level_162_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_21@913@01 (<= _residue_162_0@919@01 _current_wait_level_162_0@925@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1092@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1092@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))
; [then-branch: 4454 | p1_21@912@01 | dead]
; [else-branch: 4454 | !(p1_21@912@01) | live]
(push) ; 5
; [else-branch: 4454 | !(p1_21@912@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1092@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4455 | p2_21@913@01 | live]
; [else-branch: 4455 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 4455 | p2_21@913@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 7
; [then-branch: 4456 | p1_21@912@01 | dead]
; [else-branch: 4456 | !(p1_21@912@01) | live]
(push) ; 8
; [else-branch: 4456 | !(p1_21@912@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4457 | p2_21@913@01 | live]
; [else-branch: 4457 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4457 | p2_21@913@01]
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_21@913@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))
  $Snap.unit))
; [eval] p1_21 && p2_21 ==> c_1.Container_value == c_1_0.Container_valuep
; [eval] p1_21 && p2_21
(push) ; 7
; [then-branch: 4458 | !(p1_21@912@01) | live]
; [else-branch: 4458 | p1_21@912@01 | live]
(push) ; 8
; [then-branch: 4458 | !(p1_21@912@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 4458 | p1_21@912@01]
(assert p1_21@912@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4459 | p1_21@912@01 && p2_21@913@01 | dead]
; [else-branch: 4459 | !(p1_21@912@01 && p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 4459 | !(p1_21@912@01 && p2_21@913@01)]
(assert (not (and p1_21@912@01 p2_21@913@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_21@912@01 p2_21@913@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
(push) ; 7
; [then-branch: 4460 | p1_21@912@01 | dead]
; [else-branch: 4460 | !(p1_21@912@01) | live]
(push) ; 8
; [else-branch: 4460 | !(p1_21@912@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4461 | p2_21@913@01 | live]
; [else-branch: 4461 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4461 | p2_21@913@01]
; [eval] int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
; [eval] int___eq__(i_7, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4462 | int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 4462 | !(int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4462 | int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(push) ; 10
; [else-branch: 4462 | !(int___eq__((_, _), i_7@921@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit 0)))))
; Joined path conditions
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit 0))))
    (or
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0))))))
(assert (=>
  (and
    p2_21@913@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_7@921@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
(push) ; 7
; [then-branch: 4463 | p1_21@912@01 | dead]
; [else-branch: 4463 | !(p1_21@912@01) | live]
(push) ; 8
; [else-branch: 4463 | !(p1_21@912@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4464 | p2_21@913@01 | live]
; [else-branch: 4464 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4464 | p2_21@913@01]
; [eval] int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
; [eval] int___lt__(int___unbox__(i_7), 0)
; [eval] int___unbox__(i_7)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 9
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 9
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4465 | int___lt__(_, int___unbox__(_, i_7@921@01), 0) | live]
; [else-branch: 4465 | !(int___lt__(_, int___unbox__(_, i_7@921@01), 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4465 | int___lt__(_, int___unbox__(_, i_7@921@01), 0)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 4465 | !(int___lt__(_, int___unbox__(_, i_7@921@01), 0))]
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (__prim__int___box__%precondition $Snap.unit (- 0 1))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit (- 0 1))))))
; Joined path conditions
(assert (or
  (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
        (__prim__int___box__%precondition $Snap.unit (- 0 1))
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
    (or
      (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))))
(assert (=>
  (and
    p2_21@913@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
(push) ; 7
; [then-branch: 4466 | p1_21@912@01 | dead]
; [else-branch: 4466 | !(p1_21@912@01) | live]
(push) ; 8
; [else-branch: 4466 | !(p1_21@912@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4467 | p2_21@913@01 | live]
; [else-branch: 4467 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4467 | p2_21@913@01]
; [eval] int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
; [eval] int___gt__(int___unbox__(i_7), 0)
; [eval] int___unbox__(i_7)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_7@921@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_7@921@01)))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4468 | int___gt__(_, int___unbox__(_, i_7@921@01), 0) | live]
; [else-branch: 4468 | !(int___gt__(_, int___unbox__(_, i_7@921@01), 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4468 | int___gt__(_, int___unbox__(_, i_7@921@01), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 10
(push) ; 10
; [else-branch: 4468 | !(int___gt__(_, int___unbox__(_, i_7@921@01), 0))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit 1)))))
; Joined path conditions
(assert (or
  (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_21@913@01
  (and
    (issubtype<Bool> (typeof<PyType> i_7@921@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_7@921@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
    (=>
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
      (and
        (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)
        (__prim__int___box__%precondition $Snap.unit 1)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit 1))))
    (or
      (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0)))))
(assert (=>
  (and
    p2_21@913@01
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_7@921@01) 0))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> true
(push) ; 7
; [then-branch: 4469 | p1_21@912@01 | dead]
; [else-branch: 4469 | !(p1_21@912@01) | live]
(push) ; 8
; [else-branch: 4469 | !(p1_21@912@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1092@01))))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@913@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4470 | p2_21@913@01 | live]
; [else-branch: 4470 | !(p2_21@913@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4470 | p2_21@913@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_4: Bool
(declare-const except1_4@1093@01 Bool)
; [exec]
; var except2_4: Bool
(declare-const except2_4@1094@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@1095@01 $Ref)
; [exec]
; var _err_5: Ref
(declare-const _err_5@1096@01 $Ref)
; [exec]
; var error_4: Ref
(declare-const error_4@1097@01 $Ref)
; [exec]
; var error_4_0: Ref
(declare-const error_4_0@1098@01 $Ref)
; [exec]
; var try_finally_12: Int
(declare-const try_finally_12@1099@01 Int)
; [exec]
; var try_finally_12_0: Int
(declare-const try_finally_12_0@1100@01 Int)
; [exec]
; var i_5: Ref
(declare-const i_5@1101@01 $Ref)
; [exec]
; var i_5_0: Ref
(declare-const i_5_0@1102@01 $Ref)
; [exec]
; var c_5: Ref
(declare-const c_5@1103@01 $Ref)
; [exec]
; var c_5_0: Ref
(declare-const c_5_0@1104@01 $Ref)
; [exec]
; var MyException_res_6: Ref
(declare-const MyException_res_6@1105@01 $Ref)
; [exec]
; var MyException_res_6_0: Ref
(declare-const MyException_res_6_0@1106@01 $Ref)
; [exec]
; var MyException2_res: Ref
(declare-const MyException2_res@1107@01 $Ref)
; [exec]
; var MyException2_res_1: Ref
(declare-const MyException2_res_1@1108@01 $Ref)
; [exec]
; var _cwl_162: Perm
(declare-const _cwl_162@1109@01 $Perm)
; [exec]
; var _cwl_162_0: Perm
(declare-const _cwl_162_0@1110@01 $Perm)
; [exec]
; var _method_measures_162: Seq[Measure$]
(declare-const _method_measures_162@1111@01 Seq<Measure$>)
; [exec]
; var _method_measures_162_0: Seq[Measure$]
(declare-const _method_measures_162_0@1112@01 Seq<Measure$>)
; [exec]
; var bypass1_4: Bool
(declare-const bypass1_4@1113@01 Bool)
; [exec]
; var bypass2_4: Bool
(declare-const bypass2_4@1114@01 Bool)
; [exec]
; var thisexcept1_4: Bool
(declare-const thisexcept1_4@1115@01 Bool)
; [exec]
; var thisexcept2_4: Bool
(declare-const thisexcept2_4@1116@01 Bool)
; [exec]
; var p1_25: Bool
(declare-const p1_25@1117@01 Bool)
; [exec]
; var p2_25: Bool
(declare-const p2_25@1118@01 Bool)
; [exec]
; var p1_27: Bool
(declare-const p1_27@1119@01 Bool)
; [exec]
; var p2_27: Bool
(declare-const p2_27@1120@01 Bool)
; [exec]
; var p1_22: Bool
(declare-const p1_22@1121@01 Bool)
; [exec]
; var p2_22: Bool
(declare-const p2_22@1122@01 Bool)
; [exec]
; var p3_8: Bool
(declare-const p3_8@1123@01 Bool)
; [exec]
; var p4_8: Bool
(declare-const p4_8@1124@01 Bool)
; [exec]
; var tmp_6: Ref
(declare-const tmp_6@1125@01 $Ref)
; [exec]
; var p1_23: Bool
(declare-const p1_23@1126@01 Bool)
; [exec]
; var p2_23: Bool
(declare-const p2_23@1127@01 Bool)
; [exec]
; var p3_9: Bool
(declare-const p3_9@1128@01 Bool)
; [exec]
; var p4_9: Bool
(declare-const p4_9@1129@01 Bool)
; [exec]
; var tmp_7: Ref
(declare-const tmp_7@1130@01 $Ref)
; [exec]
; var p1_24: Bool
(declare-const p1_24@1131@01 Bool)
; [exec]
; var p2_24: Bool
(declare-const p2_24@1132@01 Bool)
; [exec]
; var p3_10: Bool
(declare-const p3_10@1133@01 Bool)
; [exec]
; var p4_10: Bool
(declare-const p4_10@1134@01 Bool)
; [exec]
; var p1_26: Bool
(declare-const p1_26@1135@01 Bool)
; [exec]
; var p2_26: Bool
(declare-const p2_26@1136@01 Bool)
; [exec]
; var p3_11: Bool
(declare-const p3_11@1137@01 Bool)
; [exec]
; var p4_11: Bool
(declare-const p4_11@1138@01 Bool)
; [exec]
; var p1_28: Bool
(declare-const p1_28@1139@01 Bool)
; [exec]
; var p2_28: Bool
(declare-const p2_28@1140@01 Bool)
; [exec]
; var p3_12: Bool
(declare-const p3_12@1141@01 Bool)
; [exec]
; var p4_12: Bool
(declare-const p4_12@1142@01 Bool)
; [exec]
; inhale p1_21
(declare-const $t@1143@01 $Snap)
(assert (= $t@1143@01 $Snap.unit))
(assert p1_21@912@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; except1_4 := false
; [exec]
; except2_4 := false
; [eval] p1_21 && !except1_4
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4471 | !(p1_21@912@01) | live]
; [else-branch: 4471 | p1_21@912@01 | live]
(push) ; 6
; [then-branch: 4471 | !(p1_21@912@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 4471 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 4472 | p1_21@912@01 | dead]
; [else-branch: 4472 | !(p1_21@912@01) | live]
(push) ; 5
; [else-branch: 4472 | !(p1_21@912@01)]
(pop) ; 5
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 5
; [then-branch: 4473 | !(p1_21@912@01) | live]
; [else-branch: 4473 | p1_21@912@01 | live]
(push) ; 6
; [then-branch: 4473 | !(p1_21@912@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 4473 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 4474 | !(p1_21@912@01) | dead]
; [else-branch: 4474 | p1_21@912@01 | live]
(push) ; 5
; [else-branch: 4474 | p1_21@912@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 4445 | !(p2_21@913@01)]
(assert (not p2_21@913@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 4
; [then-branch: 4475 | p1_21@912@01 | dead]
; [else-branch: 4475 | !(p1_21@912@01) | live]
(push) ; 5
; [else-branch: 4475 | !(p1_21@912@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 4
; [then-branch: 4476 | p2_21@913@01 | dead]
; [else-branch: 4476 | !(p2_21@913@01) | live]
(push) ; 5
; [else-branch: 4476 | !(p2_21@913@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> true
(push) ; 4
; [then-branch: 4477 | p1_21@912@01 | dead]
; [else-branch: 4477 | !(p1_21@912@01) | live]
(push) ; 5
; [else-branch: 4477 | !(p1_21@912@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> true
(push) ; 4
; [then-branch: 4478 | p2_21@913@01 | dead]
; [else-branch: 4478 | !(p2_21@913@01) | live]
(push) ; 5
; [else-branch: 4478 | !(p2_21@913@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@1144@01 $Snap)
(assert (= $t@1144@01 ($Snap.combine ($Snap.first $t@1144@01) ($Snap.second $t@1144@01))))
(assert (= ($Snap.first $t@1144@01) $Snap.unit))
; [eval] p1_21 ==> (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_162) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162)
(push) ; 5
; [then-branch: 4479 | p1_21@912@01 | dead]
; [else-branch: 4479 | !(p1_21@912@01) | live]
(push) ; 6
; [else-branch: 4479 | !(p1_21@912@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@1144@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1144@01))
    ($Snap.second ($Snap.second $t@1144@01)))))
(assert (= ($Snap.first ($Snap.second $t@1144@01)) $Snap.unit))
; [eval] p2_21 ==> (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_162_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_162_0) && _residue_162_0 <= _current_wait_level_162_0)
(push) ; 5
; [then-branch: 4480 | p2_21@913@01 | dead]
; [else-branch: 4480 | !(p2_21@913@01) | live]
(push) ; 6
; [else-branch: 4480 | !(p2_21@913@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@1144@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1144@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))
; [then-branch: 4481 | p1_21@912@01 | dead]
; [else-branch: 4481 | !(p1_21@912@01) | live]
(push) ; 5
; [else-branch: 4481 | !(p1_21@912@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1144@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))
; [then-branch: 4482 | p2_21@913@01 | dead]
; [else-branch: 4482 | !(p2_21@913@01) | live]
(push) ; 6
; [else-branch: 4482 | !(p2_21@913@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 7
; [then-branch: 4483 | p1_21@912@01 | dead]
; [else-branch: 4483 | !(p1_21@912@01) | live]
(push) ; 8
; [else-branch: 4483 | !(p1_21@912@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 7
; [then-branch: 4484 | p2_21@913@01 | dead]
; [else-branch: 4484 | !(p2_21@913@01) | live]
(push) ; 8
; [else-branch: 4484 | !(p2_21@913@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))
  $Snap.unit))
; [eval] p1_21 && p2_21 ==> c_1.Container_value == c_1_0.Container_valuep
; [eval] p1_21 && p2_21
(push) ; 7
; [then-branch: 4485 | !(p1_21@912@01) | live]
; [else-branch: 4485 | p1_21@912@01 | live]
(push) ; 8
; [then-branch: 4485 | !(p1_21@912@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 4485 | p1_21@912@01]
(assert p1_21@912@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_21@912@01 p2_21@913@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4486 | p1_21@912@01 && p2_21@913@01 | dead]
; [else-branch: 4486 | !(p1_21@912@01 && p2_21@913@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 4486 | !(p1_21@912@01 && p2_21@913@01)]
(assert (not (and p1_21@912@01 p2_21@913@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_21@912@01 p2_21@913@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___eq__(i, __prim__int___box__(0)) ==> int___eq__(c_1.Container_value, __prim__int___box__(0))
(push) ; 7
; [then-branch: 4487 | p1_21@912@01 | dead]
; [else-branch: 4487 | !(p1_21@912@01) | live]
(push) ; 8
; [else-branch: 4487 | !(p1_21@912@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___eq__(i_7, __prim__int___box__(0)) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(0))
(push) ; 7
; [then-branch: 4488 | p2_21@913@01 | dead]
; [else-branch: 4488 | !(p2_21@913@01) | live]
(push) ; 8
; [else-branch: 4488 | !(p2_21@913@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___lt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(-1))
(push) ; 7
; [then-branch: 4489 | p1_21@912@01 | dead]
; [else-branch: 4489 | !(p1_21@912@01) | live]
(push) ; 8
; [else-branch: 4489 | !(p1_21@912@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___lt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(-1))
(push) ; 7
; [then-branch: 4490 | p2_21@913@01 | dead]
; [else-branch: 4490 | !(p2_21@913@01) | live]
(push) ; 8
; [else-branch: 4490 | !(p2_21@913@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> int___gt__(int___unbox__(i), 0) ==> int___eq__(c_1.Container_value, __prim__int___box__(1))
(push) ; 7
; [then-branch: 4491 | p1_21@912@01 | dead]
; [else-branch: 4491 | !(p1_21@912@01) | live]
(push) ; 8
; [else-branch: 4491 | !(p1_21@912@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> int___gt__(int___unbox__(i_7), 0) ==> int___eq__(c_1_0.Container_valuep, __prim__int___box__(1))
(push) ; 7
; [then-branch: 4492 | p2_21@913@01 | dead]
; [else-branch: 4492 | !(p2_21@913@01) | live]
(push) ; 8
; [else-branch: 4492 | !(p2_21@913@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))))))
  $Snap.unit))
; [eval] p1_21 ==> true
(push) ; 7
; [then-branch: 4493 | p1_21@912@01 | dead]
; [else-branch: 4493 | !(p1_21@912@01) | live]
(push) ; 8
; [else-branch: 4493 | !(p1_21@912@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1144@01))))))))))))))
  $Snap.unit))
; [eval] p2_21 ==> true
(push) ; 7
; [then-branch: 4494 | p2_21@913@01 | dead]
; [else-branch: 4494 | !(p2_21@913@01) | live]
(push) ; 8
; [else-branch: 4494 | !(p2_21@913@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_4: Bool
(declare-const except1_4@1145@01 Bool)
; [exec]
; var except2_4: Bool
(declare-const except2_4@1146@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@1147@01 $Ref)
; [exec]
; var _err_5: Ref
(declare-const _err_5@1148@01 $Ref)
; [exec]
; var error_4: Ref
(declare-const error_4@1149@01 $Ref)
; [exec]
; var error_4_0: Ref
(declare-const error_4_0@1150@01 $Ref)
; [exec]
; var try_finally_12: Int
(declare-const try_finally_12@1151@01 Int)
; [exec]
; var try_finally_12_0: Int
(declare-const try_finally_12_0@1152@01 Int)
; [exec]
; var i_5: Ref
(declare-const i_5@1153@01 $Ref)
; [exec]
; var i_5_0: Ref
(declare-const i_5_0@1154@01 $Ref)
; [exec]
; var c_5: Ref
(declare-const c_5@1155@01 $Ref)
; [exec]
; var c_5_0: Ref
(declare-const c_5_0@1156@01 $Ref)
; [exec]
; var MyException_res_6: Ref
(declare-const MyException_res_6@1157@01 $Ref)
; [exec]
; var MyException_res_6_0: Ref
(declare-const MyException_res_6_0@1158@01 $Ref)
; [exec]
; var MyException2_res: Ref
(declare-const MyException2_res@1159@01 $Ref)
; [exec]
; var MyException2_res_1: Ref
(declare-const MyException2_res_1@1160@01 $Ref)
; [exec]
; var _cwl_162: Perm
(declare-const _cwl_162@1161@01 $Perm)
; [exec]
; var _cwl_162_0: Perm
(declare-const _cwl_162_0@1162@01 $Perm)
; [exec]
; var _method_measures_162: Seq[Measure$]
(declare-const _method_measures_162@1163@01 Seq<Measure$>)
; [exec]
; var _method_measures_162_0: Seq[Measure$]
(declare-const _method_measures_162_0@1164@01 Seq<Measure$>)
; [exec]
; var bypass1_4: Bool
(declare-const bypass1_4@1165@01 Bool)
; [exec]
; var bypass2_4: Bool
(declare-const bypass2_4@1166@01 Bool)
; [exec]
; var thisexcept1_4: Bool
(declare-const thisexcept1_4@1167@01 Bool)
; [exec]
; var thisexcept2_4: Bool
(declare-const thisexcept2_4@1168@01 Bool)
; [exec]
; var p1_25: Bool
(declare-const p1_25@1169@01 Bool)
; [exec]
; var p2_25: Bool
(declare-const p2_25@1170@01 Bool)
; [exec]
; var p1_27: Bool
(declare-const p1_27@1171@01 Bool)
; [exec]
; var p2_27: Bool
(declare-const p2_27@1172@01 Bool)
; [exec]
; var p1_22: Bool
(declare-const p1_22@1173@01 Bool)
; [exec]
; var p2_22: Bool
(declare-const p2_22@1174@01 Bool)
; [exec]
; var p3_8: Bool
(declare-const p3_8@1175@01 Bool)
; [exec]
; var p4_8: Bool
(declare-const p4_8@1176@01 Bool)
; [exec]
; var tmp_6: Ref
(declare-const tmp_6@1177@01 $Ref)
; [exec]
; var p1_23: Bool
(declare-const p1_23@1178@01 Bool)
; [exec]
; var p2_23: Bool
(declare-const p2_23@1179@01 Bool)
; [exec]
; var p3_9: Bool
(declare-const p3_9@1180@01 Bool)
; [exec]
; var p4_9: Bool
(declare-const p4_9@1181@01 Bool)
; [exec]
; var tmp_7: Ref
(declare-const tmp_7@1182@01 $Ref)
; [exec]
; var p1_24: Bool
(declare-const p1_24@1183@01 Bool)
; [exec]
; var p2_24: Bool
(declare-const p2_24@1184@01 Bool)
; [exec]
; var p3_10: Bool
(declare-const p3_10@1185@01 Bool)
; [exec]
; var p4_10: Bool
(declare-const p4_10@1186@01 Bool)
; [exec]
; var p1_26: Bool
(declare-const p1_26@1187@01 Bool)
; [exec]
; var p2_26: Bool
(declare-const p2_26@1188@01 Bool)
; [exec]
; var p3_11: Bool
(declare-const p3_11@1189@01 Bool)
; [exec]
; var p4_11: Bool
(declare-const p4_11@1190@01 Bool)
; [exec]
; var p1_28: Bool
(declare-const p1_28@1191@01 Bool)
; [exec]
; var p2_28: Bool
(declare-const p2_28@1192@01 Bool)
; [exec]
; var p3_12: Bool
(declare-const p3_12@1193@01 Bool)
; [exec]
; var p4_12: Bool
(declare-const p4_12@1194@01 Bool)
; [exec]
; inhale p1_21
(declare-const $t@1195@01 $Snap)
(assert (= $t@1195@01 $Snap.unit))
(assert p1_21@912@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; except1_4 := false
; [exec]
; except2_4 := false
; [eval] p1_21 && !except1_4
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4495 | !(p1_21@912@01) | live]
; [else-branch: 4495 | p1_21@912@01 | live]
(push) ; 6
; [then-branch: 4495 | !(p1_21@912@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 4495 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 4496 | p1_21@912@01 | dead]
; [else-branch: 4496 | !(p1_21@912@01) | live]
(push) ; 5
; [else-branch: 4496 | !(p1_21@912@01)]
(pop) ; 5
; [eval] !(p1_21 && !except1_4)
; [eval] p1_21 && !except1_4
(push) ; 5
; [then-branch: 4497 | !(p1_21@912@01) | live]
; [else-branch: 4497 | p1_21@912@01 | live]
(push) ; 6
; [then-branch: 4497 | !(p1_21@912@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 4497 | p1_21@912@01]
; [eval] !except1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 4498 | !(p1_21@912@01) | dead]
; [else-branch: 4498 | p1_21@912@01 | live]
(push) ; 5
; [else-branch: 4498 | p1_21@912@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- m7 ----------
(declare-const p1_29@1196@01 Bool)
(declare-const p2_29@1197@01 Bool)
(declare-const _cthread_163@1198@01 $Ref)
(declare-const _cthread_163_0@1199@01 $Ref)
(declare-const _caller_measures_163@1200@01 Seq<Measure$>)
(declare-const _caller_measures_163_0@1201@01 Seq<Measure$>)
(declare-const _residue_163@1202@01 $Perm)
(declare-const _residue_163_0@1203@01 $Perm)
(declare-const i_0@1204@01 $Ref)
(declare-const i_0_0@1205@01 $Ref)
(declare-const c_2@1206@01 $Ref)
(declare-const c_2_0@1207@01 $Ref)
(declare-const _current_wait_level_163@1208@01 $Perm)
(declare-const _current_wait_level_163_0@1209@01 $Perm)
(declare-const p1_29@1210@01 Bool)
(declare-const p2_29@1211@01 Bool)
(declare-const _cthread_163@1212@01 $Ref)
(declare-const _cthread_163_0@1213@01 $Ref)
(declare-const _caller_measures_163@1214@01 Seq<Measure$>)
(declare-const _caller_measures_163_0@1215@01 Seq<Measure$>)
(declare-const _residue_163@1216@01 $Perm)
(declare-const _residue_163_0@1217@01 $Perm)
(declare-const i_0@1218@01 $Ref)
(declare-const i_0_0@1219@01 $Ref)
(declare-const c_2@1220@01 $Ref)
(declare-const c_2_0@1221@01 $Ref)
(declare-const _current_wait_level_163@1222@01 $Perm)
(declare-const _current_wait_level_163_0@1223@01 $Perm)
(push) ; 1
(declare-const $t@1224@01 $Snap)
(assert (= $t@1224@01 ($Snap.combine ($Snap.first $t@1224@01) ($Snap.second $t@1224@01))))
(assert (= ($Snap.first $t@1224@01) $Snap.unit))
; [eval] p1_29 ==> _cthread_163 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_29@1210@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4499 | p1_29@1210@01 | live]
; [else-branch: 4499 | !(p1_29@1210@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4499 | p1_29@1210@01]
(assert p1_29@1210@01)
; [eval] _cthread_163 != null
(pop) ; 3
(push) ; 3
; [else-branch: 4499 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_29@1210@01) p1_29@1210@01))
(assert (=> p1_29@1210@01 (not (= _cthread_163@1212@01 $Ref.null))))
(assert (=
  ($Snap.second $t@1224@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1224@01))
    ($Snap.second ($Snap.second $t@1224@01)))))
(assert (= ($Snap.first ($Snap.second $t@1224@01)) $Snap.unit))
; [eval] p2_29 ==> _cthread_163_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4500 | p2_29@1211@01 | live]
; [else-branch: 4500 | !(p2_29@1211@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4500 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] _cthread_163_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 4500 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_29@1211@01) p2_29@1211@01))
(assert (=> p2_29@1211@01 (not (= _cthread_163_0@1213@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@1224@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1224@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1224@01))) $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(_cthread_163), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_29@1210@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4501 | p1_29@1210@01 | live]
; [else-branch: 4501 | !(p1_29@1210@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4501 | p1_29@1210@01]
(assert p1_29@1210@01)
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 4501 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> _cthread_163@1212@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(_cthread_163_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4502 | p2_29@1211@01 | live]
; [else-branch: 4502 | !(p2_29@1211@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4502 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] issubtype(typeof(_cthread_163_0), Thread_0())
; [eval] typeof(_cthread_163_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 4502 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> _cthread_163_0@1213@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))
  $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(i_0), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_29@1210@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4503 | p1_29@1210@01 | live]
; [else-branch: 4503 | !(p1_29@1210@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4503 | p1_29@1210@01]
(assert p1_29@1210@01)
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 4503 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(i_0_0), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4504 | p2_29@1211@01 | live]
; [else-branch: 4504 | !(p2_29@1211@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4504 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] issubtype(typeof(i_0_0), int())
; [eval] typeof(i_0_0)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 4504 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))
  $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(c_2), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_29@1210@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4505 | p1_29@1210@01 | live]
; [else-branch: 4505 | !(p1_29@1210@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4505 | p1_29@1210@01]
(assert p1_29@1210@01)
; [eval] issubtype(typeof(c_2), Container())
; [eval] typeof(c_2)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 4505 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> c_2@1220@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(c_2_0), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4506 | p2_29@1211@01 | live]
; [else-branch: 4506 | !(p2_29@1211@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4506 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] issubtype(typeof(c_2_0), Container())
; [eval] typeof(c_2_0)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 4506 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> c_2_0@1221@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1_29@1210@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4507 | p1_29@1210@01 | live]
; [else-branch: 4507 | !(p1_29@1210@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 4507 | p1_29@1210@01]
(assert p1_29@1210@01)
(assert (not (= c_2@1220@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4508 | p2_29@1211@01 | live]
; [else-branch: 4508 | !(p2_29@1211@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4508 | p2_29@1211@01]
(assert p2_29@1211@01)
(assert (not (= c_2_0@1221@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
  $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4509 | p1_29@1210@01 | live]
; [else-branch: 4509 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4509 | p1_29@1210@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4510 | p2_29@1211@01 | live]
; [else-branch: 4510 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4510 | p2_29@1211@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
  $Snap.unit))
; [eval] p1_29 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4511 | p1_29@1210@01 | live]
; [else-branch: 4511 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4511 | p1_29@1210@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
  $Snap.unit))
; [eval] p2_29 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4512 | p2_29@1211@01 | live]
; [else-branch: 4512 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4512 | p2_29@1211@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@1225@01 $Snap)
(assert (= $t@1225@01 ($Snap.combine ($Snap.first $t@1225@01) ($Snap.second $t@1225@01))))
(assert (= ($Snap.first $t@1225@01) $Snap.unit))
; [eval] p1_29 ==> (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_163) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4513 | p1_29@1210@01 | live]
; [else-branch: 4513 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 4513 | p1_29@1210@01]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_163) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_163)
(push) ; 7
; [then-branch: 4514 | False | live]
; [else-branch: 4514 | True | live]
(push) ; 8
; [then-branch: 4514 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 4514 | True]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_163)
(push) ; 9
; [then-branch: 4515 | False | live]
; [else-branch: 4515 | True | live]
(push) ; 10
; [then-branch: 4515 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4515 | True]
; [eval] _residue_163 <= _current_wait_level_163
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_29@1210@01 (<= _residue_163@1216@01 _current_wait_level_163@1222@01)))
(assert (=
  ($Snap.second $t@1225@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1225@01))
    ($Snap.second ($Snap.second $t@1225@01)))))
(assert (= ($Snap.first ($Snap.second $t@1225@01)) $Snap.unit))
; [eval] p2_29 ==> (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_163_0) && ((forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_163_0) && _residue_163_0 <= _current_wait_level_163_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4516 | p2_29@1211@01 | live]
; [else-branch: 4516 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 4516 | p2_29@1211@01]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_163_0) && ((forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_163_0) && _residue_163_0 <= _current_wait_level_163_0)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_163_0)
(push) ; 7
; [then-branch: 4517 | False | live]
; [else-branch: 4517 | True | live]
(push) ; 8
; [then-branch: 4517 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 4517 | True]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_163_0)
(push) ; 9
; [then-branch: 4518 | False | live]
; [else-branch: 4518 | True | live]
(push) ; 10
; [then-branch: 4518 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4518 | True]
; [eval] _residue_163_0 <= _current_wait_level_163_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_29@1211@01 (<= _residue_163_0@1217@01 _current_wait_level_163_0@1223@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1225@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4519 | p1_29@1210@01 | live]
; [else-branch: 4519 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4519 | p1_29@1210@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4520 | p2_29@1211@01 | live]
; [else-branch: 4520 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 4520 | p2_29@1211@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))
  $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4521 | p1_29@1210@01 | live]
; [else-branch: 4521 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4521 | p1_29@1210@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4522 | p2_29@1211@01 | live]
; [else-branch: 4522 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4522 | p2_29@1211@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))
  $Snap.unit))
; [eval] p1_29 ==> int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4523 | p1_29@1210@01 | live]
; [else-branch: 4523 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4523 | p1_29@1210@01]
; [eval] int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4524 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 4524 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4524 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] __prim__int___box__(20)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 20))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 20))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))) (__prim__int___box__ $Snap.unit 20)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))) (__prim__int___box__ $Snap.unit 20))))
(pop) ; 10
(push) ; 10
; [else-branch: 4524 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (__prim__int___box__%precondition $Snap.unit 20)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))) (__prim__int___box__ $Snap.unit 20)))))
; Joined path conditions
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
        (__prim__int___box__%precondition $Snap.unit 20)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))) (__prim__int___box__ $Snap.unit 20))))
    (or
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))))
(assert (=>
  (and
    p1_29@1210@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))) (__prim__int___box__ $Snap.unit 20))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))
  $Snap.unit))
; [eval] p2_29 ==> int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4525 | p2_29@1211@01 | live]
; [else-branch: 4525 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4525 | p2_29@1211@01]
; [eval] int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4526 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 4526 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4526 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
; [eval] __prim__int___box__(20)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 20))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 20))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))) (__prim__int___box__ $Snap.unit 20)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))) (__prim__int___box__ $Snap.unit 20))))
(pop) ; 10
(push) ; 10
; [else-branch: 4526 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (__prim__int___box__%precondition $Snap.unit 20)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))) (__prim__int___box__ $Snap.unit 20)))))
; Joined path conditions
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
        (__prim__int___box__%precondition $Snap.unit 20)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))) (__prim__int___box__ $Snap.unit 20))))
    (or
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))))
(assert (=>
  (and
    p2_29@1211@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))) (__prim__int___box__ $Snap.unit 20))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))
  $Snap.unit))
; [eval] p1_29 ==> !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4527 | p1_29@1210@01 | live]
; [else-branch: 4527 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4527 | p1_29@1210@01]
; [eval] !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] !int___eq__(i_0, __prim__int___box__(0))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4528 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | live]
; [else-branch: 4528 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4528 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] __prim__int___box__(30)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))) (__prim__int___box__ $Snap.unit 30)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))) (__prim__int___box__ $Snap.unit 30))))
(pop) ; 10
(push) ; 10
; [else-branch: 4528 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
    (__prim__int___box__%precondition $Snap.unit 30)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))) (__prim__int___box__ $Snap.unit 30)))))
; Joined path conditions
(assert (or
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
      (and
        (not
          (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
        (__prim__int___box__%precondition $Snap.unit 30)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))) (__prim__int___box__ $Snap.unit 30))))
    (or
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))))
(assert (=>
  (and
    p1_29@1210@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))) (__prim__int___box__ $Snap.unit 30))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))
  $Snap.unit))
; [eval] p2_29 ==> !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4529 | p2_29@1211@01 | live]
; [else-branch: 4529 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4529 | p2_29@1211@01]
; [eval] !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
; [eval] !int___eq__(i_0_0, __prim__int___box__(0))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4530 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | live]
; [else-branch: 4530 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4530 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
; [eval] __prim__int___box__(30)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))) (__prim__int___box__ $Snap.unit 30)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))) (__prim__int___box__ $Snap.unit 30))))
(pop) ; 10
(push) ; 10
; [else-branch: 4530 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
    (__prim__int___box__%precondition $Snap.unit 30)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))) (__prim__int___box__ $Snap.unit 30)))))
; Joined path conditions
(assert (or
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
      (and
        (not
          (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
        (__prim__int___box__%precondition $Snap.unit 30)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))) (__prim__int___box__ $Snap.unit 30))))
    (or
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))))
(assert (=>
  (and
    p2_29@1211@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))) (__prim__int___box__ $Snap.unit 30))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))
  $Snap.unit))
; [eval] p1_29 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4531 | p1_29@1210@01 | live]
; [else-branch: 4531 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4531 | p1_29@1210@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))
  $Snap.unit))
; [eval] p2_29 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4532 | p2_29@1211@01 | live]
; [else-branch: 4532 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4532 | p2_29@1211@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_5: Bool
(declare-const except1_5@1226@01 Bool)
; [exec]
; var except2_5: Bool
(declare-const except2_5@1227@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@1228@01 $Ref)
; [exec]
; var _err_6: Ref
(declare-const _err_6@1229@01 $Ref)
; [exec]
; var cl: Ref
(declare-const cl@1230@01 $Ref)
; [exec]
; var cl_0: Ref
(declare-const cl_0@1231@01 $Ref)
; [exec]
; var error_5: Ref
(declare-const error_5@1232@01 $Ref)
; [exec]
; var error_5_0: Ref
(declare-const error_5_0@1233@01 $Ref)
; [exec]
; var try_finally_13: Int
(declare-const try_finally_13@1234@01 Int)
; [exec]
; var try_finally_13_0: Int
(declare-const try_finally_13_0@1235@01 Int)
; [exec]
; var error_6: Ref
(declare-const error_6@1236@01 $Ref)
; [exec]
; var error_6_0: Ref
(declare-const error_6_0@1237@01 $Ref)
; [exec]
; var try_finally_14: Int
(declare-const try_finally_14@1238@01 Int)
; [exec]
; var try_finally_14_0: Int
(declare-const try_finally_14_0@1239@01 Int)
; [exec]
; var i_6: Ref
(declare-const i_6@1240@01 $Ref)
; [exec]
; var i_6_0: Ref
(declare-const i_6_0@1241@01 $Ref)
; [exec]
; var c_6: Ref
(declare-const c_6@1242@01 $Ref)
; [exec]
; var c_6_0: Ref
(declare-const c_6_0@1243@01 $Ref)
; [exec]
; var MyException_res_7: Ref
(declare-const MyException_res_7@1244@01 $Ref)
; [exec]
; var MyException_res_7_0: Ref
(declare-const MyException_res_7_0@1245@01 $Ref)
; [exec]
; var MyException2_res_0: Ref
(declare-const MyException2_res_0@1246@01 $Ref)
; [exec]
; var MyException2_res_0_0: Ref
(declare-const MyException2_res_0_0@1247@01 $Ref)
; [exec]
; var _cwl_163: Perm
(declare-const _cwl_163@1248@01 $Perm)
; [exec]
; var _cwl_163_0: Perm
(declare-const _cwl_163_0@1249@01 $Perm)
; [exec]
; var _method_measures_163: Seq[Measure$]
(declare-const _method_measures_163@1250@01 Seq<Measure$>)
; [exec]
; var _method_measures_163_0: Seq[Measure$]
(declare-const _method_measures_163_0@1251@01 Seq<Measure$>)
; [exec]
; var p1_30: Bool
(declare-const p1_30@1252@01 Bool)
; [exec]
; var p2_30: Bool
(declare-const p2_30@1253@01 Bool)
; [exec]
; var p3_13: Bool
(declare-const p3_13@1254@01 Bool)
; [exec]
; var p4_13: Bool
(declare-const p4_13@1255@01 Bool)
; [exec]
; var bypass1_5: Bool
(declare-const bypass1_5@1256@01 Bool)
; [exec]
; var bypass2_5: Bool
(declare-const bypass2_5@1257@01 Bool)
; [exec]
; var thisexcept1_6: Bool
(declare-const thisexcept1_6@1258@01 Bool)
; [exec]
; var thisexcept2_6: Bool
(declare-const thisexcept2_6@1259@01 Bool)
; [exec]
; var p1_32: Bool
(declare-const p1_32@1260@01 Bool)
; [exec]
; var p2_32: Bool
(declare-const p2_32@1261@01 Bool)
; [exec]
; var p1_34: Bool
(declare-const p1_34@1262@01 Bool)
; [exec]
; var p2_34: Bool
(declare-const p2_34@1263@01 Bool)
; [exec]
; var bypass1_6: Bool
(declare-const bypass1_6@1264@01 Bool)
; [exec]
; var bypass2_6: Bool
(declare-const bypass2_6@1265@01 Bool)
; [exec]
; var oldexcept1_2: Bool
(declare-const oldexcept1_2@1266@01 Bool)
; [exec]
; var oldexcept2_2: Bool
(declare-const oldexcept2_2@1267@01 Bool)
; [exec]
; var thisexcept1_5: Bool
(declare-const thisexcept1_5@1268@01 Bool)
; [exec]
; var thisexcept2_5: Bool
(declare-const thisexcept2_5@1269@01 Bool)
; [exec]
; var tmp_ret1_2: Bool
(declare-const tmp_ret1_2@1270@01 Bool)
; [exec]
; var tmp_ret2_2: Bool
(declare-const tmp_ret2_2@1271@01 Bool)
; [exec]
; var tmp_break1_2: Bool
(declare-const tmp_break1_2@1272@01 Bool)
; [exec]
; var tmp_break2_2: Bool
(declare-const tmp_break2_2@1273@01 Bool)
; [exec]
; var tmp_cont1_2: Bool
(declare-const tmp_cont1_2@1274@01 Bool)
; [exec]
; var tmp_cont2_2: Bool
(declare-const tmp_cont2_2@1275@01 Bool)
; [exec]
; var tmp_except1_2: Bool
(declare-const tmp_except1_2@1276@01 Bool)
; [exec]
; var tmp_except2_2: Bool
(declare-const tmp_except2_2@1277@01 Bool)
; [exec]
; var p1_31: Bool
(declare-const p1_31@1278@01 Bool)
; [exec]
; var p2_31: Bool
(declare-const p2_31@1279@01 Bool)
; [exec]
; var p3_14: Bool
(declare-const p3_14@1280@01 Bool)
; [exec]
; var p4_14: Bool
(declare-const p4_14@1281@01 Bool)
; [exec]
; var tmp_8: Ref
(declare-const tmp_8@1282@01 $Ref)
; [exec]
; var tmp_9: Ref
(declare-const tmp_9@1283@01 $Ref)
; [exec]
; var p1_33: Bool
(declare-const p1_33@1284@01 Bool)
; [exec]
; var p2_33: Bool
(declare-const p2_33@1285@01 Bool)
; [exec]
; var p3_15: Bool
(declare-const p3_15@1286@01 Bool)
; [exec]
; var p4_15: Bool
(declare-const p4_15@1287@01 Bool)
; [exec]
; var p1_35: Bool
(declare-const p1_35@1288@01 Bool)
; [exec]
; var p2_35: Bool
(declare-const p2_35@1289@01 Bool)
; [exec]
; var p3_16: Bool
(declare-const p3_16@1290@01 Bool)
; [exec]
; var p4_16: Bool
(declare-const p4_16@1291@01 Bool)
; [exec]
; inhale p1_29
(declare-const $t@1292@01 $Snap)
(assert (= $t@1292@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; except1_5 := false
; [exec]
; except2_5 := false
; [eval] p1_29 && !except1_5
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4533 | !(p1_29@1210@01) | live]
; [else-branch: 4533 | p1_29@1210@01 | live]
(push) ; 6
; [then-branch: 4533 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 6
(push) ; 6
; [else-branch: 4533 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_29@1210@01 (not p1_29@1210@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4534 | p1_29@1210@01 | live]
; [else-branch: 4534 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4534 | p1_29@1210@01]
; [exec]
; _method_measures_163 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_6 := i_0
; [exec]
; c_6 := c_2
; [eval] p2_29 && !except2_5
(push) ; 6
; [then-branch: 4535 | !(p2_29@1211@01) | live]
; [else-branch: 4535 | p2_29@1211@01 | live]
(push) ; 7
; [then-branch: 4535 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 7
(push) ; 7
; [else-branch: 4535 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_29@1211@01 (not p2_29@1211@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4536 | p2_29@1211@01 | live]
; [else-branch: 4536 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 4536 | p2_29@1211@01]
; [exec]
; _method_measures_163_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err_6 := null
; [exec]
; i_6_0 := i_0_0
; [exec]
; c_6_0 := c_2_0
; [exec]
; p1_30 := p1_29 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_29 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 7
; [then-branch: 4537 | !(p1_29@1210@01) | live]
; [else-branch: 4537 | p1_29@1210@01 | live]
(push) ; 8
; [then-branch: 4537 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 8
(push) ; 8
; [else-branch: 4537 | p1_29@1210@01]
; [eval] !except1_5
(push) ; 9
; [then-branch: 4538 | False | live]
; [else-branch: 4538 | True | live]
(push) ; 10
; [then-branch: 4538 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4538 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; p2_30 := p2_29 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_29 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 7
; [then-branch: 4539 | !(p2_29@1211@01) | live]
; [else-branch: 4539 | p2_29@1211@01 | live]
(push) ; 8
; [then-branch: 4539 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 8
(push) ; 8
; [else-branch: 4539 | p2_29@1211@01]
; [eval] !except2_5
(push) ; 9
; [then-branch: 4540 | False | live]
; [else-branch: 4540 | True | live]
(push) ; 10
; [then-branch: 4540 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4540 | True]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; p3_13 := p1_29 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_29 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 7
; [then-branch: 4541 | !(p1_29@1210@01) | live]
; [else-branch: 4541 | p1_29@1210@01 | live]
(push) ; 8
; [then-branch: 4541 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 8
(push) ; 8
; [else-branch: 4541 | p1_29@1210@01]
; [eval] !except1_5
(push) ; 9
; [then-branch: 4542 | False | live]
; [else-branch: 4542 | True | live]
(push) ; 10
; [then-branch: 4542 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4542 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; p4_13 := p2_29 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_29 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 7
; [then-branch: 4543 | !(p2_29@1211@01) | live]
; [else-branch: 4543 | p2_29@1211@01 | live]
(push) ; 8
; [then-branch: 4543 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 8
(push) ; 8
; [else-branch: 4543 | p2_29@1211@01]
; [eval] !except2_5
(push) ; 9
; [then-branch: 4544 | False | live]
; [else-branch: 4544 | True | live]
(push) ; 10
; [then-branch: 4544 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 4544 | True]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] p1_30 && !except1_5
; [then-branch: 4545 | False | dead]
; [else-branch: 4545 | True | live]
(push) ; 7
; [else-branch: 4545 | True]
(pop) ; 7
; [eval] !(p1_30 && !except1_5)
; [eval] p1_30 && !except1_5
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4546 | True | live]
; [else-branch: 4546 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 4546 | True]
; [eval] p2_30 && !except2_5
; [then-branch: 4547 | False | dead]
; [else-branch: 4547 | True | live]
(push) ; 8
; [else-branch: 4547 | True]
(pop) ; 8
; [eval] !(p2_30 && !except2_5)
; [eval] p2_30 && !except2_5
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4548 | True | live]
; [else-branch: 4548 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 4548 | True]
; [eval] p1_29 && !except1_5
(push) ; 9
; [then-branch: 4549 | !(p1_29@1210@01) | live]
; [else-branch: 4549 | p1_29@1210@01 | live]
(push) ; 10
; [then-branch: 4549 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 10
(push) ; 10
; [else-branch: 4549 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4550 | p1_29@1210@01 | live]
; [else-branch: 4550 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 4550 | p1_29@1210@01]
; [exec]
; c_6.Container_value := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(declare-const Container_value@1293@01 $Ref)
(assert (= Container_value@1293@01 (__prim__int___box__ $Snap.unit 12)))
; [eval] p2_29 && !except2_5
(push) ; 10
; [then-branch: 4551 | !(p2_29@1211@01) | live]
; [else-branch: 4551 | p2_29@1211@01 | live]
(push) ; 11
; [then-branch: 4551 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 11
(push) ; 11
; [else-branch: 4551 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4552 | p2_29@1211@01 | live]
; [else-branch: 4552 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 4552 | p2_29@1211@01]
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const Container_valuep@1294@01 $Ref)
(assert (= Container_valuep@1294@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; bypass1_5 := !(p1_29 && !except1_5)
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 11
; [then-branch: 4553 | !(p1_29@1210@01) | live]
; [else-branch: 4553 | p1_29@1210@01 | live]
(push) ; 12
; [then-branch: 4553 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4553 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const bypass1_5@1295@01 Bool)
(assert (= bypass1_5@1295@01 (not p1_29@1210@01)))
; [exec]
; bypass2_5 := !(p2_29 && !except2_5)
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 11
; [then-branch: 4554 | !(p2_29@1211@01) | live]
; [else-branch: 4554 | p2_29@1211@01 | live]
(push) ; 12
; [then-branch: 4554 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4554 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const bypass2_5@1296@01 Bool)
(assert (= bypass2_5@1296@01 (not p2_29@1211@01)))
; [exec]
; bypass1_6 := !(p1_29 && !except1_5)
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 11
; [then-branch: 4555 | !(p1_29@1210@01) | live]
; [else-branch: 4555 | p1_29@1210@01 | live]
(push) ; 12
; [then-branch: 4555 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4555 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const bypass1_6@1297@01 Bool)
(assert (= bypass1_6@1297@01 (not p1_29@1210@01)))
; [exec]
; bypass2_6 := !(p2_29 && !except2_5)
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 11
; [then-branch: 4556 | !(p2_29@1211@01) | live]
; [else-branch: 4556 | p2_29@1211@01 | live]
(push) ; 12
; [then-branch: 4556 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4556 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const bypass2_6@1298@01 Bool)
(assert (= bypass2_6@1298@01 (not p2_29@1211@01)))
; [exec]
; oldexcept1_2 := except1_5
; [exec]
; oldexcept2_2 := except2_5
; [exec]
; p1_31 := p1_29 && (!except1_5 && int___eq__(i_6, __prim__int___box__(0)))
; [eval] p1_29 && (!except1_5 && int___eq__(i_6, __prim__int___box__(0)))
(push) ; 11
; [then-branch: 4557 | !(p1_29@1210@01) | live]
; [else-branch: 4557 | p1_29@1210@01 | live]
(push) ; 12
; [then-branch: 4557 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4557 | p1_29@1210@01]
; [eval] !except1_5
(push) ; 13
; [then-branch: 4558 | False | live]
; [else-branch: 4558 | True | live]
(push) ; 14
; [then-branch: 4558 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 4558 | True]
; [eval] int___eq__(i_6, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 15
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(declare-const p1_31@1299@01 Bool)
(assert (=
  p1_31@1299@01
  (and
    p1_29@1210@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
; [exec]
; p2_31 := p2_29 && (!except2_5 && int___eq__(i_6_0, __prim__int___box__(0)))
; [eval] p2_29 && (!except2_5 && int___eq__(i_6_0, __prim__int___box__(0)))
(push) ; 11
; [then-branch: 4559 | !(p2_29@1211@01) | live]
; [else-branch: 4559 | p2_29@1211@01 | live]
(push) ; 12
; [then-branch: 4559 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4559 | p2_29@1211@01]
; [eval] !except2_5
(push) ; 13
; [then-branch: 4560 | False | live]
; [else-branch: 4560 | True | live]
(push) ; 14
; [then-branch: 4560 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 4560 | True]
; [eval] int___eq__(i_6_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 15
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(declare-const p2_31@1300@01 Bool)
(assert (=
  p2_31@1300@01
  (and
    p2_29@1211@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
; [exec]
; p3_14 := p1_29 && (!except1_5 && !int___eq__(i_6, __prim__int___box__(0)))
; [eval] p1_29 && (!except1_5 && !int___eq__(i_6, __prim__int___box__(0)))
(push) ; 11
; [then-branch: 4561 | !(p1_29@1210@01) | live]
; [else-branch: 4561 | p1_29@1210@01 | live]
(push) ; 12
; [then-branch: 4561 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4561 | p1_29@1210@01]
; [eval] !except1_5
(push) ; 13
; [then-branch: 4562 | False | live]
; [else-branch: 4562 | True | live]
(push) ; 14
; [then-branch: 4562 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 4562 | True]
; [eval] !int___eq__(i_6, __prim__int___box__(0))
; [eval] int___eq__(i_6, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 15
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const p3_14@1301@01 Bool)
(assert (=
  p3_14@1301@01
  (and
    p1_29@1210@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))))
; [exec]
; p4_14 := p2_29 &&
;   (!except2_5 && !int___eq__(i_6_0, __prim__int___box__(0)))
; [eval] p2_29 && (!except2_5 && !int___eq__(i_6_0, __prim__int___box__(0)))
(push) ; 11
; [then-branch: 4563 | !(p2_29@1211@01) | live]
; [else-branch: 4563 | p2_29@1211@01 | live]
(push) ; 12
; [then-branch: 4563 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4563 | p2_29@1211@01]
; [eval] !except2_5
(push) ; 13
; [then-branch: 4564 | False | live]
; [else-branch: 4564 | True | live]
(push) ; 14
; [then-branch: 4564 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 4564 | True]
; [eval] !int___eq__(i_6_0, __prim__int___box__(0))
; [eval] int___eq__(i_6_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 15
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const p4_14@1302@01 Bool)
(assert (=
  p4_14@1302@01
  (and
    p2_29@1211@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))))
; [exec]
; tmp_8 := new()
(declare-const tmp_8@1303@01 $Ref)
(assert (not (= tmp_8@1303@01 $Ref.null)))
(assert (not (= tmp_8@1303@01 MyException2_res_0@1246@01)))
(assert (not (= tmp_8@1303@01 error_6_0@1237@01)))
(assert (not (= tmp_8@1303@01 MyException_res_7_0@1245@01)))
(assert (not (= tmp_8@1303@01 c_2@1220@01)))
(assert (not (= tmp_8@1303@01 tmp_9@1283@01)))
(assert (not (= tmp_8@1303@01 error_6@1236@01)))
(assert (not (= tmp_8@1303@01 cl@1230@01)))
(assert (not (= tmp_8@1303@01 MyException_res_7@1244@01)))
(assert (not (= tmp_8@1303@01 cl_0@1231@01)))
(assert (not (= tmp_8@1303@01 error_5_0@1233@01)))
(assert (not (= tmp_8@1303@01 error_5@1232@01)))
(assert (not (= tmp_8@1303@01 i_0_0@1219@01)))
(assert (not (= tmp_8@1303@01 _cthread_163_0@1213@01)))
(assert (not (= tmp_8@1303@01 tmp_8@1282@01)))
(assert (not (= tmp_8@1303@01 _cthread_163@1212@01)))
(assert (not (= tmp_8@1303@01 Container_value@1293@01)))
(assert (not (= tmp_8@1303@01 i_0@1218@01)))
(assert (not (= tmp_8@1303@01 Container_valuep@1294@01)))
(assert (not (= tmp_8@1303@01 c_2_0@1221@01)))
(assert (not (= tmp_8@1303@01 MyException2_res_0_0@1247@01)))
; [eval] p1_31 && !except1_5
(push) ; 11
; [then-branch: 4565 | !(p1_31@1299@01) | live]
; [else-branch: 4565 | p1_31@1299@01 | live]
(push) ; 12
; [then-branch: 4565 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4565 | p1_31@1299@01]
(assert p1_31@1299@01)
; [eval] !except1_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or p1_31@1299@01 (not p1_31@1299@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_31@1299@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not p1_31@1299@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4566 | p1_31@1299@01 | live]
; [else-branch: 4566 | !(p1_31@1299@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 4566 | p1_31@1299@01]
(assert p1_31@1299@01)
; [exec]
; MyException_res_7 := tmp_8
; [eval] p2_31 && !except2_5
(push) ; 12
; [then-branch: 4567 | !(p2_31@1300@01) | live]
; [else-branch: 4567 | p2_31@1300@01 | live]
(push) ; 13
; [then-branch: 4567 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 13
(push) ; 13
; [else-branch: 4567 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or p2_31@1300@01 (not p2_31@1300@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_31@1300@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not p2_31@1300@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4568 | p2_31@1300@01 | live]
; [else-branch: 4568 | !(p2_31@1300@01) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 4568 | p2_31@1300@01]
(assert p2_31@1300@01)
; [exec]
; MyException_res_7_0 := tmp_8
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 4569 | !(p1_31@1299@01) | live]
; [else-branch: 4569 | p1_31@1299@01 | live]
(push) ; 14
; [then-branch: 4569 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4569 | p1_31@1299@01]
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_31@1299@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4570 | p1_31@1299@01 | live]
; [else-branch: 4570 | !(p1_31@1299@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 4570 | p1_31@1299@01]
; [exec]
; inhale typeof(MyException_res_7) == MyException()
(declare-const $t@1304@01 $Snap)
(assert (= $t@1304@01 $Snap.unit))
; [eval] typeof(MyException_res_7) == MyException()
; [eval] typeof(MyException_res_7)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_8@1303@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_31 && !except2_5
(set-option :timeout 0)
(push) ; 14
; [then-branch: 4571 | !(p2_31@1300@01) | live]
; [else-branch: 4571 | p2_31@1300@01 | live]
(push) ; 15
; [then-branch: 4571 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 15
(push) ; 15
; [else-branch: 4571 | p2_31@1300@01]
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_31@1300@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4572 | p2_31@1300@01 | live]
; [else-branch: 4572 | !(p2_31@1300@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 4572 | p2_31@1300@01]
; [exec]
; inhale typeof(MyException_res_7_0) == MyException()
(declare-const $t@1305@01 $Snap)
(assert (= $t@1305@01 $Snap.unit))
; [eval] typeof(MyException_res_7_0) == MyException()
; [eval] typeof(MyException_res_7_0)
; [eval] MyException()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_31 && !except1_5
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4573 | !(p1_31@1299@01) | live]
; [else-branch: 4573 | p1_31@1299@01 | live]
(push) ; 16
; [then-branch: 4573 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4573 | p1_31@1299@01]
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_31@1299@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4574 | p1_31@1299@01 | live]
; [else-branch: 4574 | !(p1_31@1299@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4574 | p1_31@1299@01]
; [exec]
; _err := MyException_res_7
; [exec]
; except1_5 := true
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 4575 | !(p2_31@1300@01) | live]
; [else-branch: 4575 | p2_31@1300@01 | live]
(push) ; 17
; [then-branch: 4575 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4575 | p2_31@1300@01]
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_31@1300@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4576 | p2_31@1300@01 | live]
; [else-branch: 4576 | !(p2_31@1300@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4576 | p2_31@1300@01]
; [exec]
; _err_6 := MyException_res_7_0
; [exec]
; except2_5 := true
; [exec]
; tmp_9 := new()
(declare-const tmp_9@1306@01 $Ref)
(assert (not (= tmp_9@1306@01 $Ref.null)))
(assert (not (= tmp_9@1306@01 tmp_8@1303@01)))
(assert (not (= tmp_9@1306@01 MyException2_res_0@1246@01)))
(assert (not (= tmp_9@1306@01 error_6_0@1237@01)))
(assert (not (= tmp_9@1306@01 c_2@1220@01)))
(assert (not (= tmp_9@1306@01 tmp_9@1283@01)))
(assert (not (= tmp_9@1306@01 error_6@1236@01)))
(assert (not (= tmp_9@1306@01 cl@1230@01)))
(assert (not (= tmp_9@1306@01 cl_0@1231@01)))
(assert (not (= tmp_9@1306@01 error_5_0@1233@01)))
(assert (not (= tmp_9@1306@01 error_5@1232@01)))
(assert (not (= tmp_9@1306@01 i_0_0@1219@01)))
(assert (not (= tmp_9@1306@01 _cthread_163_0@1213@01)))
(assert (not (= tmp_9@1306@01 _cthread_163@1212@01)))
(assert (not (= tmp_9@1306@01 Container_value@1293@01)))
(assert (not (= tmp_9@1306@01 i_0@1218@01)))
(assert (not (= tmp_9@1306@01 Container_valuep@1294@01)))
(assert (not (= tmp_9@1306@01 c_2_0@1221@01)))
(assert (not (= tmp_9@1306@01 MyException2_res_0_0@1247@01)))
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 4577 | !(p3_14@1301@01) | live]
; [else-branch: 4577 | p3_14@1301@01 | live]
(push) ; 18
; [then-branch: 4577 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4577 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p3_14@1301@01 (not p3_14@1301@01)))
; [then-branch: 4578 | False | dead]
; [else-branch: 4578 | True | live]
(push) ; 17
; [else-branch: 4578 | True]
(pop) ; 17
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 4579 | !(p3_14@1301@01) | live]
; [else-branch: 4579 | p3_14@1301@01 | live]
(push) ; 18
; [then-branch: 4579 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4579 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4580 | True | live]
; [else-branch: 4580 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 4580 | True]
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 4581 | !(p4_14@1302@01) | live]
; [else-branch: 4581 | p4_14@1302@01 | live]
(push) ; 19
; [then-branch: 4581 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 19
(push) ; 19
; [else-branch: 4581 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p4_14@1302@01 (not p4_14@1302@01)))
; [then-branch: 4582 | False | dead]
; [else-branch: 4582 | True | live]
(push) ; 18
; [else-branch: 4582 | True]
(pop) ; 18
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 4583 | !(p4_14@1302@01) | live]
; [else-branch: 4583 | p4_14@1302@01 | live]
(push) ; 19
; [then-branch: 4583 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 19
(push) ; 19
; [else-branch: 4583 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4584 | True | live]
; [else-branch: 4584 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 4584 | True]
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 4585 | !(p3_14@1301@01) | live]
; [else-branch: 4585 | p3_14@1301@01 | live]
(push) ; 20
; [then-branch: 4585 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4585 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 4586 | False | dead]
; [else-branch: 4586 | True | live]
(push) ; 19
; [else-branch: 4586 | True]
(pop) ; 19
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 4587 | !(p3_14@1301@01) | live]
; [else-branch: 4587 | p3_14@1301@01 | live]
(push) ; 20
; [then-branch: 4587 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4587 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4588 | True | live]
; [else-branch: 4588 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4588 | True]
; [eval] p4_14 && !except2_5
(push) ; 20
; [then-branch: 4589 | !(p4_14@1302@01) | live]
; [else-branch: 4589 | p4_14@1302@01 | live]
(push) ; 21
; [then-branch: 4589 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4589 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 4590 | False | dead]
; [else-branch: 4590 | True | live]
(push) ; 20
; [else-branch: 4590 | True]
(pop) ; 20
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 20
; [then-branch: 4591 | !(p4_14@1302@01) | live]
; [else-branch: 4591 | p4_14@1302@01 | live]
(push) ; 21
; [then-branch: 4591 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4591 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4592 | True | live]
; [else-branch: 4592 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4592 | True]
; [eval] p3_14 && !except1_5
(push) ; 21
; [then-branch: 4593 | !(p3_14@1301@01) | live]
; [else-branch: 4593 | p3_14@1301@01 | live]
(push) ; 22
; [then-branch: 4593 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4593 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 4594 | False | dead]
; [else-branch: 4594 | True | live]
(push) ; 21
; [else-branch: 4594 | True]
(pop) ; 21
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 21
; [then-branch: 4595 | !(p3_14@1301@01) | live]
; [else-branch: 4595 | p3_14@1301@01 | live]
(push) ; 22
; [then-branch: 4595 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4595 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4596 | True | live]
; [else-branch: 4596 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4596 | True]
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 4597 | !(p4_14@1302@01) | live]
; [else-branch: 4597 | p4_14@1302@01 | live]
(push) ; 23
; [then-branch: 4597 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4597 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 4598 | False | dead]
; [else-branch: 4598 | True | live]
(push) ; 22
; [else-branch: 4598 | True]
(pop) ; 22
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 4599 | !(p4_14@1302@01) | live]
; [else-branch: 4599 | p4_14@1302@01 | live]
(push) ; 23
; [then-branch: 4599 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4599 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4600 | True | live]
; [else-branch: 4600 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4600 | True]
; [exec]
; thisexcept1_5 := except1_5 && !bypass1_6
; [eval] except1_5 && !bypass1_6
(push) ; 23
; [then-branch: 4601 | False | live]
; [else-branch: 4601 | True | live]
(push) ; 24
; [then-branch: 4601 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4601 | True]
; [eval] !bypass1_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_5@1307@01 Bool)
(assert (= thisexcept1_5@1307@01 (not bypass1_6@1297@01)))
; [exec]
; thisexcept2_5 := except2_5 && !bypass2_6
; [eval] except2_5 && !bypass2_6
(push) ; 23
; [then-branch: 4602 | False | live]
; [else-branch: 4602 | True | live]
(push) ; 24
; [then-branch: 4602 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4602 | True]
; [eval] !bypass2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_5@1308@01 Bool)
(assert (= thisexcept2_5@1308@01 (not bypass2_6@1298@01)))
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4603 | p1_29@1210@01 | live]
; [else-branch: 4603 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4603 | p1_29@1210@01]
; [exec]
; tmp_except1_2 := except1_5
; [exec]
; except1_5 := oldexcept1_2
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4604 | p2_29@1211@01 | live]
; [else-branch: 4604 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4604 | p2_29@1211@01]
; [exec]
; tmp_except2_2 := except2_5
; [exec]
; except2_5 := oldexcept2_2
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 4605 | !(p1_29@1210@01) | live]
; [else-branch: 4605 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 4605 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4605 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4606 | p1_29@1210@01 | live]
; [else-branch: 4606 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4606 | p1_29@1210@01]
; [exec]
; cl := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 26
(pop) ; 26
; Joined path conditions
(declare-const cl@1309@01 $Ref)
(assert (= cl@1309@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; inhale _isDefined(27747)
(declare-const $t@1310@01 $Snap)
(assert (= $t@1310@01 $Snap.unit))
; [eval] _isDefined(27747)
(push) ; 26
(assert (_isDefined%precondition $Snap.unit 27747))
(pop) ; 26
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 27747))
(assert (_isDefined $Snap.unit 27747))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_29 && !except2_5
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4607 | !(p2_29@1211@01) | live]
; [else-branch: 4607 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 4607 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4607 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4608 | p2_29@1211@01 | live]
; [else-branch: 4608 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4608 | p2_29@1211@01]
; [exec]
; cl_0 := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 27
(pop) ; 27
; Joined path conditions
(declare-const cl_0@1311@01 $Ref)
(assert (= cl_0@1311@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; inhale true
(declare-const $t@1312@01 $Snap)
(assert (= $t@1312@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4609 | p1_29@1210@01 | live]
; [else-branch: 4609 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4609 | p1_29@1210@01]
; [exec]
; except1_5 := except1_5 || tmp_except1_2
; [eval] except1_5 || tmp_except1_2
(push) ; 28
; [then-branch: 4610 | False | live]
; [else-branch: 4610 | True | live]
(push) ; 29
; [then-branch: 4610 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 4610 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4611 | p2_29@1211@01 | live]
; [else-branch: 4611 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4611 | p2_29@1211@01]
; [exec]
; except2_5 := except2_5 || tmp_except2_2
; [eval] except2_5 || tmp_except2_2
(push) ; 29
; [then-branch: 4612 | False | live]
; [else-branch: 4612 | True | live]
(push) ; 30
; [then-branch: 4612 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4612 | True]
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [exec]
; thisexcept1_6 := except1_5 && !bypass1_5
; [eval] except1_5 && !bypass1_5
(push) ; 29
; [then-branch: 4613 | False | live]
; [else-branch: 4613 | True | live]
(push) ; 30
; [then-branch: 4613 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4613 | True]
; [eval] !bypass1_5
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_6@1313@01 Bool)
(assert (= thisexcept1_6@1313@01 (not bypass1_5@1295@01)))
; [exec]
; thisexcept2_6 := except2_5 && !bypass2_5
; [eval] except2_5 && !bypass2_5
(push) ; 29
; [then-branch: 4614 | False | live]
; [else-branch: 4614 | True | live]
(push) ; 30
; [then-branch: 4614 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4614 | True]
; [eval] !bypass2_5
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_6@1314@01 Bool)
(assert (= thisexcept2_6@1314@01 (not bypass2_5@1296@01)))
; [exec]
; p1_32 := p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
(push) ; 29
; [then-branch: 4615 | !(p1_29@1210@01) | live]
; [else-branch: 4615 | p1_29@1210@01 | live]
(push) ; 30
; [then-branch: 4615 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4615 | p1_29@1210@01]
(push) ; 31
; [then-branch: 4616 | !(thisexcept1_6@1313@01) | live]
; [else-branch: 4616 | thisexcept1_6@1313@01 | live]
(push) ; 32
; [then-branch: 4616 | !(thisexcept1_6@1313@01)]
(assert (not thisexcept1_6@1313@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4616 | thisexcept1_6@1313@01]
(assert thisexcept1_6@1313@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1313@01 (not thisexcept1_6@1313@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p1_29@1210@01 (or thisexcept1_6@1313@01 (not thisexcept1_6@1313@01))))
(declare-const p1_32@1315@01 Bool)
(assert (=
  p1_32@1315@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1313@01
      (issubtype<Bool> (typeof<PyType> tmp_8@1303@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_32 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
(push) ; 29
; [then-branch: 4617 | !(p2_29@1211@01) | live]
; [else-branch: 4617 | p2_29@1211@01 | live]
(push) ; 30
; [then-branch: 4617 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4617 | p2_29@1211@01]
(push) ; 31
; [then-branch: 4618 | !(thisexcept2_6@1314@01) | live]
; [else-branch: 4618 | thisexcept2_6@1314@01 | live]
(push) ; 32
; [then-branch: 4618 | !(thisexcept2_6@1314@01)]
(assert (not thisexcept2_6@1314@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4618 | thisexcept2_6@1314@01]
(assert thisexcept2_6@1314@01)
; [eval] issubtype(typeof(_err_6), MyException())
; [eval] typeof(_err_6)
; [eval] MyException()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_6@1314@01 (not thisexcept2_6@1314@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p2_29@1211@01 (or thisexcept2_6@1314@01 (not thisexcept2_6@1314@01))))
(declare-const p2_32@1316@01 Bool)
(assert (=
  p2_32@1316@01
  (and
    p2_29@1211@01
    (and
      thisexcept2_6@1314@01
      (issubtype<Bool> (typeof<PyType> tmp_8@1303@01) (as MyException<PyType>  PyType))))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_32@1315@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not p1_32@1315@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4619 | p1_32@1315@01 | live]
; [else-branch: 4619 | !(p1_32@1315@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4619 | p1_32@1315@01]
(assert p1_32@1315@01)
; [exec]
; except1_5 := false
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_32@1316@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not p2_32@1316@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4620 | p2_32@1316@01 | live]
; [else-branch: 4620 | !(p2_32@1316@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4620 | p2_32@1316@01]
(assert p2_32@1316@01)
; [exec]
; except2_5 := false
; [exec]
; p1_33 := p1_32 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_32 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 31
; [then-branch: 4621 | !(p1_32@1315@01) | live]
; [else-branch: 4621 | p1_32@1315@01 | live]
(push) ; 32
; [then-branch: 4621 | !(p1_32@1315@01)]
(assert (not p1_32@1315@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4621 | p1_32@1315@01]
; [eval] !except1_5
(push) ; 33
; [then-branch: 4622 | False | live]
; [else-branch: 4622 | True | live]
(push) ; 34
; [then-branch: 4622 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4622 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or p1_32@1315@01 (not p1_32@1315@01)))
; [exec]
; p2_33 := p2_32 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_32 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 31
; [then-branch: 4623 | !(p2_32@1316@01) | live]
; [else-branch: 4623 | p2_32@1316@01 | live]
(push) ; 32
; [then-branch: 4623 | !(p2_32@1316@01)]
(assert (not p2_32@1316@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4623 | p2_32@1316@01]
; [eval] !except2_5
(push) ; 33
; [then-branch: 4624 | False | live]
; [else-branch: 4624 | True | live]
(push) ; 34
; [then-branch: 4624 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4624 | True]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or p2_32@1316@01 (not p2_32@1316@01)))
; [exec]
; p3_15 := p1_32 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_32 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 31
; [then-branch: 4625 | !(p1_32@1315@01) | live]
; [else-branch: 4625 | p1_32@1315@01 | live]
(push) ; 32
; [then-branch: 4625 | !(p1_32@1315@01)]
(assert (not p1_32@1315@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4625 | p1_32@1315@01]
; [eval] !except1_5
(push) ; 33
; [then-branch: 4626 | False | live]
; [else-branch: 4626 | True | live]
(push) ; 34
; [then-branch: 4626 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4626 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [exec]
; p4_15 := p2_32 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_32 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 31
; [then-branch: 4627 | !(p2_32@1316@01) | live]
; [else-branch: 4627 | p2_32@1316@01 | live]
(push) ; 32
; [then-branch: 4627 | !(p2_32@1316@01)]
(assert (not p2_32@1316@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4627 | p2_32@1316@01]
; [eval] !except2_5
(push) ; 33
; [then-branch: 4628 | False | live]
; [else-branch: 4628 | True | live]
(push) ; 34
; [then-branch: 4628 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4628 | True]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p1_33 && !except1_5
; [then-branch: 4629 | False | dead]
; [else-branch: 4629 | True | live]
(push) ; 31
; [else-branch: 4629 | True]
(pop) ; 31
; [eval] !(p1_33 && !except1_5)
; [eval] p1_33 && !except1_5
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4630 | True | live]
; [else-branch: 4630 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4630 | True]
; [eval] p2_33 && !except2_5
; [then-branch: 4631 | False | dead]
; [else-branch: 4631 | True | live]
(push) ; 32
; [else-branch: 4631 | True]
(pop) ; 32
; [eval] !(p2_33 && !except2_5)
; [eval] p2_33 && !except2_5
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4632 | True | live]
; [else-branch: 4632 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4632 | True]
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 4633 | !(p1_32@1315@01) | live]
; [else-branch: 4633 | p1_32@1315@01 | live]
(push) ; 34
; [then-branch: 4633 | !(p1_32@1315@01)]
(assert (not p1_32@1315@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4633 | p1_32@1315@01]
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_32@1315@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4634 | p1_32@1315@01 | live]
; [else-branch: 4634 | !(p1_32@1315@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4634 | p1_32@1315@01]
; [exec]
; c_6.Container_value := __prim__int___box__(int___add__(int___unbox__(c_6.Container_value),
;   8))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_6.Container_value), 8))
; [eval] int___add__(int___unbox__(c_6.Container_value), 8)
; [eval] int___unbox__(c_6.Container_value)
(push) ; 34
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 35
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@1293@01))
(pop) ; 34
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@1293@01)))
(push) ; 34
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 8))
(pop) ; 34
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 8))
(push) ; 34
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 8)))
(pop) ; 34
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 8)))
(declare-const Container_value@1317@01 $Ref)
(assert (=
  Container_value@1317@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 8))))
; [eval] p2_32 && !except2_5
(push) ; 34
; [then-branch: 4635 | !(p2_32@1316@01) | live]
; [else-branch: 4635 | p2_32@1316@01 | live]
(push) ; 35
; [then-branch: 4635 | !(p2_32@1316@01)]
(assert (not p2_32@1316@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4635 | p2_32@1316@01]
; [eval] !except2_5
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_32@1316@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4636 | p2_32@1316@01 | live]
; [else-branch: 4636 | !(p2_32@1316@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4636 | p2_32@1316@01]
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(int___add__(int___unbox__(c_6_0.Container_valuep),
;   8))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_6_0.Container_valuep), 8))
; [eval] int___add__(int___unbox__(c_6_0.Container_valuep), 8)
; [eval] int___unbox__(c_6_0.Container_valuep)
(push) ; 35
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 36
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_valuep@1294@01))
(pop) ; 35
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_valuep@1294@01)))
(push) ; 35
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 8))
(pop) ; 35
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 8))
(push) ; 35
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 8)))
(pop) ; 35
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 8)))
(declare-const Container_valuep@1318@01 $Ref)
(assert (=
  Container_valuep@1318@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 8))))
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 4637 | !(p1_29@1210@01) | live]
; [else-branch: 4637 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 4637 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4637 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4638 | p1_29@1210@01 | live]
; [else-branch: 4638 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4638 | p1_29@1210@01]
; [exec]
; _err := null
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 4639 | !(p2_29@1211@01) | live]
; [else-branch: 4639 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 4639 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4639 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4640 | p2_29@1211@01 | live]
; [else-branch: 4640 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 4640 | p2_29@1211@01]
; [exec]
; _err_6 := null
; [exec]
; p1_34 := p1_29 &&
;   (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
(push) ; 37
; [then-branch: 4641 | !(p1_29@1210@01) | live]
; [else-branch: 4641 | p1_29@1210@01 | live]
(push) ; 38
; [then-branch: 4641 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4641 | p1_29@1210@01]
(push) ; 39
; [then-branch: 4642 | !(thisexcept1_6@1313@01) | live]
; [else-branch: 4642 | thisexcept1_6@1313@01 | live]
(push) ; 40
; [then-branch: 4642 | !(thisexcept1_6@1313@01)]
(assert (not thisexcept1_6@1313@01))
(pop) ; 40
(push) ; 40
; [else-branch: 4642 | thisexcept1_6@1313@01]
(assert thisexcept1_6@1313@01)
; [eval] issubtype(typeof(_err), MyException2())
; [eval] typeof(_err)
; [eval] MyException2()
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1313@01 (not thisexcept1_6@1313@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(declare-const p1_34@1319@01 Bool)
(assert (=
  p1_34@1319@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1313@01
      (issubtype<Bool> (typeof<PyType> $Ref.null) (as MyException2<PyType>  PyType))))))
; [exec]
; p2_34 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
(push) ; 37
; [then-branch: 4643 | !(p2_29@1211@01) | live]
; [else-branch: 4643 | p2_29@1211@01 | live]
(push) ; 38
; [then-branch: 4643 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4643 | p2_29@1211@01]
(push) ; 39
; [then-branch: 4644 | !(thisexcept2_6@1314@01) | live]
; [else-branch: 4644 | thisexcept2_6@1314@01 | live]
(push) ; 40
; [then-branch: 4644 | !(thisexcept2_6@1314@01)]
(assert (not thisexcept2_6@1314@01))
(pop) ; 40
(push) ; 40
; [else-branch: 4644 | thisexcept2_6@1314@01]
(assert thisexcept2_6@1314@01)
; [eval] issubtype(typeof(_err_6), MyException2())
; [eval] typeof(_err_6)
; [eval] MyException2()
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_6@1314@01 (not thisexcept2_6@1314@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(declare-const p2_34@1320@01 Bool)
(assert (=
  p2_34@1320@01
  (and
    p2_29@1211@01
    (and
      thisexcept2_6@1314@01
      (issubtype<Bool> (typeof<PyType> $Ref.null) (as MyException2<PyType>  PyType))))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_34@1319@01)))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4645 | p1_34@1319@01 | dead]
; [else-branch: 4645 | !(p1_34@1319@01) | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 4645 | !(p1_34@1319@01)]
(assert (not p1_34@1319@01))
(pop) ; 37
; [eval] !p1_34
(push) ; 37
(set-option :timeout 10)
(assert (not p1_34@1319@01))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_34@1319@01)))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4646 | !(p1_34@1319@01) | live]
; [else-branch: 4646 | p1_34@1319@01 | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4646 | !(p1_34@1319@01)]
(assert (not p1_34@1319@01))
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_34@1320@01)))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4647 | p2_34@1320@01 | dead]
; [else-branch: 4647 | !(p2_34@1320@01) | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 4647 | !(p2_34@1320@01)]
(assert (not p2_34@1320@01))
(pop) ; 38
; [eval] !p2_34
(push) ; 38
(set-option :timeout 10)
(assert (not p2_34@1320@01))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_34@1320@01)))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4648 | !(p2_34@1320@01) | live]
; [else-branch: 4648 | p2_34@1320@01 | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 4648 | !(p2_34@1320@01)]
(assert (not p2_34@1320@01))
; [exec]
; p1_35 := p1_34 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_34 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 39
; [then-branch: 4649 | !(p1_34@1319@01) | live]
; [else-branch: 4649 | p1_34@1319@01 | live]
(push) ; 40
; [then-branch: 4649 | !(p1_34@1319@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 4649 | p1_34@1319@01]
(assert p1_34@1319@01)
; [eval] !except1_5
(push) ; 41
; [then-branch: 4650 | False | live]
; [else-branch: 4650 | True | live]
(push) ; 42
; [then-branch: 4650 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4650 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or p1_34@1319@01 (not p1_34@1319@01)))
; [exec]
; p2_35 := p2_34 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_34 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 39
; [then-branch: 4651 | !(p2_34@1320@01) | live]
; [else-branch: 4651 | p2_34@1320@01 | live]
(push) ; 40
; [then-branch: 4651 | !(p2_34@1320@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 4651 | p2_34@1320@01]
(assert p2_34@1320@01)
; [eval] !except2_5
(push) ; 41
; [then-branch: 4652 | False | live]
; [else-branch: 4652 | True | live]
(push) ; 42
; [then-branch: 4652 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4652 | True]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or p2_34@1320@01 (not p2_34@1320@01)))
; [exec]
; p3_16 := p1_34 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_34 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 39
; [then-branch: 4653 | !(p1_34@1319@01) | live]
; [else-branch: 4653 | p1_34@1319@01 | live]
(push) ; 40
; [then-branch: 4653 | !(p1_34@1319@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 4653 | p1_34@1319@01]
(assert p1_34@1319@01)
; [eval] !except1_5
(push) ; 41
; [then-branch: 4654 | False | live]
; [else-branch: 4654 | True | live]
(push) ; 42
; [then-branch: 4654 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4654 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [exec]
; p4_16 := p2_34 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_34 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 39
; [then-branch: 4655 | !(p2_34@1320@01) | live]
; [else-branch: 4655 | p2_34@1320@01 | live]
(push) ; 40
; [then-branch: 4655 | !(p2_34@1320@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 4655 | p2_34@1320@01]
(assert p2_34@1320@01)
; [eval] !except2_5
(push) ; 41
; [then-branch: 4656 | False | live]
; [else-branch: 4656 | True | live]
(push) ; 42
; [then-branch: 4656 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4656 | True]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [eval] p1_35 && !except1_5
; [then-branch: 4657 | False | dead]
; [else-branch: 4657 | True | live]
(push) ; 39
; [else-branch: 4657 | True]
(pop) ; 39
; [eval] !(p1_35 && !except1_5)
; [eval] p1_35 && !except1_5
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4658 | True | live]
; [else-branch: 4658 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4658 | True]
; [eval] p2_35 && !except2_5
; [then-branch: 4659 | False | dead]
; [else-branch: 4659 | True | live]
(push) ; 40
; [else-branch: 4659 | True]
(pop) ; 40
; [eval] !(p2_35 && !except2_5)
; [eval] p2_35 && !except2_5
(push) ; 40
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4660 | True | live]
; [else-branch: 4660 | False | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4660 | True]
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 4661 | !(p1_34@1319@01) | live]
; [else-branch: 4661 | p1_34@1319@01 | live]
(push) ; 42
; [then-branch: 4661 | !(p1_34@1319@01)]
(pop) ; 42
(push) ; 42
; [else-branch: 4661 | p1_34@1319@01]
(assert p1_34@1319@01)
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
; [then-branch: 4662 | p1_34@1319@01 | dead]
; [else-branch: 4662 | !(p1_34@1319@01) | live]
(push) ; 41
; [else-branch: 4662 | !(p1_34@1319@01)]
(pop) ; 41
; [eval] !(p1_34 && !except1_5)
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 4663 | !(p1_34@1319@01) | live]
; [else-branch: 4663 | p1_34@1319@01 | live]
(push) ; 42
; [then-branch: 4663 | !(p1_34@1319@01)]
(pop) ; 42
(push) ; 42
; [else-branch: 4663 | p1_34@1319@01]
(assert p1_34@1319@01)
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not p1_34@1319@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4664 | !(p1_34@1319@01) | live]
; [else-branch: 4664 | p1_34@1319@01 | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4664 | !(p1_34@1319@01)]
; [eval] p2_34 && !except2_5
(push) ; 42
; [then-branch: 4665 | !(p2_34@1320@01) | live]
; [else-branch: 4665 | p2_34@1320@01 | live]
(push) ; 43
; [then-branch: 4665 | !(p2_34@1320@01)]
(pop) ; 43
(push) ; 43
; [else-branch: 4665 | p2_34@1320@01]
(assert p2_34@1320@01)
; [eval] !except2_5
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
; [then-branch: 4666 | p2_34@1320@01 | dead]
; [else-branch: 4666 | !(p2_34@1320@01) | live]
(push) ; 42
; [else-branch: 4666 | !(p2_34@1320@01)]
(pop) ; 42
; [eval] !(p2_34 && !except2_5)
; [eval] p2_34 && !except2_5
(push) ; 42
; [then-branch: 4667 | !(p2_34@1320@01) | live]
; [else-branch: 4667 | p2_34@1320@01 | live]
(push) ; 43
; [then-branch: 4667 | !(p2_34@1320@01)]
(pop) ; 43
(push) ; 43
; [else-branch: 4667 | p2_34@1320@01]
(assert p2_34@1320@01)
; [eval] !except2_5
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not p2_34@1320@01))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4668 | !(p2_34@1320@01) | live]
; [else-branch: 4668 | p2_34@1320@01 | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4668 | !(p2_34@1320@01)]
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 4669 | !(p1_29@1210@01) | live]
; [else-branch: 4669 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 4669 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 4669 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4670 | p1_29@1210@01 | live]
; [else-branch: 4670 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 4670 | p1_29@1210@01]
; [exec]
; _err := null
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 4671 | !(p2_29@1211@01) | live]
; [else-branch: 4671 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 4671 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 45
(push) ; 45
; [else-branch: 4671 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4672 | p2_29@1211@01 | live]
; [else-branch: 4672 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 4672 | p2_29@1211@01]
; [exec]
; _err_6 := null
; [exec]
; assert (p1_29 ==> !except1_5) && (p2_29 ==> !except2_5)
; [eval] p1_29 ==> !except1_5
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4673 | p1_29@1210@01 | live]
; [else-branch: 4673 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4673 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> !except2_5
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4674 | p2_29@1211@01 | live]
; [else-branch: 4674 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4674 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p1_29 ==> true
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4675 | p1_29@1210@01 | live]
; [else-branch: 4675 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4675 | p1_29@1210@01]
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> true
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4676 | p2_29@1211@01 | live]
; [else-branch: 4676 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4676 | p2_29@1211@01]
(pop) ; 46
(pop) ; 45
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4677 | p1_29@1210@01 | live]
; [else-branch: 4677 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 4677 | p1_29@1210@01]
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4678 | p2_29@1211@01 | live]
; [else-branch: 4678 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4678 | p2_29@1211@01]
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4679 | p1_29@1210@01 | live]
; [else-branch: 4679 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4679 | p1_29@1210@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1317@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1317@01) (as int<PyType>  PyType))))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4680 | p2_29@1211@01 | live]
; [else-branch: 4680 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4680 | p2_29@1211@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1318@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1318@01) (as int<PyType>  PyType))))
; [eval] p1_29 ==> int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4681 | p1_29@1210@01 | live]
; [else-branch: 4681 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4681 | p1_29@1210@01]
; [eval] int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4682 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 4682 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 4682 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] __prim__int___box__(20)
(push) ; 51
(assert (__prim__int___box__%precondition $Snap.unit 20))
(pop) ; 51
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 20))
(push) ; 51
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1317@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1317@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1317@01 (__prim__int___box__ $Snap.unit 20)))
(pop) ; 51
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1317@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1317@01 (__prim__int___box__ $Snap.unit 20))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (__prim__int___box__%precondition $Snap.unit 20)
    (issubtype<Bool> (typeof<PyType> Container_value@1317@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1317@01 (__prim__int___box__ $Snap.unit 20)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
        (__prim__int___box__%precondition $Snap.unit 20)
        (issubtype<Bool> (typeof<PyType> Container_value@1317@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1317@01 (__prim__int___box__ $Snap.unit 20))))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 47
(assert (not (=>
  (and
    p1_29@1210@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1317@01 (__prim__int___box__ $Snap.unit 20)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_29@1210@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1317@01 (__prim__int___box__ $Snap.unit 20))))
; [eval] p2_29 ==> int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4683 | p2_29@1211@01 | live]
; [else-branch: 4683 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4683 | p2_29@1211@01]
; [eval] int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4684 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 4684 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 4684 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
; [eval] __prim__int___box__(20)
(push) ; 51
(assert (__prim__int___box__%precondition $Snap.unit 20))
(pop) ; 51
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 20))
(push) ; 51
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@1318@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@1318@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1318@01 (__prim__int___box__ $Snap.unit 20)))
(pop) ; 51
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@1318@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1318@01 (__prim__int___box__ $Snap.unit 20))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (__prim__int___box__%precondition $Snap.unit 20)
    (issubtype<Bool> (typeof<PyType> Container_valuep@1318@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1318@01 (__prim__int___box__ $Snap.unit 20)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
        (__prim__int___box__%precondition $Snap.unit 20)
        (issubtype<Bool> (typeof<PyType> Container_valuep@1318@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1318@01 (__prim__int___box__ $Snap.unit 20))))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 47
(assert (not (=>
  (and
    p2_29@1211@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1318@01 (__prim__int___box__ $Snap.unit 20)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p2_29@1211@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1318@01 (__prim__int___box__ $Snap.unit 20))))
; [eval] p1_29 ==> !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4685 | p1_29@1210@01 | live]
; [else-branch: 4685 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4685 | p1_29@1210@01]
; [eval] !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] !int___eq__(i_0, __prim__int___box__(0))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4686 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | dead]
; [else-branch: 4686 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 4686 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
; [eval] p2_29 ==> !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4687 | p2_29@1211@01 | live]
; [else-branch: 4687 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4687 | p2_29@1211@01]
; [eval] !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
; [eval] !int___eq__(i_0_0, __prim__int___box__(0))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4688 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | dead]
; [else-branch: 4688 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 4688 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
; [eval] p1_29 ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4689 | p1_29@1210@01 | live]
; [else-branch: 4689 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4689 | p1_29@1210@01]
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
(push) ; 49
; [then-branch: 4690 | False | live]
; [else-branch: 4690 | True | live]
(push) ; 50
; [then-branch: 4690 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 4690 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
(push) ; 51
; [then-branch: 4691 | False | live]
; [else-branch: 4691 | True | live]
(push) ; 52
; [then-branch: 4691 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 4691 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
(push) ; 53
; [then-branch: 4692 | False | live]
; [else-branch: 4692 | True | live]
(push) ; 54
; [then-branch: 4692 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 4692 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_29 ==> (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4693 | p2_29@1211@01 | live]
; [else-branch: 4693 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4693 | p2_29@1211@01]
; [eval] (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false)
(push) ; 49
; [then-branch: 4694 | False | live]
; [else-branch: 4694 | True | live]
(push) ; 50
; [then-branch: 4694 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 4694 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false)
(push) ; 51
; [then-branch: 4695 | False | live]
; [else-branch: 4695 | True | live]
(push) ; 52
; [then-branch: 4695 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 4695 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false)
(push) ; 53
; [then-branch: 4696 | False | live]
; [else-branch: 4696 | True | live]
(push) ; 54
; [then-branch: 4696 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 4696 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
(pop) ; 46
(pop) ; 45
(pop) ; 44
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 4697 | !(p2_29@1211@01) | live]
; [else-branch: 4697 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 4697 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 45
(push) ; 45
; [else-branch: 4697 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
; [then-branch: 4698 | !(p2_29@1211@01) | dead]
; [else-branch: 4698 | p2_29@1211@01 | live]
(push) ; 44
; [else-branch: 4698 | p2_29@1211@01]
(pop) ; 44
(pop) ; 43
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 4699 | !(p1_29@1210@01) | live]
; [else-branch: 4699 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 4699 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 4699 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
; [then-branch: 4700 | !(p1_29@1210@01) | dead]
; [else-branch: 4700 | p1_29@1210@01 | live]
(push) ; 43
; [else-branch: 4700 | p1_29@1210@01]
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 4701 | !(p2_29@1211@01) | live]
; [else-branch: 4701 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 4701 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4701 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
; [then-branch: 4702 | !(p2_29@1211@01) | dead]
; [else-branch: 4702 | p2_29@1211@01 | live]
(push) ; 36
; [else-branch: 4702 | p2_29@1211@01]
(pop) ; 36
(pop) ; 35
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 4703 | !(p1_29@1210@01) | live]
; [else-branch: 4703 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 4703 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4703 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 4704 | !(p1_29@1210@01) | dead]
; [else-branch: 4704 | p1_29@1210@01 | live]
(push) ; 35
; [else-branch: 4704 | p1_29@1210@01]
(pop) ; 35
(pop) ; 34
; [eval] !(p2_32 && !except2_5)
; [eval] p2_32 && !except2_5
(push) ; 34
; [then-branch: 4705 | !(p2_32@1316@01) | live]
; [else-branch: 4705 | p2_32@1316@01 | live]
(push) ; 35
; [then-branch: 4705 | !(p2_32@1316@01)]
(assert (not p2_32@1316@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4705 | p2_32@1316@01]
; [eval] !except2_5
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 4706 | !(p2_32@1316@01) | dead]
; [else-branch: 4706 | p2_32@1316@01 | live]
(push) ; 34
; [else-branch: 4706 | p2_32@1316@01]
(pop) ; 34
(pop) ; 33
; [eval] !(p1_32 && !except1_5)
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 4707 | !(p1_32@1315@01) | live]
; [else-branch: 4707 | p1_32@1315@01 | live]
(push) ; 34
; [then-branch: 4707 | !(p1_32@1315@01)]
(assert (not p1_32@1315@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4707 | p1_32@1315@01]
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 4708 | !(p1_32@1315@01) | dead]
; [else-branch: 4708 | p1_32@1315@01 | live]
(push) ; 33
; [else-branch: 4708 | p1_32@1315@01]
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !p2_32
(push) ; 30
(set-option :timeout 10)
(assert (not p2_32@1316@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4709 | !(p2_32@1316@01) | dead]
; [else-branch: 4709 | p2_32@1316@01 | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 4709 | p2_32@1316@01]
(assert p2_32@1316@01)
(pop) ; 30
(pop) ; 29
; [eval] !p1_32
(push) ; 29
(set-option :timeout 10)
(assert (not p1_32@1315@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4710 | !(p1_32@1315@01) | dead]
; [else-branch: 4710 | p1_32@1315@01 | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 4710 | p1_32@1315@01]
(assert p1_32@1315@01)
(pop) ; 29
(pop) ; 28
; [eval] !p2_29
; [then-branch: 4711 | !(p2_29@1211@01) | dead]
; [else-branch: 4711 | p2_29@1211@01 | live]
(push) ; 28
; [else-branch: 4711 | p2_29@1211@01]
(pop) ; 28
(pop) ; 27
; [eval] !p1_29
; [then-branch: 4712 | !(p1_29@1210@01) | dead]
; [else-branch: 4712 | p1_29@1210@01 | live]
(push) ; 27
; [else-branch: 4712 | p1_29@1210@01]
(pop) ; 27
(pop) ; 26
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 26
; [then-branch: 4713 | !(p2_29@1211@01) | live]
; [else-branch: 4713 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 4713 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4713 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 4714 | !(p2_29@1211@01) | dead]
; [else-branch: 4714 | p2_29@1211@01 | live]
(push) ; 26
; [else-branch: 4714 | p2_29@1211@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 4715 | !(p1_29@1210@01) | live]
; [else-branch: 4715 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 4715 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4715 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 4716 | !(p1_29@1210@01) | dead]
; [else-branch: 4716 | p1_29@1210@01 | live]
(push) ; 25
; [else-branch: 4716 | p1_29@1210@01]
(pop) ; 25
(pop) ; 24
; [eval] !p2_29
; [then-branch: 4717 | !(p2_29@1211@01) | dead]
; [else-branch: 4717 | p2_29@1211@01 | live]
(push) ; 24
; [else-branch: 4717 | p2_29@1211@01]
(pop) ; 24
(pop) ; 23
; [eval] !p1_29
; [then-branch: 4718 | !(p1_29@1210@01) | dead]
; [else-branch: 4718 | p1_29@1210@01 | live]
(push) ; 23
; [else-branch: 4718 | p1_29@1210@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 4719 | !(p2_31@1300@01) | live]
; [else-branch: 4719 | p2_31@1300@01 | live]
(push) ; 17
; [then-branch: 4719 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4719 | p2_31@1300@01]
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 4720 | !(p2_31@1300@01) | dead]
; [else-branch: 4720 | p2_31@1300@01 | live]
(push) ; 16
; [else-branch: 4720 | p2_31@1300@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 15
; [then-branch: 4721 | !(p1_31@1299@01) | live]
; [else-branch: 4721 | p1_31@1299@01 | live]
(push) ; 16
; [then-branch: 4721 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4721 | p1_31@1299@01]
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 4722 | !(p1_31@1299@01) | dead]
; [else-branch: 4722 | p1_31@1299@01 | live]
(push) ; 15
; [else-branch: 4722 | p1_31@1299@01]
(pop) ; 15
(pop) ; 14
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 14
; [then-branch: 4723 | !(p2_31@1300@01) | live]
; [else-branch: 4723 | p2_31@1300@01 | live]
(push) ; 15
; [then-branch: 4723 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 15
(push) ; 15
; [else-branch: 4723 | p2_31@1300@01]
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 4724 | !(p2_31@1300@01) | dead]
; [else-branch: 4724 | p2_31@1300@01 | live]
(push) ; 14
; [else-branch: 4724 | p2_31@1300@01]
(pop) ; 14
(pop) ; 13
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 4725 | !(p1_31@1299@01) | live]
; [else-branch: 4725 | p1_31@1299@01 | live]
(push) ; 14
; [then-branch: 4725 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4725 | p1_31@1299@01]
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 4726 | !(p1_31@1299@01) | dead]
; [else-branch: 4726 | p1_31@1299@01 | live]
(push) ; 13
; [else-branch: 4726 | p1_31@1299@01]
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 4568 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 12
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 12
; [then-branch: 4727 | !(p2_31@1300@01) | live]
; [else-branch: 4727 | p2_31@1300@01 | live]
(push) ; 13
; [then-branch: 4727 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 13
(push) ; 13
; [else-branch: 4727 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_31@1300@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_31@1300@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4728 | !(p2_31@1300@01) | live]
; [else-branch: 4728 | p2_31@1300@01 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 4728 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 4729 | !(p1_31@1299@01) | live]
; [else-branch: 4729 | p1_31@1299@01 | live]
(push) ; 14
; [then-branch: 4729 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4729 | p1_31@1299@01]
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_31@1299@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4730 | p1_31@1299@01 | live]
; [else-branch: 4730 | !(p1_31@1299@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 4730 | p1_31@1299@01]
; [exec]
; inhale typeof(MyException_res_7) == MyException()
(declare-const $t@1321@01 $Snap)
(assert (= $t@1321@01 $Snap.unit))
; [eval] typeof(MyException_res_7) == MyException()
; [eval] typeof(MyException_res_7)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_8@1303@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_31 && !except2_5
(set-option :timeout 0)
(push) ; 14
; [then-branch: 4731 | !(p2_31@1300@01) | live]
; [else-branch: 4731 | p2_31@1300@01 | live]
(push) ; 15
; [then-branch: 4731 | !(p2_31@1300@01)]
(pop) ; 15
(push) ; 15
; [else-branch: 4731 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 4732 | p2_31@1300@01 | dead]
; [else-branch: 4732 | !(p2_31@1300@01) | live]
(push) ; 14
; [else-branch: 4732 | !(p2_31@1300@01)]
(pop) ; 14
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 14
; [then-branch: 4733 | !(p2_31@1300@01) | live]
; [else-branch: 4733 | p2_31@1300@01 | live]
(push) ; 15
; [then-branch: 4733 | !(p2_31@1300@01)]
(pop) ; 15
(push) ; 15
; [else-branch: 4733 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not p2_31@1300@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4734 | !(p2_31@1300@01) | live]
; [else-branch: 4734 | p2_31@1300@01 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 4734 | !(p2_31@1300@01)]
; [eval] p1_31 && !except1_5
(push) ; 15
; [then-branch: 4735 | !(p1_31@1299@01) | live]
; [else-branch: 4735 | p1_31@1299@01 | live]
(push) ; 16
; [then-branch: 4735 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4735 | p1_31@1299@01]
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_31@1299@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4736 | p1_31@1299@01 | live]
; [else-branch: 4736 | !(p1_31@1299@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4736 | p1_31@1299@01]
; [exec]
; _err := MyException_res_7
; [exec]
; except1_5 := true
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 4737 | !(p2_31@1300@01) | live]
; [else-branch: 4737 | p2_31@1300@01 | live]
(push) ; 17
; [then-branch: 4737 | !(p2_31@1300@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 4737 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 4738 | p2_31@1300@01 | dead]
; [else-branch: 4738 | !(p2_31@1300@01) | live]
(push) ; 16
; [else-branch: 4738 | !(p2_31@1300@01)]
(pop) ; 16
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 4739 | !(p2_31@1300@01) | live]
; [else-branch: 4739 | p2_31@1300@01 | live]
(push) ; 17
; [then-branch: 4739 | !(p2_31@1300@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 4739 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2_31@1300@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4740 | !(p2_31@1300@01) | live]
; [else-branch: 4740 | p2_31@1300@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4740 | !(p2_31@1300@01)]
; [exec]
; tmp_9 := new()
(declare-const tmp_9@1322@01 $Ref)
(assert (not (= tmp_9@1322@01 $Ref.null)))
(assert (not (= tmp_9@1322@01 tmp_8@1303@01)))
(assert (not (= tmp_9@1322@01 MyException2_res_0@1246@01)))
(assert (not (= tmp_9@1322@01 error_6_0@1237@01)))
(assert (not (= tmp_9@1322@01 MyException_res_7_0@1245@01)))
(assert (not (= tmp_9@1322@01 c_2@1220@01)))
(assert (not (= tmp_9@1322@01 tmp_9@1283@01)))
(assert (not (= tmp_9@1322@01 error_6@1236@01)))
(assert (not (= tmp_9@1322@01 cl@1230@01)))
(assert (not (= tmp_9@1322@01 cl_0@1231@01)))
(assert (not (= tmp_9@1322@01 error_5_0@1233@01)))
(assert (not (= tmp_9@1322@01 error_5@1232@01)))
(assert (not (= tmp_9@1322@01 i_0_0@1219@01)))
(assert (not (= tmp_9@1322@01 _cthread_163_0@1213@01)))
(assert (not (= tmp_9@1322@01 _cthread_163@1212@01)))
(assert (not (= tmp_9@1322@01 Container_value@1293@01)))
(assert (not (= tmp_9@1322@01 i_0@1218@01)))
(assert (not (= tmp_9@1322@01 Container_valuep@1294@01)))
(assert (not (= tmp_9@1322@01 c_2_0@1221@01)))
(assert (not (= tmp_9@1322@01 MyException2_res_0_0@1247@01)))
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 4741 | !(p3_14@1301@01) | live]
; [else-branch: 4741 | p3_14@1301@01 | live]
(push) ; 18
; [then-branch: 4741 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4741 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p3_14@1301@01 (not p3_14@1301@01)))
; [then-branch: 4742 | False | dead]
; [else-branch: 4742 | True | live]
(push) ; 17
; [else-branch: 4742 | True]
(pop) ; 17
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 4743 | !(p3_14@1301@01) | live]
; [else-branch: 4743 | p3_14@1301@01 | live]
(push) ; 18
; [then-branch: 4743 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4743 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4744 | True | live]
; [else-branch: 4744 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 4744 | True]
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 4745 | !(p4_14@1302@01) | live]
; [else-branch: 4745 | p4_14@1302@01 | live]
(push) ; 19
; [then-branch: 4745 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 19
(push) ; 19
; [else-branch: 4745 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p4_14@1302@01 (not p4_14@1302@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p4_14@1302@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not p4_14@1302@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4746 | p4_14@1302@01 | live]
; [else-branch: 4746 | !(p4_14@1302@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 4746 | p4_14@1302@01]
(assert p4_14@1302@01)
; [exec]
; MyException2_res_0_0 := tmp_9
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 4747 | !(p3_14@1301@01) | live]
; [else-branch: 4747 | p3_14@1301@01 | live]
(push) ; 20
; [then-branch: 4747 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4747 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 4748 | False | dead]
; [else-branch: 4748 | True | live]
(push) ; 19
; [else-branch: 4748 | True]
(pop) ; 19
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 4749 | !(p3_14@1301@01) | live]
; [else-branch: 4749 | p3_14@1301@01 | live]
(push) ; 20
; [then-branch: 4749 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4749 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4750 | True | live]
; [else-branch: 4750 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4750 | True]
; [eval] p4_14 && !except2_5
(push) ; 20
; [then-branch: 4751 | !(p4_14@1302@01) | live]
; [else-branch: 4751 | p4_14@1302@01 | live]
(push) ; 21
; [then-branch: 4751 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4751 | p4_14@1302@01]
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p4_14@1302@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4752 | p4_14@1302@01 | live]
; [else-branch: 4752 | !(p4_14@1302@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4752 | p4_14@1302@01]
; [exec]
; inhale typeof(MyException2_res_0_0) == MyException2()
(declare-const $t@1323@01 $Snap)
(assert (= $t@1323@01 $Snap.unit))
; [eval] typeof(MyException2_res_0_0) == MyException2()
; [eval] typeof(MyException2_res_0_0)
; [eval] MyException2()
(assert (= (typeof<PyType> tmp_9@1322@01) (as MyException2<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p3_14 && !except1_5
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4753 | !(p3_14@1301@01) | live]
; [else-branch: 4753 | p3_14@1301@01 | live]
(push) ; 22
; [then-branch: 4753 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4753 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 4754 | False | dead]
; [else-branch: 4754 | True | live]
(push) ; 21
; [else-branch: 4754 | True]
(pop) ; 21
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 21
; [then-branch: 4755 | !(p3_14@1301@01) | live]
; [else-branch: 4755 | p3_14@1301@01 | live]
(push) ; 22
; [then-branch: 4755 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4755 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4756 | True | live]
; [else-branch: 4756 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4756 | True]
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 4757 | !(p4_14@1302@01) | live]
; [else-branch: 4757 | p4_14@1302@01 | live]
(push) ; 23
; [then-branch: 4757 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4757 | p4_14@1302@01]
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p4_14@1302@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4758 | p4_14@1302@01 | live]
; [else-branch: 4758 | !(p4_14@1302@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4758 | p4_14@1302@01]
; [exec]
; _err_6 := MyException2_res_0_0
; [exec]
; except2_5 := true
; [exec]
; thisexcept1_5 := except1_5 && !bypass1_6
; [eval] except1_5 && !bypass1_6
(push) ; 23
; [then-branch: 4759 | False | live]
; [else-branch: 4759 | True | live]
(push) ; 24
; [then-branch: 4759 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4759 | True]
; [eval] !bypass1_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_5@1324@01 Bool)
(assert (= thisexcept1_5@1324@01 (not bypass1_6@1297@01)))
; [exec]
; thisexcept2_5 := except2_5 && !bypass2_6
; [eval] except2_5 && !bypass2_6
(push) ; 23
; [then-branch: 4760 | False | live]
; [else-branch: 4760 | True | live]
(push) ; 24
; [then-branch: 4760 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4760 | True]
; [eval] !bypass2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_5@1325@01 Bool)
(assert (= thisexcept2_5@1325@01 (not bypass2_6@1298@01)))
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4761 | p1_29@1210@01 | live]
; [else-branch: 4761 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4761 | p1_29@1210@01]
; [exec]
; tmp_except1_2 := except1_5
; [exec]
; except1_5 := oldexcept1_2
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4762 | p2_29@1211@01 | live]
; [else-branch: 4762 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4762 | p2_29@1211@01]
; [exec]
; tmp_except2_2 := except2_5
; [exec]
; except2_5 := oldexcept2_2
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 4763 | !(p1_29@1210@01) | live]
; [else-branch: 4763 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 4763 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4763 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4764 | p1_29@1210@01 | live]
; [else-branch: 4764 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4764 | p1_29@1210@01]
; [exec]
; cl := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 26
(pop) ; 26
; Joined path conditions
(declare-const cl@1326@01 $Ref)
(assert (= cl@1326@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; inhale _isDefined(27747)
(declare-const $t@1327@01 $Snap)
(assert (= $t@1327@01 $Snap.unit))
; [eval] _isDefined(27747)
(push) ; 26
(assert (_isDefined%precondition $Snap.unit 27747))
(pop) ; 26
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 27747))
(assert (_isDefined $Snap.unit 27747))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_29 && !except2_5
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4765 | !(p2_29@1211@01) | live]
; [else-branch: 4765 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 4765 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4765 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4766 | p2_29@1211@01 | live]
; [else-branch: 4766 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4766 | p2_29@1211@01]
; [exec]
; cl_0 := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 27
(pop) ; 27
; Joined path conditions
(declare-const cl_0@1328@01 $Ref)
(assert (= cl_0@1328@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; inhale true
(declare-const $t@1329@01 $Snap)
(assert (= $t@1329@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4767 | p1_29@1210@01 | live]
; [else-branch: 4767 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4767 | p1_29@1210@01]
; [exec]
; except1_5 := except1_5 || tmp_except1_2
; [eval] except1_5 || tmp_except1_2
(push) ; 28
; [then-branch: 4768 | False | live]
; [else-branch: 4768 | True | live]
(push) ; 29
; [then-branch: 4768 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 4768 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4769 | p2_29@1211@01 | live]
; [else-branch: 4769 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4769 | p2_29@1211@01]
; [exec]
; except2_5 := except2_5 || tmp_except2_2
; [eval] except2_5 || tmp_except2_2
(push) ; 29
; [then-branch: 4770 | False | live]
; [else-branch: 4770 | True | live]
(push) ; 30
; [then-branch: 4770 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4770 | True]
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [exec]
; thisexcept1_6 := except1_5 && !bypass1_5
; [eval] except1_5 && !bypass1_5
(push) ; 29
; [then-branch: 4771 | False | live]
; [else-branch: 4771 | True | live]
(push) ; 30
; [then-branch: 4771 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4771 | True]
; [eval] !bypass1_5
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_6@1330@01 Bool)
(assert (= thisexcept1_6@1330@01 (not bypass1_5@1295@01)))
; [exec]
; thisexcept2_6 := except2_5 && !bypass2_5
; [eval] except2_5 && !bypass2_5
(push) ; 29
; [then-branch: 4772 | False | live]
; [else-branch: 4772 | True | live]
(push) ; 30
; [then-branch: 4772 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4772 | True]
; [eval] !bypass2_5
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_6@1331@01 Bool)
(assert (= thisexcept2_6@1331@01 (not bypass2_5@1296@01)))
; [exec]
; p1_32 := p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
(push) ; 29
; [then-branch: 4773 | !(p1_29@1210@01) | live]
; [else-branch: 4773 | p1_29@1210@01 | live]
(push) ; 30
; [then-branch: 4773 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4773 | p1_29@1210@01]
(push) ; 31
; [then-branch: 4774 | !(thisexcept1_6@1330@01) | live]
; [else-branch: 4774 | thisexcept1_6@1330@01 | live]
(push) ; 32
; [then-branch: 4774 | !(thisexcept1_6@1330@01)]
(assert (not thisexcept1_6@1330@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4774 | thisexcept1_6@1330@01]
(assert thisexcept1_6@1330@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1330@01 (not thisexcept1_6@1330@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p1_29@1210@01 (or thisexcept1_6@1330@01 (not thisexcept1_6@1330@01))))
(declare-const p1_32@1332@01 Bool)
(assert (=
  p1_32@1332@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1330@01
      (issubtype<Bool> (typeof<PyType> tmp_8@1303@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_32 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
(push) ; 29
; [then-branch: 4775 | !(p2_29@1211@01) | live]
; [else-branch: 4775 | p2_29@1211@01 | live]
(push) ; 30
; [then-branch: 4775 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4775 | p2_29@1211@01]
(push) ; 31
; [then-branch: 4776 | !(thisexcept2_6@1331@01) | live]
; [else-branch: 4776 | thisexcept2_6@1331@01 | live]
(push) ; 32
; [then-branch: 4776 | !(thisexcept2_6@1331@01)]
(assert (not thisexcept2_6@1331@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4776 | thisexcept2_6@1331@01]
(assert thisexcept2_6@1331@01)
; [eval] issubtype(typeof(_err_6), MyException())
; [eval] typeof(_err_6)
; [eval] MyException()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_6@1331@01 (not thisexcept2_6@1331@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p2_29@1211@01 (or thisexcept2_6@1331@01 (not thisexcept2_6@1331@01))))
(declare-const p2_32@1333@01 Bool)
(assert (=
  p2_32@1333@01
  (and
    p2_29@1211@01
    (and
      thisexcept2_6@1331@01
      (issubtype<Bool> (typeof<PyType> tmp_9@1322@01) (as MyException<PyType>  PyType))))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_32@1332@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not p1_32@1332@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4777 | p1_32@1332@01 | live]
; [else-branch: 4777 | !(p1_32@1332@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4777 | p1_32@1332@01]
(assert p1_32@1332@01)
; [exec]
; except1_5 := false
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_32@1333@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4778 | p2_32@1333@01 | dead]
; [else-branch: 4778 | !(p2_32@1333@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 4778 | !(p2_32@1333@01)]
(assert (not p2_32@1333@01))
(pop) ; 30
; [eval] !p2_32
(push) ; 30
(set-option :timeout 10)
(assert (not p2_32@1333@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_32@1333@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4779 | !(p2_32@1333@01) | live]
; [else-branch: 4779 | p2_32@1333@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4779 | !(p2_32@1333@01)]
(assert (not p2_32@1333@01))
; [exec]
; p1_33 := p1_32 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_32 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 31
; [then-branch: 4780 | !(p1_32@1332@01) | live]
; [else-branch: 4780 | p1_32@1332@01 | live]
(push) ; 32
; [then-branch: 4780 | !(p1_32@1332@01)]
(assert (not p1_32@1332@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4780 | p1_32@1332@01]
; [eval] !except1_5
(push) ; 33
; [then-branch: 4781 | False | live]
; [else-branch: 4781 | True | live]
(push) ; 34
; [then-branch: 4781 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4781 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or p1_32@1332@01 (not p1_32@1332@01)))
; [exec]
; p2_33 := p2_32 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_32 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 31
; [then-branch: 4782 | !(p2_32@1333@01) | live]
; [else-branch: 4782 | p2_32@1333@01 | live]
(push) ; 32
; [then-branch: 4782 | !(p2_32@1333@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 4782 | p2_32@1333@01]
(assert p2_32@1333@01)
; [eval] !except2_5
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or p2_32@1333@01 (not p2_32@1333@01)))
; [exec]
; p3_15 := p1_32 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_32 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 31
; [then-branch: 4783 | !(p1_32@1332@01) | live]
; [else-branch: 4783 | p1_32@1332@01 | live]
(push) ; 32
; [then-branch: 4783 | !(p1_32@1332@01)]
(assert (not p1_32@1332@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4783 | p1_32@1332@01]
; [eval] !except1_5
(push) ; 33
; [then-branch: 4784 | False | live]
; [else-branch: 4784 | True | live]
(push) ; 34
; [then-branch: 4784 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4784 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [exec]
; p4_15 := p2_32 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_32 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 31
; [then-branch: 4785 | !(p2_32@1333@01) | live]
; [else-branch: 4785 | p2_32@1333@01 | live]
(push) ; 32
; [then-branch: 4785 | !(p2_32@1333@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 4785 | p2_32@1333@01]
(assert p2_32@1333@01)
; [eval] !except2_5
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p1_33 && !except1_5
; [then-branch: 4786 | False | dead]
; [else-branch: 4786 | True | live]
(push) ; 31
; [else-branch: 4786 | True]
(pop) ; 31
; [eval] !(p1_33 && !except1_5)
; [eval] p1_33 && !except1_5
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4787 | True | live]
; [else-branch: 4787 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4787 | True]
; [eval] p2_33 && !except2_5
; [then-branch: 4788 | False | dead]
; [else-branch: 4788 | True | live]
(push) ; 32
; [else-branch: 4788 | True]
(pop) ; 32
; [eval] !(p2_33 && !except2_5)
; [eval] p2_33 && !except2_5
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4789 | True | live]
; [else-branch: 4789 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4789 | True]
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 4790 | !(p1_32@1332@01) | live]
; [else-branch: 4790 | p1_32@1332@01 | live]
(push) ; 34
; [then-branch: 4790 | !(p1_32@1332@01)]
(assert (not p1_32@1332@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4790 | p1_32@1332@01]
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_32@1332@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4791 | p1_32@1332@01 | live]
; [else-branch: 4791 | !(p1_32@1332@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4791 | p1_32@1332@01]
; [exec]
; c_6.Container_value := __prim__int___box__(int___add__(int___unbox__(c_6.Container_value),
;   8))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_6.Container_value), 8))
; [eval] int___add__(int___unbox__(c_6.Container_value), 8)
; [eval] int___unbox__(c_6.Container_value)
(push) ; 34
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 35
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@1293@01))
(pop) ; 34
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@1293@01)))
(push) ; 34
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 8))
(pop) ; 34
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 8))
(push) ; 34
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 8)))
(pop) ; 34
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 8)))
(declare-const Container_value@1334@01 $Ref)
(assert (=
  Container_value@1334@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 8))))
; [eval] p2_32 && !except2_5
(push) ; 34
; [then-branch: 4792 | !(p2_32@1333@01) | live]
; [else-branch: 4792 | p2_32@1333@01 | live]
(push) ; 35
; [then-branch: 4792 | !(p2_32@1333@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 4792 | p2_32@1333@01]
(assert p2_32@1333@01)
; [eval] !except2_5
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 4793 | False | dead]
; [else-branch: 4793 | True | live]
(push) ; 34
; [else-branch: 4793 | True]
(pop) ; 34
; [eval] !(p2_32 && !except2_5)
; [eval] p2_32 && !except2_5
(push) ; 34
; [then-branch: 4794 | !(p2_32@1333@01) | live]
; [else-branch: 4794 | p2_32@1333@01 | live]
(push) ; 35
; [then-branch: 4794 | !(p2_32@1333@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 4794 | p2_32@1333@01]
(assert p2_32@1333@01)
; [eval] !except2_5
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4795 | True | live]
; [else-branch: 4795 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4795 | True]
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 4796 | !(p1_29@1210@01) | live]
; [else-branch: 4796 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 4796 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4796 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4797 | p1_29@1210@01 | live]
; [else-branch: 4797 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4797 | p1_29@1210@01]
; [exec]
; _err := null
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 4798 | !(p2_29@1211@01) | live]
; [else-branch: 4798 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 4798 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4798 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
; [then-branch: 4799 | False | dead]
; [else-branch: 4799 | True | live]
(push) ; 36
; [else-branch: 4799 | True]
(pop) ; 36
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 4800 | !(p2_29@1211@01) | live]
; [else-branch: 4800 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 4800 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4800 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4801 | True | live]
; [else-branch: 4801 | False | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 4801 | True]
; [exec]
; p1_34 := p1_29 &&
;   (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
(push) ; 37
; [then-branch: 4802 | !(p1_29@1210@01) | live]
; [else-branch: 4802 | p1_29@1210@01 | live]
(push) ; 38
; [then-branch: 4802 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4802 | p1_29@1210@01]
(push) ; 39
; [then-branch: 4803 | !(thisexcept1_6@1330@01) | live]
; [else-branch: 4803 | thisexcept1_6@1330@01 | live]
(push) ; 40
; [then-branch: 4803 | !(thisexcept1_6@1330@01)]
(assert (not thisexcept1_6@1330@01))
(pop) ; 40
(push) ; 40
; [else-branch: 4803 | thisexcept1_6@1330@01]
(assert thisexcept1_6@1330@01)
; [eval] issubtype(typeof(_err), MyException2())
; [eval] typeof(_err)
; [eval] MyException2()
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1330@01 (not thisexcept1_6@1330@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(declare-const p1_34@1335@01 Bool)
(assert (=
  p1_34@1335@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1330@01
      (issubtype<Bool> (typeof<PyType> $Ref.null) (as MyException2<PyType>  PyType))))))
; [exec]
; p2_34 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
(push) ; 37
; [then-branch: 4804 | !(p2_29@1211@01) | live]
; [else-branch: 4804 | p2_29@1211@01 | live]
(push) ; 38
; [then-branch: 4804 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4804 | p2_29@1211@01]
(push) ; 39
; [then-branch: 4805 | !(thisexcept2_6@1331@01) | live]
; [else-branch: 4805 | thisexcept2_6@1331@01 | live]
(push) ; 40
; [then-branch: 4805 | !(thisexcept2_6@1331@01)]
(assert (not thisexcept2_6@1331@01))
(pop) ; 40
(push) ; 40
; [else-branch: 4805 | thisexcept2_6@1331@01]
(assert thisexcept2_6@1331@01)
; [eval] issubtype(typeof(_err_6), MyException2())
; [eval] typeof(_err_6)
; [eval] MyException2()
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_6@1331@01 (not thisexcept2_6@1331@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(declare-const p2_34@1336@01 Bool)
(assert (=
  p2_34@1336@01
  (and
    p2_29@1211@01
    (and
      thisexcept2_6@1331@01
      (issubtype<Bool> (typeof<PyType> tmp_9@1322@01) (as MyException2<PyType>  PyType))))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_34@1335@01)))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4806 | p1_34@1335@01 | dead]
; [else-branch: 4806 | !(p1_34@1335@01) | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 4806 | !(p1_34@1335@01)]
(assert (not p1_34@1335@01))
(pop) ; 37
; [eval] !p1_34
(push) ; 37
(set-option :timeout 10)
(assert (not p1_34@1335@01))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_34@1335@01)))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4807 | !(p1_34@1335@01) | live]
; [else-branch: 4807 | p1_34@1335@01 | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4807 | !(p1_34@1335@01)]
(assert (not p1_34@1335@01))
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_34@1336@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not p2_34@1336@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4808 | p2_34@1336@01 | live]
; [else-branch: 4808 | !(p2_34@1336@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 4808 | p2_34@1336@01]
(assert p2_34@1336@01)
; [exec]
; except2_5 := false
; [exec]
; p1_35 := p1_34 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_34 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 39
; [then-branch: 4809 | !(p1_34@1335@01) | live]
; [else-branch: 4809 | p1_34@1335@01 | live]
(push) ; 40
; [then-branch: 4809 | !(p1_34@1335@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 4809 | p1_34@1335@01]
(assert p1_34@1335@01)
; [eval] !except1_5
(push) ; 41
; [then-branch: 4810 | False | live]
; [else-branch: 4810 | True | live]
(push) ; 42
; [then-branch: 4810 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4810 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or p1_34@1335@01 (not p1_34@1335@01)))
; [exec]
; p2_35 := p2_34 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_34 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 39
; [then-branch: 4811 | !(p2_34@1336@01) | live]
; [else-branch: 4811 | p2_34@1336@01 | live]
(push) ; 40
; [then-branch: 4811 | !(p2_34@1336@01)]
(assert (not p2_34@1336@01))
(pop) ; 40
(push) ; 40
; [else-branch: 4811 | p2_34@1336@01]
; [eval] !except2_5
(push) ; 41
; [then-branch: 4812 | False | live]
; [else-branch: 4812 | True | live]
(push) ; 42
; [then-branch: 4812 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4812 | True]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or p2_34@1336@01 (not p2_34@1336@01)))
; [exec]
; p3_16 := p1_34 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_34 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 39
; [then-branch: 4813 | !(p1_34@1335@01) | live]
; [else-branch: 4813 | p1_34@1335@01 | live]
(push) ; 40
; [then-branch: 4813 | !(p1_34@1335@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 4813 | p1_34@1335@01]
(assert p1_34@1335@01)
; [eval] !except1_5
(push) ; 41
; [then-branch: 4814 | False | live]
; [else-branch: 4814 | True | live]
(push) ; 42
; [then-branch: 4814 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4814 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [exec]
; p4_16 := p2_34 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_34 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 39
; [then-branch: 4815 | !(p2_34@1336@01) | live]
; [else-branch: 4815 | p2_34@1336@01 | live]
(push) ; 40
; [then-branch: 4815 | !(p2_34@1336@01)]
(assert (not p2_34@1336@01))
(pop) ; 40
(push) ; 40
; [else-branch: 4815 | p2_34@1336@01]
; [eval] !except2_5
(push) ; 41
; [then-branch: 4816 | False | live]
; [else-branch: 4816 | True | live]
(push) ; 42
; [then-branch: 4816 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4816 | True]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [eval] p1_35 && !except1_5
; [then-branch: 4817 | False | dead]
; [else-branch: 4817 | True | live]
(push) ; 39
; [else-branch: 4817 | True]
(pop) ; 39
; [eval] !(p1_35 && !except1_5)
; [eval] p1_35 && !except1_5
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4818 | True | live]
; [else-branch: 4818 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4818 | True]
; [eval] p2_35 && !except2_5
; [then-branch: 4819 | False | dead]
; [else-branch: 4819 | True | live]
(push) ; 40
; [else-branch: 4819 | True]
(pop) ; 40
; [eval] !(p2_35 && !except2_5)
; [eval] p2_35 && !except2_5
(push) ; 40
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4820 | True | live]
; [else-branch: 4820 | False | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4820 | True]
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 4821 | !(p1_34@1335@01) | live]
; [else-branch: 4821 | p1_34@1335@01 | live]
(push) ; 42
; [then-branch: 4821 | !(p1_34@1335@01)]
(pop) ; 42
(push) ; 42
; [else-branch: 4821 | p1_34@1335@01]
(assert p1_34@1335@01)
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
; [then-branch: 4822 | p1_34@1335@01 | dead]
; [else-branch: 4822 | !(p1_34@1335@01) | live]
(push) ; 41
; [else-branch: 4822 | !(p1_34@1335@01)]
(pop) ; 41
; [eval] !(p1_34 && !except1_5)
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 4823 | !(p1_34@1335@01) | live]
; [else-branch: 4823 | p1_34@1335@01 | live]
(push) ; 42
; [then-branch: 4823 | !(p1_34@1335@01)]
(pop) ; 42
(push) ; 42
; [else-branch: 4823 | p1_34@1335@01]
(assert p1_34@1335@01)
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not p1_34@1335@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4824 | !(p1_34@1335@01) | live]
; [else-branch: 4824 | p1_34@1335@01 | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4824 | !(p1_34@1335@01)]
; [eval] p2_34 && !except2_5
(push) ; 42
; [then-branch: 4825 | !(p2_34@1336@01) | live]
; [else-branch: 4825 | p2_34@1336@01 | live]
(push) ; 43
; [then-branch: 4825 | !(p2_34@1336@01)]
(assert (not p2_34@1336@01))
(pop) ; 43
(push) ; 43
; [else-branch: 4825 | p2_34@1336@01]
; [eval] !except2_5
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_34@1336@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4826 | p2_34@1336@01 | live]
; [else-branch: 4826 | !(p2_34@1336@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4826 | p2_34@1336@01]
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(int___add__(int___unbox__(c_6_0.Container_valuep),
;   18))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_6_0.Container_valuep), 18))
; [eval] int___add__(int___unbox__(c_6_0.Container_valuep), 18)
; [eval] int___unbox__(c_6_0.Container_valuep)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_valuep@1294@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_valuep@1294@01)))
(push) ; 43
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 18))
(pop) ; 43
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 18))
(push) ; 43
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 18)))
(pop) ; 43
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 18)))
(declare-const Container_valuep@1337@01 $Ref)
(assert (=
  Container_valuep@1337@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 18))))
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 4827 | !(p1_29@1210@01) | live]
; [else-branch: 4827 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 4827 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 4827 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4828 | p1_29@1210@01 | live]
; [else-branch: 4828 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 4828 | p1_29@1210@01]
; [exec]
; _err := null
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 4829 | !(p2_29@1211@01) | live]
; [else-branch: 4829 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 4829 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 45
(push) ; 45
; [else-branch: 4829 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4830 | p2_29@1211@01 | live]
; [else-branch: 4830 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 4830 | p2_29@1211@01]
; [exec]
; _err_6 := null
; [exec]
; assert (p1_29 ==> !except1_5) && (p2_29 ==> !except2_5)
; [eval] p1_29 ==> !except1_5
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4831 | p1_29@1210@01 | live]
; [else-branch: 4831 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4831 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> !except2_5
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4832 | p2_29@1211@01 | live]
; [else-branch: 4832 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4832 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p1_29 ==> true
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4833 | p1_29@1210@01 | live]
; [else-branch: 4833 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4833 | p1_29@1210@01]
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> true
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4834 | p2_29@1211@01 | live]
; [else-branch: 4834 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4834 | p2_29@1211@01]
(pop) ; 46
(pop) ; 45
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4835 | p1_29@1210@01 | live]
; [else-branch: 4835 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 4835 | p1_29@1210@01]
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4836 | p2_29@1211@01 | live]
; [else-branch: 4836 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4836 | p2_29@1211@01]
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4837 | p1_29@1210@01 | live]
; [else-branch: 4837 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4837 | p1_29@1210@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1334@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1334@01) (as int<PyType>  PyType))))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4838 | p2_29@1211@01 | live]
; [else-branch: 4838 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4838 | p2_29@1211@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1337@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1337@01) (as int<PyType>  PyType))))
; [eval] p1_29 ==> int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4839 | p1_29@1210@01 | live]
; [else-branch: 4839 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4839 | p1_29@1210@01]
; [eval] int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4840 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 4840 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 4840 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] __prim__int___box__(20)
(push) ; 51
(assert (__prim__int___box__%precondition $Snap.unit 20))
(pop) ; 51
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 20))
(push) ; 51
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1334@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1334@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1334@01 (__prim__int___box__ $Snap.unit 20)))
(pop) ; 51
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1334@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1334@01 (__prim__int___box__ $Snap.unit 20))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (__prim__int___box__%precondition $Snap.unit 20)
    (issubtype<Bool> (typeof<PyType> Container_value@1334@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1334@01 (__prim__int___box__ $Snap.unit 20)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
        (__prim__int___box__%precondition $Snap.unit 20)
        (issubtype<Bool> (typeof<PyType> Container_value@1334@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1334@01 (__prim__int___box__ $Snap.unit 20))))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 47
(assert (not (=>
  (and
    p1_29@1210@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1334@01 (__prim__int___box__ $Snap.unit 20)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_29@1210@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1334@01 (__prim__int___box__ $Snap.unit 20))))
; [eval] p2_29 ==> int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4841 | p2_29@1211@01 | live]
; [else-branch: 4841 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4841 | p2_29@1211@01]
; [eval] int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4842 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 4842 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 4842 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p1_29 ==> !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4843 | p1_29@1210@01 | live]
; [else-branch: 4843 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4843 | p1_29@1210@01]
; [eval] !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] !int___eq__(i_0, __prim__int___box__(0))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4844 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | dead]
; [else-branch: 4844 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 4844 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
; [eval] p2_29 ==> !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4845 | p2_29@1211@01 | live]
; [else-branch: 4845 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4845 | p2_29@1211@01]
; [eval] !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
; [eval] !int___eq__(i_0_0, __prim__int___box__(0))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4846 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | live]
; [else-branch: 4846 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 4846 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
; [eval] __prim__int___box__(30)
(push) ; 51
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 51
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(push) ; 51
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@1337@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@1337@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1337@01 (__prim__int___box__ $Snap.unit 30)))
(pop) ; 51
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@1337@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1337@01 (__prim__int___box__ $Snap.unit 30))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
    (__prim__int___box__%precondition $Snap.unit 30)
    (issubtype<Bool> (typeof<PyType> Container_valuep@1337@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1337@01 (__prim__int___box__ $Snap.unit 30)))))
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
      (and
        (not
          (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
        (__prim__int___box__%precondition $Snap.unit 30)
        (issubtype<Bool> (typeof<PyType> Container_valuep@1337@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1337@01 (__prim__int___box__ $Snap.unit 30))))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))))
(push) ; 47
(assert (not (=>
  (and
    p2_29@1211@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1337@01 (__prim__int___box__ $Snap.unit 30)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p2_29@1211@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1337@01 (__prim__int___box__ $Snap.unit 30))))
; [eval] p1_29 ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4847 | p1_29@1210@01 | live]
; [else-branch: 4847 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4847 | p1_29@1210@01]
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
(push) ; 49
; [then-branch: 4848 | False | live]
; [else-branch: 4848 | True | live]
(push) ; 50
; [then-branch: 4848 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 4848 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
(push) ; 51
; [then-branch: 4849 | False | live]
; [else-branch: 4849 | True | live]
(push) ; 52
; [then-branch: 4849 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 4849 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
(push) ; 53
; [then-branch: 4850 | False | live]
; [else-branch: 4850 | True | live]
(push) ; 54
; [then-branch: 4850 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 4850 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_29 ==> (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4851 | p2_29@1211@01 | live]
; [else-branch: 4851 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4851 | p2_29@1211@01]
; [eval] (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false)
(push) ; 49
; [then-branch: 4852 | False | live]
; [else-branch: 4852 | True | live]
(push) ; 50
; [then-branch: 4852 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 4852 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false)
(push) ; 51
; [then-branch: 4853 | False | live]
; [else-branch: 4853 | True | live]
(push) ; 52
; [then-branch: 4853 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 4853 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false)
(push) ; 53
; [then-branch: 4854 | False | live]
; [else-branch: 4854 | True | live]
(push) ; 54
; [then-branch: 4854 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 4854 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
(pop) ; 46
(pop) ; 45
(pop) ; 44
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 4855 | !(p2_29@1211@01) | live]
; [else-branch: 4855 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 4855 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 45
(push) ; 45
; [else-branch: 4855 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
; [then-branch: 4856 | !(p2_29@1211@01) | dead]
; [else-branch: 4856 | p2_29@1211@01 | live]
(push) ; 44
; [else-branch: 4856 | p2_29@1211@01]
(pop) ; 44
(pop) ; 43
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 4857 | !(p1_29@1210@01) | live]
; [else-branch: 4857 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 4857 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 4857 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
; [then-branch: 4858 | !(p1_29@1210@01) | dead]
; [else-branch: 4858 | p1_29@1210@01 | live]
(push) ; 43
; [else-branch: 4858 | p1_29@1210@01]
(pop) ; 43
(pop) ; 42
; [eval] !(p2_34 && !except2_5)
; [eval] p2_34 && !except2_5
(push) ; 42
; [then-branch: 4859 | !(p2_34@1336@01) | live]
; [else-branch: 4859 | p2_34@1336@01 | live]
(push) ; 43
; [then-branch: 4859 | !(p2_34@1336@01)]
(assert (not p2_34@1336@01))
(pop) ; 43
(push) ; 43
; [else-branch: 4859 | p2_34@1336@01]
; [eval] !except2_5
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
; [then-branch: 4860 | !(p2_34@1336@01) | dead]
; [else-branch: 4860 | p2_34@1336@01 | live]
(push) ; 42
; [else-branch: 4860 | p2_34@1336@01]
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
; [eval] !p2_34
(push) ; 38
(set-option :timeout 10)
(assert (not p2_34@1336@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4861 | !(p2_34@1336@01) | dead]
; [else-branch: 4861 | p2_34@1336@01 | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 4861 | p2_34@1336@01]
(assert p2_34@1336@01)
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 4862 | !(p1_29@1210@01) | live]
; [else-branch: 4862 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 4862 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4862 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 4863 | !(p1_29@1210@01) | dead]
; [else-branch: 4863 | p1_29@1210@01 | live]
(push) ; 35
; [else-branch: 4863 | p1_29@1210@01]
(pop) ; 35
(pop) ; 34
(pop) ; 33
; [eval] !(p1_32 && !except1_5)
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 4864 | !(p1_32@1332@01) | live]
; [else-branch: 4864 | p1_32@1332@01 | live]
(push) ; 34
; [then-branch: 4864 | !(p1_32@1332@01)]
(assert (not p1_32@1332@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4864 | p1_32@1332@01]
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 4865 | !(p1_32@1332@01) | dead]
; [else-branch: 4865 | p1_32@1332@01 | live]
(push) ; 33
; [else-branch: 4865 | p1_32@1332@01]
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !p1_32
(push) ; 29
(set-option :timeout 10)
(assert (not p1_32@1332@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4866 | !(p1_32@1332@01) | dead]
; [else-branch: 4866 | p1_32@1332@01 | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 4866 | p1_32@1332@01]
(assert p1_32@1332@01)
(pop) ; 29
(pop) ; 28
; [eval] !p2_29
; [then-branch: 4867 | !(p2_29@1211@01) | dead]
; [else-branch: 4867 | p2_29@1211@01 | live]
(push) ; 28
; [else-branch: 4867 | p2_29@1211@01]
(pop) ; 28
(pop) ; 27
; [eval] !p1_29
; [then-branch: 4868 | !(p1_29@1210@01) | dead]
; [else-branch: 4868 | p1_29@1210@01 | live]
(push) ; 27
; [else-branch: 4868 | p1_29@1210@01]
(pop) ; 27
(pop) ; 26
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 26
; [then-branch: 4869 | !(p2_29@1211@01) | live]
; [else-branch: 4869 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 4869 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4869 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 4870 | !(p2_29@1211@01) | dead]
; [else-branch: 4870 | p2_29@1211@01 | live]
(push) ; 26
; [else-branch: 4870 | p2_29@1211@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 4871 | !(p1_29@1210@01) | live]
; [else-branch: 4871 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 4871 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4871 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 4872 | !(p1_29@1210@01) | dead]
; [else-branch: 4872 | p1_29@1210@01 | live]
(push) ; 25
; [else-branch: 4872 | p1_29@1210@01]
(pop) ; 25
(pop) ; 24
; [eval] !p2_29
; [then-branch: 4873 | !(p2_29@1211@01) | dead]
; [else-branch: 4873 | p2_29@1211@01 | live]
(push) ; 24
; [else-branch: 4873 | p2_29@1211@01]
(pop) ; 24
(pop) ; 23
; [eval] !p1_29
; [then-branch: 4874 | !(p1_29@1210@01) | dead]
; [else-branch: 4874 | p1_29@1210@01 | live]
(push) ; 23
; [else-branch: 4874 | p1_29@1210@01]
(pop) ; 23
(pop) ; 22
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 4875 | !(p4_14@1302@01) | live]
; [else-branch: 4875 | p4_14@1302@01 | live]
(push) ; 23
; [then-branch: 4875 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4875 | p4_14@1302@01]
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 4876 | !(p4_14@1302@01) | dead]
; [else-branch: 4876 | p4_14@1302@01 | live]
(push) ; 22
; [else-branch: 4876 | p4_14@1302@01]
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 20
; [then-branch: 4877 | !(p4_14@1302@01) | live]
; [else-branch: 4877 | p4_14@1302@01 | live]
(push) ; 21
; [then-branch: 4877 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4877 | p4_14@1302@01]
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 4878 | !(p4_14@1302@01) | dead]
; [else-branch: 4878 | p4_14@1302@01 | live]
(push) ; 20
; [else-branch: 4878 | p4_14@1302@01]
(pop) ; 20
(pop) ; 19
(pop) ; 18
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 4879 | !(p4_14@1302@01) | live]
; [else-branch: 4879 | p4_14@1302@01 | live]
(push) ; 19
; [then-branch: 4879 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 19
(push) ; 19
; [else-branch: 4879 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p4_14@1302@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4880 | !(p4_14@1302@01) | dead]
; [else-branch: 4880 | p4_14@1302@01 | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 4880 | p4_14@1302@01]
(assert p4_14@1302@01)
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 15
; [then-branch: 4881 | !(p1_31@1299@01) | live]
; [else-branch: 4881 | p1_31@1299@01 | live]
(push) ; 16
; [then-branch: 4881 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4881 | p1_31@1299@01]
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 4882 | !(p1_31@1299@01) | dead]
; [else-branch: 4882 | p1_31@1299@01 | live]
(push) ; 15
; [else-branch: 4882 | p1_31@1299@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 4883 | !(p1_31@1299@01) | live]
; [else-branch: 4883 | p1_31@1299@01 | live]
(push) ; 14
; [then-branch: 4883 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4883 | p1_31@1299@01]
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 4884 | !(p1_31@1299@01) | dead]
; [else-branch: 4884 | p1_31@1299@01 | live]
(push) ; 13
; [else-branch: 4884 | p1_31@1299@01]
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 4728 | p2_31@1300@01]
(assert p2_31@1300@01)
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 4566 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 11
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 11
; [then-branch: 4885 | !(p1_31@1299@01) | live]
; [else-branch: 4885 | p1_31@1299@01 | live]
(push) ; 12
; [then-branch: 4885 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
(pop) ; 12
(push) ; 12
; [else-branch: 4885 | p1_31@1299@01]
(assert p1_31@1299@01)
; [eval] !except1_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p1_31@1299@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_31@1299@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4886 | !(p1_31@1299@01) | live]
; [else-branch: 4886 | p1_31@1299@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 4886 | !(p1_31@1299@01)]
(assert (not p1_31@1299@01))
; [eval] p2_31 && !except2_5
(push) ; 12
; [then-branch: 4887 | !(p2_31@1300@01) | live]
; [else-branch: 4887 | p2_31@1300@01 | live]
(push) ; 13
; [then-branch: 4887 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 13
(push) ; 13
; [else-branch: 4887 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or p2_31@1300@01 (not p2_31@1300@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_31@1300@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not p2_31@1300@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4888 | p2_31@1300@01 | live]
; [else-branch: 4888 | !(p2_31@1300@01) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 4888 | p2_31@1300@01]
(assert p2_31@1300@01)
; [exec]
; MyException_res_7_0 := tmp_8
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 4889 | !(p1_31@1299@01) | live]
; [else-branch: 4889 | p1_31@1299@01 | live]
(push) ; 14
; [then-branch: 4889 | !(p1_31@1299@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 4889 | p1_31@1299@01]
(assert p1_31@1299@01)
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 4890 | p1_31@1299@01 | dead]
; [else-branch: 4890 | !(p1_31@1299@01) | live]
(push) ; 13
; [else-branch: 4890 | !(p1_31@1299@01)]
(pop) ; 13
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 4891 | !(p1_31@1299@01) | live]
; [else-branch: 4891 | p1_31@1299@01 | live]
(push) ; 14
; [then-branch: 4891 | !(p1_31@1299@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 4891 | p1_31@1299@01]
(assert p1_31@1299@01)
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not p1_31@1299@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4892 | !(p1_31@1299@01) | live]
; [else-branch: 4892 | p1_31@1299@01 | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 4892 | !(p1_31@1299@01)]
; [eval] p2_31 && !except2_5
(push) ; 14
; [then-branch: 4893 | !(p2_31@1300@01) | live]
; [else-branch: 4893 | p2_31@1300@01 | live]
(push) ; 15
; [then-branch: 4893 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 15
(push) ; 15
; [else-branch: 4893 | p2_31@1300@01]
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_31@1300@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4894 | p2_31@1300@01 | live]
; [else-branch: 4894 | !(p2_31@1300@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 4894 | p2_31@1300@01]
; [exec]
; inhale typeof(MyException_res_7_0) == MyException()
(declare-const $t@1338@01 $Snap)
(assert (= $t@1338@01 $Snap.unit))
; [eval] typeof(MyException_res_7_0) == MyException()
; [eval] typeof(MyException_res_7_0)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_8@1303@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_31 && !except1_5
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4895 | !(p1_31@1299@01) | live]
; [else-branch: 4895 | p1_31@1299@01 | live]
(push) ; 16
; [then-branch: 4895 | !(p1_31@1299@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 4895 | p1_31@1299@01]
(assert p1_31@1299@01)
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 4896 | p1_31@1299@01 | dead]
; [else-branch: 4896 | !(p1_31@1299@01) | live]
(push) ; 15
; [else-branch: 4896 | !(p1_31@1299@01)]
(pop) ; 15
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 15
; [then-branch: 4897 | !(p1_31@1299@01) | live]
; [else-branch: 4897 | p1_31@1299@01 | live]
(push) ; 16
; [then-branch: 4897 | !(p1_31@1299@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 4897 | p1_31@1299@01]
(assert p1_31@1299@01)
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not p1_31@1299@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4898 | !(p1_31@1299@01) | live]
; [else-branch: 4898 | p1_31@1299@01 | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4898 | !(p1_31@1299@01)]
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 4899 | !(p2_31@1300@01) | live]
; [else-branch: 4899 | p2_31@1300@01 | live]
(push) ; 17
; [then-branch: 4899 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4899 | p2_31@1300@01]
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_31@1300@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4900 | p2_31@1300@01 | live]
; [else-branch: 4900 | !(p2_31@1300@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4900 | p2_31@1300@01]
; [exec]
; _err_6 := MyException_res_7_0
; [exec]
; except2_5 := true
; [exec]
; tmp_9 := new()
(declare-const tmp_9@1339@01 $Ref)
(assert (not (= tmp_9@1339@01 $Ref.null)))
(assert (not (= tmp_9@1339@01 tmp_8@1303@01)))
(assert (not (= tmp_9@1339@01 MyException2_res_0@1246@01)))
(assert (not (= tmp_9@1339@01 error_6_0@1237@01)))
(assert (not (= tmp_9@1339@01 c_2@1220@01)))
(assert (not (= tmp_9@1339@01 tmp_9@1283@01)))
(assert (not (= tmp_9@1339@01 error_6@1236@01)))
(assert (not (= tmp_9@1339@01 cl@1230@01)))
(assert (not (= tmp_9@1339@01 MyException_res_7@1244@01)))
(assert (not (= tmp_9@1339@01 cl_0@1231@01)))
(assert (not (= tmp_9@1339@01 error_5_0@1233@01)))
(assert (not (= tmp_9@1339@01 error_5@1232@01)))
(assert (not (= tmp_9@1339@01 i_0_0@1219@01)))
(assert (not (= tmp_9@1339@01 _cthread_163_0@1213@01)))
(assert (not (= tmp_9@1339@01 _cthread_163@1212@01)))
(assert (not (= tmp_9@1339@01 Container_value@1293@01)))
(assert (not (= tmp_9@1339@01 i_0@1218@01)))
(assert (not (= tmp_9@1339@01 Container_valuep@1294@01)))
(assert (not (= tmp_9@1339@01 c_2_0@1221@01)))
(assert (not (= tmp_9@1339@01 MyException2_res_0_0@1247@01)))
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 4901 | !(p3_14@1301@01) | live]
; [else-branch: 4901 | p3_14@1301@01 | live]
(push) ; 18
; [then-branch: 4901 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4901 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p3_14@1301@01 (not p3_14@1301@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p3_14@1301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not p3_14@1301@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4902 | p3_14@1301@01 | live]
; [else-branch: 4902 | !(p3_14@1301@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 4902 | p3_14@1301@01]
(assert p3_14@1301@01)
; [exec]
; MyException2_res_0 := tmp_9
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 4903 | !(p4_14@1302@01) | live]
; [else-branch: 4903 | p4_14@1302@01 | live]
(push) ; 19
; [then-branch: 4903 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 19
(push) ; 19
; [else-branch: 4903 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p4_14@1302@01 (not p4_14@1302@01)))
; [then-branch: 4904 | False | dead]
; [else-branch: 4904 | True | live]
(push) ; 18
; [else-branch: 4904 | True]
(pop) ; 18
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 4905 | !(p4_14@1302@01) | live]
; [else-branch: 4905 | p4_14@1302@01 | live]
(push) ; 19
; [then-branch: 4905 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 19
(push) ; 19
; [else-branch: 4905 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4906 | True | live]
; [else-branch: 4906 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 4906 | True]
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 4907 | !(p3_14@1301@01) | live]
; [else-branch: 4907 | p3_14@1301@01 | live]
(push) ; 20
; [then-branch: 4907 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4907 | p3_14@1301@01]
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p3_14@1301@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4908 | p3_14@1301@01 | live]
; [else-branch: 4908 | !(p3_14@1301@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4908 | p3_14@1301@01]
; [exec]
; inhale typeof(MyException2_res_0) == MyException2()
(declare-const $t@1340@01 $Snap)
(assert (= $t@1340@01 $Snap.unit))
; [eval] typeof(MyException2_res_0) == MyException2()
; [eval] typeof(MyException2_res_0)
; [eval] MyException2()
(assert (= (typeof<PyType> tmp_9@1339@01) (as MyException2<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p4_14 && !except2_5
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4909 | !(p4_14@1302@01) | live]
; [else-branch: 4909 | p4_14@1302@01 | live]
(push) ; 21
; [then-branch: 4909 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4909 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 4910 | False | dead]
; [else-branch: 4910 | True | live]
(push) ; 20
; [else-branch: 4910 | True]
(pop) ; 20
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 20
; [then-branch: 4911 | !(p4_14@1302@01) | live]
; [else-branch: 4911 | p4_14@1302@01 | live]
(push) ; 21
; [then-branch: 4911 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4911 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4912 | True | live]
; [else-branch: 4912 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4912 | True]
; [eval] p3_14 && !except1_5
(push) ; 21
; [then-branch: 4913 | !(p3_14@1301@01) | live]
; [else-branch: 4913 | p3_14@1301@01 | live]
(push) ; 22
; [then-branch: 4913 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4913 | p3_14@1301@01]
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p3_14@1301@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4914 | p3_14@1301@01 | live]
; [else-branch: 4914 | !(p3_14@1301@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4914 | p3_14@1301@01]
; [exec]
; _err := MyException2_res_0
; [exec]
; except1_5 := true
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 4915 | !(p4_14@1302@01) | live]
; [else-branch: 4915 | p4_14@1302@01 | live]
(push) ; 23
; [then-branch: 4915 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4915 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 4916 | False | dead]
; [else-branch: 4916 | True | live]
(push) ; 22
; [else-branch: 4916 | True]
(pop) ; 22
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 4917 | !(p4_14@1302@01) | live]
; [else-branch: 4917 | p4_14@1302@01 | live]
(push) ; 23
; [then-branch: 4917 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4917 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4918 | True | live]
; [else-branch: 4918 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4918 | True]
; [exec]
; thisexcept1_5 := except1_5 && !bypass1_6
; [eval] except1_5 && !bypass1_6
(push) ; 23
; [then-branch: 4919 | False | live]
; [else-branch: 4919 | True | live]
(push) ; 24
; [then-branch: 4919 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4919 | True]
; [eval] !bypass1_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_5@1341@01 Bool)
(assert (= thisexcept1_5@1341@01 (not bypass1_6@1297@01)))
; [exec]
; thisexcept2_5 := except2_5 && !bypass2_6
; [eval] except2_5 && !bypass2_6
(push) ; 23
; [then-branch: 4920 | False | live]
; [else-branch: 4920 | True | live]
(push) ; 24
; [then-branch: 4920 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4920 | True]
; [eval] !bypass2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_5@1342@01 Bool)
(assert (= thisexcept2_5@1342@01 (not bypass2_6@1298@01)))
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4921 | p1_29@1210@01 | live]
; [else-branch: 4921 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4921 | p1_29@1210@01]
; [exec]
; tmp_except1_2 := except1_5
; [exec]
; except1_5 := oldexcept1_2
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4922 | p2_29@1211@01 | live]
; [else-branch: 4922 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4922 | p2_29@1211@01]
; [exec]
; tmp_except2_2 := except2_5
; [exec]
; except2_5 := oldexcept2_2
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 4923 | !(p1_29@1210@01) | live]
; [else-branch: 4923 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 4923 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4923 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4924 | p1_29@1210@01 | live]
; [else-branch: 4924 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4924 | p1_29@1210@01]
; [exec]
; cl := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 26
(pop) ; 26
; Joined path conditions
(declare-const cl@1343@01 $Ref)
(assert (= cl@1343@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; inhale _isDefined(27747)
(declare-const $t@1344@01 $Snap)
(assert (= $t@1344@01 $Snap.unit))
; [eval] _isDefined(27747)
(push) ; 26
(assert (_isDefined%precondition $Snap.unit 27747))
(pop) ; 26
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 27747))
(assert (_isDefined $Snap.unit 27747))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_29 && !except2_5
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4925 | !(p2_29@1211@01) | live]
; [else-branch: 4925 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 4925 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4925 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4926 | p2_29@1211@01 | live]
; [else-branch: 4926 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4926 | p2_29@1211@01]
; [exec]
; cl_0 := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 27
(pop) ; 27
; Joined path conditions
(declare-const cl_0@1345@01 $Ref)
(assert (= cl_0@1345@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; inhale true
(declare-const $t@1346@01 $Snap)
(assert (= $t@1346@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4927 | p1_29@1210@01 | live]
; [else-branch: 4927 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4927 | p1_29@1210@01]
; [exec]
; except1_5 := except1_5 || tmp_except1_2
; [eval] except1_5 || tmp_except1_2
(push) ; 28
; [then-branch: 4928 | False | live]
; [else-branch: 4928 | True | live]
(push) ; 29
; [then-branch: 4928 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 4928 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4929 | p2_29@1211@01 | live]
; [else-branch: 4929 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4929 | p2_29@1211@01]
; [exec]
; except2_5 := except2_5 || tmp_except2_2
; [eval] except2_5 || tmp_except2_2
(push) ; 29
; [then-branch: 4930 | False | live]
; [else-branch: 4930 | True | live]
(push) ; 30
; [then-branch: 4930 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4930 | True]
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [exec]
; thisexcept1_6 := except1_5 && !bypass1_5
; [eval] except1_5 && !bypass1_5
(push) ; 29
; [then-branch: 4931 | False | live]
; [else-branch: 4931 | True | live]
(push) ; 30
; [then-branch: 4931 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4931 | True]
; [eval] !bypass1_5
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_6@1347@01 Bool)
(assert (= thisexcept1_6@1347@01 (not bypass1_5@1295@01)))
; [exec]
; thisexcept2_6 := except2_5 && !bypass2_5
; [eval] except2_5 && !bypass2_5
(push) ; 29
; [then-branch: 4932 | False | live]
; [else-branch: 4932 | True | live]
(push) ; 30
; [then-branch: 4932 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4932 | True]
; [eval] !bypass2_5
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_6@1348@01 Bool)
(assert (= thisexcept2_6@1348@01 (not bypass2_5@1296@01)))
; [exec]
; p1_32 := p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
(push) ; 29
; [then-branch: 4933 | !(p1_29@1210@01) | live]
; [else-branch: 4933 | p1_29@1210@01 | live]
(push) ; 30
; [then-branch: 4933 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4933 | p1_29@1210@01]
(push) ; 31
; [then-branch: 4934 | !(thisexcept1_6@1347@01) | live]
; [else-branch: 4934 | thisexcept1_6@1347@01 | live]
(push) ; 32
; [then-branch: 4934 | !(thisexcept1_6@1347@01)]
(assert (not thisexcept1_6@1347@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4934 | thisexcept1_6@1347@01]
(assert thisexcept1_6@1347@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1347@01 (not thisexcept1_6@1347@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p1_29@1210@01 (or thisexcept1_6@1347@01 (not thisexcept1_6@1347@01))))
(declare-const p1_32@1349@01 Bool)
(assert (=
  p1_32@1349@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1347@01
      (issubtype<Bool> (typeof<PyType> tmp_9@1339@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_32 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
(push) ; 29
; [then-branch: 4935 | !(p2_29@1211@01) | live]
; [else-branch: 4935 | p2_29@1211@01 | live]
(push) ; 30
; [then-branch: 4935 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4935 | p2_29@1211@01]
(push) ; 31
; [then-branch: 4936 | !(thisexcept2_6@1348@01) | live]
; [else-branch: 4936 | thisexcept2_6@1348@01 | live]
(push) ; 32
; [then-branch: 4936 | !(thisexcept2_6@1348@01)]
(assert (not thisexcept2_6@1348@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4936 | thisexcept2_6@1348@01]
(assert thisexcept2_6@1348@01)
; [eval] issubtype(typeof(_err_6), MyException())
; [eval] typeof(_err_6)
; [eval] MyException()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_6@1348@01 (not thisexcept2_6@1348@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p2_29@1211@01 (or thisexcept2_6@1348@01 (not thisexcept2_6@1348@01))))
(declare-const p2_32@1350@01 Bool)
(assert (=
  p2_32@1350@01
  (and
    p2_29@1211@01
    (and
      thisexcept2_6@1348@01
      (issubtype<Bool> (typeof<PyType> tmp_8@1303@01) (as MyException<PyType>  PyType))))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_32@1349@01)))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4937 | p1_32@1349@01 | dead]
; [else-branch: 4937 | !(p1_32@1349@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 4937 | !(p1_32@1349@01)]
(assert (not p1_32@1349@01))
(pop) ; 29
; [eval] !p1_32
(push) ; 29
(set-option :timeout 10)
(assert (not p1_32@1349@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_32@1349@01)))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4938 | !(p1_32@1349@01) | live]
; [else-branch: 4938 | p1_32@1349@01 | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4938 | !(p1_32@1349@01)]
(assert (not p1_32@1349@01))
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_32@1350@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not p2_32@1350@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4939 | p2_32@1350@01 | live]
; [else-branch: 4939 | !(p2_32@1350@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4939 | p2_32@1350@01]
(assert p2_32@1350@01)
; [exec]
; except2_5 := false
; [exec]
; p1_33 := p1_32 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_32 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 31
; [then-branch: 4940 | !(p1_32@1349@01) | live]
; [else-branch: 4940 | p1_32@1349@01 | live]
(push) ; 32
; [then-branch: 4940 | !(p1_32@1349@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 4940 | p1_32@1349@01]
(assert p1_32@1349@01)
; [eval] !except1_5
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or p1_32@1349@01 (not p1_32@1349@01)))
; [exec]
; p2_33 := p2_32 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_32 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 31
; [then-branch: 4941 | !(p2_32@1350@01) | live]
; [else-branch: 4941 | p2_32@1350@01 | live]
(push) ; 32
; [then-branch: 4941 | !(p2_32@1350@01)]
(assert (not p2_32@1350@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4941 | p2_32@1350@01]
; [eval] !except2_5
(push) ; 33
; [then-branch: 4942 | False | live]
; [else-branch: 4942 | True | live]
(push) ; 34
; [then-branch: 4942 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4942 | True]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or p2_32@1350@01 (not p2_32@1350@01)))
; [exec]
; p3_15 := p1_32 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_32 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 31
; [then-branch: 4943 | !(p1_32@1349@01) | live]
; [else-branch: 4943 | p1_32@1349@01 | live]
(push) ; 32
; [then-branch: 4943 | !(p1_32@1349@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 4943 | p1_32@1349@01]
(assert p1_32@1349@01)
; [eval] !except1_5
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [exec]
; p4_15 := p2_32 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_32 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 31
; [then-branch: 4944 | !(p2_32@1350@01) | live]
; [else-branch: 4944 | p2_32@1350@01 | live]
(push) ; 32
; [then-branch: 4944 | !(p2_32@1350@01)]
(assert (not p2_32@1350@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4944 | p2_32@1350@01]
; [eval] !except2_5
(push) ; 33
; [then-branch: 4945 | False | live]
; [else-branch: 4945 | True | live]
(push) ; 34
; [then-branch: 4945 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4945 | True]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p1_33 && !except1_5
; [then-branch: 4946 | False | dead]
; [else-branch: 4946 | True | live]
(push) ; 31
; [else-branch: 4946 | True]
(pop) ; 31
; [eval] !(p1_33 && !except1_5)
; [eval] p1_33 && !except1_5
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4947 | True | live]
; [else-branch: 4947 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4947 | True]
; [eval] p2_33 && !except2_5
; [then-branch: 4948 | False | dead]
; [else-branch: 4948 | True | live]
(push) ; 32
; [else-branch: 4948 | True]
(pop) ; 32
; [eval] !(p2_33 && !except2_5)
; [eval] p2_33 && !except2_5
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4949 | True | live]
; [else-branch: 4949 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4949 | True]
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 4950 | !(p1_32@1349@01) | live]
; [else-branch: 4950 | p1_32@1349@01 | live]
(push) ; 34
; [then-branch: 4950 | !(p1_32@1349@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 4950 | p1_32@1349@01]
(assert p1_32@1349@01)
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 4951 | False | dead]
; [else-branch: 4951 | True | live]
(push) ; 33
; [else-branch: 4951 | True]
(pop) ; 33
; [eval] !(p1_32 && !except1_5)
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 4952 | !(p1_32@1349@01) | live]
; [else-branch: 4952 | p1_32@1349@01 | live]
(push) ; 34
; [then-branch: 4952 | !(p1_32@1349@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 4952 | p1_32@1349@01]
(assert p1_32@1349@01)
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4953 | True | live]
; [else-branch: 4953 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4953 | True]
; [eval] p2_32 && !except2_5
(push) ; 34
; [then-branch: 4954 | !(p2_32@1350@01) | live]
; [else-branch: 4954 | p2_32@1350@01 | live]
(push) ; 35
; [then-branch: 4954 | !(p2_32@1350@01)]
(assert (not p2_32@1350@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4954 | p2_32@1350@01]
; [eval] !except2_5
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_32@1350@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4955 | p2_32@1350@01 | live]
; [else-branch: 4955 | !(p2_32@1350@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4955 | p2_32@1350@01]
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(int___add__(int___unbox__(c_6_0.Container_valuep),
;   8))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_6_0.Container_valuep), 8))
; [eval] int___add__(int___unbox__(c_6_0.Container_valuep), 8)
; [eval] int___unbox__(c_6_0.Container_valuep)
(push) ; 35
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 36
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_valuep@1294@01))
(pop) ; 35
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_valuep@1294@01)))
(push) ; 35
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 8))
(pop) ; 35
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 8))
(push) ; 35
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 8)))
(pop) ; 35
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 8)))
(declare-const Container_valuep@1351@01 $Ref)
(assert (=
  Container_valuep@1351@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 8))))
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 4956 | !(p1_29@1210@01) | live]
; [else-branch: 4956 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 4956 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4956 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 4957 | False | dead]
; [else-branch: 4957 | True | live]
(push) ; 35
; [else-branch: 4957 | True]
(pop) ; 35
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 4958 | !(p1_29@1210@01) | live]
; [else-branch: 4958 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 4958 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4958 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4959 | True | live]
; [else-branch: 4959 | False | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4959 | True]
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 4960 | !(p2_29@1211@01) | live]
; [else-branch: 4960 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 4960 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4960 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4961 | p2_29@1211@01 | live]
; [else-branch: 4961 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 4961 | p2_29@1211@01]
; [exec]
; _err_6 := null
; [exec]
; p1_34 := p1_29 &&
;   (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
(push) ; 37
; [then-branch: 4962 | !(p1_29@1210@01) | live]
; [else-branch: 4962 | p1_29@1210@01 | live]
(push) ; 38
; [then-branch: 4962 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4962 | p1_29@1210@01]
(push) ; 39
; [then-branch: 4963 | !(thisexcept1_6@1347@01) | live]
; [else-branch: 4963 | thisexcept1_6@1347@01 | live]
(push) ; 40
; [then-branch: 4963 | !(thisexcept1_6@1347@01)]
(assert (not thisexcept1_6@1347@01))
(pop) ; 40
(push) ; 40
; [else-branch: 4963 | thisexcept1_6@1347@01]
(assert thisexcept1_6@1347@01)
; [eval] issubtype(typeof(_err), MyException2())
; [eval] typeof(_err)
; [eval] MyException2()
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1347@01 (not thisexcept1_6@1347@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(declare-const p1_34@1352@01 Bool)
(assert (=
  p1_34@1352@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1347@01
      (issubtype<Bool> (typeof<PyType> tmp_9@1339@01) (as MyException2<PyType>  PyType))))))
; [exec]
; p2_34 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
(push) ; 37
; [then-branch: 4964 | !(p2_29@1211@01) | live]
; [else-branch: 4964 | p2_29@1211@01 | live]
(push) ; 38
; [then-branch: 4964 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4964 | p2_29@1211@01]
(push) ; 39
; [then-branch: 4965 | !(thisexcept2_6@1348@01) | live]
; [else-branch: 4965 | thisexcept2_6@1348@01 | live]
(push) ; 40
; [then-branch: 4965 | !(thisexcept2_6@1348@01)]
(assert (not thisexcept2_6@1348@01))
(pop) ; 40
(push) ; 40
; [else-branch: 4965 | thisexcept2_6@1348@01]
(assert thisexcept2_6@1348@01)
; [eval] issubtype(typeof(_err_6), MyException2())
; [eval] typeof(_err_6)
; [eval] MyException2()
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_6@1348@01 (not thisexcept2_6@1348@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(declare-const p2_34@1353@01 Bool)
(assert (=
  p2_34@1353@01
  (and
    p2_29@1211@01
    (and
      thisexcept2_6@1348@01
      (issubtype<Bool> (typeof<PyType> $Ref.null) (as MyException2<PyType>  PyType))))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_34@1352@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not p1_34@1352@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4966 | p1_34@1352@01 | live]
; [else-branch: 4966 | !(p1_34@1352@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4966 | p1_34@1352@01]
(assert p1_34@1352@01)
; [exec]
; except1_5 := false
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_34@1353@01)))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4967 | p2_34@1353@01 | dead]
; [else-branch: 4967 | !(p2_34@1353@01) | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 4967 | !(p2_34@1353@01)]
(assert (not p2_34@1353@01))
(pop) ; 38
; [eval] !p2_34
(push) ; 38
(set-option :timeout 10)
(assert (not p2_34@1353@01))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_34@1353@01)))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4968 | !(p2_34@1353@01) | live]
; [else-branch: 4968 | p2_34@1353@01 | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 4968 | !(p2_34@1353@01)]
(assert (not p2_34@1353@01))
; [exec]
; p1_35 := p1_34 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_34 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 39
; [then-branch: 4969 | !(p1_34@1352@01) | live]
; [else-branch: 4969 | p1_34@1352@01 | live]
(push) ; 40
; [then-branch: 4969 | !(p1_34@1352@01)]
(assert (not p1_34@1352@01))
(pop) ; 40
(push) ; 40
; [else-branch: 4969 | p1_34@1352@01]
; [eval] !except1_5
(push) ; 41
; [then-branch: 4970 | False | live]
; [else-branch: 4970 | True | live]
(push) ; 42
; [then-branch: 4970 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4970 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or p1_34@1352@01 (not p1_34@1352@01)))
; [exec]
; p2_35 := p2_34 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_34 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 39
; [then-branch: 4971 | !(p2_34@1353@01) | live]
; [else-branch: 4971 | p2_34@1353@01 | live]
(push) ; 40
; [then-branch: 4971 | !(p2_34@1353@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 4971 | p2_34@1353@01]
(assert p2_34@1353@01)
; [eval] !except2_5
(push) ; 41
; [then-branch: 4972 | False | live]
; [else-branch: 4972 | True | live]
(push) ; 42
; [then-branch: 4972 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4972 | True]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or p2_34@1353@01 (not p2_34@1353@01)))
; [exec]
; p3_16 := p1_34 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_34 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 39
; [then-branch: 4973 | !(p1_34@1352@01) | live]
; [else-branch: 4973 | p1_34@1352@01 | live]
(push) ; 40
; [then-branch: 4973 | !(p1_34@1352@01)]
(assert (not p1_34@1352@01))
(pop) ; 40
(push) ; 40
; [else-branch: 4973 | p1_34@1352@01]
; [eval] !except1_5
(push) ; 41
; [then-branch: 4974 | False | live]
; [else-branch: 4974 | True | live]
(push) ; 42
; [then-branch: 4974 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4974 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [exec]
; p4_16 := p2_34 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_34 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 39
; [then-branch: 4975 | !(p2_34@1353@01) | live]
; [else-branch: 4975 | p2_34@1353@01 | live]
(push) ; 40
; [then-branch: 4975 | !(p2_34@1353@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 4975 | p2_34@1353@01]
(assert p2_34@1353@01)
; [eval] !except2_5
(push) ; 41
; [then-branch: 4976 | False | live]
; [else-branch: 4976 | True | live]
(push) ; 42
; [then-branch: 4976 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 4976 | True]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [eval] p1_35 && !except1_5
; [then-branch: 4977 | False | dead]
; [else-branch: 4977 | True | live]
(push) ; 39
; [else-branch: 4977 | True]
(pop) ; 39
; [eval] !(p1_35 && !except1_5)
; [eval] p1_35 && !except1_5
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4978 | True | live]
; [else-branch: 4978 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4978 | True]
; [eval] p2_35 && !except2_5
; [then-branch: 4979 | False | dead]
; [else-branch: 4979 | True | live]
(push) ; 40
; [else-branch: 4979 | True]
(pop) ; 40
; [eval] !(p2_35 && !except2_5)
; [eval] p2_35 && !except2_5
(push) ; 40
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4980 | True | live]
; [else-branch: 4980 | False | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4980 | True]
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 4981 | !(p1_34@1352@01) | live]
; [else-branch: 4981 | p1_34@1352@01 | live]
(push) ; 42
; [then-branch: 4981 | !(p1_34@1352@01)]
(assert (not p1_34@1352@01))
(pop) ; 42
(push) ; 42
; [else-branch: 4981 | p1_34@1352@01]
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1_34@1352@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4982 | p1_34@1352@01 | live]
; [else-branch: 4982 | !(p1_34@1352@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4982 | p1_34@1352@01]
; [exec]
; c_6.Container_value := __prim__int___box__(int___add__(int___unbox__(c_6.Container_value),
;   18))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_6.Container_value), 18))
; [eval] int___add__(int___unbox__(c_6.Container_value), 18)
; [eval] int___unbox__(c_6.Container_value)
(push) ; 42
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 43
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@1293@01))
(pop) ; 42
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@1293@01)))
(push) ; 42
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 18))
(pop) ; 42
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 18))
(push) ; 42
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 18)))
(pop) ; 42
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 18)))
(declare-const Container_value@1354@01 $Ref)
(assert (=
  Container_value@1354@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 18))))
; [eval] p2_34 && !except2_5
(push) ; 42
; [then-branch: 4983 | !(p2_34@1353@01) | live]
; [else-branch: 4983 | p2_34@1353@01 | live]
(push) ; 43
; [then-branch: 4983 | !(p2_34@1353@01)]
(pop) ; 43
(push) ; 43
; [else-branch: 4983 | p2_34@1353@01]
(assert p2_34@1353@01)
; [eval] !except2_5
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
; [then-branch: 4984 | p2_34@1353@01 | dead]
; [else-branch: 4984 | !(p2_34@1353@01) | live]
(push) ; 42
; [else-branch: 4984 | !(p2_34@1353@01)]
(pop) ; 42
; [eval] !(p2_34 && !except2_5)
; [eval] p2_34 && !except2_5
(push) ; 42
; [then-branch: 4985 | !(p2_34@1353@01) | live]
; [else-branch: 4985 | p2_34@1353@01 | live]
(push) ; 43
; [then-branch: 4985 | !(p2_34@1353@01)]
(pop) ; 43
(push) ; 43
; [else-branch: 4985 | p2_34@1353@01]
(assert p2_34@1353@01)
; [eval] !except2_5
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not p2_34@1353@01))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4986 | !(p2_34@1353@01) | live]
; [else-branch: 4986 | p2_34@1353@01 | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4986 | !(p2_34@1353@01)]
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 4987 | !(p1_29@1210@01) | live]
; [else-branch: 4987 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 4987 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 4987 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4988 | p1_29@1210@01 | live]
; [else-branch: 4988 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 4988 | p1_29@1210@01]
; [exec]
; _err := null
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 4989 | !(p2_29@1211@01) | live]
; [else-branch: 4989 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 4989 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 45
(push) ; 45
; [else-branch: 4989 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4990 | p2_29@1211@01 | live]
; [else-branch: 4990 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 4990 | p2_29@1211@01]
; [exec]
; _err_6 := null
; [exec]
; assert (p1_29 ==> !except1_5) && (p2_29 ==> !except2_5)
; [eval] p1_29 ==> !except1_5
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4991 | p1_29@1210@01 | live]
; [else-branch: 4991 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4991 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> !except2_5
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4992 | p2_29@1211@01 | live]
; [else-branch: 4992 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4992 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p1_29 ==> true
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4993 | p1_29@1210@01 | live]
; [else-branch: 4993 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4993 | p1_29@1210@01]
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> true
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4994 | p2_29@1211@01 | live]
; [else-branch: 4994 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4994 | p2_29@1211@01]
(pop) ; 46
(pop) ; 45
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4995 | p1_29@1210@01 | live]
; [else-branch: 4995 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 4995 | p1_29@1210@01]
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4996 | p2_29@1211@01 | live]
; [else-branch: 4996 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4996 | p2_29@1211@01]
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4997 | p1_29@1210@01 | live]
; [else-branch: 4997 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4997 | p1_29@1210@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1354@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1354@01) (as int<PyType>  PyType))))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4998 | p2_29@1211@01 | live]
; [else-branch: 4998 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4998 | p2_29@1211@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1351@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1351@01) (as int<PyType>  PyType))))
; [eval] p1_29 ==> int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4999 | p1_29@1210@01 | live]
; [else-branch: 4999 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4999 | p1_29@1210@01]
; [eval] int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5000 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 5000 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 5000 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p2_29 ==> int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5001 | p2_29@1211@01 | live]
; [else-branch: 5001 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5001 | p2_29@1211@01]
; [eval] int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5002 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 5002 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 5002 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
; [eval] __prim__int___box__(20)
(push) ; 51
(assert (__prim__int___box__%precondition $Snap.unit 20))
(pop) ; 51
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 20))
(push) ; 51
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@1351@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@1351@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1351@01 (__prim__int___box__ $Snap.unit 20)))
(pop) ; 51
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@1351@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1351@01 (__prim__int___box__ $Snap.unit 20))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (__prim__int___box__%precondition $Snap.unit 20)
    (issubtype<Bool> (typeof<PyType> Container_valuep@1351@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1351@01 (__prim__int___box__ $Snap.unit 20)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
        (__prim__int___box__%precondition $Snap.unit 20)
        (issubtype<Bool> (typeof<PyType> Container_valuep@1351@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1351@01 (__prim__int___box__ $Snap.unit 20))))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 47
(assert (not (=>
  (and
    p2_29@1211@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1351@01 (__prim__int___box__ $Snap.unit 20)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p2_29@1211@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1351@01 (__prim__int___box__ $Snap.unit 20))))
; [eval] p1_29 ==> !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5003 | p1_29@1210@01 | live]
; [else-branch: 5003 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5003 | p1_29@1210@01]
; [eval] !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] !int___eq__(i_0, __prim__int___box__(0))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5004 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | live]
; [else-branch: 5004 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 5004 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] __prim__int___box__(30)
(push) ; 51
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 51
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(push) ; 51
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1354@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1354@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1354@01 (__prim__int___box__ $Snap.unit 30)))
(pop) ; 51
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1354@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1354@01 (__prim__int___box__ $Snap.unit 30))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
    (__prim__int___box__%precondition $Snap.unit 30)
    (issubtype<Bool> (typeof<PyType> Container_value@1354@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1354@01 (__prim__int___box__ $Snap.unit 30)))))
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
      (and
        (not
          (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
        (__prim__int___box__%precondition $Snap.unit 30)
        (issubtype<Bool> (typeof<PyType> Container_value@1354@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1354@01 (__prim__int___box__ $Snap.unit 30))))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))))
(push) ; 47
(assert (not (=>
  (and
    p1_29@1210@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1354@01 (__prim__int___box__ $Snap.unit 30)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_29@1210@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1354@01 (__prim__int___box__ $Snap.unit 30))))
; [eval] p2_29 ==> !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5005 | p2_29@1211@01 | live]
; [else-branch: 5005 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5005 | p2_29@1211@01]
; [eval] !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
; [eval] !int___eq__(i_0_0, __prim__int___box__(0))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5006 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | dead]
; [else-branch: 5006 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 5006 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
; [eval] p1_29 ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5007 | p1_29@1210@01 | live]
; [else-branch: 5007 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5007 | p1_29@1210@01]
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
(push) ; 49
; [then-branch: 5008 | False | live]
; [else-branch: 5008 | True | live]
(push) ; 50
; [then-branch: 5008 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 5008 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
(push) ; 51
; [then-branch: 5009 | False | live]
; [else-branch: 5009 | True | live]
(push) ; 52
; [then-branch: 5009 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 5009 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
(push) ; 53
; [then-branch: 5010 | False | live]
; [else-branch: 5010 | True | live]
(push) ; 54
; [then-branch: 5010 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 5010 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_29 ==> (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5011 | p2_29@1211@01 | live]
; [else-branch: 5011 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5011 | p2_29@1211@01]
; [eval] (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false)
(push) ; 49
; [then-branch: 5012 | False | live]
; [else-branch: 5012 | True | live]
(push) ; 50
; [then-branch: 5012 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 5012 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false)
(push) ; 51
; [then-branch: 5013 | False | live]
; [else-branch: 5013 | True | live]
(push) ; 52
; [then-branch: 5013 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 5013 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false)
(push) ; 53
; [then-branch: 5014 | False | live]
; [else-branch: 5014 | True | live]
(push) ; 54
; [then-branch: 5014 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 5014 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
(pop) ; 46
(pop) ; 45
(pop) ; 44
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 5015 | !(p2_29@1211@01) | live]
; [else-branch: 5015 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 5015 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 45
(push) ; 45
; [else-branch: 5015 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
; [then-branch: 5016 | !(p2_29@1211@01) | dead]
; [else-branch: 5016 | p2_29@1211@01 | live]
(push) ; 44
; [else-branch: 5016 | p2_29@1211@01]
(pop) ; 44
(pop) ; 43
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 5017 | !(p1_29@1210@01) | live]
; [else-branch: 5017 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 5017 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 5017 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
; [then-branch: 5018 | !(p1_29@1210@01) | dead]
; [else-branch: 5018 | p1_29@1210@01 | live]
(push) ; 43
; [else-branch: 5018 | p1_29@1210@01]
(pop) ; 43
(pop) ; 42
(pop) ; 41
; [eval] !(p1_34 && !except1_5)
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 5019 | !(p1_34@1352@01) | live]
; [else-branch: 5019 | p1_34@1352@01 | live]
(push) ; 42
; [then-branch: 5019 | !(p1_34@1352@01)]
(assert (not p1_34@1352@01))
(pop) ; 42
(push) ; 42
; [else-branch: 5019 | p1_34@1352@01]
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
; [then-branch: 5020 | !(p1_34@1352@01) | dead]
; [else-branch: 5020 | p1_34@1352@01 | live]
(push) ; 41
; [else-branch: 5020 | p1_34@1352@01]
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
; [eval] !p1_34
(push) ; 37
(set-option :timeout 10)
(assert (not p1_34@1352@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5021 | !(p1_34@1352@01) | dead]
; [else-branch: 5021 | p1_34@1352@01 | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 5021 | p1_34@1352@01]
(assert p1_34@1352@01)
(pop) ; 37
(pop) ; 36
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 5022 | !(p2_29@1211@01) | live]
; [else-branch: 5022 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 5022 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5022 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
; [then-branch: 5023 | !(p2_29@1211@01) | dead]
; [else-branch: 5023 | p2_29@1211@01 | live]
(push) ; 36
; [else-branch: 5023 | p2_29@1211@01]
(pop) ; 36
(pop) ; 35
(pop) ; 34
; [eval] !(p2_32 && !except2_5)
; [eval] p2_32 && !except2_5
(push) ; 34
; [then-branch: 5024 | !(p2_32@1350@01) | live]
; [else-branch: 5024 | p2_32@1350@01 | live]
(push) ; 35
; [then-branch: 5024 | !(p2_32@1350@01)]
(assert (not p2_32@1350@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5024 | p2_32@1350@01]
; [eval] !except2_5
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 5025 | !(p2_32@1350@01) | dead]
; [else-branch: 5025 | p2_32@1350@01 | live]
(push) ; 34
; [else-branch: 5025 | p2_32@1350@01]
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !p2_32
(push) ; 30
(set-option :timeout 10)
(assert (not p2_32@1350@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5026 | !(p2_32@1350@01) | dead]
; [else-branch: 5026 | p2_32@1350@01 | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 5026 | p2_32@1350@01]
(assert p2_32@1350@01)
(pop) ; 30
(pop) ; 29
(pop) ; 28
; [eval] !p2_29
; [then-branch: 5027 | !(p2_29@1211@01) | dead]
; [else-branch: 5027 | p2_29@1211@01 | live]
(push) ; 28
; [else-branch: 5027 | p2_29@1211@01]
(pop) ; 28
(pop) ; 27
; [eval] !p1_29
; [then-branch: 5028 | !(p1_29@1210@01) | dead]
; [else-branch: 5028 | p1_29@1210@01 | live]
(push) ; 27
; [else-branch: 5028 | p1_29@1210@01]
(pop) ; 27
(pop) ; 26
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 26
; [then-branch: 5029 | !(p2_29@1211@01) | live]
; [else-branch: 5029 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 5029 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5029 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 5030 | !(p2_29@1211@01) | dead]
; [else-branch: 5030 | p2_29@1211@01 | live]
(push) ; 26
; [else-branch: 5030 | p2_29@1211@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 5031 | !(p1_29@1210@01) | live]
; [else-branch: 5031 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 5031 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5031 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 5032 | !(p1_29@1210@01) | dead]
; [else-branch: 5032 | p1_29@1210@01 | live]
(push) ; 25
; [else-branch: 5032 | p1_29@1210@01]
(pop) ; 25
(pop) ; 24
; [eval] !p2_29
; [then-branch: 5033 | !(p2_29@1211@01) | dead]
; [else-branch: 5033 | p2_29@1211@01 | live]
(push) ; 24
; [else-branch: 5033 | p2_29@1211@01]
(pop) ; 24
(pop) ; 23
; [eval] !p1_29
; [then-branch: 5034 | !(p1_29@1210@01) | dead]
; [else-branch: 5034 | p1_29@1210@01 | live]
(push) ; 23
; [else-branch: 5034 | p1_29@1210@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 21
; [then-branch: 5035 | !(p3_14@1301@01) | live]
; [else-branch: 5035 | p3_14@1301@01 | live]
(push) ; 22
; [then-branch: 5035 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5035 | p3_14@1301@01]
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 5036 | !(p3_14@1301@01) | dead]
; [else-branch: 5036 | p3_14@1301@01 | live]
(push) ; 21
; [else-branch: 5036 | p3_14@1301@01]
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 5037 | !(p3_14@1301@01) | live]
; [else-branch: 5037 | p3_14@1301@01 | live]
(push) ; 20
; [then-branch: 5037 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5037 | p3_14@1301@01]
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 5038 | !(p3_14@1301@01) | dead]
; [else-branch: 5038 | p3_14@1301@01 | live]
(push) ; 19
; [else-branch: 5038 | p3_14@1301@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 5039 | !(p3_14@1301@01) | live]
; [else-branch: 5039 | p3_14@1301@01 | live]
(push) ; 18
; [then-branch: 5039 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 18
(push) ; 18
; [else-branch: 5039 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p3_14@1301@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5040 | !(p3_14@1301@01) | dead]
; [else-branch: 5040 | p3_14@1301@01 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 5040 | p3_14@1301@01]
(assert p3_14@1301@01)
(pop) ; 17
(pop) ; 16
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 5041 | !(p2_31@1300@01) | live]
; [else-branch: 5041 | p2_31@1300@01 | live]
(push) ; 17
; [then-branch: 5041 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5041 | p2_31@1300@01]
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 5042 | !(p2_31@1300@01) | dead]
; [else-branch: 5042 | p2_31@1300@01 | live]
(push) ; 16
; [else-branch: 5042 | p2_31@1300@01]
(pop) ; 16
(pop) ; 15
(pop) ; 14
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 14
; [then-branch: 5043 | !(p2_31@1300@01) | live]
; [else-branch: 5043 | p2_31@1300@01 | live]
(push) ; 15
; [then-branch: 5043 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5043 | p2_31@1300@01]
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 5044 | !(p2_31@1300@01) | dead]
; [else-branch: 5044 | p2_31@1300@01 | live]
(push) ; 14
; [else-branch: 5044 | p2_31@1300@01]
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 4888 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 12
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 12
; [then-branch: 5045 | !(p2_31@1300@01) | live]
; [else-branch: 5045 | p2_31@1300@01 | live]
(push) ; 13
; [then-branch: 5045 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5045 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_31@1300@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_31@1300@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5046 | !(p2_31@1300@01) | live]
; [else-branch: 5046 | p2_31@1300@01 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 5046 | !(p2_31@1300@01)]
(assert (not p2_31@1300@01))
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 5047 | !(p1_31@1299@01) | live]
; [else-branch: 5047 | p1_31@1299@01 | live]
(push) ; 14
; [then-branch: 5047 | !(p1_31@1299@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 5047 | p1_31@1299@01]
(assert p1_31@1299@01)
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 5048 | p1_31@1299@01 | dead]
; [else-branch: 5048 | !(p1_31@1299@01) | live]
(push) ; 13
; [else-branch: 5048 | !(p1_31@1299@01)]
(pop) ; 13
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 5049 | !(p1_31@1299@01) | live]
; [else-branch: 5049 | p1_31@1299@01 | live]
(push) ; 14
; [then-branch: 5049 | !(p1_31@1299@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 5049 | p1_31@1299@01]
(assert p1_31@1299@01)
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not p1_31@1299@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5050 | !(p1_31@1299@01) | live]
; [else-branch: 5050 | p1_31@1299@01 | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5050 | !(p1_31@1299@01)]
; [eval] p2_31 && !except2_5
(push) ; 14
; [then-branch: 5051 | !(p2_31@1300@01) | live]
; [else-branch: 5051 | p2_31@1300@01 | live]
(push) ; 15
; [then-branch: 5051 | !(p2_31@1300@01)]
(pop) ; 15
(push) ; 15
; [else-branch: 5051 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 5052 | p2_31@1300@01 | dead]
; [else-branch: 5052 | !(p2_31@1300@01) | live]
(push) ; 14
; [else-branch: 5052 | !(p2_31@1300@01)]
(pop) ; 14
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 14
; [then-branch: 5053 | !(p2_31@1300@01) | live]
; [else-branch: 5053 | p2_31@1300@01 | live]
(push) ; 15
; [then-branch: 5053 | !(p2_31@1300@01)]
(pop) ; 15
(push) ; 15
; [else-branch: 5053 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not p2_31@1300@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5054 | !(p2_31@1300@01) | live]
; [else-branch: 5054 | p2_31@1300@01 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5054 | !(p2_31@1300@01)]
; [eval] p1_31 && !except1_5
(push) ; 15
; [then-branch: 5055 | !(p1_31@1299@01) | live]
; [else-branch: 5055 | p1_31@1299@01 | live]
(push) ; 16
; [then-branch: 5055 | !(p1_31@1299@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 5055 | p1_31@1299@01]
(assert p1_31@1299@01)
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 5056 | p1_31@1299@01 | dead]
; [else-branch: 5056 | !(p1_31@1299@01) | live]
(push) ; 15
; [else-branch: 5056 | !(p1_31@1299@01)]
(pop) ; 15
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 15
; [then-branch: 5057 | !(p1_31@1299@01) | live]
; [else-branch: 5057 | p1_31@1299@01 | live]
(push) ; 16
; [then-branch: 5057 | !(p1_31@1299@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 5057 | p1_31@1299@01]
(assert p1_31@1299@01)
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not p1_31@1299@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5058 | !(p1_31@1299@01) | live]
; [else-branch: 5058 | p1_31@1299@01 | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5058 | !(p1_31@1299@01)]
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 5059 | !(p2_31@1300@01) | live]
; [else-branch: 5059 | p2_31@1300@01 | live]
(push) ; 17
; [then-branch: 5059 | !(p2_31@1300@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 5059 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 5060 | p2_31@1300@01 | dead]
; [else-branch: 5060 | !(p2_31@1300@01) | live]
(push) ; 16
; [else-branch: 5060 | !(p2_31@1300@01)]
(pop) ; 16
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 5061 | !(p2_31@1300@01) | live]
; [else-branch: 5061 | p2_31@1300@01 | live]
(push) ; 17
; [then-branch: 5061 | !(p2_31@1300@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 5061 | p2_31@1300@01]
(assert p2_31@1300@01)
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2_31@1300@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5062 | !(p2_31@1300@01) | live]
; [else-branch: 5062 | p2_31@1300@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5062 | !(p2_31@1300@01)]
; [exec]
; tmp_9 := new()
(declare-const tmp_9@1355@01 $Ref)
(assert (not (= tmp_9@1355@01 $Ref.null)))
(assert (not (= tmp_9@1355@01 tmp_8@1303@01)))
(assert (not (= tmp_9@1355@01 MyException2_res_0@1246@01)))
(assert (not (= tmp_9@1355@01 error_6_0@1237@01)))
(assert (not (= tmp_9@1355@01 MyException_res_7_0@1245@01)))
(assert (not (= tmp_9@1355@01 c_2@1220@01)))
(assert (not (= tmp_9@1355@01 tmp_9@1283@01)))
(assert (not (= tmp_9@1355@01 error_6@1236@01)))
(assert (not (= tmp_9@1355@01 cl@1230@01)))
(assert (not (= tmp_9@1355@01 MyException_res_7@1244@01)))
(assert (not (= tmp_9@1355@01 cl_0@1231@01)))
(assert (not (= tmp_9@1355@01 error_5_0@1233@01)))
(assert (not (= tmp_9@1355@01 error_5@1232@01)))
(assert (not (= tmp_9@1355@01 i_0_0@1219@01)))
(assert (not (= tmp_9@1355@01 _cthread_163_0@1213@01)))
(assert (not (= tmp_9@1355@01 _cthread_163@1212@01)))
(assert (not (= tmp_9@1355@01 Container_value@1293@01)))
(assert (not (= tmp_9@1355@01 i_0@1218@01)))
(assert (not (= tmp_9@1355@01 Container_valuep@1294@01)))
(assert (not (= tmp_9@1355@01 c_2_0@1221@01)))
(assert (not (= tmp_9@1355@01 MyException2_res_0_0@1247@01)))
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 5063 | !(p3_14@1301@01) | live]
; [else-branch: 5063 | p3_14@1301@01 | live]
(push) ; 18
; [then-branch: 5063 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 18
(push) ; 18
; [else-branch: 5063 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p3_14@1301@01 (not p3_14@1301@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p3_14@1301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not p3_14@1301@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5064 | p3_14@1301@01 | live]
; [else-branch: 5064 | !(p3_14@1301@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 5064 | p3_14@1301@01]
(assert p3_14@1301@01)
; [exec]
; MyException2_res_0 := tmp_9
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 5065 | !(p4_14@1302@01) | live]
; [else-branch: 5065 | p4_14@1302@01 | live]
(push) ; 19
; [then-branch: 5065 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5065 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p4_14@1302@01 (not p4_14@1302@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p4_14@1302@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not p4_14@1302@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5066 | p4_14@1302@01 | live]
; [else-branch: 5066 | !(p4_14@1302@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 5066 | p4_14@1302@01]
(assert p4_14@1302@01)
; [exec]
; MyException2_res_0_0 := tmp_9
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 5067 | !(p3_14@1301@01) | live]
; [else-branch: 5067 | p3_14@1301@01 | live]
(push) ; 20
; [then-branch: 5067 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5067 | p3_14@1301@01]
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p3_14@1301@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5068 | p3_14@1301@01 | live]
; [else-branch: 5068 | !(p3_14@1301@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 5068 | p3_14@1301@01]
; [exec]
; inhale typeof(MyException2_res_0) == MyException2()
(declare-const $t@1356@01 $Snap)
(assert (= $t@1356@01 $Snap.unit))
; [eval] typeof(MyException2_res_0) == MyException2()
; [eval] typeof(MyException2_res_0)
; [eval] MyException2()
(assert (= (typeof<PyType> tmp_9@1355@01) (as MyException2<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p4_14 && !except2_5
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5069 | !(p4_14@1302@01) | live]
; [else-branch: 5069 | p4_14@1302@01 | live]
(push) ; 21
; [then-branch: 5069 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5069 | p4_14@1302@01]
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p4_14@1302@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5070 | p4_14@1302@01 | live]
; [else-branch: 5070 | !(p4_14@1302@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5070 | p4_14@1302@01]
; [exec]
; inhale typeof(MyException2_res_0_0) == MyException2()
(declare-const $t@1357@01 $Snap)
(assert (= $t@1357@01 $Snap.unit))
; [eval] typeof(MyException2_res_0_0) == MyException2()
; [eval] typeof(MyException2_res_0_0)
; [eval] MyException2()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p3_14 && !except1_5
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5071 | !(p3_14@1301@01) | live]
; [else-branch: 5071 | p3_14@1301@01 | live]
(push) ; 22
; [then-branch: 5071 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5071 | p3_14@1301@01]
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p3_14@1301@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5072 | p3_14@1301@01 | live]
; [else-branch: 5072 | !(p3_14@1301@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5072 | p3_14@1301@01]
; [exec]
; _err := MyException2_res_0
; [exec]
; except1_5 := true
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 5073 | !(p4_14@1302@01) | live]
; [else-branch: 5073 | p4_14@1302@01 | live]
(push) ; 23
; [then-branch: 5073 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5073 | p4_14@1302@01]
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p4_14@1302@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5074 | p4_14@1302@01 | live]
; [else-branch: 5074 | !(p4_14@1302@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 5074 | p4_14@1302@01]
; [exec]
; _err_6 := MyException2_res_0_0
; [exec]
; except2_5 := true
; [exec]
; thisexcept1_5 := except1_5 && !bypass1_6
; [eval] except1_5 && !bypass1_6
(push) ; 23
; [then-branch: 5075 | False | live]
; [else-branch: 5075 | True | live]
(push) ; 24
; [then-branch: 5075 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 5075 | True]
; [eval] !bypass1_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_5@1358@01 Bool)
(assert (= thisexcept1_5@1358@01 (not bypass1_6@1297@01)))
; [exec]
; thisexcept2_5 := except2_5 && !bypass2_6
; [eval] except2_5 && !bypass2_6
(push) ; 23
; [then-branch: 5076 | False | live]
; [else-branch: 5076 | True | live]
(push) ; 24
; [then-branch: 5076 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 5076 | True]
; [eval] !bypass2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_5@1359@01 Bool)
(assert (= thisexcept2_5@1359@01 (not bypass2_6@1298@01)))
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5077 | p1_29@1210@01 | live]
; [else-branch: 5077 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5077 | p1_29@1210@01]
; [exec]
; tmp_except1_2 := except1_5
; [exec]
; except1_5 := oldexcept1_2
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5078 | p2_29@1211@01 | live]
; [else-branch: 5078 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 5078 | p2_29@1211@01]
; [exec]
; tmp_except2_2 := except2_5
; [exec]
; except2_5 := oldexcept2_2
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 5079 | !(p1_29@1210@01) | live]
; [else-branch: 5079 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 5079 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5079 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5080 | p1_29@1210@01 | live]
; [else-branch: 5080 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5080 | p1_29@1210@01]
; [exec]
; cl := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 26
(pop) ; 26
; Joined path conditions
(declare-const cl@1360@01 $Ref)
(assert (= cl@1360@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; inhale _isDefined(27747)
(declare-const $t@1361@01 $Snap)
(assert (= $t@1361@01 $Snap.unit))
; [eval] _isDefined(27747)
(push) ; 26
(assert (_isDefined%precondition $Snap.unit 27747))
(pop) ; 26
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 27747))
(assert (_isDefined $Snap.unit 27747))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_29 && !except2_5
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5081 | !(p2_29@1211@01) | live]
; [else-branch: 5081 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 5081 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5081 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5082 | p2_29@1211@01 | live]
; [else-branch: 5082 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5082 | p2_29@1211@01]
; [exec]
; cl_0 := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 27
(pop) ; 27
; Joined path conditions
(declare-const cl_0@1362@01 $Ref)
(assert (= cl_0@1362@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; inhale true
(declare-const $t@1363@01 $Snap)
(assert (= $t@1363@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5083 | p1_29@1210@01 | live]
; [else-branch: 5083 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5083 | p1_29@1210@01]
; [exec]
; except1_5 := except1_5 || tmp_except1_2
; [eval] except1_5 || tmp_except1_2
(push) ; 28
; [then-branch: 5084 | False | live]
; [else-branch: 5084 | True | live]
(push) ; 29
; [then-branch: 5084 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 5084 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5085 | p2_29@1211@01 | live]
; [else-branch: 5085 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 5085 | p2_29@1211@01]
; [exec]
; except2_5 := except2_5 || tmp_except2_2
; [eval] except2_5 || tmp_except2_2
(push) ; 29
; [then-branch: 5086 | False | live]
; [else-branch: 5086 | True | live]
(push) ; 30
; [then-branch: 5086 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 5086 | True]
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [exec]
; thisexcept1_6 := except1_5 && !bypass1_5
; [eval] except1_5 && !bypass1_5
(push) ; 29
; [then-branch: 5087 | False | live]
; [else-branch: 5087 | True | live]
(push) ; 30
; [then-branch: 5087 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 5087 | True]
; [eval] !bypass1_5
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_6@1364@01 Bool)
(assert (= thisexcept1_6@1364@01 (not bypass1_5@1295@01)))
; [exec]
; thisexcept2_6 := except2_5 && !bypass2_5
; [eval] except2_5 && !bypass2_5
(push) ; 29
; [then-branch: 5088 | False | live]
; [else-branch: 5088 | True | live]
(push) ; 30
; [then-branch: 5088 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 5088 | True]
; [eval] !bypass2_5
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(declare-const thisexcept2_6@1365@01 Bool)
(assert (= thisexcept2_6@1365@01 (not bypass2_5@1296@01)))
; [exec]
; p1_32 := p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
(push) ; 29
; [then-branch: 5089 | !(p1_29@1210@01) | live]
; [else-branch: 5089 | p1_29@1210@01 | live]
(push) ; 30
; [then-branch: 5089 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5089 | p1_29@1210@01]
(push) ; 31
; [then-branch: 5090 | !(thisexcept1_6@1364@01) | live]
; [else-branch: 5090 | thisexcept1_6@1364@01 | live]
(push) ; 32
; [then-branch: 5090 | !(thisexcept1_6@1364@01)]
(assert (not thisexcept1_6@1364@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5090 | thisexcept1_6@1364@01]
(assert thisexcept1_6@1364@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1364@01 (not thisexcept1_6@1364@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p1_29@1210@01 (or thisexcept1_6@1364@01 (not thisexcept1_6@1364@01))))
(declare-const p1_32@1366@01 Bool)
(assert (=
  p1_32@1366@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1364@01
      (issubtype<Bool> (typeof<PyType> tmp_9@1355@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_32 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
(push) ; 29
; [then-branch: 5091 | !(p2_29@1211@01) | live]
; [else-branch: 5091 | p2_29@1211@01 | live]
(push) ; 30
; [then-branch: 5091 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5091 | p2_29@1211@01]
(push) ; 31
; [then-branch: 5092 | !(thisexcept2_6@1365@01) | live]
; [else-branch: 5092 | thisexcept2_6@1365@01 | live]
(push) ; 32
; [then-branch: 5092 | !(thisexcept2_6@1365@01)]
(assert (not thisexcept2_6@1365@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5092 | thisexcept2_6@1365@01]
(assert thisexcept2_6@1365@01)
; [eval] issubtype(typeof(_err_6), MyException())
; [eval] typeof(_err_6)
; [eval] MyException()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_6@1365@01 (not thisexcept2_6@1365@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p2_29@1211@01 (or thisexcept2_6@1365@01 (not thisexcept2_6@1365@01))))
(declare-const p2_32@1367@01 Bool)
(assert (=
  p2_32@1367@01
  (and
    p2_29@1211@01
    (and
      thisexcept2_6@1365@01
      (issubtype<Bool> (typeof<PyType> tmp_9@1355@01) (as MyException<PyType>  PyType))))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_32@1366@01)))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5093 | p1_32@1366@01 | dead]
; [else-branch: 5093 | !(p1_32@1366@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 5093 | !(p1_32@1366@01)]
(assert (not p1_32@1366@01))
(pop) ; 29
; [eval] !p1_32
(push) ; 29
(set-option :timeout 10)
(assert (not p1_32@1366@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_32@1366@01)))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5094 | !(p1_32@1366@01) | live]
; [else-branch: 5094 | p1_32@1366@01 | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5094 | !(p1_32@1366@01)]
(assert (not p1_32@1366@01))
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_32@1367@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5095 | p2_32@1367@01 | dead]
; [else-branch: 5095 | !(p2_32@1367@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 5095 | !(p2_32@1367@01)]
(assert (not p2_32@1367@01))
(pop) ; 30
; [eval] !p2_32
(push) ; 30
(set-option :timeout 10)
(assert (not p2_32@1367@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_32@1367@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5096 | !(p2_32@1367@01) | live]
; [else-branch: 5096 | p2_32@1367@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 5096 | !(p2_32@1367@01)]
(assert (not p2_32@1367@01))
; [exec]
; p1_33 := p1_32 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_32 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 31
; [then-branch: 5097 | !(p1_32@1366@01) | live]
; [else-branch: 5097 | p1_32@1366@01 | live]
(push) ; 32
; [then-branch: 5097 | !(p1_32@1366@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 5097 | p1_32@1366@01]
(assert p1_32@1366@01)
; [eval] !except1_5
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or p1_32@1366@01 (not p1_32@1366@01)))
; [exec]
; p2_33 := p2_32 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_32 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 31
; [then-branch: 5098 | !(p2_32@1367@01) | live]
; [else-branch: 5098 | p2_32@1367@01 | live]
(push) ; 32
; [then-branch: 5098 | !(p2_32@1367@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 5098 | p2_32@1367@01]
(assert p2_32@1367@01)
; [eval] !except2_5
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or p2_32@1367@01 (not p2_32@1367@01)))
; [exec]
; p3_15 := p1_32 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_32 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 31
; [then-branch: 5099 | !(p1_32@1366@01) | live]
; [else-branch: 5099 | p1_32@1366@01 | live]
(push) ; 32
; [then-branch: 5099 | !(p1_32@1366@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 5099 | p1_32@1366@01]
(assert p1_32@1366@01)
; [eval] !except1_5
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [exec]
; p4_15 := p2_32 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_32 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 31
; [then-branch: 5100 | !(p2_32@1367@01) | live]
; [else-branch: 5100 | p2_32@1367@01 | live]
(push) ; 32
; [then-branch: 5100 | !(p2_32@1367@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 5100 | p2_32@1367@01]
(assert p2_32@1367@01)
; [eval] !except2_5
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p1_33 && !except1_5
; [then-branch: 5101 | False | dead]
; [else-branch: 5101 | True | live]
(push) ; 31
; [else-branch: 5101 | True]
(pop) ; 31
; [eval] !(p1_33 && !except1_5)
; [eval] p1_33 && !except1_5
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5102 | True | live]
; [else-branch: 5102 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 5102 | True]
; [eval] p2_33 && !except2_5
; [then-branch: 5103 | False | dead]
; [else-branch: 5103 | True | live]
(push) ; 32
; [else-branch: 5103 | True]
(pop) ; 32
; [eval] !(p2_33 && !except2_5)
; [eval] p2_33 && !except2_5
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5104 | True | live]
; [else-branch: 5104 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 5104 | True]
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 5105 | !(p1_32@1366@01) | live]
; [else-branch: 5105 | p1_32@1366@01 | live]
(push) ; 34
; [then-branch: 5105 | !(p1_32@1366@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 5105 | p1_32@1366@01]
(assert p1_32@1366@01)
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 5106 | False | dead]
; [else-branch: 5106 | True | live]
(push) ; 33
; [else-branch: 5106 | True]
(pop) ; 33
; [eval] !(p1_32 && !except1_5)
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 5107 | !(p1_32@1366@01) | live]
; [else-branch: 5107 | p1_32@1366@01 | live]
(push) ; 34
; [then-branch: 5107 | !(p1_32@1366@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 5107 | p1_32@1366@01]
(assert p1_32@1366@01)
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5108 | True | live]
; [else-branch: 5108 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 5108 | True]
; [eval] p2_32 && !except2_5
(push) ; 34
; [then-branch: 5109 | !(p2_32@1367@01) | live]
; [else-branch: 5109 | p2_32@1367@01 | live]
(push) ; 35
; [then-branch: 5109 | !(p2_32@1367@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 5109 | p2_32@1367@01]
(assert p2_32@1367@01)
; [eval] !except2_5
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 5110 | False | dead]
; [else-branch: 5110 | True | live]
(push) ; 34
; [else-branch: 5110 | True]
(pop) ; 34
; [eval] !(p2_32 && !except2_5)
; [eval] p2_32 && !except2_5
(push) ; 34
; [then-branch: 5111 | !(p2_32@1367@01) | live]
; [else-branch: 5111 | p2_32@1367@01 | live]
(push) ; 35
; [then-branch: 5111 | !(p2_32@1367@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 5111 | p2_32@1367@01]
(assert p2_32@1367@01)
; [eval] !except2_5
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5112 | True | live]
; [else-branch: 5112 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 5112 | True]
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 5113 | !(p1_29@1210@01) | live]
; [else-branch: 5113 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 5113 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5113 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 5114 | False | dead]
; [else-branch: 5114 | True | live]
(push) ; 35
; [else-branch: 5114 | True]
(pop) ; 35
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 5115 | !(p1_29@1210@01) | live]
; [else-branch: 5115 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 5115 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5115 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5116 | True | live]
; [else-branch: 5116 | False | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5116 | True]
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 5117 | !(p2_29@1211@01) | live]
; [else-branch: 5117 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 5117 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5117 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
; [then-branch: 5118 | False | dead]
; [else-branch: 5118 | True | live]
(push) ; 36
; [else-branch: 5118 | True]
(pop) ; 36
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 5119 | !(p2_29@1211@01) | live]
; [else-branch: 5119 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 5119 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5119 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5120 | True | live]
; [else-branch: 5120 | False | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 5120 | True]
; [exec]
; p1_34 := p1_29 &&
;   (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
(push) ; 37
; [then-branch: 5121 | !(p1_29@1210@01) | live]
; [else-branch: 5121 | p1_29@1210@01 | live]
(push) ; 38
; [then-branch: 5121 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 38
(push) ; 38
; [else-branch: 5121 | p1_29@1210@01]
(push) ; 39
; [then-branch: 5122 | !(thisexcept1_6@1364@01) | live]
; [else-branch: 5122 | thisexcept1_6@1364@01 | live]
(push) ; 40
; [then-branch: 5122 | !(thisexcept1_6@1364@01)]
(assert (not thisexcept1_6@1364@01))
(pop) ; 40
(push) ; 40
; [else-branch: 5122 | thisexcept1_6@1364@01]
(assert thisexcept1_6@1364@01)
; [eval] issubtype(typeof(_err), MyException2())
; [eval] typeof(_err)
; [eval] MyException2()
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1364@01 (not thisexcept1_6@1364@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(declare-const p1_34@1368@01 Bool)
(assert (=
  p1_34@1368@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1364@01
      (issubtype<Bool> (typeof<PyType> tmp_9@1355@01) (as MyException2<PyType>  PyType))))))
; [exec]
; p2_34 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
(push) ; 37
; [then-branch: 5123 | !(p2_29@1211@01) | live]
; [else-branch: 5123 | p2_29@1211@01 | live]
(push) ; 38
; [then-branch: 5123 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 38
(push) ; 38
; [else-branch: 5123 | p2_29@1211@01]
(push) ; 39
; [then-branch: 5124 | !(thisexcept2_6@1365@01) | live]
; [else-branch: 5124 | thisexcept2_6@1365@01 | live]
(push) ; 40
; [then-branch: 5124 | !(thisexcept2_6@1365@01)]
(assert (not thisexcept2_6@1365@01))
(pop) ; 40
(push) ; 40
; [else-branch: 5124 | thisexcept2_6@1365@01]
(assert thisexcept2_6@1365@01)
; [eval] issubtype(typeof(_err_6), MyException2())
; [eval] typeof(_err_6)
; [eval] MyException2()
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or thisexcept2_6@1365@01 (not thisexcept2_6@1365@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(declare-const p2_34@1369@01 Bool)
(assert (=
  p2_34@1369@01
  (and
    p2_29@1211@01
    (and
      thisexcept2_6@1365@01
      (issubtype<Bool> (typeof<PyType> tmp_9@1355@01) (as MyException2<PyType>  PyType))))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_34@1368@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not p1_34@1368@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5125 | p1_34@1368@01 | live]
; [else-branch: 5125 | !(p1_34@1368@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5125 | p1_34@1368@01]
(assert p1_34@1368@01)
; [exec]
; except1_5 := false
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_34@1369@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not p2_34@1369@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5126 | p2_34@1369@01 | live]
; [else-branch: 5126 | !(p2_34@1369@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 5126 | p2_34@1369@01]
(assert p2_34@1369@01)
; [exec]
; except2_5 := false
; [exec]
; p1_35 := p1_34 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_34 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 39
; [then-branch: 5127 | !(p1_34@1368@01) | live]
; [else-branch: 5127 | p1_34@1368@01 | live]
(push) ; 40
; [then-branch: 5127 | !(p1_34@1368@01)]
(assert (not p1_34@1368@01))
(pop) ; 40
(push) ; 40
; [else-branch: 5127 | p1_34@1368@01]
; [eval] !except1_5
(push) ; 41
; [then-branch: 5128 | False | live]
; [else-branch: 5128 | True | live]
(push) ; 42
; [then-branch: 5128 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 5128 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or p1_34@1368@01 (not p1_34@1368@01)))
; [exec]
; p2_35 := p2_34 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_34 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 39
; [then-branch: 5129 | !(p2_34@1369@01) | live]
; [else-branch: 5129 | p2_34@1369@01 | live]
(push) ; 40
; [then-branch: 5129 | !(p2_34@1369@01)]
(assert (not p2_34@1369@01))
(pop) ; 40
(push) ; 40
; [else-branch: 5129 | p2_34@1369@01]
; [eval] !except2_5
(push) ; 41
; [then-branch: 5130 | False | live]
; [else-branch: 5130 | True | live]
(push) ; 42
; [then-branch: 5130 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 5130 | True]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or p2_34@1369@01 (not p2_34@1369@01)))
; [exec]
; p3_16 := p1_34 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_34 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 39
; [then-branch: 5131 | !(p1_34@1368@01) | live]
; [else-branch: 5131 | p1_34@1368@01 | live]
(push) ; 40
; [then-branch: 5131 | !(p1_34@1368@01)]
(assert (not p1_34@1368@01))
(pop) ; 40
(push) ; 40
; [else-branch: 5131 | p1_34@1368@01]
; [eval] !except1_5
(push) ; 41
; [then-branch: 5132 | False | live]
; [else-branch: 5132 | True | live]
(push) ; 42
; [then-branch: 5132 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 5132 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [exec]
; p4_16 := p2_34 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_34 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 39
; [then-branch: 5133 | !(p2_34@1369@01) | live]
; [else-branch: 5133 | p2_34@1369@01 | live]
(push) ; 40
; [then-branch: 5133 | !(p2_34@1369@01)]
(assert (not p2_34@1369@01))
(pop) ; 40
(push) ; 40
; [else-branch: 5133 | p2_34@1369@01]
; [eval] !except2_5
(push) ; 41
; [then-branch: 5134 | False | live]
; [else-branch: 5134 | True | live]
(push) ; 42
; [then-branch: 5134 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 5134 | True]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [eval] p1_35 && !except1_5
; [then-branch: 5135 | False | dead]
; [else-branch: 5135 | True | live]
(push) ; 39
; [else-branch: 5135 | True]
(pop) ; 39
; [eval] !(p1_35 && !except1_5)
; [eval] p1_35 && !except1_5
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5136 | True | live]
; [else-branch: 5136 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5136 | True]
; [eval] p2_35 && !except2_5
; [then-branch: 5137 | False | dead]
; [else-branch: 5137 | True | live]
(push) ; 40
; [else-branch: 5137 | True]
(pop) ; 40
; [eval] !(p2_35 && !except2_5)
; [eval] p2_35 && !except2_5
(push) ; 40
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5138 | True | live]
; [else-branch: 5138 | False | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 5138 | True]
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 5139 | !(p1_34@1368@01) | live]
; [else-branch: 5139 | p1_34@1368@01 | live]
(push) ; 42
; [then-branch: 5139 | !(p1_34@1368@01)]
(assert (not p1_34@1368@01))
(pop) ; 42
(push) ; 42
; [else-branch: 5139 | p1_34@1368@01]
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1_34@1368@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5140 | p1_34@1368@01 | live]
; [else-branch: 5140 | !(p1_34@1368@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5140 | p1_34@1368@01]
; [exec]
; c_6.Container_value := __prim__int___box__(int___add__(int___unbox__(c_6.Container_value),
;   18))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_6.Container_value), 18))
; [eval] int___add__(int___unbox__(c_6.Container_value), 18)
; [eval] int___unbox__(c_6.Container_value)
(push) ; 42
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 43
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@1293@01))
(pop) ; 42
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1293@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@1293@01)))
(push) ; 42
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 18))
(pop) ; 42
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 18))
(push) ; 42
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 18)))
(pop) ; 42
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 18)))
(declare-const Container_value@1370@01 $Ref)
(assert (=
  Container_value@1370@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1293@01) 18))))
; [eval] p2_34 && !except2_5
(push) ; 42
; [then-branch: 5141 | !(p2_34@1369@01) | live]
; [else-branch: 5141 | p2_34@1369@01 | live]
(push) ; 43
; [then-branch: 5141 | !(p2_34@1369@01)]
(assert (not p2_34@1369@01))
(pop) ; 43
(push) ; 43
; [else-branch: 5141 | p2_34@1369@01]
; [eval] !except2_5
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_34@1369@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5142 | p2_34@1369@01 | live]
; [else-branch: 5142 | !(p2_34@1369@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 5142 | p2_34@1369@01]
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(int___add__(int___unbox__(c_6_0.Container_valuep),
;   18))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_6_0.Container_valuep), 18))
; [eval] int___add__(int___unbox__(c_6_0.Container_valuep), 18)
; [eval] int___unbox__(c_6_0.Container_valuep)
(push) ; 43
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_valuep@1294@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@1294@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_valuep@1294@01)))
(push) ; 43
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 18))
(pop) ; 43
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 18))
(push) ; 43
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 18)))
(pop) ; 43
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 18)))
(declare-const Container_valuep@1371@01 $Ref)
(assert (=
  Container_valuep@1371@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_valuep@1294@01) 18))))
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 5143 | !(p1_29@1210@01) | live]
; [else-branch: 5143 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 5143 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 5143 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5144 | p1_29@1210@01 | live]
; [else-branch: 5144 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 5144 | p1_29@1210@01]
; [exec]
; _err := null
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 5145 | !(p2_29@1211@01) | live]
; [else-branch: 5145 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 5145 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 45
(push) ; 45
; [else-branch: 5145 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5146 | p2_29@1211@01 | live]
; [else-branch: 5146 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 5146 | p2_29@1211@01]
; [exec]
; _err_6 := null
; [exec]
; assert (p1_29 ==> !except1_5) && (p2_29 ==> !except2_5)
; [eval] p1_29 ==> !except1_5
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5147 | p1_29@1210@01 | live]
; [else-branch: 5147 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 5147 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> !except2_5
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5148 | p2_29@1211@01 | live]
; [else-branch: 5148 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 5148 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p1_29 ==> true
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5149 | p1_29@1210@01 | live]
; [else-branch: 5149 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 5149 | p1_29@1210@01]
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> true
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5150 | p2_29@1211@01 | live]
; [else-branch: 5150 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 5150 | p2_29@1211@01]
(pop) ; 46
(pop) ; 45
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5151 | p1_29@1210@01 | live]
; [else-branch: 5151 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 5151 | p1_29@1210@01]
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5152 | p2_29@1211@01 | live]
; [else-branch: 5152 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 5152 | p2_29@1211@01]
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5153 | p1_29@1210@01 | live]
; [else-branch: 5153 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5153 | p1_29@1210@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1370@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1370@01) (as int<PyType>  PyType))))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5154 | p2_29@1211@01 | live]
; [else-branch: 5154 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5154 | p2_29@1211@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1371@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@1371@01) (as int<PyType>  PyType))))
; [eval] p1_29 ==> int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5155 | p1_29@1210@01 | live]
; [else-branch: 5155 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5155 | p1_29@1210@01]
; [eval] int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5156 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 5156 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 5156 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p2_29 ==> int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5157 | p2_29@1211@01 | live]
; [else-branch: 5157 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5157 | p2_29@1211@01]
; [eval] int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5158 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 5158 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 5158 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p1_29 ==> !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5159 | p1_29@1210@01 | live]
; [else-branch: 5159 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5159 | p1_29@1210@01]
; [eval] !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] !int___eq__(i_0, __prim__int___box__(0))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5160 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | live]
; [else-branch: 5160 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 5160 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] __prim__int___box__(30)
(push) ; 51
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 51
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(push) ; 51
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1370@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1370@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1370@01 (__prim__int___box__ $Snap.unit 30)))
(pop) ; 51
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1370@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1370@01 (__prim__int___box__ $Snap.unit 30))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
    (__prim__int___box__%precondition $Snap.unit 30)
    (issubtype<Bool> (typeof<PyType> Container_value@1370@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1370@01 (__prim__int___box__ $Snap.unit 30)))))
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
      (and
        (not
          (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
        (__prim__int___box__%precondition $Snap.unit 30)
        (issubtype<Bool> (typeof<PyType> Container_value@1370@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1370@01 (__prim__int___box__ $Snap.unit 30))))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))))
(push) ; 47
(assert (not (=>
  (and
    p1_29@1210@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1370@01 (__prim__int___box__ $Snap.unit 30)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_29@1210@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1370@01 (__prim__int___box__ $Snap.unit 30))))
; [eval] p2_29 ==> !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5161 | p2_29@1211@01 | live]
; [else-branch: 5161 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5161 | p2_29@1211@01]
; [eval] !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
; [eval] !int___eq__(i_0_0, __prim__int___box__(0))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5162 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | live]
; [else-branch: 5162 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 5162 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
; [eval] __prim__int___box__(30)
(push) ; 51
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 51
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(push) ; 51
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@1371@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@1371@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1371@01 (__prim__int___box__ $Snap.unit 30)))
(pop) ; 51
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@1371@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1371@01 (__prim__int___box__ $Snap.unit 30))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
    (__prim__int___box__%precondition $Snap.unit 30)
    (issubtype<Bool> (typeof<PyType> Container_valuep@1371@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1371@01 (__prim__int___box__ $Snap.unit 30)))))
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
      (and
        (not
          (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
        (__prim__int___box__%precondition $Snap.unit 30)
        (issubtype<Bool> (typeof<PyType> Container_valuep@1371@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1371@01 (__prim__int___box__ $Snap.unit 30))))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))))
(push) ; 47
(assert (not (=>
  (and
    p2_29@1211@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1371@01 (__prim__int___box__ $Snap.unit 30)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p2_29@1211@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@1371@01 (__prim__int___box__ $Snap.unit 30))))
; [eval] p1_29 ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5163 | p1_29@1210@01 | live]
; [else-branch: 5163 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5163 | p1_29@1210@01]
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
(push) ; 49
; [then-branch: 5164 | False | live]
; [else-branch: 5164 | True | live]
(push) ; 50
; [then-branch: 5164 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 5164 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
(push) ; 51
; [then-branch: 5165 | False | live]
; [else-branch: 5165 | True | live]
(push) ; 52
; [then-branch: 5165 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 5165 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
(push) ; 53
; [then-branch: 5166 | False | live]
; [else-branch: 5166 | True | live]
(push) ; 54
; [then-branch: 5166 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 5166 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_29 ==> (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5167 | p2_29@1211@01 | live]
; [else-branch: 5167 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5167 | p2_29@1211@01]
; [eval] (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false)
(push) ; 49
; [then-branch: 5168 | False | live]
; [else-branch: 5168 | True | live]
(push) ; 50
; [then-branch: 5168 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 5168 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false)
(push) ; 51
; [then-branch: 5169 | False | live]
; [else-branch: 5169 | True | live]
(push) ; 52
; [then-branch: 5169 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 5169 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false)
(push) ; 53
; [then-branch: 5170 | False | live]
; [else-branch: 5170 | True | live]
(push) ; 54
; [then-branch: 5170 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 5170 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
(pop) ; 46
(pop) ; 45
(pop) ; 44
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 5171 | !(p2_29@1211@01) | live]
; [else-branch: 5171 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 5171 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 45
(push) ; 45
; [else-branch: 5171 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
; [then-branch: 5172 | !(p2_29@1211@01) | dead]
; [else-branch: 5172 | p2_29@1211@01 | live]
(push) ; 44
; [else-branch: 5172 | p2_29@1211@01]
(pop) ; 44
(pop) ; 43
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 5173 | !(p1_29@1210@01) | live]
; [else-branch: 5173 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 5173 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 5173 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
; [then-branch: 5174 | !(p1_29@1210@01) | dead]
; [else-branch: 5174 | p1_29@1210@01 | live]
(push) ; 43
; [else-branch: 5174 | p1_29@1210@01]
(pop) ; 43
(pop) ; 42
; [eval] !(p2_34 && !except2_5)
; [eval] p2_34 && !except2_5
(push) ; 42
; [then-branch: 5175 | !(p2_34@1369@01) | live]
; [else-branch: 5175 | p2_34@1369@01 | live]
(push) ; 43
; [then-branch: 5175 | !(p2_34@1369@01)]
(assert (not p2_34@1369@01))
(pop) ; 43
(push) ; 43
; [else-branch: 5175 | p2_34@1369@01]
; [eval] !except2_5
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
; [then-branch: 5176 | !(p2_34@1369@01) | dead]
; [else-branch: 5176 | p2_34@1369@01 | live]
(push) ; 42
; [else-branch: 5176 | p2_34@1369@01]
(pop) ; 42
(pop) ; 41
; [eval] !(p1_34 && !except1_5)
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 5177 | !(p1_34@1368@01) | live]
; [else-branch: 5177 | p1_34@1368@01 | live]
(push) ; 42
; [then-branch: 5177 | !(p1_34@1368@01)]
(assert (not p1_34@1368@01))
(pop) ; 42
(push) ; 42
; [else-branch: 5177 | p1_34@1368@01]
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
; [then-branch: 5178 | !(p1_34@1368@01) | dead]
; [else-branch: 5178 | p1_34@1368@01 | live]
(push) ; 41
; [else-branch: 5178 | p1_34@1368@01]
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
; [eval] !p2_34
(push) ; 38
(set-option :timeout 10)
(assert (not p2_34@1369@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5179 | !(p2_34@1369@01) | dead]
; [else-branch: 5179 | p2_34@1369@01 | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 5179 | p2_34@1369@01]
(assert p2_34@1369@01)
(pop) ; 38
(pop) ; 37
; [eval] !p1_34
(push) ; 37
(set-option :timeout 10)
(assert (not p1_34@1368@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5180 | !(p1_34@1368@01) | dead]
; [else-branch: 5180 | p1_34@1368@01 | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 5180 | p1_34@1368@01]
(assert p1_34@1368@01)
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
; [eval] !p2_29
; [then-branch: 5181 | !(p2_29@1211@01) | dead]
; [else-branch: 5181 | p2_29@1211@01 | live]
(push) ; 28
; [else-branch: 5181 | p2_29@1211@01]
(pop) ; 28
(pop) ; 27
; [eval] !p1_29
; [then-branch: 5182 | !(p1_29@1210@01) | dead]
; [else-branch: 5182 | p1_29@1210@01 | live]
(push) ; 27
; [else-branch: 5182 | p1_29@1210@01]
(pop) ; 27
(pop) ; 26
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 26
; [then-branch: 5183 | !(p2_29@1211@01) | live]
; [else-branch: 5183 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 5183 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5183 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 5184 | !(p2_29@1211@01) | dead]
; [else-branch: 5184 | p2_29@1211@01 | live]
(push) ; 26
; [else-branch: 5184 | p2_29@1211@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 5185 | !(p1_29@1210@01) | live]
; [else-branch: 5185 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 5185 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5185 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 5186 | !(p1_29@1210@01) | dead]
; [else-branch: 5186 | p1_29@1210@01 | live]
(push) ; 25
; [else-branch: 5186 | p1_29@1210@01]
(pop) ; 25
(pop) ; 24
; [eval] !p2_29
; [then-branch: 5187 | !(p2_29@1211@01) | dead]
; [else-branch: 5187 | p2_29@1211@01 | live]
(push) ; 24
; [else-branch: 5187 | p2_29@1211@01]
(pop) ; 24
(pop) ; 23
; [eval] !p1_29
; [then-branch: 5188 | !(p1_29@1210@01) | dead]
; [else-branch: 5188 | p1_29@1210@01 | live]
(push) ; 23
; [else-branch: 5188 | p1_29@1210@01]
(pop) ; 23
(pop) ; 22
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 5189 | !(p4_14@1302@01) | live]
; [else-branch: 5189 | p4_14@1302@01 | live]
(push) ; 23
; [then-branch: 5189 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5189 | p4_14@1302@01]
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 5190 | !(p4_14@1302@01) | dead]
; [else-branch: 5190 | p4_14@1302@01 | live]
(push) ; 22
; [else-branch: 5190 | p4_14@1302@01]
(pop) ; 22
(pop) ; 21
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 21
; [then-branch: 5191 | !(p3_14@1301@01) | live]
; [else-branch: 5191 | p3_14@1301@01 | live]
(push) ; 22
; [then-branch: 5191 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5191 | p3_14@1301@01]
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 5192 | !(p3_14@1301@01) | dead]
; [else-branch: 5192 | p3_14@1301@01 | live]
(push) ; 21
; [else-branch: 5192 | p3_14@1301@01]
(pop) ; 21
(pop) ; 20
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 20
; [then-branch: 5193 | !(p4_14@1302@01) | live]
; [else-branch: 5193 | p4_14@1302@01 | live]
(push) ; 21
; [then-branch: 5193 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5193 | p4_14@1302@01]
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 5194 | !(p4_14@1302@01) | dead]
; [else-branch: 5194 | p4_14@1302@01 | live]
(push) ; 20
; [else-branch: 5194 | p4_14@1302@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 5195 | !(p3_14@1301@01) | live]
; [else-branch: 5195 | p3_14@1301@01 | live]
(push) ; 20
; [then-branch: 5195 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5195 | p3_14@1301@01]
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 5196 | !(p3_14@1301@01) | dead]
; [else-branch: 5196 | p3_14@1301@01 | live]
(push) ; 19
; [else-branch: 5196 | p3_14@1301@01]
(pop) ; 19
(pop) ; 18
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 5197 | !(p4_14@1302@01) | live]
; [else-branch: 5197 | p4_14@1302@01 | live]
(push) ; 19
; [then-branch: 5197 | !(p4_14@1302@01)]
(assert (not p4_14@1302@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5197 | p4_14@1302@01]
(assert p4_14@1302@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p4_14@1302@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5198 | !(p4_14@1302@01) | dead]
; [else-branch: 5198 | p4_14@1302@01 | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 5198 | p4_14@1302@01]
(assert p4_14@1302@01)
(pop) ; 18
(pop) ; 17
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 5199 | !(p3_14@1301@01) | live]
; [else-branch: 5199 | p3_14@1301@01 | live]
(push) ; 18
; [then-branch: 5199 | !(p3_14@1301@01)]
(assert (not p3_14@1301@01))
(pop) ; 18
(push) ; 18
; [else-branch: 5199 | p3_14@1301@01]
(assert p3_14@1301@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p3_14@1301@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5200 | !(p3_14@1301@01) | dead]
; [else-branch: 5200 | p3_14@1301@01 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 5200 | p3_14@1301@01]
(assert p3_14@1301@01)
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 5046 | p2_31@1300@01]
(assert p2_31@1300@01)
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 4886 | p1_31@1299@01]
(assert p1_31@1299@01)
(pop) ; 11
(pop) ; 10
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 10
; [then-branch: 5201 | !(p2_29@1211@01) | live]
; [else-branch: 5201 | p2_29@1211@01 | live]
(push) ; 11
; [then-branch: 5201 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5201 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 5202 | !(p2_29@1211@01) | dead]
; [else-branch: 5202 | p2_29@1211@01 | live]
(push) ; 10
; [else-branch: 5202 | p2_29@1211@01]
(pop) ; 10
(pop) ; 9
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 9
; [then-branch: 5203 | !(p1_29@1210@01) | live]
; [else-branch: 5203 | p1_29@1210@01 | live]
(push) ; 10
; [then-branch: 5203 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 10
(push) ; 10
; [else-branch: 5203 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 5204 | !(p1_29@1210@01) | dead]
; [else-branch: 5204 | p1_29@1210@01 | live]
(push) ; 9
; [else-branch: 5204 | p1_29@1210@01]
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 6
; [then-branch: 5205 | !(p2_29@1211@01) | live]
; [else-branch: 5205 | p2_29@1211@01 | live]
(push) ; 7
; [then-branch: 5205 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(pop) ; 7
(push) ; 7
; [else-branch: 5205 | p2_29@1211@01]
; [eval] !except2_5
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [then-branch: 5206 | !(p2_29@1211@01) | dead]
; [else-branch: 5206 | p2_29@1211@01 | live]
(push) ; 6
; [else-branch: 5206 | p2_29@1211@01]
(pop) ; 6
(pop) ; 5
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 5
; [then-branch: 5207 | !(p1_29@1210@01) | live]
; [else-branch: 5207 | p1_29@1210@01 | live]
(push) ; 6
; [then-branch: 5207 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 6
(push) ; 6
; [else-branch: 5207 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 5208 | !(p1_29@1210@01) | dead]
; [else-branch: 5208 | p1_29@1210@01 | live]
(push) ; 5
; [else-branch: 5208 | p1_29@1210@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 4508 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
  $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5209 | p1_29@1210@01 | live]
; [else-branch: 5209 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5209 | p1_29@1210@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 4
; [then-branch: 5210 | p2_29@1211@01 | dead]
; [else-branch: 5210 | !(p2_29@1211@01) | live]
(push) ; 5
; [else-branch: 5210 | !(p2_29@1211@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
  $Snap.unit))
; [eval] p1_29 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5211 | p1_29@1210@01 | live]
; [else-branch: 5211 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5211 | p1_29@1210@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
  $Snap.unit))
; [eval] p2_29 ==> true
(push) ; 4
; [then-branch: 5212 | p2_29@1211@01 | dead]
; [else-branch: 5212 | !(p2_29@1211@01) | live]
(push) ; 5
; [else-branch: 5212 | !(p2_29@1211@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@1372@01 $Snap)
(assert (= $t@1372@01 ($Snap.combine ($Snap.first $t@1372@01) ($Snap.second $t@1372@01))))
(assert (= ($Snap.first $t@1372@01) $Snap.unit))
; [eval] p1_29 ==> (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_163) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5213 | p1_29@1210@01 | live]
; [else-branch: 5213 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 5213 | p1_29@1210@01]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_163) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_163)
(push) ; 7
; [then-branch: 5214 | False | live]
; [else-branch: 5214 | True | live]
(push) ; 8
; [then-branch: 5214 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 5214 | True]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_163)
(push) ; 9
; [then-branch: 5215 | False | live]
; [else-branch: 5215 | True | live]
(push) ; 10
; [then-branch: 5215 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5215 | True]
; [eval] _residue_163 <= _current_wait_level_163
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_29@1210@01 (<= _residue_163@1216@01 _current_wait_level_163@1222@01)))
(assert (=
  ($Snap.second $t@1372@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1372@01))
    ($Snap.second ($Snap.second $t@1372@01)))))
(assert (= ($Snap.first ($Snap.second $t@1372@01)) $Snap.unit))
; [eval] p2_29 ==> (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_163_0) && ((forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_163_0) && _residue_163_0 <= _current_wait_level_163_0)
(push) ; 5
; [then-branch: 5216 | p2_29@1211@01 | dead]
; [else-branch: 5216 | !(p2_29@1211@01) | live]
(push) ; 6
; [else-branch: 5216 | !(p2_29@1211@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@1372@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5217 | p1_29@1210@01 | live]
; [else-branch: 5217 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5217 | p1_29@1210@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))
; [then-branch: 5218 | p2_29@1211@01 | dead]
; [else-branch: 5218 | !(p2_29@1211@01) | live]
(push) ; 6
; [else-branch: 5218 | !(p2_29@1211@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))
  $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5219 | p1_29@1210@01 | live]
; [else-branch: 5219 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5219 | p1_29@1210@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 7
; [then-branch: 5220 | p2_29@1211@01 | dead]
; [else-branch: 5220 | !(p2_29@1211@01) | live]
(push) ; 8
; [else-branch: 5220 | !(p2_29@1211@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))
  $Snap.unit))
; [eval] p1_29 ==> int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5221 | p1_29@1210@01 | live]
; [else-branch: 5221 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5221 | p1_29@1210@01]
; [eval] int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5222 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 5222 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 5222 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] __prim__int___box__(20)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 20))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 20))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))) (__prim__int___box__ $Snap.unit 20)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))) (__prim__int___box__ $Snap.unit 20))))
(pop) ; 10
(push) ; 10
; [else-branch: 5222 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (__prim__int___box__%precondition $Snap.unit 20)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))) (__prim__int___box__ $Snap.unit 20)))))
; Joined path conditions
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
        (__prim__int___box__%precondition $Snap.unit 20)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))) (__prim__int___box__ $Snap.unit 20))))
    (or
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))))
(assert (=>
  (and
    p1_29@1210@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))) (__prim__int___box__ $Snap.unit 20))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))))
  $Snap.unit))
; [eval] p2_29 ==> int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
(push) ; 7
; [then-branch: 5223 | p2_29@1211@01 | dead]
; [else-branch: 5223 | !(p2_29@1211@01) | live]
(push) ; 8
; [else-branch: 5223 | !(p2_29@1211@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))))
  $Snap.unit))
; [eval] p1_29 ==> !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5224 | p1_29@1210@01 | live]
; [else-branch: 5224 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5224 | p1_29@1210@01]
; [eval] !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] !int___eq__(i_0, __prim__int___box__(0))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5225 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | live]
; [else-branch: 5225 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 5225 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] __prim__int___box__(30)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))) (__prim__int___box__ $Snap.unit 30)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))) (__prim__int___box__ $Snap.unit 30))))
(pop) ; 10
(push) ; 10
; [else-branch: 5225 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
    (__prim__int___box__%precondition $Snap.unit 30)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))) (__prim__int___box__ $Snap.unit 30)))))
; Joined path conditions
(assert (or
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
      (and
        (not
          (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
        (__prim__int___box__%precondition $Snap.unit 30)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))) (__prim__int___box__ $Snap.unit 30))))
    (or
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))))
(assert (=>
  (and
    p1_29@1210@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1372@01)))) (__prim__int___box__ $Snap.unit 30))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))))))
  $Snap.unit))
; [eval] p2_29 ==> !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
(push) ; 7
; [then-branch: 5226 | p2_29@1211@01 | dead]
; [else-branch: 5226 | !(p2_29@1211@01) | live]
(push) ; 8
; [else-branch: 5226 | !(p2_29@1211@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))))))
  $Snap.unit))
; [eval] p1_29 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5227 | p1_29@1210@01 | live]
; [else-branch: 5227 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5227 | p1_29@1210@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1372@01)))))))))))
  $Snap.unit))
; [eval] p2_29 ==> true
(push) ; 7
; [then-branch: 5228 | p2_29@1211@01 | dead]
; [else-branch: 5228 | !(p2_29@1211@01) | live]
(push) ; 8
; [else-branch: 5228 | !(p2_29@1211@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_5: Bool
(declare-const except1_5@1373@01 Bool)
; [exec]
; var except2_5: Bool
(declare-const except2_5@1374@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@1375@01 $Ref)
; [exec]
; var _err_6: Ref
(declare-const _err_6@1376@01 $Ref)
; [exec]
; var cl: Ref
(declare-const cl@1377@01 $Ref)
; [exec]
; var cl_0: Ref
(declare-const cl_0@1378@01 $Ref)
; [exec]
; var error_5: Ref
(declare-const error_5@1379@01 $Ref)
; [exec]
; var error_5_0: Ref
(declare-const error_5_0@1380@01 $Ref)
; [exec]
; var try_finally_13: Int
(declare-const try_finally_13@1381@01 Int)
; [exec]
; var try_finally_13_0: Int
(declare-const try_finally_13_0@1382@01 Int)
; [exec]
; var error_6: Ref
(declare-const error_6@1383@01 $Ref)
; [exec]
; var error_6_0: Ref
(declare-const error_6_0@1384@01 $Ref)
; [exec]
; var try_finally_14: Int
(declare-const try_finally_14@1385@01 Int)
; [exec]
; var try_finally_14_0: Int
(declare-const try_finally_14_0@1386@01 Int)
; [exec]
; var i_6: Ref
(declare-const i_6@1387@01 $Ref)
; [exec]
; var i_6_0: Ref
(declare-const i_6_0@1388@01 $Ref)
; [exec]
; var c_6: Ref
(declare-const c_6@1389@01 $Ref)
; [exec]
; var c_6_0: Ref
(declare-const c_6_0@1390@01 $Ref)
; [exec]
; var MyException_res_7: Ref
(declare-const MyException_res_7@1391@01 $Ref)
; [exec]
; var MyException_res_7_0: Ref
(declare-const MyException_res_7_0@1392@01 $Ref)
; [exec]
; var MyException2_res_0: Ref
(declare-const MyException2_res_0@1393@01 $Ref)
; [exec]
; var MyException2_res_0_0: Ref
(declare-const MyException2_res_0_0@1394@01 $Ref)
; [exec]
; var _cwl_163: Perm
(declare-const _cwl_163@1395@01 $Perm)
; [exec]
; var _cwl_163_0: Perm
(declare-const _cwl_163_0@1396@01 $Perm)
; [exec]
; var _method_measures_163: Seq[Measure$]
(declare-const _method_measures_163@1397@01 Seq<Measure$>)
; [exec]
; var _method_measures_163_0: Seq[Measure$]
(declare-const _method_measures_163_0@1398@01 Seq<Measure$>)
; [exec]
; var p1_30: Bool
(declare-const p1_30@1399@01 Bool)
; [exec]
; var p2_30: Bool
(declare-const p2_30@1400@01 Bool)
; [exec]
; var p3_13: Bool
(declare-const p3_13@1401@01 Bool)
; [exec]
; var p4_13: Bool
(declare-const p4_13@1402@01 Bool)
; [exec]
; var bypass1_5: Bool
(declare-const bypass1_5@1403@01 Bool)
; [exec]
; var bypass2_5: Bool
(declare-const bypass2_5@1404@01 Bool)
; [exec]
; var thisexcept1_6: Bool
(declare-const thisexcept1_6@1405@01 Bool)
; [exec]
; var thisexcept2_6: Bool
(declare-const thisexcept2_6@1406@01 Bool)
; [exec]
; var p1_32: Bool
(declare-const p1_32@1407@01 Bool)
; [exec]
; var p2_32: Bool
(declare-const p2_32@1408@01 Bool)
; [exec]
; var p1_34: Bool
(declare-const p1_34@1409@01 Bool)
; [exec]
; var p2_34: Bool
(declare-const p2_34@1410@01 Bool)
; [exec]
; var bypass1_6: Bool
(declare-const bypass1_6@1411@01 Bool)
; [exec]
; var bypass2_6: Bool
(declare-const bypass2_6@1412@01 Bool)
; [exec]
; var oldexcept1_2: Bool
(declare-const oldexcept1_2@1413@01 Bool)
; [exec]
; var oldexcept2_2: Bool
(declare-const oldexcept2_2@1414@01 Bool)
; [exec]
; var thisexcept1_5: Bool
(declare-const thisexcept1_5@1415@01 Bool)
; [exec]
; var thisexcept2_5: Bool
(declare-const thisexcept2_5@1416@01 Bool)
; [exec]
; var tmp_ret1_2: Bool
(declare-const tmp_ret1_2@1417@01 Bool)
; [exec]
; var tmp_ret2_2: Bool
(declare-const tmp_ret2_2@1418@01 Bool)
; [exec]
; var tmp_break1_2: Bool
(declare-const tmp_break1_2@1419@01 Bool)
; [exec]
; var tmp_break2_2: Bool
(declare-const tmp_break2_2@1420@01 Bool)
; [exec]
; var tmp_cont1_2: Bool
(declare-const tmp_cont1_2@1421@01 Bool)
; [exec]
; var tmp_cont2_2: Bool
(declare-const tmp_cont2_2@1422@01 Bool)
; [exec]
; var tmp_except1_2: Bool
(declare-const tmp_except1_2@1423@01 Bool)
; [exec]
; var tmp_except2_2: Bool
(declare-const tmp_except2_2@1424@01 Bool)
; [exec]
; var p1_31: Bool
(declare-const p1_31@1425@01 Bool)
; [exec]
; var p2_31: Bool
(declare-const p2_31@1426@01 Bool)
; [exec]
; var p3_14: Bool
(declare-const p3_14@1427@01 Bool)
; [exec]
; var p4_14: Bool
(declare-const p4_14@1428@01 Bool)
; [exec]
; var tmp_8: Ref
(declare-const tmp_8@1429@01 $Ref)
; [exec]
; var tmp_9: Ref
(declare-const tmp_9@1430@01 $Ref)
; [exec]
; var p1_33: Bool
(declare-const p1_33@1431@01 Bool)
; [exec]
; var p2_33: Bool
(declare-const p2_33@1432@01 Bool)
; [exec]
; var p3_15: Bool
(declare-const p3_15@1433@01 Bool)
; [exec]
; var p4_15: Bool
(declare-const p4_15@1434@01 Bool)
; [exec]
; var p1_35: Bool
(declare-const p1_35@1435@01 Bool)
; [exec]
; var p2_35: Bool
(declare-const p2_35@1436@01 Bool)
; [exec]
; var p3_16: Bool
(declare-const p3_16@1437@01 Bool)
; [exec]
; var p4_16: Bool
(declare-const p4_16@1438@01 Bool)
; [exec]
; inhale p1_29
(declare-const $t@1439@01 $Snap)
(assert (= $t@1439@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; except1_5 := false
; [exec]
; except2_5 := false
; [eval] p1_29 && !except1_5
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5229 | !(p1_29@1210@01) | live]
; [else-branch: 5229 | p1_29@1210@01 | live]
(push) ; 6
; [then-branch: 5229 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 6
(push) ; 6
; [else-branch: 5229 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_29@1210@01 (not p1_29@1210@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5230 | p1_29@1210@01 | live]
; [else-branch: 5230 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5230 | p1_29@1210@01]
; [exec]
; _method_measures_163 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_6 := i_0
; [exec]
; c_6 := c_2
; [eval] p2_29 && !except2_5
(push) ; 6
; [then-branch: 5231 | !(p2_29@1211@01) | live]
; [else-branch: 5231 | p2_29@1211@01 | live]
(push) ; 7
; [then-branch: 5231 | !(p2_29@1211@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 5231 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_29@1211@01 (not p2_29@1211@01)))
; [then-branch: 5232 | p2_29@1211@01 | dead]
; [else-branch: 5232 | !(p2_29@1211@01) | live]
(push) ; 6
; [else-branch: 5232 | !(p2_29@1211@01)]
(pop) ; 6
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 6
; [then-branch: 5233 | !(p2_29@1211@01) | live]
; [else-branch: 5233 | p2_29@1211@01 | live]
(push) ; 7
; [then-branch: 5233 | !(p2_29@1211@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 5233 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5234 | !(p2_29@1211@01) | live]
; [else-branch: 5234 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 5234 | !(p2_29@1211@01)]
; [exec]
; p1_30 := p1_29 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_29 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 7
; [then-branch: 5235 | !(p1_29@1210@01) | live]
; [else-branch: 5235 | p1_29@1210@01 | live]
(push) ; 8
; [then-branch: 5235 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 8
(push) ; 8
; [else-branch: 5235 | p1_29@1210@01]
; [eval] !except1_5
(push) ; 9
; [then-branch: 5236 | False | live]
; [else-branch: 5236 | True | live]
(push) ; 10
; [then-branch: 5236 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5236 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; p2_30 := p2_29 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_29 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 7
; [then-branch: 5237 | !(p2_29@1211@01) | live]
; [else-branch: 5237 | p2_29@1211@01 | live]
(push) ; 8
; [then-branch: 5237 | !(p2_29@1211@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 5237 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(push) ; 9
; [then-branch: 5238 | False | live]
; [else-branch: 5238 | True | live]
(push) ; 10
; [then-branch: 5238 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5238 | True]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; p3_13 := p1_29 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_29 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 7
; [then-branch: 5239 | !(p1_29@1210@01) | live]
; [else-branch: 5239 | p1_29@1210@01 | live]
(push) ; 8
; [then-branch: 5239 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 8
(push) ; 8
; [else-branch: 5239 | p1_29@1210@01]
; [eval] !except1_5
(push) ; 9
; [then-branch: 5240 | False | live]
; [else-branch: 5240 | True | live]
(push) ; 10
; [then-branch: 5240 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5240 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; p4_13 := p2_29 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_29 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 7
; [then-branch: 5241 | !(p2_29@1211@01) | live]
; [else-branch: 5241 | p2_29@1211@01 | live]
(push) ; 8
; [then-branch: 5241 | !(p2_29@1211@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 5241 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(push) ; 9
; [then-branch: 5242 | False | live]
; [else-branch: 5242 | True | live]
(push) ; 10
; [then-branch: 5242 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5242 | True]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] p1_30 && !except1_5
; [then-branch: 5243 | False | dead]
; [else-branch: 5243 | True | live]
(push) ; 7
; [else-branch: 5243 | True]
(pop) ; 7
; [eval] !(p1_30 && !except1_5)
; [eval] p1_30 && !except1_5
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5244 | True | live]
; [else-branch: 5244 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 5244 | True]
; [eval] p2_30 && !except2_5
; [then-branch: 5245 | False | dead]
; [else-branch: 5245 | True | live]
(push) ; 8
; [else-branch: 5245 | True]
(pop) ; 8
; [eval] !(p2_30 && !except2_5)
; [eval] p2_30 && !except2_5
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5246 | True | live]
; [else-branch: 5246 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5246 | True]
; [eval] p1_29 && !except1_5
(push) ; 9
; [then-branch: 5247 | !(p1_29@1210@01) | live]
; [else-branch: 5247 | p1_29@1210@01 | live]
(push) ; 10
; [then-branch: 5247 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 10
(push) ; 10
; [else-branch: 5247 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5248 | p1_29@1210@01 | live]
; [else-branch: 5248 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5248 | p1_29@1210@01]
; [exec]
; c_6.Container_value := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(declare-const Container_value@1440@01 $Ref)
(assert (= Container_value@1440@01 (__prim__int___box__ $Snap.unit 12)))
; [eval] p2_29 && !except2_5
(push) ; 10
; [then-branch: 5249 | !(p2_29@1211@01) | live]
; [else-branch: 5249 | p2_29@1211@01 | live]
(push) ; 11
; [then-branch: 5249 | !(p2_29@1211@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 5249 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 5250 | p2_29@1211@01 | dead]
; [else-branch: 5250 | !(p2_29@1211@01) | live]
(push) ; 10
; [else-branch: 5250 | !(p2_29@1211@01)]
(pop) ; 10
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 10
; [then-branch: 5251 | !(p2_29@1211@01) | live]
; [else-branch: 5251 | p2_29@1211@01 | live]
(push) ; 11
; [then-branch: 5251 | !(p2_29@1211@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 5251 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5252 | !(p2_29@1211@01) | live]
; [else-branch: 5252 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 5252 | !(p2_29@1211@01)]
; [exec]
; bypass1_5 := !(p1_29 && !except1_5)
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 11
; [then-branch: 5253 | !(p1_29@1210@01) | live]
; [else-branch: 5253 | p1_29@1210@01 | live]
(push) ; 12
; [then-branch: 5253 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 12
(push) ; 12
; [else-branch: 5253 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const bypass1_5@1441@01 Bool)
(assert (= bypass1_5@1441@01 (not p1_29@1210@01)))
; [exec]
; bypass2_5 := !(p2_29 && !except2_5)
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 11
; [then-branch: 5254 | !(p2_29@1211@01) | live]
; [else-branch: 5254 | p2_29@1211@01 | live]
(push) ; 12
; [then-branch: 5254 | !(p2_29@1211@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 5254 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const bypass2_5@1442@01 Bool)
(assert (= bypass2_5@1442@01 (not p2_29@1211@01)))
; [exec]
; bypass1_6 := !(p1_29 && !except1_5)
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 11
; [then-branch: 5255 | !(p1_29@1210@01) | live]
; [else-branch: 5255 | p1_29@1210@01 | live]
(push) ; 12
; [then-branch: 5255 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 12
(push) ; 12
; [else-branch: 5255 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const bypass1_6@1443@01 Bool)
(assert (= bypass1_6@1443@01 (not p1_29@1210@01)))
; [exec]
; bypass2_6 := !(p2_29 && !except2_5)
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 11
; [then-branch: 5256 | !(p2_29@1211@01) | live]
; [else-branch: 5256 | p2_29@1211@01 | live]
(push) ; 12
; [then-branch: 5256 | !(p2_29@1211@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 5256 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const bypass2_6@1444@01 Bool)
(assert (= bypass2_6@1444@01 (not p2_29@1211@01)))
; [exec]
; oldexcept1_2 := except1_5
; [exec]
; oldexcept2_2 := except2_5
; [exec]
; p1_31 := p1_29 && (!except1_5 && int___eq__(i_6, __prim__int___box__(0)))
; [eval] p1_29 && (!except1_5 && int___eq__(i_6, __prim__int___box__(0)))
(push) ; 11
; [then-branch: 5257 | !(p1_29@1210@01) | live]
; [else-branch: 5257 | p1_29@1210@01 | live]
(push) ; 12
; [then-branch: 5257 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 12
(push) ; 12
; [else-branch: 5257 | p1_29@1210@01]
; [eval] !except1_5
(push) ; 13
; [then-branch: 5258 | False | live]
; [else-branch: 5258 | True | live]
(push) ; 14
; [then-branch: 5258 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 5258 | True]
; [eval] int___eq__(i_6, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 15
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(declare-const p1_31@1445@01 Bool)
(assert (=
  p1_31@1445@01
  (and
    p1_29@1210@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
; [exec]
; p2_31 := p2_29 && (!except2_5 && int___eq__(i_6_0, __prim__int___box__(0)))
; [eval] p2_29 && (!except2_5 && int___eq__(i_6_0, __prim__int___box__(0)))
(push) ; 11
; [then-branch: 5259 | !(p2_29@1211@01) | live]
; [else-branch: 5259 | p2_29@1211@01 | live]
(push) ; 12
; [then-branch: 5259 | !(p2_29@1211@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 5259 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(push) ; 13
; [then-branch: 5260 | False | live]
; [else-branch: 5260 | True | live]
(push) ; 14
; [then-branch: 5260 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 5260 | True]
; [eval] int___eq__(i_6_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 15
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_6_0@1388@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_6_0@1388@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_6_0@1388@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_6_0@1388@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_6_0@1388@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> i_6_0@1388@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_6_0@1388@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    p2_29@1211@01
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_6_0@1388@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_6_0@1388@01 (__prim__int___box__ $Snap.unit 0)))))
(declare-const p2_31@1446@01 Bool)
(assert (=
  p2_31@1446@01
  (and
    p2_29@1211@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_6_0@1388@01 (__prim__int___box__ $Snap.unit 0)))))
; [exec]
; p3_14 := p1_29 && (!except1_5 && !int___eq__(i_6, __prim__int___box__(0)))
; [eval] p1_29 && (!except1_5 && !int___eq__(i_6, __prim__int___box__(0)))
(push) ; 11
; [then-branch: 5261 | !(p1_29@1210@01) | live]
; [else-branch: 5261 | p1_29@1210@01 | live]
(push) ; 12
; [then-branch: 5261 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 12
(push) ; 12
; [else-branch: 5261 | p1_29@1210@01]
; [eval] !except1_5
(push) ; 13
; [then-branch: 5262 | False | live]
; [else-branch: 5262 | True | live]
(push) ; 14
; [then-branch: 5262 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 5262 | True]
; [eval] !int___eq__(i_6, __prim__int___box__(0))
; [eval] int___eq__(i_6, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 15
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const p3_14@1447@01 Bool)
(assert (=
  p3_14@1447@01
  (and
    p1_29@1210@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))))
; [exec]
; p4_14 := p2_29 &&
;   (!except2_5 && !int___eq__(i_6_0, __prim__int___box__(0)))
; [eval] p2_29 && (!except2_5 && !int___eq__(i_6_0, __prim__int___box__(0)))
(push) ; 11
; [then-branch: 5263 | !(p2_29@1211@01) | live]
; [else-branch: 5263 | p2_29@1211@01 | live]
(push) ; 12
; [then-branch: 5263 | !(p2_29@1211@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 5263 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(push) ; 13
; [then-branch: 5264 | False | live]
; [else-branch: 5264 | True | live]
(push) ; 14
; [then-branch: 5264 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 5264 | True]
; [eval] !int___eq__(i_6_0, __prim__int___box__(0))
; [eval] int___eq__(i_6_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 15
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_6_0@1388@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_6_0@1388@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_6_0@1388@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_6_0@1388@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_6_0@1388@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> i_6_0@1388@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_6_0@1388@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const p4_14@1448@01 Bool)
(assert (=
  p4_14@1448@01
  (and
    p2_29@1211@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_6_0@1388@01 (__prim__int___box__ $Snap.unit 0))))))
; [exec]
; tmp_8 := new()
(declare-const tmp_8@1449@01 $Ref)
(assert (not (= tmp_8@1449@01 $Ref.null)))
(assert (not (= tmp_8@1449@01 MyException_res_7_0@1392@01)))
(assert (not (= tmp_8@1449@01 _err_6@1376@01)))
(assert (not (= tmp_8@1449@01 cl@1377@01)))
(assert (not (= tmp_8@1449@01 MyException2_res_0_0@1394@01)))
(assert (not (= tmp_8@1449@01 c_2@1220@01)))
(assert (not (= tmp_8@1449@01 MyException2_res_0@1393@01)))
(assert (not (= tmp_8@1449@01 error_5@1379@01)))
(assert (not (= tmp_8@1449@01 Container_value@1440@01)))
(assert (not (= tmp_8@1449@01 error_6_0@1384@01)))
(assert (not (= tmp_8@1449@01 MyException_res_7@1391@01)))
(assert (not (= tmp_8@1449@01 error_5_0@1380@01)))
(assert (not (= tmp_8@1449@01 i_6_0@1388@01)))
(assert (not (= tmp_8@1449@01 i_0_0@1219@01)))
(assert (not (= tmp_8@1449@01 _cthread_163_0@1213@01)))
(assert (not (= tmp_8@1449@01 tmp_8@1429@01)))
(assert (not (= tmp_8@1449@01 _cthread_163@1212@01)))
(assert (not (= tmp_8@1449@01 error_6@1383@01)))
(assert (not (= tmp_8@1449@01 i_0@1218@01)))
(assert (not (= tmp_8@1449@01 cl_0@1378@01)))
(assert (not (= tmp_8@1449@01 tmp_9@1430@01)))
(assert (not (= tmp_8@1449@01 c_2_0@1221@01)))
(assert (not (= tmp_8@1449@01 c_6_0@1390@01)))
; [eval] p1_31 && !except1_5
(push) ; 11
; [then-branch: 5265 | !(p1_31@1445@01) | live]
; [else-branch: 5265 | p1_31@1445@01 | live]
(push) ; 12
; [then-branch: 5265 | !(p1_31@1445@01)]
(assert (not p1_31@1445@01))
(pop) ; 12
(push) ; 12
; [else-branch: 5265 | p1_31@1445@01]
(assert p1_31@1445@01)
; [eval] !except1_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or p1_31@1445@01 (not p1_31@1445@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_31@1445@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not p1_31@1445@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5266 | p1_31@1445@01 | live]
; [else-branch: 5266 | !(p1_31@1445@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5266 | p1_31@1445@01]
(assert p1_31@1445@01)
; [exec]
; MyException_res_7 := tmp_8
; [eval] p2_31 && !except2_5
(push) ; 12
; [then-branch: 5267 | !(p2_31@1446@01) | live]
; [else-branch: 5267 | p2_31@1446@01 | live]
(push) ; 13
; [then-branch: 5267 | !(p2_31@1446@01)]
(assert (not p2_31@1446@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5267 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or p2_31@1446@01 (not p2_31@1446@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_31@1446@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5268 | p2_31@1446@01 | dead]
; [else-branch: 5268 | !(p2_31@1446@01) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 5268 | !(p2_31@1446@01)]
(assert (not p2_31@1446@01))
(pop) ; 12
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 12
; [then-branch: 5269 | !(p2_31@1446@01) | live]
; [else-branch: 5269 | p2_31@1446@01 | live]
(push) ; 13
; [then-branch: 5269 | !(p2_31@1446@01)]
(assert (not p2_31@1446@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5269 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_31@1446@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_31@1446@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5270 | !(p2_31@1446@01) | live]
; [else-branch: 5270 | p2_31@1446@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 5270 | !(p2_31@1446@01)]
(assert (not p2_31@1446@01))
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 5271 | !(p1_31@1445@01) | live]
; [else-branch: 5271 | p1_31@1445@01 | live]
(push) ; 14
; [then-branch: 5271 | !(p1_31@1445@01)]
(assert (not p1_31@1445@01))
(pop) ; 14
(push) ; 14
; [else-branch: 5271 | p1_31@1445@01]
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_31@1445@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5272 | p1_31@1445@01 | live]
; [else-branch: 5272 | !(p1_31@1445@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5272 | p1_31@1445@01]
; [exec]
; inhale typeof(MyException_res_7) == MyException()
(declare-const $t@1450@01 $Snap)
(assert (= $t@1450@01 $Snap.unit))
; [eval] typeof(MyException_res_7) == MyException()
; [eval] typeof(MyException_res_7)
; [eval] MyException()
(assert (= (typeof<PyType> tmp_8@1449@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_31 && !except2_5
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5273 | !(p2_31@1446@01) | live]
; [else-branch: 5273 | p2_31@1446@01 | live]
(push) ; 15
; [then-branch: 5273 | !(p2_31@1446@01)]
(pop) ; 15
(push) ; 15
; [else-branch: 5273 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 5274 | p2_31@1446@01 | dead]
; [else-branch: 5274 | !(p2_31@1446@01) | live]
(push) ; 14
; [else-branch: 5274 | !(p2_31@1446@01)]
(pop) ; 14
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 14
; [then-branch: 5275 | !(p2_31@1446@01) | live]
; [else-branch: 5275 | p2_31@1446@01 | live]
(push) ; 15
; [then-branch: 5275 | !(p2_31@1446@01)]
(pop) ; 15
(push) ; 15
; [else-branch: 5275 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not p2_31@1446@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5276 | !(p2_31@1446@01) | live]
; [else-branch: 5276 | p2_31@1446@01 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5276 | !(p2_31@1446@01)]
; [eval] p1_31 && !except1_5
(push) ; 15
; [then-branch: 5277 | !(p1_31@1445@01) | live]
; [else-branch: 5277 | p1_31@1445@01 | live]
(push) ; 16
; [then-branch: 5277 | !(p1_31@1445@01)]
(assert (not p1_31@1445@01))
(pop) ; 16
(push) ; 16
; [else-branch: 5277 | p1_31@1445@01]
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_31@1445@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5278 | p1_31@1445@01 | live]
; [else-branch: 5278 | !(p1_31@1445@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5278 | p1_31@1445@01]
; [exec]
; _err := MyException_res_7
; [exec]
; except1_5 := true
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 5279 | !(p2_31@1446@01) | live]
; [else-branch: 5279 | p2_31@1446@01 | live]
(push) ; 17
; [then-branch: 5279 | !(p2_31@1446@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 5279 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 5280 | p2_31@1446@01 | dead]
; [else-branch: 5280 | !(p2_31@1446@01) | live]
(push) ; 16
; [else-branch: 5280 | !(p2_31@1446@01)]
(pop) ; 16
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 5281 | !(p2_31@1446@01) | live]
; [else-branch: 5281 | p2_31@1446@01 | live]
(push) ; 17
; [then-branch: 5281 | !(p2_31@1446@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 5281 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2_31@1446@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5282 | !(p2_31@1446@01) | live]
; [else-branch: 5282 | p2_31@1446@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5282 | !(p2_31@1446@01)]
; [exec]
; tmp_9 := new()
(declare-const tmp_9@1451@01 $Ref)
(assert (not (= tmp_9@1451@01 $Ref.null)))
(assert (not (= tmp_9@1451@01 MyException_res_7_0@1392@01)))
(assert (not (= tmp_9@1451@01 _err_6@1376@01)))
(assert (not (= tmp_9@1451@01 cl@1377@01)))
(assert (not (= tmp_9@1451@01 MyException2_res_0_0@1394@01)))
(assert (not (= tmp_9@1451@01 c_2@1220@01)))
(assert (not (= tmp_9@1451@01 MyException2_res_0@1393@01)))
(assert (not (= tmp_9@1451@01 error_5@1379@01)))
(assert (not (= tmp_9@1451@01 Container_value@1440@01)))
(assert (not (= tmp_9@1451@01 error_6_0@1384@01)))
(assert (not (= tmp_9@1451@01 error_5_0@1380@01)))
(assert (not (= tmp_9@1451@01 i_6_0@1388@01)))
(assert (not (= tmp_9@1451@01 i_0_0@1219@01)))
(assert (not (= tmp_9@1451@01 tmp_8@1449@01)))
(assert (not (= tmp_9@1451@01 _cthread_163_0@1213@01)))
(assert (not (= tmp_9@1451@01 _cthread_163@1212@01)))
(assert (not (= tmp_9@1451@01 error_6@1383@01)))
(assert (not (= tmp_9@1451@01 i_0@1218@01)))
(assert (not (= tmp_9@1451@01 cl_0@1378@01)))
(assert (not (= tmp_9@1451@01 tmp_9@1430@01)))
(assert (not (= tmp_9@1451@01 c_2_0@1221@01)))
(assert (not (= tmp_9@1451@01 c_6_0@1390@01)))
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 5283 | !(p3_14@1447@01) | live]
; [else-branch: 5283 | p3_14@1447@01 | live]
(push) ; 18
; [then-branch: 5283 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 18
(push) ; 18
; [else-branch: 5283 | p3_14@1447@01]
(assert p3_14@1447@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p3_14@1447@01 (not p3_14@1447@01)))
; [then-branch: 5284 | False | dead]
; [else-branch: 5284 | True | live]
(push) ; 17
; [else-branch: 5284 | True]
(pop) ; 17
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 5285 | !(p3_14@1447@01) | live]
; [else-branch: 5285 | p3_14@1447@01 | live]
(push) ; 18
; [then-branch: 5285 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 18
(push) ; 18
; [else-branch: 5285 | p3_14@1447@01]
(assert p3_14@1447@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5286 | True | live]
; [else-branch: 5286 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 5286 | True]
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 5287 | !(p4_14@1448@01) | live]
; [else-branch: 5287 | p4_14@1448@01 | live]
(push) ; 19
; [then-branch: 5287 | !(p4_14@1448@01)]
(assert (not p4_14@1448@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5287 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p4_14@1448@01 (not p4_14@1448@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p4_14@1448@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5288 | p4_14@1448@01 | dead]
; [else-branch: 5288 | !(p4_14@1448@01) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 5288 | !(p4_14@1448@01)]
(assert (not p4_14@1448@01))
(pop) ; 18
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 5289 | !(p4_14@1448@01) | live]
; [else-branch: 5289 | p4_14@1448@01 | live]
(push) ; 19
; [then-branch: 5289 | !(p4_14@1448@01)]
(assert (not p4_14@1448@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5289 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p4_14@1448@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not p4_14@1448@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5290 | !(p4_14@1448@01) | live]
; [else-branch: 5290 | p4_14@1448@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 5290 | !(p4_14@1448@01)]
(assert (not p4_14@1448@01))
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 5291 | !(p3_14@1447@01) | live]
; [else-branch: 5291 | p3_14@1447@01 | live]
(push) ; 20
; [then-branch: 5291 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5291 | p3_14@1447@01]
(assert p3_14@1447@01)
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 5292 | False | dead]
; [else-branch: 5292 | True | live]
(push) ; 19
; [else-branch: 5292 | True]
(pop) ; 19
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 5293 | !(p3_14@1447@01) | live]
; [else-branch: 5293 | p3_14@1447@01 | live]
(push) ; 20
; [then-branch: 5293 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5293 | p3_14@1447@01]
(assert p3_14@1447@01)
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5294 | True | live]
; [else-branch: 5294 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 5294 | True]
; [eval] p4_14 && !except2_5
(push) ; 20
; [then-branch: 5295 | !(p4_14@1448@01) | live]
; [else-branch: 5295 | p4_14@1448@01 | live]
(push) ; 21
; [then-branch: 5295 | !(p4_14@1448@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 5295 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 5296 | p4_14@1448@01 | dead]
; [else-branch: 5296 | !(p4_14@1448@01) | live]
(push) ; 20
; [else-branch: 5296 | !(p4_14@1448@01)]
(pop) ; 20
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 20
; [then-branch: 5297 | !(p4_14@1448@01) | live]
; [else-branch: 5297 | p4_14@1448@01 | live]
(push) ; 21
; [then-branch: 5297 | !(p4_14@1448@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 5297 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p4_14@1448@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5298 | !(p4_14@1448@01) | live]
; [else-branch: 5298 | p4_14@1448@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5298 | !(p4_14@1448@01)]
; [eval] p3_14 && !except1_5
(push) ; 21
; [then-branch: 5299 | !(p3_14@1447@01) | live]
; [else-branch: 5299 | p3_14@1447@01 | live]
(push) ; 22
; [then-branch: 5299 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5299 | p3_14@1447@01]
(assert p3_14@1447@01)
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 5300 | False | dead]
; [else-branch: 5300 | True | live]
(push) ; 21
; [else-branch: 5300 | True]
(pop) ; 21
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 21
; [then-branch: 5301 | !(p3_14@1447@01) | live]
; [else-branch: 5301 | p3_14@1447@01 | live]
(push) ; 22
; [then-branch: 5301 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5301 | p3_14@1447@01]
(assert p3_14@1447@01)
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5302 | True | live]
; [else-branch: 5302 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5302 | True]
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 5303 | !(p4_14@1448@01) | live]
; [else-branch: 5303 | p4_14@1448@01 | live]
(push) ; 23
; [then-branch: 5303 | !(p4_14@1448@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 5303 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 5304 | p4_14@1448@01 | dead]
; [else-branch: 5304 | !(p4_14@1448@01) | live]
(push) ; 22
; [else-branch: 5304 | !(p4_14@1448@01)]
(pop) ; 22
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 5305 | !(p4_14@1448@01) | live]
; [else-branch: 5305 | p4_14@1448@01 | live]
(push) ; 23
; [then-branch: 5305 | !(p4_14@1448@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 5305 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p4_14@1448@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5306 | !(p4_14@1448@01) | live]
; [else-branch: 5306 | p4_14@1448@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 5306 | !(p4_14@1448@01)]
; [exec]
; thisexcept1_5 := except1_5 && !bypass1_6
; [eval] except1_5 && !bypass1_6
(push) ; 23
; [then-branch: 5307 | False | live]
; [else-branch: 5307 | True | live]
(push) ; 24
; [then-branch: 5307 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 5307 | True]
; [eval] !bypass1_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_5@1452@01 Bool)
(assert (= thisexcept1_5@1452@01 (not bypass1_6@1443@01)))
; [exec]
; thisexcept2_5 := except2_5 && !bypass2_6
; [eval] except2_5 && !bypass2_6
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5308 | p1_29@1210@01 | live]
; [else-branch: 5308 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5308 | p1_29@1210@01]
; [exec]
; tmp_except1_2 := except1_5
; [exec]
; except1_5 := oldexcept1_2
; [then-branch: 5309 | p2_29@1211@01 | dead]
; [else-branch: 5309 | !(p2_29@1211@01) | live]
(push) ; 24
; [else-branch: 5309 | !(p2_29@1211@01)]
(pop) ; 24
; [eval] !p2_29
(push) ; 24
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5310 | !(p2_29@1211@01) | live]
; [else-branch: 5310 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 5310 | !(p2_29@1211@01)]
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 5311 | !(p1_29@1210@01) | live]
; [else-branch: 5311 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 5311 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5311 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5312 | p1_29@1210@01 | live]
; [else-branch: 5312 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5312 | p1_29@1210@01]
; [exec]
; cl := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 26
(pop) ; 26
; Joined path conditions
(declare-const cl@1453@01 $Ref)
(assert (= cl@1453@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; inhale _isDefined(27747)
(declare-const $t@1454@01 $Snap)
(assert (= $t@1454@01 $Snap.unit))
; [eval] _isDefined(27747)
(push) ; 26
(assert (_isDefined%precondition $Snap.unit 27747))
(pop) ; 26
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 27747))
(assert (_isDefined $Snap.unit 27747))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_29 && !except2_5
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5313 | !(p2_29@1211@01) | live]
; [else-branch: 5313 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 5313 | !(p2_29@1211@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 5313 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 5314 | p2_29@1211@01 | dead]
; [else-branch: 5314 | !(p2_29@1211@01) | live]
(push) ; 26
; [else-branch: 5314 | !(p2_29@1211@01)]
(pop) ; 26
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 26
; [then-branch: 5315 | !(p2_29@1211@01) | live]
; [else-branch: 5315 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 5315 | !(p2_29@1211@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 5315 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5316 | !(p2_29@1211@01) | live]
; [else-branch: 5316 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5316 | !(p2_29@1211@01)]
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5317 | p1_29@1210@01 | live]
; [else-branch: 5317 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5317 | p1_29@1210@01]
; [exec]
; except1_5 := except1_5 || tmp_except1_2
; [eval] except1_5 || tmp_except1_2
(push) ; 28
; [then-branch: 5318 | False | live]
; [else-branch: 5318 | True | live]
(push) ; 29
; [then-branch: 5318 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 5318 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 5319 | p2_29@1211@01 | dead]
; [else-branch: 5319 | !(p2_29@1211@01) | live]
(push) ; 28
; [else-branch: 5319 | !(p2_29@1211@01)]
(pop) ; 28
; [eval] !p2_29
(push) ; 28
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5320 | !(p2_29@1211@01) | live]
; [else-branch: 5320 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 5320 | !(p2_29@1211@01)]
; [exec]
; thisexcept1_6 := except1_5 && !bypass1_5
; [eval] except1_5 && !bypass1_5
(push) ; 29
; [then-branch: 5321 | False | live]
; [else-branch: 5321 | True | live]
(push) ; 30
; [then-branch: 5321 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 5321 | True]
; [eval] !bypass1_5
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_6@1455@01 Bool)
(assert (= thisexcept1_6@1455@01 (not bypass1_5@1441@01)))
; [exec]
; thisexcept2_6 := except2_5 && !bypass2_5
; [eval] except2_5 && !bypass2_5
; [exec]
; p1_32 := p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
(push) ; 29
; [then-branch: 5322 | !(p1_29@1210@01) | live]
; [else-branch: 5322 | p1_29@1210@01 | live]
(push) ; 30
; [then-branch: 5322 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5322 | p1_29@1210@01]
(push) ; 31
; [then-branch: 5323 | !(thisexcept1_6@1455@01) | live]
; [else-branch: 5323 | thisexcept1_6@1455@01 | live]
(push) ; 32
; [then-branch: 5323 | !(thisexcept1_6@1455@01)]
(assert (not thisexcept1_6@1455@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5323 | thisexcept1_6@1455@01]
(assert thisexcept1_6@1455@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1455@01 (not thisexcept1_6@1455@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p1_29@1210@01 (or thisexcept1_6@1455@01 (not thisexcept1_6@1455@01))))
(declare-const p1_32@1456@01 Bool)
(assert (=
  p1_32@1456@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1455@01
      (issubtype<Bool> (typeof<PyType> tmp_8@1449@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_32 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
(push) ; 29
; [then-branch: 5324 | !(p2_29@1211@01) | live]
; [else-branch: 5324 | p2_29@1211@01 | live]
(push) ; 30
; [then-branch: 5324 | !(p2_29@1211@01)]
(pop) ; 30
(push) ; 30
; [else-branch: 5324 | p2_29@1211@01]
(assert p2_29@1211@01)
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_32@1456@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not p1_32@1456@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5325 | p1_32@1456@01 | live]
; [else-branch: 5325 | !(p1_32@1456@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5325 | p1_32@1456@01]
(assert p1_32@1456@01)
; [exec]
; except1_5 := false
; [then-branch: 5326 | False | dead]
; [else-branch: 5326 | True | live]
(push) ; 30
; [else-branch: 5326 | True]
(pop) ; 30
; [eval] !p2_32
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5327 | True | live]
; [else-branch: 5327 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 5327 | True]
; [exec]
; p1_33 := p1_32 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_32 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 31
; [then-branch: 5328 | !(p1_32@1456@01) | live]
; [else-branch: 5328 | p1_32@1456@01 | live]
(push) ; 32
; [then-branch: 5328 | !(p1_32@1456@01)]
(assert (not p1_32@1456@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5328 | p1_32@1456@01]
; [eval] !except1_5
(push) ; 33
; [then-branch: 5329 | False | live]
; [else-branch: 5329 | True | live]
(push) ; 34
; [then-branch: 5329 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 5329 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or p1_32@1456@01 (not p1_32@1456@01)))
; [exec]
; p2_33 := p2_32 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_32 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_15 := p1_32 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_32 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 31
; [then-branch: 5330 | !(p1_32@1456@01) | live]
; [else-branch: 5330 | p1_32@1456@01 | live]
(push) ; 32
; [then-branch: 5330 | !(p1_32@1456@01)]
(assert (not p1_32@1456@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5330 | p1_32@1456@01]
; [eval] !except1_5
(push) ; 33
; [then-branch: 5331 | False | live]
; [else-branch: 5331 | True | live]
(push) ; 34
; [then-branch: 5331 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 5331 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [exec]
; p4_15 := p2_32 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_32 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_33 && !except1_5
; [then-branch: 5332 | False | dead]
; [else-branch: 5332 | True | live]
(push) ; 31
; [else-branch: 5332 | True]
(pop) ; 31
; [eval] !(p1_33 && !except1_5)
; [eval] p1_33 && !except1_5
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5333 | True | live]
; [else-branch: 5333 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 5333 | True]
; [eval] p2_33 && !except2_5
; [then-branch: 5334 | False | dead]
; [else-branch: 5334 | True | live]
(push) ; 32
; [else-branch: 5334 | True]
(pop) ; 32
; [eval] !(p2_33 && !except2_5)
; [eval] p2_33 && !except2_5
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5335 | True | live]
; [else-branch: 5335 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 5335 | True]
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 5336 | !(p1_32@1456@01) | live]
; [else-branch: 5336 | p1_32@1456@01 | live]
(push) ; 34
; [then-branch: 5336 | !(p1_32@1456@01)]
(assert (not p1_32@1456@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5336 | p1_32@1456@01]
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_32@1456@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5337 | p1_32@1456@01 | live]
; [else-branch: 5337 | !(p1_32@1456@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 5337 | p1_32@1456@01]
; [exec]
; c_6.Container_value := __prim__int___box__(int___add__(int___unbox__(c_6.Container_value),
;   8))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_6.Container_value), 8))
; [eval] int___add__(int___unbox__(c_6.Container_value), 8)
; [eval] int___unbox__(c_6.Container_value)
(push) ; 34
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 35
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1440@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1440@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@1440@01))
(pop) ; 34
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1440@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@1440@01)))
(push) ; 34
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1440@01) 8))
(pop) ; 34
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1440@01) 8))
(push) ; 34
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1440@01) 8)))
(pop) ; 34
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1440@01) 8)))
(declare-const Container_value@1457@01 $Ref)
(assert (=
  Container_value@1457@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1440@01) 8))))
; [eval] p2_32 && !except2_5
; [then-branch: 5338 | False | dead]
; [else-branch: 5338 | True | live]
(push) ; 34
; [else-branch: 5338 | True]
(pop) ; 34
; [eval] !(p2_32 && !except2_5)
; [eval] p2_32 && !except2_5
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5339 | True | live]
; [else-branch: 5339 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 5339 | True]
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 5340 | !(p1_29@1210@01) | live]
; [else-branch: 5340 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 5340 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5340 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5341 | p1_29@1210@01 | live]
; [else-branch: 5341 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5341 | p1_29@1210@01]
; [exec]
; _err := null
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 5342 | !(p2_29@1211@01) | live]
; [else-branch: 5342 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 5342 | !(p2_29@1211@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 5342 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
; [then-branch: 5343 | p2_29@1211@01 | dead]
; [else-branch: 5343 | !(p2_29@1211@01) | live]
(push) ; 36
; [else-branch: 5343 | !(p2_29@1211@01)]
(pop) ; 36
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 5344 | !(p2_29@1211@01) | live]
; [else-branch: 5344 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 5344 | !(p2_29@1211@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 5344 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5345 | !(p2_29@1211@01) | live]
; [else-branch: 5345 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 5345 | !(p2_29@1211@01)]
; [exec]
; p1_34 := p1_29 &&
;   (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
(push) ; 37
; [then-branch: 5346 | !(p1_29@1210@01) | live]
; [else-branch: 5346 | p1_29@1210@01 | live]
(push) ; 38
; [then-branch: 5346 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 38
(push) ; 38
; [else-branch: 5346 | p1_29@1210@01]
(push) ; 39
; [then-branch: 5347 | !(thisexcept1_6@1455@01) | live]
; [else-branch: 5347 | thisexcept1_6@1455@01 | live]
(push) ; 40
; [then-branch: 5347 | !(thisexcept1_6@1455@01)]
(assert (not thisexcept1_6@1455@01))
(pop) ; 40
(push) ; 40
; [else-branch: 5347 | thisexcept1_6@1455@01]
(assert thisexcept1_6@1455@01)
; [eval] issubtype(typeof(_err), MyException2())
; [eval] typeof(_err)
; [eval] MyException2()
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1455@01 (not thisexcept1_6@1455@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(declare-const p1_34@1458@01 Bool)
(assert (=
  p1_34@1458@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1455@01
      (issubtype<Bool> (typeof<PyType> $Ref.null) (as MyException2<PyType>  PyType))))))
; [exec]
; p2_34 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
(push) ; 37
; [then-branch: 5348 | !(p2_29@1211@01) | live]
; [else-branch: 5348 | p2_29@1211@01 | live]
(push) ; 38
; [then-branch: 5348 | !(p2_29@1211@01)]
(pop) ; 38
(push) ; 38
; [else-branch: 5348 | p2_29@1211@01]
(assert p2_29@1211@01)
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_34@1458@01)))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5349 | p1_34@1458@01 | dead]
; [else-branch: 5349 | !(p1_34@1458@01) | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 5349 | !(p1_34@1458@01)]
(assert (not p1_34@1458@01))
(pop) ; 37
; [eval] !p1_34
(push) ; 37
(set-option :timeout 10)
(assert (not p1_34@1458@01))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_34@1458@01)))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5350 | !(p1_34@1458@01) | live]
; [else-branch: 5350 | p1_34@1458@01 | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5350 | !(p1_34@1458@01)]
(assert (not p1_34@1458@01))
; [then-branch: 5351 | False | dead]
; [else-branch: 5351 | True | live]
(push) ; 38
; [else-branch: 5351 | True]
(pop) ; 38
; [eval] !p2_34
(push) ; 38
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5352 | True | live]
; [else-branch: 5352 | False | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 5352 | True]
; [exec]
; p1_35 := p1_34 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_34 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 39
; [then-branch: 5353 | !(p1_34@1458@01) | live]
; [else-branch: 5353 | p1_34@1458@01 | live]
(push) ; 40
; [then-branch: 5353 | !(p1_34@1458@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 5353 | p1_34@1458@01]
(assert p1_34@1458@01)
; [eval] !except1_5
(push) ; 41
; [then-branch: 5354 | False | live]
; [else-branch: 5354 | True | live]
(push) ; 42
; [then-branch: 5354 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 5354 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or p1_34@1458@01 (not p1_34@1458@01)))
; [exec]
; p2_35 := p2_34 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_34 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_16 := p1_34 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_34 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 39
; [then-branch: 5355 | !(p1_34@1458@01) | live]
; [else-branch: 5355 | p1_34@1458@01 | live]
(push) ; 40
; [then-branch: 5355 | !(p1_34@1458@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 5355 | p1_34@1458@01]
(assert p1_34@1458@01)
; [eval] !except1_5
(push) ; 41
; [then-branch: 5356 | False | live]
; [else-branch: 5356 | True | live]
(push) ; 42
; [then-branch: 5356 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 5356 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [exec]
; p4_16 := p2_34 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_34 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_35 && !except1_5
; [then-branch: 5357 | False | dead]
; [else-branch: 5357 | True | live]
(push) ; 39
; [else-branch: 5357 | True]
(pop) ; 39
; [eval] !(p1_35 && !except1_5)
; [eval] p1_35 && !except1_5
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5358 | True | live]
; [else-branch: 5358 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5358 | True]
; [eval] p2_35 && !except2_5
; [then-branch: 5359 | False | dead]
; [else-branch: 5359 | True | live]
(push) ; 40
; [else-branch: 5359 | True]
(pop) ; 40
; [eval] !(p2_35 && !except2_5)
; [eval] p2_35 && !except2_5
(push) ; 40
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5360 | True | live]
; [else-branch: 5360 | False | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 5360 | True]
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 5361 | !(p1_34@1458@01) | live]
; [else-branch: 5361 | p1_34@1458@01 | live]
(push) ; 42
; [then-branch: 5361 | !(p1_34@1458@01)]
(pop) ; 42
(push) ; 42
; [else-branch: 5361 | p1_34@1458@01]
(assert p1_34@1458@01)
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
; [then-branch: 5362 | p1_34@1458@01 | dead]
; [else-branch: 5362 | !(p1_34@1458@01) | live]
(push) ; 41
; [else-branch: 5362 | !(p1_34@1458@01)]
(pop) ; 41
; [eval] !(p1_34 && !except1_5)
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 5363 | !(p1_34@1458@01) | live]
; [else-branch: 5363 | p1_34@1458@01 | live]
(push) ; 42
; [then-branch: 5363 | !(p1_34@1458@01)]
(pop) ; 42
(push) ; 42
; [else-branch: 5363 | p1_34@1458@01]
(assert p1_34@1458@01)
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not p1_34@1458@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5364 | !(p1_34@1458@01) | live]
; [else-branch: 5364 | p1_34@1458@01 | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5364 | !(p1_34@1458@01)]
; [eval] p2_34 && !except2_5
; [then-branch: 5365 | False | dead]
; [else-branch: 5365 | True | live]
(push) ; 42
; [else-branch: 5365 | True]
(pop) ; 42
; [eval] !(p2_34 && !except2_5)
; [eval] p2_34 && !except2_5
(push) ; 42
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5366 | True | live]
; [else-branch: 5366 | False | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 5366 | True]
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 5367 | !(p1_29@1210@01) | live]
; [else-branch: 5367 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 5367 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 5367 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5368 | p1_29@1210@01 | live]
; [else-branch: 5368 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 5368 | p1_29@1210@01]
; [exec]
; _err := null
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 5369 | !(p2_29@1211@01) | live]
; [else-branch: 5369 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 5369 | !(p2_29@1211@01)]
(pop) ; 45
(push) ; 45
; [else-branch: 5369 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
; [then-branch: 5370 | p2_29@1211@01 | dead]
; [else-branch: 5370 | !(p2_29@1211@01) | live]
(push) ; 44
; [else-branch: 5370 | !(p2_29@1211@01)]
(pop) ; 44
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 5371 | !(p2_29@1211@01) | live]
; [else-branch: 5371 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 5371 | !(p2_29@1211@01)]
(pop) ; 45
(push) ; 45
; [else-branch: 5371 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5372 | !(p2_29@1211@01) | live]
; [else-branch: 5372 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 5372 | !(p2_29@1211@01)]
; [exec]
; assert (p1_29 ==> !except1_5) && (p2_29 ==> !except2_5)
; [eval] p1_29 ==> !except1_5
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5373 | p1_29@1210@01 | live]
; [else-branch: 5373 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 5373 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> !except2_5
(push) ; 45
; [then-branch: 5374 | p2_29@1211@01 | dead]
; [else-branch: 5374 | !(p2_29@1211@01) | live]
(push) ; 46
; [else-branch: 5374 | !(p2_29@1211@01)]
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p1_29 ==> true
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5375 | p1_29@1210@01 | live]
; [else-branch: 5375 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 5375 | p1_29@1210@01]
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> true
(push) ; 45
; [then-branch: 5376 | p2_29@1211@01 | dead]
; [else-branch: 5376 | !(p2_29@1211@01) | live]
(push) ; 46
; [else-branch: 5376 | !(p2_29@1211@01)]
(pop) ; 46
(pop) ; 45
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5377 | p1_29@1210@01 | live]
; [else-branch: 5377 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 5377 | p1_29@1210@01]
; [then-branch: 5378 | p2_29@1211@01 | dead]
; [else-branch: 5378 | !(p2_29@1211@01) | live]
(push) ; 46
; [else-branch: 5378 | !(p2_29@1211@01)]
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5379 | p1_29@1210@01 | live]
; [else-branch: 5379 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5379 | p1_29@1210@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1457@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1457@01) (as int<PyType>  PyType))))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 47
; [then-branch: 5380 | p2_29@1211@01 | dead]
; [else-branch: 5380 | !(p2_29@1211@01) | live]
(push) ; 48
; [else-branch: 5380 | !(p2_29@1211@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_29 ==> int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5381 | p1_29@1210@01 | live]
; [else-branch: 5381 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5381 | p1_29@1210@01]
; [eval] int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5382 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 5382 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 5382 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] __prim__int___box__(20)
(push) ; 51
(assert (__prim__int___box__%precondition $Snap.unit 20))
(pop) ; 51
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 20))
(push) ; 51
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1457@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1457@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1457@01 (__prim__int___box__ $Snap.unit 20)))
(pop) ; 51
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1457@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1457@01 (__prim__int___box__ $Snap.unit 20))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (__prim__int___box__%precondition $Snap.unit 20)
    (issubtype<Bool> (typeof<PyType> Container_value@1457@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1457@01 (__prim__int___box__ $Snap.unit 20)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
        (__prim__int___box__%precondition $Snap.unit 20)
        (issubtype<Bool> (typeof<PyType> Container_value@1457@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1457@01 (__prim__int___box__ $Snap.unit 20))))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 47
(assert (not (=>
  (and
    p1_29@1210@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1457@01 (__prim__int___box__ $Snap.unit 20)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_29@1210@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1457@01 (__prim__int___box__ $Snap.unit 20))))
; [eval] p2_29 ==> int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
(push) ; 47
; [then-branch: 5383 | p2_29@1211@01 | dead]
; [else-branch: 5383 | !(p2_29@1211@01) | live]
(push) ; 48
; [else-branch: 5383 | !(p2_29@1211@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_29 ==> !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5384 | p1_29@1210@01 | live]
; [else-branch: 5384 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5384 | p1_29@1210@01]
; [eval] !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] !int___eq__(i_0, __prim__int___box__(0))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5385 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | dead]
; [else-branch: 5385 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 5385 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
; [eval] p2_29 ==> !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
(push) ; 47
; [then-branch: 5386 | p2_29@1211@01 | dead]
; [else-branch: 5386 | !(p2_29@1211@01) | live]
(push) ; 48
; [else-branch: 5386 | !(p2_29@1211@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_29 ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5387 | p1_29@1210@01 | live]
; [else-branch: 5387 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5387 | p1_29@1210@01]
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
(push) ; 49
; [then-branch: 5388 | False | live]
; [else-branch: 5388 | True | live]
(push) ; 50
; [then-branch: 5388 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 5388 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
(push) ; 51
; [then-branch: 5389 | False | live]
; [else-branch: 5389 | True | live]
(push) ; 52
; [then-branch: 5389 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 5389 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
(push) ; 53
; [then-branch: 5390 | False | live]
; [else-branch: 5390 | True | live]
(push) ; 54
; [then-branch: 5390 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 5390 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_29 ==> (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
(push) ; 47
; [then-branch: 5391 | p2_29@1211@01 | dead]
; [else-branch: 5391 | !(p2_29@1211@01) | live]
(push) ; 48
; [else-branch: 5391 | !(p2_29@1211@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 5392 | !(p1_29@1210@01) | live]
; [else-branch: 5392 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 5392 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 5392 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
; [then-branch: 5393 | !(p1_29@1210@01) | dead]
; [else-branch: 5393 | p1_29@1210@01 | live]
(push) ; 43
; [else-branch: 5393 | p1_29@1210@01]
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 5394 | !(p1_29@1210@01) | live]
; [else-branch: 5394 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 5394 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5394 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 5395 | !(p1_29@1210@01) | dead]
; [else-branch: 5395 | p1_29@1210@01 | live]
(push) ; 35
; [else-branch: 5395 | p1_29@1210@01]
(pop) ; 35
(pop) ; 34
(pop) ; 33
; [eval] !(p1_32 && !except1_5)
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 5396 | !(p1_32@1456@01) | live]
; [else-branch: 5396 | p1_32@1456@01 | live]
(push) ; 34
; [then-branch: 5396 | !(p1_32@1456@01)]
(assert (not p1_32@1456@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5396 | p1_32@1456@01]
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 5397 | !(p1_32@1456@01) | dead]
; [else-branch: 5397 | p1_32@1456@01 | live]
(push) ; 33
; [else-branch: 5397 | p1_32@1456@01]
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !p1_32
(push) ; 29
(set-option :timeout 10)
(assert (not p1_32@1456@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5398 | !(p1_32@1456@01) | dead]
; [else-branch: 5398 | p1_32@1456@01 | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 5398 | p1_32@1456@01]
(assert p1_32@1456@01)
(pop) ; 29
(pop) ; 28
(pop) ; 27
; [eval] !p1_29
; [then-branch: 5399 | !(p1_29@1210@01) | dead]
; [else-branch: 5399 | p1_29@1210@01 | live]
(push) ; 27
; [else-branch: 5399 | p1_29@1210@01]
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 5400 | !(p1_29@1210@01) | live]
; [else-branch: 5400 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 5400 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5400 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 5401 | !(p1_29@1210@01) | dead]
; [else-branch: 5401 | p1_29@1210@01 | live]
(push) ; 25
; [else-branch: 5401 | p1_29@1210@01]
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !p1_29
; [then-branch: 5402 | !(p1_29@1210@01) | dead]
; [else-branch: 5402 | p1_29@1210@01 | live]
(push) ; 23
; [else-branch: 5402 | p1_29@1210@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 15
; [then-branch: 5403 | !(p1_31@1445@01) | live]
; [else-branch: 5403 | p1_31@1445@01 | live]
(push) ; 16
; [then-branch: 5403 | !(p1_31@1445@01)]
(assert (not p1_31@1445@01))
(pop) ; 16
(push) ; 16
; [else-branch: 5403 | p1_31@1445@01]
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 5404 | !(p1_31@1445@01) | dead]
; [else-branch: 5404 | p1_31@1445@01 | live]
(push) ; 15
; [else-branch: 5404 | p1_31@1445@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 5405 | !(p1_31@1445@01) | live]
; [else-branch: 5405 | p1_31@1445@01 | live]
(push) ; 14
; [then-branch: 5405 | !(p1_31@1445@01)]
(assert (not p1_31@1445@01))
(pop) ; 14
(push) ; 14
; [else-branch: 5405 | p1_31@1445@01]
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 5406 | !(p1_31@1445@01) | dead]
; [else-branch: 5406 | p1_31@1445@01 | live]
(push) ; 13
; [else-branch: 5406 | p1_31@1445@01]
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 5266 | !(p1_31@1445@01)]
(assert (not p1_31@1445@01))
(pop) ; 11
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 11
; [then-branch: 5407 | !(p1_31@1445@01) | live]
; [else-branch: 5407 | p1_31@1445@01 | live]
(push) ; 12
; [then-branch: 5407 | !(p1_31@1445@01)]
(assert (not p1_31@1445@01))
(pop) ; 12
(push) ; 12
; [else-branch: 5407 | p1_31@1445@01]
(assert p1_31@1445@01)
; [eval] !except1_5
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p1_31@1445@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_31@1445@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5408 | !(p1_31@1445@01) | live]
; [else-branch: 5408 | p1_31@1445@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5408 | !(p1_31@1445@01)]
(assert (not p1_31@1445@01))
; [eval] p2_31 && !except2_5
(push) ; 12
; [then-branch: 5409 | !(p2_31@1446@01) | live]
; [else-branch: 5409 | p2_31@1446@01 | live]
(push) ; 13
; [then-branch: 5409 | !(p2_31@1446@01)]
(assert (not p2_31@1446@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5409 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or p2_31@1446@01 (not p2_31@1446@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_31@1446@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5410 | p2_31@1446@01 | dead]
; [else-branch: 5410 | !(p2_31@1446@01) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 5410 | !(p2_31@1446@01)]
(assert (not p2_31@1446@01))
(pop) ; 12
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 12
; [then-branch: 5411 | !(p2_31@1446@01) | live]
; [else-branch: 5411 | p2_31@1446@01 | live]
(push) ; 13
; [then-branch: 5411 | !(p2_31@1446@01)]
(assert (not p2_31@1446@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5411 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not p2_31@1446@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_31@1446@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5412 | !(p2_31@1446@01) | live]
; [else-branch: 5412 | p2_31@1446@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 5412 | !(p2_31@1446@01)]
(assert (not p2_31@1446@01))
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 5413 | !(p1_31@1445@01) | live]
; [else-branch: 5413 | p1_31@1445@01 | live]
(push) ; 14
; [then-branch: 5413 | !(p1_31@1445@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 5413 | p1_31@1445@01]
(assert p1_31@1445@01)
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 5414 | p1_31@1445@01 | dead]
; [else-branch: 5414 | !(p1_31@1445@01) | live]
(push) ; 13
; [else-branch: 5414 | !(p1_31@1445@01)]
(pop) ; 13
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 13
; [then-branch: 5415 | !(p1_31@1445@01) | live]
; [else-branch: 5415 | p1_31@1445@01 | live]
(push) ; 14
; [then-branch: 5415 | !(p1_31@1445@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 5415 | p1_31@1445@01]
(assert p1_31@1445@01)
; [eval] !except1_5
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not p1_31@1445@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5416 | !(p1_31@1445@01) | live]
; [else-branch: 5416 | p1_31@1445@01 | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5416 | !(p1_31@1445@01)]
; [eval] p2_31 && !except2_5
(push) ; 14
; [then-branch: 5417 | !(p2_31@1446@01) | live]
; [else-branch: 5417 | p2_31@1446@01 | live]
(push) ; 15
; [then-branch: 5417 | !(p2_31@1446@01)]
(pop) ; 15
(push) ; 15
; [else-branch: 5417 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 5418 | p2_31@1446@01 | dead]
; [else-branch: 5418 | !(p2_31@1446@01) | live]
(push) ; 14
; [else-branch: 5418 | !(p2_31@1446@01)]
(pop) ; 14
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 14
; [then-branch: 5419 | !(p2_31@1446@01) | live]
; [else-branch: 5419 | p2_31@1446@01 | live]
(push) ; 15
; [then-branch: 5419 | !(p2_31@1446@01)]
(pop) ; 15
(push) ; 15
; [else-branch: 5419 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not p2_31@1446@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5420 | !(p2_31@1446@01) | live]
; [else-branch: 5420 | p2_31@1446@01 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5420 | !(p2_31@1446@01)]
; [eval] p1_31 && !except1_5
(push) ; 15
; [then-branch: 5421 | !(p1_31@1445@01) | live]
; [else-branch: 5421 | p1_31@1445@01 | live]
(push) ; 16
; [then-branch: 5421 | !(p1_31@1445@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 5421 | p1_31@1445@01]
(assert p1_31@1445@01)
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 5422 | p1_31@1445@01 | dead]
; [else-branch: 5422 | !(p1_31@1445@01) | live]
(push) ; 15
; [else-branch: 5422 | !(p1_31@1445@01)]
(pop) ; 15
; [eval] !(p1_31 && !except1_5)
; [eval] p1_31 && !except1_5
(push) ; 15
; [then-branch: 5423 | !(p1_31@1445@01) | live]
; [else-branch: 5423 | p1_31@1445@01 | live]
(push) ; 16
; [then-branch: 5423 | !(p1_31@1445@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 5423 | p1_31@1445@01]
(assert p1_31@1445@01)
; [eval] !except1_5
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not p1_31@1445@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5424 | !(p1_31@1445@01) | live]
; [else-branch: 5424 | p1_31@1445@01 | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5424 | !(p1_31@1445@01)]
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 5425 | !(p2_31@1446@01) | live]
; [else-branch: 5425 | p2_31@1446@01 | live]
(push) ; 17
; [then-branch: 5425 | !(p2_31@1446@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 5425 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 5426 | p2_31@1446@01 | dead]
; [else-branch: 5426 | !(p2_31@1446@01) | live]
(push) ; 16
; [else-branch: 5426 | !(p2_31@1446@01)]
(pop) ; 16
; [eval] !(p2_31 && !except2_5)
; [eval] p2_31 && !except2_5
(push) ; 16
; [then-branch: 5427 | !(p2_31@1446@01) | live]
; [else-branch: 5427 | p2_31@1446@01 | live]
(push) ; 17
; [then-branch: 5427 | !(p2_31@1446@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 5427 | p2_31@1446@01]
(assert p2_31@1446@01)
; [eval] !except2_5
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2_31@1446@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5428 | !(p2_31@1446@01) | live]
; [else-branch: 5428 | p2_31@1446@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5428 | !(p2_31@1446@01)]
; [exec]
; tmp_9 := new()
(declare-const tmp_9@1459@01 $Ref)
(assert (not (= tmp_9@1459@01 $Ref.null)))
(assert (not (= tmp_9@1459@01 MyException_res_7_0@1392@01)))
(assert (not (= tmp_9@1459@01 _err_6@1376@01)))
(assert (not (= tmp_9@1459@01 cl@1377@01)))
(assert (not (= tmp_9@1459@01 MyException2_res_0_0@1394@01)))
(assert (not (= tmp_9@1459@01 c_2@1220@01)))
(assert (not (= tmp_9@1459@01 MyException2_res_0@1393@01)))
(assert (not (= tmp_9@1459@01 error_5@1379@01)))
(assert (not (= tmp_9@1459@01 Container_value@1440@01)))
(assert (not (= tmp_9@1459@01 error_6_0@1384@01)))
(assert (not (= tmp_9@1459@01 MyException_res_7@1391@01)))
(assert (not (= tmp_9@1459@01 error_5_0@1380@01)))
(assert (not (= tmp_9@1459@01 i_6_0@1388@01)))
(assert (not (= tmp_9@1459@01 i_0_0@1219@01)))
(assert (not (= tmp_9@1459@01 tmp_8@1449@01)))
(assert (not (= tmp_9@1459@01 _cthread_163_0@1213@01)))
(assert (not (= tmp_9@1459@01 _cthread_163@1212@01)))
(assert (not (= tmp_9@1459@01 error_6@1383@01)))
(assert (not (= tmp_9@1459@01 i_0@1218@01)))
(assert (not (= tmp_9@1459@01 cl_0@1378@01)))
(assert (not (= tmp_9@1459@01 tmp_9@1430@01)))
(assert (not (= tmp_9@1459@01 c_2_0@1221@01)))
(assert (not (= tmp_9@1459@01 c_6_0@1390@01)))
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 5429 | !(p3_14@1447@01) | live]
; [else-branch: 5429 | p3_14@1447@01 | live]
(push) ; 18
; [then-branch: 5429 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 18
(push) ; 18
; [else-branch: 5429 | p3_14@1447@01]
(assert p3_14@1447@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p3_14@1447@01 (not p3_14@1447@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p3_14@1447@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not p3_14@1447@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5430 | p3_14@1447@01 | live]
; [else-branch: 5430 | !(p3_14@1447@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 5430 | p3_14@1447@01]
(assert p3_14@1447@01)
; [exec]
; MyException2_res_0 := tmp_9
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 5431 | !(p4_14@1448@01) | live]
; [else-branch: 5431 | p4_14@1448@01 | live]
(push) ; 19
; [then-branch: 5431 | !(p4_14@1448@01)]
(assert (not p4_14@1448@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5431 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p4_14@1448@01 (not p4_14@1448@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p4_14@1448@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5432 | p4_14@1448@01 | dead]
; [else-branch: 5432 | !(p4_14@1448@01) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 5432 | !(p4_14@1448@01)]
(assert (not p4_14@1448@01))
(pop) ; 18
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 18
; [then-branch: 5433 | !(p4_14@1448@01) | live]
; [else-branch: 5433 | p4_14@1448@01 | live]
(push) ; 19
; [then-branch: 5433 | !(p4_14@1448@01)]
(assert (not p4_14@1448@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5433 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p4_14@1448@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not p4_14@1448@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5434 | !(p4_14@1448@01) | live]
; [else-branch: 5434 | p4_14@1448@01 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 5434 | !(p4_14@1448@01)]
(assert (not p4_14@1448@01))
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 5435 | !(p3_14@1447@01) | live]
; [else-branch: 5435 | p3_14@1447@01 | live]
(push) ; 20
; [then-branch: 5435 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5435 | p3_14@1447@01]
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p3_14@1447@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5436 | p3_14@1447@01 | live]
; [else-branch: 5436 | !(p3_14@1447@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 5436 | p3_14@1447@01]
; [exec]
; inhale typeof(MyException2_res_0) == MyException2()
(declare-const $t@1460@01 $Snap)
(assert (= $t@1460@01 $Snap.unit))
; [eval] typeof(MyException2_res_0) == MyException2()
; [eval] typeof(MyException2_res_0)
; [eval] MyException2()
(assert (= (typeof<PyType> tmp_9@1459@01) (as MyException2<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p4_14 && !except2_5
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5437 | !(p4_14@1448@01) | live]
; [else-branch: 5437 | p4_14@1448@01 | live]
(push) ; 21
; [then-branch: 5437 | !(p4_14@1448@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 5437 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 5438 | p4_14@1448@01 | dead]
; [else-branch: 5438 | !(p4_14@1448@01) | live]
(push) ; 20
; [else-branch: 5438 | !(p4_14@1448@01)]
(pop) ; 20
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 20
; [then-branch: 5439 | !(p4_14@1448@01) | live]
; [else-branch: 5439 | p4_14@1448@01 | live]
(push) ; 21
; [then-branch: 5439 | !(p4_14@1448@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 5439 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p4_14@1448@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5440 | !(p4_14@1448@01) | live]
; [else-branch: 5440 | p4_14@1448@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5440 | !(p4_14@1448@01)]
; [eval] p3_14 && !except1_5
(push) ; 21
; [then-branch: 5441 | !(p3_14@1447@01) | live]
; [else-branch: 5441 | p3_14@1447@01 | live]
(push) ; 22
; [then-branch: 5441 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5441 | p3_14@1447@01]
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p3_14@1447@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5442 | p3_14@1447@01 | live]
; [else-branch: 5442 | !(p3_14@1447@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5442 | p3_14@1447@01]
; [exec]
; _err := MyException2_res_0
; [exec]
; except1_5 := true
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 5443 | !(p4_14@1448@01) | live]
; [else-branch: 5443 | p4_14@1448@01 | live]
(push) ; 23
; [then-branch: 5443 | !(p4_14@1448@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 5443 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 5444 | p4_14@1448@01 | dead]
; [else-branch: 5444 | !(p4_14@1448@01) | live]
(push) ; 22
; [else-branch: 5444 | !(p4_14@1448@01)]
(pop) ; 22
; [eval] !(p4_14 && !except2_5)
; [eval] p4_14 && !except2_5
(push) ; 22
; [then-branch: 5445 | !(p4_14@1448@01) | live]
; [else-branch: 5445 | p4_14@1448@01 | live]
(push) ; 23
; [then-branch: 5445 | !(p4_14@1448@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 5445 | p4_14@1448@01]
(assert p4_14@1448@01)
; [eval] !except2_5
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p4_14@1448@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5446 | !(p4_14@1448@01) | live]
; [else-branch: 5446 | p4_14@1448@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 5446 | !(p4_14@1448@01)]
; [exec]
; thisexcept1_5 := except1_5 && !bypass1_6
; [eval] except1_5 && !bypass1_6
(push) ; 23
; [then-branch: 5447 | False | live]
; [else-branch: 5447 | True | live]
(push) ; 24
; [then-branch: 5447 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 5447 | True]
; [eval] !bypass1_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_5@1461@01 Bool)
(assert (= thisexcept1_5@1461@01 (not bypass1_6@1443@01)))
; [exec]
; thisexcept2_5 := except2_5 && !bypass2_6
; [eval] except2_5 && !bypass2_6
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5448 | p1_29@1210@01 | live]
; [else-branch: 5448 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5448 | p1_29@1210@01]
; [exec]
; tmp_except1_2 := except1_5
; [exec]
; except1_5 := oldexcept1_2
; [then-branch: 5449 | p2_29@1211@01 | dead]
; [else-branch: 5449 | !(p2_29@1211@01) | live]
(push) ; 24
; [else-branch: 5449 | !(p2_29@1211@01)]
(pop) ; 24
; [eval] !p2_29
(push) ; 24
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5450 | !(p2_29@1211@01) | live]
; [else-branch: 5450 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 5450 | !(p2_29@1211@01)]
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 5451 | !(p1_29@1210@01) | live]
; [else-branch: 5451 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 5451 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5451 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5452 | p1_29@1210@01 | live]
; [else-branch: 5452 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5452 | p1_29@1210@01]
; [exec]
; cl := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 26
(pop) ; 26
; Joined path conditions
(declare-const cl@1462@01 $Ref)
(assert (= cl@1462@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; inhale _isDefined(27747)
(declare-const $t@1463@01 $Snap)
(assert (= $t@1463@01 $Snap.unit))
; [eval] _isDefined(27747)
(push) ; 26
(assert (_isDefined%precondition $Snap.unit 27747))
(pop) ; 26
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 27747))
(assert (_isDefined $Snap.unit 27747))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_29 && !except2_5
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5453 | !(p2_29@1211@01) | live]
; [else-branch: 5453 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 5453 | !(p2_29@1211@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 5453 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 5454 | p2_29@1211@01 | dead]
; [else-branch: 5454 | !(p2_29@1211@01) | live]
(push) ; 26
; [else-branch: 5454 | !(p2_29@1211@01)]
(pop) ; 26
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 26
; [then-branch: 5455 | !(p2_29@1211@01) | live]
; [else-branch: 5455 | p2_29@1211@01 | live]
(push) ; 27
; [then-branch: 5455 | !(p2_29@1211@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 5455 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5456 | !(p2_29@1211@01) | live]
; [else-branch: 5456 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5456 | !(p2_29@1211@01)]
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5457 | p1_29@1210@01 | live]
; [else-branch: 5457 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5457 | p1_29@1210@01]
; [exec]
; except1_5 := except1_5 || tmp_except1_2
; [eval] except1_5 || tmp_except1_2
(push) ; 28
; [then-branch: 5458 | False | live]
; [else-branch: 5458 | True | live]
(push) ; 29
; [then-branch: 5458 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 5458 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 5459 | p2_29@1211@01 | dead]
; [else-branch: 5459 | !(p2_29@1211@01) | live]
(push) ; 28
; [else-branch: 5459 | !(p2_29@1211@01)]
(pop) ; 28
; [eval] !p2_29
(push) ; 28
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5460 | !(p2_29@1211@01) | live]
; [else-branch: 5460 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 5460 | !(p2_29@1211@01)]
; [exec]
; thisexcept1_6 := except1_5 && !bypass1_5
; [eval] except1_5 && !bypass1_5
(push) ; 29
; [then-branch: 5461 | False | live]
; [else-branch: 5461 | True | live]
(push) ; 30
; [then-branch: 5461 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 5461 | True]
; [eval] !bypass1_5
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(declare-const thisexcept1_6@1464@01 Bool)
(assert (= thisexcept1_6@1464@01 (not bypass1_5@1441@01)))
; [exec]
; thisexcept2_6 := except2_5 && !bypass2_5
; [eval] except2_5 && !bypass2_5
; [exec]
; p1_32 := p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException()))
(push) ; 29
; [then-branch: 5462 | !(p1_29@1210@01) | live]
; [else-branch: 5462 | p1_29@1210@01 | live]
(push) ; 30
; [then-branch: 5462 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5462 | p1_29@1210@01]
(push) ; 31
; [then-branch: 5463 | !(thisexcept1_6@1464@01) | live]
; [else-branch: 5463 | thisexcept1_6@1464@01 | live]
(push) ; 32
; [then-branch: 5463 | !(thisexcept1_6@1464@01)]
(assert (not thisexcept1_6@1464@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5463 | thisexcept1_6@1464@01]
(assert thisexcept1_6@1464@01)
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1464@01 (not thisexcept1_6@1464@01)))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p1_29@1210@01 (or thisexcept1_6@1464@01 (not thisexcept1_6@1464@01))))
(declare-const p1_32@1465@01 Bool)
(assert (=
  p1_32@1465@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1464@01
      (issubtype<Bool> (typeof<PyType> tmp_9@1459@01) (as MyException<PyType>  PyType))))))
; [exec]
; p2_32 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException()))
(push) ; 29
; [then-branch: 5464 | !(p2_29@1211@01) | live]
; [else-branch: 5464 | p2_29@1211@01 | live]
(push) ; 30
; [then-branch: 5464 | !(p2_29@1211@01)]
(pop) ; 30
(push) ; 30
; [else-branch: 5464 | p2_29@1211@01]
(assert p2_29@1211@01)
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_32@1465@01)))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5465 | p1_32@1465@01 | dead]
; [else-branch: 5465 | !(p1_32@1465@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 5465 | !(p1_32@1465@01)]
(assert (not p1_32@1465@01))
(pop) ; 29
; [eval] !p1_32
(push) ; 29
(set-option :timeout 10)
(assert (not p1_32@1465@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_32@1465@01)))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5466 | !(p1_32@1465@01) | live]
; [else-branch: 5466 | p1_32@1465@01 | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5466 | !(p1_32@1465@01)]
(assert (not p1_32@1465@01))
; [then-branch: 5467 | False | dead]
; [else-branch: 5467 | True | live]
(push) ; 30
; [else-branch: 5467 | True]
(pop) ; 30
; [eval] !p2_32
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5468 | True | live]
; [else-branch: 5468 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 5468 | True]
; [exec]
; p1_33 := p1_32 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_32 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 31
; [then-branch: 5469 | !(p1_32@1465@01) | live]
; [else-branch: 5469 | p1_32@1465@01 | live]
(push) ; 32
; [then-branch: 5469 | !(p1_32@1465@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 5469 | p1_32@1465@01]
(assert p1_32@1465@01)
; [eval] !except1_5
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or p1_32@1465@01 (not p1_32@1465@01)))
; [exec]
; p2_33 := p2_32 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_32 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_15 := p1_32 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_32 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 31
; [then-branch: 5470 | !(p1_32@1465@01) | live]
; [else-branch: 5470 | p1_32@1465@01 | live]
(push) ; 32
; [then-branch: 5470 | !(p1_32@1465@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 5470 | p1_32@1465@01]
(assert p1_32@1465@01)
; [eval] !except1_5
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [exec]
; p4_15 := p2_32 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_32 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_33 && !except1_5
; [then-branch: 5471 | False | dead]
; [else-branch: 5471 | True | live]
(push) ; 31
; [else-branch: 5471 | True]
(pop) ; 31
; [eval] !(p1_33 && !except1_5)
; [eval] p1_33 && !except1_5
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5472 | True | live]
; [else-branch: 5472 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 5472 | True]
; [eval] p2_33 && !except2_5
; [then-branch: 5473 | False | dead]
; [else-branch: 5473 | True | live]
(push) ; 32
; [else-branch: 5473 | True]
(pop) ; 32
; [eval] !(p2_33 && !except2_5)
; [eval] p2_33 && !except2_5
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5474 | True | live]
; [else-branch: 5474 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 5474 | True]
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 5475 | !(p1_32@1465@01) | live]
; [else-branch: 5475 | p1_32@1465@01 | live]
(push) ; 34
; [then-branch: 5475 | !(p1_32@1465@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 5475 | p1_32@1465@01]
(assert p1_32@1465@01)
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 5476 | False | dead]
; [else-branch: 5476 | True | live]
(push) ; 33
; [else-branch: 5476 | True]
(pop) ; 33
; [eval] !(p1_32 && !except1_5)
; [eval] p1_32 && !except1_5
(push) ; 33
; [then-branch: 5477 | !(p1_32@1465@01) | live]
; [else-branch: 5477 | p1_32@1465@01 | live]
(push) ; 34
; [then-branch: 5477 | !(p1_32@1465@01)]
(pop) ; 34
(push) ; 34
; [else-branch: 5477 | p1_32@1465@01]
(assert p1_32@1465@01)
; [eval] !except1_5
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5478 | True | live]
; [else-branch: 5478 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 5478 | True]
; [eval] p2_32 && !except2_5
; [then-branch: 5479 | False | dead]
; [else-branch: 5479 | True | live]
(push) ; 34
; [else-branch: 5479 | True]
(pop) ; 34
; [eval] !(p2_32 && !except2_5)
; [eval] p2_32 && !except2_5
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5480 | True | live]
; [else-branch: 5480 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 5480 | True]
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 5481 | !(p1_29@1210@01) | live]
; [else-branch: 5481 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 5481 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5481 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 5482 | False | dead]
; [else-branch: 5482 | True | live]
(push) ; 35
; [else-branch: 5482 | True]
(pop) ; 35
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 35
; [then-branch: 5483 | !(p1_29@1210@01) | live]
; [else-branch: 5483 | p1_29@1210@01 | live]
(push) ; 36
; [then-branch: 5483 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5483 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5484 | True | live]
; [else-branch: 5484 | False | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5484 | True]
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 5485 | !(p2_29@1211@01) | live]
; [else-branch: 5485 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 5485 | !(p2_29@1211@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 5485 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
; [then-branch: 5486 | p2_29@1211@01 | dead]
; [else-branch: 5486 | !(p2_29@1211@01) | live]
(push) ; 36
; [else-branch: 5486 | !(p2_29@1211@01)]
(pop) ; 36
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 36
; [then-branch: 5487 | !(p2_29@1211@01) | live]
; [else-branch: 5487 | p2_29@1211@01 | live]
(push) ; 37
; [then-branch: 5487 | !(p2_29@1211@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 5487 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5488 | !(p2_29@1211@01) | live]
; [else-branch: 5488 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 5488 | !(p2_29@1211@01)]
; [exec]
; p1_34 := p1_29 &&
;   (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
; [eval] p1_29 && (thisexcept1_6 && issubtype(typeof(_err), MyException2()))
(push) ; 37
; [then-branch: 5489 | !(p1_29@1210@01) | live]
; [else-branch: 5489 | p1_29@1210@01 | live]
(push) ; 38
; [then-branch: 5489 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 38
(push) ; 38
; [else-branch: 5489 | p1_29@1210@01]
(push) ; 39
; [then-branch: 5490 | !(thisexcept1_6@1464@01) | live]
; [else-branch: 5490 | thisexcept1_6@1464@01 | live]
(push) ; 40
; [then-branch: 5490 | !(thisexcept1_6@1464@01)]
(assert (not thisexcept1_6@1464@01))
(pop) ; 40
(push) ; 40
; [else-branch: 5490 | thisexcept1_6@1464@01]
(assert thisexcept1_6@1464@01)
; [eval] issubtype(typeof(_err), MyException2())
; [eval] typeof(_err)
; [eval] MyException2()
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or thisexcept1_6@1464@01 (not thisexcept1_6@1464@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(declare-const p1_34@1466@01 Bool)
(assert (=
  p1_34@1466@01
  (and
    p1_29@1210@01
    (and
      thisexcept1_6@1464@01
      (issubtype<Bool> (typeof<PyType> tmp_9@1459@01) (as MyException2<PyType>  PyType))))))
; [exec]
; p2_34 := p2_29 &&
;   (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
; [eval] p2_29 && (thisexcept2_6 && issubtype(typeof(_err_6), MyException2()))
(push) ; 37
; [then-branch: 5491 | !(p2_29@1211@01) | live]
; [else-branch: 5491 | p2_29@1211@01 | live]
(push) ; 38
; [then-branch: 5491 | !(p2_29@1211@01)]
(pop) ; 38
(push) ; 38
; [else-branch: 5491 | p2_29@1211@01]
(assert p2_29@1211@01)
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_34@1466@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not p1_34@1466@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5492 | p1_34@1466@01 | live]
; [else-branch: 5492 | !(p1_34@1466@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5492 | p1_34@1466@01]
(assert p1_34@1466@01)
; [exec]
; except1_5 := false
; [then-branch: 5493 | False | dead]
; [else-branch: 5493 | True | live]
(push) ; 38
; [else-branch: 5493 | True]
(pop) ; 38
; [eval] !p2_34
(push) ; 38
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5494 | True | live]
; [else-branch: 5494 | False | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 5494 | True]
; [exec]
; p1_35 := p1_34 &&
;   (!except1_5 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_34 && (!except1_5 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 39
; [then-branch: 5495 | !(p1_34@1466@01) | live]
; [else-branch: 5495 | p1_34@1466@01 | live]
(push) ; 40
; [then-branch: 5495 | !(p1_34@1466@01)]
(assert (not p1_34@1466@01))
(pop) ; 40
(push) ; 40
; [else-branch: 5495 | p1_34@1466@01]
; [eval] !except1_5
(push) ; 41
; [then-branch: 5496 | False | live]
; [else-branch: 5496 | True | live]
(push) ; 42
; [then-branch: 5496 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 5496 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or p1_34@1466@01 (not p1_34@1466@01)))
; [exec]
; p2_35 := p2_34 &&
;   (!except2_5 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_34 && (!except2_5 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [exec]
; p3_16 := p1_34 &&
;   (!except1_5 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_34 && (!except1_5 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 39
; [then-branch: 5497 | !(p1_34@1466@01) | live]
; [else-branch: 5497 | p1_34@1466@01 | live]
(push) ; 40
; [then-branch: 5497 | !(p1_34@1466@01)]
(assert (not p1_34@1466@01))
(pop) ; 40
(push) ; 40
; [else-branch: 5497 | p1_34@1466@01]
; [eval] !except1_5
(push) ; 41
; [then-branch: 5498 | False | live]
; [else-branch: 5498 | True | live]
(push) ; 42
; [then-branch: 5498 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 5498 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [exec]
; p4_16 := p2_34 &&
;   (!except2_5 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_34 && (!except2_5 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p1_35 && !except1_5
; [then-branch: 5499 | False | dead]
; [else-branch: 5499 | True | live]
(push) ; 39
; [else-branch: 5499 | True]
(pop) ; 39
; [eval] !(p1_35 && !except1_5)
; [eval] p1_35 && !except1_5
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5500 | True | live]
; [else-branch: 5500 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5500 | True]
; [eval] p2_35 && !except2_5
; [then-branch: 5501 | False | dead]
; [else-branch: 5501 | True | live]
(push) ; 40
; [else-branch: 5501 | True]
(pop) ; 40
; [eval] !(p2_35 && !except2_5)
; [eval] p2_35 && !except2_5
(push) ; 40
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5502 | True | live]
; [else-branch: 5502 | False | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 5502 | True]
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 5503 | !(p1_34@1466@01) | live]
; [else-branch: 5503 | p1_34@1466@01 | live]
(push) ; 42
; [then-branch: 5503 | !(p1_34@1466@01)]
(assert (not p1_34@1466@01))
(pop) ; 42
(push) ; 42
; [else-branch: 5503 | p1_34@1466@01]
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1_34@1466@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5504 | p1_34@1466@01 | live]
; [else-branch: 5504 | !(p1_34@1466@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5504 | p1_34@1466@01]
; [exec]
; c_6.Container_value := __prim__int___box__(int___add__(int___unbox__(c_6.Container_value),
;   18))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_6.Container_value), 18))
; [eval] int___add__(int___unbox__(c_6.Container_value), 18)
; [eval] int___unbox__(c_6.Container_value)
(push) ; 42
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 43
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1440@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1440@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@1440@01))
(pop) ; 42
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1440@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@1440@01)))
(push) ; 42
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1440@01) 18))
(pop) ; 42
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@1440@01) 18))
(push) ; 42
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1440@01) 18)))
(pop) ; 42
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1440@01) 18)))
(declare-const Container_value@1467@01 $Ref)
(assert (=
  Container_value@1467@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@1440@01) 18))))
; [eval] p2_34 && !except2_5
; [then-branch: 5505 | False | dead]
; [else-branch: 5505 | True | live]
(push) ; 42
; [else-branch: 5505 | True]
(pop) ; 42
; [eval] !(p2_34 && !except2_5)
; [eval] p2_34 && !except2_5
(push) ; 42
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5506 | True | live]
; [else-branch: 5506 | False | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 5506 | True]
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 5507 | !(p1_29@1210@01) | live]
; [else-branch: 5507 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 5507 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 5507 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5508 | p1_29@1210@01 | live]
; [else-branch: 5508 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 5508 | p1_29@1210@01]
; [exec]
; _err := null
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 5509 | !(p2_29@1211@01) | live]
; [else-branch: 5509 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 5509 | !(p2_29@1211@01)]
(pop) ; 45
(push) ; 45
; [else-branch: 5509 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
; [then-branch: 5510 | p2_29@1211@01 | dead]
; [else-branch: 5510 | !(p2_29@1211@01) | live]
(push) ; 44
; [else-branch: 5510 | !(p2_29@1211@01)]
(pop) ; 44
; [eval] !(p2_29 && !except2_5)
; [eval] p2_29 && !except2_5
(push) ; 44
; [then-branch: 5511 | !(p2_29@1211@01) | live]
; [else-branch: 5511 | p2_29@1211@01 | live]
(push) ; 45
; [then-branch: 5511 | !(p2_29@1211@01)]
(pop) ; 45
(push) ; 45
; [else-branch: 5511 | p2_29@1211@01]
(assert p2_29@1211@01)
; [eval] !except2_5
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5512 | !(p2_29@1211@01) | live]
; [else-branch: 5512 | p2_29@1211@01 | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 5512 | !(p2_29@1211@01)]
; [exec]
; assert (p1_29 ==> !except1_5) && (p2_29 ==> !except2_5)
; [eval] p1_29 ==> !except1_5
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5513 | p1_29@1210@01 | live]
; [else-branch: 5513 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 5513 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> !except2_5
(push) ; 45
; [then-branch: 5514 | p2_29@1211@01 | dead]
; [else-branch: 5514 | !(p2_29@1211@01) | live]
(push) ; 46
; [else-branch: 5514 | !(p2_29@1211@01)]
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p1_29 ==> true
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5515 | p1_29@1210@01 | live]
; [else-branch: 5515 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 5515 | p1_29@1210@01]
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2_29 ==> true
(push) ; 45
; [then-branch: 5516 | p2_29@1211@01 | dead]
; [else-branch: 5516 | !(p2_29@1211@01) | live]
(push) ; 46
; [else-branch: 5516 | !(p2_29@1211@01)]
(pop) ; 46
(pop) ; 45
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5517 | p1_29@1210@01 | live]
; [else-branch: 5517 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 5517 | p1_29@1210@01]
; [then-branch: 5518 | p2_29@1211@01 | dead]
; [else-branch: 5518 | !(p2_29@1211@01) | live]
(push) ; 46
; [else-branch: 5518 | !(p2_29@1211@01)]
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5519 | p1_29@1210@01 | live]
; [else-branch: 5519 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5519 | p1_29@1210@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1467@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_29@1210@01
  (issubtype<Bool> (typeof<PyType> Container_value@1467@01) (as int<PyType>  PyType))))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 47
; [then-branch: 5520 | p2_29@1211@01 | dead]
; [else-branch: 5520 | !(p2_29@1211@01) | live]
(push) ; 48
; [else-branch: 5520 | !(p2_29@1211@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_29 ==> int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5521 | p1_29@1210@01 | live]
; [else-branch: 5521 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5521 | p1_29@1210@01]
; [eval] int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5522 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | dead]
; [else-branch: 5522 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 5522 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p2_29 ==> int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
(push) ; 47
; [then-branch: 5523 | p2_29@1211@01 | dead]
; [else-branch: 5523 | !(p2_29@1211@01) | live]
(push) ; 48
; [else-branch: 5523 | !(p2_29@1211@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_29 ==> !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5524 | p1_29@1210@01 | live]
; [else-branch: 5524 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5524 | p1_29@1210@01]
; [eval] !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] !int___eq__(i_0, __prim__int___box__(0))
; [eval] int___eq__(i_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 49
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 49
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 49
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 50
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 49
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5525 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0))) | live]
; [else-branch: 5525 | int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 5525 | !(int___eq__((_, _), i_0@1218@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(30))
; [eval] __prim__int___box__(30)
(push) ; 51
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 51
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(push) ; 51
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1467@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1467@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 52
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1467@01 (__prim__int___box__ $Snap.unit 30)))
(pop) ; 51
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@1467@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1467@01 (__prim__int___box__ $Snap.unit 30))))
(pop) ; 50
(pop) ; 49
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
    (__prim__int___box__%precondition $Snap.unit 30)
    (issubtype<Bool> (typeof<PyType> Container_value@1467@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1467@01 (__prim__int___box__ $Snap.unit 30)))))
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert (=>
  p1_29@1210@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0@1218@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
      (and
        (not
          (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0)))
        (__prim__int___box__%precondition $Snap.unit 30)
        (issubtype<Bool> (typeof<PyType> Container_value@1467@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@1467@01 (__prim__int___box__ $Snap.unit 30))))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))))
(push) ; 47
(assert (not (=>
  (and
    p1_29@1210@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1467@01 (__prim__int___box__ $Snap.unit 30)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    p1_29@1210@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0@1218@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@1467@01 (__prim__int___box__ $Snap.unit 30))))
; [eval] p2_29 ==> !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
(push) ; 47
; [then-branch: 5526 | p2_29@1211@01 | dead]
; [else-branch: 5526 | !(p2_29@1211@01) | live]
(push) ; 48
; [else-branch: 5526 | !(p2_29@1211@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_29 ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_29@1210@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5527 | p1_29@1210@01 | live]
; [else-branch: 5527 | !(p1_29@1210@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 5527 | p1_29@1210@01]
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
(push) ; 49
; [then-branch: 5528 | False | live]
; [else-branch: 5528 | True | live]
(push) ; 50
; [then-branch: 5528 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 5528 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
(push) ; 51
; [then-branch: 5529 | False | live]
; [else-branch: 5529 | True | live]
(push) ; 52
; [then-branch: 5529 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 5529 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
(push) ; 53
; [then-branch: 5530 | False | live]
; [else-branch: 5530 | True | live]
(push) ; 54
; [then-branch: 5530 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 5530 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_29 ==> (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
(push) ; 47
; [then-branch: 5531 | p2_29@1211@01 | dead]
; [else-branch: 5531 | !(p2_29@1211@01) | live]
(push) ; 48
; [else-branch: 5531 | !(p2_29@1211@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 43
; [then-branch: 5532 | !(p1_29@1210@01) | live]
; [else-branch: 5532 | p1_29@1210@01 | live]
(push) ; 44
; [then-branch: 5532 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 44
(push) ; 44
; [else-branch: 5532 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
; [then-branch: 5533 | !(p1_29@1210@01) | dead]
; [else-branch: 5533 | p1_29@1210@01 | live]
(push) ; 43
; [else-branch: 5533 | p1_29@1210@01]
(pop) ; 43
(pop) ; 42
(pop) ; 41
; [eval] !(p1_34 && !except1_5)
; [eval] p1_34 && !except1_5
(push) ; 41
; [then-branch: 5534 | !(p1_34@1466@01) | live]
; [else-branch: 5534 | p1_34@1466@01 | live]
(push) ; 42
; [then-branch: 5534 | !(p1_34@1466@01)]
(assert (not p1_34@1466@01))
(pop) ; 42
(push) ; 42
; [else-branch: 5534 | p1_34@1466@01]
; [eval] !except1_5
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
; [then-branch: 5535 | !(p1_34@1466@01) | dead]
; [else-branch: 5535 | p1_34@1466@01 | live]
(push) ; 41
; [else-branch: 5535 | p1_34@1466@01]
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
; [eval] !p1_34
(push) ; 37
(set-option :timeout 10)
(assert (not p1_34@1466@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5536 | !(p1_34@1466@01) | dead]
; [else-branch: 5536 | p1_34@1466@01 | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 5536 | p1_34@1466@01]
(assert p1_34@1466@01)
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
; [eval] !p1_29
; [then-branch: 5537 | !(p1_29@1210@01) | dead]
; [else-branch: 5537 | p1_29@1210@01 | live]
(push) ; 27
; [else-branch: 5537 | p1_29@1210@01]
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 25
; [then-branch: 5538 | !(p1_29@1210@01) | live]
; [else-branch: 5538 | p1_29@1210@01 | live]
(push) ; 26
; [then-branch: 5538 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5538 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 5539 | !(p1_29@1210@01) | dead]
; [else-branch: 5539 | p1_29@1210@01 | live]
(push) ; 25
; [else-branch: 5539 | p1_29@1210@01]
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !p1_29
; [then-branch: 5540 | !(p1_29@1210@01) | dead]
; [else-branch: 5540 | p1_29@1210@01 | live]
(push) ; 23
; [else-branch: 5540 | p1_29@1210@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 21
; [then-branch: 5541 | !(p3_14@1447@01) | live]
; [else-branch: 5541 | p3_14@1447@01 | live]
(push) ; 22
; [then-branch: 5541 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5541 | p3_14@1447@01]
; [eval] !except1_5
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 5542 | !(p3_14@1447@01) | dead]
; [else-branch: 5542 | p3_14@1447@01 | live]
(push) ; 21
; [else-branch: 5542 | p3_14@1447@01]
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 19
; [then-branch: 5543 | !(p3_14@1447@01) | live]
; [else-branch: 5543 | p3_14@1447@01 | live]
(push) ; 20
; [then-branch: 5543 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5543 | p3_14@1447@01]
; [eval] !except1_5
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 5544 | !(p3_14@1447@01) | dead]
; [else-branch: 5544 | p3_14@1447@01 | live]
(push) ; 19
; [else-branch: 5544 | p3_14@1447@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !(p3_14 && !except1_5)
; [eval] p3_14 && !except1_5
(push) ; 17
; [then-branch: 5545 | !(p3_14@1447@01) | live]
; [else-branch: 5545 | p3_14@1447@01 | live]
(push) ; 18
; [then-branch: 5545 | !(p3_14@1447@01)]
(assert (not p3_14@1447@01))
(pop) ; 18
(push) ; 18
; [else-branch: 5545 | p3_14@1447@01]
(assert p3_14@1447@01)
; [eval] !except1_5
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p3_14@1447@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5546 | !(p3_14@1447@01) | dead]
; [else-branch: 5546 | p3_14@1447@01 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 5546 | p3_14@1447@01]
(assert p3_14@1447@01)
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 5408 | p1_31@1445@01]
(assert p1_31@1445@01)
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 9
; [then-branch: 5547 | !(p1_29@1210@01) | live]
; [else-branch: 5547 | p1_29@1210@01 | live]
(push) ; 10
; [then-branch: 5547 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 10
(push) ; 10
; [else-branch: 5547 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 5548 | !(p1_29@1210@01) | dead]
; [else-branch: 5548 | p1_29@1210@01 | live]
(push) ; 9
; [else-branch: 5548 | p1_29@1210@01]
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 5
; [then-branch: 5549 | !(p1_29@1210@01) | live]
; [else-branch: 5549 | p1_29@1210@01 | live]
(push) ; 6
; [then-branch: 5549 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(pop) ; 6
(push) ; 6
; [else-branch: 5549 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 5550 | !(p1_29@1210@01) | dead]
; [else-branch: 5550 | p1_29@1210@01 | live]
(push) ; 5
; [else-branch: 5550 | p1_29@1210@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 4507 | !(p1_29@1210@01)]
(assert (not p1_29@1210@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_29@1211@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5551 | p2_29@1211@01 | live]
; [else-branch: 5551 | !(p2_29@1211@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5551 | p2_29@1211@01]
(assert p2_29@1211@01)
(assert (not (= c_2_0@1221@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
  $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 4
; [then-branch: 5552 | p1_29@1210@01 | dead]
; [else-branch: 5552 | !(p1_29@1210@01) | live]
(push) ; 5
; [else-branch: 5552 | !(p1_29@1210@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5553 | p2_29@1211@01 | live]
; [else-branch: 5553 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5553 | p2_29@1211@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
  $Snap.unit))
; [eval] p1_29 ==> true
(push) ; 4
; [then-branch: 5554 | p1_29@1210@01 | dead]
; [else-branch: 5554 | !(p1_29@1210@01) | live]
(push) ; 5
; [else-branch: 5554 | !(p1_29@1210@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
  $Snap.unit))
; [eval] p2_29 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5555 | p2_29@1211@01 | live]
; [else-branch: 5555 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5555 | p2_29@1211@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@1468@01 $Snap)
(assert (= $t@1468@01 ($Snap.combine ($Snap.first $t@1468@01) ($Snap.second $t@1468@01))))
(assert (= ($Snap.first $t@1468@01) $Snap.unit))
; [eval] p1_29 ==> (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_163) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163)
(push) ; 5
; [then-branch: 5556 | p1_29@1210@01 | dead]
; [else-branch: 5556 | !(p1_29@1210@01) | live]
(push) ; 6
; [else-branch: 5556 | !(p1_29@1210@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@1468@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1468@01))
    ($Snap.second ($Snap.second $t@1468@01)))))
(assert (= ($Snap.first ($Snap.second $t@1468@01)) $Snap.unit))
; [eval] p2_29 ==> (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_163_0) && ((forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_163_0) && _residue_163_0 <= _current_wait_level_163_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5557 | p2_29@1211@01 | live]
; [else-branch: 5557 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 5557 | p2_29@1211@01]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_163_0) && ((forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_163_0) && _residue_163_0 <= _current_wait_level_163_0)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_163_0)
(push) ; 7
; [then-branch: 5558 | False | live]
; [else-branch: 5558 | True | live]
(push) ; 8
; [then-branch: 5558 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 5558 | True]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_163_0)
(push) ; 9
; [then-branch: 5559 | False | live]
; [else-branch: 5559 | True | live]
(push) ; 10
; [then-branch: 5559 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5559 | True]
; [eval] _residue_163_0 <= _current_wait_level_163_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_29@1211@01 (<= _residue_163_0@1217@01 _current_wait_level_163_0@1223@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1468@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1468@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))
; [then-branch: 5560 | p1_29@1210@01 | dead]
; [else-branch: 5560 | !(p1_29@1210@01) | live]
(push) ; 5
; [else-branch: 5560 | !(p1_29@1210@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1468@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5561 | p2_29@1211@01 | live]
; [else-branch: 5561 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 5561 | p2_29@1211@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))
  $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 7
; [then-branch: 5562 | p1_29@1210@01 | dead]
; [else-branch: 5562 | !(p1_29@1210@01) | live]
(push) ; 8
; [else-branch: 5562 | !(p1_29@1210@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5563 | p2_29@1211@01 | live]
; [else-branch: 5563 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5563 | p2_29@1211@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))
  $Snap.unit))
; [eval] p1_29 ==> int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
(push) ; 7
; [then-branch: 5564 | p1_29@1210@01 | dead]
; [else-branch: 5564 | !(p1_29@1210@01) | live]
(push) ; 8
; [else-branch: 5564 | !(p1_29@1210@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))))
  $Snap.unit))
; [eval] p2_29 ==> int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5565 | p2_29@1211@01 | live]
; [else-branch: 5565 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5565 | p2_29@1211@01]
; [eval] int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5566 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | live]
; [else-branch: 5566 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 5566 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
; [eval] int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
; [eval] __prim__int___box__(20)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 20))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 20))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))) (__prim__int___box__ $Snap.unit 20)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))) (__prim__int___box__ $Snap.unit 20))))
(pop) ; 10
(push) ; 10
; [else-branch: 5566 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (__prim__int___box__%precondition $Snap.unit 20)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))) (__prim__int___box__ $Snap.unit 20)))))
; Joined path conditions
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
      (and
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
        (__prim__int___box__%precondition $Snap.unit 20)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 20)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))) (__prim__int___box__ $Snap.unit 20))))
    (or
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))))
(assert (=>
  (and
    p2_29@1211@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))) (__prim__int___box__ $Snap.unit 20))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))))
  $Snap.unit))
; [eval] p1_29 ==> !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
(push) ; 7
; [then-branch: 5567 | p1_29@1210@01 | dead]
; [else-branch: 5567 | !(p1_29@1210@01) | live]
(push) ; 8
; [else-branch: 5567 | !(p1_29@1210@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))))))
  $Snap.unit))
; [eval] p2_29 ==> !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5568 | p2_29@1211@01 | live]
; [else-branch: 5568 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5568 | p2_29@1211@01]
; [eval] !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
; [eval] !int___eq__(i_0_0, __prim__int___box__(0))
; [eval] int___eq__(i_0_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5569 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))) | live]
; [else-branch: 5569 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 5569 | !(int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
; [eval] __prim__int___box__(30)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))) (__prim__int___box__ $Snap.unit 30)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))) (__prim__int___box__ $Snap.unit 30))))
(pop) ; 10
(push) ; 10
; [else-branch: 5569 | int___eq__((_, _), i_0_0@1219@01, __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
    (__prim__int___box__%precondition $Snap.unit 30)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))) (__prim__int___box__ $Snap.unit 30)))))
; Joined path conditions
(assert (or
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_29@1211@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> i_0_0@1219@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
    (=>
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
      (and
        (not
          (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))
        (__prim__int___box__%precondition $Snap.unit 30)
        (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 30)) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))) (__prim__int___box__ $Snap.unit 30))))
    (or
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))
      (not
        (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0)))))))
(assert (=>
  (and
    p2_29@1211@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) i_0_0@1219@01 (__prim__int___box__ $Snap.unit 0))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))) (__prim__int___box__ $Snap.unit 30))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))))))
  $Snap.unit))
; [eval] p1_29 ==> true
(push) ; 7
; [then-branch: 5570 | p1_29@1210@01 | dead]
; [else-branch: 5570 | !(p1_29@1210@01) | live]
(push) ; 8
; [else-branch: 5570 | !(p1_29@1210@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1468@01)))))))))))
  $Snap.unit))
; [eval] p2_29 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_29@1211@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5571 | p2_29@1211@01 | live]
; [else-branch: 5571 | !(p2_29@1211@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5571 | p2_29@1211@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_5: Bool
(declare-const except1_5@1469@01 Bool)
; [exec]
; var except2_5: Bool
(declare-const except2_5@1470@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@1471@01 $Ref)
; [exec]
; var _err_6: Ref
(declare-const _err_6@1472@01 $Ref)
; [exec]
; var cl: Ref
(declare-const cl@1473@01 $Ref)
; [exec]
; var cl_0: Ref
(declare-const cl_0@1474@01 $Ref)
; [exec]
; var error_5: Ref
(declare-const error_5@1475@01 $Ref)
; [exec]
; var error_5_0: Ref
(declare-const error_5_0@1476@01 $Ref)
; [exec]
; var try_finally_13: Int
(declare-const try_finally_13@1477@01 Int)
; [exec]
; var try_finally_13_0: Int
(declare-const try_finally_13_0@1478@01 Int)
; [exec]
; var error_6: Ref
(declare-const error_6@1479@01 $Ref)
; [exec]
; var error_6_0: Ref
(declare-const error_6_0@1480@01 $Ref)
; [exec]
; var try_finally_14: Int
(declare-const try_finally_14@1481@01 Int)
; [exec]
; var try_finally_14_0: Int
(declare-const try_finally_14_0@1482@01 Int)
; [exec]
; var i_6: Ref
(declare-const i_6@1483@01 $Ref)
; [exec]
; var i_6_0: Ref
(declare-const i_6_0@1484@01 $Ref)
; [exec]
; var c_6: Ref
(declare-const c_6@1485@01 $Ref)
; [exec]
; var c_6_0: Ref
(declare-const c_6_0@1486@01 $Ref)
; [exec]
; var MyException_res_7: Ref
(declare-const MyException_res_7@1487@01 $Ref)
; [exec]
; var MyException_res_7_0: Ref
(declare-const MyException_res_7_0@1488@01 $Ref)
; [exec]
; var MyException2_res_0: Ref
(declare-const MyException2_res_0@1489@01 $Ref)
; [exec]
; var MyException2_res_0_0: Ref
(declare-const MyException2_res_0_0@1490@01 $Ref)
; [exec]
; var _cwl_163: Perm
(declare-const _cwl_163@1491@01 $Perm)
; [exec]
; var _cwl_163_0: Perm
(declare-const _cwl_163_0@1492@01 $Perm)
; [exec]
; var _method_measures_163: Seq[Measure$]
(declare-const _method_measures_163@1493@01 Seq<Measure$>)
; [exec]
; var _method_measures_163_0: Seq[Measure$]
(declare-const _method_measures_163_0@1494@01 Seq<Measure$>)
; [exec]
; var p1_30: Bool
(declare-const p1_30@1495@01 Bool)
; [exec]
; var p2_30: Bool
(declare-const p2_30@1496@01 Bool)
; [exec]
; var p3_13: Bool
(declare-const p3_13@1497@01 Bool)
; [exec]
; var p4_13: Bool
(declare-const p4_13@1498@01 Bool)
; [exec]
; var bypass1_5: Bool
(declare-const bypass1_5@1499@01 Bool)
; [exec]
; var bypass2_5: Bool
(declare-const bypass2_5@1500@01 Bool)
; [exec]
; var thisexcept1_6: Bool
(declare-const thisexcept1_6@1501@01 Bool)
; [exec]
; var thisexcept2_6: Bool
(declare-const thisexcept2_6@1502@01 Bool)
; [exec]
; var p1_32: Bool
(declare-const p1_32@1503@01 Bool)
; [exec]
; var p2_32: Bool
(declare-const p2_32@1504@01 Bool)
; [exec]
; var p1_34: Bool
(declare-const p1_34@1505@01 Bool)
; [exec]
; var p2_34: Bool
(declare-const p2_34@1506@01 Bool)
; [exec]
; var bypass1_6: Bool
(declare-const bypass1_6@1507@01 Bool)
; [exec]
; var bypass2_6: Bool
(declare-const bypass2_6@1508@01 Bool)
; [exec]
; var oldexcept1_2: Bool
(declare-const oldexcept1_2@1509@01 Bool)
; [exec]
; var oldexcept2_2: Bool
(declare-const oldexcept2_2@1510@01 Bool)
; [exec]
; var thisexcept1_5: Bool
(declare-const thisexcept1_5@1511@01 Bool)
; [exec]
; var thisexcept2_5: Bool
(declare-const thisexcept2_5@1512@01 Bool)
; [exec]
; var tmp_ret1_2: Bool
(declare-const tmp_ret1_2@1513@01 Bool)
; [exec]
; var tmp_ret2_2: Bool
(declare-const tmp_ret2_2@1514@01 Bool)
; [exec]
; var tmp_break1_2: Bool
(declare-const tmp_break1_2@1515@01 Bool)
; [exec]
; var tmp_break2_2: Bool
(declare-const tmp_break2_2@1516@01 Bool)
; [exec]
; var tmp_cont1_2: Bool
(declare-const tmp_cont1_2@1517@01 Bool)
; [exec]
; var tmp_cont2_2: Bool
(declare-const tmp_cont2_2@1518@01 Bool)
; [exec]
; var tmp_except1_2: Bool
(declare-const tmp_except1_2@1519@01 Bool)
; [exec]
; var tmp_except2_2: Bool
(declare-const tmp_except2_2@1520@01 Bool)
; [exec]
; var p1_31: Bool
(declare-const p1_31@1521@01 Bool)
; [exec]
; var p2_31: Bool
(declare-const p2_31@1522@01 Bool)
; [exec]
; var p3_14: Bool
(declare-const p3_14@1523@01 Bool)
; [exec]
; var p4_14: Bool
(declare-const p4_14@1524@01 Bool)
; [exec]
; var tmp_8: Ref
(declare-const tmp_8@1525@01 $Ref)
; [exec]
; var tmp_9: Ref
(declare-const tmp_9@1526@01 $Ref)
; [exec]
; var p1_33: Bool
(declare-const p1_33@1527@01 Bool)
; [exec]
; var p2_33: Bool
(declare-const p2_33@1528@01 Bool)
; [exec]
; var p3_15: Bool
(declare-const p3_15@1529@01 Bool)
; [exec]
; var p4_15: Bool
(declare-const p4_15@1530@01 Bool)
; [exec]
; var p1_35: Bool
(declare-const p1_35@1531@01 Bool)
; [exec]
; var p2_35: Bool
(declare-const p2_35@1532@01 Bool)
; [exec]
; var p3_16: Bool
(declare-const p3_16@1533@01 Bool)
; [exec]
; var p4_16: Bool
(declare-const p4_16@1534@01 Bool)
; [exec]
; inhale p1_29
(declare-const $t@1535@01 $Snap)
(assert (= $t@1535@01 $Snap.unit))
(assert p1_29@1210@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; except1_5 := false
; [exec]
; except2_5 := false
; [eval] p1_29 && !except1_5
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5572 | !(p1_29@1210@01) | live]
; [else-branch: 5572 | p1_29@1210@01 | live]
(push) ; 6
; [then-branch: 5572 | !(p1_29@1210@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 5572 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_29@1210@01 (not p1_29@1210@01)))
; [then-branch: 5573 | p1_29@1210@01 | dead]
; [else-branch: 5573 | !(p1_29@1210@01) | live]
(push) ; 5
; [else-branch: 5573 | !(p1_29@1210@01)]
(pop) ; 5
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 5
; [then-branch: 5574 | !(p1_29@1210@01) | live]
; [else-branch: 5574 | p1_29@1210@01 | live]
(push) ; 6
; [then-branch: 5574 | !(p1_29@1210@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 5574 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 5575 | !(p1_29@1210@01) | dead]
; [else-branch: 5575 | p1_29@1210@01 | live]
(push) ; 5
; [else-branch: 5575 | p1_29@1210@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 5551 | !(p2_29@1211@01)]
(assert (not p2_29@1211@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
  $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 4
; [then-branch: 5576 | p1_29@1210@01 | dead]
; [else-branch: 5576 | !(p1_29@1210@01) | live]
(push) ; 5
; [else-branch: 5576 | !(p1_29@1210@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 4
; [then-branch: 5577 | p2_29@1211@01 | dead]
; [else-branch: 5577 | !(p2_29@1211@01) | live]
(push) ; 5
; [else-branch: 5577 | !(p2_29@1211@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
  $Snap.unit))
; [eval] p1_29 ==> true
(push) ; 4
; [then-branch: 5578 | p1_29@1210@01 | dead]
; [else-branch: 5578 | !(p1_29@1210@01) | live]
(push) ; 5
; [else-branch: 5578 | !(p1_29@1210@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1224@01)))))))))))))
  $Snap.unit))
; [eval] p2_29 ==> true
(push) ; 4
; [then-branch: 5579 | p2_29@1211@01 | dead]
; [else-branch: 5579 | !(p2_29@1211@01) | live]
(push) ; 5
; [else-branch: 5579 | !(p2_29@1211@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@1536@01 $Snap)
(assert (= $t@1536@01 ($Snap.combine ($Snap.first $t@1536@01) ($Snap.second $t@1536@01))))
(assert (= ($Snap.first $t@1536@01) $Snap.unit))
; [eval] p1_29 ==> (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_163) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163)
(push) ; 5
; [then-branch: 5580 | p1_29@1210@01 | dead]
; [else-branch: 5580 | !(p1_29@1210@01) | live]
(push) ; 6
; [else-branch: 5580 | !(p1_29@1210@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@1536@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1536@01))
    ($Snap.second ($Snap.second $t@1536@01)))))
(assert (= ($Snap.first ($Snap.second $t@1536@01)) $Snap.unit))
; [eval] p2_29 ==> (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_163_0) && ((forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_163_0) && _residue_163_0 <= _current_wait_level_163_0)
(push) ; 5
; [then-branch: 5581 | p2_29@1211@01 | dead]
; [else-branch: 5581 | !(p2_29@1211@01) | live]
(push) ; 6
; [else-branch: 5581 | !(p2_29@1211@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@1536@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1536@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))
; [then-branch: 5582 | p1_29@1210@01 | dead]
; [else-branch: 5582 | !(p1_29@1210@01) | live]
(push) ; 5
; [else-branch: 5582 | !(p1_29@1210@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1536@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))
; [then-branch: 5583 | p2_29@1211@01 | dead]
; [else-branch: 5583 | !(p2_29@1211@01) | live]
(push) ; 6
; [else-branch: 5583 | !(p2_29@1211@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))
  $Snap.unit))
; [eval] p1_29 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 7
; [then-branch: 5584 | p1_29@1210@01 | dead]
; [else-branch: 5584 | !(p1_29@1210@01) | live]
(push) ; 8
; [else-branch: 5584 | !(p1_29@1210@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))
  $Snap.unit))
; [eval] p2_29 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 7
; [then-branch: 5585 | p2_29@1211@01 | dead]
; [else-branch: 5585 | !(p2_29@1211@01) | live]
(push) ; 8
; [else-branch: 5585 | !(p2_29@1211@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))
  $Snap.unit))
; [eval] p1_29 ==> int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(20))
(push) ; 7
; [then-branch: 5586 | p1_29@1210@01 | dead]
; [else-branch: 5586 | !(p1_29@1210@01) | live]
(push) ; 8
; [else-branch: 5586 | !(p1_29@1210@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))))
  $Snap.unit))
; [eval] p2_29 ==> int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(20))
(push) ; 7
; [then-branch: 5587 | p2_29@1211@01 | dead]
; [else-branch: 5587 | !(p2_29@1211@01) | live]
(push) ; 8
; [else-branch: 5587 | !(p2_29@1211@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))))
  $Snap.unit))
; [eval] p1_29 ==> !int___eq__(i_0, __prim__int___box__(0)) ==> int___eq__(c_2.Container_value, __prim__int___box__(30))
(push) ; 7
; [then-branch: 5588 | p1_29@1210@01 | dead]
; [else-branch: 5588 | !(p1_29@1210@01) | live]
(push) ; 8
; [else-branch: 5588 | !(p1_29@1210@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))))))
  $Snap.unit))
; [eval] p2_29 ==> !int___eq__(i_0_0, __prim__int___box__(0)) ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(30))
(push) ; 7
; [then-branch: 5589 | p2_29@1211@01 | dead]
; [else-branch: 5589 | !(p2_29@1211@01) | live]
(push) ; 8
; [else-branch: 5589 | !(p2_29@1211@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))))))
  $Snap.unit))
; [eval] p1_29 ==> true
(push) ; 7
; [then-branch: 5590 | p1_29@1210@01 | dead]
; [else-branch: 5590 | !(p1_29@1210@01) | live]
(push) ; 8
; [else-branch: 5590 | !(p1_29@1210@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1536@01)))))))))))
  $Snap.unit))
; [eval] p2_29 ==> true
(push) ; 7
; [then-branch: 5591 | p2_29@1211@01 | dead]
; [else-branch: 5591 | !(p2_29@1211@01) | live]
(push) ; 8
; [else-branch: 5591 | !(p2_29@1211@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var except1_5: Bool
(declare-const except1_5@1537@01 Bool)
; [exec]
; var except2_5: Bool
(declare-const except2_5@1538@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@1539@01 $Ref)
; [exec]
; var _err_6: Ref
(declare-const _err_6@1540@01 $Ref)
; [exec]
; var cl: Ref
(declare-const cl@1541@01 $Ref)
; [exec]
; var cl_0: Ref
(declare-const cl_0@1542@01 $Ref)
; [exec]
; var error_5: Ref
(declare-const error_5@1543@01 $Ref)
; [exec]
; var error_5_0: Ref
(declare-const error_5_0@1544@01 $Ref)
; [exec]
; var try_finally_13: Int
(declare-const try_finally_13@1545@01 Int)
; [exec]
; var try_finally_13_0: Int
(declare-const try_finally_13_0@1546@01 Int)
; [exec]
; var error_6: Ref
(declare-const error_6@1547@01 $Ref)
; [exec]
; var error_6_0: Ref
(declare-const error_6_0@1548@01 $Ref)
; [exec]
; var try_finally_14: Int
(declare-const try_finally_14@1549@01 Int)
; [exec]
; var try_finally_14_0: Int
(declare-const try_finally_14_0@1550@01 Int)
; [exec]
; var i_6: Ref
(declare-const i_6@1551@01 $Ref)
; [exec]
; var i_6_0: Ref
(declare-const i_6_0@1552@01 $Ref)
; [exec]
; var c_6: Ref
(declare-const c_6@1553@01 $Ref)
; [exec]
; var c_6_0: Ref
(declare-const c_6_0@1554@01 $Ref)
; [exec]
; var MyException_res_7: Ref
(declare-const MyException_res_7@1555@01 $Ref)
; [exec]
; var MyException_res_7_0: Ref
(declare-const MyException_res_7_0@1556@01 $Ref)
; [exec]
; var MyException2_res_0: Ref
(declare-const MyException2_res_0@1557@01 $Ref)
; [exec]
; var MyException2_res_0_0: Ref
(declare-const MyException2_res_0_0@1558@01 $Ref)
; [exec]
; var _cwl_163: Perm
(declare-const _cwl_163@1559@01 $Perm)
; [exec]
; var _cwl_163_0: Perm
(declare-const _cwl_163_0@1560@01 $Perm)
; [exec]
; var _method_measures_163: Seq[Measure$]
(declare-const _method_measures_163@1561@01 Seq<Measure$>)
; [exec]
; var _method_measures_163_0: Seq[Measure$]
(declare-const _method_measures_163_0@1562@01 Seq<Measure$>)
; [exec]
; var p1_30: Bool
(declare-const p1_30@1563@01 Bool)
; [exec]
; var p2_30: Bool
(declare-const p2_30@1564@01 Bool)
; [exec]
; var p3_13: Bool
(declare-const p3_13@1565@01 Bool)
; [exec]
; var p4_13: Bool
(declare-const p4_13@1566@01 Bool)
; [exec]
; var bypass1_5: Bool
(declare-const bypass1_5@1567@01 Bool)
; [exec]
; var bypass2_5: Bool
(declare-const bypass2_5@1568@01 Bool)
; [exec]
; var thisexcept1_6: Bool
(declare-const thisexcept1_6@1569@01 Bool)
; [exec]
; var thisexcept2_6: Bool
(declare-const thisexcept2_6@1570@01 Bool)
; [exec]
; var p1_32: Bool
(declare-const p1_32@1571@01 Bool)
; [exec]
; var p2_32: Bool
(declare-const p2_32@1572@01 Bool)
; [exec]
; var p1_34: Bool
(declare-const p1_34@1573@01 Bool)
; [exec]
; var p2_34: Bool
(declare-const p2_34@1574@01 Bool)
; [exec]
; var bypass1_6: Bool
(declare-const bypass1_6@1575@01 Bool)
; [exec]
; var bypass2_6: Bool
(declare-const bypass2_6@1576@01 Bool)
; [exec]
; var oldexcept1_2: Bool
(declare-const oldexcept1_2@1577@01 Bool)
; [exec]
; var oldexcept2_2: Bool
(declare-const oldexcept2_2@1578@01 Bool)
; [exec]
; var thisexcept1_5: Bool
(declare-const thisexcept1_5@1579@01 Bool)
; [exec]
; var thisexcept2_5: Bool
(declare-const thisexcept2_5@1580@01 Bool)
; [exec]
; var tmp_ret1_2: Bool
(declare-const tmp_ret1_2@1581@01 Bool)
; [exec]
; var tmp_ret2_2: Bool
(declare-const tmp_ret2_2@1582@01 Bool)
; [exec]
; var tmp_break1_2: Bool
(declare-const tmp_break1_2@1583@01 Bool)
; [exec]
; var tmp_break2_2: Bool
(declare-const tmp_break2_2@1584@01 Bool)
; [exec]
; var tmp_cont1_2: Bool
(declare-const tmp_cont1_2@1585@01 Bool)
; [exec]
; var tmp_cont2_2: Bool
(declare-const tmp_cont2_2@1586@01 Bool)
; [exec]
; var tmp_except1_2: Bool
(declare-const tmp_except1_2@1587@01 Bool)
; [exec]
; var tmp_except2_2: Bool
(declare-const tmp_except2_2@1588@01 Bool)
; [exec]
; var p1_31: Bool
(declare-const p1_31@1589@01 Bool)
; [exec]
; var p2_31: Bool
(declare-const p2_31@1590@01 Bool)
; [exec]
; var p3_14: Bool
(declare-const p3_14@1591@01 Bool)
; [exec]
; var p4_14: Bool
(declare-const p4_14@1592@01 Bool)
; [exec]
; var tmp_8: Ref
(declare-const tmp_8@1593@01 $Ref)
; [exec]
; var tmp_9: Ref
(declare-const tmp_9@1594@01 $Ref)
; [exec]
; var p1_33: Bool
(declare-const p1_33@1595@01 Bool)
; [exec]
; var p2_33: Bool
(declare-const p2_33@1596@01 Bool)
; [exec]
; var p3_15: Bool
(declare-const p3_15@1597@01 Bool)
; [exec]
; var p4_15: Bool
(declare-const p4_15@1598@01 Bool)
; [exec]
; var p1_35: Bool
(declare-const p1_35@1599@01 Bool)
; [exec]
; var p2_35: Bool
(declare-const p2_35@1600@01 Bool)
; [exec]
; var p3_16: Bool
(declare-const p3_16@1601@01 Bool)
; [exec]
; var p4_16: Bool
(declare-const p4_16@1602@01 Bool)
; [exec]
; inhale p1_29
(declare-const $t@1603@01 $Snap)
(assert (= $t@1603@01 $Snap.unit))
(assert p1_29@1210@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; except1_5 := false
; [exec]
; except2_5 := false
; [eval] p1_29 && !except1_5
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5592 | !(p1_29@1210@01) | live]
; [else-branch: 5592 | p1_29@1210@01 | live]
(push) ; 6
; [then-branch: 5592 | !(p1_29@1210@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 5592 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_29@1210@01 (not p1_29@1210@01)))
; [then-branch: 5593 | p1_29@1210@01 | dead]
; [else-branch: 5593 | !(p1_29@1210@01) | live]
(push) ; 5
; [else-branch: 5593 | !(p1_29@1210@01)]
(pop) ; 5
; [eval] !(p1_29 && !except1_5)
; [eval] p1_29 && !except1_5
(push) ; 5
; [then-branch: 5594 | !(p1_29@1210@01) | live]
; [else-branch: 5594 | p1_29@1210@01 | live]
(push) ; 6
; [then-branch: 5594 | !(p1_29@1210@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 5594 | p1_29@1210@01]
; [eval] !except1_5
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 5595 | !(p1_29@1210@01) | dead]
; [else-branch: 5595 | p1_29@1210@01 | live]
(push) ; 5
; [else-branch: 5595 | p1_29@1210@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- m8 ----------
(declare-const p1_36@1604@01 Bool)
(declare-const p2_36@1605@01 Bool)
(declare-const _cthread_164@1606@01 $Ref)
(declare-const _cthread_164_0@1607@01 $Ref)
(declare-const _caller_measures_164@1608@01 Seq<Measure$>)
(declare-const _caller_measures_164_0@1609@01 Seq<Measure$>)
(declare-const _residue_164@1610@01 $Perm)
(declare-const _residue_164_0@1611@01 $Perm)
(declare-const _current_wait_level_164@1612@01 $Perm)
(declare-const _current_wait_level_164_0@1613@01 $Perm)
(declare-const _res@1614@01 $Ref)
(declare-const _res_3@1615@01 $Ref)
(declare-const p1_36@1616@01 Bool)
(declare-const p2_36@1617@01 Bool)
(declare-const _cthread_164@1618@01 $Ref)
(declare-const _cthread_164_0@1619@01 $Ref)
(declare-const _caller_measures_164@1620@01 Seq<Measure$>)
(declare-const _caller_measures_164_0@1621@01 Seq<Measure$>)
(declare-const _residue_164@1622@01 $Perm)
(declare-const _residue_164_0@1623@01 $Perm)
(declare-const _current_wait_level_164@1624@01 $Perm)
(declare-const _current_wait_level_164_0@1625@01 $Perm)
(declare-const _res@1626@01 $Ref)
(declare-const _res_3@1627@01 $Ref)
(push) ; 1
(declare-const $t@1628@01 $Snap)
(assert (= $t@1628@01 ($Snap.combine ($Snap.first $t@1628@01) ($Snap.second $t@1628@01))))
(assert (= ($Snap.first $t@1628@01) $Snap.unit))
; [eval] p1_36 ==> _cthread_164 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_36@1616@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_36@1616@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5596 | p1_36@1616@01 | live]
; [else-branch: 5596 | !(p1_36@1616@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5596 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] _cthread_164 != null
(pop) ; 3
(push) ; 3
; [else-branch: 5596 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_36@1616@01) p1_36@1616@01))
(assert (=> p1_36@1616@01 (not (= _cthread_164@1618@01 $Ref.null))))
(assert (=
  ($Snap.second $t@1628@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1628@01))
    ($Snap.second ($Snap.second $t@1628@01)))))
(assert (= ($Snap.first ($Snap.second $t@1628@01)) $Snap.unit))
; [eval] p2_36 ==> _cthread_164_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_36@1617@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_36@1617@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5597 | p2_36@1617@01 | live]
; [else-branch: 5597 | !(p2_36@1617@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5597 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] _cthread_164_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 5597 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_36@1617@01) p2_36@1617@01))
(assert (=> p2_36@1617@01 (not (= _cthread_164_0@1619@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@1628@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1628@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1628@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1628@01))) $Snap.unit))
; [eval] p1_36 ==> issubtype(typeof(_cthread_164), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_36@1616@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_36@1616@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5598 | p1_36@1616@01 | live]
; [else-branch: 5598 | !(p1_36@1616@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5598 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] issubtype(typeof(_cthread_164), Thread_0())
; [eval] typeof(_cthread_164)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 5598 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_36@1616@01
  (issubtype<Bool> (typeof<PyType> _cthread_164@1618@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1628@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1628@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1628@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1628@01))))
  $Snap.unit))
; [eval] p2_36 ==> issubtype(typeof(_cthread_164_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_36@1617@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_36@1617@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5599 | p2_36@1617@01 | live]
; [else-branch: 5599 | !(p2_36@1617@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5599 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] issubtype(typeof(_cthread_164_0), Thread_0())
; [eval] typeof(_cthread_164_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 5599 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_36@1617@01
  (issubtype<Bool> (typeof<PyType> _cthread_164_0@1619@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1628@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1628@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1628@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1628@01)))))
  $Snap.unit))
; [eval] p1_36 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_36@1616@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_36@1616@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5600 | p1_36@1616@01 | live]
; [else-branch: 5600 | !(p1_36@1616@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5600 | p1_36@1616@01]
(assert p1_36@1616@01)
(pop) ; 3
(push) ; 3
; [else-branch: 5600 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1628@01)))))
  $Snap.unit))
; [eval] p2_36 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_36@1617@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_36@1617@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5601 | p2_36@1617@01 | live]
; [else-branch: 5601 | !(p2_36@1617@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5601 | p2_36@1617@01]
(assert p2_36@1617@01)
(pop) ; 3
(push) ; 3
; [else-branch: 5601 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@1629@01 $Snap)
(assert (= $t@1629@01 ($Snap.combine ($Snap.first $t@1629@01) ($Snap.second $t@1629@01))))
(assert (= ($Snap.first $t@1629@01) $Snap.unit))
; [eval] p1_36 ==> (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _current_wait_level_164) && ((forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _current_wait_level_164) && _residue_164 <= _current_wait_level_164)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_36@1616@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_36@1616@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5602 | p1_36@1616@01 | live]
; [else-branch: 5602 | !(p1_36@1616@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5602 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _current_wait_level_164) && ((forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _current_wait_level_164) && _residue_164 <= _current_wait_level_164)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _current_wait_level_164)
(push) ; 5
; [then-branch: 5603 | False | live]
; [else-branch: 5603 | True | live]
(push) ; 6
; [then-branch: 5603 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 5603 | True]
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _current_wait_level_164)
(push) ; 7
; [then-branch: 5604 | False | live]
; [else-branch: 5604 | True | live]
(push) ; 8
; [then-branch: 5604 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 5604 | True]
; [eval] _residue_164 <= _current_wait_level_164
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 5602 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_36@1616@01 (<= _residue_164@1622@01 _current_wait_level_164@1624@01)))
(assert (=
  ($Snap.second $t@1629@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1629@01))
    ($Snap.second ($Snap.second $t@1629@01)))))
(assert (= ($Snap.first ($Snap.second $t@1629@01)) $Snap.unit))
; [eval] p2_36 ==> (forperm _r_22: Ref [_r_22.MustReleaseBoundedp] :: Level(_r_22) <= _current_wait_level_164_0) && ((forperm _r_22: Ref [_r_22.MustReleaseUnboundedp] :: Level(_r_22) <= _current_wait_level_164_0) && _residue_164_0 <= _current_wait_level_164_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_36@1617@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_36@1617@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5605 | p2_36@1617@01 | live]
; [else-branch: 5605 | !(p2_36@1617@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5605 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBoundedp] :: Level(_r_22) <= _current_wait_level_164_0) && ((forperm _r_22: Ref [_r_22.MustReleaseUnboundedp] :: Level(_r_22) <= _current_wait_level_164_0) && _residue_164_0 <= _current_wait_level_164_0)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBoundedp] :: Level(_r_22) <= _current_wait_level_164_0)
(push) ; 5
; [then-branch: 5606 | False | live]
; [else-branch: 5606 | True | live]
(push) ; 6
; [then-branch: 5606 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 5606 | True]
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnboundedp] :: Level(_r_22) <= _current_wait_level_164_0)
(push) ; 7
; [then-branch: 5607 | False | live]
; [else-branch: 5607 | True | live]
(push) ; 8
; [then-branch: 5607 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 5607 | True]
; [eval] _residue_164_0 <= _current_wait_level_164_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 5605 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_36@1617@01 (<= _residue_164_0@1623@01 _current_wait_level_164_0@1625@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1629@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1629@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1629@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1629@01))) $Snap.unit))
; [eval] p1_36 ==> issubtype(typeof(_res), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_36@1616@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_36@1616@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5608 | p1_36@1616@01 | live]
; [else-branch: 5608 | !(p1_36@1616@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5608 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 5608 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_36@1616@01
  (issubtype<Bool> (typeof<PyType> _res@1626@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1629@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1629@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1629@01))))
  $Snap.unit))
; [eval] p2_36 ==> issubtype(typeof(_res_3), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_36@1617@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_36@1617@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5609 | p2_36@1617@01 | live]
; [else-branch: 5609 | !(p2_36@1617@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5609 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] issubtype(typeof(_res_3), int())
; [eval] typeof(_res_3)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 5609 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_36@1617@01
  (issubtype<Bool> (typeof<PyType> _res_3@1627@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01)))))
  $Snap.unit))
; [eval] p1_36 ==> int___eq__(_res, __prim__int___box__(6))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_36@1616@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_36@1616@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5610 | p1_36@1616@01 | live]
; [else-branch: 5610 | !(p1_36@1616@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5610 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] int___eq__(_res, __prim__int___box__(6))
; [eval] __prim__int___box__(6)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 6))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 6))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> _res@1626@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@1626@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 6)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 6)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@1626@01 (__prim__int___box__ $Snap.unit 6)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@1626@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 6)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@1626@01 (__prim__int___box__ $Snap.unit 6))))
(pop) ; 4
(push) ; 4
; [else-branch: 5610 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p1_36@1616@01
  (and
    p1_36@1616@01
    (__prim__int___box__%precondition $Snap.unit 6)
    (issubtype<Bool> (typeof<PyType> _res@1626@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 6)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@1626@01 (__prim__int___box__ $Snap.unit 6)))))
; Joined path conditions
(assert (=>
  p1_36@1616@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@1626@01 (__prim__int___box__ $Snap.unit 6))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01))))))
  $Snap.unit))
; [eval] p2_36 ==> int___eq__(_res_3, __prim__int___box__(6))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_36@1617@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_36@1617@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5611 | p2_36@1617@01 | live]
; [else-branch: 5611 | !(p2_36@1617@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5611 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] int___eq__(_res_3, __prim__int___box__(6))
; [eval] __prim__int___box__(6)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 6))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 6))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> _res_3@1627@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_3@1627@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 6)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 6)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_3@1627@01 (__prim__int___box__ $Snap.unit 6)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res_3@1627@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 6)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_3@1627@01 (__prim__int___box__ $Snap.unit 6))))
(pop) ; 4
(push) ; 4
; [else-branch: 5611 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  p2_36@1617@01
  (and
    p2_36@1617@01
    (__prim__int___box__%precondition $Snap.unit 6)
    (issubtype<Bool> (typeof<PyType> _res_3@1627@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 6)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res_3@1627@01 (__prim__int___box__ $Snap.unit 6)))))
; Joined path conditions
(assert (=>
  p2_36@1617@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res_3@1627@01 (__prim__int___box__ $Snap.unit 6))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01)))))))
  $Snap.unit))
; [eval] p1_36 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_36@1616@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_36@1616@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5612 | p1_36@1616@01 | live]
; [else-branch: 5612 | !(p1_36@1616@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5612 | p1_36@1616@01]
(assert p1_36@1616@01)
(pop) ; 4
(push) ; 4
; [else-branch: 5612 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1629@01)))))))
  $Snap.unit))
; [eval] p2_36 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_36@1617@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_36@1617@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5613 | p2_36@1617@01 | live]
; [else-branch: 5613 | !(p2_36@1617@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5613 | p2_36@1617@01]
(assert p2_36@1617@01)
(pop) ; 4
(push) ; 4
; [else-branch: 5613 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_2: Bool
(declare-const ret1_2@1630@01 Bool)
; [exec]
; var ret2_2: Bool
(declare-const ret2_2@1631@01 Bool)
; [exec]
; var break1: Bool
(declare-const break1@1632@01 Bool)
; [exec]
; var break2: Bool
(declare-const break2@1633@01 Bool)
; [exec]
; var except1_6: Bool
(declare-const except1_6@1634@01 Bool)
; [exec]
; var except2_6: Bool
(declare-const except2_6@1635@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@1636@01 $Ref)
; [exec]
; var _err_7: Ref
(declare-const _err_7@1637@01 $Ref)
; [exec]
; var i_1: Ref
(declare-const i_1@1638@01 $Ref)
; [exec]
; var i_1_0: Ref
(declare-const i_1_0@1639@01 $Ref)
; [exec]
; var error_7: Ref
(declare-const error_7@1640@01 $Ref)
; [exec]
; var error_7_0: Ref
(declare-const error_7_0@1641@01 $Ref)
; [exec]
; var try_finally_15: Int
(declare-const try_finally_15@1642@01 Int)
; [exec]
; var try_finally_15_0: Int
(declare-const try_finally_15_0@1643@01 Int)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@1644@01 Seq<Measure$>)
; [exec]
; var _loop_measures_3: Seq[Measure$]
(declare-const _loop_measures_3@1645@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@1646@01 Bool)
; [exec]
; var _loop_check_before_3: Bool
(declare-const _loop_check_before_3@1647@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@1648@01 Bool)
; [exec]
; var _loop_termination_flag_3: Bool
(declare-const _loop_termination_flag_3@1649@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@1650@01 $Perm)
; [exec]
; var _loop_original_must_terminate_3: Perm
(declare-const _loop_original_must_terminate_3@1651@01 $Perm)
; [exec]
; var _residue_168: Perm
(declare-const _residue_168@1652@01 $Perm)
; [exec]
; var _residue_168_0: Perm
(declare-const _residue_168_0@1653@01 $Perm)
; [exec]
; var _cwl_164: Perm
(declare-const _cwl_164@1654@01 $Perm)
; [exec]
; var _cwl_164_0: Perm
(declare-const _cwl_164_0@1655@01 $Perm)
; [exec]
; var _method_measures_164: Seq[Measure$]
(declare-const _method_measures_164@1656@01 Seq<Measure$>)
; [exec]
; var _method_measures_164_0: Seq[Measure$]
(declare-const _method_measures_164_0@1657@01 Seq<Measure$>)
; [exec]
; var bypass1_7: Bool
(declare-const bypass1_7@1658@01 Bool)
; [exec]
; var bypass2_7: Bool
(declare-const bypass2_7@1659@01 Bool)
; [exec]
; var tmp1: Seq[Measure$]
(declare-const tmp1@1660@01 Seq<Measure$>)
; [exec]
; var tmp2: Seq[Measure$]
(declare-const tmp2@1661@01 Seq<Measure$>)
; [exec]
; var tmp1_0: Ref
(declare-const tmp1_0@1662@01 $Ref)
; [exec]
; var tmp2_0: Ref
(declare-const tmp2_0@1663@01 $Ref)
; [exec]
; var tmp1_1: Bool
(declare-const tmp1_1@1664@01 Bool)
; [exec]
; var tmp2_1: Bool
(declare-const tmp2_1@1665@01 Bool)
; [exec]
; var tmp1_2: Bool
(declare-const tmp1_2@1666@01 Bool)
; [exec]
; var tmp2_2: Bool
(declare-const tmp2_2@1667@01 Bool)
; [exec]
; var oldret1_2: Bool
(declare-const oldret1_2@1668@01 Bool)
; [exec]
; var oldret2_2: Bool
(declare-const oldret2_2@1669@01 Bool)
; [exec]
; var oldbreak1: Bool
(declare-const oldbreak1@1670@01 Bool)
; [exec]
; var oldbreak2: Bool
(declare-const oldbreak2@1671@01 Bool)
; [exec]
; var oldexcept1_6: Bool
(declare-const oldexcept1_6@1672@01 Bool)
; [exec]
; var oldexcept2_6: Bool
(declare-const oldexcept2_6@1673@01 Bool)
; [exec]
; var p1_37: Bool
(declare-const p1_37@1674@01 Bool)
; [exec]
; var p2_37: Bool
(declare-const p2_37@1675@01 Bool)
; [exec]
; var idle1: Bool
(declare-const idle1@1676@01 Bool)
; [exec]
; var idle2: Bool
(declare-const idle2@1677@01 Bool)
; [exec]
; inhale p1_36
(declare-const $t@1678@01 $Snap)
(assert (= $t@1678@01 $Snap.unit))
(assert p1_36@1616@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_2 := false
; [exec]
; ret2_2 := false
; [exec]
; break1 := false
; [exec]
; break2 := false
; [exec]
; except1_6 := false
; [exec]
; except2_6 := false
; [eval] p1_36 && (!ret1_2 && (!break1 && !except1_6))
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5614 | !(p1_36@1616@01) | live]
; [else-branch: 5614 | p1_36@1616@01 | live]
(push) ; 4
; [then-branch: 5614 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 4
(push) ; 4
; [else-branch: 5614 | p1_36@1616@01]
; [eval] !ret1_2
(push) ; 5
; [then-branch: 5615 | False | live]
; [else-branch: 5615 | True | live]
(push) ; 6
; [then-branch: 5615 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 5615 | True]
; [eval] !break1
(push) ; 7
; [then-branch: 5616 | False | live]
; [else-branch: 5616 | True | live]
(push) ; 8
; [then-branch: 5616 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 5616 | True]
; [eval] !except1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_36@1616@01 (not p1_36@1616@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_36@1616@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5617 | p1_36@1616@01 | live]
; [else-branch: 5617 | !(p1_36@1616@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5617 | p1_36@1616@01]
; [exec]
; _method_measures_164 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; i_1 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_1@1679@01 $Ref)
(assert (= i_1@1679@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3235689)
(declare-const $t@1680@01 $Snap)
(assert (= $t@1680@01 $Snap.unit))
; [eval] _isDefined(3235689)
(push) ; 4
(assert (_isDefined%precondition $Snap.unit 3235689))
(pop) ; 4
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235689))
(assert (_isDefined $Snap.unit 3235689))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_164))
; [eval] perm(MustTerminate(_cthread_164))
(declare-const _loop_original_must_terminate@1681@01 $Perm)
(assert (= _loop_original_must_terminate@1681@01 $Perm.No))
; [exec]
; _loop_termination_flag := false
; [exec]
; _loop_check_before := true
; [eval] p2_36 && (!ret2_2 && (!break2 && !except2_6))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5618 | !(p2_36@1617@01) | live]
; [else-branch: 5618 | p2_36@1617@01 | live]
(push) ; 5
; [then-branch: 5618 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 5
(push) ; 5
; [else-branch: 5618 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] !ret2_2
(push) ; 6
; [then-branch: 5619 | False | live]
; [else-branch: 5619 | True | live]
(push) ; 7
; [then-branch: 5619 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 5619 | True]
; [eval] !break2
(push) ; 8
; [then-branch: 5620 | False | live]
; [else-branch: 5620 | True | live]
(push) ; 9
; [then-branch: 5620 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 5620 | True]
; [eval] !except2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_36@1617@01 (not p2_36@1617@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_36@1617@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_36@1617@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5621 | p2_36@1617@01 | live]
; [else-branch: 5621 | !(p2_36@1617@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5621 | p2_36@1617@01]
(assert p2_36@1617@01)
; [exec]
; _method_measures_164_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_3 := null
; [exec]
; _err_7 := null
; [exec]
; i_1_0 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const i_1_0@1682@01 $Ref)
(assert (= i_1_0@1682@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale true
(declare-const $t@1683@01 $Snap)
(assert (= $t@1683@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_3 := perm(MustTerminate_0(_cthread_164_0))
; [eval] perm(MustTerminate_0(_cthread_164_0))
(declare-const _loop_original_must_terminate_3@1684@01 $Perm)
(assert (= _loop_original_must_terminate_3@1684@01 $Perm.No))
; [exec]
; _loop_termination_flag_3 := false
; [exec]
; _loop_check_before_3 := true
; [exec]
; bypass1_7 := !(p1_36 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] !(p1_36 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_36 && (!ret1_2 && (!break1 && !except1_6))
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5622 | !(p1_36@1616@01) | live]
; [else-branch: 5622 | p1_36@1616@01 | live]
(push) ; 6
; [then-branch: 5622 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 6
(push) ; 6
; [else-branch: 5622 | p1_36@1616@01]
; [eval] !ret1_2
(push) ; 7
; [then-branch: 5623 | False | live]
; [else-branch: 5623 | True | live]
(push) ; 8
; [then-branch: 5623 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 5623 | True]
; [eval] !break1
(push) ; 9
; [then-branch: 5624 | False | live]
; [else-branch: 5624 | True | live]
(push) ; 10
; [then-branch: 5624 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5624 | True]
; [eval] !except1_6
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass1_7@1685@01 Bool)
(assert (= bypass1_7@1685@01 (not p1_36@1616@01)))
; [exec]
; bypass2_7 := !(p2_36 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] !(p2_36 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_36 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 5
; [then-branch: 5625 | !(p2_36@1617@01) | live]
; [else-branch: 5625 | p2_36@1617@01 | live]
(push) ; 6
; [then-branch: 5625 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 6
(push) ; 6
; [else-branch: 5625 | p2_36@1617@01]
; [eval] !ret2_2
(push) ; 7
; [then-branch: 5626 | False | live]
; [else-branch: 5626 | True | live]
(push) ; 8
; [then-branch: 5626 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 5626 | True]
; [eval] !break2
(push) ; 9
; [then-branch: 5627 | False | live]
; [else-branch: 5627 | True | live]
(push) ; 10
; [then-branch: 5627 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5627 | True]
; [eval] !except2_6
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const bypass2_7@1686@01 Bool)
(assert (= bypass2_7@1686@01 (not p2_36@1617@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not bypass1_7@1685@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5628 | bypass1_7@1685@01 | dead]
; [else-branch: 5628 | !(bypass1_7@1685@01) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 5628 | !(bypass1_7@1685@01)]
(assert (not bypass1_7@1685@01))
(pop) ; 5
; [eval] !bypass1_7
(push) ; 5
(set-option :timeout 10)
(assert (not bypass1_7@1685@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not bypass1_7@1685@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5629 | !(bypass1_7@1685@01) | live]
; [else-branch: 5629 | bypass1_7@1685@01 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5629 | !(bypass1_7@1685@01)]
(assert (not bypass1_7@1685@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (not bypass2_7@1686@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5630 | bypass2_7@1686@01 | dead]
; [else-branch: 5630 | !(bypass2_7@1686@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 5630 | !(bypass2_7@1686@01)]
(assert (not bypass2_7@1686@01))
(pop) ; 6
; [eval] !bypass2_7
(push) ; 6
(set-option :timeout 10)
(assert (not bypass2_7@1686@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not bypass2_7@1686@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5631 | !(bypass2_7@1686@01) | live]
; [else-branch: 5631 | bypass2_7@1686@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 5631 | !(bypass2_7@1686@01)]
(assert (not bypass2_7@1686@01))
; [exec]
; oldret1_2 := ret1_2
; [exec]
; oldret2_2 := ret2_2
; [exec]
; oldbreak1 := break1
; [exec]
; oldbreak2 := break2
; [exec]
; oldexcept1_6 := except1_6
; [exec]
; oldexcept2_6 := except2_6
; [exec]
; idle1 := false
; [exec]
; idle2 := false
(declare-const p1_37@1687@01 Bool)
(declare-const p2_37@1688@01 Bool)
(declare-const idle1@1689@01 Bool)
(declare-const idle2@1690@01 Bool)
(declare-const _loop_measures@1691@01 Seq<Measure$>)
(declare-const _loop_measures_3@1692@01 Seq<Measure$>)
(declare-const p1_38@1693@01 Bool)
(declare-const p2_38@1694@01 Bool)
(declare-const p3_17@1695@01 Bool)
(declare-const p4_17@1696@01 Bool)
(declare-const break1@1697@01 Bool)
(declare-const break2@1698@01 Bool)
(declare-const bypass1_8@1699@01 Bool)
(declare-const bypass2_8@1700@01 Bool)
(declare-const oldret1_3@1701@01 Bool)
(declare-const oldret2_3@1702@01 Bool)
(declare-const oldbreak1_0@1703@01 Bool)
(declare-const oldbreak2_0@1704@01 Bool)
(declare-const oldexcept1_3@1705@01 Bool)
(declare-const oldexcept2_3@1706@01 Bool)
(declare-const i_1@1707@01 $Ref)
(declare-const i_1_0@1708@01 $Ref)
(declare-const thisexcept1_7@1709@01 Bool)
(declare-const thisexcept2_7@1710@01 Bool)
(declare-const tmp_ret1_3@1711@01 Bool)
(declare-const ret1_2@1712@01 Bool)
(declare-const tmp_break1_3@1713@01 Bool)
(declare-const tmp_except1_3@1714@01 Bool)
(declare-const except1_6@1715@01 Bool)
(declare-const tmp_ret2_3@1716@01 Bool)
(declare-const ret2_2@1717@01 Bool)
(declare-const tmp_break2_3@1718@01 Bool)
(declare-const tmp_except2_3@1719@01 Bool)
(declare-const except2_6@1720@01 Bool)
(declare-const _loop_check_before@1721@01 Bool)
(declare-const _loop_check_before_3@1722@01 Bool)
(push) ; 7
; Loop head block: Check well-definedness of invariant
(declare-const $t@1723@01 $Snap)
(assert (= $t@1723@01 ($Snap.combine ($Snap.first $t@1723@01) ($Snap.second $t@1723@01))))
(assert (= ($Snap.first $t@1723@01) $Snap.unit))
; [eval] p1_36 && !bypass1_7 ==> (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _residue_168) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _residue_168) && _residue_164 <= _residue_168)
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5632 | !(p1_36@1616@01) | live]
; [else-branch: 5632 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5632 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5632 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5633 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5633 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5633 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _residue_168) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _residue_168) && _residue_164 <= _residue_168)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _residue_168)
(push) ; 10
; [then-branch: 5634 | False | live]
; [else-branch: 5634 | True | live]
(push) ; 11
; [then-branch: 5634 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 5634 | True]
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _residue_168)
(push) ; 12
; [then-branch: 5635 | False | live]
; [else-branch: 5635 | True | live]
(push) ; 13
; [then-branch: 5635 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 5635 | True]
; [eval] _residue_164 <= _residue_168
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (<= _residue_164@1622@01 _residue_168@1652@01)))
(assert (=
  ($Snap.second $t@1723@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1723@01))
    ($Snap.second ($Snap.second $t@1723@01)))))
(assert (= ($Snap.first ($Snap.second $t@1723@01)) $Snap.unit))
; [eval] p2_36 && !bypass2_7 ==> (forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: Level(_r_20) <= _residue_168_0) && ((forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: Level(_r_20) <= _residue_168_0) && _residue_164_0 <= _residue_168_0)
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5636 | !(p2_36@1617@01) | live]
; [else-branch: 5636 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5636 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5636 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5637 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5637 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5637 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: Level(_r_20) <= _residue_168_0) && ((forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: Level(_r_20) <= _residue_168_0) && _residue_164_0 <= _residue_168_0)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: Level(_r_20) <= _residue_168_0)
(push) ; 10
; [then-branch: 5638 | False | live]
; [else-branch: 5638 | True | live]
(push) ; 11
; [then-branch: 5638 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 5638 | True]
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: Level(_r_20) <= _residue_168_0)
(push) ; 12
; [then-branch: 5639 | False | live]
; [else-branch: 5639 | True | live]
(push) ; 13
; [then-branch: 5639 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 5639 | True]
; [eval] _residue_164_0 <= _residue_168_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (<= _residue_164_0@1623@01 _residue_168_0@1653@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1723@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1723@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1723@01))) $Snap.unit))
; [eval] p1_36 && !bypass1_7 ==> issubtype(typeof(i_1), int())
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5640 | !(p1_36@1616@01) | live]
; [else-branch: 5640 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5640 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5640 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5641 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5641 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5641 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))
  $Snap.unit))
; [eval] p2_36 && !bypass2_7 ==> issubtype(typeof(i_1_0), int())
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5642 | !(p2_36@1617@01) | live]
; [else-branch: 5642 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5642 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5642 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5643 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5643 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5643 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] issubtype(typeof(i_1_0), int())
; [eval] typeof(i_1_0)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))
  $Snap.unit))
; [eval] p1_36 && !bypass1_7 ==> int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5644 | !(p1_36@1616@01) | live]
; [else-branch: 5644 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5644 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5644 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5645 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5645 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5645 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 10
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0))
(pop) ; 10
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))
  $Snap.unit))
; [eval] p2_36 && !bypass2_7 ==> int___ge__(int___unbox__(i_1_0), 0)
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5646 | !(p2_36@1617@01) | live]
; [else-branch: 5646 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5646 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5646 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5647 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5647 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5647 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___ge__(int___unbox__(i_1_0), 0)
; [eval] int___unbox__(i_1_0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 10
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))
(pop) ; 10
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))
  $Snap.unit))
; [eval] p1_36 && !bypass1_7 ==> int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5648 | !(p1_36@1616@01) | live]
; [else-branch: 5648 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5648 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5648 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5649 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5649 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5649 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 10
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7))
(pop) ; 10
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))
  $Snap.unit))
; [eval] p2_36 && !bypass2_7 ==> int___le__(int___unbox__(i_1_0), 7)
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5650 | !(p2_36@1617@01) | live]
; [else-branch: 5650 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5650 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5650 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5651 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5651 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5651 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___le__(int___unbox__(i_1_0), 7)
; [eval] int___unbox__(i_1_0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 10
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))
(pop) ; 10
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))
  $Snap.unit))
; [eval] p1_36 && !bypass1_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5652 | !(p1_36@1616@01) | live]
; [else-branch: 5652 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5652 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5652 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5653 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5653 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5653 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2))
; [eval] int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 10
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))
(pop) ; 10
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)))
; [eval] __prim__int___box__(0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))
  $Snap.unit))
; [eval] p2_36 && !bypass2_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5654 | !(p2_36@1617@01) | live]
; [else-branch: 5654 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5654 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5654 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5655 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5655 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5655 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(i_1_0), 2))
; [eval] int___mod__(int___unbox__(i_1_0), 2)
; [eval] int___unbox__(i_1_0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 10
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
(pop) ; 10
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)))
; [eval] __prim__int___box__(0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))
  $Snap.unit))
; [eval] p1_36 && !bypass1_7 ==> true
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5656 | !(p1_36@1616@01) | live]
; [else-branch: 5656 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5656 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5656 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5657 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5657 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5657 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))
  $Snap.unit))
; [eval] p2_36 && !bypass2_7 ==> true
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5658 | !(p2_36@1617@01) | live]
; [else-branch: 5658 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5658 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5658 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5659 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5659 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5659 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))
  $Snap.unit))
; [eval] p1_36 && !bypass1_7 ==> true
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5660 | !(p1_36@1616@01) | live]
; [else-branch: 5660 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5660 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5660 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5661 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5661 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5661 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))
  $Snap.unit))
; [eval] p2_36 && !bypass2_7 ==> true
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5662 | !(p2_36@1617@01) | live]
; [else-branch: 5662 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5662 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5662 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5663 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5663 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5663 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))
  $Snap.unit))
; [eval] bypass1_7 ==> tmp1 == _loop_measures
(push) ; 8
; [then-branch: 5664 | bypass1_7@1685@01 | dead]
; [else-branch: 5664 | !(bypass1_7@1685@01) | live]
(push) ; 9
; [else-branch: 5664 | !(bypass1_7@1685@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))
  $Snap.unit))
; [eval] bypass1_7 ==> tmp1_0 == i_1
(push) ; 8
; [then-branch: 5665 | bypass1_7@1685@01 | dead]
; [else-branch: 5665 | !(bypass1_7@1685@01) | live]
(push) ; 9
; [else-branch: 5665 | !(bypass1_7@1685@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))
  $Snap.unit))
; [eval] bypass1_7 ==> tmp1_1 == _loop_check_before
(push) ; 8
; [then-branch: 5666 | bypass1_7@1685@01 | dead]
; [else-branch: 5666 | !(bypass1_7@1685@01) | live]
(push) ; 9
; [else-branch: 5666 | !(bypass1_7@1685@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))
  $Snap.unit))
; [eval] bypass1_7 ==> tmp1_2 == break1
(push) ; 8
; [then-branch: 5667 | bypass1_7@1685@01 | dead]
; [else-branch: 5667 | !(bypass1_7@1685@01) | live]
(push) ; 9
; [else-branch: 5667 | !(bypass1_7@1685@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_7 ==> tmp2 == _loop_measures_3
(push) ; 8
; [then-branch: 5668 | bypass2_7@1686@01 | dead]
; [else-branch: 5668 | !(bypass2_7@1686@01) | live]
(push) ; 9
; [else-branch: 5668 | !(bypass2_7@1686@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_7 ==> tmp2_0 == i_1_0
(push) ; 8
; [then-branch: 5669 | bypass2_7@1686@01 | dead]
; [else-branch: 5669 | !(bypass2_7@1686@01) | live]
(push) ; 9
; [else-branch: 5669 | !(bypass2_7@1686@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_7 ==> tmp2_1 == _loop_check_before_3
(push) ; 8
; [then-branch: 5670 | bypass2_7@1686@01 | dead]
; [else-branch: 5670 | !(bypass2_7@1686@01) | live]
(push) ; 9
; [else-branch: 5670 | !(bypass2_7@1686@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_7 ==> tmp2_2 == break2
(push) ; 8
; [then-branch: 5671 | bypass2_7@1686@01 | dead]
; [else-branch: 5671 | !(bypass2_7@1686@01) | live]
(push) ; 9
; [else-branch: 5671 | !(bypass2_7@1686@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; Loop head block: Establish invariant
; [eval] p1_36 && !bypass1_7 ==> true
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5672 | !(p1_36@1616@01) | live]
; [else-branch: 5672 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5672 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5672 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5673 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5673 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5673 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> true
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5674 | !(p2_36@1617@01) | live]
; [else-branch: 5674 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5674 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5674 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5675 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5675 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5675 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> issubtype(typeof(i_1), int())
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5676 | !(p1_36@1616@01) | live]
; [else-branch: 5676 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5676 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5676 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5677 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5677 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5677 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 8
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (issubtype<Bool> (typeof<PyType> i_1@1679@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (issubtype<Bool> (typeof<PyType> i_1@1679@01) (as int<PyType>  PyType))))
; [eval] p2_36 && !bypass2_7 ==> issubtype(typeof(i_1_0), int())
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5678 | !(p2_36@1617@01) | live]
; [else-branch: 5678 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5678 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5678 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5679 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5679 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5679 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] issubtype(typeof(i_1_0), int())
; [eval] typeof(i_1_0)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 8
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType))))
; [eval] p1_36 && !bypass1_7 ==> int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5680 | !(p1_36@1616@01) | live]
; [else-branch: 5680 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5680 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5680 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5681 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5681 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5681 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1679@01 3235689))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1679@01 3235689))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689))))
(push) ; 10
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 0))
(pop) ; 10
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1679@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 0))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 8
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 0)))
; [eval] p2_36 && !bypass2_7 ==> int___ge__(int___unbox__(i_1_0), 0)
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5682 | !(p2_36@1617@01) | live]
; [else-branch: 5682 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5682 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5682 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5683 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5683 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5683 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___ge__(int___unbox__(i_1_0), 0)
; [eval] int___unbox__(i_1_0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1682@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1682@01)))
(push) ; 10
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 0))
(pop) ; 10
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1682@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 0))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 8
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 0)))
; [eval] p1_36 && !bypass1_7 ==> int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5684 | !(p1_36@1616@01) | live]
; [else-branch: 5684 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5684 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5684 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5685 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5685 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5685 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1679@01 3235689))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1679@01 3235689))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689))))
(push) ; 10
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 7))
(pop) ; 10
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 7))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1679@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 7))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 8
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 7))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 7)))
; [eval] p2_36 && !bypass2_7 ==> int___le__(int___unbox__(i_1_0), 7)
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5686 | !(p2_36@1617@01) | live]
; [else-branch: 5686 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5686 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5686 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5687 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5687 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5687 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___le__(int___unbox__(i_1_0), 7)
; [eval] int___unbox__(i_1_0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1682@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1682@01)))
(push) ; 10
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 7))
(pop) ; 10
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 7))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1682@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 7))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 8
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 7))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 7)))
; [eval] p1_36 && !bypass1_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5688 | !(p1_36@1616@01) | live]
; [else-branch: 5688 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5688 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5688 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5689 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5689 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5689 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2))
; [eval] int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1679@01 3235689))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1679@01 3235689))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689))))
(push) ; 10
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2))
(pop) ; 10
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2)))
; [eval] __prim__int___box__(0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1679@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1679@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689))
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 8
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1679@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_36 && !bypass2_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5690 | !(p2_36@1617@01) | live]
; [else-branch: 5690 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5690 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5690 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5691 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5691 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5691 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(i_1_0), 2))
; [eval] int___mod__(int___unbox__(i_1_0), 2)
; [eval] int___unbox__(i_1_0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1682@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1682@01)))
(push) ; 10
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2))
(pop) ; 10
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2)))
; [eval] __prim__int___box__(0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1682@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1682@01)
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 8
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2)) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1682@01) 2)) (__prim__int___box__ $Snap.unit 0))))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5692 | !(p1_36@1616@01) | live]
; [else-branch: 5692 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5692 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5692 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5693 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5693 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5693 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5694 | True | live]
; [else-branch: 5694 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5694 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5695 | True | live]
; [else-branch: 5695 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5695 | True]
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 14
; [then-branch: 5696 | False | live]
; [else-branch: 5696 | True | live]
(push) ; 15
; [then-branch: 5696 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 5696 | True]
; [eval] perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_164)) == none
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 16
; [then-branch: 5697 | False | live]
; [else-branch: 5697 | True | live]
(push) ; 17
; [then-branch: 5697 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 5697 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 18
; [then-branch: 5698 | False | live]
; [else-branch: 5698 | True | live]
(push) ; 19
; [then-branch: 5698 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 5698 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 20
; [then-branch: 5699 | False | live]
; [else-branch: 5699 | True | live]
(push) ; 21
; [then-branch: 5699 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 5699 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 22
; [then-branch: 5700 | False | live]
; [else-branch: 5700 | True | live]
(push) ; 23
; [then-branch: 5700 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 5700 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5701 | !(p2_36@1617@01) | live]
; [else-branch: 5701 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5701 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5701 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5702 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5702 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5702 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5703 | True | live]
; [else-branch: 5703 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5703 | True]
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5704 | True | live]
; [else-branch: 5704 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5704 | True]
; [eval] _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 14
; [then-branch: 5705 | False | live]
; [else-branch: 5705 | True | live]
(push) ; 15
; [then-branch: 5705 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 5705 | True]
; [eval] perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_164_0)) == none
; [eval] perm(MustTerminate_0(_cthread_164_0))
(push) ; 16
; [then-branch: 5706 | False | live]
; [else-branch: 5706 | True | live]
(push) ; 17
; [then-branch: 5706 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 5706 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 18
; [then-branch: 5707 | False | live]
; [else-branch: 5707 | True | live]
(push) ; 19
; [then-branch: 5707 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 5707 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 20
; [then-branch: 5708 | False | live]
; [else-branch: 5708 | True | live]
(push) ; 21
; [then-branch: 5708 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 5708 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 22
; [then-branch: 5709 | False | live]
; [else-branch: 5709 | True | live]
(push) ; 23
; [then-branch: 5709 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 5709 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] p1_36 && !bypass1_7
(push) ; 8
; [then-branch: 5710 | !(p1_36@1616@01) | live]
; [else-branch: 5710 | p1_36@1616@01 | live]
(push) ; 9
; [then-branch: 5710 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5710 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5711 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5711 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5711 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5712 | True | live]
; [else-branch: 5712 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5712 | True]
; [eval] !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 12
; [then-branch: 5713 | False | dead]
; [else-branch: 5713 | True | live]
(push) ; 13
; [else-branch: 5713 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] p2_36 && !bypass2_7
(push) ; 8
; [then-branch: 5714 | !(p2_36@1617@01) | live]
; [else-branch: 5714 | p2_36@1617@01 | live]
(push) ; 9
; [then-branch: 5714 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 9
(push) ; 9
; [else-branch: 5714 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5715 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5715 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5715 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5716 | True | live]
; [else-branch: 5716 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5716 | True]
; [eval] !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_3
(push) ; 12
; [then-branch: 5717 | False | dead]
; [else-branch: 5717 | True | live]
(push) ; 13
; [else-branch: 5717 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] bypass1_7 ==> tmp1 == _loop_measures
(push) ; 8
; [then-branch: 5718 | bypass1_7@1685@01 | dead]
; [else-branch: 5718 | !(bypass1_7@1685@01) | live]
(push) ; 9
; [else-branch: 5718 | !(bypass1_7@1685@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_0 == i_1
(push) ; 8
; [then-branch: 5719 | bypass1_7@1685@01 | dead]
; [else-branch: 5719 | !(bypass1_7@1685@01) | live]
(push) ; 9
; [else-branch: 5719 | !(bypass1_7@1685@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_1 == _loop_check_before
(push) ; 8
; [then-branch: 5720 | bypass1_7@1685@01 | dead]
; [else-branch: 5720 | !(bypass1_7@1685@01) | live]
(push) ; 9
; [else-branch: 5720 | !(bypass1_7@1685@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_2 == break1
(push) ; 8
; [then-branch: 5721 | bypass1_7@1685@01 | dead]
; [else-branch: 5721 | !(bypass1_7@1685@01) | live]
(push) ; 9
; [else-branch: 5721 | !(bypass1_7@1685@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] bypass2_7 ==> tmp2 == _loop_measures_3
(push) ; 8
; [then-branch: 5722 | bypass2_7@1686@01 | dead]
; [else-branch: 5722 | !(bypass2_7@1686@01) | live]
(push) ; 9
; [else-branch: 5722 | !(bypass2_7@1686@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_0 == i_1_0
(push) ; 8
; [then-branch: 5723 | bypass2_7@1686@01 | dead]
; [else-branch: 5723 | !(bypass2_7@1686@01) | live]
(push) ; 9
; [else-branch: 5723 | !(bypass2_7@1686@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_1 == _loop_check_before_3
(push) ; 8
; [then-branch: 5724 | bypass2_7@1686@01 | dead]
; [else-branch: 5724 | !(bypass2_7@1686@01) | live]
(push) ; 9
; [else-branch: 5724 | !(bypass2_7@1686@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_2 == break2
(push) ; 8
; [then-branch: 5725 | bypass2_7@1686@01 | dead]
; [else-branch: 5725 | !(bypass2_7@1686@01) | live]
(push) ; 9
; [else-branch: 5725 | !(bypass2_7@1686@01)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 8
(assert (= $t@1723@01 ($Snap.combine ($Snap.first $t@1723@01) ($Snap.second $t@1723@01))))
(assert (= ($Snap.first $t@1723@01) $Snap.unit))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (<= _residue_164@1622@01 _residue_168@1652@01)))
(assert (=
  ($Snap.second $t@1723@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1723@01))
    ($Snap.second ($Snap.second $t@1723@01)))))
(assert (= ($Snap.first ($Snap.second $t@1723@01)) $Snap.unit))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (<= _residue_164_0@1623@01 _residue_168_0@1653@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1723@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1723@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1723@01))) $Snap.unit))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))
  $Snap.unit))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))
  $Snap.unit))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0))))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))
  $Snap.unit))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))
  $Snap.unit))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7))))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))
  $Snap.unit))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))
  $Snap.unit))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))
  $Snap.unit))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1723@01)))))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 9
; [eval] p1_36 && (!ret1_2 && (!break1 && !except1_6) && (!bypass1_7 && true)) || p2_36 && (!ret2_2 && (!break2 && !except2_6) && (!bypass2_7 && true))
; [eval] p1_36 && (!ret1_2 && (!break1 && !except1_6) && (!bypass1_7 && true))
(push) ; 10
; [then-branch: 5726 | !(p1_36@1616@01) | live]
; [else-branch: 5726 | p1_36@1616@01 | live]
(push) ; 11
; [then-branch: 5726 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5726 | p1_36@1616@01]
; [eval] !ret1_2
(push) ; 12
; [then-branch: 5727 | ret1_2@1712@01 | live]
; [else-branch: 5727 | !(ret1_2@1712@01) | live]
(push) ; 13
; [then-branch: 5727 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 13
(push) ; 13
; [else-branch: 5727 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 14
; [then-branch: 5728 | break1@1697@01 | live]
; [else-branch: 5728 | !(break1@1697@01) | live]
(push) ; 15
; [then-branch: 5728 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5728 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(push) ; 16
; [then-branch: 5729 | except1_6@1715@01 | live]
; [else-branch: 5729 | !(except1_6@1715@01) | live]
(push) ; 17
; [then-branch: 5729 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5729 | !(except1_6@1715@01)]
(assert (not except1_6@1715@01))
; [eval] !bypass1_7
(push) ; 18
; [then-branch: 5730 | bypass1_7@1685@01 | live]
; [else-branch: 5730 | !(bypass1_7@1685@01) | live]
(push) ; 19
; [then-branch: 5730 | bypass1_7@1685@01]
(assert bypass1_7@1685@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5730 | !(bypass1_7@1685@01)]
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_7@1685@01) bypass1_7@1685@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_6@1715@01)
  (and (not except1_6@1715@01) (or (not bypass1_7@1685@01) bypass1_7@1685@01))))
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and
    (not break1@1697@01)
    (=>
      (not except1_6@1715@01)
      (and
        (not except1_6@1715@01)
        (or (not bypass1_7@1685@01) bypass1_7@1685@01)))
    (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (not ret1_2@1712@01)
    (=>
      (not break1@1697@01)
      (and
        (not break1@1697@01)
        (=>
          (not except1_6@1715@01)
          (and
            (not except1_6@1715@01)
            (or (not bypass1_7@1685@01) bypass1_7@1685@01)))
        (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_36@1616@01
  (and
    (=>
      (not ret1_2@1712@01)
      (and
        (not ret1_2@1712@01)
        (=>
          (not break1@1697@01)
          (and
            (not break1@1697@01)
            (=>
              (not except1_6@1715@01)
              (and
                (not except1_6@1715@01)
                (or (not bypass1_7@1685@01) bypass1_7@1685@01)))
            (or (not except1_6@1715@01) except1_6@1715@01)))
        (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(push) ; 10
; [then-branch: 5731 | p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01) | live]
; [else-branch: 5731 | !(p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01)) | live]
(push) ; 11
; [then-branch: 5731 | p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01)]
(assert (and
  p1_36@1616@01
  (and
    (not ret1_2@1712@01)
    (and
      (not break1@1697@01)
      (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
(pop) ; 11
(push) ; 11
; [else-branch: 5731 | !(p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01))]
(assert (not
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))))
; [eval] p2_36 && (!ret2_2 && (!break2 && !except2_6) && (!bypass2_7 && true))
(push) ; 12
; [then-branch: 5732 | !(p2_36@1617@01) | live]
; [else-branch: 5732 | p2_36@1617@01 | live]
(push) ; 13
; [then-branch: 5732 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5732 | p2_36@1617@01]
; [eval] !ret2_2
(push) ; 14
; [then-branch: 5733 | ret2_2@1717@01 | live]
; [else-branch: 5733 | !(ret2_2@1717@01) | live]
(push) ; 15
; [then-branch: 5733 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5733 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 16
; [then-branch: 5734 | break2@1698@01 | live]
; [else-branch: 5734 | !(break2@1698@01) | live]
(push) ; 17
; [then-branch: 5734 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5734 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(push) ; 18
; [then-branch: 5735 | except2_6@1720@01 | live]
; [else-branch: 5735 | !(except2_6@1720@01) | live]
(push) ; 19
; [then-branch: 5735 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5735 | !(except2_6@1720@01)]
(assert (not except2_6@1720@01))
; [eval] !bypass2_7
(push) ; 20
; [then-branch: 5736 | bypass2_7@1686@01 | live]
; [else-branch: 5736 | !(bypass2_7@1686@01) | live]
(push) ; 21
; [then-branch: 5736 | bypass2_7@1686@01]
(assert bypass2_7@1686@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5736 | !(bypass2_7@1686@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_7@1686@01) bypass2_7@1686@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_6@1720@01)
  (and (not except2_6@1720@01) (or (not bypass2_7@1686@01) bypass2_7@1686@01))))
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and
    (not break2@1698@01)
    (=>
      (not except2_6@1720@01)
      (and
        (not except2_6@1720@01)
        (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
    (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (not ret2_2@1717@01)
    (=>
      (not break2@1698@01)
      (and
        (not break2@1698@01)
        (=>
          (not except2_6@1720@01)
          (and
            (not except2_6@1720@01)
            (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
        (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_36@1617@01
  (and
    (=>
      (not ret2_2@1717@01)
      (and
        (not ret2_2@1717@01)
        (=>
          (not break2@1698@01)
          (and
            (not break2@1698@01)
            (=>
              (not except2_6@1720@01)
              (and
                (not except2_6@1720@01)
                (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
            (or (not except2_6@1720@01) except2_6@1720@01)))
        (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))
  (and
    p1_36@1616@01
    (not ret1_2@1712@01)
    (not break1@1697@01)
    (not except1_6@1715@01)
    (not bypass1_7@1685@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1_36@1616@01
      (and
        (not ret1_2@1712@01)
        (and
          (not break1@1697@01)
          (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
  (and
    (not
      (and
        p1_36@1616@01
        (and
          (not ret1_2@1712@01)
          (and
            (not break1@1697@01)
            (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
    (=>
      p2_36@1617@01
      (and
        (=>
          (not ret2_2@1717@01)
          (and
            (not ret2_2@1717@01)
            (=>
              (not break2@1698@01)
              (and
                (not break2@1698@01)
                (=>
                  (not except2_6@1720@01)
                  (and
                    (not except2_6@1720@01)
                    (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
                (or (not except2_6@1720@01) except2_6@1720@01)))
            (or (not break2@1698@01) break2@1698@01)))
        (or (not ret2_2@1717@01) ret2_2@1717@01))))))
(assert (or
  (not
    (and
      p1_36@1616@01
      (and
        (not ret1_2@1712@01)
        (and
          (not break1@1697@01)
          (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))))
(pop) ; 9
(push) ; 9
; [eval] !(p1_36 && (!ret1_2 && (!break1 && !except1_6) && (!bypass1_7 && true)) || p2_36 && (!ret2_2 && (!break2 && !except2_6) && (!bypass2_7 && true)))
; [eval] p1_36 && (!ret1_2 && (!break1 && !except1_6) && (!bypass1_7 && true)) || p2_36 && (!ret2_2 && (!break2 && !except2_6) && (!bypass2_7 && true))
; [eval] p1_36 && (!ret1_2 && (!break1 && !except1_6) && (!bypass1_7 && true))
(push) ; 10
; [then-branch: 5737 | !(p1_36@1616@01) | live]
; [else-branch: 5737 | p1_36@1616@01 | live]
(push) ; 11
; [then-branch: 5737 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5737 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !ret1_2
(push) ; 12
; [then-branch: 5738 | ret1_2@1712@01 | live]
; [else-branch: 5738 | !(ret1_2@1712@01) | live]
(push) ; 13
; [then-branch: 5738 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 13
(push) ; 13
; [else-branch: 5738 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 14
; [then-branch: 5739 | break1@1697@01 | live]
; [else-branch: 5739 | !(break1@1697@01) | live]
(push) ; 15
; [then-branch: 5739 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5739 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(push) ; 16
; [then-branch: 5740 | except1_6@1715@01 | live]
; [else-branch: 5740 | !(except1_6@1715@01) | live]
(push) ; 17
; [then-branch: 5740 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5740 | !(except1_6@1715@01)]
(assert (not except1_6@1715@01))
; [eval] !bypass1_7
(push) ; 18
; [then-branch: 5741 | bypass1_7@1685@01 | live]
; [else-branch: 5741 | !(bypass1_7@1685@01) | live]
(push) ; 19
; [then-branch: 5741 | bypass1_7@1685@01]
(assert bypass1_7@1685@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5741 | !(bypass1_7@1685@01)]
(assert (not bypass1_7@1685@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_7@1685@01) bypass1_7@1685@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_6@1715@01)
  (and (not except1_6@1715@01) (or (not bypass1_7@1685@01) bypass1_7@1685@01))))
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and
    (not break1@1697@01)
    (=>
      (not except1_6@1715@01)
      (and
        (not except1_6@1715@01)
        (or (not bypass1_7@1685@01) bypass1_7@1685@01)))
    (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (not ret1_2@1712@01)
    (=>
      (not break1@1697@01)
      (and
        (not break1@1697@01)
        (=>
          (not except1_6@1715@01)
          (and
            (not except1_6@1715@01)
            (or (not bypass1_7@1685@01) bypass1_7@1685@01)))
        (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_36@1616@01
  (and
    p1_36@1616@01
    (=>
      (not ret1_2@1712@01)
      (and
        (not ret1_2@1712@01)
        (=>
          (not break1@1697@01)
          (and
            (not break1@1697@01)
            (=>
              (not except1_6@1715@01)
              (and
                (not except1_6@1715@01)
                (or (not bypass1_7@1685@01) bypass1_7@1685@01)))
            (or (not except1_6@1715@01) except1_6@1715@01)))
        (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(push) ; 10
; [then-branch: 5742 | p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01) | live]
; [else-branch: 5742 | !(p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01)) | live]
(push) ; 11
; [then-branch: 5742 | p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01)]
(assert (and
  p1_36@1616@01
  (and
    (not ret1_2@1712@01)
    (and
      (not break1@1697@01)
      (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
(pop) ; 11
(push) ; 11
; [else-branch: 5742 | !(p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01))]
(assert (not
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))))
; [eval] p2_36 && (!ret2_2 && (!break2 && !except2_6) && (!bypass2_7 && true))
(push) ; 12
; [then-branch: 5743 | !(p2_36@1617@01) | live]
; [else-branch: 5743 | p2_36@1617@01 | live]
(push) ; 13
; [then-branch: 5743 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5743 | p2_36@1617@01]
; [eval] !ret2_2
(push) ; 14
; [then-branch: 5744 | ret2_2@1717@01 | live]
; [else-branch: 5744 | !(ret2_2@1717@01) | live]
(push) ; 15
; [then-branch: 5744 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5744 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 16
; [then-branch: 5745 | break2@1698@01 | live]
; [else-branch: 5745 | !(break2@1698@01) | live]
(push) ; 17
; [then-branch: 5745 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5745 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(push) ; 18
; [then-branch: 5746 | except2_6@1720@01 | live]
; [else-branch: 5746 | !(except2_6@1720@01) | live]
(push) ; 19
; [then-branch: 5746 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5746 | !(except2_6@1720@01)]
(assert (not except2_6@1720@01))
; [eval] !bypass2_7
(push) ; 20
; [then-branch: 5747 | bypass2_7@1686@01 | live]
; [else-branch: 5747 | !(bypass2_7@1686@01) | live]
(push) ; 21
; [then-branch: 5747 | bypass2_7@1686@01]
(assert bypass2_7@1686@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5747 | !(bypass2_7@1686@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_7@1686@01) bypass2_7@1686@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_6@1720@01)
  (and (not except2_6@1720@01) (or (not bypass2_7@1686@01) bypass2_7@1686@01))))
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and
    (not break2@1698@01)
    (=>
      (not except2_6@1720@01)
      (and
        (not except2_6@1720@01)
        (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
    (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (not ret2_2@1717@01)
    (=>
      (not break2@1698@01)
      (and
        (not break2@1698@01)
        (=>
          (not except2_6@1720@01)
          (and
            (not except2_6@1720@01)
            (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
        (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_36@1617@01
  (and
    (=>
      (not ret2_2@1717@01)
      (and
        (not ret2_2@1717@01)
        (=>
          (not break2@1698@01)
          (and
            (not break2@1698@01)
            (=>
              (not except2_6@1720@01)
              (and
                (not except2_6@1720@01)
                (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
            (or (not except2_6@1720@01) except2_6@1720@01)))
        (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))
  (and
    p1_36@1616@01
    (not ret1_2@1712@01)
    (not break1@1697@01)
    (not except1_6@1715@01)
    (not bypass1_7@1685@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1_36@1616@01
      (and
        (not ret1_2@1712@01)
        (and
          (not break1@1697@01)
          (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
  (and
    (not
      (and
        p1_36@1616@01
        (and
          (not ret1_2@1712@01)
          (and
            (not break1@1697@01)
            (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
    (=>
      p2_36@1617@01
      (and
        (=>
          (not ret2_2@1717@01)
          (and
            (not ret2_2@1717@01)
            (=>
              (not break2@1698@01)
              (and
                (not break2@1698@01)
                (=>
                  (not except2_6@1720@01)
                  (and
                    (not except2_6@1720@01)
                    (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
                (or (not except2_6@1720@01) except2_6@1720@01)))
            (or (not break2@1698@01) break2@1698@01)))
        (or (not ret2_2@1717@01) ret2_2@1717@01))))))
(assert (or
  (not
    (and
      p1_36@1616@01
      (and
        (not ret1_2@1712@01)
        (and
          (not break1@1697@01)
          (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))))
(pop) ; 9
; Loop head block: Follow loop-internal edges
; [eval] p1_36 && (!ret1_2 && (!break1 && !except1_6) && (!bypass1_7 && true)) || p2_36 && (!ret2_2 && (!break2 && !except2_6) && (!bypass2_7 && true))
; [eval] p1_36 && (!ret1_2 && (!break1 && !except1_6) && (!bypass1_7 && true))
(push) ; 9
; [then-branch: 5748 | !(p1_36@1616@01) | live]
; [else-branch: 5748 | p1_36@1616@01 | live]
(push) ; 10
; [then-branch: 5748 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 10
(push) ; 10
; [else-branch: 5748 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !ret1_2
(push) ; 11
; [then-branch: 5749 | ret1_2@1712@01 | live]
; [else-branch: 5749 | !(ret1_2@1712@01) | live]
(push) ; 12
; [then-branch: 5749 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 12
(push) ; 12
; [else-branch: 5749 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 13
; [then-branch: 5750 | break1@1697@01 | live]
; [else-branch: 5750 | !(break1@1697@01) | live]
(push) ; 14
; [then-branch: 5750 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 14
(push) ; 14
; [else-branch: 5750 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(push) ; 15
; [then-branch: 5751 | except1_6@1715@01 | live]
; [else-branch: 5751 | !(except1_6@1715@01) | live]
(push) ; 16
; [then-branch: 5751 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 16
(push) ; 16
; [else-branch: 5751 | !(except1_6@1715@01)]
(assert (not except1_6@1715@01))
; [eval] !bypass1_7
(push) ; 17
; [then-branch: 5752 | bypass1_7@1685@01 | live]
; [else-branch: 5752 | !(bypass1_7@1685@01) | live]
(push) ; 18
; [then-branch: 5752 | bypass1_7@1685@01]
(assert bypass1_7@1685@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5752 | !(bypass1_7@1685@01)]
(assert (not bypass1_7@1685@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_7@1685@01) bypass1_7@1685@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_6@1715@01)
  (and (not except1_6@1715@01) (or (not bypass1_7@1685@01) bypass1_7@1685@01))))
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and
    (not break1@1697@01)
    (=>
      (not except1_6@1715@01)
      (and
        (not except1_6@1715@01)
        (or (not bypass1_7@1685@01) bypass1_7@1685@01)))
    (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (not ret1_2@1712@01)
    (=>
      (not break1@1697@01)
      (and
        (not break1@1697@01)
        (=>
          (not except1_6@1715@01)
          (and
            (not except1_6@1715@01)
            (or (not bypass1_7@1685@01) bypass1_7@1685@01)))
        (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_36@1616@01
  (and
    p1_36@1616@01
    (=>
      (not ret1_2@1712@01)
      (and
        (not ret1_2@1712@01)
        (=>
          (not break1@1697@01)
          (and
            (not break1@1697@01)
            (=>
              (not except1_6@1715@01)
              (and
                (not except1_6@1715@01)
                (or (not bypass1_7@1685@01) bypass1_7@1685@01)))
            (or (not except1_6@1715@01) except1_6@1715@01)))
        (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(push) ; 9
; [then-branch: 5753 | p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01) | live]
; [else-branch: 5753 | !(p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01)) | live]
(push) ; 10
; [then-branch: 5753 | p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01)]
(assert (and
  p1_36@1616@01
  (and
    (not ret1_2@1712@01)
    (and
      (not break1@1697@01)
      (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
(pop) ; 10
(push) ; 10
; [else-branch: 5753 | !(p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01))]
(assert (not
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))))
; [eval] p2_36 && (!ret2_2 && (!break2 && !except2_6) && (!bypass2_7 && true))
(push) ; 11
; [then-branch: 5754 | !(p2_36@1617@01) | live]
; [else-branch: 5754 | p2_36@1617@01 | live]
(push) ; 12
; [then-branch: 5754 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 12
(push) ; 12
; [else-branch: 5754 | p2_36@1617@01]
; [eval] !ret2_2
(push) ; 13
; [then-branch: 5755 | ret2_2@1717@01 | live]
; [else-branch: 5755 | !(ret2_2@1717@01) | live]
(push) ; 14
; [then-branch: 5755 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 14
(push) ; 14
; [else-branch: 5755 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 15
; [then-branch: 5756 | break2@1698@01 | live]
; [else-branch: 5756 | !(break2@1698@01) | live]
(push) ; 16
; [then-branch: 5756 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 16
(push) ; 16
; [else-branch: 5756 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(push) ; 17
; [then-branch: 5757 | except2_6@1720@01 | live]
; [else-branch: 5757 | !(except2_6@1720@01) | live]
(push) ; 18
; [then-branch: 5757 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5757 | !(except2_6@1720@01)]
(assert (not except2_6@1720@01))
; [eval] !bypass2_7
(push) ; 19
; [then-branch: 5758 | bypass2_7@1686@01 | live]
; [else-branch: 5758 | !(bypass2_7@1686@01) | live]
(push) ; 20
; [then-branch: 5758 | bypass2_7@1686@01]
(assert bypass2_7@1686@01)
(pop) ; 20
(push) ; 20
; [else-branch: 5758 | !(bypass2_7@1686@01)]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_7@1686@01) bypass2_7@1686@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_6@1720@01)
  (and (not except2_6@1720@01) (or (not bypass2_7@1686@01) bypass2_7@1686@01))))
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and
    (not break2@1698@01)
    (=>
      (not except2_6@1720@01)
      (and
        (not except2_6@1720@01)
        (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
    (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (not ret2_2@1717@01)
    (=>
      (not break2@1698@01)
      (and
        (not break2@1698@01)
        (=>
          (not except2_6@1720@01)
          (and
            (not except2_6@1720@01)
            (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
        (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_36@1617@01
  (and
    (=>
      (not ret2_2@1717@01)
      (and
        (not ret2_2@1717@01)
        (=>
          (not break2@1698@01)
          (and
            (not break2@1698@01)
            (=>
              (not except2_6@1720@01)
              (and
                (not except2_6@1720@01)
                (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
            (or (not except2_6@1720@01) except2_6@1720@01)))
        (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))
  (and
    p1_36@1616@01
    (not ret1_2@1712@01)
    (not break1@1697@01)
    (not except1_6@1715@01)
    (not bypass1_7@1685@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1_36@1616@01
      (and
        (not ret1_2@1712@01)
        (and
          (not break1@1697@01)
          (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
  (and
    (not
      (and
        p1_36@1616@01
        (and
          (not ret1_2@1712@01)
          (and
            (not break1@1697@01)
            (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
    (=>
      p2_36@1617@01
      (and
        (=>
          (not ret2_2@1717@01)
          (and
            (not ret2_2@1717@01)
            (=>
              (not break2@1698@01)
              (and
                (not break2@1698@01)
                (=>
                  (not except2_6@1720@01)
                  (and
                    (not except2_6@1720@01)
                    (or (not bypass2_7@1686@01) bypass2_7@1686@01)))
                (or (not except2_6@1720@01) except2_6@1720@01)))
            (or (not break2@1698@01) break2@1698@01)))
        (or (not ret2_2@1717@01) ret2_2@1717@01))))))
(assert (or
  (not
    (and
      p1_36@1616@01
      (and
        (not ret1_2@1712@01)
        (and
          (not break1@1697@01)
          (and (not except1_6@1715@01) (not bypass1_7@1685@01))))))
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1_36@1616@01
      (and
        (not ret1_2@1712@01)
        (and
          (not break1@1697@01)
          (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))
    (and
      p2_36@1617@01
      (and
        (not ret2_2@1717@01)
        (and
          (not break2@1698@01)
          (and (not except2_6@1720@01) (not bypass2_7@1686@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (or
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))
  (and
    p2_36@1617@01
    (and
      (not ret2_2@1717@01)
      (and
        (not break2@1698@01)
        (and (not except2_6@1720@01) (not bypass2_7@1686@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5759 | p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01) || p2_36@1617@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) && !(bypass2_7@1686@01) | live]
; [else-branch: 5759 | !(p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01) || p2_36@1617@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) && !(bypass2_7@1686@01)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5759 | p1_36@1616@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) && !(bypass1_7@1685@01) || p2_36@1617@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) && !(bypass2_7@1686@01)]
(assert (or
  (and
    p1_36@1616@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and (not except1_6@1715@01) (not bypass1_7@1685@01)))))
  (and
    p2_36@1617@01
    (and
      (not ret2_2@1717@01)
      (and
        (not break2@1698@01)
        (and (not except2_6@1720@01) (not bypass2_7@1686@01)))))))
; [exec]
; var p1_38: Bool
(declare-const p1_38@1724@01 Bool)
; [exec]
; var p2_38: Bool
(declare-const p2_38@1725@01 Bool)
; [exec]
; var p3_17: Bool
(declare-const p3_17@1726@01 Bool)
; [exec]
; var p4_17: Bool
(declare-const p4_17@1727@01 Bool)
; [exec]
; var bypass1_8: Bool
(declare-const bypass1_8@1728@01 Bool)
; [exec]
; var bypass2_8: Bool
(declare-const bypass2_8@1729@01 Bool)
; [exec]
; var oldret1_3: Bool
(declare-const oldret1_3@1730@01 Bool)
; [exec]
; var oldret2_3: Bool
(declare-const oldret2_3@1731@01 Bool)
; [exec]
; var oldbreak1_0: Bool
(declare-const oldbreak1_0@1732@01 Bool)
; [exec]
; var oldbreak2_0: Bool
(declare-const oldbreak2_0@1733@01 Bool)
; [exec]
; var oldexcept1_3: Bool
(declare-const oldexcept1_3@1734@01 Bool)
; [exec]
; var oldexcept2_3: Bool
(declare-const oldexcept2_3@1735@01 Bool)
; [exec]
; var thisexcept1_7: Bool
(declare-const thisexcept1_7@1736@01 Bool)
; [exec]
; var thisexcept2_7: Bool
(declare-const thisexcept2_7@1737@01 Bool)
; [exec]
; var tmp_ret1_3: Bool
(declare-const tmp_ret1_3@1738@01 Bool)
; [exec]
; var tmp_ret2_3: Bool
(declare-const tmp_ret2_3@1739@01 Bool)
; [exec]
; var tmp_break1_3: Bool
(declare-const tmp_break1_3@1740@01 Bool)
; [exec]
; var tmp_break2_3: Bool
(declare-const tmp_break2_3@1741@01 Bool)
; [exec]
; var tmp_cont1_3: Bool
(declare-const tmp_cont1_3@1742@01 Bool)
; [exec]
; var tmp_cont2_3: Bool
(declare-const tmp_cont2_3@1743@01 Bool)
; [exec]
; var tmp_except1_3: Bool
(declare-const tmp_except1_3@1744@01 Bool)
; [exec]
; var tmp_except2_3: Bool
(declare-const tmp_except2_3@1745@01 Bool)
; [exec]
; p1_37 := p1_36 && (!ret1_2 && (!break1 && !except1_6) && true)
; [eval] p1_36 && (!ret1_2 && (!break1 && !except1_6) && true)
(push) ; 10
; [then-branch: 5760 | !(p1_36@1616@01) | live]
; [else-branch: 5760 | p1_36@1616@01 | live]
(push) ; 11
; [then-branch: 5760 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5760 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !ret1_2
(push) ; 12
; [then-branch: 5761 | ret1_2@1712@01 | live]
; [else-branch: 5761 | !(ret1_2@1712@01) | live]
(push) ; 13
; [then-branch: 5761 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 13
(push) ; 13
; [else-branch: 5761 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 14
; [then-branch: 5762 | break1@1697@01 | live]
; [else-branch: 5762 | !(break1@1697@01) | live]
(push) ; 15
; [then-branch: 5762 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5762 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(push) ; 16
; [then-branch: 5763 | except1_6@1715@01 | live]
; [else-branch: 5763 | !(except1_6@1715@01) | live]
(push) ; 17
; [then-branch: 5763 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5763 | !(except1_6@1715@01)]
(assert (not except1_6@1715@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and (not break1@1697@01) (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (not ret1_2@1712@01)
    (=>
      (not break1@1697@01)
      (and (not break1@1697@01) (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_36@1616@01
  (and
    p1_36@1616@01
    (=>
      (not ret1_2@1712@01)
      (and
        (not ret1_2@1712@01)
        (=>
          (not break1@1697@01)
          (and
            (not break1@1697@01)
            (or (not except1_6@1715@01) except1_6@1715@01)))
        (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(declare-const p1_37@1746@01 Bool)
(assert (=
  p1_37@1746@01
  (and
    p1_36@1616@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
; [exec]
; p2_37 := p2_36 && (!ret2_2 && (!break2 && !except2_6) && true)
; [eval] p2_36 && (!ret2_2 && (!break2 && !except2_6) && true)
(push) ; 10
; [then-branch: 5764 | !(p2_36@1617@01) | live]
; [else-branch: 5764 | p2_36@1617@01 | live]
(push) ; 11
; [then-branch: 5764 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5764 | p2_36@1617@01]
; [eval] !ret2_2
(push) ; 12
; [then-branch: 5765 | ret2_2@1717@01 | live]
; [else-branch: 5765 | !(ret2_2@1717@01) | live]
(push) ; 13
; [then-branch: 5765 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 13
(push) ; 13
; [else-branch: 5765 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 14
; [then-branch: 5766 | break2@1698@01 | live]
; [else-branch: 5766 | !(break2@1698@01) | live]
(push) ; 15
; [then-branch: 5766 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5766 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(push) ; 16
; [then-branch: 5767 | except2_6@1720@01 | live]
; [else-branch: 5767 | !(except2_6@1720@01) | live]
(push) ; 17
; [then-branch: 5767 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5767 | !(except2_6@1720@01)]
(assert (not except2_6@1720@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and (not break2@1698@01) (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (not ret2_2@1717@01)
    (=>
      (not break2@1698@01)
      (and (not break2@1698@01) (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_36@1617@01
  (and
    (=>
      (not ret2_2@1717@01)
      (and
        (not ret2_2@1717@01)
        (=>
          (not break2@1698@01)
          (and
            (not break2@1698@01)
            (or (not except2_6@1720@01) except2_6@1720@01)))
        (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(declare-const p2_37@1747@01 Bool)
(assert (=
  p2_37@1747@01
  (and
    p2_36@1617@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
; [exec]
; idle1 := p1_36 && (!ret1_2 && (!break1 && !except1_6) && !true)
; [eval] p1_36 && (!ret1_2 && (!break1 && !except1_6) && !true)
(push) ; 10
; [then-branch: 5768 | !(p1_36@1616@01) | live]
; [else-branch: 5768 | p1_36@1616@01 | live]
(push) ; 11
; [then-branch: 5768 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5768 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !ret1_2
(push) ; 12
; [then-branch: 5769 | ret1_2@1712@01 | live]
; [else-branch: 5769 | !(ret1_2@1712@01) | live]
(push) ; 13
; [then-branch: 5769 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 13
(push) ; 13
; [else-branch: 5769 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 14
; [then-branch: 5770 | break1@1697@01 | live]
; [else-branch: 5770 | !(break1@1697@01) | live]
(push) ; 15
; [then-branch: 5770 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5770 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(push) ; 16
; [then-branch: 5771 | except1_6@1715@01 | live]
; [else-branch: 5771 | !(except1_6@1715@01) | live]
(push) ; 17
; [then-branch: 5771 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5771 | !(except1_6@1715@01)]
(assert (not except1_6@1715@01))
; [eval] !true
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and (not break1@1697@01) (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (not ret1_2@1712@01)
    (=>
      (not break1@1697@01)
      (and (not break1@1697@01) (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [exec]
; idle2 := p2_36 && (!ret2_2 && (!break2 && !except2_6) && !true)
; [eval] p2_36 && (!ret2_2 && (!break2 && !except2_6) && !true)
(push) ; 10
; [then-branch: 5772 | !(p2_36@1617@01) | live]
; [else-branch: 5772 | p2_36@1617@01 | live]
(push) ; 11
; [then-branch: 5772 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5772 | p2_36@1617@01]
; [eval] !ret2_2
(push) ; 12
; [then-branch: 5773 | ret2_2@1717@01 | live]
; [else-branch: 5773 | !(ret2_2@1717@01) | live]
(push) ; 13
; [then-branch: 5773 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 13
(push) ; 13
; [else-branch: 5773 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 14
; [then-branch: 5774 | break2@1698@01 | live]
; [else-branch: 5774 | !(break2@1698@01) | live]
(push) ; 15
; [then-branch: 5774 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5774 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(push) ; 16
; [then-branch: 5775 | except2_6@1720@01 | live]
; [else-branch: 5775 | !(except2_6@1720@01) | live]
(push) ; 17
; [then-branch: 5775 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5775 | !(except2_6@1720@01)]
(assert (not except2_6@1720@01))
; [eval] !true
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and (not break2@1698@01) (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (not ret2_2@1717@01)
    (=>
      (not break2@1698@01)
      (and (not break2@1698@01) (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 10
; [then-branch: 5776 | !(p1_37@1746@01) | live]
; [else-branch: 5776 | p1_37@1746@01 | live]
(push) ; 11
; [then-branch: 5776 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5776 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 12
; [then-branch: 5777 | ret1_2@1712@01 | live]
; [else-branch: 5777 | !(ret1_2@1712@01) | live]
(push) ; 13
; [then-branch: 5777 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 13
(push) ; 13
; [else-branch: 5777 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 14
; [then-branch: 5778 | break1@1697@01 | live]
; [else-branch: 5778 | !(break1@1697@01) | live]
(push) ; 15
; [then-branch: 5778 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5778 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_37@1746@01
  (and
    p1_37@1746@01
    (=>
      (not ret1_2@1712@01)
      (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(assert (or p1_37@1746@01 (not p1_37@1746@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5779 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 5779 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 5779 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; _loop_measures := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 11
; [then-branch: 5780 | !(p2_37@1747@01) | live]
; [else-branch: 5780 | p2_37@1747@01 | live]
(push) ; 12
; [then-branch: 5780 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 12
(push) ; 12
; [else-branch: 5780 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 13
; [then-branch: 5781 | ret2_2@1717@01 | live]
; [else-branch: 5781 | !(ret2_2@1717@01) | live]
(push) ; 14
; [then-branch: 5781 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 14
(push) ; 14
; [else-branch: 5781 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 15
; [then-branch: 5782 | break2@1698@01 | live]
; [else-branch: 5782 | !(break2@1698@01) | live]
(push) ; 16
; [then-branch: 5782 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 16
(push) ; 16
; [else-branch: 5782 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_37@1747@01
  (and
    p2_37@1747@01
    (=>
      (not ret2_2@1717@01)
      (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(assert (or p2_37@1747@01 (not p2_37@1747@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5783 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 5783 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5783 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; _loop_measures_3 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_38 := p1_37 &&
;   (!ret1_2 && (!break1 && !except1_6) &&
;   int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6) && int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
(push) ; 12
; [then-branch: 5784 | !(p1_37@1746@01) | live]
; [else-branch: 5784 | p1_37@1746@01 | live]
(push) ; 13
; [then-branch: 5784 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5784 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 14
; [then-branch: 5785 | ret1_2@1712@01 | live]
; [else-branch: 5785 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 5785 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5785 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 16
; [then-branch: 5786 | break1@1697@01 | live]
; [else-branch: 5786 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 5786 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5786 | !(break1@1697@01)]
; [eval] !except1_6
(push) ; 18
; [then-branch: 5787 | except1_6@1715@01 | live]
; [else-branch: 5787 | !(except1_6@1715@01) | live]
(push) ; 19
; [then-branch: 5787 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5787 | !(except1_6@1715@01)]
; [eval] int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_6@1715@01)
  (and
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))))
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and
    (=>
      (not except1_6@1715@01)
      (and
        (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
    (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (=>
      (not break1@1697@01)
      (and
        (=>
          (not except1_6@1715@01)
          (and
            (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
        (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_37@1746@01
  (and
    (=>
      (not ret1_2@1712@01)
      (and
        (=>
          (not break1@1697@01)
          (and
            (=>
              (not except1_6@1715@01)
              (and
                (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
            (or (not except1_6@1715@01) except1_6@1715@01)))
        (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(declare-const p1_38@1748@01 Bool)
(assert (=
  p1_38@1748@01
  (and
    p1_37@1746@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and
          (not except1_6@1715@01)
          (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))))))
; [exec]
; p2_38 := p2_37 &&
;   (!ret2_2 && (!break2 && !except2_6) &&
;   int___gt__(int___unbox__(i_1_0), 5))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6) && int___gt__(int___unbox__(i_1_0), 5))
(push) ; 12
; [then-branch: 5788 | !(p2_37@1747@01) | live]
; [else-branch: 5788 | p2_37@1747@01 | live]
(push) ; 13
; [then-branch: 5788 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5788 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 14
; [then-branch: 5789 | ret2_2@1717@01 | live]
; [else-branch: 5789 | !(ret2_2@1717@01) | live]
(push) ; 15
; [then-branch: 5789 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5789 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 16
; [then-branch: 5790 | break2@1698@01 | live]
; [else-branch: 5790 | !(break2@1698@01) | live]
(push) ; 17
; [then-branch: 5790 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5790 | !(break2@1698@01)]
; [eval] !except2_6
(push) ; 18
; [then-branch: 5791 | except2_6@1720@01 | live]
; [else-branch: 5791 | !(except2_6@1720@01) | live]
(push) ; 19
; [then-branch: 5791 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5791 | !(except2_6@1720@01)]
; [eval] int___gt__(int___unbox__(i_1_0), 5)
; [eval] int___unbox__(i_1_0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_6@1720@01)
  (and
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))))
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and
    (=>
      (not except2_6@1720@01)
      (and
        (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
    (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (=>
      (not break2@1698@01)
      (and
        (=>
          (not except2_6@1720@01)
          (and
            (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
        (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_37@1747@01
  (and
    (=>
      (not ret2_2@1717@01)
      (and
        (=>
          (not break2@1698@01)
          (and
            (=>
              (not except2_6@1720@01)
              (and
                (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
            (or (not except2_6@1720@01) except2_6@1720@01)))
        (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(declare-const p2_38@1749@01 Bool)
(assert (=
  p2_38@1749@01
  (and
    p2_37@1747@01
    (and
      (not ret2_2@1717@01)
      (and
        (not break2@1698@01)
        (and
          (not except2_6@1720@01)
          (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))))))
; [exec]
; p3_17 := p1_37 &&
;   (!ret1_2 && (!break1 && !except1_6) &&
;   !int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6) && !int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
(push) ; 12
; [then-branch: 5792 | !(p1_37@1746@01) | live]
; [else-branch: 5792 | p1_37@1746@01 | live]
(push) ; 13
; [then-branch: 5792 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5792 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 14
; [then-branch: 5793 | ret1_2@1712@01 | live]
; [else-branch: 5793 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 5793 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5793 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 16
; [then-branch: 5794 | break1@1697@01 | live]
; [else-branch: 5794 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 5794 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5794 | !(break1@1697@01)]
; [eval] !except1_6
(push) ; 18
; [then-branch: 5795 | except1_6@1715@01 | live]
; [else-branch: 5795 | !(except1_6@1715@01) | live]
(push) ; 19
; [then-branch: 5795 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5795 | !(except1_6@1715@01)]
; [eval] !int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_6@1715@01)
  (and
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))))
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and
    (=>
      (not except1_6@1715@01)
      (and
        (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
    (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (=>
      (not break1@1697@01)
      (and
        (=>
          (not except1_6@1715@01)
          (and
            (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
        (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(declare-const p3_17@1750@01 Bool)
(assert (=
  p3_17@1750@01
  (and
    p1_37@1746@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and
          (not except1_6@1715@01)
          (not
            (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))))))))
; [exec]
; p4_17 := p2_37 &&
;   (!ret2_2 && (!break2 && !except2_6) &&
;   !int___gt__(int___unbox__(i_1_0), 5))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6) && !int___gt__(int___unbox__(i_1_0), 5))
(push) ; 12
; [then-branch: 5796 | !(p2_37@1747@01) | live]
; [else-branch: 5796 | p2_37@1747@01 | live]
(push) ; 13
; [then-branch: 5796 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5796 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 14
; [then-branch: 5797 | ret2_2@1717@01 | live]
; [else-branch: 5797 | !(ret2_2@1717@01) | live]
(push) ; 15
; [then-branch: 5797 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5797 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 16
; [then-branch: 5798 | break2@1698@01 | live]
; [else-branch: 5798 | !(break2@1698@01) | live]
(push) ; 17
; [then-branch: 5798 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5798 | !(break2@1698@01)]
; [eval] !except2_6
(push) ; 18
; [then-branch: 5799 | except2_6@1720@01 | live]
; [else-branch: 5799 | !(except2_6@1720@01) | live]
(push) ; 19
; [then-branch: 5799 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5799 | !(except2_6@1720@01)]
; [eval] !int___gt__(int___unbox__(i_1_0), 5)
; [eval] int___gt__(int___unbox__(i_1_0), 5)
; [eval] int___unbox__(i_1_0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_6@1720@01)
  (and
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))))
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and
    (=>
      (not except2_6@1720@01)
      (and
        (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
    (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (=>
      (not break2@1698@01)
      (and
        (=>
          (not except2_6@1720@01)
          (and
            (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
        (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(declare-const p4_17@1751@01 Bool)
(assert (=
  p4_17@1751@01
  (and
    p2_37@1747@01
    (and
      (not ret2_2@1717@01)
      (and
        (not break2@1698@01)
        (and
          (not except2_6@1720@01)
          (not
            (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))))))))
; [eval] p1_38 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 12
; [then-branch: 5800 | !(p1_38@1748@01) | live]
; [else-branch: 5800 | p1_38@1748@01 | live]
(push) ; 13
; [then-branch: 5800 | !(p1_38@1748@01)]
(assert (not p1_38@1748@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5800 | p1_38@1748@01]
(assert p1_38@1748@01)
; [eval] !ret1_2
(push) ; 14
; [then-branch: 5801 | ret1_2@1712@01 | live]
; [else-branch: 5801 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 5801 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 5801 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 16
; [then-branch: 5802 | break1@1697@01 | live]
; [else-branch: 5802 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 5802 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5802 | !(break1@1697@01)]
; [eval] !except1_6
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01)))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_38@1748@01
  (and
    p1_38@1748@01
    (=> (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(assert (or p1_38@1748@01 (not p1_38@1748@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    p1_38@1748@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  p1_38@1748@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5803 | p1_38@1748@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 5803 | !(p1_38@1748@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 5803 | p1_38@1748@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_38@1748@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; break1 := true
; [eval] p2_38 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 13
; [then-branch: 5804 | !(p2_38@1749@01) | live]
; [else-branch: 5804 | p2_38@1749@01 | live]
(push) ; 14
; [then-branch: 5804 | !(p2_38@1749@01)]
(assert (not p2_38@1749@01))
(pop) ; 14
(push) ; 14
; [else-branch: 5804 | p2_38@1749@01]
(assert p2_38@1749@01)
; [eval] !ret2_2
(push) ; 15
; [then-branch: 5805 | ret2_2@1717@01 | live]
; [else-branch: 5805 | !(ret2_2@1717@01) | live]
(push) ; 16
; [then-branch: 5805 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 16
(push) ; 16
; [else-branch: 5805 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 17
; [then-branch: 5806 | break2@1698@01 | live]
; [else-branch: 5806 | !(break2@1698@01) | live]
(push) ; 18
; [then-branch: 5806 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5806 | !(break2@1698@01)]
; [eval] !except2_6
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=> (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_38@1749@01
  (and
    p2_38@1749@01
    (=> (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(assert (or p2_38@1749@01 (not p2_38@1749@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    p2_38@1749@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and
  p2_38@1749@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5807 | p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 5807 | !(p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5807 | p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_38@1749@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; break2 := true
; [exec]
; bypass1_8 := !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 5808 | !(p1_37@1746@01) | live]
; [else-branch: 5808 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 5808 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5808 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 16
; [then-branch: 5809 | ret1_2@1712@01 | live]
; [else-branch: 5809 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 5809 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5809 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p1_37@1746@01 (or (not ret1_2@1712@01) ret1_2@1712@01)))
; [exec]
; bypass2_8 := !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 14
; [then-branch: 5810 | !(p2_37@1747@01) | live]
; [else-branch: 5810 | p2_37@1747@01 | live]
(push) ; 15
; [then-branch: 5810 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5810 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 16
; [then-branch: 5811 | ret2_2@1717@01 | live]
; [else-branch: 5811 | !(ret2_2@1717@01) | live]
(push) ; 17
; [then-branch: 5811 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5811 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p2_37@1747@01 (or (not ret2_2@1717@01) ret2_2@1717@01)))
; [exec]
; oldret1_3 := ret1_2
; [exec]
; oldret2_3 := ret2_2
; [exec]
; oldbreak1_0 := break1
; [exec]
; oldbreak2_0 := break2
; [exec]
; oldexcept1_3 := except1_6
; [exec]
; oldexcept2_3 := except2_6
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 5812 | !(p1_37@1746@01) | live]
; [else-branch: 5812 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 5812 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5812 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 16
; [then-branch: 5813 | ret1_2@1712@01 | live]
; [else-branch: 5813 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 5813 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5813 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 5814 | False | dead]
; [else-branch: 5814 | True | live]
(push) ; 14
; [else-branch: 5814 | True]
(pop) ; 14
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 5815 | !(p1_37@1746@01) | live]
; [else-branch: 5815 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 5815 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5815 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 16
; [then-branch: 5816 | ret1_2@1712@01 | live]
; [else-branch: 5816 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 5816 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5816 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5817 | True | live]
; [else-branch: 5817 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5817 | True]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 5818 | !(p2_37@1747@01) | live]
; [else-branch: 5818 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 5818 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 5818 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 17
; [then-branch: 5819 | ret2_2@1717@01 | live]
; [else-branch: 5819 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 5819 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5819 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 5820 | False | dead]
; [else-branch: 5820 | True | live]
(push) ; 15
; [else-branch: 5820 | True]
(pop) ; 15
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 5821 | !(p2_37@1747@01) | live]
; [else-branch: 5821 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 5821 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 5821 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 17
; [then-branch: 5822 | ret2_2@1717@01 | live]
; [else-branch: 5822 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 5822 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5822 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5823 | True | live]
; [else-branch: 5823 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5823 | True]
; [exec]
; thisexcept1_7 := except1_6 && !bypass1_8
; [eval] except1_6 && !bypass1_8
(push) ; 16
; [then-branch: 5824 | !(except1_6@1715@01) | live]
; [else-branch: 5824 | except1_6@1715@01 | live]
(push) ; 17
; [then-branch: 5824 | !(except1_6@1715@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 5824 | except1_6@1715@01]
(assert except1_6@1715@01)
; [eval] !bypass1_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except1_6@1715@01 (not except1_6@1715@01)))
; [exec]
; thisexcept2_7 := except2_6 && !bypass2_8
; [eval] except2_6 && !bypass2_8
(push) ; 16
; [then-branch: 5825 | !(except2_6@1720@01) | live]
; [else-branch: 5825 | except2_6@1720@01 | live]
(push) ; 17
; [then-branch: 5825 | !(except2_6@1720@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 5825 | except2_6@1720@01]
(assert except2_6@1720@01)
; [eval] !bypass2_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except2_6@1720@01 (not except2_6@1720@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5826 | p1_37@1746@01 | live]
; [else-branch: 5826 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5826 | p1_37@1746@01]
; [exec]
; tmp_ret1_3 := ret1_2
; [exec]
; ret1_2 := oldret1_3
; [exec]
; tmp_break1_3 := break1
; [exec]
; break1 := oldbreak1_0
; [exec]
; tmp_except1_3 := except1_6
; [exec]
; except1_6 := oldexcept1_3
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5827 | p2_37@1747@01 | live]
; [else-branch: 5827 | !(p2_37@1747@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 5827 | p2_37@1747@01]
; [exec]
; tmp_ret2_3 := ret2_2
; [exec]
; ret2_2 := oldret2_3
; [exec]
; tmp_break2_3 := break2
; [exec]
; break2 := oldbreak2_0
; [exec]
; tmp_except2_3 := except2_6
; [exec]
; except2_6 := oldexcept2_3
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 5828 | !(p1_37@1746@01) | live]
; [else-branch: 5828 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 5828 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5828 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 20
; [then-branch: 5829 | ret1_2@1712@01 | live]
; [else-branch: 5829 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 5829 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5829 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 5830 | False | dead]
; [else-branch: 5830 | True | live]
(push) ; 18
; [else-branch: 5830 | True]
(pop) ; 18
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 5831 | !(p1_37@1746@01) | live]
; [else-branch: 5831 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 5831 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5831 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 20
; [then-branch: 5832 | ret1_2@1712@01 | live]
; [else-branch: 5832 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 5832 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5832 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5833 | True | live]
; [else-branch: 5833 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 5833 | True]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 5834 | !(p2_37@1747@01) | live]
; [else-branch: 5834 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 5834 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5834 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 21
; [then-branch: 5835 | ret2_2@1717@01 | live]
; [else-branch: 5835 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 5835 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5835 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 5836 | False | dead]
; [else-branch: 5836 | True | live]
(push) ; 19
; [else-branch: 5836 | True]
(pop) ; 19
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 5837 | !(p2_37@1747@01) | live]
; [else-branch: 5837 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 5837 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5837 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 21
; [then-branch: 5838 | ret2_2@1717@01 | live]
; [else-branch: 5838 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 5838 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5838 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5839 | True | live]
; [else-branch: 5839 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 5839 | True]
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5840 | p1_37@1746@01 | live]
; [else-branch: 5840 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5840 | p1_37@1746@01]
; [exec]
; ret1_2 := ret1_2 || tmp_ret1_3
; [eval] ret1_2 || tmp_ret1_3
(push) ; 21
; [then-branch: 5841 | ret1_2@1712@01 | live]
; [else-branch: 5841 | !(ret1_2@1712@01) | live]
(push) ; 22
; [then-branch: 5841 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5841 | !(ret1_2@1712@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
; [exec]
; break1 := break1 || tmp_break1_3
; [eval] break1 || tmp_break1_3
; [exec]
; except1_6 := except1_6 || tmp_except1_3
; [eval] except1_6 || tmp_except1_3
(push) ; 21
; [then-branch: 5842 | except1_6@1715@01 | live]
; [else-branch: 5842 | !(except1_6@1715@01) | live]
(push) ; 22
; [then-branch: 5842 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5842 | !(except1_6@1715@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5843 | p2_37@1747@01 | live]
; [else-branch: 5843 | !(p2_37@1747@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5843 | p2_37@1747@01]
; [exec]
; ret2_2 := ret2_2 || tmp_ret2_3
; [eval] ret2_2 || tmp_ret2_3
(push) ; 22
; [then-branch: 5844 | ret2_2@1717@01 | live]
; [else-branch: 5844 | !(ret2_2@1717@01) | live]
(push) ; 23
; [then-branch: 5844 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5844 | !(ret2_2@1717@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
; [exec]
; break2 := break2 || tmp_break2_3
; [eval] break2 || tmp_break2_3
; [exec]
; except2_6 := except2_6 || tmp_except2_3
; [eval] except2_6 || tmp_except2_3
(push) ; 22
; [then-branch: 5845 | except2_6@1720@01 | live]
; [else-branch: 5845 | !(except2_6@1720@01) | live]
(push) ; 23
; [then-branch: 5845 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5845 | !(except2_6@1720@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not except2_6@1720@01) except2_6@1720@01))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 5846 | !(p1_37@1746@01) | live]
; [else-branch: 5846 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 5846 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5846 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 24
; [then-branch: 5847 | ret1_2@1712@01 | live]
; [else-branch: 5847 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 5847 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5847 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 5848 | False | dead]
; [else-branch: 5848 | True | live]
(push) ; 22
; [else-branch: 5848 | True]
(pop) ; 22
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 5849 | !(p1_37@1746@01) | live]
; [else-branch: 5849 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 5849 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5849 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 24
; [then-branch: 5850 | ret1_2@1712@01 | live]
; [else-branch: 5850 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 5850 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5850 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5851 | True | live]
; [else-branch: 5851 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 5851 | True]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 5852 | !(p2_37@1747@01) | live]
; [else-branch: 5852 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 5852 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5852 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 25
; [then-branch: 5853 | ret2_2@1717@01 | live]
; [else-branch: 5853 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 5853 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5853 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 5854 | False | dead]
; [else-branch: 5854 | True | live]
(push) ; 23
; [else-branch: 5854 | True]
(pop) ; 23
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 5855 | !(p2_37@1747@01) | live]
; [else-branch: 5855 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 5855 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5855 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 25
; [then-branch: 5856 | ret2_2@1717@01 | live]
; [else-branch: 5856 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 5856 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5856 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5857 | True | live]
; [else-branch: 5857 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5857 | True]
; [exec]
; assert (p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==>
;   _loop_termination_flag ==> !true) &&
;   (p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==>
;   _loop_termination_flag_3 ==> !true)
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==> _loop_termination_flag ==> !true
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 24
; [then-branch: 5858 | !(p1_37@1746@01) | live]
; [else-branch: 5858 | p1_37@1746@01 | live]
(push) ; 25
; [then-branch: 5858 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5858 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 26
; [then-branch: 5859 | ret1_2@1712@01 | live]
; [else-branch: 5859 | !(ret1_2@1712@01) | live]
(push) ; 27
; [then-branch: 5859 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5859 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 5860 | False | dead]
; [else-branch: 5860 | True | live]
(push) ; 25
; [else-branch: 5860 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==> _loop_termination_flag_3 ==> !true
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 24
; [then-branch: 5861 | !(p2_37@1747@01) | live]
; [else-branch: 5861 | p2_37@1747@01 | live]
(push) ; 25
; [then-branch: 5861 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5861 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 26
; [then-branch: 5862 | ret2_2@1717@01 | live]
; [else-branch: 5862 | !(ret2_2@1717@01) | live]
(push) ; 27
; [then-branch: 5862 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5862 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 5863 | False | dead]
; [else-branch: 5863 | True | live]
(push) ; 25
; [else-branch: 5863 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_36 && !bypass1_7 ==> true
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5864 | !(p1_36@1616@01) | live]
; [else-branch: 5864 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5864 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5864 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5865 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5865 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5865 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> true
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 5866 | !(p2_36@1617@01) | live]
; [else-branch: 5866 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 5866 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5866 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5867 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5867 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5867 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> issubtype(typeof(i_1), int())
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5868 | !(p1_36@1616@01) | live]
; [else-branch: 5868 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5868 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5868 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5869 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5869 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5869 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> issubtype(typeof(i_1_0), int())
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 5870 | !(p2_36@1617@01) | live]
; [else-branch: 5870 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 5870 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5870 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5871 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5871 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5871 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] issubtype(typeof(i_1_0), int())
; [eval] typeof(i_1_0)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5872 | !(p1_36@1616@01) | live]
; [else-branch: 5872 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5872 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5872 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5873 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5873 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5873 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> int___ge__(int___unbox__(i_1_0), 0)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 5874 | !(p2_36@1617@01) | live]
; [else-branch: 5874 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 5874 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5874 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5875 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5875 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5875 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___ge__(int___unbox__(i_1_0), 0)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5876 | !(p1_36@1616@01) | live]
; [else-branch: 5876 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5876 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5876 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5877 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5877 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5877 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> int___le__(int___unbox__(i_1_0), 7)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 5878 | !(p2_36@1617@01) | live]
; [else-branch: 5878 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 5878 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5878 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5879 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5879 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5879 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___le__(int___unbox__(i_1_0), 7)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5880 | !(p1_36@1616@01) | live]
; [else-branch: 5880 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5880 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5880 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5881 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5881 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5881 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2))
; [eval] int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 5882 | !(p2_36@1617@01) | live]
; [else-branch: 5882 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 5882 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5882 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5883 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5883 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5883 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(i_1_0), 2))
; [eval] int___mod__(int___unbox__(i_1_0), 2)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5884 | !(p1_36@1616@01) | live]
; [else-branch: 5884 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5884 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5884 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5885 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5885 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5885 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5886 | True | live]
; [else-branch: 5886 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5886 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before@1721@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before@1721@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5887 | _loop_check_before@1721@01 | live]
; [else-branch: 5887 | !(_loop_check_before@1721@01) | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5887 | _loop_check_before@1721@01]
(assert _loop_check_before@1721@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 30
; [then-branch: 5888 | False | live]
; [else-branch: 5888 | True | live]
(push) ; 31
; [then-branch: 5888 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 5888 | True]
; [eval] perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_164)) == none
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 32
; [then-branch: 5889 | False | live]
; [else-branch: 5889 | True | live]
(push) ; 33
; [then-branch: 5889 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 5889 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 34
; [then-branch: 5890 | False | live]
; [else-branch: 5890 | True | live]
(push) ; 35
; [then-branch: 5890 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 5890 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 36
; [then-branch: 5891 | False | live]
; [else-branch: 5891 | True | live]
(push) ; 37
; [then-branch: 5891 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 5891 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 38
; [then-branch: 5892 | False | live]
; [else-branch: 5892 | True | live]
(push) ; 39
; [then-branch: 5892 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 5892 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 5887 | !(_loop_check_before@1721@01)]
(assert (not _loop_check_before@1721@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@1721@01) _loop_check_before@1721@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or (not _loop_check_before@1721@01) _loop_check_before@1721@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (or (not _loop_check_before@1721@01) _loop_check_before@1721@01))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 5893 | !(p2_36@1617@01) | live]
; [else-branch: 5893 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 5893 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5893 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5894 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5894 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5894 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5895 | True | live]
; [else-branch: 5895 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5895 | True]
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before_3@1722@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before_3@1722@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5896 | _loop_check_before_3@1722@01 | live]
; [else-branch: 5896 | !(_loop_check_before_3@1722@01) | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5896 | _loop_check_before_3@1722@01]
(assert _loop_check_before_3@1722@01)
; [eval] _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 30
; [then-branch: 5897 | False | live]
; [else-branch: 5897 | True | live]
(push) ; 31
; [then-branch: 5897 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 5897 | True]
; [eval] perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_164_0)) == none
; [eval] perm(MustTerminate_0(_cthread_164_0))
(push) ; 32
; [then-branch: 5898 | False | live]
; [else-branch: 5898 | True | live]
(push) ; 33
; [then-branch: 5898 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 5898 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 34
; [then-branch: 5899 | False | live]
; [else-branch: 5899 | True | live]
(push) ; 35
; [then-branch: 5899 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 5899 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 36
; [then-branch: 5900 | False | live]
; [else-branch: 5900 | True | live]
(push) ; 37
; [then-branch: 5900 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 5900 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 38
; [then-branch: 5901 | False | live]
; [else-branch: 5901 | True | live]
(push) ; 39
; [then-branch: 5901 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 5901 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 5896 | !(_loop_check_before_3@1722@01)]
(assert (not _loop_check_before_3@1722@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5902 | !(p1_36@1616@01) | live]
; [else-branch: 5902 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5902 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5902 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5903 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5903 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5903 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5904 | True | live]
; [else-branch: 5904 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5904 | True]
; [eval] !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before@1721@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before@1721@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5905 | !(_loop_check_before@1721@01) | live]
; [else-branch: 5905 | _loop_check_before@1721@01 | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5905 | !(_loop_check_before@1721@01)]
(assert (not _loop_check_before@1721@01))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 30
; [then-branch: 5906 | False | live]
; [else-branch: 5906 | True | live]
(push) ; 31
; [then-branch: 5906 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 5906 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 32
; [then-branch: 5907 | False | live]
; [else-branch: 5907 | True | live]
(push) ; 33
; [then-branch: 5907 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 5907 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 5908 | False | live]
; [else-branch: 5908 | True | live]
(push) ; 35
; [then-branch: 5908 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 5908 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 5905 | _loop_check_before@1721@01]
(assert _loop_check_before@1721@01)
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@1721@01 (not _loop_check_before@1721@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or _loop_check_before@1721@01 (not _loop_check_before@1721@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (or _loop_check_before@1721@01 (not _loop_check_before@1721@01)))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 5909 | !(p2_36@1617@01) | live]
; [else-branch: 5909 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 5909 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5909 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5910 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5910 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5910 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5911 | True | live]
; [else-branch: 5911 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5911 | True]
; [eval] !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_3
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before_3@1722@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before_3@1722@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5912 | !(_loop_check_before_3@1722@01) | live]
; [else-branch: 5912 | _loop_check_before_3@1722@01 | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5912 | !(_loop_check_before_3@1722@01)]
(assert (not _loop_check_before_3@1722@01))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 30
; [then-branch: 5913 | False | live]
; [else-branch: 5913 | True | live]
(push) ; 31
; [then-branch: 5913 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 5913 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 32
; [then-branch: 5914 | False | live]
; [else-branch: 5914 | True | live]
(push) ; 33
; [then-branch: 5914 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 5914 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 34
; [then-branch: 5915 | False | live]
; [else-branch: 5915 | True | live]
(push) ; 35
; [then-branch: 5915 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 5915 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 5912 | _loop_check_before_3@1722@01]
(assert _loop_check_before_3@1722@01)
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] bypass1_7 ==> tmp1 == _loop_measures
(push) ; 24
; [then-branch: 5916 | bypass1_7@1685@01 | dead]
; [else-branch: 5916 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 5916 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_0 == i_1
(push) ; 24
; [then-branch: 5917 | bypass1_7@1685@01 | dead]
; [else-branch: 5917 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 5917 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_1 == _loop_check_before
(push) ; 24
; [then-branch: 5918 | bypass1_7@1685@01 | dead]
; [else-branch: 5918 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 5918 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_2 == break1
(push) ; 24
; [then-branch: 5919 | bypass1_7@1685@01 | dead]
; [else-branch: 5919 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 5919 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2 == _loop_measures_3
(push) ; 24
; [then-branch: 5920 | bypass2_7@1686@01 | dead]
; [else-branch: 5920 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 5920 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_0 == i_1_0
(push) ; 24
; [then-branch: 5921 | bypass2_7@1686@01 | dead]
; [else-branch: 5921 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 5921 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_1 == _loop_check_before_3
(push) ; 24
; [then-branch: 5922 | bypass2_7@1686@01 | dead]
; [else-branch: 5922 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 5922 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_2 == break2
(push) ; 24
; [then-branch: 5923 | bypass2_7@1686@01 | dead]
; [else-branch: 5923 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 5923 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !p2_37
; [then-branch: 5924 | !(p2_37@1747@01) | dead]
; [else-branch: 5924 | p2_37@1747@01 | live]
(push) ; 21
; [else-branch: 5924 | p2_37@1747@01]
(pop) ; 21
(pop) ; 20
; [eval] !p1_37
; [then-branch: 5925 | !(p1_37@1746@01) | dead]
; [else-branch: 5925 | p1_37@1746@01 | live]
(push) ; 20
; [else-branch: 5925 | p1_37@1746@01]
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !p2_37
; [then-branch: 5926 | !(p2_37@1747@01) | dead]
; [else-branch: 5926 | p2_37@1747@01 | live]
(push) ; 17
; [else-branch: 5926 | p2_37@1747@01]
(pop) ; 17
(pop) ; 16
; [eval] !p1_37
; [then-branch: 5927 | !(p1_37@1746@01) | dead]
; [else-branch: 5927 | p1_37@1746@01 | live]
(push) ; 16
; [else-branch: 5927 | p1_37@1746@01]
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 5807 | !(p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(assert (not
  (and
    p2_38@1749@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(pop) ; 13
; [eval] !(p2_38 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_38 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 13
; [then-branch: 5928 | !(p2_38@1749@01) | live]
; [else-branch: 5928 | p2_38@1749@01 | live]
(push) ; 14
; [then-branch: 5928 | !(p2_38@1749@01)]
(assert (not p2_38@1749@01))
(pop) ; 14
(push) ; 14
; [else-branch: 5928 | p2_38@1749@01]
(assert p2_38@1749@01)
; [eval] !ret2_2
(push) ; 15
; [then-branch: 5929 | ret2_2@1717@01 | live]
; [else-branch: 5929 | !(ret2_2@1717@01) | live]
(push) ; 16
; [then-branch: 5929 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 16
(push) ; 16
; [else-branch: 5929 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 17
; [then-branch: 5930 | break2@1698@01 | live]
; [else-branch: 5930 | !(break2@1698@01) | live]
(push) ; 18
; [then-branch: 5930 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5930 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_38@1749@01
  (and
    p2_38@1749@01
    (=>
      (not ret2_2@1717@01)
      (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(push) ; 13
(set-option :timeout 10)
(assert (not (and
  p2_38@1749@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    p2_38@1749@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5931 | !(p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 5931 | p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5931 | !(p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(assert (not
  (and
    p2_38@1749@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
; [exec]
; bypass1_8 := !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 5932 | !(p1_37@1746@01) | live]
; [else-branch: 5932 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 5932 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5932 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 16
; [then-branch: 5933 | ret1_2@1712@01 | live]
; [else-branch: 5933 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 5933 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5933 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p1_37@1746@01 (or (not ret1_2@1712@01) ret1_2@1712@01)))
; [exec]
; bypass2_8 := !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 14
; [then-branch: 5934 | !(p2_37@1747@01) | live]
; [else-branch: 5934 | p2_37@1747@01 | live]
(push) ; 15
; [then-branch: 5934 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5934 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 16
; [then-branch: 5935 | ret2_2@1717@01 | live]
; [else-branch: 5935 | !(ret2_2@1717@01) | live]
(push) ; 17
; [then-branch: 5935 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5935 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 18
; [then-branch: 5936 | break2@1698@01 | live]
; [else-branch: 5936 | !(break2@1698@01) | live]
(push) ; 19
; [then-branch: 5936 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5936 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_37@1747@01
  (and
    (=>
      (not ret2_2@1717@01)
      (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(declare-const bypass2_8@1752@01 Bool)
(assert (=
  bypass2_8@1752@01
  (not
    (and
      p2_37@1747@01
      (and
        (not ret2_2@1717@01)
        (and (not break2@1698@01) (not except2_6@1720@01)))))))
; [exec]
; oldret1_3 := ret1_2
; [exec]
; oldret2_3 := ret2_2
; [exec]
; oldbreak1_0 := break1
; [exec]
; oldbreak2_0 := break2
; [exec]
; oldexcept1_3 := except1_6
; [exec]
; oldexcept2_3 := except2_6
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 5937 | !(p1_37@1746@01) | live]
; [else-branch: 5937 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 5937 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5937 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 16
; [then-branch: 5938 | ret1_2@1712@01 | live]
; [else-branch: 5938 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 5938 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5938 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 5939 | False | dead]
; [else-branch: 5939 | True | live]
(push) ; 14
; [else-branch: 5939 | True]
(pop) ; 14
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 5940 | !(p1_37@1746@01) | live]
; [else-branch: 5940 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 5940 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5940 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 16
; [then-branch: 5941 | ret1_2@1712@01 | live]
; [else-branch: 5941 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 5941 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5941 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5942 | True | live]
; [else-branch: 5942 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5942 | True]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 5943 | !(p2_37@1747@01) | live]
; [else-branch: 5943 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 5943 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 5943 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 17
; [then-branch: 5944 | ret2_2@1717@01 | live]
; [else-branch: 5944 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 5944 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5944 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 19
; [then-branch: 5945 | break2@1698@01 | live]
; [else-branch: 5945 | !(break2@1698@01) | live]
(push) ; 20
; [then-branch: 5945 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 20
(push) ; 20
; [else-branch: 5945 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5946 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 5946 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5946 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; i_1_0 := __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
; [eval] int___add__(int___unbox__(i_1_0), 1)
; [eval] int___unbox__(i_1_0)
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 17
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 16
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 16
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 1))
(pop) ; 16
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 1))
(push) ; 16
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 1)))
(pop) ; 16
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 1)))
(declare-const i_1_0@1753@01 $Ref)
(assert (=
  i_1_0@1753@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 1))))
; [exec]
; inhale true
(declare-const $t@1754@01 $Snap)
(assert (= $t@1754@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; thisexcept1_7 := except1_6 && !bypass1_8
; [eval] except1_6 && !bypass1_8
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5947 | !(except1_6@1715@01) | live]
; [else-branch: 5947 | except1_6@1715@01 | live]
(push) ; 17
; [then-branch: 5947 | !(except1_6@1715@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 5947 | except1_6@1715@01]
(assert except1_6@1715@01)
; [eval] !bypass1_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except1_6@1715@01 (not except1_6@1715@01)))
; [exec]
; thisexcept2_7 := except2_6 && !bypass2_8
; [eval] except2_6 && !bypass2_8
(push) ; 16
; [then-branch: 5948 | !(except2_6@1720@01) | live]
; [else-branch: 5948 | except2_6@1720@01 | live]
(push) ; 17
; [then-branch: 5948 | !(except2_6@1720@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 5948 | except2_6@1720@01]
(assert except2_6@1720@01)
; [eval] !bypass2_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except2_6@1720@01 (not except2_6@1720@01)))
(declare-const thisexcept2_7@1755@01 Bool)
(assert (= thisexcept2_7@1755@01 (and except2_6@1720@01 (not bypass2_8@1752@01))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5949 | p1_37@1746@01 | live]
; [else-branch: 5949 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5949 | p1_37@1746@01]
; [exec]
; tmp_ret1_3 := ret1_2
; [exec]
; ret1_2 := oldret1_3
; [exec]
; tmp_break1_3 := break1
; [exec]
; break1 := oldbreak1_0
; [exec]
; tmp_except1_3 := except1_6
; [exec]
; except1_6 := oldexcept1_3
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5950 | p2_37@1747@01 | live]
; [else-branch: 5950 | !(p2_37@1747@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 5950 | p2_37@1747@01]
; [exec]
; tmp_ret2_3 := ret2_2
; [exec]
; ret2_2 := oldret2_3
; [exec]
; tmp_break2_3 := break2
; [exec]
; break2 := oldbreak2_0
; [exec]
; tmp_except2_3 := except2_6
; [exec]
; except2_6 := oldexcept2_3
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 5951 | !(p1_37@1746@01) | live]
; [else-branch: 5951 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 5951 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5951 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 20
; [then-branch: 5952 | ret1_2@1712@01 | live]
; [else-branch: 5952 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 5952 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5952 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 5953 | False | dead]
; [else-branch: 5953 | True | live]
(push) ; 18
; [else-branch: 5953 | True]
(pop) ; 18
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 5954 | !(p1_37@1746@01) | live]
; [else-branch: 5954 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 5954 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5954 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 20
; [then-branch: 5955 | ret1_2@1712@01 | live]
; [else-branch: 5955 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 5955 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5955 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5956 | True | live]
; [else-branch: 5956 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 5956 | True]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 5957 | !(p2_37@1747@01) | live]
; [else-branch: 5957 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 5957 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5957 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 21
; [then-branch: 5958 | ret2_2@1717@01 | live]
; [else-branch: 5958 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 5958 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5958 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 23
; [then-branch: 5959 | break2@1698@01 | live]
; [else-branch: 5959 | !(break2@1698@01) | live]
(push) ; 24
; [then-branch: 5959 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5959 | !(break2@1698@01)]
; [eval] !except2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_37@1747@01
  (and
    (=> (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5960 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 5960 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 5960 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; i_1_0 := __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
; [eval] int___add__(int___unbox__(i_1_0), 1)
; [eval] int___unbox__(i_1_0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1753@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1753@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1753@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1753@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1753@01)))
(push) ; 20
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1753@01) 1))
(pop) ; 20
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1753@01) 1))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1753@01) 1)))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1753@01) 1)))
(declare-const i_1_0@1756@01 $Ref)
(assert (=
  i_1_0@1756@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1753@01) 1))))
; [exec]
; inhale true
(declare-const $t@1757@01 $Snap)
(assert (= $t@1757@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5961 | p1_37@1746@01 | live]
; [else-branch: 5961 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5961 | p1_37@1746@01]
; [exec]
; ret1_2 := ret1_2 || tmp_ret1_3
; [eval] ret1_2 || tmp_ret1_3
(push) ; 21
; [then-branch: 5962 | ret1_2@1712@01 | live]
; [else-branch: 5962 | !(ret1_2@1712@01) | live]
(push) ; 22
; [then-branch: 5962 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5962 | !(ret1_2@1712@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
; [exec]
; break1 := break1 || tmp_break1_3
; [eval] break1 || tmp_break1_3
; [exec]
; except1_6 := except1_6 || tmp_except1_3
; [eval] except1_6 || tmp_except1_3
(push) ; 21
; [then-branch: 5963 | except1_6@1715@01 | live]
; [else-branch: 5963 | !(except1_6@1715@01) | live]
(push) ; 22
; [then-branch: 5963 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5963 | !(except1_6@1715@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5964 | p2_37@1747@01 | live]
; [else-branch: 5964 | !(p2_37@1747@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5964 | p2_37@1747@01]
; [exec]
; ret2_2 := ret2_2 || tmp_ret2_3
; [eval] ret2_2 || tmp_ret2_3
(push) ; 22
; [then-branch: 5965 | ret2_2@1717@01 | live]
; [else-branch: 5965 | !(ret2_2@1717@01) | live]
(push) ; 23
; [then-branch: 5965 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5965 | !(ret2_2@1717@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
; [exec]
; break2 := break2 || tmp_break2_3
; [eval] break2 || tmp_break2_3
(push) ; 22
; [then-branch: 5966 | break2@1698@01 | live]
; [else-branch: 5966 | !(break2@1698@01) | live]
(push) ; 23
; [then-branch: 5966 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5966 | !(break2@1698@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
; [exec]
; except2_6 := except2_6 || tmp_except2_3
; [eval] except2_6 || tmp_except2_3
(push) ; 22
; [then-branch: 5967 | except2_6@1720@01 | live]
; [else-branch: 5967 | !(except2_6@1720@01) | live]
(push) ; 23
; [then-branch: 5967 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5967 | !(except2_6@1720@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not except2_6@1720@01) except2_6@1720@01))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 5968 | !(p1_37@1746@01) | live]
; [else-branch: 5968 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 5968 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5968 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 24
; [then-branch: 5969 | ret1_2@1712@01 | live]
; [else-branch: 5969 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 5969 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5969 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 5970 | False | dead]
; [else-branch: 5970 | True | live]
(push) ; 22
; [else-branch: 5970 | True]
(pop) ; 22
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 5971 | !(p1_37@1746@01) | live]
; [else-branch: 5971 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 5971 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5971 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 24
; [then-branch: 5972 | ret1_2@1712@01 | live]
; [else-branch: 5972 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 5972 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5972 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5973 | True | live]
; [else-branch: 5973 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 5973 | True]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 5974 | !(p2_37@1747@01) | live]
; [else-branch: 5974 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 5974 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5974 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 25
; [then-branch: 5975 | ret2_2@1717@01 | live]
; [else-branch: 5975 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 5975 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5975 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 27
; [then-branch: 5976 | break2@1698@01 | live]
; [else-branch: 5976 | !(break2@1698@01) | live]
(push) ; 28
; [then-branch: 5976 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5976 | !(break2@1698@01)]
; [eval] !except2_6
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5977 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 5977 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5977 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; _loop_check_before_3 := false
; [exec]
; assert (p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==>
;   _loop_termination_flag ==> !true) &&
;   (p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==>
;   _loop_termination_flag_3 ==> !true)
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==> _loop_termination_flag ==> !true
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 24
; [then-branch: 5978 | !(p1_37@1746@01) | live]
; [else-branch: 5978 | p1_37@1746@01 | live]
(push) ; 25
; [then-branch: 5978 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5978 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 26
; [then-branch: 5979 | ret1_2@1712@01 | live]
; [else-branch: 5979 | !(ret1_2@1712@01) | live]
(push) ; 27
; [then-branch: 5979 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5979 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 5980 | False | dead]
; [else-branch: 5980 | True | live]
(push) ; 25
; [else-branch: 5980 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==> _loop_termination_flag_3 ==> !true
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 24
; [then-branch: 5981 | !(p2_37@1747@01) | live]
; [else-branch: 5981 | p2_37@1747@01 | live]
(push) ; 25
; [then-branch: 5981 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5981 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 26
; [then-branch: 5982 | ret2_2@1717@01 | live]
; [else-branch: 5982 | !(ret2_2@1717@01) | live]
(push) ; 27
; [then-branch: 5982 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5982 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 28
; [then-branch: 5983 | break2@1698@01 | live]
; [else-branch: 5983 | !(break2@1698@01) | live]
(push) ; 29
; [then-branch: 5983 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5983 | !(break2@1698@01)]
; [eval] !except2_6
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5984 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 5984 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5984 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [eval] _loop_termination_flag_3 ==> !true
(push) ; 26
; [then-branch: 5985 | False | dead]
; [else-branch: 5985 | True | live]
(push) ; 27
; [else-branch: 5985 | True]
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))
  (and
    p2_37@1747@01
    (not ret2_2@1717@01)
    (not break2@1698@01)
    (not except2_6@1720@01))))
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; Loop head block: Re-establish invariant
; [eval] p1_36 && !bypass1_7 ==> true
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5986 | !(p1_36@1616@01) | live]
; [else-branch: 5986 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5986 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5986 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5987 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5987 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5987 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> true
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 5988 | !(p2_36@1617@01) | live]
; [else-branch: 5988 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 5988 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5988 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5989 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5989 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5989 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> issubtype(typeof(i_1), int())
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5990 | !(p1_36@1616@01) | live]
; [else-branch: 5990 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5990 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5990 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5991 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5991 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5991 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> issubtype(typeof(i_1_0), int())
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 5992 | !(p2_36@1617@01) | live]
; [else-branch: 5992 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 5992 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5992 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5993 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5993 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5993 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] issubtype(typeof(i_1_0), int())
; [eval] typeof(i_1_0)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 24
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType))))
; [eval] p1_36 && !bypass1_7 ==> int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5994 | !(p1_36@1616@01) | live]
; [else-branch: 5994 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5994 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5994 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5995 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5995 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5995 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> int___ge__(int___unbox__(i_1_0), 0)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 5996 | !(p2_36@1617@01) | live]
; [else-branch: 5996 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 5996 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5996 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5997 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 5997 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5997 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___ge__(int___unbox__(i_1_0), 0)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1756@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1756@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1756@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 0))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 24
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 0)))
; [eval] p1_36 && !bypass1_7 ==> int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 5998 | !(p1_36@1616@01) | live]
; [else-branch: 5998 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 5998 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5998 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5999 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 5999 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5999 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> int___le__(int___unbox__(i_1_0), 7)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6000 | !(p2_36@1617@01) | live]
; [else-branch: 6000 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6000 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6000 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6001 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6001 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6001 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___le__(int___unbox__(i_1_0), 7)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1756@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1756@01)))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1756@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 7))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 24
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 7))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 7)))
; [eval] p1_36 && !bypass1_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6002 | !(p1_36@1616@01) | live]
; [else-branch: 6002 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6002 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6002 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6003 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6003 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6003 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2))
; [eval] int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6004 | !(p2_36@1617@01) | live]
; [else-branch: 6004 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6004 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6004 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6005 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6005 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6005 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(i_1_0), 2))
; [eval] int___mod__(int___unbox__(i_1_0), 2)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1756@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1756@01)))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1756@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1756@01)
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 24
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2)) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1756@01) 2)) (__prim__int___box__ $Snap.unit 0))))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6006 | !(p1_36@1616@01) | live]
; [else-branch: 6006 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6006 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6006 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6007 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6007 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6007 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6008 | True | live]
; [else-branch: 6008 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6008 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before@1721@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before@1721@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6009 | _loop_check_before@1721@01 | live]
; [else-branch: 6009 | !(_loop_check_before@1721@01) | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6009 | _loop_check_before@1721@01]
(assert _loop_check_before@1721@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 30
; [then-branch: 6010 | False | live]
; [else-branch: 6010 | True | live]
(push) ; 31
; [then-branch: 6010 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6010 | True]
; [eval] perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_164)) == none
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 32
; [then-branch: 6011 | False | live]
; [else-branch: 6011 | True | live]
(push) ; 33
; [then-branch: 6011 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6011 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 34
; [then-branch: 6012 | False | live]
; [else-branch: 6012 | True | live]
(push) ; 35
; [then-branch: 6012 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6012 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 36
; [then-branch: 6013 | False | live]
; [else-branch: 6013 | True | live]
(push) ; 37
; [then-branch: 6013 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6013 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 38
; [then-branch: 6014 | False | live]
; [else-branch: 6014 | True | live]
(push) ; 39
; [then-branch: 6014 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 6014 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 6009 | !(_loop_check_before@1721@01)]
(assert (not _loop_check_before@1721@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@1721@01) _loop_check_before@1721@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or (not _loop_check_before@1721@01) _loop_check_before@1721@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (or (not _loop_check_before@1721@01) _loop_check_before@1721@01))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6015 | !(p2_36@1617@01) | live]
; [else-branch: 6015 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6015 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6015 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6016 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6016 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6016 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6017 | True | live]
; [else-branch: 6017 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6017 | True]
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 28
; [then-branch: 6018 | False | dead]
; [else-branch: 6018 | True | live]
(push) ; 29
; [else-branch: 6018 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6019 | !(p1_36@1616@01) | live]
; [else-branch: 6019 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6019 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6019 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6020 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6020 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6020 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6021 | True | live]
; [else-branch: 6021 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6021 | True]
; [eval] !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before@1721@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before@1721@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6022 | !(_loop_check_before@1721@01) | live]
; [else-branch: 6022 | _loop_check_before@1721@01 | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6022 | !(_loop_check_before@1721@01)]
(assert (not _loop_check_before@1721@01))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 30
; [then-branch: 6023 | False | live]
; [else-branch: 6023 | True | live]
(push) ; 31
; [then-branch: 6023 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6023 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 32
; [then-branch: 6024 | False | live]
; [else-branch: 6024 | True | live]
(push) ; 33
; [then-branch: 6024 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6024 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 6025 | False | live]
; [else-branch: 6025 | True | live]
(push) ; 35
; [then-branch: 6025 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6025 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 6022 | _loop_check_before@1721@01]
(assert _loop_check_before@1721@01)
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@1721@01 (not _loop_check_before@1721@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or _loop_check_before@1721@01 (not _loop_check_before@1721@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (or _loop_check_before@1721@01 (not _loop_check_before@1721@01)))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6026 | !(p2_36@1617@01) | live]
; [else-branch: 6026 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6026 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6026 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6027 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6027 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6027 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6028 | True | live]
; [else-branch: 6028 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6028 | True]
; [eval] !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_3
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6029 | True | live]
; [else-branch: 6029 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6029 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 30
; [then-branch: 6030 | False | live]
; [else-branch: 6030 | True | live]
(push) ; 31
; [then-branch: 6030 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6030 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 32
; [then-branch: 6031 | False | live]
; [else-branch: 6031 | True | live]
(push) ; 33
; [then-branch: 6031 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6031 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 34
; [then-branch: 6032 | False | live]
; [else-branch: 6032 | True | live]
(push) ; 35
; [then-branch: 6032 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6032 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] bypass1_7 ==> tmp1 == _loop_measures
(push) ; 24
; [then-branch: 6033 | bypass1_7@1685@01 | dead]
; [else-branch: 6033 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6033 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_0 == i_1
(push) ; 24
; [then-branch: 6034 | bypass1_7@1685@01 | dead]
; [else-branch: 6034 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6034 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_1 == _loop_check_before
(push) ; 24
; [then-branch: 6035 | bypass1_7@1685@01 | dead]
; [else-branch: 6035 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6035 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_2 == break1
(push) ; 24
; [then-branch: 6036 | bypass1_7@1685@01 | dead]
; [else-branch: 6036 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6036 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2 == _loop_measures_3
(push) ; 24
; [then-branch: 6037 | bypass2_7@1686@01 | dead]
; [else-branch: 6037 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6037 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_0 == i_1_0
(push) ; 24
; [then-branch: 6038 | bypass2_7@1686@01 | dead]
; [else-branch: 6038 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6038 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_1 == _loop_check_before_3
(push) ; 24
; [then-branch: 6039 | bypass2_7@1686@01 | dead]
; [else-branch: 6039 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6039 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_2 == break2
(push) ; 24
; [then-branch: 6040 | bypass2_7@1686@01 | dead]
; [else-branch: 6040 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6040 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 6041 | !(p2_37@1747@01) | live]
; [else-branch: 6041 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 6041 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6041 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 25
; [then-branch: 6042 | ret2_2@1717@01 | live]
; [else-branch: 6042 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 6042 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6042 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 27
; [then-branch: 6043 | break2@1698@01 | live]
; [else-branch: 6043 | !(break2@1698@01) | live]
(push) ; 28
; [then-branch: 6043 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6043 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6044 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
; [else-branch: 6044 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 6044 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !p2_37
(push) ; 21
(set-option :timeout 10)
(assert (not p2_37@1747@01))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6045 | !(p2_37@1747@01) | dead]
; [else-branch: 6045 | p2_37@1747@01 | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 6045 | p2_37@1747@01]
(assert p2_37@1747@01)
(pop) ; 21
(pop) ; 20
; [eval] !p1_37
; [then-branch: 6046 | !(p1_37@1746@01) | dead]
; [else-branch: 6046 | p1_37@1746@01 | live]
(push) ; 20
; [else-branch: 6046 | p1_37@1746@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 6047 | !(p2_37@1747@01) | live]
; [else-branch: 6047 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6047 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6047 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6048 | ret2_2@1717@01 | live]
; [else-branch: 6048 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6048 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6048 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 23
; [then-branch: 6049 | break2@1698@01 | live]
; [else-branch: 6049 | !(break2@1698@01) | live]
(push) ; 24
; [then-branch: 6049 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6049 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6050 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
; [else-branch: 6050 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 6050 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !p2_37
(push) ; 17
(set-option :timeout 10)
(assert (not p2_37@1747@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6051 | !(p2_37@1747@01) | dead]
; [else-branch: 6051 | p2_37@1747@01 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 6051 | p2_37@1747@01]
(assert p2_37@1747@01)
(pop) ; 17
(pop) ; 16
; [eval] !p1_37
; [then-branch: 6052 | !(p1_37@1746@01) | dead]
; [else-branch: 6052 | p1_37@1746@01 | live]
(push) ; 16
; [else-branch: 6052 | p1_37@1746@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 6053 | !(p2_37@1747@01) | live]
; [else-branch: 6053 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6053 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6053 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6054 | ret2_2@1717@01 | live]
; [else-branch: 6054 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6054 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6054 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 19
; [then-branch: 6055 | break2@1698@01 | live]
; [else-branch: 6055 | !(break2@1698@01) | live]
(push) ; 20
; [then-branch: 6055 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 20
(push) ; 20
; [else-branch: 6055 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6056 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
; [else-branch: 6056 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 6056 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 5931 | p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_38@1749@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 5803 | !(p1_38@1748@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
(assert (not
  (and
    p1_38@1748@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(pop) ; 12
; [eval] !(p1_38 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_38 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 12
; [then-branch: 6057 | !(p1_38@1748@01) | live]
; [else-branch: 6057 | p1_38@1748@01 | live]
(push) ; 13
; [then-branch: 6057 | !(p1_38@1748@01)]
(assert (not p1_38@1748@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6057 | p1_38@1748@01]
(assert p1_38@1748@01)
; [eval] !ret1_2
(push) ; 14
; [then-branch: 6058 | ret1_2@1712@01 | live]
; [else-branch: 6058 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 6058 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6058 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 16
; [then-branch: 6059 | break1@1697@01 | live]
; [else-branch: 6059 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 6059 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6059 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_38@1748@01
  (and
    p1_38@1748@01
    (=>
      (not ret1_2@1712@01)
      (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  p1_38@1748@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    p1_38@1748@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6060 | !(p1_38@1748@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
; [else-branch: 6060 | p1_38@1748@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 6060 | !(p1_38@1748@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
(assert (not
  (and
    p1_38@1748@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
; [eval] p2_38 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 13
; [then-branch: 6061 | !(p2_38@1749@01) | live]
; [else-branch: 6061 | p2_38@1749@01 | live]
(push) ; 14
; [then-branch: 6061 | !(p2_38@1749@01)]
(assert (not p2_38@1749@01))
(pop) ; 14
(push) ; 14
; [else-branch: 6061 | p2_38@1749@01]
(assert p2_38@1749@01)
; [eval] !ret2_2
(push) ; 15
; [then-branch: 6062 | ret2_2@1717@01 | live]
; [else-branch: 6062 | !(ret2_2@1717@01) | live]
(push) ; 16
; [then-branch: 6062 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6062 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 17
; [then-branch: 6063 | break2@1698@01 | live]
; [else-branch: 6063 | !(break2@1698@01) | live]
(push) ; 18
; [then-branch: 6063 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6063 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_38@1749@01
  (and
    p2_38@1749@01
    (=>
      (not ret2_2@1717@01)
      (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(assert (or p2_38@1749@01 (not p2_38@1749@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    p2_38@1749@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and
  p2_38@1749@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6064 | p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 6064 | !(p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6064 | p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_38@1749@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; break2 := true
; [exec]
; bypass1_8 := !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6065 | !(p1_37@1746@01) | live]
; [else-branch: 6065 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6065 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6065 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6066 | ret1_2@1712@01 | live]
; [else-branch: 6066 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6066 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6066 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6067 | break1@1697@01 | live]
; [else-branch: 6067 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6067 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6067 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_37@1746@01
  (and
    (=>
      (not ret1_2@1712@01)
      (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(declare-const bypass1_8@1758@01 Bool)
(assert (=
  bypass1_8@1758@01
  (not
    (and
      p1_37@1746@01
      (and
        (not ret1_2@1712@01)
        (and (not break1@1697@01) (not except1_6@1715@01)))))))
; [exec]
; bypass2_8 := !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 14
; [then-branch: 6068 | !(p2_37@1747@01) | live]
; [else-branch: 6068 | p2_37@1747@01 | live]
(push) ; 15
; [then-branch: 6068 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6068 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 16
; [then-branch: 6069 | ret2_2@1717@01 | live]
; [else-branch: 6069 | !(ret2_2@1717@01) | live]
(push) ; 17
; [then-branch: 6069 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6069 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p2_37@1747@01 (and p2_37@1747@01 (or (not ret2_2@1717@01) ret2_2@1717@01))))
; [exec]
; oldret1_3 := ret1_2
; [exec]
; oldret2_3 := ret2_2
; [exec]
; oldbreak1_0 := break1
; [exec]
; oldbreak2_0 := break2
; [exec]
; oldexcept1_3 := except1_6
; [exec]
; oldexcept2_3 := except2_6
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6070 | !(p1_37@1746@01) | live]
; [else-branch: 6070 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6070 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6070 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6071 | ret1_2@1712@01 | live]
; [else-branch: 6071 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6071 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6071 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6072 | break1@1697@01 | live]
; [else-branch: 6072 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6072 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6072 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6073 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6073 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 6073 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] int___add__(int___unbox__(i_1), 1)
; [eval] int___unbox__(i_1)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@1707@01))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@1707@01)))
(push) ; 15
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1))
(pop) ; 15
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1))
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1)))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1)))
(declare-const i_1@1759@01 $Ref)
(assert (=
  i_1@1759@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1))))
; [exec]
; inhale _isDefined(3235689)
(declare-const $t@1760@01 $Snap)
(assert (= $t@1760@01 $Snap.unit))
; [eval] _isDefined(3235689)
(push) ; 15
(pop) ; 15
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6074 | !(p2_37@1747@01) | live]
; [else-branch: 6074 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6074 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6074 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6075 | ret2_2@1717@01 | live]
; [else-branch: 6075 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6075 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6075 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 6076 | False | dead]
; [else-branch: 6076 | True | live]
(push) ; 15
; [else-branch: 6076 | True]
(pop) ; 15
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 6077 | !(p2_37@1747@01) | live]
; [else-branch: 6077 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6077 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6077 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6078 | ret2_2@1717@01 | live]
; [else-branch: 6078 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6078 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6078 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6079 | True | live]
; [else-branch: 6079 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6079 | True]
; [exec]
; thisexcept1_7 := except1_6 && !bypass1_8
; [eval] except1_6 && !bypass1_8
(push) ; 16
; [then-branch: 6080 | !(except1_6@1715@01) | live]
; [else-branch: 6080 | except1_6@1715@01 | live]
(push) ; 17
; [then-branch: 6080 | !(except1_6@1715@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 6080 | except1_6@1715@01]
(assert except1_6@1715@01)
; [eval] !bypass1_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except1_6@1715@01 (not except1_6@1715@01)))
(declare-const thisexcept1_7@1761@01 Bool)
(assert (= thisexcept1_7@1761@01 (and except1_6@1715@01 (not bypass1_8@1758@01))))
; [exec]
; thisexcept2_7 := except2_6 && !bypass2_8
; [eval] except2_6 && !bypass2_8
(push) ; 16
; [then-branch: 6081 | !(except2_6@1720@01) | live]
; [else-branch: 6081 | except2_6@1720@01 | live]
(push) ; 17
; [then-branch: 6081 | !(except2_6@1720@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 6081 | except2_6@1720@01]
(assert except2_6@1720@01)
; [eval] !bypass2_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except2_6@1720@01 (not except2_6@1720@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6082 | p1_37@1746@01 | live]
; [else-branch: 6082 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6082 | p1_37@1746@01]
; [exec]
; tmp_ret1_3 := ret1_2
; [exec]
; ret1_2 := oldret1_3
; [exec]
; tmp_break1_3 := break1
; [exec]
; break1 := oldbreak1_0
; [exec]
; tmp_except1_3 := except1_6
; [exec]
; except1_6 := oldexcept1_3
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not p2_37@1747@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6083 | p2_37@1747@01 | live]
; [else-branch: 6083 | !(p2_37@1747@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6083 | p2_37@1747@01]
(assert p2_37@1747@01)
; [exec]
; tmp_ret2_3 := ret2_2
; [exec]
; ret2_2 := oldret2_3
; [exec]
; tmp_break2_3 := break2
; [exec]
; break2 := oldbreak2_0
; [exec]
; tmp_except2_3 := except2_6
; [exec]
; except2_6 := oldexcept2_3
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 6084 | !(p1_37@1746@01) | live]
; [else-branch: 6084 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 6084 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6084 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 20
; [then-branch: 6085 | ret1_2@1712@01 | live]
; [else-branch: 6085 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 6085 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6085 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 22
; [then-branch: 6086 | break1@1697@01 | live]
; [else-branch: 6086 | !(break1@1697@01) | live]
(push) ; 23
; [then-branch: 6086 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6086 | !(break1@1697@01)]
; [eval] !except1_6
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=> (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01)))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_37@1746@01
  (and
    (=> (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6087 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6087 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 6087 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] int___add__(int___unbox__(i_1), 1)
; [eval] int___unbox__(i_1)
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> i_1@1759@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@1759@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@1759@01))
(pop) ; 19
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@1759@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@1759@01)))
(push) ; 19
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1759@01) 1))
(pop) ; 19
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1759@01) 1))
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1759@01) 1)))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1759@01) 1)))
(declare-const i_1@1762@01 $Ref)
(assert (=
  i_1@1762@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1759@01) 1))))
; [exec]
; inhale _isDefined(3235689)
(declare-const $t@1763@01 $Snap)
(assert (= $t@1763@01 $Snap.unit))
; [eval] _isDefined(3235689)
(push) ; 19
(pop) ; 19
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6088 | !(p2_37@1747@01) | live]
; [else-branch: 6088 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6088 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6088 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6089 | ret2_2@1717@01 | live]
; [else-branch: 6089 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6089 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6089 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_37@1747@01 (or (not ret2_2@1717@01) ret2_2@1717@01)))
; [then-branch: 6090 | False | dead]
; [else-branch: 6090 | True | live]
(push) ; 19
; [else-branch: 6090 | True]
(pop) ; 19
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 6091 | !(p2_37@1747@01) | live]
; [else-branch: 6091 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6091 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6091 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6092 | ret2_2@1717@01 | live]
; [else-branch: 6092 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6092 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6092 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6093 | True | live]
; [else-branch: 6093 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6093 | True]
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6094 | p1_37@1746@01 | live]
; [else-branch: 6094 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 6094 | p1_37@1746@01]
; [exec]
; ret1_2 := ret1_2 || tmp_ret1_3
; [eval] ret1_2 || tmp_ret1_3
(push) ; 21
; [then-branch: 6095 | ret1_2@1712@01 | live]
; [else-branch: 6095 | !(ret1_2@1712@01) | live]
(push) ; 22
; [then-branch: 6095 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6095 | !(ret1_2@1712@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
; [exec]
; break1 := break1 || tmp_break1_3
; [eval] break1 || tmp_break1_3
(push) ; 21
; [then-branch: 6096 | break1@1697@01 | live]
; [else-branch: 6096 | !(break1@1697@01) | live]
(push) ; 22
; [then-branch: 6096 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6096 | !(break1@1697@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
; [exec]
; except1_6 := except1_6 || tmp_except1_3
; [eval] except1_6 || tmp_except1_3
(push) ; 21
; [then-branch: 6097 | except1_6@1715@01 | live]
; [else-branch: 6097 | !(except1_6@1715@01) | live]
(push) ; 22
; [then-branch: 6097 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6097 | !(except1_6@1715@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6098 | p2_37@1747@01 | live]
; [else-branch: 6098 | !(p2_37@1747@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 6098 | p2_37@1747@01]
; [exec]
; ret2_2 := ret2_2 || tmp_ret2_3
; [eval] ret2_2 || tmp_ret2_3
(push) ; 22
; [then-branch: 6099 | ret2_2@1717@01 | live]
; [else-branch: 6099 | !(ret2_2@1717@01) | live]
(push) ; 23
; [then-branch: 6099 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6099 | !(ret2_2@1717@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
; [exec]
; break2 := break2 || tmp_break2_3
; [eval] break2 || tmp_break2_3
; [exec]
; except2_6 := except2_6 || tmp_except2_3
; [eval] except2_6 || tmp_except2_3
(push) ; 22
; [then-branch: 6100 | except2_6@1720@01 | live]
; [else-branch: 6100 | !(except2_6@1720@01) | live]
(push) ; 23
; [then-branch: 6100 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6100 | !(except2_6@1720@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not except2_6@1720@01) except2_6@1720@01))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 6101 | !(p1_37@1746@01) | live]
; [else-branch: 6101 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 6101 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6101 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 24
; [then-branch: 6102 | ret1_2@1712@01 | live]
; [else-branch: 6102 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 6102 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6102 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 26
; [then-branch: 6103 | break1@1697@01 | live]
; [else-branch: 6103 | !(break1@1697@01) | live]
(push) ; 27
; [then-branch: 6103 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6103 | !(break1@1697@01)]
; [eval] !except1_6
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6104 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6104 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 6104 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; _loop_check_before := false
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 6105 | !(p2_37@1747@01) | live]
; [else-branch: 6105 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 6105 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6105 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 25
; [then-branch: 6106 | ret2_2@1717@01 | live]
; [else-branch: 6106 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 6106 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6106 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 6107 | False | dead]
; [else-branch: 6107 | True | live]
(push) ; 23
; [else-branch: 6107 | True]
(pop) ; 23
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 6108 | !(p2_37@1747@01) | live]
; [else-branch: 6108 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 6108 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6108 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 25
; [then-branch: 6109 | ret2_2@1717@01 | live]
; [else-branch: 6109 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 6109 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6109 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6110 | True | live]
; [else-branch: 6110 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 6110 | True]
; [exec]
; assert (p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==>
;   _loop_termination_flag ==> !true) &&
;   (p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==>
;   _loop_termination_flag_3 ==> !true)
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==> _loop_termination_flag ==> !true
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 24
; [then-branch: 6111 | !(p1_37@1746@01) | live]
; [else-branch: 6111 | p1_37@1746@01 | live]
(push) ; 25
; [then-branch: 6111 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6111 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 26
; [then-branch: 6112 | ret1_2@1712@01 | live]
; [else-branch: 6112 | !(ret1_2@1712@01) | live]
(push) ; 27
; [then-branch: 6112 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6112 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 28
; [then-branch: 6113 | break1@1697@01 | live]
; [else-branch: 6113 | !(break1@1697@01) | live]
(push) ; 29
; [then-branch: 6113 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6113 | !(break1@1697@01)]
; [eval] !except1_6
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6114 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6114 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6114 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [eval] _loop_termination_flag ==> !true
(push) ; 26
; [then-branch: 6115 | False | dead]
; [else-branch: 6115 | True | live]
(push) ; 27
; [else-branch: 6115 | True]
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))
  (and
    p1_37@1746@01
    (not ret1_2@1712@01)
    (not break1@1697@01)
    (not except1_6@1715@01))))
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==> _loop_termination_flag_3 ==> !true
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 24
; [then-branch: 6116 | !(p2_37@1747@01) | live]
; [else-branch: 6116 | p2_37@1747@01 | live]
(push) ; 25
; [then-branch: 6116 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6116 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 26
; [then-branch: 6117 | ret2_2@1717@01 | live]
; [else-branch: 6117 | !(ret2_2@1717@01) | live]
(push) ; 27
; [then-branch: 6117 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6117 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 6118 | False | dead]
; [else-branch: 6118 | True | live]
(push) ; 25
; [else-branch: 6118 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_36 && !bypass1_7 ==> true
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6119 | !(p1_36@1616@01) | live]
; [else-branch: 6119 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6119 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6119 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6120 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6120 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6120 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> true
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6121 | !(p2_36@1617@01) | live]
; [else-branch: 6121 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6121 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6121 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6122 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6122 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6122 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> issubtype(typeof(i_1), int())
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6123 | !(p1_36@1616@01) | live]
; [else-branch: 6123 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6123 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6123 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6124 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6124 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6124 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (issubtype<Bool> (typeof<PyType> i_1@1762@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (issubtype<Bool> (typeof<PyType> i_1@1762@01) (as int<PyType>  PyType))))
; [eval] p2_36 && !bypass2_7 ==> issubtype(typeof(i_1_0), int())
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6125 | !(p2_36@1617@01) | live]
; [else-branch: 6125 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6125 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6125 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6126 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6126 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6126 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] issubtype(typeof(i_1_0), int())
; [eval] typeof(i_1_0)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6127 | !(p1_36@1616@01) | live]
; [else-branch: 6127 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6127 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6127 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6128 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6128 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6128 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1762@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1762@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1762@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 0))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 0)))
; [eval] p2_36 && !bypass2_7 ==> int___ge__(int___unbox__(i_1_0), 0)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6129 | !(p2_36@1617@01) | live]
; [else-branch: 6129 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6129 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6129 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6130 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6130 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6130 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___ge__(int___unbox__(i_1_0), 0)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6131 | !(p1_36@1616@01) | live]
; [else-branch: 6131 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6131 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6131 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6132 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6132 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6132 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1762@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1762@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689))))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1762@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 7))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 7))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 7)))
; [eval] p2_36 && !bypass2_7 ==> int___le__(int___unbox__(i_1_0), 7)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6133 | !(p2_36@1617@01) | live]
; [else-branch: 6133 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6133 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6133 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6134 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6134 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6134 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___le__(int___unbox__(i_1_0), 7)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6135 | !(p1_36@1616@01) | live]
; [else-branch: 6135 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6135 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6135 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6136 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6136 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6136 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2))
; [eval] int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1762@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1762@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689))))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1762@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1762@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689))
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1762@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_36 && !bypass2_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6137 | !(p2_36@1617@01) | live]
; [else-branch: 6137 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6137 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6137 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6138 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6138 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6138 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(i_1_0), 2))
; [eval] int___mod__(int___unbox__(i_1_0), 2)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6139 | !(p1_36@1616@01) | live]
; [else-branch: 6139 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6139 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6139 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6140 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6140 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6140 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6141 | True | live]
; [else-branch: 6141 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6141 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 28
; [then-branch: 6142 | False | dead]
; [else-branch: 6142 | True | live]
(push) ; 29
; [else-branch: 6142 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6143 | !(p2_36@1617@01) | live]
; [else-branch: 6143 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6143 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6143 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6144 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6144 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6144 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6145 | True | live]
; [else-branch: 6145 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6145 | True]
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before_3@1722@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before_3@1722@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6146 | _loop_check_before_3@1722@01 | live]
; [else-branch: 6146 | !(_loop_check_before_3@1722@01) | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6146 | _loop_check_before_3@1722@01]
(assert _loop_check_before_3@1722@01)
; [eval] _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 30
; [then-branch: 6147 | False | live]
; [else-branch: 6147 | True | live]
(push) ; 31
; [then-branch: 6147 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6147 | True]
; [eval] perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_164_0)) == none
; [eval] perm(MustTerminate_0(_cthread_164_0))
(push) ; 32
; [then-branch: 6148 | False | live]
; [else-branch: 6148 | True | live]
(push) ; 33
; [then-branch: 6148 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6148 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 34
; [then-branch: 6149 | False | live]
; [else-branch: 6149 | True | live]
(push) ; 35
; [then-branch: 6149 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6149 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 36
; [then-branch: 6150 | False | live]
; [else-branch: 6150 | True | live]
(push) ; 37
; [then-branch: 6150 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6150 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 38
; [then-branch: 6151 | False | live]
; [else-branch: 6151 | True | live]
(push) ; 39
; [then-branch: 6151 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 6151 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 6146 | !(_loop_check_before_3@1722@01)]
(assert (not _loop_check_before_3@1722@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6152 | !(p1_36@1616@01) | live]
; [else-branch: 6152 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6152 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6152 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6153 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6153 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6153 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6154 | True | live]
; [else-branch: 6154 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6154 | True]
; [eval] !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6155 | True | live]
; [else-branch: 6155 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6155 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 30
; [then-branch: 6156 | False | live]
; [else-branch: 6156 | True | live]
(push) ; 31
; [then-branch: 6156 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6156 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 32
; [then-branch: 6157 | False | live]
; [else-branch: 6157 | True | live]
(push) ; 33
; [then-branch: 6157 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6157 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 6158 | False | live]
; [else-branch: 6158 | True | live]
(push) ; 35
; [then-branch: 6158 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6158 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6159 | !(p2_36@1617@01) | live]
; [else-branch: 6159 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6159 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6159 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6160 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6160 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6160 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6161 | True | live]
; [else-branch: 6161 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6161 | True]
; [eval] !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_3
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before_3@1722@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before_3@1722@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6162 | !(_loop_check_before_3@1722@01) | live]
; [else-branch: 6162 | _loop_check_before_3@1722@01 | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6162 | !(_loop_check_before_3@1722@01)]
(assert (not _loop_check_before_3@1722@01))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 30
; [then-branch: 6163 | False | live]
; [else-branch: 6163 | True | live]
(push) ; 31
; [then-branch: 6163 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6163 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 32
; [then-branch: 6164 | False | live]
; [else-branch: 6164 | True | live]
(push) ; 33
; [then-branch: 6164 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6164 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 34
; [then-branch: 6165 | False | live]
; [else-branch: 6165 | True | live]
(push) ; 35
; [then-branch: 6165 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6165 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 6162 | _loop_check_before_3@1722@01]
(assert _loop_check_before_3@1722@01)
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] bypass1_7 ==> tmp1 == _loop_measures
(push) ; 24
; [then-branch: 6166 | bypass1_7@1685@01 | dead]
; [else-branch: 6166 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6166 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_0 == i_1
(push) ; 24
; [then-branch: 6167 | bypass1_7@1685@01 | dead]
; [else-branch: 6167 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6167 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_1 == _loop_check_before
(push) ; 24
; [then-branch: 6168 | bypass1_7@1685@01 | dead]
; [else-branch: 6168 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6168 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_2 == break1
(push) ; 24
; [then-branch: 6169 | bypass1_7@1685@01 | dead]
; [else-branch: 6169 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6169 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2 == _loop_measures_3
(push) ; 24
; [then-branch: 6170 | bypass2_7@1686@01 | dead]
; [else-branch: 6170 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6170 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_0 == i_1_0
(push) ; 24
; [then-branch: 6171 | bypass2_7@1686@01 | dead]
; [else-branch: 6171 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6171 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_1 == _loop_check_before_3
(push) ; 24
; [then-branch: 6172 | bypass2_7@1686@01 | dead]
; [else-branch: 6172 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6172 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_2 == break2
(push) ; 24
; [then-branch: 6173 | bypass2_7@1686@01 | dead]
; [else-branch: 6173 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6173 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 6174 | !(p1_37@1746@01) | live]
; [else-branch: 6174 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 6174 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6174 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 24
; [then-branch: 6175 | ret1_2@1712@01 | live]
; [else-branch: 6175 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 6175 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6175 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 26
; [then-branch: 6176 | break1@1697@01 | live]
; [else-branch: 6176 | !(break1@1697@01) | live]
(push) ; 27
; [then-branch: 6176 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6176 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6177 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
; [else-branch: 6177 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 6177 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 22
(pop) ; 21
; [eval] !p2_37
; [then-branch: 6178 | !(p2_37@1747@01) | dead]
; [else-branch: 6178 | p2_37@1747@01 | live]
(push) ; 21
; [else-branch: 6178 | p2_37@1747@01]
(pop) ; 21
(pop) ; 20
; [eval] !p1_37
(push) ; 20
(set-option :timeout 10)
(assert (not p1_37@1746@01))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6179 | !(p1_37@1746@01) | dead]
; [else-branch: 6179 | p1_37@1746@01 | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 6179 | p1_37@1746@01]
(assert p1_37@1746@01)
(pop) ; 20
(pop) ; 19
(pop) ; 18
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 6180 | !(p1_37@1746@01) | live]
; [else-branch: 6180 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 6180 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6180 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 20
; [then-branch: 6181 | ret1_2@1712@01 | live]
; [else-branch: 6181 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 6181 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6181 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 22
; [then-branch: 6182 | break1@1697@01 | live]
; [else-branch: 6182 | !(break1@1697@01) | live]
(push) ; 23
; [then-branch: 6182 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6182 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6183 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
; [else-branch: 6183 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 6183 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 18
(pop) ; 17
; [eval] !p2_37
(push) ; 17
(set-option :timeout 10)
(assert (not p2_37@1747@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6184 | !(p2_37@1747@01) | dead]
; [else-branch: 6184 | p2_37@1747@01 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 6184 | p2_37@1747@01]
(assert p2_37@1747@01)
(pop) ; 17
(pop) ; 16
; [eval] !p1_37
(push) ; 16
(set-option :timeout 10)
(assert (not p1_37@1746@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6185 | !(p1_37@1746@01) | dead]
; [else-branch: 6185 | p1_37@1746@01 | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 6185 | p1_37@1746@01]
(assert p1_37@1746@01)
(pop) ; 16
(pop) ; 15
(pop) ; 14
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6186 | !(p1_37@1746@01) | live]
; [else-branch: 6186 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6186 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6186 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6187 | ret1_2@1712@01 | live]
; [else-branch: 6187 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6187 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6187 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6188 | break1@1697@01 | live]
; [else-branch: 6188 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6188 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6188 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6189 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
; [else-branch: 6189 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 6189 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 6064 | !(p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(assert (not
  (and
    p2_38@1749@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(pop) ; 13
; [eval] !(p2_38 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_38 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 13
; [then-branch: 6190 | !(p2_38@1749@01) | live]
; [else-branch: 6190 | p2_38@1749@01 | live]
(push) ; 14
; [then-branch: 6190 | !(p2_38@1749@01)]
(assert (not p2_38@1749@01))
(pop) ; 14
(push) ; 14
; [else-branch: 6190 | p2_38@1749@01]
(assert p2_38@1749@01)
; [eval] !ret2_2
(push) ; 15
; [then-branch: 6191 | ret2_2@1717@01 | live]
; [else-branch: 6191 | !(ret2_2@1717@01) | live]
(push) ; 16
; [then-branch: 6191 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6191 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 17
; [then-branch: 6192 | break2@1698@01 | live]
; [else-branch: 6192 | !(break2@1698@01) | live]
(push) ; 18
; [then-branch: 6192 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6192 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (and
  p2_38@1749@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    p2_38@1749@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6193 | !(p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 6193 | p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6193 | !(p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(assert (not
  (and
    p2_38@1749@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
; [exec]
; bypass1_8 := !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6194 | !(p1_37@1746@01) | live]
; [else-branch: 6194 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6194 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6194 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6195 | ret1_2@1712@01 | live]
; [else-branch: 6195 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6195 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6195 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6196 | break1@1697@01 | live]
; [else-branch: 6196 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6196 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6196 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(declare-const bypass1_8@1764@01 Bool)
(assert (=
  bypass1_8@1764@01
  (not
    (and
      p1_37@1746@01
      (and
        (not ret1_2@1712@01)
        (and (not break1@1697@01) (not except1_6@1715@01)))))))
; [exec]
; bypass2_8 := !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 14
; [then-branch: 6197 | !(p2_37@1747@01) | live]
; [else-branch: 6197 | p2_37@1747@01 | live]
(push) ; 15
; [then-branch: 6197 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6197 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 16
; [then-branch: 6198 | ret2_2@1717@01 | live]
; [else-branch: 6198 | !(ret2_2@1717@01) | live]
(push) ; 17
; [then-branch: 6198 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6198 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 18
; [then-branch: 6199 | break2@1698@01 | live]
; [else-branch: 6199 | !(break2@1698@01) | live]
(push) ; 19
; [then-branch: 6199 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6199 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(declare-const bypass2_8@1765@01 Bool)
(assert (=
  bypass2_8@1765@01
  (not
    (and
      p2_37@1747@01
      (and
        (not ret2_2@1717@01)
        (and (not break2@1698@01) (not except2_6@1720@01)))))))
; [exec]
; oldret1_3 := ret1_2
; [exec]
; oldret2_3 := ret2_2
; [exec]
; oldbreak1_0 := break1
; [exec]
; oldbreak2_0 := break2
; [exec]
; oldexcept1_3 := except1_6
; [exec]
; oldexcept2_3 := except2_6
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6200 | !(p1_37@1746@01) | live]
; [else-branch: 6200 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6200 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6200 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6201 | ret1_2@1712@01 | live]
; [else-branch: 6201 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6201 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6201 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6202 | break1@1697@01 | live]
; [else-branch: 6202 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6202 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6202 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6203 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6203 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 6203 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] int___add__(int___unbox__(i_1), 1)
; [eval] int___unbox__(i_1)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@1707@01))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@1707@01)))
(push) ; 15
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1))
(pop) ; 15
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1))
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1)))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1)))
(declare-const i_1@1766@01 $Ref)
(assert (=
  i_1@1766@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1))))
; [exec]
; inhale _isDefined(3235689)
(declare-const $t@1767@01 $Snap)
(assert (= $t@1767@01 $Snap.unit))
; [eval] _isDefined(3235689)
(push) ; 15
(pop) ; 15
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6204 | !(p2_37@1747@01) | live]
; [else-branch: 6204 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6204 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6204 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6205 | ret2_2@1717@01 | live]
; [else-branch: 6205 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6205 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6205 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 19
; [then-branch: 6206 | break2@1698@01 | live]
; [else-branch: 6206 | !(break2@1698@01) | live]
(push) ; 20
; [then-branch: 6206 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 20
(push) ; 20
; [else-branch: 6206 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6207 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 6207 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6207 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; i_1_0 := __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
; [eval] int___add__(int___unbox__(i_1_0), 1)
; [eval] int___unbox__(i_1_0)
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 17
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 16
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 16
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 1))
(pop) ; 16
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 1))
(push) ; 16
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 1)))
(pop) ; 16
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 1)))
(declare-const i_1_0@1768@01 $Ref)
(assert (=
  i_1_0@1768@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 1))))
; [exec]
; inhale true
(declare-const $t@1769@01 $Snap)
(assert (= $t@1769@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; thisexcept1_7 := except1_6 && !bypass1_8
; [eval] except1_6 && !bypass1_8
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6208 | !(except1_6@1715@01) | live]
; [else-branch: 6208 | except1_6@1715@01 | live]
(push) ; 17
; [then-branch: 6208 | !(except1_6@1715@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 6208 | except1_6@1715@01]
(assert except1_6@1715@01)
; [eval] !bypass1_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except1_6@1715@01 (not except1_6@1715@01)))
(declare-const thisexcept1_7@1770@01 Bool)
(assert (= thisexcept1_7@1770@01 (and except1_6@1715@01 (not bypass1_8@1764@01))))
; [exec]
; thisexcept2_7 := except2_6 && !bypass2_8
; [eval] except2_6 && !bypass2_8
(push) ; 16
; [then-branch: 6209 | !(except2_6@1720@01) | live]
; [else-branch: 6209 | except2_6@1720@01 | live]
(push) ; 17
; [then-branch: 6209 | !(except2_6@1720@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 6209 | except2_6@1720@01]
(assert except2_6@1720@01)
; [eval] !bypass2_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except2_6@1720@01 (not except2_6@1720@01)))
(declare-const thisexcept2_7@1771@01 Bool)
(assert (= thisexcept2_7@1771@01 (and except2_6@1720@01 (not bypass2_8@1765@01))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6210 | p1_37@1746@01 | live]
; [else-branch: 6210 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6210 | p1_37@1746@01]
; [exec]
; tmp_ret1_3 := ret1_2
; [exec]
; ret1_2 := oldret1_3
; [exec]
; tmp_break1_3 := break1
; [exec]
; break1 := oldbreak1_0
; [exec]
; tmp_except1_3 := except1_6
; [exec]
; except1_6 := oldexcept1_3
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6211 | p2_37@1747@01 | live]
; [else-branch: 6211 | !(p2_37@1747@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6211 | p2_37@1747@01]
; [exec]
; tmp_ret2_3 := ret2_2
; [exec]
; ret2_2 := oldret2_3
; [exec]
; tmp_break2_3 := break2
; [exec]
; break2 := oldbreak2_0
; [exec]
; tmp_except2_3 := except2_6
; [exec]
; except2_6 := oldexcept2_3
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 6212 | !(p1_37@1746@01) | live]
; [else-branch: 6212 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 6212 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6212 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 20
; [then-branch: 6213 | ret1_2@1712@01 | live]
; [else-branch: 6213 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 6213 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6213 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 22
; [then-branch: 6214 | break1@1697@01 | live]
; [else-branch: 6214 | !(break1@1697@01) | live]
(push) ; 23
; [then-branch: 6214 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6214 | !(break1@1697@01)]
; [eval] !except1_6
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=> (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01)))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_37@1746@01
  (and
    (=> (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6215 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6215 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 6215 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] int___add__(int___unbox__(i_1), 1)
; [eval] int___unbox__(i_1)
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> i_1@1766@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@1766@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@1766@01))
(pop) ; 19
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@1766@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@1766@01)))
(push) ; 19
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1766@01) 1))
(pop) ; 19
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1766@01) 1))
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1766@01) 1)))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1766@01) 1)))
(declare-const i_1@1772@01 $Ref)
(assert (=
  i_1@1772@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1766@01) 1))))
; [exec]
; inhale _isDefined(3235689)
(declare-const $t@1773@01 $Snap)
(assert (= $t@1773@01 $Snap.unit))
; [eval] _isDefined(3235689)
(push) ; 19
(pop) ; 19
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6216 | !(p2_37@1747@01) | live]
; [else-branch: 6216 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6216 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6216 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6217 | ret2_2@1717@01 | live]
; [else-branch: 6217 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6217 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6217 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 23
; [then-branch: 6218 | break2@1698@01 | live]
; [else-branch: 6218 | !(break2@1698@01) | live]
(push) ; 24
; [then-branch: 6218 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6218 | !(break2@1698@01)]
; [eval] !except2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_37@1747@01
  (and
    (=> (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6219 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 6219 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6219 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; i_1_0 := __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
; [eval] int___add__(int___unbox__(i_1_0), 1)
; [eval] int___unbox__(i_1_0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1768@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1768@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1768@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1768@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1768@01)))
(push) ; 20
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1768@01) 1))
(pop) ; 20
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1768@01) 1))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1768@01) 1)))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1768@01) 1)))
(declare-const i_1_0@1774@01 $Ref)
(assert (=
  i_1_0@1774@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1768@01) 1))))
; [exec]
; inhale true
(declare-const $t@1775@01 $Snap)
(assert (= $t@1775@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6220 | p1_37@1746@01 | live]
; [else-branch: 6220 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 6220 | p1_37@1746@01]
; [exec]
; ret1_2 := ret1_2 || tmp_ret1_3
; [eval] ret1_2 || tmp_ret1_3
(push) ; 21
; [then-branch: 6221 | ret1_2@1712@01 | live]
; [else-branch: 6221 | !(ret1_2@1712@01) | live]
(push) ; 22
; [then-branch: 6221 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6221 | !(ret1_2@1712@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
; [exec]
; break1 := break1 || tmp_break1_3
; [eval] break1 || tmp_break1_3
(push) ; 21
; [then-branch: 6222 | break1@1697@01 | live]
; [else-branch: 6222 | !(break1@1697@01) | live]
(push) ; 22
; [then-branch: 6222 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6222 | !(break1@1697@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
; [exec]
; except1_6 := except1_6 || tmp_except1_3
; [eval] except1_6 || tmp_except1_3
(push) ; 21
; [then-branch: 6223 | except1_6@1715@01 | live]
; [else-branch: 6223 | !(except1_6@1715@01) | live]
(push) ; 22
; [then-branch: 6223 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6223 | !(except1_6@1715@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6224 | p2_37@1747@01 | live]
; [else-branch: 6224 | !(p2_37@1747@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 6224 | p2_37@1747@01]
; [exec]
; ret2_2 := ret2_2 || tmp_ret2_3
; [eval] ret2_2 || tmp_ret2_3
(push) ; 22
; [then-branch: 6225 | ret2_2@1717@01 | live]
; [else-branch: 6225 | !(ret2_2@1717@01) | live]
(push) ; 23
; [then-branch: 6225 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6225 | !(ret2_2@1717@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
; [exec]
; break2 := break2 || tmp_break2_3
; [eval] break2 || tmp_break2_3
(push) ; 22
; [then-branch: 6226 | break2@1698@01 | live]
; [else-branch: 6226 | !(break2@1698@01) | live]
(push) ; 23
; [then-branch: 6226 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6226 | !(break2@1698@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
; [exec]
; except2_6 := except2_6 || tmp_except2_3
; [eval] except2_6 || tmp_except2_3
(push) ; 22
; [then-branch: 6227 | except2_6@1720@01 | live]
; [else-branch: 6227 | !(except2_6@1720@01) | live]
(push) ; 23
; [then-branch: 6227 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6227 | !(except2_6@1720@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not except2_6@1720@01) except2_6@1720@01))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 6228 | !(p1_37@1746@01) | live]
; [else-branch: 6228 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 6228 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6228 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 24
; [then-branch: 6229 | ret1_2@1712@01 | live]
; [else-branch: 6229 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 6229 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6229 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 26
; [then-branch: 6230 | break1@1697@01 | live]
; [else-branch: 6230 | !(break1@1697@01) | live]
(push) ; 27
; [then-branch: 6230 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6230 | !(break1@1697@01)]
; [eval] !except1_6
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6231 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6231 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 6231 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; _loop_check_before := false
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 6232 | !(p2_37@1747@01) | live]
; [else-branch: 6232 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 6232 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6232 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 25
; [then-branch: 6233 | ret2_2@1717@01 | live]
; [else-branch: 6233 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 6233 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6233 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 27
; [then-branch: 6234 | break2@1698@01 | live]
; [else-branch: 6234 | !(break2@1698@01) | live]
(push) ; 28
; [then-branch: 6234 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6234 | !(break2@1698@01)]
; [eval] !except2_6
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6235 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 6235 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 6235 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; _loop_check_before_3 := false
; [exec]
; assert (p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==>
;   _loop_termination_flag ==> !true) &&
;   (p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==>
;   _loop_termination_flag_3 ==> !true)
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==> _loop_termination_flag ==> !true
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 24
; [then-branch: 6236 | !(p1_37@1746@01) | live]
; [else-branch: 6236 | p1_37@1746@01 | live]
(push) ; 25
; [then-branch: 6236 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6236 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 26
; [then-branch: 6237 | ret1_2@1712@01 | live]
; [else-branch: 6237 | !(ret1_2@1712@01) | live]
(push) ; 27
; [then-branch: 6237 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6237 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 28
; [then-branch: 6238 | break1@1697@01 | live]
; [else-branch: 6238 | !(break1@1697@01) | live]
(push) ; 29
; [then-branch: 6238 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6238 | !(break1@1697@01)]
; [eval] !except1_6
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6239 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6239 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6239 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [eval] _loop_termination_flag ==> !true
(push) ; 26
; [then-branch: 6240 | False | dead]
; [else-branch: 6240 | True | live]
(push) ; 27
; [else-branch: 6240 | True]
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))
  (and
    p1_37@1746@01
    (not ret1_2@1712@01)
    (not break1@1697@01)
    (not except1_6@1715@01))))
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==> _loop_termination_flag_3 ==> !true
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 24
; [then-branch: 6241 | !(p2_37@1747@01) | live]
; [else-branch: 6241 | p2_37@1747@01 | live]
(push) ; 25
; [then-branch: 6241 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6241 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 26
; [then-branch: 6242 | ret2_2@1717@01 | live]
; [else-branch: 6242 | !(ret2_2@1717@01) | live]
(push) ; 27
; [then-branch: 6242 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6242 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 28
; [then-branch: 6243 | break2@1698@01 | live]
; [else-branch: 6243 | !(break2@1698@01) | live]
(push) ; 29
; [then-branch: 6243 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6243 | !(break2@1698@01)]
; [eval] !except2_6
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6244 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 6244 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6244 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [eval] _loop_termination_flag_3 ==> !true
(push) ; 26
; [then-branch: 6245 | False | dead]
; [else-branch: 6245 | True | live]
(push) ; 27
; [else-branch: 6245 | True]
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))
  (and
    p2_37@1747@01
    (not ret2_2@1717@01)
    (not break2@1698@01)
    (not except2_6@1720@01))))
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; Loop head block: Re-establish invariant
; [eval] p1_36 && !bypass1_7 ==> true
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6246 | !(p1_36@1616@01) | live]
; [else-branch: 6246 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6246 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6246 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6247 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6247 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6247 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> true
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6248 | !(p2_36@1617@01) | live]
; [else-branch: 6248 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6248 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6248 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6249 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6249 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6249 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> issubtype(typeof(i_1), int())
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6250 | !(p1_36@1616@01) | live]
; [else-branch: 6250 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6250 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6250 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6251 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6251 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6251 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (issubtype<Bool> (typeof<PyType> i_1@1772@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (issubtype<Bool> (typeof<PyType> i_1@1772@01) (as int<PyType>  PyType))))
; [eval] p2_36 && !bypass2_7 ==> issubtype(typeof(i_1_0), int())
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6252 | !(p2_36@1617@01) | live]
; [else-branch: 6252 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6252 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6252 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6253 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6253 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6253 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] issubtype(typeof(i_1_0), int())
; [eval] typeof(i_1_0)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 24
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType))))
; [eval] p1_36 && !bypass1_7 ==> int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6254 | !(p1_36@1616@01) | live]
; [else-branch: 6254 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6254 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6254 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6255 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6255 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6255 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1772@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1772@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1772@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 0))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 0)))
; [eval] p2_36 && !bypass2_7 ==> int___ge__(int___unbox__(i_1_0), 0)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6256 | !(p2_36@1617@01) | live]
; [else-branch: 6256 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6256 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6256 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6257 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6257 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6257 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___ge__(int___unbox__(i_1_0), 0)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1774@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1774@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1774@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 0))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 24
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 0)))
; [eval] p1_36 && !bypass1_7 ==> int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6258 | !(p1_36@1616@01) | live]
; [else-branch: 6258 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6258 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6258 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6259 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6259 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6259 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1772@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1772@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689))))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1772@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 7))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 7))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 7)))
; [eval] p2_36 && !bypass2_7 ==> int___le__(int___unbox__(i_1_0), 7)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6260 | !(p2_36@1617@01) | live]
; [else-branch: 6260 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6260 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6260 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6261 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6261 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6261 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___le__(int___unbox__(i_1_0), 7)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1774@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1774@01)))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1774@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 7))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 24
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 7))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 7)))
; [eval] p1_36 && !bypass1_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6262 | !(p1_36@1616@01) | live]
; [else-branch: 6262 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6262 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6262 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6263 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6263 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6263 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2))
; [eval] int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1772@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1772@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689))))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1772@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1772@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689))
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1772@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_36 && !bypass2_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6264 | !(p2_36@1617@01) | live]
; [else-branch: 6264 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6264 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6264 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6265 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6265 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6265 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(i_1_0), 2))
; [eval] int___mod__(int___unbox__(i_1_0), 2)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1774@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1774@01)))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1774@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1774@01)
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(push) ; 24
(assert (not (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2)) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1774@01) 2)) (__prim__int___box__ $Snap.unit 0))))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6266 | !(p1_36@1616@01) | live]
; [else-branch: 6266 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6266 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6266 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6267 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6267 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6267 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6268 | True | live]
; [else-branch: 6268 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6268 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 28
; [then-branch: 6269 | False | dead]
; [else-branch: 6269 | True | live]
(push) ; 29
; [else-branch: 6269 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6270 | !(p2_36@1617@01) | live]
; [else-branch: 6270 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6270 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6270 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6271 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6271 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6271 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6272 | True | live]
; [else-branch: 6272 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6272 | True]
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 28
; [then-branch: 6273 | False | dead]
; [else-branch: 6273 | True | live]
(push) ; 29
; [else-branch: 6273 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6274 | !(p1_36@1616@01) | live]
; [else-branch: 6274 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6274 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6274 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6275 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6275 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6275 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6276 | True | live]
; [else-branch: 6276 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6276 | True]
; [eval] !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6277 | True | live]
; [else-branch: 6277 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6277 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 30
; [then-branch: 6278 | False | live]
; [else-branch: 6278 | True | live]
(push) ; 31
; [then-branch: 6278 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6278 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 32
; [then-branch: 6279 | False | live]
; [else-branch: 6279 | True | live]
(push) ; 33
; [then-branch: 6279 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6279 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 6280 | False | live]
; [else-branch: 6280 | True | live]
(push) ; 35
; [then-branch: 6280 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6280 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6281 | !(p2_36@1617@01) | live]
; [else-branch: 6281 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6281 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6281 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6282 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6282 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6282 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6283 | True | live]
; [else-branch: 6283 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6283 | True]
; [eval] !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_3
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6284 | True | live]
; [else-branch: 6284 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6284 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 30
; [then-branch: 6285 | False | live]
; [else-branch: 6285 | True | live]
(push) ; 31
; [then-branch: 6285 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6285 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 32
; [then-branch: 6286 | False | live]
; [else-branch: 6286 | True | live]
(push) ; 33
; [then-branch: 6286 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6286 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 34
; [then-branch: 6287 | False | live]
; [else-branch: 6287 | True | live]
(push) ; 35
; [then-branch: 6287 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6287 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] bypass1_7 ==> tmp1 == _loop_measures
(push) ; 24
; [then-branch: 6288 | bypass1_7@1685@01 | dead]
; [else-branch: 6288 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6288 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_0 == i_1
(push) ; 24
; [then-branch: 6289 | bypass1_7@1685@01 | dead]
; [else-branch: 6289 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6289 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_1 == _loop_check_before
(push) ; 24
; [then-branch: 6290 | bypass1_7@1685@01 | dead]
; [else-branch: 6290 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6290 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_2 == break1
(push) ; 24
; [then-branch: 6291 | bypass1_7@1685@01 | dead]
; [else-branch: 6291 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6291 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2 == _loop_measures_3
(push) ; 24
; [then-branch: 6292 | bypass2_7@1686@01 | dead]
; [else-branch: 6292 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6292 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_0 == i_1_0
(push) ; 24
; [then-branch: 6293 | bypass2_7@1686@01 | dead]
; [else-branch: 6293 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6293 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_1 == _loop_check_before_3
(push) ; 24
; [then-branch: 6294 | bypass2_7@1686@01 | dead]
; [else-branch: 6294 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6294 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_2 == break2
(push) ; 24
; [then-branch: 6295 | bypass2_7@1686@01 | dead]
; [else-branch: 6295 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6295 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 6296 | !(p2_37@1747@01) | live]
; [else-branch: 6296 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 6296 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6296 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 25
; [then-branch: 6297 | ret2_2@1717@01 | live]
; [else-branch: 6297 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 6297 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6297 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 27
; [then-branch: 6298 | break2@1698@01 | live]
; [else-branch: 6298 | !(break2@1698@01) | live]
(push) ; 28
; [then-branch: 6298 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6298 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6299 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
; [else-branch: 6299 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 6299 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
(pop) ; 23
(pop) ; 22
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 6300 | !(p1_37@1746@01) | live]
; [else-branch: 6300 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 6300 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6300 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 24
; [then-branch: 6301 | ret1_2@1712@01 | live]
; [else-branch: 6301 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 6301 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6301 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 26
; [then-branch: 6302 | break1@1697@01 | live]
; [else-branch: 6302 | !(break1@1697@01) | live]
(push) ; 27
; [then-branch: 6302 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6302 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6303 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
; [else-branch: 6303 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 6303 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 22
(pop) ; 21
; [eval] !p2_37
(push) ; 21
(set-option :timeout 10)
(assert (not p2_37@1747@01))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6304 | !(p2_37@1747@01) | dead]
; [else-branch: 6304 | p2_37@1747@01 | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 6304 | p2_37@1747@01]
(assert p2_37@1747@01)
(pop) ; 21
(pop) ; 20
; [eval] !p1_37
(push) ; 20
(set-option :timeout 10)
(assert (not p1_37@1746@01))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6305 | !(p1_37@1746@01) | dead]
; [else-branch: 6305 | p1_37@1746@01 | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 6305 | p1_37@1746@01]
(assert p1_37@1746@01)
(pop) ; 20
(pop) ; 19
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 6306 | !(p2_37@1747@01) | live]
; [else-branch: 6306 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6306 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6306 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6307 | ret2_2@1717@01 | live]
; [else-branch: 6307 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6307 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6307 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 23
; [then-branch: 6308 | break2@1698@01 | live]
; [else-branch: 6308 | !(break2@1698@01) | live]
(push) ; 24
; [then-branch: 6308 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6308 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6309 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
; [else-branch: 6309 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 6309 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
(pop) ; 19
(pop) ; 18
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 6310 | !(p1_37@1746@01) | live]
; [else-branch: 6310 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 6310 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6310 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 20
; [then-branch: 6311 | ret1_2@1712@01 | live]
; [else-branch: 6311 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 6311 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6311 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 22
; [then-branch: 6312 | break1@1697@01 | live]
; [else-branch: 6312 | !(break1@1697@01) | live]
(push) ; 23
; [then-branch: 6312 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6312 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6313 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
; [else-branch: 6313 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 6313 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 18
(pop) ; 17
; [eval] !p2_37
(push) ; 17
(set-option :timeout 10)
(assert (not p2_37@1747@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6314 | !(p2_37@1747@01) | dead]
; [else-branch: 6314 | p2_37@1747@01 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 6314 | p2_37@1747@01]
(assert p2_37@1747@01)
(pop) ; 17
(pop) ; 16
; [eval] !p1_37
(push) ; 16
(set-option :timeout 10)
(assert (not p1_37@1746@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6315 | !(p1_37@1746@01) | dead]
; [else-branch: 6315 | p1_37@1746@01 | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 6315 | p1_37@1746@01]
(assert p1_37@1746@01)
(pop) ; 16
(pop) ; 15
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 6316 | !(p2_37@1747@01) | live]
; [else-branch: 6316 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6316 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6316 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6317 | ret2_2@1717@01 | live]
; [else-branch: 6317 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6317 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6317 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 19
; [then-branch: 6318 | break2@1698@01 | live]
; [else-branch: 6318 | !(break2@1698@01) | live]
(push) ; 20
; [then-branch: 6318 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 20
(push) ; 20
; [else-branch: 6318 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6319 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
; [else-branch: 6319 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 6319 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
(pop) ; 15
(pop) ; 14
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6320 | !(p1_37@1746@01) | live]
; [else-branch: 6320 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6320 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6320 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6321 | ret1_2@1712@01 | live]
; [else-branch: 6321 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6321 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6321 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6322 | break1@1697@01 | live]
; [else-branch: 6322 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6322 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6322 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6323 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
; [else-branch: 6323 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 6323 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 6193 | p2_38@1749@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_38@1749@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 6060 | p1_38@1748@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_38@1748@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 5783 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(assert (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(pop) ; 11
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 11
; [then-branch: 6324 | !(p2_37@1747@01) | live]
; [else-branch: 6324 | p2_37@1747@01 | live]
(push) ; 12
; [then-branch: 6324 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 12
(push) ; 12
; [else-branch: 6324 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 13
; [then-branch: 6325 | ret2_2@1717@01 | live]
; [else-branch: 6325 | !(ret2_2@1717@01) | live]
(push) ; 14
; [then-branch: 6325 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 14
(push) ; 14
; [else-branch: 6325 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 15
; [then-branch: 6326 | break2@1698@01 | live]
; [else-branch: 6326 | !(break2@1698@01) | live]
(push) ; 16
; [then-branch: 6326 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6326 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6327 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 6327 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 6327 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(assert (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
; [exec]
; p1_38 := p1_37 &&
;   (!ret1_2 && (!break1 && !except1_6) &&
;   int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6) && int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
(push) ; 12
; [then-branch: 6328 | !(p1_37@1746@01) | live]
; [else-branch: 6328 | p1_37@1746@01 | live]
(push) ; 13
; [then-branch: 6328 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6328 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 14
; [then-branch: 6329 | ret1_2@1712@01 | live]
; [else-branch: 6329 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 6329 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6329 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 16
; [then-branch: 6330 | break1@1697@01 | live]
; [else-branch: 6330 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 6330 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6330 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(push) ; 18
; [then-branch: 6331 | except1_6@1715@01 | live]
; [else-branch: 6331 | !(except1_6@1715@01) | live]
(push) ; 19
; [then-branch: 6331 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6331 | !(except1_6@1715@01)]
(assert (not except1_6@1715@01))
; [eval] int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_6@1715@01)
  (and
    (not except1_6@1715@01)
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))))
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and
    (not break1@1697@01)
    (=>
      (not except1_6@1715@01)
      (and
        (not except1_6@1715@01)
        (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
    (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (not ret1_2@1712@01)
    (=>
      (not break1@1697@01)
      (and
        (not break1@1697@01)
        (=>
          (not except1_6@1715@01)
          (and
            (not except1_6@1715@01)
            (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
        (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_37@1746@01
  (and
    p1_37@1746@01
    (=>
      (not ret1_2@1712@01)
      (and
        (not ret1_2@1712@01)
        (=>
          (not break1@1697@01)
          (and
            (not break1@1697@01)
            (=>
              (not except1_6@1715@01)
              (and
                (not except1_6@1715@01)
                (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
            (or (not except1_6@1715@01) except1_6@1715@01)))
        (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(declare-const p1_38@1776@01 Bool)
(assert (=
  p1_38@1776@01
  (and
    p1_37@1746@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and
          (not except1_6@1715@01)
          (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))))))
; [exec]
; p2_38 := p2_37 &&
;   (!ret2_2 && (!break2 && !except2_6) &&
;   int___gt__(int___unbox__(i_1_0), 5))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6) && int___gt__(int___unbox__(i_1_0), 5))
(push) ; 12
; [then-branch: 6332 | !(p2_37@1747@01) | live]
; [else-branch: 6332 | p2_37@1747@01 | live]
(push) ; 13
; [then-branch: 6332 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6332 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 14
; [then-branch: 6333 | ret2_2@1717@01 | live]
; [else-branch: 6333 | !(ret2_2@1717@01) | live]
(push) ; 15
; [then-branch: 6333 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6333 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 16
; [then-branch: 6334 | break2@1698@01 | live]
; [else-branch: 6334 | !(break2@1698@01) | live]
(push) ; 17
; [then-branch: 6334 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6334 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(push) ; 18
; [then-branch: 6335 | except2_6@1720@01 | live]
; [else-branch: 6335 | !(except2_6@1720@01) | live]
(push) ; 19
; [then-branch: 6335 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6335 | !(except2_6@1720@01)]
(assert (not except2_6@1720@01))
; [eval] int___gt__(int___unbox__(i_1_0), 5)
; [eval] int___unbox__(i_1_0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_6@1720@01)
  (and
    (not except2_6@1720@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))))
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and
    (not break2@1698@01)
    (=>
      (not except2_6@1720@01)
      (and
        (not except2_6@1720@01)
        (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
    (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (not ret2_2@1717@01)
    (=>
      (not break2@1698@01)
      (and
        (not break2@1698@01)
        (=>
          (not except2_6@1720@01)
          (and
            (not except2_6@1720@01)
            (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
        (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_37@1747@01
  (and
    p2_37@1747@01
    (=>
      (not ret2_2@1717@01)
      (and
        (not ret2_2@1717@01)
        (=>
          (not break2@1698@01)
          (and
            (not break2@1698@01)
            (=>
              (not except2_6@1720@01)
              (and
                (not except2_6@1720@01)
                (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
            (or (not except2_6@1720@01) except2_6@1720@01)))
        (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(declare-const p2_38@1777@01 Bool)
(assert (=
  p2_38@1777@01
  (and
    p2_37@1747@01
    (and
      (not ret2_2@1717@01)
      (and
        (not break2@1698@01)
        (and
          (not except2_6@1720@01)
          (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))))))
; [exec]
; p3_17 := p1_37 &&
;   (!ret1_2 && (!break1 && !except1_6) &&
;   !int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6) && !int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
(push) ; 12
; [then-branch: 6336 | !(p1_37@1746@01) | live]
; [else-branch: 6336 | p1_37@1746@01 | live]
(push) ; 13
; [then-branch: 6336 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6336 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 14
; [then-branch: 6337 | ret1_2@1712@01 | live]
; [else-branch: 6337 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 6337 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6337 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 16
; [then-branch: 6338 | break1@1697@01 | live]
; [else-branch: 6338 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 6338 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6338 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(push) ; 18
; [then-branch: 6339 | except1_6@1715@01 | live]
; [else-branch: 6339 | !(except1_6@1715@01) | live]
(push) ; 19
; [then-branch: 6339 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6339 | !(except1_6@1715@01)]
(assert (not except1_6@1715@01))
; [eval] !int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_6@1715@01)
  (and
    (not except1_6@1715@01)
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))))
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and
    (not break1@1697@01)
    (=>
      (not except1_6@1715@01)
      (and
        (not except1_6@1715@01)
        (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
    (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (not ret1_2@1712@01)
    (=>
      (not break1@1697@01)
      (and
        (not break1@1697@01)
        (=>
          (not except1_6@1715@01)
          (and
            (not except1_6@1715@01)
            (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
        (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(declare-const p3_17@1778@01 Bool)
(assert (=
  p3_17@1778@01
  (and
    p1_37@1746@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and
          (not except1_6@1715@01)
          (not
            (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))))))))
; [exec]
; p4_17 := p2_37 &&
;   (!ret2_2 && (!break2 && !except2_6) &&
;   !int___gt__(int___unbox__(i_1_0), 5))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6) && !int___gt__(int___unbox__(i_1_0), 5))
(push) ; 12
; [then-branch: 6340 | !(p2_37@1747@01) | live]
; [else-branch: 6340 | p2_37@1747@01 | live]
(push) ; 13
; [then-branch: 6340 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6340 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 14
; [then-branch: 6341 | ret2_2@1717@01 | live]
; [else-branch: 6341 | !(ret2_2@1717@01) | live]
(push) ; 15
; [then-branch: 6341 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6341 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 16
; [then-branch: 6342 | break2@1698@01 | live]
; [else-branch: 6342 | !(break2@1698@01) | live]
(push) ; 17
; [then-branch: 6342 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6342 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(push) ; 18
; [then-branch: 6343 | except2_6@1720@01 | live]
; [else-branch: 6343 | !(except2_6@1720@01) | live]
(push) ; 19
; [then-branch: 6343 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6343 | !(except2_6@1720@01)]
(assert (not except2_6@1720@01))
; [eval] !int___gt__(int___unbox__(i_1_0), 5)
; [eval] int___gt__(int___unbox__(i_1_0), 5)
; [eval] int___unbox__(i_1_0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_6@1720@01)
  (and
    (not except2_6@1720@01)
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))))
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and
    (not break2@1698@01)
    (=>
      (not except2_6@1720@01)
      (and
        (not except2_6@1720@01)
        (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
    (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (not ret2_2@1717@01)
    (=>
      (not break2@1698@01)
      (and
        (not break2@1698@01)
        (=>
          (not except2_6@1720@01)
          (and
            (not except2_6@1720@01)
            (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
        (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(declare-const p4_17@1779@01 Bool)
(assert (=
  p4_17@1779@01
  (and
    p2_37@1747@01
    (and
      (not ret2_2@1717@01)
      (and
        (not break2@1698@01)
        (and
          (not except2_6@1720@01)
          (not
            (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))))))))
; [eval] p1_38 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 12
; [then-branch: 6344 | !(p1_38@1776@01) | live]
; [else-branch: 6344 | p1_38@1776@01 | live]
(push) ; 13
; [then-branch: 6344 | !(p1_38@1776@01)]
(assert (not p1_38@1776@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6344 | p1_38@1776@01]
(assert p1_38@1776@01)
; [eval] !ret1_2
(push) ; 14
; [then-branch: 6345 | ret1_2@1712@01 | live]
; [else-branch: 6345 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 6345 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6345 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 16
; [then-branch: 6346 | break1@1697@01 | live]
; [else-branch: 6346 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 6346 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6346 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_38@1776@01
  (and
    p1_38@1776@01
    (=>
      (not ret1_2@1712@01)
      (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(assert (or p1_38@1776@01 (not p1_38@1776@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    p1_38@1776@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  p1_38@1776@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6347 | p1_38@1776@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6347 | !(p1_38@1776@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 6347 | p1_38@1776@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_38@1776@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; break1 := true
; [eval] p2_38 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 13
; [then-branch: 6348 | !(p2_38@1777@01) | live]
; [else-branch: 6348 | p2_38@1777@01 | live]
(push) ; 14
; [then-branch: 6348 | !(p2_38@1777@01)]
(assert (not p2_38@1777@01))
(pop) ; 14
(push) ; 14
; [else-branch: 6348 | p2_38@1777@01]
(assert p2_38@1777@01)
; [eval] !ret2_2
(push) ; 15
; [then-branch: 6349 | ret2_2@1717@01 | live]
; [else-branch: 6349 | !(ret2_2@1717@01) | live]
(push) ; 16
; [then-branch: 6349 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6349 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 17
; [then-branch: 6350 | break2@1698@01 | live]
; [else-branch: 6350 | !(break2@1698@01) | live]
(push) ; 18
; [then-branch: 6350 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6350 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_38@1777@01
  (and
    p2_38@1777@01
    (=>
      (not ret2_2@1717@01)
      (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(assert (or p2_38@1777@01 (not p2_38@1777@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    p2_38@1777@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6351 | p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
; [else-branch: 6351 | !(p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 6351 | !(p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(assert (not
  (and
    p2_38@1777@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(pop) ; 13
; [eval] !(p2_38 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_38 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 13
; [then-branch: 6352 | !(p2_38@1777@01) | live]
; [else-branch: 6352 | p2_38@1777@01 | live]
(push) ; 14
; [then-branch: 6352 | !(p2_38@1777@01)]
(assert (not p2_38@1777@01))
(pop) ; 14
(push) ; 14
; [else-branch: 6352 | p2_38@1777@01]
(assert p2_38@1777@01)
; [eval] !ret2_2
(push) ; 15
; [then-branch: 6353 | ret2_2@1717@01 | live]
; [else-branch: 6353 | !(ret2_2@1717@01) | live]
(push) ; 16
; [then-branch: 6353 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6353 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 17
; [then-branch: 6354 | break2@1698@01 | live]
; [else-branch: 6354 | !(break2@1698@01) | live]
(push) ; 18
; [then-branch: 6354 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6354 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (and
  p2_38@1777@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    p2_38@1777@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6355 | !(p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 6355 | p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6355 | !(p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(assert (not
  (and
    p2_38@1777@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
; [exec]
; bypass1_8 := !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6356 | !(p1_37@1746@01) | live]
; [else-branch: 6356 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6356 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6356 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6357 | ret1_2@1712@01 | live]
; [else-branch: 6357 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6357 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6357 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p1_37@1746@01 (and p1_37@1746@01 (or (not ret1_2@1712@01) ret1_2@1712@01))))
; [exec]
; bypass2_8 := !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 14
; [then-branch: 6358 | !(p2_37@1747@01) | live]
; [else-branch: 6358 | p2_37@1747@01 | live]
(push) ; 15
; [then-branch: 6358 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6358 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 16
; [then-branch: 6359 | ret2_2@1717@01 | live]
; [else-branch: 6359 | !(ret2_2@1717@01) | live]
(push) ; 17
; [then-branch: 6359 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6359 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 18
; [then-branch: 6360 | break2@1698@01 | live]
; [else-branch: 6360 | !(break2@1698@01) | live]
(push) ; 19
; [then-branch: 6360 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6360 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(declare-const bypass2_8@1780@01 Bool)
(assert (=
  bypass2_8@1780@01
  (not
    (and
      p2_37@1747@01
      (and
        (not ret2_2@1717@01)
        (and (not break2@1698@01) (not except2_6@1720@01)))))))
; [exec]
; oldret1_3 := ret1_2
; [exec]
; oldret2_3 := ret2_2
; [exec]
; oldbreak1_0 := break1
; [exec]
; oldbreak2_0 := break2
; [exec]
; oldexcept1_3 := except1_6
; [exec]
; oldexcept2_3 := except2_6
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6361 | !(p1_37@1746@01) | live]
; [else-branch: 6361 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6361 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6361 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6362 | ret1_2@1712@01 | live]
; [else-branch: 6362 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6362 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6362 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 6363 | False | dead]
; [else-branch: 6363 | True | live]
(push) ; 14
; [else-branch: 6363 | True]
(pop) ; 14
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6364 | !(p1_37@1746@01) | live]
; [else-branch: 6364 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6364 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6364 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6365 | ret1_2@1712@01 | live]
; [else-branch: 6365 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6365 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6365 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6366 | True | live]
; [else-branch: 6366 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 6366 | True]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 6367 | !(p2_37@1747@01) | live]
; [else-branch: 6367 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6367 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6367 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6368 | ret2_2@1717@01 | live]
; [else-branch: 6368 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6368 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6368 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 19
; [then-branch: 6369 | break2@1698@01 | live]
; [else-branch: 6369 | !(break2@1698@01) | live]
(push) ; 20
; [then-branch: 6369 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 20
(push) ; 20
; [else-branch: 6369 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 6370 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
; [else-branch: 6370 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(push) ; 15
; [else-branch: 6370 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(pop) ; 15
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 6371 | !(p2_37@1747@01) | live]
; [else-branch: 6371 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6371 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6371 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6372 | ret2_2@1717@01 | live]
; [else-branch: 6372 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6372 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6372 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 19
; [then-branch: 6373 | break2@1698@01 | live]
; [else-branch: 6373 | !(break2@1698@01) | live]
(push) ; 20
; [then-branch: 6373 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 20
(push) ; 20
; [else-branch: 6373 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6374 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 6374 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6374 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
; [exec]
; thisexcept1_7 := except1_6 && !bypass1_8
; [eval] except1_6 && !bypass1_8
(push) ; 16
; [then-branch: 6375 | !(except1_6@1715@01) | live]
; [else-branch: 6375 | except1_6@1715@01 | live]
(push) ; 17
; [then-branch: 6375 | !(except1_6@1715@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 6375 | except1_6@1715@01]
(assert except1_6@1715@01)
; [eval] !bypass1_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except1_6@1715@01 (not except1_6@1715@01)))
; [exec]
; thisexcept2_7 := except2_6 && !bypass2_8
; [eval] except2_6 && !bypass2_8
(push) ; 16
; [then-branch: 6376 | !(except2_6@1720@01) | live]
; [else-branch: 6376 | except2_6@1720@01 | live]
(push) ; 17
; [then-branch: 6376 | !(except2_6@1720@01)]
(assert (not except2_6@1720@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6376 | except2_6@1720@01]
(assert except2_6@1720@01)
; [eval] !bypass2_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except2_6@1720@01 (not except2_6@1720@01)))
(declare-const thisexcept2_7@1781@01 Bool)
(assert (= thisexcept2_7@1781@01 (and except2_6@1720@01 (not bypass2_8@1780@01))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not p1_37@1746@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6377 | p1_37@1746@01 | live]
; [else-branch: 6377 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6377 | p1_37@1746@01]
(assert p1_37@1746@01)
; [exec]
; tmp_ret1_3 := ret1_2
; [exec]
; ret1_2 := oldret1_3
; [exec]
; tmp_break1_3 := break1
; [exec]
; break1 := oldbreak1_0
; [exec]
; tmp_except1_3 := except1_6
; [exec]
; except1_6 := oldexcept1_3
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6378 | p2_37@1747@01 | dead]
; [else-branch: 6378 | !(p2_37@1747@01) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 6378 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 17
; [eval] !p2_37
(push) ; 17
(set-option :timeout 10)
(assert (not p2_37@1747@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6379 | !(p2_37@1747@01) | live]
; [else-branch: 6379 | p2_37@1747@01 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6379 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 6380 | !(p1_37@1746@01) | live]
; [else-branch: 6380 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 6380 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6380 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 20
; [then-branch: 6381 | ret1_2@1712@01 | live]
; [else-branch: 6381 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 6381 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6381 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_37@1746@01 (or (not ret1_2@1712@01) ret1_2@1712@01)))
; [then-branch: 6382 | False | dead]
; [else-branch: 6382 | True | live]
(push) ; 18
; [else-branch: 6382 | True]
(pop) ; 18
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 6383 | !(p1_37@1746@01) | live]
; [else-branch: 6383 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 6383 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6383 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 20
; [then-branch: 6384 | ret1_2@1712@01 | live]
; [else-branch: 6384 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 6384 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6384 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6385 | True | live]
; [else-branch: 6385 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 6385 | True]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 6386 | !(p2_37@1747@01) | live]
; [else-branch: 6386 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6386 | !(p2_37@1747@01)]
(pop) ; 20
(push) ; 20
; [else-branch: 6386 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6387 | ret2_2@1717@01 | live]
; [else-branch: 6387 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6387 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6387 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 23
; [then-branch: 6388 | break2@1698@01 | live]
; [else-branch: 6388 | !(break2@1698@01) | live]
(push) ; 24
; [then-branch: 6388 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6388 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 6389 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
; [else-branch: 6389 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(push) ; 19
; [else-branch: 6389 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(pop) ; 19
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 6390 | !(p2_37@1747@01) | live]
; [else-branch: 6390 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6390 | !(p2_37@1747@01)]
(pop) ; 20
(push) ; 20
; [else-branch: 6390 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6391 | ret2_2@1717@01 | live]
; [else-branch: 6391 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6391 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6391 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 23
; [then-branch: 6392 | break2@1698@01 | live]
; [else-branch: 6392 | !(break2@1698@01) | live]
(push) ; 24
; [then-branch: 6392 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6392 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6393 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 6393 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6393 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6394 | p1_37@1746@01 | live]
; [else-branch: 6394 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 6394 | p1_37@1746@01]
; [exec]
; ret1_2 := ret1_2 || tmp_ret1_3
; [eval] ret1_2 || tmp_ret1_3
(push) ; 21
; [then-branch: 6395 | ret1_2@1712@01 | live]
; [else-branch: 6395 | !(ret1_2@1712@01) | live]
(push) ; 22
; [then-branch: 6395 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6395 | !(ret1_2@1712@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
; [exec]
; break1 := break1 || tmp_break1_3
; [eval] break1 || tmp_break1_3
; [exec]
; except1_6 := except1_6 || tmp_except1_3
; [eval] except1_6 || tmp_except1_3
(push) ; 21
; [then-branch: 6396 | except1_6@1715@01 | live]
; [else-branch: 6396 | !(except1_6@1715@01) | live]
(push) ; 22
; [then-branch: 6396 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6396 | !(except1_6@1715@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not except1_6@1715@01) except1_6@1715@01))
; [then-branch: 6397 | p2_37@1747@01 | dead]
; [else-branch: 6397 | !(p2_37@1747@01) | live]
(push) ; 21
; [else-branch: 6397 | !(p2_37@1747@01)]
(pop) ; 21
; [eval] !p2_37
(push) ; 21
(set-option :timeout 10)
(assert (not p2_37@1747@01))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6398 | !(p2_37@1747@01) | live]
; [else-branch: 6398 | p2_37@1747@01 | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 6398 | !(p2_37@1747@01)]
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 6399 | !(p1_37@1746@01) | live]
; [else-branch: 6399 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 6399 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6399 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 24
; [then-branch: 6400 | ret1_2@1712@01 | live]
; [else-branch: 6400 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 6400 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6400 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 6401 | False | dead]
; [else-branch: 6401 | True | live]
(push) ; 22
; [else-branch: 6401 | True]
(pop) ; 22
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 6402 | !(p1_37@1746@01) | live]
; [else-branch: 6402 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 6402 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6402 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 24
; [then-branch: 6403 | ret1_2@1712@01 | live]
; [else-branch: 6403 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 6403 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6403 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6404 | True | live]
; [else-branch: 6404 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 6404 | True]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 6405 | !(p2_37@1747@01) | live]
; [else-branch: 6405 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 6405 | !(p2_37@1747@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 6405 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 25
; [then-branch: 6406 | ret2_2@1717@01 | live]
; [else-branch: 6406 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 6406 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6406 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 27
; [then-branch: 6407 | break2@1698@01 | live]
; [else-branch: 6407 | !(break2@1698@01) | live]
(push) ; 28
; [then-branch: 6407 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6407 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 6408 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
; [else-branch: 6408 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(push) ; 23
; [else-branch: 6408 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(pop) ; 23
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 6409 | !(p2_37@1747@01) | live]
; [else-branch: 6409 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 6409 | !(p2_37@1747@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 6409 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 25
; [then-branch: 6410 | ret2_2@1717@01 | live]
; [else-branch: 6410 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 6410 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6410 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 27
; [then-branch: 6411 | break2@1698@01 | live]
; [else-branch: 6411 | !(break2@1698@01) | live]
(push) ; 28
; [then-branch: 6411 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6411 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6412 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 6412 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 6412 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
; [exec]
; assert (p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==>
;   _loop_termination_flag ==> !true) &&
;   (p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==>
;   _loop_termination_flag_3 ==> !true)
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==> _loop_termination_flag ==> !true
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 24
; [then-branch: 6413 | !(p1_37@1746@01) | live]
; [else-branch: 6413 | p1_37@1746@01 | live]
(push) ; 25
; [then-branch: 6413 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6413 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 26
; [then-branch: 6414 | ret1_2@1712@01 | live]
; [else-branch: 6414 | !(ret1_2@1712@01) | live]
(push) ; 27
; [then-branch: 6414 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6414 | !(ret1_2@1712@01)]
; [eval] !break1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 6415 | False | dead]
; [else-branch: 6415 | True | live]
(push) ; 25
; [else-branch: 6415 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==> _loop_termination_flag_3 ==> !true
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 24
; [then-branch: 6416 | !(p2_37@1747@01) | live]
; [else-branch: 6416 | p2_37@1747@01 | live]
(push) ; 25
; [then-branch: 6416 | !(p2_37@1747@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 6416 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 26
; [then-branch: 6417 | ret2_2@1717@01 | live]
; [else-branch: 6417 | !(ret2_2@1717@01) | live]
(push) ; 27
; [then-branch: 6417 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6417 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 28
; [then-branch: 6418 | break2@1698@01 | live]
; [else-branch: 6418 | !(break2@1698@01) | live]
(push) ; 29
; [then-branch: 6418 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6418 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 6419 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
; [else-branch: 6419 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(push) ; 25
; [else-branch: 6419 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_36 && !bypass1_7 ==> true
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6420 | !(p1_36@1616@01) | live]
; [else-branch: 6420 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6420 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6420 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6421 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6421 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6421 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> true
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6422 | !(p2_36@1617@01) | live]
; [else-branch: 6422 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6422 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6422 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6423 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6423 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6423 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> issubtype(typeof(i_1), int())
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6424 | !(p1_36@1616@01) | live]
; [else-branch: 6424 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6424 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6424 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6425 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6425 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6425 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> issubtype(typeof(i_1_0), int())
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6426 | !(p2_36@1617@01) | live]
; [else-branch: 6426 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6426 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6426 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6427 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6427 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6427 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] issubtype(typeof(i_1_0), int())
; [eval] typeof(i_1_0)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6428 | !(p1_36@1616@01) | live]
; [else-branch: 6428 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6428 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6428 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6429 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6429 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6429 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> int___ge__(int___unbox__(i_1_0), 0)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6430 | !(p2_36@1617@01) | live]
; [else-branch: 6430 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6430 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6430 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6431 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6431 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6431 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___ge__(int___unbox__(i_1_0), 0)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6432 | !(p1_36@1616@01) | live]
; [else-branch: 6432 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6432 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6432 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6433 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6433 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6433 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> int___le__(int___unbox__(i_1_0), 7)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6434 | !(p2_36@1617@01) | live]
; [else-branch: 6434 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6434 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6434 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6435 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6435 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6435 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___le__(int___unbox__(i_1_0), 7)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6436 | !(p1_36@1616@01) | live]
; [else-branch: 6436 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6436 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6436 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6437 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6437 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6437 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2))
; [eval] int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6438 | !(p2_36@1617@01) | live]
; [else-branch: 6438 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6438 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6438 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6439 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6439 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6439 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(i_1_0), 2))
; [eval] int___mod__(int___unbox__(i_1_0), 2)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6440 | !(p1_36@1616@01) | live]
; [else-branch: 6440 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6440 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6440 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6441 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6441 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6441 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6442 | True | live]
; [else-branch: 6442 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6442 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before@1721@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before@1721@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6443 | _loop_check_before@1721@01 | live]
; [else-branch: 6443 | !(_loop_check_before@1721@01) | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6443 | _loop_check_before@1721@01]
(assert _loop_check_before@1721@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 30
; [then-branch: 6444 | False | live]
; [else-branch: 6444 | True | live]
(push) ; 31
; [then-branch: 6444 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6444 | True]
; [eval] perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_164)) == none
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 32
; [then-branch: 6445 | False | live]
; [else-branch: 6445 | True | live]
(push) ; 33
; [then-branch: 6445 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6445 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 34
; [then-branch: 6446 | False | live]
; [else-branch: 6446 | True | live]
(push) ; 35
; [then-branch: 6446 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6446 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 36
; [then-branch: 6447 | False | live]
; [else-branch: 6447 | True | live]
(push) ; 37
; [then-branch: 6447 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6447 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 38
; [then-branch: 6448 | False | live]
; [else-branch: 6448 | True | live]
(push) ; 39
; [then-branch: 6448 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 6448 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 6443 | !(_loop_check_before@1721@01)]
(assert (not _loop_check_before@1721@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@1721@01) _loop_check_before@1721@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or (not _loop_check_before@1721@01) _loop_check_before@1721@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (or (not _loop_check_before@1721@01) _loop_check_before@1721@01))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6449 | !(p2_36@1617@01) | live]
; [else-branch: 6449 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6449 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6449 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6450 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6450 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6450 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6451 | True | live]
; [else-branch: 6451 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6451 | True]
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before_3@1722@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before_3@1722@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6452 | _loop_check_before_3@1722@01 | live]
; [else-branch: 6452 | !(_loop_check_before_3@1722@01) | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6452 | _loop_check_before_3@1722@01]
(assert _loop_check_before_3@1722@01)
; [eval] _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 30
; [then-branch: 6453 | False | live]
; [else-branch: 6453 | True | live]
(push) ; 31
; [then-branch: 6453 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6453 | True]
; [eval] perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_164_0)) == none
; [eval] perm(MustTerminate_0(_cthread_164_0))
(push) ; 32
; [then-branch: 6454 | False | live]
; [else-branch: 6454 | True | live]
(push) ; 33
; [then-branch: 6454 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6454 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 34
; [then-branch: 6455 | False | live]
; [else-branch: 6455 | True | live]
(push) ; 35
; [then-branch: 6455 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6455 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 36
; [then-branch: 6456 | False | live]
; [else-branch: 6456 | True | live]
(push) ; 37
; [then-branch: 6456 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6456 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 38
; [then-branch: 6457 | False | live]
; [else-branch: 6457 | True | live]
(push) ; 39
; [then-branch: 6457 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 6457 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 6452 | !(_loop_check_before_3@1722@01)]
(assert (not _loop_check_before_3@1722@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6458 | !(p1_36@1616@01) | live]
; [else-branch: 6458 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6458 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6458 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6459 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6459 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6459 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6460 | True | live]
; [else-branch: 6460 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6460 | True]
; [eval] !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before@1721@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before@1721@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6461 | !(_loop_check_before@1721@01) | live]
; [else-branch: 6461 | _loop_check_before@1721@01 | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6461 | !(_loop_check_before@1721@01)]
(assert (not _loop_check_before@1721@01))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 30
; [then-branch: 6462 | False | live]
; [else-branch: 6462 | True | live]
(push) ; 31
; [then-branch: 6462 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6462 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 32
; [then-branch: 6463 | False | live]
; [else-branch: 6463 | True | live]
(push) ; 33
; [then-branch: 6463 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6463 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 6464 | False | live]
; [else-branch: 6464 | True | live]
(push) ; 35
; [then-branch: 6464 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6464 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 6461 | _loop_check_before@1721@01]
(assert _loop_check_before@1721@01)
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@1721@01 (not _loop_check_before@1721@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or _loop_check_before@1721@01 (not _loop_check_before@1721@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (or _loop_check_before@1721@01 (not _loop_check_before@1721@01)))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6465 | !(p2_36@1617@01) | live]
; [else-branch: 6465 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6465 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6465 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6466 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6466 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6466 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6467 | True | live]
; [else-branch: 6467 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6467 | True]
; [eval] !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_3
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before_3@1722@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before_3@1722@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6468 | !(_loop_check_before_3@1722@01) | live]
; [else-branch: 6468 | _loop_check_before_3@1722@01 | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6468 | !(_loop_check_before_3@1722@01)]
(assert (not _loop_check_before_3@1722@01))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 30
; [then-branch: 6469 | False | live]
; [else-branch: 6469 | True | live]
(push) ; 31
; [then-branch: 6469 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6469 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 32
; [then-branch: 6470 | False | live]
; [else-branch: 6470 | True | live]
(push) ; 33
; [then-branch: 6470 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6470 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 34
; [then-branch: 6471 | False | live]
; [else-branch: 6471 | True | live]
(push) ; 35
; [then-branch: 6471 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6471 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 6468 | _loop_check_before_3@1722@01]
(assert _loop_check_before_3@1722@01)
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] bypass1_7 ==> tmp1 == _loop_measures
(push) ; 24
; [then-branch: 6472 | bypass1_7@1685@01 | dead]
; [else-branch: 6472 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6472 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_0 == i_1
(push) ; 24
; [then-branch: 6473 | bypass1_7@1685@01 | dead]
; [else-branch: 6473 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6473 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_1 == _loop_check_before
(push) ; 24
; [then-branch: 6474 | bypass1_7@1685@01 | dead]
; [else-branch: 6474 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6474 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_2 == break1
(push) ; 24
; [then-branch: 6475 | bypass1_7@1685@01 | dead]
; [else-branch: 6475 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6475 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2 == _loop_measures_3
(push) ; 24
; [then-branch: 6476 | bypass2_7@1686@01 | dead]
; [else-branch: 6476 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6476 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_0 == i_1_0
(push) ; 24
; [then-branch: 6477 | bypass2_7@1686@01 | dead]
; [else-branch: 6477 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6477 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_1 == _loop_check_before_3
(push) ; 24
; [then-branch: 6478 | bypass2_7@1686@01 | dead]
; [else-branch: 6478 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6478 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_2 == break2
(push) ; 24
; [then-branch: 6479 | bypass2_7@1686@01 | dead]
; [else-branch: 6479 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6479 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !p1_37
; [then-branch: 6480 | !(p1_37@1746@01) | dead]
; [else-branch: 6480 | p1_37@1746@01 | live]
(push) ; 20
; [else-branch: 6480 | p1_37@1746@01]
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
; [eval] !p1_37
(push) ; 16
(set-option :timeout 10)
(assert (not p1_37@1746@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6481 | !(p1_37@1746@01) | dead]
; [else-branch: 6481 | p1_37@1746@01 | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 6481 | p1_37@1746@01]
(assert p1_37@1746@01)
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 6347 | !(p1_38@1776@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
(assert (not
  (and
    p1_38@1776@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(pop) ; 12
; [eval] !(p1_38 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_38 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 12
; [then-branch: 6482 | !(p1_38@1776@01) | live]
; [else-branch: 6482 | p1_38@1776@01 | live]
(push) ; 13
; [then-branch: 6482 | !(p1_38@1776@01)]
(assert (not p1_38@1776@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6482 | p1_38@1776@01]
(assert p1_38@1776@01)
; [eval] !ret1_2
(push) ; 14
; [then-branch: 6483 | ret1_2@1712@01 | live]
; [else-branch: 6483 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 6483 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6483 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 16
; [then-branch: 6484 | break1@1697@01 | live]
; [else-branch: 6484 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 6484 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6484 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  p1_38@1776@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    p1_38@1776@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6485 | !(p1_38@1776@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
; [else-branch: 6485 | p1_38@1776@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 6485 | !(p1_38@1776@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
(assert (not
  (and
    p1_38@1776@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
; [eval] p2_38 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 13
; [then-branch: 6486 | !(p2_38@1777@01) | live]
; [else-branch: 6486 | p2_38@1777@01 | live]
(push) ; 14
; [then-branch: 6486 | !(p2_38@1777@01)]
(assert (not p2_38@1777@01))
(pop) ; 14
(push) ; 14
; [else-branch: 6486 | p2_38@1777@01]
(assert p2_38@1777@01)
; [eval] !ret2_2
(push) ; 15
; [then-branch: 6487 | ret2_2@1717@01 | live]
; [else-branch: 6487 | !(ret2_2@1717@01) | live]
(push) ; 16
; [then-branch: 6487 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6487 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 17
; [then-branch: 6488 | break2@1698@01 | live]
; [else-branch: 6488 | !(break2@1698@01) | live]
(push) ; 18
; [then-branch: 6488 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6488 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_38@1777@01
  (and
    p2_38@1777@01
    (=>
      (not ret2_2@1717@01)
      (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(assert (or p2_38@1777@01 (not p2_38@1777@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    p2_38@1777@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6489 | p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
; [else-branch: 6489 | !(p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 6489 | !(p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(assert (not
  (and
    p2_38@1777@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(pop) ; 13
; [eval] !(p2_38 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_38 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 13
; [then-branch: 6490 | !(p2_38@1777@01) | live]
; [else-branch: 6490 | p2_38@1777@01 | live]
(push) ; 14
; [then-branch: 6490 | !(p2_38@1777@01)]
(assert (not p2_38@1777@01))
(pop) ; 14
(push) ; 14
; [else-branch: 6490 | p2_38@1777@01]
(assert p2_38@1777@01)
; [eval] !ret2_2
(push) ; 15
; [then-branch: 6491 | ret2_2@1717@01 | live]
; [else-branch: 6491 | !(ret2_2@1717@01) | live]
(push) ; 16
; [then-branch: 6491 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6491 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 17
; [then-branch: 6492 | break2@1698@01 | live]
; [else-branch: 6492 | !(break2@1698@01) | live]
(push) ; 18
; [then-branch: 6492 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6492 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (and
  p2_38@1777@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    p2_38@1777@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6493 | !(p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 6493 | p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6493 | !(p2_38@1777@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(assert (not
  (and
    p2_38@1777@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
; [exec]
; bypass1_8 := !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6494 | !(p1_37@1746@01) | live]
; [else-branch: 6494 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6494 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6494 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6495 | ret1_2@1712@01 | live]
; [else-branch: 6495 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6495 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6495 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6496 | break1@1697@01 | live]
; [else-branch: 6496 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6496 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6496 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(declare-const bypass1_8@1782@01 Bool)
(assert (=
  bypass1_8@1782@01
  (not
    (and
      p1_37@1746@01
      (and
        (not ret1_2@1712@01)
        (and (not break1@1697@01) (not except1_6@1715@01)))))))
; [exec]
; bypass2_8 := !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 14
; [then-branch: 6497 | !(p2_37@1747@01) | live]
; [else-branch: 6497 | p2_37@1747@01 | live]
(push) ; 15
; [then-branch: 6497 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6497 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 16
; [then-branch: 6498 | ret2_2@1717@01 | live]
; [else-branch: 6498 | !(ret2_2@1717@01) | live]
(push) ; 17
; [then-branch: 6498 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6498 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 18
; [then-branch: 6499 | break2@1698@01 | live]
; [else-branch: 6499 | !(break2@1698@01) | live]
(push) ; 19
; [then-branch: 6499 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6499 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(declare-const bypass2_8@1783@01 Bool)
(assert (=
  bypass2_8@1783@01
  (not
    (and
      p2_37@1747@01
      (and
        (not ret2_2@1717@01)
        (and (not break2@1698@01) (not except2_6@1720@01)))))))
; [exec]
; oldret1_3 := ret1_2
; [exec]
; oldret2_3 := ret2_2
; [exec]
; oldbreak1_0 := break1
; [exec]
; oldbreak2_0 := break2
; [exec]
; oldexcept1_3 := except1_6
; [exec]
; oldexcept2_3 := except2_6
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6500 | !(p1_37@1746@01) | live]
; [else-branch: 6500 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6500 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6500 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6501 | ret1_2@1712@01 | live]
; [else-branch: 6501 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6501 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6501 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6502 | break1@1697@01 | live]
; [else-branch: 6502 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6502 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6502 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6503 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6503 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 6503 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] int___add__(int___unbox__(i_1), 1)
; [eval] int___unbox__(i_1)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@1707@01))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@1707@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@1707@01)))
(push) ; 15
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1))
(pop) ; 15
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1))
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1)))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1)))
(declare-const i_1@1784@01 $Ref)
(assert (=
  i_1@1784@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1707@01) 1))))
; [exec]
; inhale _isDefined(3235689)
(declare-const $t@1785@01 $Snap)
(assert (= $t@1785@01 $Snap.unit))
; [eval] _isDefined(3235689)
(push) ; 15
(pop) ; 15
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6504 | !(p2_37@1747@01) | live]
; [else-branch: 6504 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6504 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6504 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6505 | ret2_2@1717@01 | live]
; [else-branch: 6505 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6505 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6505 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 19
; [then-branch: 6506 | break2@1698@01 | live]
; [else-branch: 6506 | !(break2@1698@01) | live]
(push) ; 20
; [then-branch: 6506 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 20
(push) ; 20
; [else-branch: 6506 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 6507 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
; [else-branch: 6507 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(push) ; 15
; [else-branch: 6507 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(pop) ; 15
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 6508 | !(p2_37@1747@01) | live]
; [else-branch: 6508 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6508 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6508 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6509 | ret2_2@1717@01 | live]
; [else-branch: 6509 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6509 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6509 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 19
; [then-branch: 6510 | break2@1698@01 | live]
; [else-branch: 6510 | !(break2@1698@01) | live]
(push) ; 20
; [then-branch: 6510 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 20
(push) ; 20
; [else-branch: 6510 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6511 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 6511 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6511 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
; [exec]
; thisexcept1_7 := except1_6 && !bypass1_8
; [eval] except1_6 && !bypass1_8
(push) ; 16
; [then-branch: 6512 | !(except1_6@1715@01) | live]
; [else-branch: 6512 | except1_6@1715@01 | live]
(push) ; 17
; [then-branch: 6512 | !(except1_6@1715@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 6512 | except1_6@1715@01]
(assert except1_6@1715@01)
; [eval] !bypass1_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except1_6@1715@01 (not except1_6@1715@01)))
(declare-const thisexcept1_7@1786@01 Bool)
(assert (= thisexcept1_7@1786@01 (and except1_6@1715@01 (not bypass1_8@1782@01))))
; [exec]
; thisexcept2_7 := except2_6 && !bypass2_8
; [eval] except2_6 && !bypass2_8
(push) ; 16
; [then-branch: 6513 | !(except2_6@1720@01) | live]
; [else-branch: 6513 | except2_6@1720@01 | live]
(push) ; 17
; [then-branch: 6513 | !(except2_6@1720@01)]
(assert (not except2_6@1720@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6513 | except2_6@1720@01]
(assert except2_6@1720@01)
; [eval] !bypass2_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except2_6@1720@01 (not except2_6@1720@01)))
(declare-const thisexcept2_7@1787@01 Bool)
(assert (= thisexcept2_7@1787@01 (and except2_6@1720@01 (not bypass2_8@1783@01))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6514 | p1_37@1746@01 | live]
; [else-branch: 6514 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6514 | p1_37@1746@01]
; [exec]
; tmp_ret1_3 := ret1_2
; [exec]
; ret1_2 := oldret1_3
; [exec]
; tmp_break1_3 := break1
; [exec]
; break1 := oldbreak1_0
; [exec]
; tmp_except1_3 := except1_6
; [exec]
; except1_6 := oldexcept1_3
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6515 | p2_37@1747@01 | dead]
; [else-branch: 6515 | !(p2_37@1747@01) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 6515 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 17
; [eval] !p2_37
(push) ; 17
(set-option :timeout 10)
(assert (not p2_37@1747@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6516 | !(p2_37@1747@01) | live]
; [else-branch: 6516 | p2_37@1747@01 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6516 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 6517 | !(p1_37@1746@01) | live]
; [else-branch: 6517 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 6517 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6517 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 20
; [then-branch: 6518 | ret1_2@1712@01 | live]
; [else-branch: 6518 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 6518 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6518 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 22
; [then-branch: 6519 | break1@1697@01 | live]
; [else-branch: 6519 | !(break1@1697@01) | live]
(push) ; 23
; [then-branch: 6519 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6519 | !(break1@1697@01)]
; [eval] !except1_6
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=> (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01)))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_37@1746@01
  (and
    (=> (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6520 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6520 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 6520 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] int___add__(int___unbox__(i_1), 1)
; [eval] int___unbox__(i_1)
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> i_1@1784@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@1784@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@1784@01))
(pop) ; 19
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@1784@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@1784@01)))
(push) ; 19
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1784@01) 1))
(pop) ; 19
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@1784@01) 1))
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1784@01) 1)))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1784@01) 1)))
(declare-const i_1@1788@01 $Ref)
(assert (=
  i_1@1788@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@1784@01) 1))))
; [exec]
; inhale _isDefined(3235689)
(declare-const $t@1789@01 $Snap)
(assert (= $t@1789@01 $Snap.unit))
; [eval] _isDefined(3235689)
(push) ; 19
(pop) ; 19
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6521 | !(p2_37@1747@01) | live]
; [else-branch: 6521 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6521 | !(p2_37@1747@01)]
(pop) ; 20
(push) ; 20
; [else-branch: 6521 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6522 | ret2_2@1717@01 | live]
; [else-branch: 6522 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6522 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6522 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 23
; [then-branch: 6523 | break2@1698@01 | live]
; [else-branch: 6523 | !(break2@1698@01) | live]
(push) ; 24
; [then-branch: 6523 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6523 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 6524 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
; [else-branch: 6524 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(push) ; 19
; [else-branch: 6524 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(pop) ; 19
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 6525 | !(p2_37@1747@01) | live]
; [else-branch: 6525 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6525 | !(p2_37@1747@01)]
(pop) ; 20
(push) ; 20
; [else-branch: 6525 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6526 | ret2_2@1717@01 | live]
; [else-branch: 6526 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6526 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6526 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 23
; [then-branch: 6527 | break2@1698@01 | live]
; [else-branch: 6527 | !(break2@1698@01) | live]
(push) ; 24
; [then-branch: 6527 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6527 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6528 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 6528 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6528 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6529 | p1_37@1746@01 | live]
; [else-branch: 6529 | !(p1_37@1746@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 6529 | p1_37@1746@01]
; [exec]
; ret1_2 := ret1_2 || tmp_ret1_3
; [eval] ret1_2 || tmp_ret1_3
(push) ; 21
; [then-branch: 6530 | ret1_2@1712@01 | live]
; [else-branch: 6530 | !(ret1_2@1712@01) | live]
(push) ; 22
; [then-branch: 6530 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6530 | !(ret1_2@1712@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
; [exec]
; break1 := break1 || tmp_break1_3
; [eval] break1 || tmp_break1_3
(push) ; 21
; [then-branch: 6531 | break1@1697@01 | live]
; [else-branch: 6531 | !(break1@1697@01) | live]
(push) ; 22
; [then-branch: 6531 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6531 | !(break1@1697@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
; [exec]
; except1_6 := except1_6 || tmp_except1_3
; [eval] except1_6 || tmp_except1_3
(push) ; 21
; [then-branch: 6532 | except1_6@1715@01 | live]
; [else-branch: 6532 | !(except1_6@1715@01) | live]
(push) ; 22
; [then-branch: 6532 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6532 | !(except1_6@1715@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not except1_6@1715@01) except1_6@1715@01))
; [then-branch: 6533 | p2_37@1747@01 | dead]
; [else-branch: 6533 | !(p2_37@1747@01) | live]
(push) ; 21
; [else-branch: 6533 | !(p2_37@1747@01)]
(pop) ; 21
; [eval] !p2_37
(push) ; 21
(set-option :timeout 10)
(assert (not p2_37@1747@01))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6534 | !(p2_37@1747@01) | live]
; [else-branch: 6534 | p2_37@1747@01 | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 6534 | !(p2_37@1747@01)]
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 6535 | !(p1_37@1746@01) | live]
; [else-branch: 6535 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 6535 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6535 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 24
; [then-branch: 6536 | ret1_2@1712@01 | live]
; [else-branch: 6536 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 6536 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6536 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 26
; [then-branch: 6537 | break1@1697@01 | live]
; [else-branch: 6537 | !(break1@1697@01) | live]
(push) ; 27
; [then-branch: 6537 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6537 | !(break1@1697@01)]
; [eval] !except1_6
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6538 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6538 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 6538 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [exec]
; _loop_check_before := false
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 6539 | !(p2_37@1747@01) | live]
; [else-branch: 6539 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 6539 | !(p2_37@1747@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 6539 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 25
; [then-branch: 6540 | ret2_2@1717@01 | live]
; [else-branch: 6540 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 6540 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6540 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 27
; [then-branch: 6541 | break2@1698@01 | live]
; [else-branch: 6541 | !(break2@1698@01) | live]
(push) ; 28
; [then-branch: 6541 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6541 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 6542 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
; [else-branch: 6542 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(push) ; 23
; [else-branch: 6542 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(pop) ; 23
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 23
; [then-branch: 6543 | !(p2_37@1747@01) | live]
; [else-branch: 6543 | p2_37@1747@01 | live]
(push) ; 24
; [then-branch: 6543 | !(p2_37@1747@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 6543 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 25
; [then-branch: 6544 | ret2_2@1717@01 | live]
; [else-branch: 6544 | !(ret2_2@1717@01) | live]
(push) ; 26
; [then-branch: 6544 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6544 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 27
; [then-branch: 6545 | break2@1698@01 | live]
; [else-branch: 6545 | !(break2@1698@01) | live]
(push) ; 28
; [then-branch: 6545 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6545 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6546 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
; [else-branch: 6546 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 6546 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
; [exec]
; assert (p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==>
;   _loop_termination_flag ==> !true) &&
;   (p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==>
;   _loop_termination_flag_3 ==> !true)
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6)) ==> _loop_termination_flag ==> !true
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 24
; [then-branch: 6547 | !(p1_37@1746@01) | live]
; [else-branch: 6547 | p1_37@1746@01 | live]
(push) ; 25
; [then-branch: 6547 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6547 | p1_37@1746@01]
; [eval] !ret1_2
(push) ; 26
; [then-branch: 6548 | ret1_2@1712@01 | live]
; [else-branch: 6548 | !(ret1_2@1712@01) | live]
(push) ; 27
; [then-branch: 6548 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6548 | !(ret1_2@1712@01)]
; [eval] !break1
(push) ; 28
; [then-branch: 6549 | break1@1697@01 | live]
; [else-branch: 6549 | !(break1@1697@01) | live]
(push) ; 29
; [then-branch: 6549 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6549 | !(break1@1697@01)]
; [eval] !except1_6
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6550 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
; [else-branch: 6550 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6550 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [eval] _loop_termination_flag ==> !true
(push) ; 26
; [then-branch: 6551 | False | dead]
; [else-branch: 6551 | True | live]
(push) ; 27
; [else-branch: 6551 | True]
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))
  (and
    p1_37@1746@01
    (not ret1_2@1712@01)
    (not break1@1697@01)
    (not except1_6@1715@01))))
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6)) ==> _loop_termination_flag_3 ==> !true
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 24
; [then-branch: 6552 | !(p2_37@1747@01) | live]
; [else-branch: 6552 | p2_37@1747@01 | live]
(push) ; 25
; [then-branch: 6552 | !(p2_37@1747@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 6552 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 26
; [then-branch: 6553 | ret2_2@1717@01 | live]
; [else-branch: 6553 | !(ret2_2@1717@01) | live]
(push) ; 27
; [then-branch: 6553 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6553 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 28
; [then-branch: 6554 | break2@1698@01 | live]
; [else-branch: 6554 | !(break2@1698@01) | live]
(push) ; 29
; [then-branch: 6554 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6554 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 6555 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | dead]
; [else-branch: 6555 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(push) ; 25
; [else-branch: 6555 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01))]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_36 && !bypass1_7 ==> true
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6556 | !(p1_36@1616@01) | live]
; [else-branch: 6556 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6556 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6556 | p1_36@1616@01]
(assert p1_36@1616@01)
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6557 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6557 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6557 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> true
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6558 | !(p2_36@1617@01) | live]
; [else-branch: 6558 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6558 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6558 | p2_36@1617@01]
(assert p2_36@1617@01)
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6559 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6559 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6559 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> issubtype(typeof(i_1), int())
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6560 | !(p1_36@1616@01) | live]
; [else-branch: 6560 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6560 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6560 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6561 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6561 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6561 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (issubtype<Bool> (typeof<PyType> i_1@1788@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (issubtype<Bool> (typeof<PyType> i_1@1788@01) (as int<PyType>  PyType))))
; [eval] p2_36 && !bypass2_7 ==> issubtype(typeof(i_1_0), int())
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6562 | !(p2_36@1617@01) | live]
; [else-branch: 6562 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6562 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6562 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6563 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6563 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6563 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] issubtype(typeof(i_1_0), int())
; [eval] typeof(i_1_0)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6564 | !(p1_36@1616@01) | live]
; [else-branch: 6564 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6564 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6564 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6565 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6565 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6565 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1788@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1788@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1788@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 0))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 0)))
; [eval] p2_36 && !bypass2_7 ==> int___ge__(int___unbox__(i_1_0), 0)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6566 | !(p2_36@1617@01) | live]
; [else-branch: 6566 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6566 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6566 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6567 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6567 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6567 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___ge__(int___unbox__(i_1_0), 0)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6568 | !(p1_36@1616@01) | live]
; [else-branch: 6568 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6568 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6568 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6569 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6569 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6569 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_1, 3235689)), 7)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1788@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1788@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689))))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1788@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 7))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 7))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 7)))
; [eval] p2_36 && !bypass2_7 ==> int___le__(int___unbox__(i_1_0), 7)
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6570 | !(p2_36@1617@01) | live]
; [else-branch: 6570 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6570 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6570 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6571 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6571 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6571 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___le__(int___unbox__(i_1_0), 7)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 7))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6572 | !(p1_36@1616@01) | live]
; [else-branch: 6572 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6572 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6572 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6573 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6573 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6573 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2))
; [eval] int___mod__(int___unbox__(_checkDefined(i_1, 3235689)), 2)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1788@01 3235689))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1788@01 3235689))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689))))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (and
    p1_36@1616@01
    (not bypass1_7@1685@01)
    (_checkDefined%precondition $Snap.unit i_1@1788@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1788@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689))
    (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2)
    (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))))
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
(push) ; 24
(assert (not (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_36@1616@01 (not bypass1_7@1685@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1788@01 3235689)) 2)) (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_36 && !bypass2_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6574 | !(p2_36@1617@01) | live]
; [else-branch: 6574 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6574 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6574 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6575 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6575 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6575 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_1_0), 2)), __prim__int___box__(0))
; [eval] __prim__int___box__(int___mod__(int___unbox__(i_1_0), 2))
; [eval] int___mod__(int___unbox__(i_1_0), 2)
; [eval] int___unbox__(i_1_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 26
; [eval] other != 0
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
(pop) ; 26
; Joined path conditions
(assert (int___mod__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)))
; [eval] __prim__int___box__(0)
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___mod__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 2)) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6576 | !(p1_36@1616@01) | live]
; [else-branch: 6576 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6576 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6576 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6577 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6577 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6577 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6578 | True | live]
; [else-branch: 6578 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6578 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))
(push) ; 28
; [then-branch: 6579 | False | dead]
; [else-branch: 6579 | True | live]
(push) ; 29
; [else-branch: 6579 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6580 | !(p2_36@1617@01) | live]
; [else-branch: 6580 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6580 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6580 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6581 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6581 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6581 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6582 | True | live]
; [else-branch: 6582 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6582 | True]
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before_3@1722@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before_3@1722@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6583 | _loop_check_before_3@1722@01 | live]
; [else-branch: 6583 | !(_loop_check_before_3@1722@01) | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6583 | _loop_check_before_3@1722@01]
(assert _loop_check_before_3@1722@01)
; [eval] _loop_termination_flag_3 || perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
(push) ; 30
; [then-branch: 6584 | False | live]
; [else-branch: 6584 | True | live]
(push) ; 31
; [then-branch: 6584 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6584 | True]
; [eval] perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_164_0)) == none
; [eval] perm(MustTerminate_0(_cthread_164_0))
(push) ; 32
; [then-branch: 6585 | False | live]
; [else-branch: 6585 | True | live]
(push) ; 33
; [then-branch: 6585 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6585 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 34
; [then-branch: 6586 | False | live]
; [else-branch: 6586 | True | live]
(push) ; 35
; [then-branch: 6586 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6586 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 36
; [then-branch: 6587 | False | live]
; [else-branch: 6587 | True | live]
(push) ; 37
; [then-branch: 6587 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6587 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 38
; [then-branch: 6588 | False | live]
; [else-branch: 6588 | True | live]
(push) ; 39
; [then-branch: 6588 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 6588 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 6583 | !(_loop_check_before_3@1722@01)]
(assert (not _loop_check_before_3@1722@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (or (not _loop_check_before_3@1722@01) _loop_check_before_3@1722@01))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] p1_36 && !bypass1_7 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] p1_36 && !bypass1_7
(push) ; 24
; [then-branch: 6589 | !(p1_36@1616@01) | live]
; [else-branch: 6589 | p1_36@1616@01 | live]
(push) ; 25
; [then-branch: 6589 | !(p1_36@1616@01)]
(assert (not p1_36@1616@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6589 | p1_36@1616@01]
; [eval] !bypass1_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_36@1616@01 (not bypass1_7@1685@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_36@1616@01 (not bypass1_7@1685@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6590 | p1_36@1616@01 && !(bypass1_7@1685@01) | live]
; [else-branch: 6590 | !(p1_36@1616@01 && !(bypass1_7@1685@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6590 | p1_36@1616@01 && !(bypass1_7@1685@01)]
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6591 | True | live]
; [else-branch: 6591 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6591 | True]
; [eval] !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6592 | True | live]
; [else-branch: 6592 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6592 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 30
; [then-branch: 6593 | False | live]
; [else-branch: 6593 | True | live]
(push) ; 31
; [then-branch: 6593 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6593 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 32
; [then-branch: 6594 | False | live]
; [else-branch: 6594 | True | live]
(push) ; 33
; [then-branch: 6594 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6594 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 6595 | False | live]
; [else-branch: 6595 | True | live]
(push) ; 35
; [then-branch: 6595 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6595 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_36@1616@01 (not bypass1_7@1685@01)))
; [eval] p2_36 && !bypass2_7 ==> !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] p2_36 && !bypass2_7
(push) ; 24
; [then-branch: 6596 | !(p2_36@1617@01) | live]
; [else-branch: 6596 | p2_36@1617@01 | live]
(push) ; 25
; [then-branch: 6596 | !(p2_36@1617@01)]
(assert (not p2_36@1617@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6596 | p2_36@1617@01]
; [eval] !bypass2_7
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_36@1617@01 (not bypass2_7@1686@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_36@1617@01 (not bypass2_7@1686@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6597 | p2_36@1617@01 && !(bypass2_7@1686@01) | live]
; [else-branch: 6597 | !(p2_36@1617@01 && !(bypass2_7@1686@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6597 | p2_36@1617@01 && !(bypass2_7@1686@01)]
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] !idle2 ==> !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6598 | True | live]
; [else-branch: 6598 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6598 | True]
; [eval] !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_3
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not _loop_check_before_3@1722@01))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not _loop_check_before_3@1722@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6599 | !(_loop_check_before_3@1722@01) | live]
; [else-branch: 6599 | _loop_check_before_3@1722@01 | live]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6599 | !(_loop_check_before_3@1722@01)]
(assert (not _loop_check_before_3@1722@01))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 30
; [then-branch: 6600 | False | live]
; [else-branch: 6600 | True | live]
(push) ; 31
; [then-branch: 6600 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 6600 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 32
; [then-branch: 6601 | False | live]
; [else-branch: 6601 | True | live]
(push) ; 33
; [then-branch: 6601 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6601 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 34
; [then-branch: 6602 | False | live]
; [else-branch: 6602 | True | live]
(push) ; 35
; [then-branch: 6602 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6602 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(push) ; 29
; [else-branch: 6599 | _loop_check_before_3@1722@01]
(assert _loop_check_before_3@1722@01)
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_36@1617@01 (not bypass2_7@1686@01))
  (and
    p2_36@1617@01
    (not bypass2_7@1686@01)
    (or _loop_check_before_3@1722@01 (not _loop_check_before_3@1722@01)))))
(assert (and p2_36@1617@01 (not bypass2_7@1686@01)))
; [eval] bypass1_7 ==> tmp1 == _loop_measures
(push) ; 24
; [then-branch: 6603 | bypass1_7@1685@01 | dead]
; [else-branch: 6603 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6603 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_0 == i_1
(push) ; 24
; [then-branch: 6604 | bypass1_7@1685@01 | dead]
; [else-branch: 6604 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6604 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_1 == _loop_check_before
(push) ; 24
; [then-branch: 6605 | bypass1_7@1685@01 | dead]
; [else-branch: 6605 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6605 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_7 ==> tmp1_2 == break1
(push) ; 24
; [then-branch: 6606 | bypass1_7@1685@01 | dead]
; [else-branch: 6606 | !(bypass1_7@1685@01) | live]
(push) ; 25
; [else-branch: 6606 | !(bypass1_7@1685@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2 == _loop_measures_3
(push) ; 24
; [then-branch: 6607 | bypass2_7@1686@01 | dead]
; [else-branch: 6607 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6607 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_0 == i_1_0
(push) ; 24
; [then-branch: 6608 | bypass2_7@1686@01 | dead]
; [else-branch: 6608 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6608 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_1 == _loop_check_before_3
(push) ; 24
; [then-branch: 6609 | bypass2_7@1686@01 | dead]
; [else-branch: 6609 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6609 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_7 ==> tmp2_2 == break2
(push) ; 24
; [then-branch: 6610 | bypass2_7@1686@01 | dead]
; [else-branch: 6610 | !(bypass2_7@1686@01) | live]
(push) ; 25
; [else-branch: 6610 | !(bypass2_7@1686@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 22
; [then-branch: 6611 | !(p1_37@1746@01) | live]
; [else-branch: 6611 | p1_37@1746@01 | live]
(push) ; 23
; [then-branch: 6611 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6611 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 24
; [then-branch: 6612 | ret1_2@1712@01 | live]
; [else-branch: 6612 | !(ret1_2@1712@01) | live]
(push) ; 25
; [then-branch: 6612 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6612 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 26
; [then-branch: 6613 | break1@1697@01 | live]
; [else-branch: 6613 | !(break1@1697@01) | live]
(push) ; 27
; [then-branch: 6613 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6613 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6614 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
; [else-branch: 6614 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 6614 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !p1_37
(push) ; 20
(set-option :timeout 10)
(assert (not p1_37@1746@01))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6615 | !(p1_37@1746@01) | dead]
; [else-branch: 6615 | p1_37@1746@01 | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 6615 | p1_37@1746@01]
(assert p1_37@1746@01)
(pop) ; 20
(pop) ; 19
(pop) ; 18
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 6616 | !(p1_37@1746@01) | live]
; [else-branch: 6616 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 6616 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6616 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 20
; [then-branch: 6617 | ret1_2@1712@01 | live]
; [else-branch: 6617 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 6617 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6617 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 22
; [then-branch: 6618 | break1@1697@01 | live]
; [else-branch: 6618 | !(break1@1697@01) | live]
(push) ; 23
; [then-branch: 6618 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6618 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6619 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
; [else-branch: 6619 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 6619 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 18
(pop) ; 17
(pop) ; 16
; [eval] !p1_37
(push) ; 16
(set-option :timeout 10)
(assert (not p1_37@1746@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6620 | !(p1_37@1746@01) | dead]
; [else-branch: 6620 | p1_37@1746@01 | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 6620 | p1_37@1746@01]
(assert p1_37@1746@01)
(pop) ; 16
(pop) ; 15
(pop) ; 14
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6621 | !(p1_37@1746@01) | live]
; [else-branch: 6621 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6621 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6621 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6622 | ret1_2@1712@01 | live]
; [else-branch: 6622 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6622 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6622 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6623 | break1@1697@01 | live]
; [else-branch: 6623 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6623 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6623 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6624 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | dead]
; [else-branch: 6624 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 6624 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 6485 | p1_38@1776@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)]
(assert (and
  p1_38@1776@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 6327 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 5779 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
(assert (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(pop) ; 10
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 10
; [then-branch: 6625 | !(p1_37@1746@01) | live]
; [else-branch: 6625 | p1_37@1746@01 | live]
(push) ; 11
; [then-branch: 6625 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 11
(push) ; 11
; [else-branch: 6625 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 12
; [then-branch: 6626 | ret1_2@1712@01 | live]
; [else-branch: 6626 | !(ret1_2@1712@01) | live]
(push) ; 13
; [then-branch: 6626 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 13
(push) ; 13
; [else-branch: 6626 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 14
; [then-branch: 6627 | break1@1697@01 | live]
; [else-branch: 6627 | !(break1@1697@01) | live]
(push) ; 15
; [then-branch: 6627 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6627 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6628 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
; [else-branch: 6628 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 6628 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
(assert (not
  (and
    p1_37@1746@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 11
; [then-branch: 6629 | !(p2_37@1747@01) | live]
; [else-branch: 6629 | p2_37@1747@01 | live]
(push) ; 12
; [then-branch: 6629 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 12
(push) ; 12
; [else-branch: 6629 | p2_37@1747@01]
(assert p2_37@1747@01)
; [eval] !ret2_2
(push) ; 13
; [then-branch: 6630 | ret2_2@1717@01 | live]
; [else-branch: 6630 | !(ret2_2@1717@01) | live]
(push) ; 14
; [then-branch: 6630 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 14
(push) ; 14
; [else-branch: 6630 | !(ret2_2@1717@01)]
(assert (not ret2_2@1717@01))
; [eval] !break2
(push) ; 15
; [then-branch: 6631 | break2@1698@01 | live]
; [else-branch: 6631 | !(break2@1698@01) | live]
(push) ; 16
; [then-branch: 6631 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6631 | !(break2@1698@01)]
(assert (not break2@1698@01))
; [eval] !except2_6
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_37@1747@01
  (and
    p2_37@1747@01
    (=>
      (not ret2_2@1717@01)
      (and (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(assert (or p2_37@1747@01 (not p2_37@1747@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (and
    p2_37@1747@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6632 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 6632 | !(p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 6632 | p2_37@1747@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_37@1747@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; _loop_measures_3 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_38 := p1_37 &&
;   (!ret1_2 && (!break1 && !except1_6) &&
;   int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6) && int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
(push) ; 12
; [then-branch: 6633 | !(p1_37@1746@01) | live]
; [else-branch: 6633 | p1_37@1746@01 | live]
(push) ; 13
; [then-branch: 6633 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6633 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 14
; [then-branch: 6634 | ret1_2@1712@01 | live]
; [else-branch: 6634 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 6634 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6634 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 16
; [then-branch: 6635 | break1@1697@01 | live]
; [else-branch: 6635 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 6635 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6635 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(push) ; 18
; [then-branch: 6636 | except1_6@1715@01 | live]
; [else-branch: 6636 | !(except1_6@1715@01) | live]
(push) ; 19
; [then-branch: 6636 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6636 | !(except1_6@1715@01)]
(assert (not except1_6@1715@01))
; [eval] int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_6@1715@01)
  (and
    (not except1_6@1715@01)
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))))
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and
    (not break1@1697@01)
    (=>
      (not except1_6@1715@01)
      (and
        (not except1_6@1715@01)
        (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
    (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (not ret1_2@1712@01)
    (=>
      (not break1@1697@01)
      (and
        (not break1@1697@01)
        (=>
          (not except1_6@1715@01)
          (and
            (not except1_6@1715@01)
            (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
        (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_37@1746@01
  (and
    p1_37@1746@01
    (=>
      (not ret1_2@1712@01)
      (and
        (not ret1_2@1712@01)
        (=>
          (not break1@1697@01)
          (and
            (not break1@1697@01)
            (=>
              (not except1_6@1715@01)
              (and
                (not except1_6@1715@01)
                (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
            (or (not except1_6@1715@01) except1_6@1715@01)))
        (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(declare-const p1_38@1790@01 Bool)
(assert (=
  p1_38@1790@01
  (and
    p1_37@1746@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and
          (not except1_6@1715@01)
          (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))))))
; [exec]
; p2_38 := p2_37 &&
;   (!ret2_2 && (!break2 && !except2_6) &&
;   int___gt__(int___unbox__(i_1_0), 5))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6) && int___gt__(int___unbox__(i_1_0), 5))
(push) ; 12
; [then-branch: 6637 | !(p2_37@1747@01) | live]
; [else-branch: 6637 | p2_37@1747@01 | live]
(push) ; 13
; [then-branch: 6637 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6637 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 14
; [then-branch: 6638 | ret2_2@1717@01 | live]
; [else-branch: 6638 | !(ret2_2@1717@01) | live]
(push) ; 15
; [then-branch: 6638 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6638 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 16
; [then-branch: 6639 | break2@1698@01 | live]
; [else-branch: 6639 | !(break2@1698@01) | live]
(push) ; 17
; [then-branch: 6639 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6639 | !(break2@1698@01)]
; [eval] !except2_6
(push) ; 18
; [then-branch: 6640 | except2_6@1720@01 | live]
; [else-branch: 6640 | !(except2_6@1720@01) | live]
(push) ; 19
; [then-branch: 6640 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6640 | !(except2_6@1720@01)]
; [eval] int___gt__(int___unbox__(i_1_0), 5)
; [eval] int___unbox__(i_1_0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_6@1720@01)
  (and
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))))
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and
    (=>
      (not except2_6@1720@01)
      (and
        (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
    (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (=>
      (not break2@1698@01)
      (and
        (=>
          (not except2_6@1720@01)
          (and
            (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
        (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_37@1747@01
  (and
    (=>
      (not ret2_2@1717@01)
      (and
        (=>
          (not break2@1698@01)
          (and
            (=>
              (not except2_6@1720@01)
              (and
                (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
            (or (not except2_6@1720@01) except2_6@1720@01)))
        (or (not break2@1698@01) break2@1698@01)))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(declare-const p2_38@1791@01 Bool)
(assert (=
  p2_38@1791@01
  (and
    p2_37@1747@01
    (and
      (not ret2_2@1717@01)
      (and
        (not break2@1698@01)
        (and
          (not except2_6@1720@01)
          (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))))))
; [exec]
; p3_17 := p1_37 &&
;   (!ret1_2 && (!break1 && !except1_6) &&
;   !int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6) && !int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5))
(push) ; 12
; [then-branch: 6641 | !(p1_37@1746@01) | live]
; [else-branch: 6641 | p1_37@1746@01 | live]
(push) ; 13
; [then-branch: 6641 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6641 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 14
; [then-branch: 6642 | ret1_2@1712@01 | live]
; [else-branch: 6642 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 6642 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6642 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 16
; [then-branch: 6643 | break1@1697@01 | live]
; [else-branch: 6643 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 6643 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6643 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(push) ; 18
; [then-branch: 6644 | except1_6@1715@01 | live]
; [else-branch: 6644 | !(except1_6@1715@01) | live]
(push) ; 19
; [then-branch: 6644 | except1_6@1715@01]
(assert except1_6@1715@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6644 | !(except1_6@1715@01)]
(assert (not except1_6@1715@01))
; [eval] !int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___gt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_6@1715@01)
  (and
    (not except1_6@1715@01)
    (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))))
(assert (or (not except1_6@1715@01) except1_6@1715@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@1697@01)
  (and
    (not break1@1697@01)
    (=>
      (not except1_6@1715@01)
      (and
        (not except1_6@1715@01)
        (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
    (or (not except1_6@1715@01) except1_6@1715@01))))
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and
    (not ret1_2@1712@01)
    (=>
      (not break1@1697@01)
      (and
        (not break1@1697@01)
        (=>
          (not except1_6@1715@01)
          (and
            (not except1_6@1715@01)
            (_checkDefined%precondition $Snap.unit i_1@1707@01 3235689)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@1707@01 3235689)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5)))
        (or (not except1_6@1715@01) except1_6@1715@01)))
    (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(declare-const p3_17@1792@01 Bool)
(assert (=
  p3_17@1792@01
  (and
    p1_37@1746@01
    (and
      (not ret1_2@1712@01)
      (and
        (not break1@1697@01)
        (and
          (not except1_6@1715@01)
          (not
            (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@1707@01 3235689)) 5))))))))
; [exec]
; p4_17 := p2_37 &&
;   (!ret2_2 && (!break2 && !except2_6) &&
;   !int___gt__(int___unbox__(i_1_0), 5))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6) && !int___gt__(int___unbox__(i_1_0), 5))
(push) ; 12
; [then-branch: 6645 | !(p2_37@1747@01) | live]
; [else-branch: 6645 | p2_37@1747@01 | live]
(push) ; 13
; [then-branch: 6645 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6645 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 14
; [then-branch: 6646 | ret2_2@1717@01 | live]
; [else-branch: 6646 | !(ret2_2@1717@01) | live]
(push) ; 15
; [then-branch: 6646 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6646 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 16
; [then-branch: 6647 | break2@1698@01 | live]
; [else-branch: 6647 | !(break2@1698@01) | live]
(push) ; 17
; [then-branch: 6647 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6647 | !(break2@1698@01)]
; [eval] !except2_6
(push) ; 18
; [then-branch: 6648 | except2_6@1720@01 | live]
; [else-branch: 6648 | !(except2_6@1720@01) | live]
(push) ; 19
; [then-branch: 6648 | except2_6@1720@01]
(assert except2_6@1720@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6648 | !(except2_6@1720@01)]
; [eval] !int___gt__(int___unbox__(i_1_0), 5)
; [eval] int___gt__(int___unbox__(i_1_0), 5)
; [eval] int___unbox__(i_1_0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1_0@1708@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1_0@1708@01)))
(push) ; 20
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 20
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_6@1720@01)
  (and
    (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))))
(assert (or (not except2_6@1720@01) except2_6@1720@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@1698@01)
  (and
    (=>
      (not except2_6@1720@01)
      (and
        (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
    (or (not except2_6@1720@01) except2_6@1720@01))))
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret2_2@1717@01)
  (and
    (=>
      (not break2@1698@01)
      (and
        (=>
          (not except2_6@1720@01)
          (and
            (issubtype<Bool> (typeof<PyType> i_1_0@1708@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_1_0@1708@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5)))
        (or (not except2_6@1720@01) except2_6@1720@01)))
    (or (not break2@1698@01) break2@1698@01))))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(declare-const p4_17@1793@01 Bool)
(assert (=
  p4_17@1793@01
  (and
    p2_37@1747@01
    (and
      (not ret2_2@1717@01)
      (and
        (not break2@1698@01)
        (and
          (not except2_6@1720@01)
          (not
            (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i_1_0@1708@01) 5))))))))
; [eval] p1_38 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 12
; [then-branch: 6649 | !(p1_38@1790@01) | live]
; [else-branch: 6649 | p1_38@1790@01 | live]
(push) ; 13
; [then-branch: 6649 | !(p1_38@1790@01)]
(assert (not p1_38@1790@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6649 | p1_38@1790@01]
(assert p1_38@1790@01)
; [eval] !ret1_2
(push) ; 14
; [then-branch: 6650 | ret1_2@1712@01 | live]
; [else-branch: 6650 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 6650 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6650 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 16
; [then-branch: 6651 | break1@1697@01 | live]
; [else-branch: 6651 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 6651 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6651 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_38@1790@01
  (and
    p1_38@1790@01
    (=>
      (not ret1_2@1712@01)
      (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01)))
    (or (not ret1_2@1712@01) ret1_2@1712@01))))
(assert (or p1_38@1790@01 (not p1_38@1790@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    p1_38@1790@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6652 | p1_38@1790@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | dead]
; [else-branch: 6652 | !(p1_38@1790@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 6652 | !(p1_38@1790@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
(assert (not
  (and
    p1_38@1790@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(pop) ; 12
; [eval] !(p1_38 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_38 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 12
; [then-branch: 6653 | !(p1_38@1790@01) | live]
; [else-branch: 6653 | p1_38@1790@01 | live]
(push) ; 13
; [then-branch: 6653 | !(p1_38@1790@01)]
(assert (not p1_38@1790@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6653 | p1_38@1790@01]
(assert p1_38@1790@01)
; [eval] !ret1_2
(push) ; 14
; [then-branch: 6654 | ret1_2@1712@01 | live]
; [else-branch: 6654 | !(ret1_2@1712@01) | live]
(push) ; 15
; [then-branch: 6654 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6654 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 16
; [then-branch: 6655 | break1@1697@01 | live]
; [else-branch: 6655 | !(break1@1697@01) | live]
(push) ; 17
; [then-branch: 6655 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6655 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  p1_38@1790@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    p1_38@1790@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6656 | !(p1_38@1790@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
; [else-branch: 6656 | p1_38@1790@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 6656 | !(p1_38@1790@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
(assert (not
  (and
    p1_38@1790@01
    (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
; [eval] p2_38 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 13
; [then-branch: 6657 | !(p2_38@1791@01) | live]
; [else-branch: 6657 | p2_38@1791@01 | live]
(push) ; 14
; [then-branch: 6657 | !(p2_38@1791@01)]
(assert (not p2_38@1791@01))
(pop) ; 14
(push) ; 14
; [else-branch: 6657 | p2_38@1791@01]
(assert p2_38@1791@01)
; [eval] !ret2_2
(push) ; 15
; [then-branch: 6658 | ret2_2@1717@01 | live]
; [else-branch: 6658 | !(ret2_2@1717@01) | live]
(push) ; 16
; [then-branch: 6658 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6658 | !(ret2_2@1717@01)]
; [eval] !break2
(push) ; 17
; [then-branch: 6659 | break2@1698@01 | live]
; [else-branch: 6659 | !(break2@1698@01) | live]
(push) ; 18
; [then-branch: 6659 | break2@1698@01]
(assert break2@1698@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6659 | !(break2@1698@01)]
; [eval] !except2_6
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@1698@01) break2@1698@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=> (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01)))
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_38@1791@01
  (and
    p2_38@1791@01
    (=> (not ret2_2@1717@01) (or (not break2@1698@01) break2@1698@01))
    (or (not ret2_2@1717@01) ret2_2@1717@01))))
(assert (or p2_38@1791@01 (not p2_38@1791@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    p2_38@1791@01
    (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and
  p2_38@1791@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6660 | p2_38@1791@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01) | live]
; [else-branch: 6660 | !(p2_38@1791@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6660 | p2_38@1791@01 && !(ret2_2@1717@01) && !(break2@1698@01) && !(except2_6@1720@01)]
(assert (and
  p2_38@1791@01
  (and (not ret2_2@1717@01) (and (not break2@1698@01) (not except2_6@1720@01)))))
; [exec]
; break2 := true
; [exec]
; bypass1_8 := !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6661 | !(p1_37@1746@01) | live]
; [else-branch: 6661 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6661 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6661 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6662 | ret1_2@1712@01 | live]
; [else-branch: 6662 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6662 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6662 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6663 | break1@1697@01 | live]
; [else-branch: 6663 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6663 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6663 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(declare-const bypass1_8@1794@01 Bool)
(assert (=
  bypass1_8@1794@01
  (not
    (and
      p1_37@1746@01
      (and
        (not ret1_2@1712@01)
        (and (not break1@1697@01) (not except1_6@1715@01)))))))
; [exec]
; bypass2_8 := !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 14
; [then-branch: 6664 | !(p2_37@1747@01) | live]
; [else-branch: 6664 | p2_37@1747@01 | live]
(push) ; 15
; [then-branch: 6664 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6664 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 16
; [then-branch: 6665 | ret2_2@1717@01 | live]
; [else-branch: 6665 | !(ret2_2@1717@01) | live]
(push) ; 17
; [then-branch: 6665 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6665 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p2_37@1747@01 (or (not ret2_2@1717@01) ret2_2@1717@01)))
; [exec]
; oldret1_3 := ret1_2
; [exec]
; oldret2_3 := ret2_2
; [exec]
; oldbreak1_0 := break1
; [exec]
; oldbreak2_0 := break2
; [exec]
; oldexcept1_3 := except1_6
; [exec]
; oldexcept2_3 := except2_6
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6666 | !(p1_37@1746@01) | live]
; [else-branch: 6666 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6666 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6666 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6667 | ret1_2@1712@01 | live]
; [else-branch: 6667 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6667 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6667 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6668 | break1@1697@01 | live]
; [else-branch: 6668 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6668 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6668 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [then-branch: 6669 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | dead]
; [else-branch: 6669 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
(push) ; 14
; [else-branch: 6669 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
(pop) ; 14
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 14
; [then-branch: 6670 | !(p1_37@1746@01) | live]
; [else-branch: 6670 | p1_37@1746@01 | live]
(push) ; 15
; [then-branch: 6670 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6670 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 16
; [then-branch: 6671 | ret1_2@1712@01 | live]
; [else-branch: 6671 | !(ret1_2@1712@01) | live]
(push) ; 17
; [then-branch: 6671 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6671 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 18
; [then-branch: 6672 | break1@1697@01 | live]
; [else-branch: 6672 | !(break1@1697@01) | live]
(push) ; 19
; [then-branch: 6672 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6672 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6673 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
; [else-branch: 6673 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 6673 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 6674 | !(p2_37@1747@01) | live]
; [else-branch: 6674 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6674 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6674 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6675 | ret2_2@1717@01 | live]
; [else-branch: 6675 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6675 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6675 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 6676 | False | dead]
; [else-branch: 6676 | True | live]
(push) ; 15
; [else-branch: 6676 | True]
(pop) ; 15
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 15
; [then-branch: 6677 | !(p2_37@1747@01) | live]
; [else-branch: 6677 | p2_37@1747@01 | live]
(push) ; 16
; [then-branch: 6677 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6677 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 17
; [then-branch: 6678 | ret2_2@1717@01 | live]
; [else-branch: 6678 | !(ret2_2@1717@01) | live]
(push) ; 18
; [then-branch: 6678 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6678 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6679 | True | live]
; [else-branch: 6679 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6679 | True]
; [exec]
; thisexcept1_7 := except1_6 && !bypass1_8
; [eval] except1_6 && !bypass1_8
(push) ; 16
; [then-branch: 6680 | !(except1_6@1715@01) | live]
; [else-branch: 6680 | except1_6@1715@01 | live]
(push) ; 17
; [then-branch: 6680 | !(except1_6@1715@01)]
(assert (not except1_6@1715@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6680 | except1_6@1715@01]
(assert except1_6@1715@01)
; [eval] !bypass1_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except1_6@1715@01 (not except1_6@1715@01)))
(declare-const thisexcept1_7@1795@01 Bool)
(assert (= thisexcept1_7@1795@01 (and except1_6@1715@01 (not bypass1_8@1794@01))))
; [exec]
; thisexcept2_7 := except2_6 && !bypass2_8
; [eval] except2_6 && !bypass2_8
(push) ; 16
; [then-branch: 6681 | !(except2_6@1720@01) | live]
; [else-branch: 6681 | except2_6@1720@01 | live]
(push) ; 17
; [then-branch: 6681 | !(except2_6@1720@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 6681 | except2_6@1720@01]
(assert except2_6@1720@01)
; [eval] !bypass2_8
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or except2_6@1720@01 (not except2_6@1720@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6682 | p1_37@1746@01 | dead]
; [else-branch: 6682 | !(p1_37@1746@01) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 6682 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(pop) ; 16
; [eval] !p1_37
(push) ; 16
(set-option :timeout 10)
(assert (not p1_37@1746@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_37@1746@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6683 | !(p1_37@1746@01) | live]
; [else-branch: 6683 | p1_37@1746@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6683 | !(p1_37@1746@01)]
(assert (not p1_37@1746@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_37@1747@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6684 | p2_37@1747@01 | live]
; [else-branch: 6684 | !(p2_37@1747@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6684 | p2_37@1747@01]
; [exec]
; tmp_ret2_3 := ret2_2
; [exec]
; ret2_2 := oldret2_3
; [exec]
; tmp_break2_3 := break2
; [exec]
; break2 := oldbreak2_0
; [exec]
; tmp_except2_3 := except2_6
; [exec]
; except2_6 := oldexcept2_3
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 6685 | !(p1_37@1746@01) | live]
; [else-branch: 6685 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 6685 | !(p1_37@1746@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 6685 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 20
; [then-branch: 6686 | ret1_2@1712@01 | live]
; [else-branch: 6686 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 6686 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6686 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 22
; [then-branch: 6687 | break1@1697@01 | live]
; [else-branch: 6687 | !(break1@1697@01) | live]
(push) ; 23
; [then-branch: 6687 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6687 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 6688 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | dead]
; [else-branch: 6688 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
(push) ; 18
; [else-branch: 6688 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
(pop) ; 18
; [eval] !(p1_37 && (!ret1_2 && (!break1 && !except1_6)))
; [eval] p1_37 && (!ret1_2 && (!break1 && !except1_6))
(push) ; 18
; [then-branch: 6689 | !(p1_37@1746@01) | live]
; [else-branch: 6689 | p1_37@1746@01 | live]
(push) ; 19
; [then-branch: 6689 | !(p1_37@1746@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 6689 | p1_37@1746@01]
(assert p1_37@1746@01)
; [eval] !ret1_2
(push) ; 20
; [then-branch: 6690 | ret1_2@1712@01 | live]
; [else-branch: 6690 | !(ret1_2@1712@01) | live]
(push) ; 21
; [then-branch: 6690 | ret1_2@1712@01]
(assert ret1_2@1712@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6690 | !(ret1_2@1712@01)]
(assert (not ret1_2@1712@01))
; [eval] !break1
(push) ; 22
; [then-branch: 6691 | break1@1697@01 | live]
; [else-branch: 6691 | !(break1@1697@01) | live]
(push) ; 23
; [then-branch: 6691 | break1@1697@01]
(assert break1@1697@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6691 | !(break1@1697@01)]
(assert (not break1@1697@01))
; [eval] !except1_6
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@1697@01) break1@1697@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ret1_2@1712@01)
  (and (not ret1_2@1712@01) (or (not break1@1697@01) break1@1697@01))))
(assert (or (not ret1_2@1712@01) ret1_2@1712@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and
  p1_37@1746@01
  (and (not ret1_2@1712@01) (and (not break1@1697@01) (not except1_6@1715@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6692 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01)) | live]
; [else-branch: 6692 | p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 6692 | !(p1_37@1746@01 && !(ret1_2@1712@01) && !(break1@1697@01) && !(except1_6@1715@01))]
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 6693 | !(p2_37@1747@01) | live]
; [else-branch: 6693 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6693 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6693 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6694 | ret2_2@1717@01 | live]
; [else-branch: 6694 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6694 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6694 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 6695 | False | dead]
; [else-branch: 6695 | True | live]
(push) ; 19
; [else-branch: 6695 | True]
(pop) ; 19
; [eval] !(p2_37 && (!ret2_2 && (!break2 && !except2_6)))
; [eval] p2_37 && (!ret2_2 && (!break2 && !except2_6))
(push) ; 19
; [then-branch: 6696 | !(p2_37@1747@01) | live]
; [else-branch: 6696 | p2_37@1747@01 | live]
(push) ; 20
; [then-branch: 6696 | !(p2_37@1747@01)]
(assert (not p2_37@1747@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6696 | p2_37@1747@01]
; [eval] !ret2_2
(push) ; 21
; [then-branch: 6697 | ret2_2@1717@01 | live]
; [else-branch: 6697 | !(ret2_2@1717@01) | live]
(push) ; 22
; [then-branch: 6697 | ret2_2@1717@01]
(assert ret2_2@1717@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6697 | !(ret2_2@1717@01)]
; [eval] !break2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not ret2_2@1717@01) ret2_2@1717@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
