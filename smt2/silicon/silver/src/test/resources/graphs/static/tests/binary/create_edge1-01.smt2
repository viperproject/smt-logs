(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-26 21:29:53
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Edge> 0)
(declare-sort Set<Bool> 0)
(declare-sort Set<$Snap> 0)
(declare-sort TrClo 0)
(declare-sort __FieldEnum__ 0)
(declare-sort Edge 0)
(declare-sort $FVF<l> 0)
(declare-sort $FVF<r> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Edge>To$Snap (Set<Edge>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Edge> ($Snap) Set<Edge>)
(assert (forall ((x Set<Edge>)) (!
    (= x ($SortWrappers.$SnapToSet<Edge>($SortWrappers.Set<Edge>To$Snap x)))
    :pattern (($SortWrappers.Set<Edge>To$Snap x))
    :qid |$Snap.$SnapToSet<Edge>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Edge>To$Snap($SortWrappers.$SnapToSet<Edge> x)))
    :pattern (($SortWrappers.$SnapToSet<Edge> x))
    :qid |$Snap.Set<Edge>To$SnapToSet<Edge>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.TrCloTo$Snap (TrClo) $Snap)
(declare-fun $SortWrappers.$SnapToTrClo ($Snap) TrClo)
(assert (forall ((x TrClo)) (!
    (= x ($SortWrappers.$SnapToTrClo($SortWrappers.TrCloTo$Snap x)))
    :pattern (($SortWrappers.TrCloTo$Snap x))
    :qid |$Snap.$SnapToTrCloTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TrCloTo$Snap($SortWrappers.$SnapToTrClo x)))
    :pattern (($SortWrappers.$SnapToTrClo x))
    :qid |$Snap.TrCloTo$SnapToTrClo|
    )))
(declare-fun $SortWrappers.__FieldEnum__To$Snap (__FieldEnum__) $Snap)
(declare-fun $SortWrappers.$SnapTo__FieldEnum__ ($Snap) __FieldEnum__)
(assert (forall ((x __FieldEnum__)) (!
    (= x ($SortWrappers.$SnapTo__FieldEnum__($SortWrappers.__FieldEnum__To$Snap x)))
    :pattern (($SortWrappers.__FieldEnum__To$Snap x))
    :qid |$Snap.$SnapTo__FieldEnum__To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.__FieldEnum__To$Snap($SortWrappers.$SnapTo__FieldEnum__ x)))
    :pattern (($SortWrappers.$SnapTo__FieldEnum__ x))
    :qid |$Snap.__FieldEnum__To$SnapTo__FieldEnum__|
    )))
(declare-fun $SortWrappers.EdgeTo$Snap (Edge) $Snap)
(declare-fun $SortWrappers.$SnapToEdge ($Snap) Edge)
(assert (forall ((x Edge)) (!
    (= x ($SortWrappers.$SnapToEdge($SortWrappers.EdgeTo$Snap x)))
    :pattern (($SortWrappers.EdgeTo$Snap x))
    :qid |$Snap.$SnapToEdgeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.EdgeTo$Snap($SortWrappers.$SnapToEdge x)))
    :pattern (($SortWrappers.$SnapToEdge x))
    :qid |$Snap.EdgeTo$SnapToEdge|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<l>To$Snap ($FVF<l>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<l> ($Snap) $FVF<l>)
(assert (forall ((x $FVF<l>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<l>($SortWrappers.$FVF<l>To$Snap x)))
    :pattern (($SortWrappers.$FVF<l>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<l>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<l>To$Snap($SortWrappers.$SnapTo$FVF<l> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<l> x))
    :qid |$Snap.$FVF<l>To$SnapTo$FVF<l>|
    )))
(declare-fun $SortWrappers.$FVF<r>To$Snap ($FVF<r>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<r> ($Snap) $FVF<r>)
(assert (forall ((x $FVF<r>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<r>($SortWrappers.$FVF<r>To$Snap x)))
    :pattern (($SortWrappers.$FVF<r>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<r>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<r>To$Snap($SortWrappers.$SnapTo$FVF<r> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<r> x))
    :qid |$Snap.$FVF<r>To$SnapTo$FVF<r>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Edge>) Int)
(declare-const Set_empty Set<Edge>)
(declare-fun Set_in (Edge Set<Edge>) Bool)
(declare-fun Set_singleton (Edge) Set<Edge>)
(declare-fun Set_unionone (Set<Edge> Edge) Set<Edge>)
(declare-fun Set_union (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_intersection (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_difference (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_subset (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_equal (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_skolem_diff (Set<Edge> Set<Edge>) Edge)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_skolem_diff (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-const __left__<__FieldEnum__> __FieldEnum__)
(declare-const __right__<__FieldEnum__> __FieldEnum__)
(declare-fun edge_pred<Ref> (Edge) $Ref)
(declare-fun edge_succ<Ref> (Edge) $Ref)
(declare-fun create_edge<Edge> ($Ref $Ref) Edge)
(declare-fun create_edge_<Edge> ($Ref $Ref) Edge)
(declare-fun exists_path<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_path_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_spath<Bool> (Set<Edge> Set<$Ref> $Ref) Bool)
(declare-fun apply_noExit<Bool> (Set<Edge> Set<$Ref> Set<$Ref>) Bool)
(declare-fun inst_uReach<Set<Ref>> (Set<Edge> $Ref) Set<$Ref>)
(declare-fun acyclic_graph<Bool> (Set<Edge>) Bool)
(declare-fun unshared_graph<Bool> (Set<Edge>) Bool)
(declare-fun func_graph<Bool> (Set<Edge>) Bool)
(declare-fun edge<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_<Bool> (Set<Edge> $Ref $Ref) Bool)
; /field_value_functions_declarations.smt2 [l: Ref]
(declare-fun $FVF.domain_l ($FVF<l>) Set<$Ref>)
(declare-fun $FVF.lookup_l ($FVF<l> $Ref) $Ref)
(declare-fun $FVF.after_l ($FVF<l> $FVF<l>) Bool)
(declare-fun $FVF.loc_l ($Ref $Ref) Bool)
(declare-fun $FVF.perm_l ($FPM $Ref) $Perm)
(declare-const $fvfTOP_l $FVF<l>)
; /field_value_functions_declarations.smt2 [r: Ref]
(declare-fun $FVF.domain_r ($FVF<r>) Set<$Ref>)
(declare-fun $FVF.lookup_r ($FVF<r> $Ref) $Ref)
(declare-fun $FVF.after_r ($FVF<r> $FVF<r>) Bool)
(declare-fun $FVF.loc_r ($Ref $Ref) Bool)
(declare-fun $FVF.perm_r ($FPM $Ref) $Perm)
(declare-const $fvfTOP_r $FVF<r>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $$ ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%limited ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%stateless (Set<$Ref>) Bool)
(declare-fun $$%precondition ($Snap Set<$Ref>) Bool)
(declare-fun apply_TCFraming ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%limited ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%stateless (Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%precondition ($Snap Set<$Ref> Set<$Ref>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
(assert (distinct __left__<__FieldEnum__> __right__<__FieldEnum__>))
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Edge>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Edge)) (!
  (not (Set_in o (as Set_empty  Set<Edge>)))
  :pattern ((Set_in o (as Set_empty  Set<Edge>)))
  )))
(assert (forall ((s Set<Edge>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Edge>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Edge))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Edge)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Edge) (o Edge)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Edge)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (o Edge)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (Set_subset a b)
    (forall ((o Edge)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Bool)) (!
  (not (Set_in o (as Set_empty  Set<Bool>)))
  :pattern ((Set_in o (as Set_empty  Set<Bool>)))
  )))
(assert (forall ((s Set<Bool>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Bool))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Bool)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Bool) (o Bool)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Bool)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (o Bool)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (Set_subset a b)
    (forall ((o Bool)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((p $Ref) (s $Ref)) (!
  (and
    (= (edge_pred<Ref> (create_edge<Edge> p s)) p)
    (= (edge_succ<Ref> (create_edge<Edge> p s)) s))
  :pattern ((create_edge<Edge> p s))
  :qid |prog.edge_injectivity|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge<Bool> EG p s) (edge_<Bool> EG p s))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_EdgeSynonim|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge_<Bool> EG p s) (Set_in (create_edge<Edge> p s) EG))
  :pattern ((Set_in (create_edge<Edge> p s) EG))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_Edge|)))
(assert (forall ((EG Set<Edge>) (U Set<$Ref>) (M Set<$Ref>)) (!
  (=>
    (and
      (apply_noExit<Bool> EG U M)
      (forall ((u $Ref) (v $Ref)) (!
        (=>
          (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
          (not (edge<Bool> EG u v)))
        :pattern ((edge<Bool> EG u v))
        :pattern ((Set_in u M) (Set_in v M))
        )))
    (forall ((u $Ref) (v $Ref)) (!
      (=>
        (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
        (not (exists_path<Bool> EG u v)))
      :pattern ((exists_path<Bool> EG u v))
      :pattern ((Set_in u M) (Set_in v M))
      )))
  :pattern ((apply_noExit<Bool> EG U M))
  :qid |prog.ax_NoExit|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (v $Ref)) (!
  (= (Set_in v (inst_uReach<Set<Ref>> EG x)) (exists_path<Bool> EG x v))
  :pattern ((Set_in v (inst_uReach<Set<Ref>> EG x)))
  :pattern ((exists_path<Bool> EG x v))
  :qid |prog.ax_instantiation_uReach|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (= (exists_path<Bool> EG start end) (exists_path_<Bool> EG start end))
  :pattern ((exists_path<Bool> EG start end))
  :qid |prog.ax_Alias|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (=
    (exists_path_<Bool> EG start end)
    (or
      (= start end)
      (exists ((w $Ref)) (!
        (and (edge<Bool> EG start w) (exists_path_<Bool> EG w end))
        :pattern ((edge<Bool> EG start w))
        :pattern ((exists_path_<Bool> EG w end))
        ))))
  :pattern ((exists_path<Bool> EG start end))
  :pattern ((edge<Bool> EG start end))
  :qid |prog.ax_ExistsPath|)))
(assert (forall ((EG Set<Edge>) (u $Ref) (v $Ref) (w $Ref)) (!
  (=>
    (and (exists_path_<Bool> EG u w) (exists_path_<Bool> EG w v))
    (exists_path_<Bool> EG u v))
  :pattern ((exists_path<Bool> EG u w) (exists_path<Bool> EG w v))
  :qid |prog.ax_ExistsPathTrans|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (acyclic_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref)) (!
      (or (not (edge<Bool> EG v1 v2)) (not (exists_path<Bool> EG v2 v1)))
      :pattern ((edge<Bool> EG v1 v2))
      :pattern ((exists_path<Bool> EG v2 v1))
      )))
  :pattern ((acyclic_graph<Bool> EG))
  :qid |prog.ax_AcyclicGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (unshared_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v1 v) (edge<Bool> EG v2 v)) (= v1 v2))
      :pattern ((edge<Bool> EG v1 v) (edge<Bool> EG v2 v))
      )))
  :pattern ((unshared_graph<Bool> EG))
  :qid |prog.ax_UnsharedGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (func_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v v1) (edge<Bool> EG v v2)) (= v1 v2))
      :pattern ((edge<Bool> EG v v1) (edge<Bool> EG v v2))
      )))
  :pattern ((func_graph<Bool> EG))
  :qid |prog.ax_FuncGraph|)))
; /field_value_functions_axioms.smt2 [l: Ref]
(assert (forall ((vs $FVF<l>) (ws $FVF<l>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_l vs) ($FVF.domain_l ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_l vs))
            (= ($FVF.lookup_l vs x) ($FVF.lookup_l ws x)))
          :pattern (($FVF.lookup_l vs x) ($FVF.lookup_l ws x))
          :qid |qp.$FVF<l>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<l>To$Snap vs)
              ($SortWrappers.$FVF<l>To$Snap ws)
              )
    :qid |qp.$FVF<l>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_l pm r))
    :pattern (($FVF.perm_l pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_l f r) true)
    :pattern (($FVF.loc_l f r)))))
; /field_value_functions_axioms.smt2 [r: Ref]
(assert (forall ((vs $FVF<r>) (ws $FVF<r>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_r vs) ($FVF.domain_r ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_r vs))
            (= ($FVF.lookup_r vs x) ($FVF.lookup_r ws x)))
          :pattern (($FVF.lookup_r vs x) ($FVF.lookup_r ws x))
          :qid |qp.$FVF<r>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<r>To$Snap vs)
              ($SortWrappers.$FVF<r>To$Snap ws)
              )
    :qid |qp.$FVF<r>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_r pm r))
    :pattern (($FVF.perm_r pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_r f r) true)
    :pattern (($FVF.loc_r f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun inv@7@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@8@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun inv@12@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@13@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@6@00 ($Snap Set<$Ref>) $FVF<l>)
(declare-fun sm@11@00 ($Snap Set<$Ref>) $FVF<r>)
(declare-fun sm@9@00 ($Snap Set<$Ref>) $FVF<l>)
(declare-fun sm@14@00 ($Snap Set<$Ref>) $FVF<r>)
(declare-fun inv@24@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@25@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@29@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@30@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@33@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@34@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@37@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@38@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@46@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@47@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@50@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@51@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@55@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@56@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@60@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@61@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@67@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@68@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@72@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@73@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@77@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@78@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@82@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@83@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@89@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@90@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@94@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@95@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@99@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@100@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@104@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@105@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@111@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@112@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@116@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@117@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@121@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@122@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@126@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@127@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@23@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@28@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@26@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@31@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@48@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@53@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@58@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@63@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@70@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@75@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@80@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@85@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@92@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@97@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@102@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@107@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@114@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@119@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(declare-fun sm@124@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<l>)
(declare-fun sm@129@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<r>)
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (= ($$%limited s@$ refs@0@00) ($$ s@$ refs@0@00))
  :pattern (($$ s@$ refs@0@00))
  :qid |quant-u-7090|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  ($$%stateless refs@0@00)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-7091|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) (and
    (forall ((n@5@00 $Ref)) (!
      (=>
        (Set_in n@5@00 refs@0@00)
        (and
          (= (inv@7@00 s@$ refs@0@00 n@5@00) n@5@00)
          (img@8@00 s@$ refs@0@00 n@5@00)))
      :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) n@5@00) n@5@00))
      :qid |quant-u-7095|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@8@00 s@$ refs@0@00 r)
          (Set_in (inv@7@00 s@$ refs@0@00 r) refs@0@00))
        (= (inv@7@00 s@$ refs@0@00 r) r))
      :pattern ((inv@7@00 s@$ refs@0@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@10@00 $Ref)) (!
      (=>
        (Set_in n@10@00 refs@0@00)
        (and
          (= (inv@12@00 s@$ refs@0@00 n@10@00) n@10@00)
          (img@13@00 s@$ refs@0@00 n@10@00)))
      :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.second s@$)) n@10@00) n@10@00))
      :qid |quant-u-7098|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@13@00 s@$ refs@0@00 r)
          (Set_in (inv@12@00 s@$ refs@0@00 r) refs@0@00))
        (= (inv@12@00 s@$ refs@0@00 r) r))
      :pattern ((inv@12@00 s@$ refs@0@00 r))
      :qid |r-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_l (sm@6@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef0|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_r (sm@11@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef3|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@8@00 s@$ refs@0@00 r)
          (Set_in (inv@7@00 s@$ refs@0@00 r) refs@0@00))
        (=
          ($FVF.lookup_l (sm@9@00 s@$ refs@0@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@9@00 s@$ refs@0@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef1|))
    (forall ((r $Ref)) (!
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
      :pattern (($FVF.lookup_l (sm@9@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef2|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@13@00 s@$ refs@0@00 r)
          (Set_in (inv@12@00 s@$ refs@0@00 r) refs@0@00))
        (=
          ($FVF.lookup_r (sm@14@00 s@$ refs@0@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.second s@$)) r)))
      :pattern (($FVF.lookup_r (sm@14@00 s@$ refs@0@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.second s@$)) r))
      :qid |qp.fvfValDef4|))
    (forall ((r $Ref)) (!
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.second s@$)) r) r)
      :pattern (($FVF.lookup_r (sm@14@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef5|))
    (=>
      ($$%precondition s@$ refs@0@00)
      (and
        (forall ((p $Ref) (s $Ref)) (!
          (=
            (and
              (Set_in p refs@0@00)
              (and
                (Set_in s refs@0@00)
                (or
                  (= ($FVF.lookup_l (sm@9@00 s@$ refs@0@00) p) s)
                  (= ($FVF.lookup_r (sm@14@00 s@$ refs@0@00) p) s))))
            (Set_in (create_edge<Edge> p s) result@1@00))
          :pattern ((create_edge<Edge> p s))
          ))
        (forall ((p $Ref) (s $Ref)) (!
          (=>
            (and (Set_in p refs@0@00) (exists_path<Bool> result@1@00 p s))
            (Set_in s refs@0@00))
          :pattern ((Set_in p refs@0@00) (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
          ))
        (forall ((p $Ref) (s $Ref)) (!
          (=>
            (and (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
            (Set_in p refs@0@00))
          :pattern ((Set_in p refs@0@00) (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
          ))))))
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-7100|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-7101|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-7102|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-7103|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (=
    (apply_TCFraming%limited s@$ g0@2@00 g1@3@00)
    (apply_TCFraming s@$ g0@2@00 g1@3@00))
  :pattern ((apply_TCFraming s@$ g0@2@00 g1@3@00))
  :qid |quant-u-7092|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (apply_TCFraming%stateless g0@2@00 g1@3@00)
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-7093|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (and
    (forall ((n@22@00 $Ref)) (!
      (=>
        (Set_in n@22@00 g0@2@00)
        (and
          (= (inv@24@00 s@$ g0@2@00 g1@3@00 n@22@00) n@22@00)
          (img@25@00 s@$ g0@2@00 g1@3@00 n@22@00)))
      :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) n@22@00) n@22@00))
      :qid |quant-u-7105|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@25@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@24@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@24@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@27@00 $Ref)) (!
      (=>
        (Set_in n@27@00 g0@2@00)
        (and
          (= (inv@29@00 s@$ g0@2@00 g1@3@00 n@27@00) n@27@00)
          (img@30@00 s@$ g0@2@00 g1@3@00 n@27@00)))
      :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) n@27@00) n@27@00))
      :qid |quant-u-7108|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@30@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@29@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@29@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@32@00 $Ref)) (!
      (=>
        (Set_in n@32@00 g1@3@00)
        (and
          (= (inv@33@00 s@$ g0@2@00 g1@3@00 n@32@00) n@32@00)
          (img@34@00 s@$ g0@2@00 g1@3@00 n@32@00)))
      :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) n@32@00) n@32@00))
      :qid |quant-u-7111|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@34@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@33@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@33@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@36@00 $Ref)) (!
      (=>
        (Set_in n@36@00 g1@3@00)
        (and
          (= (inv@37@00 s@$ g0@2@00 g1@3@00 n@36@00) n@36@00)
          (img@38@00 s@$ g0@2@00 g1@3@00 n@36@00)))
      :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) n@36@00) n@36@00))
      :qid |quant-u-7115|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@38@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@37@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@37@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@45@00 $Ref)) (!
      (=>
        (Set_in n@45@00 g0@2@00)
        (and
          (= (inv@46@00 s@$ g0@2@00 g1@3@00 n@45@00) n@45@00)
          (img@47@00 s@$ g0@2@00 g1@3@00 n@45@00)))
      :pattern ((Set_in n@45@00 g0@2@00))
      :pattern ((inv@46@00 s@$ g0@2@00 g1@3@00 n@45@00))
      :pattern ((img@47@00 s@$ g0@2@00 g1@3@00 n@45@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@47@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@46@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@46@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@49@00 $Ref)) (!
      (=>
        (Set_in n@49@00 g0@2@00)
        (and
          (= (inv@50@00 s@$ g0@2@00 g1@3@00 n@49@00) n@49@00)
          (img@51@00 s@$ g0@2@00 g1@3@00 n@49@00)))
      :pattern ((Set_in n@49@00 g0@2@00))
      :pattern ((inv@50@00 s@$ g0@2@00 g1@3@00 n@49@00))
      :pattern ((img@51@00 s@$ g0@2@00 g1@3@00 n@49@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@51@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@50@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@50@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@50@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@54@00 $Ref)) (!
      (=>
        (Set_in n@54@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@55@00 s@$ g0@2@00 g1@3@00 n@54@00) n@54@00)
          (img@56@00 s@$ g0@2@00 g1@3@00 n@54@00)))
      :pattern ((Set_in n@54@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@55@00 s@$ g0@2@00 g1@3@00 n@54@00))
      :pattern ((img@56@00 s@$ g0@2@00 g1@3@00 n@54@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@56@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@55@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@55@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@55@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@59@00 $Ref)) (!
      (=>
        (Set_in n@59@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@60@00 s@$ g0@2@00 g1@3@00 n@59@00) n@59@00)
          (img@61@00 s@$ g0@2@00 g1@3@00 n@59@00)))
      :pattern ((Set_in n@59@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@60@00 s@$ g0@2@00 g1@3@00 n@59@00))
      :pattern ((img@61@00 s@$ g0@2@00 g1@3@00 n@59@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@61@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@60@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@60@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@66@00 $Ref)) (!
      (=>
        (Set_in n@66@00 g1@3@00)
        (and
          (= (inv@67@00 s@$ g0@2@00 g1@3@00 n@66@00) n@66@00)
          (img@68@00 s@$ g0@2@00 g1@3@00 n@66@00)))
      :pattern ((Set_in n@66@00 g1@3@00))
      :pattern ((inv@67@00 s@$ g0@2@00 g1@3@00 n@66@00))
      :pattern ((img@68@00 s@$ g0@2@00 g1@3@00 n@66@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@68@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@67@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@67@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@67@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@71@00 $Ref)) (!
      (=>
        (Set_in n@71@00 g1@3@00)
        (and
          (= (inv@72@00 s@$ g0@2@00 g1@3@00 n@71@00) n@71@00)
          (img@73@00 s@$ g0@2@00 g1@3@00 n@71@00)))
      :pattern ((Set_in n@71@00 g1@3@00))
      :pattern ((inv@72@00 s@$ g0@2@00 g1@3@00 n@71@00))
      :pattern ((img@73@00 s@$ g0@2@00 g1@3@00 n@71@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@73@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@72@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@72@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@72@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@76@00 $Ref)) (!
      (=>
        (Set_in n@76@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@77@00 s@$ g0@2@00 g1@3@00 n@76@00) n@76@00)
          (img@78@00 s@$ g0@2@00 g1@3@00 n@76@00)))
      :pattern ((Set_in n@76@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@77@00 s@$ g0@2@00 g1@3@00 n@76@00))
      :pattern ((img@78@00 s@$ g0@2@00 g1@3@00 n@76@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@78@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@77@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@77@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@77@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@81@00 $Ref)) (!
      (=>
        (Set_in n@81@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@82@00 s@$ g0@2@00 g1@3@00 n@81@00) n@81@00)
          (img@83@00 s@$ g0@2@00 g1@3@00 n@81@00)))
      :pattern ((Set_in n@81@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@82@00 s@$ g0@2@00 g1@3@00 n@81@00))
      :pattern ((img@83@00 s@$ g0@2@00 g1@3@00 n@81@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@83@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@82@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@82@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@88@00 $Ref)) (!
      (=>
        (Set_in n@88@00 g0@2@00)
        (and
          (= (inv@89@00 s@$ g0@2@00 g1@3@00 n@88@00) n@88@00)
          (img@90@00 s@$ g0@2@00 g1@3@00 n@88@00)))
      :pattern ((Set_in n@88@00 g0@2@00))
      :pattern ((inv@89@00 s@$ g0@2@00 g1@3@00 n@88@00))
      :pattern ((img@90@00 s@$ g0@2@00 g1@3@00 n@88@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@90@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@89@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@89@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@89@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@93@00 $Ref)) (!
      (=>
        (Set_in n@93@00 g0@2@00)
        (and
          (= (inv@94@00 s@$ g0@2@00 g1@3@00 n@93@00) n@93@00)
          (img@95@00 s@$ g0@2@00 g1@3@00 n@93@00)))
      :pattern ((Set_in n@93@00 g0@2@00))
      :pattern ((inv@94@00 s@$ g0@2@00 g1@3@00 n@93@00))
      :pattern ((img@95@00 s@$ g0@2@00 g1@3@00 n@93@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@95@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@94@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@94@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@94@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@98@00 $Ref)) (!
      (=>
        (Set_in n@98@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@99@00 s@$ g0@2@00 g1@3@00 n@98@00) n@98@00)
          (img@100@00 s@$ g0@2@00 g1@3@00 n@98@00)))
      :pattern ((Set_in n@98@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@99@00 s@$ g0@2@00 g1@3@00 n@98@00))
      :pattern ((img@100@00 s@$ g0@2@00 g1@3@00 n@98@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@100@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@99@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@99@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@99@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@103@00 $Ref)) (!
      (=>
        (Set_in n@103@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@104@00 s@$ g0@2@00 g1@3@00 n@103@00) n@103@00)
          (img@105@00 s@$ g0@2@00 g1@3@00 n@103@00)))
      :pattern ((Set_in n@103@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@104@00 s@$ g0@2@00 g1@3@00 n@103@00))
      :pattern ((img@105@00 s@$ g0@2@00 g1@3@00 n@103@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@105@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@104@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@104@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@104@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@110@00 $Ref)) (!
      (=>
        (Set_in n@110@00 g1@3@00)
        (and
          (= (inv@111@00 s@$ g0@2@00 g1@3@00 n@110@00) n@110@00)
          (img@112@00 s@$ g0@2@00 g1@3@00 n@110@00)))
      :pattern ((Set_in n@110@00 g1@3@00))
      :pattern ((inv@111@00 s@$ g0@2@00 g1@3@00 n@110@00))
      :pattern ((img@112@00 s@$ g0@2@00 g1@3@00 n@110@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@112@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@111@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@111@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@111@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@115@00 $Ref)) (!
      (=>
        (Set_in n@115@00 g1@3@00)
        (and
          (= (inv@116@00 s@$ g0@2@00 g1@3@00 n@115@00) n@115@00)
          (img@117@00 s@$ g0@2@00 g1@3@00 n@115@00)))
      :pattern ((Set_in n@115@00 g1@3@00))
      :pattern ((inv@116@00 s@$ g0@2@00 g1@3@00 n@115@00))
      :pattern ((img@117@00 s@$ g0@2@00 g1@3@00 n@115@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@117@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@116@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@116@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@116@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((n@120@00 $Ref)) (!
      (=>
        (Set_in n@120@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@121@00 s@$ g0@2@00 g1@3@00 n@120@00) n@120@00)
          (img@122@00 s@$ g0@2@00 g1@3@00 n@120@00)))
      :pattern ((Set_in n@120@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@121@00 s@$ g0@2@00 g1@3@00 n@120@00))
      :pattern ((img@122@00 s@$ g0@2@00 g1@3@00 n@120@00))
      :qid |l-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@122@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@121@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@121@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@121@00 s@$ g0@2@00 g1@3@00 r))
      :qid |l-fctOfInv|))
    (forall ((n@125@00 $Ref)) (!
      (=>
        (Set_in n@125@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@126@00 s@$ g0@2@00 g1@3@00 n@125@00) n@125@00)
          (img@127@00 s@$ g0@2@00 g1@3@00 n@125@00)))
      :pattern ((Set_in n@125@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@126@00 s@$ g0@2@00 g1@3@00 n@125@00))
      :pattern ((img@127@00 s@$ g0@2@00 g1@3@00 n@125@00))
      :qid |r-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@127@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@126@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@126@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@126@00 s@$ g0@2@00 g1@3@00 r))
      :qid |r-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_l (sm@23@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef6|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_r (sm@28@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef9|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@25@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (=
          ($FVF.lookup_l (sm@26@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@26@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef7|))
    (forall ((r $Ref)) (!
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
      :pattern (($FVF.lookup_l (sm@26@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef8|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@30@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (=
          ($FVF.lookup_r (sm@31@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@31@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef10|))
    (forall ((r $Ref)) (!
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_r (sm@31@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef11|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@48@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@47@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@47@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@48@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@48@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef21|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@47@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@48@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@48@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef18|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@47@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@48@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@48@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef19|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@48@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef20|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@53@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@50@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@51@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@50@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@51@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@53@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@53@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef28|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@50@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@51@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@53@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@53@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef25|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@50@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@51@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@53@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@53@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef26|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@53@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef27|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@58@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@55@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@56@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@55@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@56@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@58@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@58@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef35|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@55@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@56@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@58@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@58@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef32|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@55@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@56@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@58@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@58@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef33|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@58@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef34|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@63@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@63@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@63@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef42|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@63@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@63@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef39|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@63@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@63@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef40|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@63@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef41|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@70@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@67@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@68@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@67@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@68@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@70@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@70@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef49|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@67@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@68@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@70@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@70@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef46|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@67@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@68@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@70@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@70@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef47|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@70@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef48|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@75@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@72@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@73@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@72@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@73@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@75@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@75@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef56|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@72@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@73@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@75@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@75@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef53|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@72@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@73@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@75@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@75@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef54|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@75@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef55|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@80@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@77@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@78@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@77@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@78@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@80@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@80@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef63|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@77@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@78@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@80@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@80@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef60|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@77@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@78@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@80@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@80@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef61|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@80@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef62|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@85@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@85@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@85@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef70|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@85@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@85@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef67|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@85@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@85@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef68|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@85@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef69|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@92@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@89@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@90@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@89@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@90@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@92@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@92@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef77|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@89@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@90@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@92@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@92@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef74|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@89@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@90@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@92@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@92@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef75|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@92@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef76|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@97@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@94@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@95@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@94@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@95@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@97@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@97@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef84|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@94@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@95@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@97@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@97@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef81|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@94@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@95@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@97@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@97@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef82|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@97@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef83|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@102@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@99@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@100@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@99@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@100@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@102@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@102@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef91|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@99@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@100@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@102@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@102@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef88|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@99@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@100@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@102@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@102@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef89|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@102@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef90|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@107@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@104@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@105@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@104@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@105@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@107@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@107@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef98|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@104@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@105@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@107@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@107@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef95|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@104@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@105@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@107@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@107@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef96|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@107@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef97|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@114@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@111@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@112@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@111@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@112@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@114@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@114@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef105|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@111@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@112@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@114@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@114@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef102|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@111@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@112@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@114@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@114@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef103|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@114@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef104|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@119@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@116@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@117@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@116@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@117@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@119@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@119@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef112|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@116@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@117@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@119@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@119@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef109|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@116@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@117@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@119@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@119@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef110|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@119@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef111|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_l (sm@124@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@121@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@122@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@121@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@122@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_l (sm@124@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_l (sm@124@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef119|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@121@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@122@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@25@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@24@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_l (sm@124@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_l (sm@124@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef116|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@121@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@122@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@34@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_l (sm@124@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r)))
      :pattern (($FVF.lookup_l (sm@124@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r))
      :qid |qp.fvfValDef117|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first s@$)) r) r)
        ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second s@$)))) r) r))
      :pattern (($FVF.lookup_l (sm@124@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef118|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_r (sm@129@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@126@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@127@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@126@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@127@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_r (sm@129@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_r (sm@129@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef126|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@126@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@127@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@38@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_r (sm@129@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r)))
      :pattern (($FVF.lookup_r (sm@129@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r))
      :qid |qp.fvfValDef123|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@126@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@127@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@30@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@29@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_r (sm@129@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_r (sm@129@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef124|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) r) r)
        ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_r (sm@129@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef125|))
    (=>
      (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
      (and
        (Set_equal (Set_union g0@2@00 g1@3@00) (Set_union g1@3@00 g0@2@00))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ (ite
                  (Set_in v g0@2@00)
                  (ite
                    (Set_in u g0@2@00)
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v)))
            (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ (ite
                  (Set_in v g1@3@00)
                  (ite
                    (Set_in u g1@3@00)
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v)))
            (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (not
                  (exists_path<Bool> ($$ (ite
                    (Set_in v g0@2@00)
                    (ite
                      (Set_in u g0@2@00)
                      ($Snap.combine
                        ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                        ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
                      ($Snap.combine
                        ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                        ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))))
            (not
              (exists_path<Bool> ($$ (ite
                (and
                  (Set_in u g0@2@00)
                  (and
                    (Set_in v g0@2@00)
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v)))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (not
                  (exists_path<Bool> ($$ (ite
                    (Set_in v g1@3@00)
                    (ite
                      (Set_in u g1@3@00)
                      ($Snap.combine
                        ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                        ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
                      ($Snap.combine
                        ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                        ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))))
            (not
              (exists_path<Bool> ($$ (ite
                (and
                  (Set_in u g1@3@00)
                  (and
                    (Set_in v g1@3@00)
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)) u v)))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          ))))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-7172|)))
; WARNING: (2416,11): 'if' cannot be used in patterns.
; WARNING: (2416,11): 'if' cannot be used in patterns.
; WARNING: (2416,11): 'and' cannot be used in patterns.
; WARNING: (2416,11): 'and' cannot be used in patterns.
; WARNING: (2416,11): 'if' cannot be used in patterns.
; WARNING: (2477,11): 'if' cannot be used in patterns.
; WARNING: (2477,11): 'if' cannot be used in patterns.
; WARNING: (2477,11): 'and' cannot be used in patterns.
; WARNING: (2477,11): 'and' cannot be used in patterns.
; WARNING: (2477,11): 'if' cannot be used in patterns.
; WARNING: (2540,11): 'if' cannot be used in patterns.
; WARNING: (2540,11): 'if' cannot be used in patterns.
; WARNING: (2540,11): 'and' cannot be used in patterns.
; WARNING: (2540,11): 'and' cannot be used in patterns.
; WARNING: (2540,11): 'if' cannot be used in patterns.
; WARNING: (2603,11): 'if' cannot be used in patterns.
; WARNING: (2603,11): 'if' cannot be used in patterns.
; WARNING: (2603,11): 'and' cannot be used in patterns.
; WARNING: (2603,11): 'and' cannot be used in patterns.
; WARNING: (2603,11): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) true)
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-7173|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g0@2@00) (Set_in v g0@2@00))
          ($$%precondition (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00))
        (=>
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (exists_path<Bool> ($$ (ite
                (Set_in v g0@2@00)
                (ite
                  (Set_in u g0@2@00)
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v)))
          (and
            (=>
              (and (Set_in u g0@2@00) (Set_in v g0@2@00))
              ($$%precondition ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00))
            ($$%precondition (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g0@2@00)
        (ite
          (Set_in u g0@2@00)
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-7174|)))
; WARNING: (2695,7): 'if' cannot be used in patterns.
; WARNING: (2695,7): 'if' cannot be used in patterns.
; WARNING: (2695,7): 'and' cannot be used in patterns.
; WARNING: (2695,7): 'and' cannot be used in patterns.
; WARNING: (2695,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g1@3@00) (Set_in v g1@3@00))
          ($$%precondition (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00))
        (=>
          (and
            (Set_in u g1@3@00)
            (and
              (Set_in v g1@3@00)
              (exists_path<Bool> ($$ (ite
                (Set_in v g1@3@00)
                (ite
                  (Set_in u g1@3@00)
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
                ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v)))
          (and
            (=>
              (and (Set_in u g1@3@00) (Set_in v g1@3@00))
              ($$%precondition ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00))
            ($$%precondition (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g1@3@00)
        (ite
          (Set_in u g1@3@00)
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@3@00)
          (and
            (Set_in v g1@3@00)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-7175|)))
; WARNING: (2783,7): 'if' cannot be used in patterns.
; WARNING: (2783,7): 'if' cannot be used in patterns.
; WARNING: (2783,7): 'and' cannot be used in patterns.
; WARNING: (2783,7): 'and' cannot be used in patterns.
; WARNING: (2783,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g0@2@00) (Set_in v g0@2@00))
          ($$%precondition (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00))
        (=>
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (not
                (exists_path<Bool> ($$ (ite
                  (Set_in v g0@2@00)
                  (ite
                    (Set_in u g0@2@00)
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))))
          (and
            (=>
              (and (Set_in u g0@2@00) (Set_in v g0@2@00))
              ($$%precondition ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00))
            ($$%precondition (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g0@2@00)
        (ite
          (Set_in u g0@2@00)
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00)))
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00))))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@92@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@97@00 s@$ g0@2@00 g1@3@00)))) g0@2@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-7176|)))
; WARNING: (2872,7): 'if' cannot be used in patterns.
; WARNING: (2872,7): 'if' cannot be used in patterns.
; WARNING: (2872,7): 'and' cannot be used in patterns.
; WARNING: (2872,7): 'and' cannot be used in patterns.
; WARNING: (2872,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g1@3@00) (Set_in v g1@3@00))
          ($$%precondition (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
            ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00))
        (=>
          (and
            (Set_in u g1@3@00)
            (and
              (Set_in v g1@3@00)
              (not
                (exists_path<Bool> ($$ (ite
                  (Set_in v g1@3@00)
                  (ite
                    (Set_in u g1@3@00)
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
                    ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
                  ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))))
          (and
            (=>
              (and (Set_in u g1@3@00) (Set_in v g1@3@00))
              ($$%precondition ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00))
            ($$%precondition (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@80@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))
              ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (sm@124@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<r>To$Snap (sm@129@00 s@$ g0@2@00 g1@3@00)))) (Set_union g1@3@00 g0@2@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g1@3@00)
        (ite
          (Set_in u g1@3@00)
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@70@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@75@00 s@$ g0@2@00 g1@3@00)))
          ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00))))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@114@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@119@00 s@$ g0@2@00 g1@3@00)))) g1@3@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (sm@48@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<r>To$Snap (sm@53@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)))
        ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (sm@102@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<r>To$Snap (sm@107@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-7177|)))
; WARNING: (2961,7): 'if' cannot be used in patterns.
; WARNING: (2961,7): 'if' cannot be used in patterns.
; WARNING: (2961,7): 'and' cannot be used in patterns.
; WARNING: (2961,7): 'and' cannot be used in patterns.
; WARNING: (2961,7): 'if' cannot be used in patterns.
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- link_left ----------
(declare-const g@0@01 Set<$Ref>)
(declare-const x@1@01 $Ref)
(declare-const y@2@01 $Ref)
(declare-const g@3@01 Set<$Ref>)
(declare-const x@4@01 $Ref)
(declare-const y@5@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@6@01 $Snap)
(assert (= $t@6@01 ($Snap.combine ($Snap.first $t@6@01) ($Snap.second $t@6@01))))
(assert (= ($Snap.first $t@6@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@4@01 g@3@01))
(assert (=
  ($Snap.second $t@6@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@6@01))
    ($Snap.second ($Snap.second $t@6@01)))))
(assert (= ($Snap.first ($Snap.second $t@6@01)) $Snap.unit))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | y@5@01 != Null | live]
; [else-branch: 0 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 3
(push) ; 3
; [else-branch: 0 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (= y@5@01 $Ref.null) (not (= y@5@01 $Ref.null))))
(assert (=> (not (= y@5@01 $Ref.null)) (Set_in y@5@01 g@3@01)))
(assert (=
  ($Snap.second ($Snap.second $t@6@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@6@01))) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@3@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@6@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@01)))) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
; [eval] (__left__() == __left__() ? write : 1 / 2)
; [eval] __left__() == __left__()
; [eval] __left__()
; [eval] __left__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | True | live]
; [else-branch: 1 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1 | True]
(pop) ; 3
(pop) ; 2
; Joined path conditions
(declare-const sm@7@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@7@01  $FVF<l>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(assert (not (= x@4@01 $Ref.null)))
(declare-const sm@8@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@8@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@8@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@8@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@8@01  $FVF<l>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] (__left__() == __right__() ? write : 1 / 2)
; [eval] __left__() == __right__()
; [eval] __left__()
; [eval] __right__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | __left__[__FieldEnum__] == __right__[__FieldEnum__] | dead]
; [else-branch: 2 | __left__[__FieldEnum__] != __right__[__FieldEnum__] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 2 | __left__[__FieldEnum__] != __right__[__FieldEnum__]]
(assert (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__))))
(declare-const sm@9@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@9@01  $FVF<r>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(declare-const sm@10@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@10@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@10@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@10@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@10@01  $FVF<r>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(declare-const n@11@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 3 | !(n@11@01 in g@3@01) | live]
; [else-branch: 3 | n@11@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 3 | !(n@11@01 in g@3@01)]
(assert (not (Set_in n@11@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 3 | n@11@01 in g@3@01]
(assert (Set_in n@11@01 g@3@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@11@01 g@3@01) (not (Set_in n@11@01 g@3@01))))
(assert (and (Set_in n@11@01 g@3@01) (not (= n@11@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@12@01 ($Ref) $Ref)
(declare-fun img@13@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@11@01 $Ref)) (!
  (=>
    (and (Set_in n@11@01 g@3@01) (not (= n@11@01 x@4@01)))
    (or (Set_in n@11@01 g@3@01) (not (Set_in n@11@01 g@3@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) n@11@01) n@11@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@11@01 $Ref) (n2@11@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@11@01 g@3@01) (not (= n1@11@01 x@4@01)))
      (and (Set_in n2@11@01 g@3@01) (not (= n2@11@01 x@4@01)))
      (= n1@11@01 n2@11@01))
    (= n1@11@01 n2@11@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@11@01 $Ref)) (!
  (=>
    (and (Set_in n@11@01 g@3@01) (not (= n@11@01 x@4@01)))
    (and (= (inv@12@01 n@11@01) n@11@01) (img@13@01 n@11@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) n@11@01) n@11@01))
  :qid |quant-u-7179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (= (inv@12@01 r) r))
  :pattern ((inv@12@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@11@01 $Ref)) (!
  (=>
    (and (Set_in n@11@01 g@3@01) (not (= n@11@01 x@4@01)))
    (not (= n@11@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) n@11@01) n@11@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@14@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
  :pattern ((inv@12@01 r))
  :qid |quant-u-7180|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))
(declare-const n$0@15@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0 != x
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 4 | !(n$0@15@01 in g@3@01) | live]
; [else-branch: 4 | n$0@15@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 4 | !(n$0@15@01 in g@3@01)]
(assert (not (Set_in n$0@15@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 4 | n$0@15@01 in g@3@01]
(assert (Set_in n$0@15@01 g@3@01))
; [eval] n$0 != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$0@15@01 g@3@01) (not (Set_in n$0@15@01 g@3@01))))
(assert (and (Set_in n$0@15@01 g@3@01) (not (= n$0@15@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@16@01 ($Ref) $Ref)
(declare-fun img@17@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$0@15@01 $Ref)) (!
  (=>
    (and (Set_in n$0@15@01 g@3@01) (not (= n$0@15@01 x@4@01)))
    (or (Set_in n$0@15@01 g@3@01) (not (Set_in n$0@15@01 g@3@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) n$0@15@01) n$0@15@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$01@15@01 $Ref) (n$02@15@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$01@15@01 g@3@01) (not (= n$01@15@01 x@4@01)))
      (and (Set_in n$02@15@01 g@3@01) (not (= n$02@15@01 x@4@01)))
      (= n$01@15@01 n$02@15@01))
    (= n$01@15@01 n$02@15@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@15@01 $Ref)) (!
  (=>
    (and (Set_in n$0@15@01 g@3@01) (not (= n$0@15@01 x@4@01)))
    (and (= (inv@16@01 n$0@15@01) n$0@15@01) (img@17@01 n$0@15@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) n$0@15@01) n$0@15@01))
  :qid |quant-u-7182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (= (inv@16@01 r) r))
  :pattern ((inv@16@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$0@15@01 $Ref)) (!
  (=>
    (and (Set_in n$0@15@01 g@3@01) (not (= n$0@15@01 x@4@01)))
    (not (= n$0@15@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) n$0@15@01) n$0@15@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@18@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) r) r))
  :pattern ((inv@16@01 r))
  :qid |quant-u-7183|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
  $Snap.unit))
; [eval] (forall n$1: Ref :: { (n$1.l in g) } { (n$1 in g), n$1.l } (n$1 in g) && n$1.l != null ==> (n$1.l in g))
(declare-const n$1@19@01 $Ref)
(push) ; 2
; [eval] (n$1 in g) && n$1.l != null ==> (n$1.l in g)
; [eval] (n$1 in g) && n$1.l != null
; [eval] (n$1 in g)
(push) ; 3
; [then-branch: 5 | !(n$1@19@01 in g@3@01) | live]
; [else-branch: 5 | n$1@19@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 5 | !(n$1@19@01 in g@3@01)]
(assert (not (Set_in n$1@19@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | n$1@19@01 in g@3@01]
(assert (Set_in n$1@19@01 g@3@01))
; [eval] n$1.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
    :qid |qp.fvfValDef5|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef6|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@19@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@13@01 n$1@19@01)
        (and
          (Set_in (inv@12@01 n$1@19@01) g@3@01)
          (not (= (inv@12@01 n$1@19@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef6|)))
(assert (=>
  (Set_in n$1@19@01 g@3@01)
  (and
    (Set_in n$1@19@01 g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))))
(assert (or (Set_in n$1@19@01 g@3@01) (not (Set_in n$1@19@01 g@3@01))))
(push) ; 3
; [then-branch: 6 | n$1@19@01 in g@3@01 && Lookup(l, sm@14@01, n$1@19@01) != Null | live]
; [else-branch: 6 | !(n$1@19@01 in g@3@01 && Lookup(l, sm@14@01, n$1@19@01) != Null) | live]
(push) ; 4
; [then-branch: 6 | n$1@19@01 in g@3@01 && Lookup(l, sm@14@01, n$1@19@01) != Null]
(assert (and
  (Set_in n$1@19@01 g@3@01)
  (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))))
; [eval] (n$1.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
    :qid |qp.fvfValDef5|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef6|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@19@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@13@01 n$1@19@01)
        (and
          (Set_in (inv@12@01 n$1@19@01) g@3@01)
          (not (= (inv@12@01 n$1@19@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 6 | !(n$1@19@01 in g@3@01 && Lookup(l, sm@14@01, n$1@19@01) != Null)]
(assert (not
  (and
    (Set_in n$1@19@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef6|)))
(assert (=>
  (and
    (Set_in n$1@19@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))
  (and
    (Set_in n$1@19@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@19@01 g@3@01)
      (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))))
  (and
    (Set_in n$1@19@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef6|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$1@19@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@19@01 g@3@01)
      (and
        (Set_in n$1@19@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01)))
    (or (Set_in n$1@19@01 g@3@01) (not (Set_in n$1@19@01 g@3@01)))
    (=>
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01)))
    (or
      (not
        (and
          (Set_in n$1@19@01 g@3@01)
          (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))))
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) g@3@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(assert (forall ((n$1@19@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@19@01 g@3@01)
      (and
        (Set_in n$1@19@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01)))
    (or (Set_in n$1@19@01 g@3@01) (not (Set_in n$1@19@01 g@3@01)))
    (=>
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01)))
    (or
      (not
        (and
          (Set_in n$1@19@01 g@3@01)
          (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null))))
      (and
        (Set_in n$1@19@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))))
  :pattern ((Set_in n$1@19@01 g@3@01) ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(assert (forall ((n$1@19@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@19@01 g@3@01)
      (not (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) g@3@01))
  :pattern ((Set_in n$1@19@01 g@3@01) ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n$1@19@01) n$1@19@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.r in g) } { (n$2 in g), n$2.r } (n$2 in g) && n$2.r != null ==> (n$2.r in g))
(declare-const n$2@20@01 $Ref)
(push) ; 2
; [eval] (n$2 in g) && n$2.r != null ==> (n$2.r in g)
; [eval] (n$2 in g) && n$2.r != null
; [eval] (n$2 in g)
(push) ; 3
; [then-branch: 7 | !(n$2@20@01 in g@3@01) | live]
; [else-branch: 7 | n$2@20@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 7 | !(n$2@20@01 in g@3@01)]
(assert (not (Set_in n$2@20@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 7 | n$2@20@01 in g@3@01]
(assert (Set_in n$2@20@01 g@3@01))
; [eval] n$2.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
      (=
        ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@20@01 x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@17@01 n$2@20@01)
        (and
          (Set_in (inv@16@01 n$2@20@01) g@3@01)
          (not (= (inv@16@01 n$2@20@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (Set_in n$2@20@01 g@3@01)
  (and
    (Set_in n$2@20@01 g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))))
(assert (or (Set_in n$2@20@01 g@3@01) (not (Set_in n$2@20@01 g@3@01))))
(push) ; 3
; [then-branch: 8 | n$2@20@01 in g@3@01 && Lookup(r, sm@18@01, n$2@20@01) != Null | live]
; [else-branch: 8 | !(n$2@20@01 in g@3@01 && Lookup(r, sm@18@01, n$2@20@01) != Null) | live]
(push) ; 4
; [then-branch: 8 | n$2@20@01 in g@3@01 && Lookup(r, sm@18@01, n$2@20@01) != Null]
(assert (and
  (Set_in n$2@20@01 g@3@01)
  (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))))
; [eval] (n$2.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
      (=
        ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@20@01 x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@17@01 n$2@20@01)
        (and
          (Set_in (inv@16@01 n$2@20@01) g@3@01)
          (not (= (inv@16@01 n$2@20@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(n$2@20@01 in g@3@01 && Lookup(r, sm@18@01, n$2@20@01) != Null)]
(assert (not
  (and
    (Set_in n$2@20@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (and
    (Set_in n$2@20@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))
  (and
    (Set_in n$2@20@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@20@01 g@3@01)
      (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))))
  (and
    (Set_in n$2@20@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@18@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@18@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef9|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@20@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@20@01 g@3@01)
      (and
        (Set_in n$2@20@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01)))
    (or (Set_in n$2@20@01 g@3@01) (not (Set_in n$2@20@01 g@3@01)))
    (=>
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01)))
    (or
      (not
        (and
          (Set_in n$2@20@01 g@3@01)
          (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))))
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) g@3@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(assert (forall ((n$2@20@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@20@01 g@3@01)
      (and
        (Set_in n$2@20@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01)))
    (or (Set_in n$2@20@01 g@3@01) (not (Set_in n$2@20@01 g@3@01)))
    (=>
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01)))
    (or
      (not
        (and
          (Set_in n$2@20@01 g@3@01)
          (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null))))
      (and
        (Set_in n$2@20@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))))
  :pattern ((Set_in n$2@20@01 g@3@01) ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(assert (forall ((n$2@20@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@20@01 g@3@01)
      (not (= ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) g@3@01))
  :pattern ((Set_in n$2@20@01 g@3@01) ($FVF.loc_r ($FVF.lookup_r (as sm@18@01  $FVF<r>) n$2@20@01) n$2@20@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
  $Snap.unit))
; [eval] x.l == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@14@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
    :qid |qp.fvfValDef5|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@14@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef6|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) x@4@01) x@4@01))
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@13@01 x@4@01)
        (and
          (Set_in (inv@12@01 x@4@01) g@3@01)
          (not (= (inv@12@01 x@4@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_l (as sm@14@01  $FVF<l>) x@4@01) $Ref.null))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 ($Snap.combine ($Snap.first $t@21@01) ($Snap.second $t@21@01))))
(assert (= ($Snap.first $t@21@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@21@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@21@01))
    ($Snap.second ($Snap.second $t@21@01)))))
(assert (= ($Snap.first ($Snap.second $t@21@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@21@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@21@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
; [eval] (__left__() == __left__() ? write : 1 / 2)
; [eval] __left__() == __left__()
; [eval] __left__()
; [eval] __left__()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | True | live]
; [else-branch: 9 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 9 | True]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@22@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@22@01  $FVF<l>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))))
(declare-const sm@23@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@23@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@23@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@23@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@23@01  $FVF<l>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@21@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
; [eval] (__left__() == __right__() ? write : 1 / 2)
; [eval] __left__() == __right__()
; [eval] __left__()
; [eval] __right__()
(push) ; 3
; [then-branch: 10 | __left__[__FieldEnum__] == __right__[__FieldEnum__] | dead]
; [else-branch: 10 | __left__[__FieldEnum__] != __right__[__FieldEnum__] | live]
(push) ; 4
; [else-branch: 10 | __left__[__FieldEnum__] != __right__[__FieldEnum__]]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@24@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@24@01  $FVF<r>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
(declare-const sm@25@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@25@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@25@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@25@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef13|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@25@01  $FVF<r>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
(declare-const n$3@26@01 $Ref)
(push) ; 3
; [eval] (n$3 in g) && n$3 != x
; [eval] (n$3 in g)
(push) ; 4
; [then-branch: 11 | !(n$3@26@01 in g@3@01) | live]
; [else-branch: 11 | n$3@26@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 11 | !(n$3@26@01 in g@3@01)]
(assert (not (Set_in n$3@26@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 11 | n$3@26@01 in g@3@01]
(assert (Set_in n$3@26@01 g@3@01))
; [eval] n$3 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$3@26@01 g@3@01) (not (Set_in n$3@26@01 g@3@01))))
(assert (and (Set_in n$3@26@01 g@3@01) (not (= n$3@26@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@27@01 ($Ref) $Ref)
(declare-fun img@28@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$3@26@01 $Ref)) (!
  (=>
    (and (Set_in n$3@26@01 g@3@01) (not (= n$3@26@01 x@4@01)))
    (or (Set_in n$3@26@01 g@3@01) (not (Set_in n$3@26@01 g@3@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) n$3@26@01) n$3@26@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@26@01 $Ref) (n$32@26@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$31@26@01 g@3@01) (not (= n$31@26@01 x@4@01)))
      (and (Set_in n$32@26@01 g@3@01) (not (= n$32@26@01 x@4@01)))
      (= n$31@26@01 n$32@26@01))
    (= n$31@26@01 n$32@26@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@26@01 $Ref)) (!
  (=>
    (and (Set_in n$3@26@01 g@3@01) (not (= n$3@26@01 x@4@01)))
    (and (= (inv@27@01 n$3@26@01) n$3@26@01) (img@28@01 n$3@26@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) n$3@26@01) n$3@26@01))
  :qid |quant-u-7185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
    (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@26@01 $Ref)) (!
  (=>
    (and (Set_in n$3@26@01 g@3@01) (not (= n$3@26@01 x@4@01)))
    (not (= n$3@26@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) n$3@26@01) n$3@26@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@29@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
  :pattern ((inv@27@01 r))
  :qid |quant-u-7186|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
(declare-const n$4@30@01 $Ref)
(push) ; 3
; [eval] (n$4 in g) && n$4 != x
; [eval] (n$4 in g)
(push) ; 4
; [then-branch: 12 | !(n$4@30@01 in g@3@01) | live]
; [else-branch: 12 | n$4@30@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 12 | !(n$4@30@01 in g@3@01)]
(assert (not (Set_in n$4@30@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | n$4@30@01 in g@3@01]
(assert (Set_in n$4@30@01 g@3@01))
; [eval] n$4 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$4@30@01 g@3@01) (not (Set_in n$4@30@01 g@3@01))))
(assert (and (Set_in n$4@30@01 g@3@01) (not (= n$4@30@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@31@01 ($Ref) $Ref)
(declare-fun img@32@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$4@30@01 $Ref)) (!
  (=>
    (and (Set_in n$4@30@01 g@3@01) (not (= n$4@30@01 x@4@01)))
    (or (Set_in n$4@30@01 g@3@01) (not (Set_in n$4@30@01 g@3@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) n$4@30@01) n$4@30@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@30@01 $Ref) (n$42@30@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$41@30@01 g@3@01) (not (= n$41@30@01 x@4@01)))
      (and (Set_in n$42@30@01 g@3@01) (not (= n$42@30@01 x@4@01)))
      (= n$41@30@01 n$42@30@01))
    (= n$41@30@01 n$42@30@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@30@01 $Ref)) (!
  (=>
    (and (Set_in n$4@30@01 g@3@01) (not (= n$4@30@01 x@4@01)))
    (and (= (inv@31@01 n$4@30@01) n$4@30@01) (img@32@01 n$4@30@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) n$4@30@01) n$4@30@01))
  :qid |quant-u-7188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (= (inv@31@01 r) r))
  :pattern ((inv@31@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@30@01 $Ref)) (!
  (=>
    (and (Set_in n$4@30@01 g@3@01) (not (= n$4@30@01 x@4@01)))
    (not (= n$4@30@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) n$4@30@01) n$4@30@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@33@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) r) r))
  :pattern ((inv@31@01 r))
  :qid |quant-u-7189|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
  $Snap.unit))
; [eval] (forall n$5: Ref :: { (n$5.l in g) } { (n$5 in g), n$5.l } (n$5 in g) && n$5.l != null ==> (n$5.l in g))
(declare-const n$5@34@01 $Ref)
(push) ; 3
; [eval] (n$5 in g) && n$5.l != null ==> (n$5.l in g)
; [eval] (n$5 in g) && n$5.l != null
; [eval] (n$5 in g)
(push) ; 4
; [then-branch: 13 | !(n$5@34@01 in g@3@01) | live]
; [else-branch: 13 | n$5@34@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 13 | !(n$5@34@01 in g@3@01)]
(assert (not (Set_in n$5@34@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 13 | n$5@34@01 in g@3@01]
(assert (Set_in n$5@34@01 g@3@01))
; [eval] n$5.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
    :qid |qp.fvfValDef14|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef16|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@34@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@28@01 n$5@34@01)
        (and
          (Set_in (inv@27@01 n$5@34@01) g@3@01)
          (not (= (inv@27@01 n$5@34@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (=>
  (Set_in n$5@34@01 g@3@01)
  (and
    (Set_in n$5@34@01 g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))))
(assert (or (Set_in n$5@34@01 g@3@01) (not (Set_in n$5@34@01 g@3@01))))
(push) ; 4
; [then-branch: 14 | n$5@34@01 in g@3@01 && Lookup(l, sm@29@01, n$5@34@01) != Null | live]
; [else-branch: 14 | !(n$5@34@01 in g@3@01 && Lookup(l, sm@29@01, n$5@34@01) != Null) | live]
(push) ; 5
; [then-branch: 14 | n$5@34@01 in g@3@01 && Lookup(l, sm@29@01, n$5@34@01) != Null]
(assert (and
  (Set_in n$5@34@01 g@3@01)
  (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))))
; [eval] (n$5.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
    :qid |qp.fvfValDef14|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef16|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@34@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@28@01 n$5@34@01)
        (and
          (Set_in (inv@27@01 n$5@34@01) g@3@01)
          (not (= (inv@27@01 n$5@34@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 14 | !(n$5@34@01 in g@3@01 && Lookup(l, sm@29@01, n$5@34@01) != Null)]
(assert (not
  (and
    (Set_in n$5@34@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (=>
  (and
    (Set_in n$5@34@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))
  (and
    (Set_in n$5@34@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$5@34@01 g@3@01)
      (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))))
  (and
    (Set_in n$5@34@01 g@3@01)
    (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef16|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$5@34@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@34@01 g@3@01)
      (and
        (Set_in n$5@34@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01)))
    (or (Set_in n$5@34@01 g@3@01) (not (Set_in n$5@34@01 g@3@01)))
    (=>
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01)))
    (or
      (not
        (and
          (Set_in n$5@34@01 g@3@01)
          (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))))
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) g@3@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$5@34@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@34@01 g@3@01)
      (and
        (Set_in n$5@34@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01)))
    (or (Set_in n$5@34@01 g@3@01) (not (Set_in n$5@34@01 g@3@01)))
    (=>
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01)))
    (or
      (not
        (and
          (Set_in n$5@34@01 g@3@01)
          (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null))))
      (and
        (Set_in n$5@34@01 g@3@01)
        (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))))
  :pattern ((Set_in n$5@34@01 g@3@01) ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$5@34@01 $Ref)) (!
  (=>
    (and
      (Set_in n$5@34@01 g@3@01)
      (not (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) g@3@01))
  :pattern ((Set_in n$5@34@01 g@3@01) ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n$5@34@01) n$5@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
  $Snap.unit))
; [eval] (forall n$6: Ref :: { (n$6.r in g) } { (n$6 in g), n$6.r } (n$6 in g) && n$6.r != null ==> (n$6.r in g))
(declare-const n$6@35@01 $Ref)
(push) ; 3
; [eval] (n$6 in g) && n$6.r != null ==> (n$6.r in g)
; [eval] (n$6 in g) && n$6.r != null
; [eval] (n$6 in g)
(push) ; 4
; [then-branch: 15 | !(n$6@35@01 in g@3@01) | live]
; [else-branch: 15 | n$6@35@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 15 | !(n$6@35@01 in g@3@01)]
(assert (not (Set_in n$6@35@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | n$6@35@01 in g@3@01]
(assert (Set_in n$6@35@01 g@3@01))
; [eval] n$6.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
      (=
        ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
    :qid |qp.fvfValDef18|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef19|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@35@01 x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@32@01 n$6@35@01)
        (and
          (Set_in (inv@31@01 n$6@35@01) g@3@01)
          (not (= (inv@31@01 n$6@35@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (=>
  (Set_in n$6@35@01 g@3@01)
  (and
    (Set_in n$6@35@01 g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))))
(assert (or (Set_in n$6@35@01 g@3@01) (not (Set_in n$6@35@01 g@3@01))))
(push) ; 4
; [then-branch: 16 | n$6@35@01 in g@3@01 && Lookup(r, sm@33@01, n$6@35@01) != Null | live]
; [else-branch: 16 | !(n$6@35@01 in g@3@01 && Lookup(r, sm@33@01, n$6@35@01) != Null) | live]
(push) ; 5
; [then-branch: 16 | n$6@35@01 in g@3@01 && Lookup(r, sm@33@01, n$6@35@01) != Null]
(assert (and
  (Set_in n$6@35@01 g@3@01)
  (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))))
; [eval] (n$6.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
      (=
        ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
    :qid |qp.fvfValDef18|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef19|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@35@01 x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@32@01 n$6@35@01)
        (and
          (Set_in (inv@31@01 n$6@35@01) g@3@01)
          (not (= (inv@31@01 n$6@35@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 16 | !(n$6@35@01 in g@3@01 && Lookup(r, sm@33@01, n$6@35@01) != Null)]
(assert (not
  (and
    (Set_in n$6@35@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (=>
  (and
    (Set_in n$6@35@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))
  (and
    (Set_in n$6@35@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@35@01 g@3@01)
      (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))))
  (and
    (Set_in n$6@35@01 g@3@01)
    (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@33@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@33@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef19|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@35@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@35@01 g@3@01)
      (and
        (Set_in n$6@35@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01)))
    (or (Set_in n$6@35@01 g@3@01) (not (Set_in n$6@35@01 g@3@01)))
    (=>
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01)))
    (or
      (not
        (and
          (Set_in n$6@35@01 g@3@01)
          (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))))
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) g@3@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$6@35@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@35@01 g@3@01)
      (and
        (Set_in n$6@35@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01)))
    (or (Set_in n$6@35@01 g@3@01) (not (Set_in n$6@35@01 g@3@01)))
    (=>
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01)))
    (or
      (not
        (and
          (Set_in n$6@35@01 g@3@01)
          (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null))))
      (and
        (Set_in n$6@35@01 g@3@01)
        (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))))
  :pattern ((Set_in n$6@35@01 g@3@01) ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$6@35@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@35@01 g@3@01)
      (not (= ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) g@3@01))
  :pattern ((Set_in n$6@35@01 g@3@01) ($FVF.loc_r ($FVF.lookup_r (as sm@33@01  $FVF<r>) n$6@35@01) n$6@35@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
  $Snap.unit))
; [eval] x.l == y
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
    :qid |qp.fvfValDef14|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
      (=
        ($FVF.lookup_l (as sm@29@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@29@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef16|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) x@4@01) x@4@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@28@01 x@4@01)
        (and
          (Set_in (inv@27@01 x@4@01) g@3@01)
          (not (= (inv@27@01 x@4@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_l (as sm@29@01  $FVF<l>) x@4@01) y@5@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
  $Snap.unit))
; [eval] y == null ==> $$(g) == old($$(g))
; [eval] y == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | y@5@01 == Null | live]
; [else-branch: 17 | y@5@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 17 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@36@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@36@01 g@3@01))
(pop) ; 6
(declare-fun inv@37@01 ($Ref) $Ref)
(declare-fun img@38@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@36@01 $Ref) (n2@36@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@36@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n1@36@01) n1@36@01))
      (and
        (Set_in n2@36@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n2@36@01) n2@36@01))
      (= n1@36@01 n2@36@01))
    (= n1@36@01 n2@36@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@37@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
  :pattern ((inv@37@01 r))
  :qid |quant-u-7191|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    (>
      (+
        (ite
          (and
            (img@28@01 r)
            (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7192|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@39@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@39@01  $FVF<l>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_l (as sm@39@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@39@01  $FVF<l>))))
  :qid |qp.fvfDomDef23|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@39@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@39@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@39@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@39@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@39@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef22|)))
(declare-const n@40@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@40@01 g@3@01))
(pop) ; 6
(declare-fun inv@41@01 ($Ref) $Ref)
(declare-fun img@42@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@43@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@43@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@43@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@43@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@43@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@43@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef26|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@40@01 $Ref) (n2@40@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@40@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@43@01  $FVF<r>) n1@40@01) n1@40@01))
      (and
        (Set_in n2@40@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@43@01  $FVF<r>) n2@40@01) n2@40@01))
      (= n1@40@01 n2@40@01))
    (= n1@40@01 n2@40@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@40@01 $Ref)) (!
  (=>
    (Set_in n@40@01 g@3@01)
    (and (= (inv@41@01 n@40@01) n@40@01) (img@42@01 n@40@01)))
  :pattern ((Set_in n@40@01 g@3@01))
  :pattern ((inv@41@01 n@40@01))
  :pattern ((img@42@01 n@40@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@42@01 r) (Set_in (inv@41@01 r) g@3@01)) (= (inv@41@01 r) r))
  :pattern ((inv@41@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@41@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@43@01  $FVF<r>) r) r))
  :pattern ((inv@41@01 r))
  :qid |quant-u-7194|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r) (= r (inv@41@01 r)))
    (>
      (+
        (ite
          (and
            (img@32@01 r)
            (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7195|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@44@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@44@01  $FVF<r>)))
      (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r)))
    (=>
      (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r))
      (Set_in r ($FVF.domain_r (as sm@44@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@44@01  $FVF<r>))))
  :qid |qp.fvfDomDef30|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@44@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@44@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@44@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@44@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@44@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@39@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@44@01  $FVF<r>))) g@3@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@39@01  $FVF<l>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_l (as sm@39@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@39@01  $FVF<l>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@39@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@39@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@39@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@39@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@39@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@43@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@43@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@43@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@43@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@43@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((n@40@01 $Ref)) (!
  (=>
    (Set_in n@40@01 g@3@01)
    (and (= (inv@41@01 n@40@01) n@40@01) (img@42@01 n@40@01)))
  :pattern ((Set_in n@40@01 g@3@01))
  :pattern ((inv@41@01 n@40@01))
  :pattern ((img@42@01 n@40@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@42@01 r) (Set_in (inv@41@01 r) g@3@01)) (= (inv@41@01 r) r))
  :pattern ((inv@41@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@44@01  $FVF<r>)))
      (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r)))
    (=>
      (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r))
      (Set_in r ($FVF.domain_r (as sm@44@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@44@01  $FVF<r>))))
  :qid |qp.fvfDomDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@44@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@44@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@44@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@44@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@44@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@37@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
    :pattern ((inv@37@01 r))
    :qid |quant-u-7191|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@41@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@43@01  $FVF<r>) r) r))
    :pattern ((inv@41@01 r))
    :qid |quant-u-7194|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@39@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@44@01  $FVF<r>))) g@3@01)))
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@45@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@45@01 g@3@01))
(pop) ; 6
(declare-fun inv@46@01 ($Ref) $Ref)
(declare-fun img@47@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@45@01 $Ref) (n2@45@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@45@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n1@45@01) n1@45@01))
      (and
        (Set_in n2@45@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n2@45@01) n2@45@01))
      (= n1@45@01 n2@45@01))
    (= n1@45@01 n2@45@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@45@01 $Ref)) (!
  (=>
    (Set_in n@45@01 g@3@01)
    (and (= (inv@46@01 n@45@01) n@45@01) (img@47@01 n@45@01)))
  :pattern ((Set_in n@45@01 g@3@01))
  :pattern ((inv@46@01 n@45@01))
  :pattern ((img@47@01 n@45@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@47@01 r) (Set_in (inv@46@01 r) g@3@01)) (= (inv@46@01 r) r))
  :pattern ((inv@46@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@46@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
  :pattern ((inv@46@01 r))
  :qid |quant-u-7197|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r) (= r (inv@46@01 r)))
    (>
      (+
        (ite
          (and
            (img@13@01 r)
            (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7198|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@48@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@48@01  $FVF<l>)))
      (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r)))
    (=>
      (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r))
      (Set_in r ($FVF.domain_l (as sm@48@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@48@01  $FVF<l>))))
  :qid |qp.fvfDomDef34|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@48@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@48@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@48@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@48@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@48@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef33|)))
(declare-const n@49@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@49@01 g@3@01))
(pop) ; 6
(declare-fun inv@50@01 ($Ref) $Ref)
(declare-fun img@51@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@52@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@52@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@52@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@52@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@52@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@52@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef37|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@49@01 $Ref) (n2@49@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@49@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@52@01  $FVF<r>) n1@49@01) n1@49@01))
      (and
        (Set_in n2@49@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@52@01  $FVF<r>) n2@49@01) n2@49@01))
      (= n1@49@01 n2@49@01))
    (= n1@49@01 n2@49@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@49@01 $Ref)) (!
  (=>
    (Set_in n@49@01 g@3@01)
    (and (= (inv@50@01 n@49@01) n@49@01) (img@51@01 n@49@01)))
  :pattern ((Set_in n@49@01 g@3@01))
  :pattern ((inv@50@01 n@49@01))
  :pattern ((img@51@01 n@49@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@51@01 r) (Set_in (inv@50@01 r) g@3@01)) (= (inv@50@01 r) r))
  :pattern ((inv@50@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@50@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@52@01  $FVF<r>) r) r))
  :pattern ((inv@50@01 r))
  :qid |quant-u-7200|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r) (= r (inv@50@01 r)))
    (>
      (+
        (ite
          (and
            (img@17@01 r)
            (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7201|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@53@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@53@01  $FVF<r>)))
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)))
    (=>
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (Set_in r ($FVF.domain_r (as sm@53@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@53@01  $FVF<r>))))
  :qid |qp.fvfDomDef41|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@53@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@53@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@53@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@53@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@53@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@48@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@53@01  $FVF<r>))) g@3@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@45@01 $Ref)) (!
  (=>
    (Set_in n@45@01 g@3@01)
    (and (= (inv@46@01 n@45@01) n@45@01) (img@47@01 n@45@01)))
  :pattern ((Set_in n@45@01 g@3@01))
  :pattern ((inv@46@01 n@45@01))
  :pattern ((img@47@01 n@45@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@47@01 r) (Set_in (inv@46@01 r) g@3@01)) (= (inv@46@01 r) r))
  :pattern ((inv@46@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@48@01  $FVF<l>)))
      (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r)))
    (=>
      (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r))
      (Set_in r ($FVF.domain_l (as sm@48@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@48@01  $FVF<l>))))
  :qid |qp.fvfDomDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@48@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@48@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@48@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@48@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@48@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@52@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@52@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@52@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@52@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@52@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((n@49@01 $Ref)) (!
  (=>
    (Set_in n@49@01 g@3@01)
    (and (= (inv@50@01 n@49@01) n@49@01) (img@51@01 n@49@01)))
  :pattern ((Set_in n@49@01 g@3@01))
  :pattern ((inv@50@01 n@49@01))
  :pattern ((img@51@01 n@49@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@51@01 r) (Set_in (inv@50@01 r) g@3@01)) (= (inv@50@01 r) r))
  :pattern ((inv@50@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@53@01  $FVF<r>)))
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)))
    (=>
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (Set_in r ($FVF.domain_r (as sm@53@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@53@01  $FVF<r>))))
  :qid |qp.fvfDomDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@53@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@53@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@53@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@53@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@53@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@46@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
    :pattern ((inv@46@01 r))
    :qid |quant-u-7197|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@50@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@52@01  $FVF<r>) r) r))
    :pattern ((inv@50@01 r))
    :qid |quant-u-7200|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@48@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@53@01  $FVF<r>))) g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 17 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@39@01  $FVF<l>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_l (as sm@39@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@39@01  $FVF<l>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@39@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@39@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@39@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@39@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@39@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@43@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@43@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@43@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@43@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@43@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((n@40@01 $Ref)) (!
  (=>
    (Set_in n@40@01 g@3@01)
    (and (= (inv@41@01 n@40@01) n@40@01) (img@42@01 n@40@01)))
  :pattern ((Set_in n@40@01 g@3@01))
  :pattern ((inv@41@01 n@40@01))
  :pattern ((img@42@01 n@40@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@42@01 r) (Set_in (inv@41@01 r) g@3@01)) (= (inv@41@01 r) r))
  :pattern ((inv@41@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@44@01  $FVF<r>)))
      (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r)))
    (=>
      (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r))
      (Set_in r ($FVF.domain_r (as sm@44@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@44@01  $FVF<r>))))
  :qid |qp.fvfDomDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@44@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@44@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@41@01 r) g@3@01) (img@42@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@44@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@44@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@44@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert (forall ((n@45@01 $Ref)) (!
  (=>
    (Set_in n@45@01 g@3@01)
    (and (= (inv@46@01 n@45@01) n@45@01) (img@47@01 n@45@01)))
  :pattern ((Set_in n@45@01 g@3@01))
  :pattern ((inv@46@01 n@45@01))
  :pattern ((img@47@01 n@45@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@47@01 r) (Set_in (inv@46@01 r) g@3@01)) (= (inv@46@01 r) r))
  :pattern ((inv@46@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@48@01  $FVF<l>)))
      (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r)))
    (=>
      (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r))
      (Set_in r ($FVF.domain_l (as sm@48@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@48@01  $FVF<l>))))
  :qid |qp.fvfDomDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@48@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@48@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@46@01 r) g@3@01) (img@47@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@48@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@48@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@48@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@52@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@52@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@52@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@52@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@52@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((n@49@01 $Ref)) (!
  (=>
    (Set_in n@49@01 g@3@01)
    (and (= (inv@50@01 n@49@01) n@49@01) (img@51@01 n@49@01)))
  :pattern ((Set_in n@49@01 g@3@01))
  :pattern ((inv@50@01 n@49@01))
  :pattern ((img@51@01 n@49@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@51@01 r) (Set_in (inv@50@01 r) g@3@01)) (= (inv@50@01 r) r))
  :pattern ((inv@50@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@53@01  $FVF<r>)))
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)))
    (=>
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (Set_in r ($FVF.domain_r (as sm@53@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@53@01  $FVF<r>))))
  :qid |qp.fvfDomDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@53@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@53@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@50@01 r) g@3@01) (img@51@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@53@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@53@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@53@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert (=>
  (= y@5@01 $Ref.null)
  (and
    (= y@5@01 $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@37@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
      :pattern ((inv@37@01 r))
      :qid |quant-u-7191|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@41@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@43@01  $FVF<r>) r) r))
      :pattern ((inv@41@01 r))
      :qid |quant-u-7194|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@39@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@44@01  $FVF<r>))) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@46@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
      :pattern ((inv@46@01 r))
      :qid |quant-u-7197|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@50@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@52@01  $FVF<r>) r) r))
      :pattern ((inv@50@01 r))
      :qid |quant-u-7200|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@48@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@53@01  $FVF<r>))) g@3@01))))
; Joined path conditions
(assert (or (not (= y@5@01 $Ref.null)) (= y@5@01 $Ref.null)))
(assert (=>
  (= y@5@01 $Ref.null)
  (Set_equal ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@39@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@44@01  $FVF<r>))) g@3@01) ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@48@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@53@01  $FVF<r>))) g@3@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 18 | y@5@01 != Null | live]
; [else-branch: 18 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 18 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
(declare-const v1@54@01 $Ref)
(declare-const v2@55@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@56@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@56@01 g@3@01))
(pop) ; 7
(declare-fun inv@57@01 ($Ref) $Ref)
(declare-fun img@58@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@56@01 $Ref) (n2@56@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@56@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n1@56@01) n1@56@01))
      (and
        (Set_in n2@56@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n2@56@01) n2@56@01))
      (= n1@56@01 n2@56@01))
    (= n1@56@01 n2@56@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@56@01 $Ref)) (!
  (=>
    (Set_in n@56@01 g@3@01)
    (and (= (inv@57@01 n@56@01) n@56@01) (img@58@01 n@56@01)))
  :pattern ((Set_in n@56@01 g@3@01))
  :pattern ((inv@57@01 n@56@01))
  :pattern ((img@58@01 n@56@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@58@01 r) (Set_in (inv@57@01 r) g@3@01)) (= (inv@57@01 r) r))
  :pattern ((inv@57@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@57@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
  :pattern ((inv@57@01 r))
  :qid |quant-u-7203|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r) (= r (inv@57@01 r)))
    (>
      (+
        (ite
          (and
            (img@28@01 r)
            (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7204|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@59@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>)))
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)))
    (=>
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>))))
  :qid |qp.fvfDomDef45|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@59@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@59@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef44|)))
(declare-const n@60@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@60@01 g@3@01))
(pop) ; 7
(declare-fun inv@61@01 ($Ref) $Ref)
(declare-fun img@62@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@63@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@63@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@63@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef48|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@60@01 $Ref) (n2@60@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@60@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@63@01  $FVF<r>) n1@60@01) n1@60@01))
      (and
        (Set_in n2@60@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@63@01  $FVF<r>) n2@60@01) n2@60@01))
      (= n1@60@01 n2@60@01))
    (= n1@60@01 n2@60@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@60@01 $Ref)) (!
  (=>
    (Set_in n@60@01 g@3@01)
    (and (= (inv@61@01 n@60@01) n@60@01) (img@62@01 n@60@01)))
  :pattern ((Set_in n@60@01 g@3@01))
  :pattern ((inv@61@01 n@60@01))
  :pattern ((img@62@01 n@60@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@62@01 r) (Set_in (inv@61@01 r) g@3@01)) (= (inv@61@01 r) r))
  :pattern ((inv@61@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@61@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@63@01  $FVF<r>) r) r))
  :pattern ((inv@61@01 r))
  :qid |quant-u-7206|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r) (= r (inv@61@01 r)))
    (>
      (+
        (ite
          (and
            (img@32@01 r)
            (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7207|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@64@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>)))
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r)))
    (=>
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r))
      (Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>))))
  :qid |qp.fvfDomDef52|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@64@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@64@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@59@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@64@01  $FVF<r>))) g@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@56@01 $Ref)) (!
  (=>
    (Set_in n@56@01 g@3@01)
    (and (= (inv@57@01 n@56@01) n@56@01) (img@58@01 n@56@01)))
  :pattern ((Set_in n@56@01 g@3@01))
  :pattern ((inv@57@01 n@56@01))
  :pattern ((img@58@01 n@56@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@58@01 r) (Set_in (inv@57@01 r) g@3@01)) (= (inv@57@01 r) r))
  :pattern ((inv@57@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>)))
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)))
    (=>
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>))))
  :qid |qp.fvfDomDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@59@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@59@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@63@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@63@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef48|)))
(assert (forall ((n@60@01 $Ref)) (!
  (=>
    (Set_in n@60@01 g@3@01)
    (and (= (inv@61@01 n@60@01) n@60@01) (img@62@01 n@60@01)))
  :pattern ((Set_in n@60@01 g@3@01))
  :pattern ((inv@61@01 n@60@01))
  :pattern ((img@62@01 n@60@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@62@01 r) (Set_in (inv@61@01 r) g@3@01)) (= (inv@61@01 r) r))
  :pattern ((inv@61@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>)))
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r)))
    (=>
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r))
      (Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>))))
  :qid |qp.fvfDomDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@64@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@64@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@57@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
    :pattern ((inv@57@01 r))
    :qid |quant-u-7203|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@61@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@63@01  $FVF<r>) r) r))
    :pattern ((inv@61@01 r))
    :qid |quant-u-7206|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@59@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@64@01  $FVF<r>))) g@3@01)))
; [eval] edge(old($$(g)), v1, v2) || v1 == x && v2 == y
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 6
(declare-const n@65@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@65@01 g@3@01))
(pop) ; 7
(declare-fun inv@66@01 ($Ref) $Ref)
(declare-fun img@67@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@65@01 $Ref) (n2@65@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@65@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n1@65@01) n1@65@01))
      (and
        (Set_in n2@65@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n2@65@01) n2@65@01))
      (= n1@65@01 n2@65@01))
    (= n1@65@01 n2@65@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@65@01 $Ref)) (!
  (=>
    (Set_in n@65@01 g@3@01)
    (and (= (inv@66@01 n@65@01) n@65@01) (img@67@01 n@65@01)))
  :pattern ((Set_in n@65@01 g@3@01))
  :pattern ((inv@66@01 n@65@01))
  :pattern ((img@67@01 n@65@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@67@01 r) (Set_in (inv@66@01 r) g@3@01)) (= (inv@66@01 r) r))
  :pattern ((inv@66@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@66@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
  :pattern ((inv@66@01 r))
  :qid |quant-u-7209|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r) (= r (inv@66@01 r)))
    (>
      (+
        (ite
          (and
            (img@13@01 r)
            (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7210|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@68@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>)))
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r)))
    (=>
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r))
      (Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>))))
  :qid |qp.fvfDomDef56|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@68@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@68@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef55|)))
(declare-const n@69@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@69@01 g@3@01))
(pop) ; 7
(declare-fun inv@70@01 ($Ref) $Ref)
(declare-fun img@71@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@72@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@72@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@72@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef59|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@69@01 $Ref) (n2@69@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@69@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@72@01  $FVF<r>) n1@69@01) n1@69@01))
      (and
        (Set_in n2@69@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@72@01  $FVF<r>) n2@69@01) n2@69@01))
      (= n1@69@01 n2@69@01))
    (= n1@69@01 n2@69@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@70@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@72@01  $FVF<r>) r) r))
  :pattern ((inv@70@01 r))
  :qid |quant-u-7212|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r) (= r (inv@70@01 r)))
    (>
      (+
        (ite
          (and
            (img@17@01 r)
            (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7213|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@73@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>))))
  :qid |qp.fvfDomDef63|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@65@01 $Ref)) (!
  (=>
    (Set_in n@65@01 g@3@01)
    (and (= (inv@66@01 n@65@01) n@65@01) (img@67@01 n@65@01)))
  :pattern ((Set_in n@65@01 g@3@01))
  :pattern ((inv@66@01 n@65@01))
  :pattern ((img@67@01 n@65@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@67@01 r) (Set_in (inv@66@01 r) g@3@01)) (= (inv@66@01 r) r))
  :pattern ((inv@66@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>)))
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r)))
    (=>
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r))
      (Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>))))
  :qid |qp.fvfDomDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@68@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@68@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@72@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@72@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>))))
  :qid |qp.fvfDomDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@66@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
    :pattern ((inv@66@01 r))
    :qid |quant-u-7209|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@70@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@72@01  $FVF<r>) r) r))
    :pattern ((inv@70@01 r))
    :qid |quant-u-7212|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01)))
(push) ; 6
; [then-branch: 19 | edge[Bool]($$((sm@68@01, sm@73@01), g@3@01), v1@54@01, v2@55@01) | live]
; [else-branch: 19 | !(edge[Bool]($$((sm@68@01, sm@73@01), g@3@01), v1@54@01, v2@55@01)) | live]
(push) ; 7
; [then-branch: 19 | edge[Bool]($$((sm@68@01, sm@73@01), g@3@01), v1@54@01, v2@55@01)]
(assert (edge<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
(pop) ; 7
(push) ; 7
; [else-branch: 19 | !(edge[Bool]($$((sm@68@01, sm@73@01), g@3@01), v1@54@01, v2@55@01))]
(assert (not
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01)))
; [eval] v1 == x && v2 == y
; [eval] v1 == x
(push) ; 8
; [then-branch: 20 | v1@54@01 != x@4@01 | live]
; [else-branch: 20 | v1@54@01 == x@4@01 | live]
(push) ; 9
; [then-branch: 20 | v1@54@01 != x@4@01]
(assert (not (= v1@54@01 x@4@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 20 | v1@54@01 == x@4@01]
(assert (= v1@54@01 x@4@01))
; [eval] v2 == y
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (= v1@54@01 x@4@01) (not (= v1@54@01 x@4@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
  (and
    (not
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
    (or (= v1@54@01 x@4@01) (not (= v1@54@01 x@4@01))))))
(assert (or
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@56@01 $Ref)) (!
  (=>
    (Set_in n@56@01 g@3@01)
    (and (= (inv@57@01 n@56@01) n@56@01) (img@58@01 n@56@01)))
  :pattern ((Set_in n@56@01 g@3@01))
  :pattern ((inv@57@01 n@56@01))
  :pattern ((img@58@01 n@56@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@58@01 r) (Set_in (inv@57@01 r) g@3@01)) (= (inv@57@01 r) r))
  :pattern ((inv@57@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>)))
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)))
    (=>
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>))))
  :qid |qp.fvfDomDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@59@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@59@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@63@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@63@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef48|)))
(assert (forall ((n@60@01 $Ref)) (!
  (=>
    (Set_in n@60@01 g@3@01)
    (and (= (inv@61@01 n@60@01) n@60@01) (img@62@01 n@60@01)))
  :pattern ((Set_in n@60@01 g@3@01))
  :pattern ((inv@61@01 n@60@01))
  :pattern ((img@62@01 n@60@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@62@01 r) (Set_in (inv@61@01 r) g@3@01)) (= (inv@61@01 r) r))
  :pattern ((inv@61@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>)))
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r)))
    (=>
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r))
      (Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>))))
  :qid |qp.fvfDomDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@64@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@64@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (forall ((n@65@01 $Ref)) (!
  (=>
    (Set_in n@65@01 g@3@01)
    (and (= (inv@66@01 n@65@01) n@65@01) (img@67@01 n@65@01)))
  :pattern ((Set_in n@65@01 g@3@01))
  :pattern ((inv@66@01 n@65@01))
  :pattern ((img@67@01 n@65@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@67@01 r) (Set_in (inv@66@01 r) g@3@01)) (= (inv@66@01 r) r))
  :pattern ((inv@66@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>)))
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r)))
    (=>
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r))
      (Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>))))
  :qid |qp.fvfDomDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@68@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@68@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@72@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@72@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>))))
  :qid |qp.fvfDomDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@57@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
  :pattern ((inv@57@01 r))
  :qid |quant-u-7203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@61@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@63@01  $FVF<r>) r) r))
  :pattern ((inv@61@01 r))
  :qid |quant-u-7206|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@59@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@64@01  $FVF<r>))) g@3@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@66@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
  :pattern ((inv@66@01 r))
  :qid |quant-u-7209|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@70@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@72@01  $FVF<r>) r) r))
  :pattern ((inv@70@01 r))
  :qid |quant-u-7212|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@54@01 $Ref) (v2@55@01 $Ref)) (!
  (and
    (=>
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
      (and
        (not
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
        (or (= v1@54@01 x@4@01) (not (= v1@54@01 x@4@01)))))
    (or
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01)))
  :pattern ((edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@249@27@251@78-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 18 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@56@01 $Ref)) (!
  (=>
    (Set_in n@56@01 g@3@01)
    (and (= (inv@57@01 n@56@01) n@56@01) (img@58@01 n@56@01)))
  :pattern ((Set_in n@56@01 g@3@01))
  :pattern ((inv@57@01 n@56@01))
  :pattern ((img@58@01 n@56@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@58@01 r) (Set_in (inv@57@01 r) g@3@01)) (= (inv@57@01 r) r))
  :pattern ((inv@57@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>)))
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)))
    (=>
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@59@01  $FVF<l>))))
  :qid |qp.fvfDomDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@59@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@57@01 r) g@3@01) (img@58@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@59@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@59@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@63@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@63@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@63@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef48|)))
(assert (forall ((n@60@01 $Ref)) (!
  (=>
    (Set_in n@60@01 g@3@01)
    (and (= (inv@61@01 n@60@01) n@60@01) (img@62@01 n@60@01)))
  :pattern ((Set_in n@60@01 g@3@01))
  :pattern ((inv@61@01 n@60@01))
  :pattern ((img@62@01 n@60@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@62@01 r) (Set_in (inv@61@01 r) g@3@01)) (= (inv@61@01 r) r))
  :pattern ((inv@61@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>)))
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r)))
    (=>
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r))
      (Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@64@01  $FVF<r>))))
  :qid |qp.fvfDomDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@64@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@61@01 r) g@3@01) (img@62@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@64@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@64@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (forall ((n@65@01 $Ref)) (!
  (=>
    (Set_in n@65@01 g@3@01)
    (and (= (inv@66@01 n@65@01) n@65@01) (img@67@01 n@65@01)))
  :pattern ((Set_in n@65@01 g@3@01))
  :pattern ((inv@66@01 n@65@01))
  :pattern ((img@67@01 n@65@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@67@01 r) (Set_in (inv@66@01 r) g@3@01)) (= (inv@66@01 r) r))
  :pattern ((inv@66@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>)))
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r)))
    (=>
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r))
      (Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@68@01  $FVF<l>))))
  :qid |qp.fvfDomDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@68@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@66@01 r) g@3@01) (img@67@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@68@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@68@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@72@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@72@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@72@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g@3@01)
    (and (= (inv@70@01 n@69@01) n@69@01) (img@71@01 n@69@01)))
  :pattern ((Set_in n@69@01 g@3@01))
  :pattern ((inv@70@01 n@69@01))
  :pattern ((img@71@01 n@69@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g@3@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>)))
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)))
    (=>
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@73@01  $FVF<r>))))
  :qid |qp.fvfDomDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@70@01 r) g@3@01) (img@71@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@73@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@73@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert (=>
  (not (= y@5@01 $Ref.null))
  (and
    (not (= y@5@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@57@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
      :pattern ((inv@57@01 r))
      :qid |quant-u-7203|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@61@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@63@01  $FVF<r>) r) r))
      :pattern ((inv@61@01 r))
      :qid |quant-u-7206|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@59@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@64@01  $FVF<r>))) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@66@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
      :pattern ((inv@66@01 r))
      :qid |quant-u-7209|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@70@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@72@01  $FVF<r>) r) r))
      :pattern ((inv@70@01 r))
      :qid |quant-u-7212|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01)
    (forall ((v1@54@01 $Ref) (v2@55@01 $Ref)) (!
      (and
        (=>
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
          (and
            (not
              (edge<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
            (or (= v1@54@01 x@4@01) (not (= v1@54@01 x@4@01)))))
        (or
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01)))
      :pattern ((edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@249@27@251@78-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@5@01 $Ref.null))
  (forall ((v1@54@01 $Ref) (v2@55@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@59@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@64@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01)
      (or
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01)
        (and (= v1@54@01 x@4@01) (= v2@55@01 y@5@01))))
    :pattern ((edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@68@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@73@01  $FVF<r>))) g@3@01) v1@54@01 v2@55@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@249@27@251@78|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 21 | y@5@01 != Null | live]
; [else-branch: 21 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 21 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
(declare-const v1@74@01 $Ref)
(declare-const v2@75@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 22 | v1@74@01 != v2@75@01 | live]
; [else-branch: 22 | v1@74@01 == v2@75@01 | live]
(push) ; 7
; [then-branch: 22 | v1@74@01 != v2@75@01]
(assert (not (= v1@74@01 v2@75@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@76@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@76@01 g@3@01))
(pop) ; 9
(declare-fun inv@77@01 ($Ref) $Ref)
(declare-fun img@78@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@76@01 $Ref) (n2@76@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@76@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n1@76@01) n1@76@01))
      (and
        (Set_in n2@76@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) n2@76@01) n2@76@01))
      (= n1@76@01 n2@76@01))
    (= n1@76@01 n2@76@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@76@01 $Ref)) (!
  (=>
    (Set_in n@76@01 g@3@01)
    (and (= (inv@77@01 n@76@01) n@76@01) (img@78@01 n@76@01)))
  :pattern ((Set_in n@76@01 g@3@01))
  :pattern ((inv@77@01 n@76@01))
  :pattern ((img@78@01 n@76@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@78@01 r) (Set_in (inv@77@01 r) g@3@01)) (= (inv@77@01 r) r))
  :pattern ((inv@77@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@77@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
  :pattern ((inv@77@01 r))
  :qid |quant-u-7215|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r) (= r (inv@77@01 r)))
    (>
      (+
        (ite
          (and
            (img@28@01 r)
            (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7216|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@79@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>)))
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r)))
    (=>
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r))
      (Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>))))
  :qid |qp.fvfDomDef67|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@79@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@79@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef66|)))
(declare-const n@80@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@80@01 g@3@01))
(pop) ; 9
(declare-fun inv@81@01 ($Ref) $Ref)
(declare-fun img@82@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@83@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@83@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@83@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef70|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@80@01 $Ref) (n2@80@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@80@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@83@01  $FVF<r>) n1@80@01) n1@80@01))
      (and
        (Set_in n2@80@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@83@01  $FVF<r>) n2@80@01) n2@80@01))
      (= n1@80@01 n2@80@01))
    (= n1@80@01 n2@80@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@80@01 $Ref)) (!
  (=>
    (Set_in n@80@01 g@3@01)
    (and (= (inv@81@01 n@80@01) n@80@01) (img@82@01 n@80@01)))
  :pattern ((Set_in n@80@01 g@3@01))
  :pattern ((inv@81@01 n@80@01))
  :pattern ((img@82@01 n@80@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@82@01 r) (Set_in (inv@81@01 r) g@3@01)) (= (inv@81@01 r) r))
  :pattern ((inv@81@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@81@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@83@01  $FVF<r>) r) r))
  :pattern ((inv@81@01 r))
  :qid |quant-u-7218|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r) (= r (inv@81@01 r)))
    (>
      (+
        (ite
          (and
            (img@32@01 r)
            (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7219|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@84@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>)))
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r)))
    (=>
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r))
      (Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>))))
  :qid |qp.fvfDomDef74|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@84@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@84@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef73|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@79@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@84@01  $FVF<r>))) g@3@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@76@01 $Ref)) (!
  (=>
    (Set_in n@76@01 g@3@01)
    (and (= (inv@77@01 n@76@01) n@76@01) (img@78@01 n@76@01)))
  :pattern ((Set_in n@76@01 g@3@01))
  :pattern ((inv@77@01 n@76@01))
  :pattern ((img@78@01 n@76@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@78@01 r) (Set_in (inv@77@01 r) g@3@01)) (= (inv@77@01 r) r))
  :pattern ((inv@77@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>)))
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r)))
    (=>
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r))
      (Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>))))
  :qid |qp.fvfDomDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@79@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@79@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@83@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@83@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (forall ((n@80@01 $Ref)) (!
  (=>
    (Set_in n@80@01 g@3@01)
    (and (= (inv@81@01 n@80@01) n@80@01) (img@82@01 n@80@01)))
  :pattern ((Set_in n@80@01 g@3@01))
  :pattern ((inv@81@01 n@80@01))
  :pattern ((img@82@01 n@80@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@82@01 r) (Set_in (inv@81@01 r) g@3@01)) (= (inv@81@01 r) r))
  :pattern ((inv@81@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>)))
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r)))
    (=>
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r))
      (Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>))))
  :qid |qp.fvfDomDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@84@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@84@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef73|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@77@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
    :pattern ((inv@77@01 r))
    :qid |quant-u-7215|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@81@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@83@01  $FVF<r>) r) r))
    :pattern ((inv@81@01 r))
    :qid |quant-u-7218|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@79@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@84@01  $FVF<r>))) g@3@01)))
; [eval] exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@85@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@85@01 g@3@01))
(pop) ; 9
(declare-fun inv@86@01 ($Ref) $Ref)
(declare-fun img@87@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@85@01 $Ref) (n2@85@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@85@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n1@85@01) n1@85@01))
      (and
        (Set_in n2@85@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) n2@85@01) n2@85@01))
      (= n1@85@01 n2@85@01))
    (= n1@85@01 n2@85@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@85@01 $Ref)) (!
  (=>
    (Set_in n@85@01 g@3@01)
    (and (= (inv@86@01 n@85@01) n@85@01) (img@87@01 n@85@01)))
  :pattern ((Set_in n@85@01 g@3@01))
  :pattern ((inv@86@01 n@85@01))
  :pattern ((img@87@01 n@85@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@87@01 r) (Set_in (inv@86@01 r) g@3@01)) (= (inv@86@01 r) r))
  :pattern ((inv@86@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@86@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
  :pattern ((inv@86@01 r))
  :qid |quant-u-7221|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r) (= r (inv@86@01 r)))
    (>
      (+
        (ite
          (and
            (img@13@01 r)
            (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7222|))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(declare-const sm@88@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>)))
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r)))
    (=>
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r))
      (Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>))))
  :qid |qp.fvfDomDef78|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@88@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@88@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef77|)))
(declare-const n@89@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@89@01 g@3@01))
(pop) ; 9
(declare-fun inv@90@01 ($Ref) $Ref)
(declare-fun img@91@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@92@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@92@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@92@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef81|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@89@01 $Ref) (n2@89@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@89@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@92@01  $FVF<r>) n1@89@01) n1@89@01))
      (and
        (Set_in n2@89@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@92@01  $FVF<r>) n2@89@01) n2@89@01))
      (= n1@89@01 n2@89@01))
    (= n1@89@01 n2@89@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (Set_in n@89@01 g@3@01)
    (and (= (inv@90@01 n@89@01) n@89@01) (img@91@01 n@89@01)))
  :pattern ((Set_in n@89@01 g@3@01))
  :pattern ((inv@90@01 n@89@01))
  :pattern ((img@91@01 n@89@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@91@01 r) (Set_in (inv@90@01 r) g@3@01)) (= (inv@90@01 r) r))
  :pattern ((inv@90@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@90@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@92@01  $FVF<r>) r) r))
  :pattern ((inv@90@01 r))
  :qid |quant-u-7224|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r) (= r (inv@90@01 r)))
    (>
      (+
        (ite
          (and
            (img@17@01 r)
            (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7225|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@93@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>)))
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r)))
    (=>
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r))
      (Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>))))
  :qid |qp.fvfDomDef85|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@93@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@93@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef84|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@85@01 $Ref)) (!
  (=>
    (Set_in n@85@01 g@3@01)
    (and (= (inv@86@01 n@85@01) n@85@01) (img@87@01 n@85@01)))
  :pattern ((Set_in n@85@01 g@3@01))
  :pattern ((inv@86@01 n@85@01))
  :pattern ((img@87@01 n@85@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@87@01 r) (Set_in (inv@86@01 r) g@3@01)) (= (inv@86@01 r) r))
  :pattern ((inv@86@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>)))
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r)))
    (=>
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r))
      (Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>))))
  :qid |qp.fvfDomDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@88@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@88@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@92@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@92@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (Set_in n@89@01 g@3@01)
    (and (= (inv@90@01 n@89@01) n@89@01) (img@91@01 n@89@01)))
  :pattern ((Set_in n@89@01 g@3@01))
  :pattern ((inv@90@01 n@89@01))
  :pattern ((img@91@01 n@89@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@91@01 r) (Set_in (inv@90@01 r) g@3@01)) (= (inv@90@01 r) r))
  :pattern ((inv@90@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>)))
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r)))
    (=>
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r))
      (Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>))))
  :qid |qp.fvfDomDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@93@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@93@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef84|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@86@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
    :pattern ((inv@86@01 r))
    :qid |quant-u-7221|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@90@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@92@01  $FVF<r>) r) r))
    :pattern ((inv@90@01 r))
    :qid |quant-u-7224|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01)))
(push) ; 8
; [then-branch: 23 | exists_path[Bool]($$((sm@88@01, sm@93@01), g@3@01), v1@74@01, v2@75@01) | live]
; [else-branch: 23 | !(exists_path[Bool]($$((sm@88@01, sm@93@01), g@3@01), v1@74@01, v2@75@01)) | live]
(push) ; 9
; [then-branch: 23 | exists_path[Bool]($$((sm@88@01, sm@93@01), g@3@01), v1@74@01, v2@75@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
(pop) ; 9
(push) ; 9
; [else-branch: 23 | !(exists_path[Bool]($$((sm@88@01, sm@93@01), g@3@01), v1@74@01, v2@75@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01)))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@94@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@94@01 g@3@01))
(pop) ; 11
(declare-fun inv@95@01 ($Ref) $Ref)
(declare-fun img@96@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@97@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@94@01 $Ref) (n2@94@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@94@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@97@01  $FVF<l>) n1@94@01) n1@94@01))
      (and
        (Set_in n2@94@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@97@01  $FVF<l>) n2@94@01) n2@94@01))
      (= n1@94@01 n2@94@01))
    (= n1@94@01 n2@94@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@3@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@3@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@3@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@95@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@97@01  $FVF<l>) r) r))
  :pattern ((inv@95@01 r))
  :qid |quant-u-7227|)))
(push) ; 11
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r) (= r (inv@95@01 r)))
    (>
      (+
        (ite
          (and
            (img@13@01 r)
            (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7228|))))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(declare-const sm@98@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(declare-const n@99@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@99@01 g@3@01))
(pop) ; 11
(declare-fun inv@100@01 ($Ref) $Ref)
(declare-fun img@101@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@102@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@99@01 $Ref) (n2@99@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@99@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@102@01  $FVF<r>) n1@99@01) n1@99@01))
      (and
        (Set_in n2@99@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@102@01  $FVF<r>) n2@99@01) n2@99@01))
      (= n1@99@01 n2@99@01))
    (= n1@99@01 n2@99@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@99@01 $Ref)) (!
  (=>
    (Set_in n@99@01 g@3@01)
    (and (= (inv@100@01 n@99@01) n@99@01) (img@101@01 n@99@01)))
  :pattern ((Set_in n@99@01 g@3@01))
  :pattern ((inv@100@01 n@99@01))
  :pattern ((img@101@01 n@99@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@101@01 r) (Set_in (inv@100@01 r) g@3@01)) (= (inv@100@01 r) r))
  :pattern ((inv@100@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@100@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@102@01  $FVF<r>) r) r))
  :pattern ((inv@100@01 r))
  :qid |quant-u-7230|)))
(push) ; 11
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r) (= r (inv@100@01 r)))
    (>
      (+
        (ite
          (and
            (img@17@01 r)
            (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7231|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const sm@103@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)))
    (=>
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@3@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@3@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@3@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((n@99@01 $Ref)) (!
  (=>
    (Set_in n@99@01 g@3@01)
    (and (= (inv@100@01 n@99@01) n@99@01) (img@101@01 n@99@01)))
  :pattern ((Set_in n@99@01 g@3@01))
  :pattern ((inv@100@01 n@99@01))
  :pattern ((img@101@01 n@99@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@101@01 r) (Set_in (inv@100@01 r) g@3@01)) (= (inv@100@01 r) r))
  :pattern ((inv@100@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)))
    (=>
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@95@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@97@01  $FVF<l>) r) r))
    :pattern ((inv@95@01 r))
    :qid |quant-u-7227|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@100@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@102@01  $FVF<r>) r) r))
    :pattern ((inv@100@01 r))
    :qid |quant-u-7230|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01)))
(push) ; 10
; [then-branch: 24 | !(exists_path[Bool]($$((sm@98@01, sm@103@01), g@3@01), v1@74@01, x@4@01)) | live]
; [else-branch: 24 | exists_path[Bool]($$((sm@98@01, sm@103@01), g@3@01), v1@74@01, x@4@01) | live]
(push) ; 11
; [then-branch: 24 | !(exists_path[Bool]($$((sm@98@01, sm@103@01), g@3@01), v1@74@01, x@4@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 24 | exists_path[Bool]($$((sm@98@01, sm@103@01), g@3@01), v1@74@01, x@4@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01))
; [eval] exists_path(old($$(g)), y, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 12
(declare-const n@104@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@104@01 g@3@01))
(pop) ; 13
(declare-fun inv@105@01 ($Ref) $Ref)
(declare-fun img@106@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@107@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@104@01 $Ref) (n2@104@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@104@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@107@01  $FVF<l>) n1@104@01) n1@104@01))
      (and
        (Set_in n2@104@01 g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@107@01  $FVF<l>) n2@104@01) n2@104@01))
      (= n1@104@01 n2@104@01))
    (= n1@104@01 n2@104@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@104@01 $Ref)) (!
  (=>
    (Set_in n@104@01 g@3@01)
    (and (= (inv@105@01 n@104@01) n@104@01) (img@106@01 n@104@01)))
  :pattern ((Set_in n@104@01 g@3@01))
  :pattern ((inv@105@01 n@104@01))
  :pattern ((img@106@01 n@104@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@106@01 r) (Set_in (inv@105@01 r) g@3@01)) (= (inv@105@01 r) r))
  :pattern ((inv@105@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@105@01 r) g@3@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@107@01  $FVF<l>) r) r))
  :pattern ((inv@105@01 r))
  :qid |quant-u-7233|)))
(push) ; 13
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r) (= r (inv@105@01 r)))
    (>
      (+
        (ite
          (and
            (img@13@01 r)
            (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7234|))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(declare-const sm@108@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)))
    (=>
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(declare-const n@109@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@109@01 g@3@01))
(pop) ; 13
(declare-fun inv@110@01 ($Ref) $Ref)
(declare-fun img@111@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@112@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@109@01 $Ref) (n2@109@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@109@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@112@01  $FVF<r>) n1@109@01) n1@109@01))
      (and
        (Set_in n2@109@01 g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@112@01  $FVF<r>) n2@109@01) n2@109@01))
      (= n1@109@01 n2@109@01))
    (= n1@109@01 n2@109@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@109@01 $Ref)) (!
  (=>
    (Set_in n@109@01 g@3@01)
    (and (= (inv@110@01 n@109@01) n@109@01) (img@111@01 n@109@01)))
  :pattern ((Set_in n@109@01 g@3@01))
  :pattern ((inv@110@01 n@109@01))
  :pattern ((img@111@01 n@109@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@111@01 r) (Set_in (inv@110@01 r) g@3@01)) (= (inv@110@01 r) r))
  :pattern ((inv@110@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@110@01 r) g@3@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@112@01  $FVF<r>) r) r))
  :pattern ((inv@110@01 r))
  :qid |quant-u-7236|)))
(push) ; 13
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r) (= r (inv@110@01 r)))
    (>
      (+
        (ite
          (and
            (img@17@01 r)
            (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7237|))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(declare-const sm@113@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)))
    (=>
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@108@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@113@01  $FVF<r>))) g@3@01))
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@104@01 $Ref)) (!
  (=>
    (Set_in n@104@01 g@3@01)
    (and (= (inv@105@01 n@104@01) n@104@01) (img@106@01 n@104@01)))
  :pattern ((Set_in n@104@01 g@3@01))
  :pattern ((inv@105@01 n@104@01))
  :pattern ((img@106@01 n@104@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@106@01 r) (Set_in (inv@105@01 r) g@3@01)) (= (inv@105@01 r) r))
  :pattern ((inv@105@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)))
    (=>
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@109@01 $Ref)) (!
  (=>
    (Set_in n@109@01 g@3@01)
    (and (= (inv@110@01 n@109@01) n@109@01) (img@111@01 n@109@01)))
  :pattern ((Set_in n@109@01 g@3@01))
  :pattern ((inv@110@01 n@109@01))
  :pattern ((img@111@01 n@109@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@111@01 r) (Set_in (inv@110@01 r) g@3@01)) (= (inv@110@01 r) r))
  :pattern ((inv@110@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)))
    (=>
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@105@01 r) g@3@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@107@01  $FVF<l>) r) r))
    :pattern ((inv@105@01 r))
    :qid |quant-u-7233|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@110@01 r) g@3@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@112@01  $FVF<r>) r) r))
    :pattern ((inv@110@01 r))
    :qid |quant-u-7236|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@108@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@113@01  $FVF<r>))) g@3@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@104@01 $Ref)) (!
  (=>
    (Set_in n@104@01 g@3@01)
    (and (= (inv@105@01 n@104@01) n@104@01) (img@106@01 n@104@01)))
  :pattern ((Set_in n@104@01 g@3@01))
  :pattern ((inv@105@01 n@104@01))
  :pattern ((img@106@01 n@104@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@106@01 r) (Set_in (inv@105@01 r) g@3@01)) (= (inv@105@01 r) r))
  :pattern ((inv@105@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)))
    (=>
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@109@01 $Ref)) (!
  (=>
    (Set_in n@109@01 g@3@01)
    (and (= (inv@110@01 n@109@01) n@109@01) (img@111@01 n@109@01)))
  :pattern ((Set_in n@109@01 g@3@01))
  :pattern ((inv@110@01 n@109@01))
  :pattern ((img@111@01 n@109@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@111@01 r) (Set_in (inv@110@01 r) g@3@01)) (= (inv@110@01 r) r))
  :pattern ((inv@110@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)))
    (=>
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert (=>
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
  (and
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@105@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@107@01  $FVF<l>) r) r))
      :pattern ((inv@105@01 r))
      :qid |quant-u-7233|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@110@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@112@01  $FVF<r>) r) r))
      :pattern ((inv@110@01 r))
      :qid |quant-u-7236|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@108@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@113@01  $FVF<r>))) g@3@01))))
(assert (or
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@3@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@3@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@3@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((n@99@01 $Ref)) (!
  (=>
    (Set_in n@99@01 g@3@01)
    (and (= (inv@100@01 n@99@01) n@99@01) (img@101@01 n@99@01)))
  :pattern ((Set_in n@99@01 g@3@01))
  :pattern ((inv@100@01 n@99@01))
  :pattern ((img@101@01 n@99@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@101@01 r) (Set_in (inv@100@01 r) g@3@01)) (= (inv@100@01 r) r))
  :pattern ((inv@100@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)))
    (=>
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@104@01 $Ref)) (!
  (=>
    (Set_in n@104@01 g@3@01)
    (and (= (inv@105@01 n@104@01) n@104@01) (img@106@01 n@104@01)))
  :pattern ((Set_in n@104@01 g@3@01))
  :pattern ((inv@105@01 n@104@01))
  :pattern ((img@106@01 n@104@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@106@01 r) (Set_in (inv@105@01 r) g@3@01)) (= (inv@105@01 r) r))
  :pattern ((inv@105@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)))
    (=>
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@109@01 $Ref)) (!
  (=>
    (Set_in n@109@01 g@3@01)
    (and (= (inv@110@01 n@109@01) n@109@01) (img@111@01 n@109@01)))
  :pattern ((Set_in n@109@01 g@3@01))
  :pattern ((inv@110@01 n@109@01))
  :pattern ((img@111@01 n@109@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@111@01 r) (Set_in (inv@110@01 r) g@3@01)) (= (inv@110@01 r) r))
  :pattern ((inv@110@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)))
    (=>
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
  (and
    (not
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@95@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@97@01  $FVF<l>) r) r))
      :pattern ((inv@95@01 r))
      :qid |quant-u-7227|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@100@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@102@01  $FVF<r>) r) r))
      :pattern ((inv@100@01 r))
      :qid |quant-u-7230|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01)
    (=>
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
      (and
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@105@01 r) g@3@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@107@01  $FVF<l>) r) r))
          :pattern ((inv@105@01 r))
          :qid |quant-u-7233|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@110@01 r) g@3@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@112@01  $FVF<r>) r) r))
          :pattern ((inv@110@01 r))
          :qid |quant-u-7236|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@108@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@113@01  $FVF<r>))) g@3@01)))
    (or
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01))))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 22 | v1@74@01 == v2@75@01]
(assert (= v1@74@01 v2@75@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@76@01 $Ref)) (!
  (=>
    (Set_in n@76@01 g@3@01)
    (and (= (inv@77@01 n@76@01) n@76@01) (img@78@01 n@76@01)))
  :pattern ((Set_in n@76@01 g@3@01))
  :pattern ((inv@77@01 n@76@01))
  :pattern ((img@78@01 n@76@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@78@01 r) (Set_in (inv@77@01 r) g@3@01)) (= (inv@77@01 r) r))
  :pattern ((inv@77@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>)))
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r)))
    (=>
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r))
      (Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>))))
  :qid |qp.fvfDomDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@79@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@79@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@83@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@83@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (forall ((n@80@01 $Ref)) (!
  (=>
    (Set_in n@80@01 g@3@01)
    (and (= (inv@81@01 n@80@01) n@80@01) (img@82@01 n@80@01)))
  :pattern ((Set_in n@80@01 g@3@01))
  :pattern ((inv@81@01 n@80@01))
  :pattern ((img@82@01 n@80@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@82@01 r) (Set_in (inv@81@01 r) g@3@01)) (= (inv@81@01 r) r))
  :pattern ((inv@81@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>)))
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r)))
    (=>
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r))
      (Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>))))
  :qid |qp.fvfDomDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@84@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@84@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef73|)))
(assert (forall ((n@85@01 $Ref)) (!
  (=>
    (Set_in n@85@01 g@3@01)
    (and (= (inv@86@01 n@85@01) n@85@01) (img@87@01 n@85@01)))
  :pattern ((Set_in n@85@01 g@3@01))
  :pattern ((inv@86@01 n@85@01))
  :pattern ((img@87@01 n@85@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@87@01 r) (Set_in (inv@86@01 r) g@3@01)) (= (inv@86@01 r) r))
  :pattern ((inv@86@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>)))
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r)))
    (=>
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r))
      (Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>))))
  :qid |qp.fvfDomDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@88@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@88@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@92@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@92@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (Set_in n@89@01 g@3@01)
    (and (= (inv@90@01 n@89@01) n@89@01) (img@91@01 n@89@01)))
  :pattern ((Set_in n@89@01 g@3@01))
  :pattern ((inv@90@01 n@89@01))
  :pattern ((img@91@01 n@89@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@91@01 r) (Set_in (inv@90@01 r) g@3@01)) (= (inv@90@01 r) r))
  :pattern ((inv@90@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>)))
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r)))
    (=>
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r))
      (Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>))))
  :qid |qp.fvfDomDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@93@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@93@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@3@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@3@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@3@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((n@99@01 $Ref)) (!
  (=>
    (Set_in n@99@01 g@3@01)
    (and (= (inv@100@01 n@99@01) n@99@01) (img@101@01 n@99@01)))
  :pattern ((Set_in n@99@01 g@3@01))
  :pattern ((inv@100@01 n@99@01))
  :pattern ((img@101@01 n@99@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@101@01 r) (Set_in (inv@100@01 r) g@3@01)) (= (inv@100@01 r) r))
  :pattern ((inv@100@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)))
    (=>
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@104@01 $Ref)) (!
  (=>
    (Set_in n@104@01 g@3@01)
    (and (= (inv@105@01 n@104@01) n@104@01) (img@106@01 n@104@01)))
  :pattern ((Set_in n@104@01 g@3@01))
  :pattern ((inv@105@01 n@104@01))
  :pattern ((img@106@01 n@104@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@106@01 r) (Set_in (inv@105@01 r) g@3@01)) (= (inv@105@01 r) r))
  :pattern ((inv@105@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)))
    (=>
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@109@01 $Ref)) (!
  (=>
    (Set_in n@109@01 g@3@01)
    (and (= (inv@110@01 n@109@01) n@109@01) (img@111@01 n@109@01)))
  :pattern ((Set_in n@109@01 g@3@01))
  :pattern ((inv@110@01 n@109@01))
  :pattern ((img@111@01 n@109@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@111@01 r) (Set_in (inv@110@01 r) g@3@01)) (= (inv@110@01 r) r))
  :pattern ((inv@110@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)))
    (=>
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert (=>
  (not (= v1@74@01 v2@75@01))
  (and
    (not (= v1@74@01 v2@75@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@77@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
      :pattern ((inv@77@01 r))
      :qid |quant-u-7215|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@81@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@83@01  $FVF<r>) r) r))
      :pattern ((inv@81@01 r))
      :qid |quant-u-7218|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@79@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@84@01  $FVF<r>))) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@86@01 r) g@3@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
      :pattern ((inv@86@01 r))
      :qid |quant-u-7221|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@90@01 r) g@3@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@92@01  $FVF<r>) r) r))
      :pattern ((inv@90@01 r))
      :qid |quant-u-7224|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
      (and
        (not
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@95@01 r) g@3@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@97@01  $FVF<l>) r) r))
          :pattern ((inv@95@01 r))
          :qid |quant-u-7227|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@100@01 r) g@3@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@102@01  $FVF<r>) r) r))
          :pattern ((inv@100@01 r))
          :qid |quant-u-7230|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01)
        (=>
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@105@01 r) g@3@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@107@01  $FVF<l>) r) r))
              :pattern ((inv@105@01 r))
              :qid |quant-u-7233|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@110@01 r) g@3@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@112@01  $FVF<r>) r) r))
              :pattern ((inv@110@01 r))
              :qid |quant-u-7236|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@108@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@113@01  $FVF<r>))) g@3@01)))
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)))))
    (or
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01)))))
; Joined path conditions
(assert (or (= v1@74@01 v2@75@01) (not (= v1@74@01 v2@75@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@76@01 $Ref)) (!
  (=>
    (Set_in n@76@01 g@3@01)
    (and (= (inv@77@01 n@76@01) n@76@01) (img@78@01 n@76@01)))
  :pattern ((Set_in n@76@01 g@3@01))
  :pattern ((inv@77@01 n@76@01))
  :pattern ((img@78@01 n@76@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@78@01 r) (Set_in (inv@77@01 r) g@3@01)) (= (inv@77@01 r) r))
  :pattern ((inv@77@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>)))
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r)))
    (=>
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r))
      (Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>))))
  :qid |qp.fvfDomDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@79@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@79@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@83@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@83@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (forall ((n@80@01 $Ref)) (!
  (=>
    (Set_in n@80@01 g@3@01)
    (and (= (inv@81@01 n@80@01) n@80@01) (img@82@01 n@80@01)))
  :pattern ((Set_in n@80@01 g@3@01))
  :pattern ((inv@81@01 n@80@01))
  :pattern ((img@82@01 n@80@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@82@01 r) (Set_in (inv@81@01 r) g@3@01)) (= (inv@81@01 r) r))
  :pattern ((inv@81@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>)))
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r)))
    (=>
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r))
      (Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>))))
  :qid |qp.fvfDomDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@84@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@84@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef73|)))
(assert (forall ((n@85@01 $Ref)) (!
  (=>
    (Set_in n@85@01 g@3@01)
    (and (= (inv@86@01 n@85@01) n@85@01) (img@87@01 n@85@01)))
  :pattern ((Set_in n@85@01 g@3@01))
  :pattern ((inv@86@01 n@85@01))
  :pattern ((img@87@01 n@85@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@87@01 r) (Set_in (inv@86@01 r) g@3@01)) (= (inv@86@01 r) r))
  :pattern ((inv@86@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>)))
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r)))
    (=>
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r))
      (Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>))))
  :qid |qp.fvfDomDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@88@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@88@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@92@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@92@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (Set_in n@89@01 g@3@01)
    (and (= (inv@90@01 n@89@01) n@89@01) (img@91@01 n@89@01)))
  :pattern ((Set_in n@89@01 g@3@01))
  :pattern ((inv@90@01 n@89@01))
  :pattern ((img@91@01 n@89@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@91@01 r) (Set_in (inv@90@01 r) g@3@01)) (= (inv@90@01 r) r))
  :pattern ((inv@90@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>)))
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r)))
    (=>
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r))
      (Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>))))
  :qid |qp.fvfDomDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@93@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@93@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@3@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@3@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@3@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((n@99@01 $Ref)) (!
  (=>
    (Set_in n@99@01 g@3@01)
    (and (= (inv@100@01 n@99@01) n@99@01) (img@101@01 n@99@01)))
  :pattern ((Set_in n@99@01 g@3@01))
  :pattern ((inv@100@01 n@99@01))
  :pattern ((img@101@01 n@99@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@101@01 r) (Set_in (inv@100@01 r) g@3@01)) (= (inv@100@01 r) r))
  :pattern ((inv@100@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)))
    (=>
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@104@01 $Ref)) (!
  (=>
    (Set_in n@104@01 g@3@01)
    (and (= (inv@105@01 n@104@01) n@104@01) (img@106@01 n@104@01)))
  :pattern ((Set_in n@104@01 g@3@01))
  :pattern ((inv@105@01 n@104@01))
  :pattern ((img@106@01 n@104@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@106@01 r) (Set_in (inv@105@01 r) g@3@01)) (= (inv@105@01 r) r))
  :pattern ((inv@105@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)))
    (=>
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@109@01 $Ref)) (!
  (=>
    (Set_in n@109@01 g@3@01)
    (and (= (inv@110@01 n@109@01) n@109@01) (img@111@01 n@109@01)))
  :pattern ((Set_in n@109@01 g@3@01))
  :pattern ((inv@110@01 n@109@01))
  :pattern ((img@111@01 n@109@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@111@01 r) (Set_in (inv@110@01 r) g@3@01)) (= (inv@110@01 r) r))
  :pattern ((inv@110@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)))
    (=>
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@74@01 $Ref) (v2@75@01 $Ref)) (!
  (and
    (=>
      (not (= v1@74@01 v2@75@01))
      (and
        (not (= v1@74@01 v2@75@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@77@01 r) g@3@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
          :pattern ((inv@77@01 r))
          :qid |quant-u-7215|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@81@01 r) g@3@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@83@01  $FVF<r>) r) r))
          :pattern ((inv@81@01 r))
          :qid |quant-u-7218|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@79@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@84@01  $FVF<r>))) g@3@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@86@01 r) g@3@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
          :pattern ((inv@86@01 r))
          :qid |quant-u-7221|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@90@01 r) g@3@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@92@01  $FVF<r>) r) r))
          :pattern ((inv@90@01 r))
          :qid |quant-u-7224|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
          (and
            (not
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@95@01 r) g@3@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@97@01  $FVF<l>) r) r))
              :pattern ((inv@95@01 r))
              :qid |quant-u-7227|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@100@01 r) g@3@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@102@01  $FVF<r>) r) r))
              :pattern ((inv@100@01 r))
              :qid |quant-u-7230|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01)
            (=>
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
              (and
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@105@01 r) g@3@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@107@01  $FVF<l>) r) r))
                  :pattern ((inv@105@01 r))
                  :qid |quant-u-7233|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@110@01 r) g@3@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@112@01  $FVF<r>) r) r))
                  :pattern ((inv@110@01 r))
                  :qid |quant-u-7236|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@108@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@113@01  $FVF<r>))) g@3@01)))
            (or
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)))))
        (or
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))))
    (or (= v1@74@01 v2@75@01) (not (= v1@74@01 v2@75@01))))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@79@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@84@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@252@27@257@10-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 21 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@76@01 $Ref)) (!
  (=>
    (Set_in n@76@01 g@3@01)
    (and (= (inv@77@01 n@76@01) n@76@01) (img@78@01 n@76@01)))
  :pattern ((Set_in n@76@01 g@3@01))
  :pattern ((inv@77@01 n@76@01))
  :pattern ((img@78@01 n@76@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@78@01 r) (Set_in (inv@77@01 r) g@3@01)) (= (inv@77@01 r) r))
  :pattern ((inv@77@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>)))
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r)))
    (=>
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r))
      (Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@79@01  $FVF<l>))))
  :qid |qp.fvfDomDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@79@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@22@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@22@01  $FVF<l>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@77@01 r) g@3@01) (img@78@01 r))
      (and
        (img@28@01 r)
        (and (Set_in (inv@27@01 r) g@3@01) (not (= (inv@27@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@79@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@22@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@79@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@32@01 r)
      (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@83@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@83@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@83@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (forall ((n@80@01 $Ref)) (!
  (=>
    (Set_in n@80@01 g@3@01)
    (and (= (inv@81@01 n@80@01) n@80@01) (img@82@01 n@80@01)))
  :pattern ((Set_in n@80@01 g@3@01))
  :pattern ((inv@81@01 n@80@01))
  :pattern ((img@82@01 n@80@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@82@01 r) (Set_in (inv@81@01 r) g@3@01)) (= (inv@81@01 r) r))
  :pattern ((inv@81@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>)))
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r)))
    (=>
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r))
      (Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@84@01  $FVF<r>))))
  :qid |qp.fvfDomDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r))
      (and
        (img@32@01 r)
        (and (Set_in (inv@31@01 r) g@3@01) (not (= (inv@31@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@84@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@81@01 r) g@3@01) (img@82@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@84@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@24@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@24@01  $FVF<r>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@24@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@84@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef73|)))
(assert (forall ((n@85@01 $Ref)) (!
  (=>
    (Set_in n@85@01 g@3@01)
    (and (= (inv@86@01 n@85@01) n@85@01) (img@87@01 n@85@01)))
  :pattern ((Set_in n@85@01 g@3@01))
  :pattern ((inv@86@01 n@85@01))
  :pattern ((img@87@01 n@85@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@87@01 r) (Set_in (inv@86@01 r) g@3@01)) (= (inv@86@01 r) r))
  :pattern ((inv@86@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>)))
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r)))
    (=>
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r))
      (Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@88@01  $FVF<l>))))
  :qid |qp.fvfDomDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@88@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@86@01 r) g@3@01) (img@87@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@88@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@88@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@92@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@92@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@92@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (Set_in n@89@01 g@3@01)
    (and (= (inv@90@01 n@89@01) n@89@01) (img@91@01 n@89@01)))
  :pattern ((Set_in n@89@01 g@3@01))
  :pattern ((inv@90@01 n@89@01))
  :pattern ((img@91@01 n@89@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@91@01 r) (Set_in (inv@90@01 r) g@3@01)) (= (inv@90@01 r) r))
  :pattern ((inv@90@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>)))
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r)))
    (=>
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r))
      (Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@93@01  $FVF<r>))))
  :qid |qp.fvfDomDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@93@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@90@01 r) g@3@01) (img@91@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@93@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@93@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@97@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@97@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@3@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@3@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@3@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@98@01  $FVF<l>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@3@01) (img@96@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@98@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@98@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@102@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@102@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((n@99@01 $Ref)) (!
  (=>
    (Set_in n@99@01 g@3@01)
    (and (= (inv@100@01 n@99@01) n@99@01) (img@101@01 n@99@01)))
  :pattern ((Set_in n@99@01 g@3@01))
  :pattern ((inv@100@01 n@99@01))
  :pattern ((img@101@01 n@99@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@101@01 r) (Set_in (inv@100@01 r) g@3@01)) (= (inv@100@01 r) r))
  :pattern ((inv@100@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)))
    (=>
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@103@01  $FVF<r>))))
  :qid |qp.fvfDomDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@100@01 r) g@3@01) (img@101@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@103@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@103@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@13@01 r)
      (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01))))
    (=
      ($FVF.lookup_l (as sm@107@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@107@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((n@104@01 $Ref)) (!
  (=>
    (Set_in n@104@01 g@3@01)
    (and (= (inv@105@01 n@104@01) n@104@01) (img@106@01 n@104@01)))
  :pattern ((Set_in n@104@01 g@3@01))
  :pattern ((inv@105@01 n@104@01))
  :pattern ((img@106@01 n@104@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@106@01 r) (Set_in (inv@105@01 r) g@3@01)) (= (inv@105@01 r) r))
  :pattern ((inv@105@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)))
    (=>
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@108@01  $FVF<l>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@7@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@7@01  $FVF<l>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@105@01 r) g@3@01) (img@106@01 r))
      (and
        (img@13@01 r)
        (and (Set_in (inv@12@01 r) g@3@01) (not (= (inv@12@01 r) x@4@01)))))
    (=
      ($FVF.lookup_l (as sm@108@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@7@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@108@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01))))
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_r (as sm@112@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@112@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((n@109@01 $Ref)) (!
  (=>
    (Set_in n@109@01 g@3@01)
    (and (= (inv@110@01 n@109@01) n@109@01) (img@111@01 n@109@01)))
  :pattern ((Set_in n@109@01 g@3@01))
  :pattern ((inv@110@01 n@109@01))
  :pattern ((img@111@01 n@109@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@111@01 r) (Set_in (inv@110@01 r) g@3@01)) (= (inv@110@01 r) r))
  :pattern ((inv@110@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)))
    (=>
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@113@01  $FVF<r>))))
  :qid |qp.fvfDomDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@3@01) (not (= (inv@16@01 r) x@4@01)))))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@110@01 r) g@3@01) (img@111@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_r (as sm@113@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@9@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@9@01  $FVF<r>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@9@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@113@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef112|)))
(assert (=>
  (not (= y@5@01 $Ref.null))
  (and
    (not (= y@5@01 $Ref.null))
    (forall ((v1@74@01 $Ref) (v2@75@01 $Ref)) (!
      (and
        (=>
          (not (= v1@74@01 v2@75@01))
          (and
            (not (= v1@74@01 v2@75@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@77@01 r) g@3@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@29@01  $FVF<l>) r) r))
              :pattern ((inv@77@01 r))
              :qid |quant-u-7215|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@81@01 r) g@3@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@83@01  $FVF<r>) r) r))
              :pattern ((inv@81@01 r))
              :qid |quant-u-7218|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@79@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@84@01  $FVF<r>))) g@3@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@86@01 r) g@3@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@14@01  $FVF<l>) r) r))
              :pattern ((inv@86@01 r))
              :qid |quant-u-7221|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@90@01 r) g@3@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@92@01  $FVF<r>) r) r))
              :pattern ((inv@90@01 r))
              :qid |quant-u-7224|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01)
            (=>
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
              (and
                (not
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@95@01 r) g@3@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@97@01  $FVF<l>) r) r))
                  :pattern ((inv@95@01 r))
                  :qid |quant-u-7227|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@100@01 r) g@3@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@102@01  $FVF<r>) r) r))
                  :pattern ((inv@100@01 r))
                  :qid |quant-u-7230|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01)
                (=>
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
                  (and
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@105@01 r) g@3@01)
                        ($FVF.loc_l ($FVF.lookup_l (as sm@107@01  $FVF<l>) r) r))
                      :pattern ((inv@105@01 r))
                      :qid |quant-u-7233|))
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@110@01 r) g@3@01)
                        ($FVF.loc_r ($FVF.lookup_r (as sm@112@01  $FVF<r>) r) r))
                      :pattern ((inv@110@01 r))
                      :qid |quant-u-7236|))
                    ($$%precondition ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@108@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@113@01  $FVF<r>))) g@3@01)))
                (or
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
                  (not
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)))))
            (or
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))))
        (or (= v1@74@01 v2@75@01) (not (= v1@74@01 v2@75@01))))
      :pattern ((exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@79@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@84@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@252@27@257@10-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@5@01 $Ref.null))
  (forall ((v1@74@01 $Ref) (v2@75@01 $Ref)) (!
    (=>
      (not (= v1@74@01 v2@75@01))
      (=
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@79@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@84@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01)
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@88@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@93@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@98@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@103@01  $FVF<r>))) g@3@01) v1@74@01 x@4@01)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@108@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@113@01  $FVF<r>))) g@3@01) y@5@01 v2@75@01)))))
    :pattern ((exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@79@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@84@01  $FVF<r>))) g@3@01) v1@74@01 v2@75@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@252@27@257@10|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- link_right ----------
(declare-const g@114@01 Set<$Ref>)
(declare-const x@115@01 $Ref)
(declare-const y@116@01 $Ref)
(declare-const g@117@01 Set<$Ref>)
(declare-const x@118@01 $Ref)
(declare-const y@119@01 $Ref)
(push) ; 1
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 ($Snap.combine ($Snap.first $t@120@01) ($Snap.second $t@120@01))))
(assert (= ($Snap.first $t@120@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@118@01 g@117@01))
(assert (=
  ($Snap.second $t@120@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@120@01))
    ($Snap.second ($Snap.second $t@120@01)))))
(assert (= ($Snap.first ($Snap.second $t@120@01)) $Snap.unit))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= y@119@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= y@119@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | y@119@01 != Null | live]
; [else-branch: 25 | y@119@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 25 | y@119@01 != Null]
(assert (not (= y@119@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 3
(push) ; 3
; [else-branch: 25 | y@119@01 == Null]
(assert (= y@119@01 $Ref.null))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (= y@119@01 $Ref.null) (not (= y@119@01 $Ref.null))))
(assert (=> (not (= y@119@01 $Ref.null)) (Set_in y@119@01 g@117@01)))
(assert (=
  ($Snap.second ($Snap.second $t@120@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@120@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@120@01))) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@117@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@120@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))
  $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
; [eval] (__right__() == __left__() ? write : 1 / 2)
; [eval] __right__() == __left__()
; [eval] __right__()
; [eval] __left__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (as __right__<__FieldEnum__>  __FieldEnum__)
    (as __left__<__FieldEnum__>  __FieldEnum__)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | __right__[__FieldEnum__] == __left__[__FieldEnum__] | dead]
; [else-branch: 26 | __right__[__FieldEnum__] != __left__[__FieldEnum__] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 26 | __right__[__FieldEnum__] != __left__[__FieldEnum__]]
(assert (not
  (=
    (as __right__<__FieldEnum__>  __FieldEnum__)
    (as __left__<__FieldEnum__>  __FieldEnum__))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (not
  (=
    (as __right__<__FieldEnum__>  __FieldEnum__)
    (as __left__<__FieldEnum__>  __FieldEnum__))))
(declare-const sm@121@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@121@01  $FVF<l>) x@118@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
(assert (not (= x@118@01 $Ref.null)))
(declare-const sm@122@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@122@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@122@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@122@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@122@01  $FVF<l>) x@118@01) x@118@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
; [eval] (__right__() == __right__() ? write : 1 / 2)
; [eval] __right__() == __right__()
; [eval] __right__()
; [eval] __right__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | True | live]
; [else-branch: 27 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 27 | True]
(pop) ; 3
(pop) ; 2
; Joined path conditions
(declare-const sm@123@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@123@01  $FVF<r>) x@118@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
(declare-const sm@124@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@124@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@124@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@124@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@124@01  $FVF<r>) x@118@01) x@118@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
(declare-const n@125@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 28 | !(n@125@01 in g@117@01) | live]
; [else-branch: 28 | n@125@01 in g@117@01 | live]
(push) ; 4
; [then-branch: 28 | !(n@125@01 in g@117@01)]
(assert (not (Set_in n@125@01 g@117@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 28 | n@125@01 in g@117@01]
(assert (Set_in n@125@01 g@117@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@125@01 g@117@01) (not (Set_in n@125@01 g@117@01))))
(assert (and (Set_in n@125@01 g@117@01) (not (= n@125@01 x@118@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@126@01 ($Ref) $Ref)
(declare-fun img@127@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@125@01 $Ref)) (!
  (=>
    (and (Set_in n@125@01 g@117@01) (not (= n@125@01 x@118@01)))
    (or (Set_in n@125@01 g@117@01) (not (Set_in n@125@01 g@117@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) n@125@01) n@125@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@125@01 $Ref) (n2@125@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@125@01 g@117@01) (not (= n1@125@01 x@118@01)))
      (and (Set_in n2@125@01 g@117@01) (not (= n2@125@01 x@118@01)))
      (= n1@125@01 n2@125@01))
    (= n1@125@01 n2@125@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@125@01 $Ref)) (!
  (=>
    (and (Set_in n@125@01 g@117@01) (not (= n@125@01 x@118@01)))
    (and (= (inv@126@01 n@125@01) n@125@01) (img@127@01 n@125@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) n@125@01) n@125@01))
  :qid |quant-u-7239|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (= (inv@126@01 r) r))
  :pattern ((inv@126@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@125@01 $Ref)) (!
  (=>
    (and (Set_in n@125@01 g@117@01) (not (= n@125@01 x@118@01)))
    (not (= n@125@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) n@125@01) n@125@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@128@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
  :pattern ((inv@126@01 r))
  :qid |quant-u-7240|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))
(declare-const n$0@129@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0 != x
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 29 | !(n$0@129@01 in g@117@01) | live]
; [else-branch: 29 | n$0@129@01 in g@117@01 | live]
(push) ; 4
; [then-branch: 29 | !(n$0@129@01 in g@117@01)]
(assert (not (Set_in n$0@129@01 g@117@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 29 | n$0@129@01 in g@117@01]
(assert (Set_in n$0@129@01 g@117@01))
; [eval] n$0 != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$0@129@01 g@117@01) (not (Set_in n$0@129@01 g@117@01))))
(assert (and (Set_in n$0@129@01 g@117@01) (not (= n$0@129@01 x@118@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@130@01 ($Ref) $Ref)
(declare-fun img@131@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$0@129@01 $Ref)) (!
  (=>
    (and (Set_in n$0@129@01 g@117@01) (not (= n$0@129@01 x@118@01)))
    (or (Set_in n$0@129@01 g@117@01) (not (Set_in n$0@129@01 g@117@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) n$0@129@01) n$0@129@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$01@129@01 $Ref) (n$02@129@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$01@129@01 g@117@01) (not (= n$01@129@01 x@118@01)))
      (and (Set_in n$02@129@01 g@117@01) (not (= n$02@129@01 x@118@01)))
      (= n$01@129@01 n$02@129@01))
    (= n$01@129@01 n$02@129@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@129@01 $Ref)) (!
  (=>
    (and (Set_in n$0@129@01 g@117@01) (not (= n$0@129@01 x@118@01)))
    (and (= (inv@130@01 n$0@129@01) n$0@129@01) (img@131@01 n$0@129@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) n$0@129@01) n$0@129@01))
  :qid |quant-u-7242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (= (inv@130@01 r) r))
  :pattern ((inv@130@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$0@129@01 $Ref)) (!
  (=>
    (and (Set_in n$0@129@01 g@117@01) (not (= n$0@129@01 x@118@01)))
    (not (= n$0@129@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) n$0@129@01) n$0@129@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@132@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) r) r))
  :pattern ((inv@130@01 r))
  :qid |quant-u-7243|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
  $Snap.unit))
; [eval] (forall n$1: Ref :: { (n$1.l in g) } { (n$1 in g), n$1.l } (n$1 in g) && n$1.l != null ==> (n$1.l in g))
(declare-const n$1@133@01 $Ref)
(push) ; 2
; [eval] (n$1 in g) && n$1.l != null ==> (n$1.l in g)
; [eval] (n$1 in g) && n$1.l != null
; [eval] (n$1 in g)
(push) ; 3
; [then-branch: 30 | !(n$1@133@01 in g@117@01) | live]
; [else-branch: 30 | n$1@133@01 in g@117@01 | live]
(push) ; 4
; [then-branch: 30 | !(n$1@133@01 in g@117@01)]
(assert (not (Set_in n$1@133@01 g@117@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 30 | n$1@133@01 in g@117@01]
(assert (Set_in n$1@133@01 g@117@01))
; [eval] n$1.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@118@01)
      (=
        ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
    :qid |qp.fvfValDef118|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
      (=
        ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
    :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
    :qid |qp.fvfValDef119|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef120|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) n$1@133@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@133@01 x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@127@01 n$1@133@01)
        (and
          (Set_in (inv@126@01 n$1@133@01) g@117@01)
          (not (= (inv@126@01 n$1@133@01) x@118@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (=>
  (Set_in n$1@133@01 g@117@01)
  (and
    (Set_in n$1@133@01 g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) n$1@133@01))))
(assert (or (Set_in n$1@133@01 g@117@01) (not (Set_in n$1@133@01 g@117@01))))
(push) ; 3
; [then-branch: 31 | n$1@133@01 in g@117@01 && Lookup(l, sm@128@01, n$1@133@01) != Null | live]
; [else-branch: 31 | !(n$1@133@01 in g@117@01 && Lookup(l, sm@128@01, n$1@133@01) != Null) | live]
(push) ; 4
; [then-branch: 31 | n$1@133@01 in g@117@01 && Lookup(l, sm@128@01, n$1@133@01) != Null]
(assert (and
  (Set_in n$1@133@01 g@117@01)
  (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null))))
; [eval] (n$1.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@118@01)
      (=
        ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
    :qid |qp.fvfValDef118|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
      (=
        ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
    :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
    :qid |qp.fvfValDef119|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef120|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) n$1@133@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@133@01 x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@127@01 n$1@133@01)
        (and
          (Set_in (inv@126@01 n$1@133@01) g@117@01)
          (not (= (inv@126@01 n$1@133@01) x@118@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 31 | !(n$1@133@01 in g@117@01 && Lookup(l, sm@128@01, n$1@133@01) != Null)]
(assert (not
  (and
    (Set_in n$1@133@01 g@117@01)
    (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (=>
  (and
    (Set_in n$1@133@01 g@117@01)
    (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null)))
  (and
    (Set_in n$1@133@01 g@117@01)
    (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) n$1@133@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@133@01 g@117@01)
      (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null))))
  (and
    (Set_in n$1@133@01 g@117@01)
    (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@128@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@128@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef120|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$1@133@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@133@01 g@117@01)
      (and
        (Set_in n$1@133@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) n$1@133@01)))
    (or (Set_in n$1@133@01 g@117@01) (not (Set_in n$1@133@01 g@117@01)))
    (=>
      (and
        (Set_in n$1@133@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null)))
      (and
        (Set_in n$1@133@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) n$1@133@01)))
    (or
      (not
        (and
          (Set_in n$1@133@01 g@117@01)
          (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null))))
      (and
        (Set_in n$1@133@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) g@117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46-aux|)))
(assert (forall ((n$1@133@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@133@01 g@117@01)
      (and
        (Set_in n$1@133@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) n$1@133@01)))
    (or (Set_in n$1@133@01 g@117@01) (not (Set_in n$1@133@01 g@117@01)))
    (=>
      (and
        (Set_in n$1@133@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null)))
      (and
        (Set_in n$1@133@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) n$1@133@01)))
    (or
      (not
        (and
          (Set_in n$1@133@01 g@117@01)
          (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null))))
      (and
        (Set_in n$1@133@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null)))))
  :pattern ((Set_in n$1@133@01 g@117@01) ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) n$1@133@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46-aux|)))
(assert (forall ((n$1@133@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@133@01 g@117@01)
      (not (= ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) g@117@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) g@117@01))
  :pattern ((Set_in n$1@133@01 g@117@01) ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n$1@133@01) n$1@133@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.r in g) } { (n$2 in g), n$2.r } (n$2 in g) && n$2.r != null ==> (n$2.r in g))
(declare-const n$2@134@01 $Ref)
(push) ; 2
; [eval] (n$2 in g) && n$2.r != null ==> (n$2.r in g)
; [eval] (n$2 in g) && n$2.r != null
; [eval] (n$2 in g)
(push) ; 3
; [then-branch: 32 | !(n$2@134@01 in g@117@01) | live]
; [else-branch: 32 | n$2@134@01 in g@117@01 | live]
(push) ; 4
; [then-branch: 32 | !(n$2@134@01 in g@117@01)]
(assert (not (Set_in n$2@134@01 g@117@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 32 | n$2@134@01 in g@117@01]
(assert (Set_in n$2@134@01 g@117@01))
; [eval] n$2.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@118@01)
      (=
        ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
    :qid |qp.fvfValDef121|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
      (=
        ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
    :qid |qp.fvfValDef122|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef123|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) n$2@134@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@134@01 x@118@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@131@01 n$2@134@01)
        (and
          (Set_in (inv@130@01 n$2@134@01) g@117@01)
          (not (= (inv@130@01 n$2@134@01) x@118@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (=>
  (Set_in n$2@134@01 g@117@01)
  (and
    (Set_in n$2@134@01 g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) n$2@134@01))))
(assert (or (Set_in n$2@134@01 g@117@01) (not (Set_in n$2@134@01 g@117@01))))
(push) ; 3
; [then-branch: 33 | n$2@134@01 in g@117@01 && Lookup(r, sm@132@01, n$2@134@01) != Null | live]
; [else-branch: 33 | !(n$2@134@01 in g@117@01 && Lookup(r, sm@132@01, n$2@134@01) != Null) | live]
(push) ; 4
; [then-branch: 33 | n$2@134@01 in g@117@01 && Lookup(r, sm@132@01, n$2@134@01) != Null]
(assert (and
  (Set_in n$2@134@01 g@117@01)
  (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null))))
; [eval] (n$2.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@118@01)
      (=
        ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
    :qid |qp.fvfValDef121|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
      (=
        ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
    :qid |qp.fvfValDef122|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef123|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) n$2@134@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@134@01 x@118@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@131@01 n$2@134@01)
        (and
          (Set_in (inv@130@01 n$2@134@01) g@117@01)
          (not (= (inv@130@01 n$2@134@01) x@118@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 33 | !(n$2@134@01 in g@117@01 && Lookup(r, sm@132@01, n$2@134@01) != Null)]
(assert (not
  (and
    (Set_in n$2@134@01 g@117@01)
    (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (=>
  (and
    (Set_in n$2@134@01 g@117@01)
    (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null)))
  (and
    (Set_in n$2@134@01 g@117@01)
    (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) n$2@134@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@134@01 g@117@01)
      (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null))))
  (and
    (Set_in n$2@134@01 g@117@01)
    (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef123|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@134@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@134@01 g@117@01)
      (and
        (Set_in n$2@134@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) n$2@134@01)))
    (or (Set_in n$2@134@01 g@117@01) (not (Set_in n$2@134@01 g@117@01)))
    (=>
      (and
        (Set_in n$2@134@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null)))
      (and
        (Set_in n$2@134@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) n$2@134@01)))
    (or
      (not
        (and
          (Set_in n$2@134@01 g@117@01)
          (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null))))
      (and
        (Set_in n$2@134@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) g@117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46-aux|)))
(assert (forall ((n$2@134@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@134@01 g@117@01)
      (and
        (Set_in n$2@134@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) n$2@134@01)))
    (or (Set_in n$2@134@01 g@117@01) (not (Set_in n$2@134@01 g@117@01)))
    (=>
      (and
        (Set_in n$2@134@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null)))
      (and
        (Set_in n$2@134@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) n$2@134@01)))
    (or
      (not
        (and
          (Set_in n$2@134@01 g@117@01)
          (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null))))
      (and
        (Set_in n$2@134@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null)))))
  :pattern ((Set_in n$2@134@01 g@117@01) ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) n$2@134@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46-aux|)))
(assert (forall ((n$2@134@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@134@01 g@117@01)
      (not (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) g@117@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) g@117@01))
  :pattern ((Set_in n$2@134@01 g@117@01) ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) n$2@134@01) n$2@134@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@262@14@262@46|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
  $Snap.unit))
; [eval] x.r == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@118@01)
      (=
        ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
    :qid |qp.fvfValDef121|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
      (=
        ($FVF.lookup_r (as sm@132@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
    :qid |qp.fvfValDef122|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@132@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef123|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@132@01  $FVF<r>) x@118@01) x@118@01))
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@131@01 x@118@01)
        (and
          (Set_in (inv@130@01 x@118@01) g@117@01)
          (not (= (inv@130@01 x@118@01) x@118@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_r (as sm@132@01  $FVF<r>) x@118@01) $Ref.null))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 ($Snap.combine ($Snap.first $t@135@01) ($Snap.second $t@135@01))))
(assert (= ($Snap.first $t@135@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@135@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second $t@135@01)))))
(assert (= ($Snap.first ($Snap.second $t@135@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@135@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))
; [eval] (__right__() == __left__() ? write : 1 / 2)
; [eval] __right__() == __left__()
; [eval] __right__()
; [eval] __left__()
(push) ; 3
; [then-branch: 34 | __right__[__FieldEnum__] == __left__[__FieldEnum__] | dead]
; [else-branch: 34 | __right__[__FieldEnum__] != __left__[__FieldEnum__] | live]
(push) ; 4
; [else-branch: 34 | __right__[__FieldEnum__] != __left__[__FieldEnum__]]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@136@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@136@01  $FVF<l>) x@118@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))))
(declare-const sm@137@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@137@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@137@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@137@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@137@01  $FVF<l>) x@118@01) x@118@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
; [eval] (__right__() == __right__() ? write : 1 / 2)
; [eval] __right__() == __right__()
; [eval] __right__()
; [eval] __right__()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | True | live]
; [else-branch: 35 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 35 | True]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@138@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@138@01  $FVF<r>) x@118@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(declare-const sm@139@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@139@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@139@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@139@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@139@01  $FVF<r>) x@118@01) x@118@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))
(declare-const n$3@140@01 $Ref)
(push) ; 3
; [eval] (n$3 in g) && n$3 != x
; [eval] (n$3 in g)
(push) ; 4
; [then-branch: 36 | !(n$3@140@01 in g@117@01) | live]
; [else-branch: 36 | n$3@140@01 in g@117@01 | live]
(push) ; 5
; [then-branch: 36 | !(n$3@140@01 in g@117@01)]
(assert (not (Set_in n$3@140@01 g@117@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 36 | n$3@140@01 in g@117@01]
(assert (Set_in n$3@140@01 g@117@01))
; [eval] n$3 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$3@140@01 g@117@01) (not (Set_in n$3@140@01 g@117@01))))
(assert (and (Set_in n$3@140@01 g@117@01) (not (= n$3@140@01 x@118@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@141@01 ($Ref) $Ref)
(declare-fun img@142@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$3@140@01 $Ref)) (!
  (=>
    (and (Set_in n$3@140@01 g@117@01) (not (= n$3@140@01 x@118@01)))
    (or (Set_in n$3@140@01 g@117@01) (not (Set_in n$3@140@01 g@117@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) n$3@140@01) n$3@140@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@140@01 $Ref) (n$32@140@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$31@140@01 g@117@01) (not (= n$31@140@01 x@118@01)))
      (and (Set_in n$32@140@01 g@117@01) (not (= n$32@140@01 x@118@01)))
      (= n$31@140@01 n$32@140@01))
    (= n$31@140@01 n$32@140@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@140@01 $Ref)) (!
  (=>
    (and (Set_in n$3@140@01 g@117@01) (not (= n$3@140@01 x@118@01)))
    (and (= (inv@141@01 n$3@140@01) n$3@140@01) (img@142@01 n$3@140@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) n$3@140@01) n$3@140@01))
  :qid |quant-u-7245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@142@01 r)
      (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01))))
    (= (inv@141@01 r) r))
  :pattern ((inv@141@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@140@01 $Ref)) (!
  (=>
    (and (Set_in n$3@140@01 g@117@01) (not (= n$3@140@01 x@118@01)))
    (not (= n$3@140@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) n$3@140@01) n$3@140@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@143@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@142@01 r)
      (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
  :pattern ((inv@141@01 r))
  :qid |quant-u-7246|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))
(declare-const n$4@144@01 $Ref)
(push) ; 3
; [eval] (n$4 in g) && n$4 != x
; [eval] (n$4 in g)
(push) ; 4
; [then-branch: 37 | !(n$4@144@01 in g@117@01) | live]
; [else-branch: 37 | n$4@144@01 in g@117@01 | live]
(push) ; 5
; [then-branch: 37 | !(n$4@144@01 in g@117@01)]
(assert (not (Set_in n$4@144@01 g@117@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 37 | n$4@144@01 in g@117@01]
(assert (Set_in n$4@144@01 g@117@01))
; [eval] n$4 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$4@144@01 g@117@01) (not (Set_in n$4@144@01 g@117@01))))
(assert (and (Set_in n$4@144@01 g@117@01) (not (= n$4@144@01 x@118@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@145@01 ($Ref) $Ref)
(declare-fun img@146@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$4@144@01 $Ref)) (!
  (=>
    (and (Set_in n$4@144@01 g@117@01) (not (= n$4@144@01 x@118@01)))
    (or (Set_in n$4@144@01 g@117@01) (not (Set_in n$4@144@01 g@117@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) n$4@144@01) n$4@144@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@144@01 $Ref) (n$42@144@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$41@144@01 g@117@01) (not (= n$41@144@01 x@118@01)))
      (and (Set_in n$42@144@01 g@117@01) (not (= n$42@144@01 x@118@01)))
      (= n$41@144@01 n$42@144@01))
    (= n$41@144@01 n$42@144@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@144@01 $Ref)) (!
  (=>
    (and (Set_in n$4@144@01 g@117@01) (not (= n$4@144@01 x@118@01)))
    (and (= (inv@145@01 n$4@144@01) n$4@144@01) (img@146@01 n$4@144@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) n$4@144@01) n$4@144@01))
  :qid |quant-u-7248|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@144@01 $Ref)) (!
  (=>
    (and (Set_in n$4@144@01 g@117@01) (not (= n$4@144@01 x@118@01)))
    (not (= n$4@144@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) n$4@144@01) n$4@144@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@147@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef133|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) r) r))
  :pattern ((inv@145@01 r))
  :qid |quant-u-7249|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
  $Snap.unit))
; [eval] (forall n$5: Ref :: { (n$5.l in g) } { (n$5 in g), n$5.l } (n$5 in g) && n$5.l != null ==> (n$5.l in g))
(declare-const n$5@148@01 $Ref)
(push) ; 3
; [eval] (n$5 in g) && n$5.l != null ==> (n$5.l in g)
; [eval] (n$5 in g) && n$5.l != null
; [eval] (n$5 in g)
(push) ; 4
; [then-branch: 38 | !(n$5@148@01 in g@117@01) | live]
; [else-branch: 38 | n$5@148@01 in g@117@01 | live]
(push) ; 5
; [then-branch: 38 | !(n$5@148@01 in g@117@01)]
(assert (not (Set_in n$5@148@01 g@117@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 38 | n$5@148@01 in g@117@01]
(assert (Set_in n$5@148@01 g@117@01))
; [eval] n$5.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@118@01)
      (=
        ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
    :qid |qp.fvfValDef128|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01))))
      (=
        ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
    :qid |qp.fvfValDef129|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef130|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) n$5@148@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@148@01 x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@142@01 n$5@148@01)
        (and
          (Set_in (inv@141@01 n$5@148@01) g@117@01)
          (not (= (inv@141@01 n$5@148@01) x@118@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@142@01 r)
      (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (=>
  (Set_in n$5@148@01 g@117@01)
  (and
    (Set_in n$5@148@01 g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) n$5@148@01))))
(assert (or (Set_in n$5@148@01 g@117@01) (not (Set_in n$5@148@01 g@117@01))))
(push) ; 4
; [then-branch: 39 | n$5@148@01 in g@117@01 && Lookup(l, sm@143@01, n$5@148@01) != Null | live]
; [else-branch: 39 | !(n$5@148@01 in g@117@01 && Lookup(l, sm@143@01, n$5@148@01) != Null) | live]
(push) ; 5
; [then-branch: 39 | n$5@148@01 in g@117@01 && Lookup(l, sm@143@01, n$5@148@01) != Null]
(assert (and
  (Set_in n$5@148@01 g@117@01)
  (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null))))
; [eval] (n$5.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@118@01)
      (=
        ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
    :qid |qp.fvfValDef128|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01))))
      (=
        ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
    :qid |qp.fvfValDef129|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef130|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) n$5@148@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@148@01 x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@142@01 n$5@148@01)
        (and
          (Set_in (inv@141@01 n$5@148@01) g@117@01)
          (not (= (inv@141@01 n$5@148@01) x@118@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 39 | !(n$5@148@01 in g@117@01 && Lookup(l, sm@143@01, n$5@148@01) != Null)]
(assert (not
  (and
    (Set_in n$5@148@01 g@117@01)
    (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@142@01 r)
      (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (=>
  (and
    (Set_in n$5@148@01 g@117@01)
    (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null)))
  (and
    (Set_in n$5@148@01 g@117@01)
    (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) n$5@148@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$5@148@01 g@117@01)
      (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null))))
  (and
    (Set_in n$5@148@01 g@117@01)
    (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@142@01 r)
      (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@143@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@143@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef130|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$5@148@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@148@01 g@117@01)
      (and
        (Set_in n$5@148@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) n$5@148@01)))
    (or (Set_in n$5@148@01 g@117@01) (not (Set_in n$5@148@01 g@117@01)))
    (=>
      (and
        (Set_in n$5@148@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null)))
      (and
        (Set_in n$5@148@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) n$5@148@01)))
    (or
      (not
        (and
          (Set_in n$5@148@01 g@117@01)
          (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null))))
      (and
        (Set_in n$5@148@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) g@117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45-aux|)))
(assert (forall ((n$5@148@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@148@01 g@117@01)
      (and
        (Set_in n$5@148@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) n$5@148@01)))
    (or (Set_in n$5@148@01 g@117@01) (not (Set_in n$5@148@01 g@117@01)))
    (=>
      (and
        (Set_in n$5@148@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null)))
      (and
        (Set_in n$5@148@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) n$5@148@01)))
    (or
      (not
        (and
          (Set_in n$5@148@01 g@117@01)
          (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null))))
      (and
        (Set_in n$5@148@01 g@117@01)
        (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null)))))
  :pattern ((Set_in n$5@148@01 g@117@01) ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) n$5@148@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45-aux|)))
(assert (forall ((n$5@148@01 $Ref)) (!
  (=>
    (and
      (Set_in n$5@148@01 g@117@01)
      (not (= ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) g@117@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) g@117@01))
  :pattern ((Set_in n$5@148@01 g@117@01) ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n$5@148@01) n$5@148@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))
  $Snap.unit))
; [eval] (forall n$6: Ref :: { (n$6.r in g) } { (n$6 in g), n$6.r } (n$6 in g) && n$6.r != null ==> (n$6.r in g))
(declare-const n$6@149@01 $Ref)
(push) ; 3
; [eval] (n$6 in g) && n$6.r != null ==> (n$6.r in g)
; [eval] (n$6 in g) && n$6.r != null
; [eval] (n$6 in g)
(push) ; 4
; [then-branch: 40 | !(n$6@149@01 in g@117@01) | live]
; [else-branch: 40 | n$6@149@01 in g@117@01 | live]
(push) ; 5
; [then-branch: 40 | !(n$6@149@01 in g@117@01)]
(assert (not (Set_in n$6@149@01 g@117@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 40 | n$6@149@01 in g@117@01]
(assert (Set_in n$6@149@01 g@117@01))
; [eval] n$6.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@118@01)
      (=
        ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
    :qid |qp.fvfValDef131|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
      (=
        ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
    :qid |qp.fvfValDef132|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef133|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) n$6@149@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@149@01 x@118@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@146@01 n$6@149@01)
        (and
          (Set_in (inv@145@01 n$6@149@01) g@117@01)
          (not (= (inv@145@01 n$6@149@01) x@118@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef133|)))
(assert (=>
  (Set_in n$6@149@01 g@117@01)
  (and
    (Set_in n$6@149@01 g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) n$6@149@01))))
(assert (or (Set_in n$6@149@01 g@117@01) (not (Set_in n$6@149@01 g@117@01))))
(push) ; 4
; [then-branch: 41 | n$6@149@01 in g@117@01 && Lookup(r, sm@147@01, n$6@149@01) != Null | live]
; [else-branch: 41 | !(n$6@149@01 in g@117@01 && Lookup(r, sm@147@01, n$6@149@01) != Null) | live]
(push) ; 5
; [then-branch: 41 | n$6@149@01 in g@117@01 && Lookup(r, sm@147@01, n$6@149@01) != Null]
(assert (and
  (Set_in n$6@149@01 g@117@01)
  (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null))))
; [eval] (n$6.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@118@01)
      (=
        ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
    :qid |qp.fvfValDef131|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
      (=
        ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
    :qid |qp.fvfValDef132|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef133|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) n$6@149@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@149@01 x@118@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@146@01 n$6@149@01)
        (and
          (Set_in (inv@145@01 n$6@149@01) g@117@01)
          (not (= (inv@145@01 n$6@149@01) x@118@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 41 | !(n$6@149@01 in g@117@01 && Lookup(r, sm@147@01, n$6@149@01) != Null)]
(assert (not
  (and
    (Set_in n$6@149@01 g@117@01)
    (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef133|)))
(assert (=>
  (and
    (Set_in n$6@149@01 g@117@01)
    (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null)))
  (and
    (Set_in n$6@149@01 g@117@01)
    (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) n$6@149@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@149@01 g@117@01)
      (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null))))
  (and
    (Set_in n$6@149@01 g@117@01)
    (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef133|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@149@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@149@01 g@117@01)
      (and
        (Set_in n$6@149@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) n$6@149@01)))
    (or (Set_in n$6@149@01 g@117@01) (not (Set_in n$6@149@01 g@117@01)))
    (=>
      (and
        (Set_in n$6@149@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null)))
      (and
        (Set_in n$6@149@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) n$6@149@01)))
    (or
      (not
        (and
          (Set_in n$6@149@01 g@117@01)
          (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null))))
      (and
        (Set_in n$6@149@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) g@117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45-aux|)))
(assert (forall ((n$6@149@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@149@01 g@117@01)
      (and
        (Set_in n$6@149@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) n$6@149@01)))
    (or (Set_in n$6@149@01 g@117@01) (not (Set_in n$6@149@01 g@117@01)))
    (=>
      (and
        (Set_in n$6@149@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null)))
      (and
        (Set_in n$6@149@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) n$6@149@01)))
    (or
      (not
        (and
          (Set_in n$6@149@01 g@117@01)
          (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null))))
      (and
        (Set_in n$6@149@01 g@117@01)
        (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null)))))
  :pattern ((Set_in n$6@149@01 g@117@01) ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) n$6@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45-aux|)))
(assert (forall ((n$6@149@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@149@01 g@117@01)
      (not (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) g@117@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) g@117@01))
  :pattern ((Set_in n$6@149@01 g@117@01) ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) n$6@149@01) n$6@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@264@13@264@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))
  $Snap.unit))
; [eval] x.r == y
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@118@01)
      (=
        ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
    :qid |qp.fvfValDef131|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
      (=
        ($FVF.lookup_r (as sm@147@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
    :qid |qp.fvfValDef132|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@147@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef133|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@147@01  $FVF<r>) x@118@01) x@118@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@146@01 x@118@01)
        (and
          (Set_in (inv@145@01 x@118@01) g@117@01)
          (not (= (inv@145@01 x@118@01) x@118@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_r (as sm@147@01  $FVF<r>) x@118@01) y@119@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))))
  $Snap.unit))
; [eval] y == null ==> $$(g) == old($$(g))
; [eval] y == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@119@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@119@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | y@119@01 == Null | live]
; [else-branch: 42 | y@119@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 42 | y@119@01 == Null]
(assert (= y@119@01 $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@150@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@150@01 g@117@01))
(pop) ; 6
(declare-fun inv@151@01 ($Ref) $Ref)
(declare-fun img@152@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@150@01 $Ref) (n2@150@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@150@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n1@150@01) n1@150@01))
      (and
        (Set_in n2@150@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n2@150@01) n2@150@01))
      (= n1@150@01 n2@150@01))
    (= n1@150@01 n2@150@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g@117@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g@117@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g@117@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@151@01 r) g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
  :pattern ((inv@151@01 r))
  :qid |quant-u-7251|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r) (= r (inv@151@01 r)))
    (>
      (+
        (ite
          (and
            (img@142@01 r)
            (and
              (Set_in (inv@141@01 r) g@117@01)
              (not (= (inv@141@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7252|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@153@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@153@01  $FVF<l>)))
      (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r))
      (Set_in r ($FVF.domain_l (as sm@153@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@153@01  $FVF<l>))))
  :qid |qp.fvfDomDef137|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef136|)))
(declare-const n@154@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@154@01 g@117@01))
(pop) ; 6
(declare-fun inv@155@01 ($Ref) $Ref)
(declare-fun img@156@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@157@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@157@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@157@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@157@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@157@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@157@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef140|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@154@01 $Ref) (n2@154@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@154@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@157@01  $FVF<r>) n1@154@01) n1@154@01))
      (and
        (Set_in n2@154@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@157@01  $FVF<r>) n2@154@01) n2@154@01))
      (= n1@154@01 n2@154@01))
    (= n1@154@01 n2@154@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 g@117@01)
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 g@117@01))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@156@01 r) (Set_in (inv@155@01 r) g@117@01)) (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@155@01 r) g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@157@01  $FVF<r>) r) r))
  :pattern ((inv@155@01 r))
  :qid |quant-u-7254|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r) (= r (inv@155@01 r)))
    (>
      (+
        (ite
          (and
            (img@146@01 r)
            (and
              (Set_in (inv@145@01 r) g@117@01)
              (not (= (inv@145@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7255|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@158@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@158@01  $FVF<r>)))
      (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r))
      (Set_in r ($FVF.domain_r (as sm@158@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@158@01  $FVF<r>))))
  :qid |qp.fvfDomDef144|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@158@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@158@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@158@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@158@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@158@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef143|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@153@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@158@01  $FVF<r>))) g@117@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g@117@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g@117@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g@117@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@153@01  $FVF<l>)))
      (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r))
      (Set_in r ($FVF.domain_l (as sm@153@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@153@01  $FVF<l>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@157@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@157@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@157@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@157@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@157@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef140|)))
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 g@117@01)
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 g@117@01))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@156@01 r) (Set_in (inv@155@01 r) g@117@01)) (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@158@01  $FVF<r>)))
      (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r))
      (Set_in r ($FVF.domain_r (as sm@158@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@158@01  $FVF<r>))))
  :qid |qp.fvfDomDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@158@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@158@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@158@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@158@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@158@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef143|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@151@01 r) g@117@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
    :pattern ((inv@151@01 r))
    :qid |quant-u-7251|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@155@01 r) g@117@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@157@01  $FVF<r>) r) r))
    :pattern ((inv@155@01 r))
    :qid |quant-u-7254|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@153@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@158@01  $FVF<r>))) g@117@01)))
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@159@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@159@01 g@117@01))
(pop) ; 6
(declare-fun inv@160@01 ($Ref) $Ref)
(declare-fun img@161@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@159@01 $Ref) (n2@159@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@159@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n1@159@01) n1@159@01))
      (and
        (Set_in n2@159@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n2@159@01) n2@159@01))
      (= n1@159@01 n2@159@01))
    (= n1@159@01 n2@159@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@117@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@117@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@117@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@160@01 r) g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
  :pattern ((inv@160@01 r))
  :qid |quant-u-7257|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r) (= r (inv@160@01 r)))
    (>
      (+
        (ite
          (and
            (img@127@01 r)
            (and
              (Set_in (inv@126@01 r) g@117@01)
              (not (= (inv@126@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7258|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@162@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@162@01  $FVF<l>)))
      (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r))
      (Set_in r ($FVF.domain_l (as sm@162@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@162@01  $FVF<l>))))
  :qid |qp.fvfDomDef148|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@162@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@162@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@162@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@162@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@162@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef147|)))
(declare-const n@163@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@163@01 g@117@01))
(pop) ; 6
(declare-fun inv@164@01 ($Ref) $Ref)
(declare-fun img@165@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@166@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@166@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@166@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@166@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@166@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@166@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef151|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@163@01 $Ref) (n2@163@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@163@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@166@01  $FVF<r>) n1@163@01) n1@163@01))
      (and
        (Set_in n2@163@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@166@01  $FVF<r>) n2@163@01) n2@163@01))
      (= n1@163@01 n2@163@01))
    (= n1@163@01 n2@163@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@163@01 $Ref)) (!
  (=>
    (Set_in n@163@01 g@117@01)
    (and (= (inv@164@01 n@163@01) n@163@01) (img@165@01 n@163@01)))
  :pattern ((Set_in n@163@01 g@117@01))
  :pattern ((inv@164@01 n@163@01))
  :pattern ((img@165@01 n@163@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@165@01 r) (Set_in (inv@164@01 r) g@117@01)) (= (inv@164@01 r) r))
  :pattern ((inv@164@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@164@01 r) g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@166@01  $FVF<r>) r) r))
  :pattern ((inv@164@01 r))
  :qid |quant-u-7260|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r) (= r (inv@164@01 r)))
    (>
      (+
        (ite
          (and
            (img@131@01 r)
            (and
              (Set_in (inv@130@01 r) g@117@01)
              (not (= (inv@130@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7261|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@167@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@167@01  $FVF<r>)))
      (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r)))
    (=>
      (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r))
      (Set_in r ($FVF.domain_r (as sm@167@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@167@01  $FVF<r>))))
  :qid |qp.fvfDomDef155|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@167@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@167@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@167@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@167@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@167@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@162@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@167@01  $FVF<r>))) g@117@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@117@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@117@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@117@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@162@01  $FVF<l>)))
      (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r))
      (Set_in r ($FVF.domain_l (as sm@162@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@162@01  $FVF<l>))))
  :qid |qp.fvfDomDef148|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@162@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@162@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@162@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@162@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@162@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef147|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@166@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@166@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@166@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@166@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@166@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((n@163@01 $Ref)) (!
  (=>
    (Set_in n@163@01 g@117@01)
    (and (= (inv@164@01 n@163@01) n@163@01) (img@165@01 n@163@01)))
  :pattern ((Set_in n@163@01 g@117@01))
  :pattern ((inv@164@01 n@163@01))
  :pattern ((img@165@01 n@163@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@165@01 r) (Set_in (inv@164@01 r) g@117@01)) (= (inv@164@01 r) r))
  :pattern ((inv@164@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@167@01  $FVF<r>)))
      (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r)))
    (=>
      (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r))
      (Set_in r ($FVF.domain_r (as sm@167@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@167@01  $FVF<r>))))
  :qid |qp.fvfDomDef155|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@167@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@167@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@167@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@167@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@167@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@160@01 r) g@117@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
    :pattern ((inv@160@01 r))
    :qid |quant-u-7257|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@164@01 r) g@117@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@166@01  $FVF<r>) r) r))
    :pattern ((inv@164@01 r))
    :qid |quant-u-7260|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@162@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@167@01  $FVF<r>))) g@117@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 42 | y@119@01 != Null]
(assert (not (= y@119@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g@117@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g@117@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g@117@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@153@01  $FVF<l>)))
      (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r))
      (Set_in r ($FVF.domain_l (as sm@153@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@153@01  $FVF<l>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g@117@01) (img@152@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@153@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@153@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@157@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@157@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@157@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@157@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@157@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef140|)))
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 g@117@01)
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 g@117@01))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@156@01 r) (Set_in (inv@155@01 r) g@117@01)) (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@158@01  $FVF<r>)))
      (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r))
      (Set_in r ($FVF.domain_r (as sm@158@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@158@01  $FVF<r>))))
  :qid |qp.fvfDomDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@158@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@158@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@155@01 r) g@117@01) (img@156@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@158@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@158@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@158@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef143|)))
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@117@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@117@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@117@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@162@01  $FVF<l>)))
      (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r))
      (Set_in r ($FVF.domain_l (as sm@162@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@162@01  $FVF<l>))))
  :qid |qp.fvfDomDef148|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@162@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@162@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@117@01) (img@161@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@162@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@162@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@162@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef147|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@166@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@166@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@166@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@166@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@166@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((n@163@01 $Ref)) (!
  (=>
    (Set_in n@163@01 g@117@01)
    (and (= (inv@164@01 n@163@01) n@163@01) (img@165@01 n@163@01)))
  :pattern ((Set_in n@163@01 g@117@01))
  :pattern ((inv@164@01 n@163@01))
  :pattern ((img@165@01 n@163@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@165@01 r) (Set_in (inv@164@01 r) g@117@01)) (= (inv@164@01 r) r))
  :pattern ((inv@164@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@167@01  $FVF<r>)))
      (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r)))
    (=>
      (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r))
      (Set_in r ($FVF.domain_r (as sm@167@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@167@01  $FVF<r>))))
  :qid |qp.fvfDomDef155|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@167@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@167@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@164@01 r) g@117@01) (img@165@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@167@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@167@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@167@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert (=>
  (= y@119@01 $Ref.null)
  (and
    (= y@119@01 $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@151@01 r) g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
      :pattern ((inv@151@01 r))
      :qid |quant-u-7251|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@155@01 r) g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@157@01  $FVF<r>) r) r))
      :pattern ((inv@155@01 r))
      :qid |quant-u-7254|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@153@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@158@01  $FVF<r>))) g@117@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@160@01 r) g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
      :pattern ((inv@160@01 r))
      :qid |quant-u-7257|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@164@01 r) g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@166@01  $FVF<r>) r) r))
      :pattern ((inv@164@01 r))
      :qid |quant-u-7260|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@162@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@167@01  $FVF<r>))) g@117@01))))
; Joined path conditions
(assert (or (not (= y@119@01 $Ref.null)) (= y@119@01 $Ref.null)))
(assert (=>
  (= y@119@01 $Ref.null)
  (Set_equal ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@153@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@158@01  $FVF<r>))) g@117@01) ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@162@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@167@01  $FVF<r>))) g@117@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@119@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@119@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 43 | y@119@01 != Null | live]
; [else-branch: 43 | y@119@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 43 | y@119@01 != Null]
(assert (not (= y@119@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
(declare-const v1@168@01 $Ref)
(declare-const v2@169@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@170@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@170@01 g@117@01))
(pop) ; 7
(declare-fun inv@171@01 ($Ref) $Ref)
(declare-fun img@172@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@170@01 $Ref) (n2@170@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@170@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n1@170@01) n1@170@01))
      (and
        (Set_in n2@170@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n2@170@01) n2@170@01))
      (= n1@170@01 n2@170@01))
    (= n1@170@01 n2@170@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@117@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@117@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@117@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@171@01 r) g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
  :pattern ((inv@171@01 r))
  :qid |quant-u-7263|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r) (= r (inv@171@01 r)))
    (>
      (+
        (ite
          (and
            (img@142@01 r)
            (and
              (Set_in (inv@141@01 r) g@117@01)
              (not (= (inv@141@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7264|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@173@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>)))
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r))
      (Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>))))
  :qid |qp.fvfDomDef159|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@173@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@173@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef158|)))
(declare-const n@174@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@174@01 g@117@01))
(pop) ; 7
(declare-fun inv@175@01 ($Ref) $Ref)
(declare-fun img@176@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@177@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@177@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@177@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef162|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@174@01 $Ref) (n2@174@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@174@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@177@01  $FVF<r>) n1@174@01) n1@174@01))
      (and
        (Set_in n2@174@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@177@01  $FVF<r>) n2@174@01) n2@174@01))
      (= n1@174@01 n2@174@01))
    (= n1@174@01 n2@174@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@174@01 $Ref)) (!
  (=>
    (Set_in n@174@01 g@117@01)
    (and (= (inv@175@01 n@174@01) n@174@01) (img@176@01 n@174@01)))
  :pattern ((Set_in n@174@01 g@117@01))
  :pattern ((inv@175@01 n@174@01))
  :pattern ((img@176@01 n@174@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@176@01 r) (Set_in (inv@175@01 r) g@117@01)) (= (inv@175@01 r) r))
  :pattern ((inv@175@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@175@01 r) g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@177@01  $FVF<r>) r) r))
  :pattern ((inv@175@01 r))
  :qid |quant-u-7266|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r) (= r (inv@175@01 r)))
    (>
      (+
        (ite
          (and
            (img@146@01 r)
            (and
              (Set_in (inv@145@01 r) g@117@01)
              (not (= (inv@145@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7267|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@178@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>)))
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r)))
    (=>
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r))
      (Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>))))
  :qid |qp.fvfDomDef166|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@178@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@178@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@173@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@178@01  $FVF<r>))) g@117@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@117@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@117@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@117@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>)))
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r))
      (Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@173@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@173@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@177@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@177@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@174@01 $Ref)) (!
  (=>
    (Set_in n@174@01 g@117@01)
    (and (= (inv@175@01 n@174@01) n@174@01) (img@176@01 n@174@01)))
  :pattern ((Set_in n@174@01 g@117@01))
  :pattern ((inv@175@01 n@174@01))
  :pattern ((img@176@01 n@174@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@176@01 r) (Set_in (inv@175@01 r) g@117@01)) (= (inv@175@01 r) r))
  :pattern ((inv@175@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>)))
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r)))
    (=>
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r))
      (Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@178@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@178@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@171@01 r) g@117@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
    :pattern ((inv@171@01 r))
    :qid |quant-u-7263|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@175@01 r) g@117@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@177@01  $FVF<r>) r) r))
    :pattern ((inv@175@01 r))
    :qid |quant-u-7266|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@173@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@178@01  $FVF<r>))) g@117@01)))
; [eval] edge(old($$(g)), v1, v2) || v1 == x && v2 == y
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 6
(declare-const n@179@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@179@01 g@117@01))
(pop) ; 7
(declare-fun inv@180@01 ($Ref) $Ref)
(declare-fun img@181@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@179@01 $Ref) (n2@179@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@179@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n1@179@01) n1@179@01))
      (and
        (Set_in n2@179@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n2@179@01) n2@179@01))
      (= n1@179@01 n2@179@01))
    (= n1@179@01 n2@179@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@179@01 $Ref)) (!
  (=>
    (Set_in n@179@01 g@117@01)
    (and (= (inv@180@01 n@179@01) n@179@01) (img@181@01 n@179@01)))
  :pattern ((Set_in n@179@01 g@117@01))
  :pattern ((inv@180@01 n@179@01))
  :pattern ((img@181@01 n@179@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@181@01 r) (Set_in (inv@180@01 r) g@117@01)) (= (inv@180@01 r) r))
  :pattern ((inv@180@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@180@01 r) g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
  :pattern ((inv@180@01 r))
  :qid |quant-u-7269|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r) (= r (inv@180@01 r)))
    (>
      (+
        (ite
          (and
            (img@127@01 r)
            (and
              (Set_in (inv@126@01 r) g@117@01)
              (not (= (inv@126@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7270|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@182@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>)))
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r)))
    (=>
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r))
      (Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>))))
  :qid |qp.fvfDomDef170|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@182@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@182@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef169|)))
(declare-const n@183@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@183@01 g@117@01))
(pop) ; 7
(declare-fun inv@184@01 ($Ref) $Ref)
(declare-fun img@185@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@186@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@186@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@186@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef173|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@183@01 $Ref) (n2@183@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@183@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@186@01  $FVF<r>) n1@183@01) n1@183@01))
      (and
        (Set_in n2@183@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@186@01  $FVF<r>) n2@183@01) n2@183@01))
      (= n1@183@01 n2@183@01))
    (= n1@183@01 n2@183@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@183@01 $Ref)) (!
  (=>
    (Set_in n@183@01 g@117@01)
    (and (= (inv@184@01 n@183@01) n@183@01) (img@185@01 n@183@01)))
  :pattern ((Set_in n@183@01 g@117@01))
  :pattern ((inv@184@01 n@183@01))
  :pattern ((img@185@01 n@183@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@185@01 r) (Set_in (inv@184@01 r) g@117@01)) (= (inv@184@01 r) r))
  :pattern ((inv@184@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@184@01 r) g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@186@01  $FVF<r>) r) r))
  :pattern ((inv@184@01 r))
  :qid |quant-u-7272|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r) (= r (inv@184@01 r)))
    (>
      (+
        (ite
          (and
            (img@131@01 r)
            (and
              (Set_in (inv@130@01 r) g@117@01)
              (not (= (inv@130@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7273|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@187@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>)))
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r)))
    (=>
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r))
      (Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>))))
  :qid |qp.fvfDomDef177|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@187@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@187@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@179@01 $Ref)) (!
  (=>
    (Set_in n@179@01 g@117@01)
    (and (= (inv@180@01 n@179@01) n@179@01) (img@181@01 n@179@01)))
  :pattern ((Set_in n@179@01 g@117@01))
  :pattern ((inv@180@01 n@179@01))
  :pattern ((img@181@01 n@179@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@181@01 r) (Set_in (inv@180@01 r) g@117@01)) (= (inv@180@01 r) r))
  :pattern ((inv@180@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>)))
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r)))
    (=>
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r))
      (Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@182@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@182@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@186@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@186@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef173|)))
(assert (forall ((n@183@01 $Ref)) (!
  (=>
    (Set_in n@183@01 g@117@01)
    (and (= (inv@184@01 n@183@01) n@183@01) (img@185@01 n@183@01)))
  :pattern ((Set_in n@183@01 g@117@01))
  :pattern ((inv@184@01 n@183@01))
  :pattern ((img@185@01 n@183@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@185@01 r) (Set_in (inv@184@01 r) g@117@01)) (= (inv@184@01 r) r))
  :pattern ((inv@184@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>)))
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r)))
    (=>
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r))
      (Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>))))
  :qid |qp.fvfDomDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@187@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@187@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@180@01 r) g@117@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
    :pattern ((inv@180@01 r))
    :qid |quant-u-7269|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@184@01 r) g@117@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@186@01  $FVF<r>) r) r))
    :pattern ((inv@184@01 r))
    :qid |quant-u-7272|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01)))
(push) ; 6
; [then-branch: 44 | edge[Bool]($$((sm@182@01, sm@187@01), g@117@01), v1@168@01, v2@169@01) | live]
; [else-branch: 44 | !(edge[Bool]($$((sm@182@01, sm@187@01), g@117@01), v1@168@01, v2@169@01)) | live]
(push) ; 7
; [then-branch: 44 | edge[Bool]($$((sm@182@01, sm@187@01), g@117@01), v1@168@01, v2@169@01)]
(assert (edge<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
(pop) ; 7
(push) ; 7
; [else-branch: 44 | !(edge[Bool]($$((sm@182@01, sm@187@01), g@117@01), v1@168@01, v2@169@01))]
(assert (not
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01)))
; [eval] v1 == x && v2 == y
; [eval] v1 == x
(push) ; 8
; [then-branch: 45 | v1@168@01 != x@118@01 | live]
; [else-branch: 45 | v1@168@01 == x@118@01 | live]
(push) ; 9
; [then-branch: 45 | v1@168@01 != x@118@01]
(assert (not (= v1@168@01 x@118@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 45 | v1@168@01 == x@118@01]
(assert (= v1@168@01 x@118@01))
; [eval] v2 == y
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (= v1@168@01 x@118@01) (not (= v1@168@01 x@118@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
  (and
    (not
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
    (or (= v1@168@01 x@118@01) (not (= v1@168@01 x@118@01))))))
(assert (or
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@117@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@117@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@117@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>)))
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r))
      (Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@173@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@173@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@177@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@177@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@174@01 $Ref)) (!
  (=>
    (Set_in n@174@01 g@117@01)
    (and (= (inv@175@01 n@174@01) n@174@01) (img@176@01 n@174@01)))
  :pattern ((Set_in n@174@01 g@117@01))
  :pattern ((inv@175@01 n@174@01))
  :pattern ((img@176@01 n@174@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@176@01 r) (Set_in (inv@175@01 r) g@117@01)) (= (inv@175@01 r) r))
  :pattern ((inv@175@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>)))
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r)))
    (=>
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r))
      (Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@178@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@178@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (forall ((n@179@01 $Ref)) (!
  (=>
    (Set_in n@179@01 g@117@01)
    (and (= (inv@180@01 n@179@01) n@179@01) (img@181@01 n@179@01)))
  :pattern ((Set_in n@179@01 g@117@01))
  :pattern ((inv@180@01 n@179@01))
  :pattern ((img@181@01 n@179@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@181@01 r) (Set_in (inv@180@01 r) g@117@01)) (= (inv@180@01 r) r))
  :pattern ((inv@180@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>)))
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r)))
    (=>
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r))
      (Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@182@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@182@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@186@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@186@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef173|)))
(assert (forall ((n@183@01 $Ref)) (!
  (=>
    (Set_in n@183@01 g@117@01)
    (and (= (inv@184@01 n@183@01) n@183@01) (img@185@01 n@183@01)))
  :pattern ((Set_in n@183@01 g@117@01))
  :pattern ((inv@184@01 n@183@01))
  :pattern ((img@185@01 n@183@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@185@01 r) (Set_in (inv@184@01 r) g@117@01)) (= (inv@184@01 r) r))
  :pattern ((inv@184@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>)))
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r)))
    (=>
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r))
      (Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>))))
  :qid |qp.fvfDomDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@187@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@187@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@171@01 r) g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
  :pattern ((inv@171@01 r))
  :qid |quant-u-7263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@175@01 r) g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@177@01  $FVF<r>) r) r))
  :pattern ((inv@175@01 r))
  :qid |quant-u-7266|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@173@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@178@01  $FVF<r>))) g@117@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@180@01 r) g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
  :pattern ((inv@180@01 r))
  :qid |quant-u-7269|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@184@01 r) g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@186@01  $FVF<r>) r) r))
  :pattern ((inv@184@01 r))
  :qid |quant-u-7272|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@168@01 $Ref) (v2@169@01 $Ref)) (!
  (and
    (=>
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
      (and
        (not
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
        (or (= v1@168@01 x@118@01) (not (= v1@168@01 x@118@01)))))
    (or
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01)))
  :pattern ((edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@267@27@269@78-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 43 | y@119@01 == Null]
(assert (= y@119@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@117@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@117@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@117@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>)))
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r))
      (Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@173@01  $FVF<l>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@173@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@117@01) (img@172@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@173@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@173@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@177@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@177@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@177@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@174@01 $Ref)) (!
  (=>
    (Set_in n@174@01 g@117@01)
    (and (= (inv@175@01 n@174@01) n@174@01) (img@176@01 n@174@01)))
  :pattern ((Set_in n@174@01 g@117@01))
  :pattern ((inv@175@01 n@174@01))
  :pattern ((img@176@01 n@174@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@176@01 r) (Set_in (inv@175@01 r) g@117@01)) (= (inv@175@01 r) r))
  :pattern ((inv@175@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>)))
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r)))
    (=>
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r))
      (Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@178@01  $FVF<r>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@178@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@175@01 r) g@117@01) (img@176@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@178@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@178@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (forall ((n@179@01 $Ref)) (!
  (=>
    (Set_in n@179@01 g@117@01)
    (and (= (inv@180@01 n@179@01) n@179@01) (img@181@01 n@179@01)))
  :pattern ((Set_in n@179@01 g@117@01))
  :pattern ((inv@180@01 n@179@01))
  :pattern ((img@181@01 n@179@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@181@01 r) (Set_in (inv@180@01 r) g@117@01)) (= (inv@180@01 r) r))
  :pattern ((inv@180@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>)))
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r)))
    (=>
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r))
      (Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@182@01  $FVF<l>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@182@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@180@01 r) g@117@01) (img@181@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@182@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@182@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@186@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@186@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@186@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef173|)))
(assert (forall ((n@183@01 $Ref)) (!
  (=>
    (Set_in n@183@01 g@117@01)
    (and (= (inv@184@01 n@183@01) n@183@01) (img@185@01 n@183@01)))
  :pattern ((Set_in n@183@01 g@117@01))
  :pattern ((inv@184@01 n@183@01))
  :pattern ((img@185@01 n@183@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@185@01 r) (Set_in (inv@184@01 r) g@117@01)) (= (inv@184@01 r) r))
  :pattern ((inv@184@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>)))
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r)))
    (=>
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r))
      (Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@187@01  $FVF<r>))))
  :qid |qp.fvfDomDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@187@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@184@01 r) g@117@01) (img@185@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@187@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@187@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert (=>
  (not (= y@119@01 $Ref.null))
  (and
    (not (= y@119@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@171@01 r) g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
      :pattern ((inv@171@01 r))
      :qid |quant-u-7263|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@175@01 r) g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@177@01  $FVF<r>) r) r))
      :pattern ((inv@175@01 r))
      :qid |quant-u-7266|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@173@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@178@01  $FVF<r>))) g@117@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@180@01 r) g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
      :pattern ((inv@180@01 r))
      :qid |quant-u-7269|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@184@01 r) g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@186@01  $FVF<r>) r) r))
      :pattern ((inv@184@01 r))
      :qid |quant-u-7272|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01)
    (forall ((v1@168@01 $Ref) (v2@169@01 $Ref)) (!
      (and
        (=>
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
          (and
            (not
              (edge<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
            (or (= v1@168@01 x@118@01) (not (= v1@168@01 x@118@01)))))
        (or
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01)))
      :pattern ((edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@267@27@269@78-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@119@01 $Ref.null))
  (forall ((v1@168@01 $Ref) (v2@169@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@173@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@178@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01)
      (or
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01)
        (and (= v1@168@01 x@118@01) (= v2@169@01 y@119@01))))
    :pattern ((edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@182@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@187@01  $FVF<r>))) g@117@01) v1@168@01 v2@169@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@267@27@269@78|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@119@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@119@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 46 | y@119@01 != Null | live]
; [else-branch: 46 | y@119@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 46 | y@119@01 != Null]
(assert (not (= y@119@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
(declare-const v1@188@01 $Ref)
(declare-const v2@189@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 47 | v1@188@01 != v2@189@01 | live]
; [else-branch: 47 | v1@188@01 == v2@189@01 | live]
(push) ; 7
; [then-branch: 47 | v1@188@01 != v2@189@01]
(assert (not (= v1@188@01 v2@189@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@190@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@190@01 g@117@01))
(pop) ; 9
(declare-fun inv@191@01 ($Ref) $Ref)
(declare-fun img@192@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@190@01 $Ref) (n2@190@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@190@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n1@190@01) n1@190@01))
      (and
        (Set_in n2@190@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) n2@190@01) n2@190@01))
      (= n1@190@01 n2@190@01))
    (= n1@190@01 n2@190@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@190@01 $Ref)) (!
  (=>
    (Set_in n@190@01 g@117@01)
    (and (= (inv@191@01 n@190@01) n@190@01) (img@192@01 n@190@01)))
  :pattern ((Set_in n@190@01 g@117@01))
  :pattern ((inv@191@01 n@190@01))
  :pattern ((img@192@01 n@190@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@192@01 r) (Set_in (inv@191@01 r) g@117@01)) (= (inv@191@01 r) r))
  :pattern ((inv@191@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@191@01 r) g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
  :pattern ((inv@191@01 r))
  :qid |quant-u-7275|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r) (= r (inv@191@01 r)))
    (>
      (+
        (ite
          (and
            (img@142@01 r)
            (and
              (Set_in (inv@141@01 r) g@117@01)
              (not (= (inv@141@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7276|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@193@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>)))
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r)))
    (=>
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r))
      (Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>))))
  :qid |qp.fvfDomDef181|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@193@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@193@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef180|)))
(declare-const n@194@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@194@01 g@117@01))
(pop) ; 9
(declare-fun inv@195@01 ($Ref) $Ref)
(declare-fun img@196@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@197@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@197@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@197@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef184|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@194@01 $Ref) (n2@194@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@194@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@197@01  $FVF<r>) n1@194@01) n1@194@01))
      (and
        (Set_in n2@194@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@197@01  $FVF<r>) n2@194@01) n2@194@01))
      (= n1@194@01 n2@194@01))
    (= n1@194@01 n2@194@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@194@01 $Ref)) (!
  (=>
    (Set_in n@194@01 g@117@01)
    (and (= (inv@195@01 n@194@01) n@194@01) (img@196@01 n@194@01)))
  :pattern ((Set_in n@194@01 g@117@01))
  :pattern ((inv@195@01 n@194@01))
  :pattern ((img@196@01 n@194@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@196@01 r) (Set_in (inv@195@01 r) g@117@01)) (= (inv@195@01 r) r))
  :pattern ((inv@195@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@195@01 r) g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@197@01  $FVF<r>) r) r))
  :pattern ((inv@195@01 r))
  :qid |quant-u-7278|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r) (= r (inv@195@01 r)))
    (>
      (+
        (ite
          (and
            (img@146@01 r)
            (and
              (Set_in (inv@145@01 r) g@117@01)
              (not (= (inv@145@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7279|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@198@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>)))
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r)))
    (=>
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r))
      (Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>))))
  :qid |qp.fvfDomDef188|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@198@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@198@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@193@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@198@01  $FVF<r>))) g@117@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@190@01 $Ref)) (!
  (=>
    (Set_in n@190@01 g@117@01)
    (and (= (inv@191@01 n@190@01) n@190@01) (img@192@01 n@190@01)))
  :pattern ((Set_in n@190@01 g@117@01))
  :pattern ((inv@191@01 n@190@01))
  :pattern ((img@192@01 n@190@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@192@01 r) (Set_in (inv@191@01 r) g@117@01)) (= (inv@191@01 r) r))
  :pattern ((inv@191@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>)))
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r)))
    (=>
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r))
      (Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>))))
  :qid |qp.fvfDomDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@193@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@193@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@197@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@197@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((n@194@01 $Ref)) (!
  (=>
    (Set_in n@194@01 g@117@01)
    (and (= (inv@195@01 n@194@01) n@194@01) (img@196@01 n@194@01)))
  :pattern ((Set_in n@194@01 g@117@01))
  :pattern ((inv@195@01 n@194@01))
  :pattern ((img@196@01 n@194@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@196@01 r) (Set_in (inv@195@01 r) g@117@01)) (= (inv@195@01 r) r))
  :pattern ((inv@195@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>)))
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r)))
    (=>
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r))
      (Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>))))
  :qid |qp.fvfDomDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@198@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@198@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@191@01 r) g@117@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
    :pattern ((inv@191@01 r))
    :qid |quant-u-7275|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@195@01 r) g@117@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@197@01  $FVF<r>) r) r))
    :pattern ((inv@195@01 r))
    :qid |quant-u-7278|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@193@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@198@01  $FVF<r>))) g@117@01)))
; [eval] exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@199@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@199@01 g@117@01))
(pop) ; 9
(declare-fun inv@200@01 ($Ref) $Ref)
(declare-fun img@201@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@199@01 $Ref) (n2@199@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@199@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n1@199@01) n1@199@01))
      (and
        (Set_in n2@199@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) n2@199@01) n2@199@01))
      (= n1@199@01 n2@199@01))
    (= n1@199@01 n2@199@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@199@01 $Ref)) (!
  (=>
    (Set_in n@199@01 g@117@01)
    (and (= (inv@200@01 n@199@01) n@199@01) (img@201@01 n@199@01)))
  :pattern ((Set_in n@199@01 g@117@01))
  :pattern ((inv@200@01 n@199@01))
  :pattern ((img@201@01 n@199@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@201@01 r) (Set_in (inv@200@01 r) g@117@01)) (= (inv@200@01 r) r))
  :pattern ((inv@200@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@200@01 r) g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
  :pattern ((inv@200@01 r))
  :qid |quant-u-7281|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r) (= r (inv@200@01 r)))
    (>
      (+
        (ite
          (and
            (img@127@01 r)
            (and
              (Set_in (inv@126@01 r) g@117@01)
              (not (= (inv@126@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7282|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@202@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>)))
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r)))
    (=>
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r))
      (Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>))))
  :qid |qp.fvfDomDef192|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@202@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@202@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef191|)))
(declare-const n@203@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@203@01 g@117@01))
(pop) ; 9
(declare-fun inv@204@01 ($Ref) $Ref)
(declare-fun img@205@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@206@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@206@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@206@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef195|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@203@01 $Ref) (n2@203@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@203@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@206@01  $FVF<r>) n1@203@01) n1@203@01))
      (and
        (Set_in n2@203@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@206@01  $FVF<r>) n2@203@01) n2@203@01))
      (= n1@203@01 n2@203@01))
    (= n1@203@01 n2@203@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 g@117@01)
    (and (= (inv@204@01 n@203@01) n@203@01) (img@205@01 n@203@01)))
  :pattern ((Set_in n@203@01 g@117@01))
  :pattern ((inv@204@01 n@203@01))
  :pattern ((img@205@01 n@203@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@205@01 r) (Set_in (inv@204@01 r) g@117@01)) (= (inv@204@01 r) r))
  :pattern ((inv@204@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@204@01 r) g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@206@01  $FVF<r>) r) r))
  :pattern ((inv@204@01 r))
  :qid |quant-u-7284|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r) (= r (inv@204@01 r)))
    (>
      (+
        (ite
          (and
            (img@131@01 r)
            (and
              (Set_in (inv@130@01 r) g@117@01)
              (not (= (inv@130@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7285|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@207@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r)))
    (=>
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r))
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>))))
  :qid |qp.fvfDomDef199|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@199@01 $Ref)) (!
  (=>
    (Set_in n@199@01 g@117@01)
    (and (= (inv@200@01 n@199@01) n@199@01) (img@201@01 n@199@01)))
  :pattern ((Set_in n@199@01 g@117@01))
  :pattern ((inv@200@01 n@199@01))
  :pattern ((img@201@01 n@199@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@201@01 r) (Set_in (inv@200@01 r) g@117@01)) (= (inv@200@01 r) r))
  :pattern ((inv@200@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>)))
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r)))
    (=>
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r))
      (Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>))))
  :qid |qp.fvfDomDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@202@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@202@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@206@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@206@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 g@117@01)
    (and (= (inv@204@01 n@203@01) n@203@01) (img@205@01 n@203@01)))
  :pattern ((Set_in n@203@01 g@117@01))
  :pattern ((inv@204@01 n@203@01))
  :pattern ((img@205@01 n@203@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@205@01 r) (Set_in (inv@204@01 r) g@117@01)) (= (inv@204@01 r) r))
  :pattern ((inv@204@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r)))
    (=>
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r))
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>))))
  :qid |qp.fvfDomDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@200@01 r) g@117@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
    :pattern ((inv@200@01 r))
    :qid |quant-u-7281|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@204@01 r) g@117@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@206@01  $FVF<r>) r) r))
    :pattern ((inv@204@01 r))
    :qid |quant-u-7284|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01)))
(push) ; 8
; [then-branch: 48 | exists_path[Bool]($$((sm@202@01, sm@207@01), g@117@01), v1@188@01, v2@189@01) | live]
; [else-branch: 48 | !(exists_path[Bool]($$((sm@202@01, sm@207@01), g@117@01), v1@188@01, v2@189@01)) | live]
(push) ; 9
; [then-branch: 48 | exists_path[Bool]($$((sm@202@01, sm@207@01), g@117@01), v1@188@01, v2@189@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
(pop) ; 9
(push) ; 9
; [else-branch: 48 | !(exists_path[Bool]($$((sm@202@01, sm@207@01), g@117@01), v1@188@01, v2@189@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01)))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@208@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@208@01 g@117@01))
(pop) ; 11
(declare-fun inv@209@01 ($Ref) $Ref)
(declare-fun img@210@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@211@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@208@01 $Ref) (n2@208@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@208@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@211@01  $FVF<l>) n1@208@01) n1@208@01))
      (and
        (Set_in n2@208@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@211@01  $FVF<l>) n2@208@01) n2@208@01))
      (= n1@208@01 n2@208@01))
    (= n1@208@01 n2@208@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@208@01 $Ref)) (!
  (=>
    (Set_in n@208@01 g@117@01)
    (and (= (inv@209@01 n@208@01) n@208@01) (img@210@01 n@208@01)))
  :pattern ((Set_in n@208@01 g@117@01))
  :pattern ((inv@209@01 n@208@01))
  :pattern ((img@210@01 n@208@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@210@01 r) (Set_in (inv@209@01 r) g@117@01)) (= (inv@209@01 r) r))
  :pattern ((inv@209@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@209@01 r) g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@211@01  $FVF<l>) r) r))
  :pattern ((inv@209@01 r))
  :qid |quant-u-7287|)))
(push) ; 11
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r) (= r (inv@209@01 r)))
    (>
      (+
        (ite
          (and
            (img@127@01 r)
            (and
              (Set_in (inv@126@01 r) g@117@01)
              (not (= (inv@126@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7288|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const sm@212@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)))
    (=>
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(declare-const n@213@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@213@01 g@117@01))
(pop) ; 11
(declare-fun inv@214@01 ($Ref) $Ref)
(declare-fun img@215@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@216@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@213@01 $Ref) (n2@213@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@213@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@216@01  $FVF<r>) n1@213@01) n1@213@01))
      (and
        (Set_in n2@213@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@216@01  $FVF<r>) n2@213@01) n2@213@01))
      (= n1@213@01 n2@213@01))
    (= n1@213@01 n2@213@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@213@01 $Ref)) (!
  (=>
    (Set_in n@213@01 g@117@01)
    (and (= (inv@214@01 n@213@01) n@213@01) (img@215@01 n@213@01)))
  :pattern ((Set_in n@213@01 g@117@01))
  :pattern ((inv@214@01 n@213@01))
  :pattern ((img@215@01 n@213@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@215@01 r) (Set_in (inv@214@01 r) g@117@01)) (= (inv@214@01 r) r))
  :pattern ((inv@214@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@214@01 r) g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@216@01  $FVF<r>) r) r))
  :pattern ((inv@214@01 r))
  :qid |quant-u-7290|)))
(push) ; 11
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r) (= r (inv@214@01 r)))
    (>
      (+
        (ite
          (and
            (img@131@01 r)
            (and
              (Set_in (inv@130@01 r) g@117@01)
              (not (= (inv@130@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7291|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const sm@217@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)))
    (=>
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@208@01 $Ref)) (!
  (=>
    (Set_in n@208@01 g@117@01)
    (and (= (inv@209@01 n@208@01) n@208@01) (img@210@01 n@208@01)))
  :pattern ((Set_in n@208@01 g@117@01))
  :pattern ((inv@209@01 n@208@01))
  :pattern ((img@210@01 n@208@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@210@01 r) (Set_in (inv@209@01 r) g@117@01)) (= (inv@209@01 r) r))
  :pattern ((inv@209@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)))
    (=>
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@213@01 $Ref)) (!
  (=>
    (Set_in n@213@01 g@117@01)
    (and (= (inv@214@01 n@213@01) n@213@01) (img@215@01 n@213@01)))
  :pattern ((Set_in n@213@01 g@117@01))
  :pattern ((inv@214@01 n@213@01))
  :pattern ((img@215@01 n@213@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@215@01 r) (Set_in (inv@214@01 r) g@117@01)) (= (inv@214@01 r) r))
  :pattern ((inv@214@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)))
    (=>
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@209@01 r) g@117@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@211@01  $FVF<l>) r) r))
    :pattern ((inv@209@01 r))
    :qid |quant-u-7287|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@214@01 r) g@117@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@216@01  $FVF<r>) r) r))
    :pattern ((inv@214@01 r))
    :qid |quant-u-7290|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01)))
(push) ; 10
; [then-branch: 49 | !(exists_path[Bool]($$((sm@212@01, sm@217@01), g@117@01), v1@188@01, x@118@01)) | live]
; [else-branch: 49 | exists_path[Bool]($$((sm@212@01, sm@217@01), g@117@01), v1@188@01, x@118@01) | live]
(push) ; 11
; [then-branch: 49 | !(exists_path[Bool]($$((sm@212@01, sm@217@01), g@117@01), v1@188@01, x@118@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 49 | exists_path[Bool]($$((sm@212@01, sm@217@01), g@117@01), v1@188@01, x@118@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01))
; [eval] exists_path(old($$(g)), y, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 12
(declare-const n@218@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@218@01 g@117@01))
(pop) ; 13
(declare-fun inv@219@01 ($Ref) $Ref)
(declare-fun img@220@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@221@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@218@01 $Ref) (n2@218@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@218@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@221@01  $FVF<l>) n1@218@01) n1@218@01))
      (and
        (Set_in n2@218@01 g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@221@01  $FVF<l>) n2@218@01) n2@218@01))
      (= n1@218@01 n2@218@01))
    (= n1@218@01 n2@218@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@117@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@117@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@117@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@219@01 r) g@117@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@221@01  $FVF<l>) r) r))
  :pattern ((inv@219@01 r))
  :qid |quant-u-7293|)))
(push) ; 13
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r) (= r (inv@219@01 r)))
    (>
      (+
        (ite
          (and
            (img@127@01 r)
            (and
              (Set_in (inv@126@01 r) g@117@01)
              (not (= (inv@126@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7294|))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(declare-const sm@222@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(declare-const n@223@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@223@01 g@117@01))
(pop) ; 13
(declare-fun inv@224@01 ($Ref) $Ref)
(declare-fun img@225@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@226@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@223@01 $Ref) (n2@223@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@223@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@226@01  $FVF<r>) n1@223@01) n1@223@01))
      (and
        (Set_in n2@223@01 g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@226@01  $FVF<r>) n2@223@01) n2@223@01))
      (= n1@223@01 n2@223@01))
    (= n1@223@01 n2@223@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@117@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@117@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@117@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@224@01 r) g@117@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@226@01  $FVF<r>) r) r))
  :pattern ((inv@224@01 r))
  :qid |quant-u-7296|)))
(push) ; 13
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r) (= r (inv@224@01 r)))
    (>
      (+
        (ite
          (and
            (img@131@01 r)
            (and
              (Set_in (inv@130@01 r) g@117@01)
              (not (= (inv@130@01 r) x@118@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@118@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7297|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const sm@227@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@222@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@227@01  $FVF<r>))) g@117@01))
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@117@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@117@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@117@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@117@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@117@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@117@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@219@01 r) g@117@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@221@01  $FVF<l>) r) r))
    :pattern ((inv@219@01 r))
    :qid |quant-u-7293|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@224@01 r) g@117@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@226@01  $FVF<r>) r) r))
    :pattern ((inv@224@01 r))
    :qid |quant-u-7296|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@222@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@227@01  $FVF<r>))) g@117@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@117@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@117@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@117@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@117@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@117@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@117@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert (=>
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
  (and
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@219@01 r) g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@221@01  $FVF<l>) r) r))
      :pattern ((inv@219@01 r))
      :qid |quant-u-7293|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@224@01 r) g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@226@01  $FVF<r>) r) r))
      :pattern ((inv@224@01 r))
      :qid |quant-u-7296|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@222@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@227@01  $FVF<r>))) g@117@01))))
(assert (or
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@208@01 $Ref)) (!
  (=>
    (Set_in n@208@01 g@117@01)
    (and (= (inv@209@01 n@208@01) n@208@01) (img@210@01 n@208@01)))
  :pattern ((Set_in n@208@01 g@117@01))
  :pattern ((inv@209@01 n@208@01))
  :pattern ((img@210@01 n@208@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@210@01 r) (Set_in (inv@209@01 r) g@117@01)) (= (inv@209@01 r) r))
  :pattern ((inv@209@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)))
    (=>
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@213@01 $Ref)) (!
  (=>
    (Set_in n@213@01 g@117@01)
    (and (= (inv@214@01 n@213@01) n@213@01) (img@215@01 n@213@01)))
  :pattern ((Set_in n@213@01 g@117@01))
  :pattern ((inv@214@01 n@213@01))
  :pattern ((img@215@01 n@213@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@215@01 r) (Set_in (inv@214@01 r) g@117@01)) (= (inv@214@01 r) r))
  :pattern ((inv@214@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)))
    (=>
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@117@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@117@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@117@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@117@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@117@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@117@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
  (and
    (not
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@209@01 r) g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@211@01  $FVF<l>) r) r))
      :pattern ((inv@209@01 r))
      :qid |quant-u-7287|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@214@01 r) g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@216@01  $FVF<r>) r) r))
      :pattern ((inv@214@01 r))
      :qid |quant-u-7290|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01)
    (=>
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
      (and
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@219@01 r) g@117@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@221@01  $FVF<l>) r) r))
          :pattern ((inv@219@01 r))
          :qid |quant-u-7293|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@224@01 r) g@117@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@226@01  $FVF<r>) r) r))
          :pattern ((inv@224@01 r))
          :qid |quant-u-7296|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@222@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@227@01  $FVF<r>))) g@117@01)))
    (or
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01))))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 47 | v1@188@01 == v2@189@01]
(assert (= v1@188@01 v2@189@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@190@01 $Ref)) (!
  (=>
    (Set_in n@190@01 g@117@01)
    (and (= (inv@191@01 n@190@01) n@190@01) (img@192@01 n@190@01)))
  :pattern ((Set_in n@190@01 g@117@01))
  :pattern ((inv@191@01 n@190@01))
  :pattern ((img@192@01 n@190@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@192@01 r) (Set_in (inv@191@01 r) g@117@01)) (= (inv@191@01 r) r))
  :pattern ((inv@191@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>)))
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r)))
    (=>
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r))
      (Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>))))
  :qid |qp.fvfDomDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@193@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@193@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@197@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@197@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((n@194@01 $Ref)) (!
  (=>
    (Set_in n@194@01 g@117@01)
    (and (= (inv@195@01 n@194@01) n@194@01) (img@196@01 n@194@01)))
  :pattern ((Set_in n@194@01 g@117@01))
  :pattern ((inv@195@01 n@194@01))
  :pattern ((img@196@01 n@194@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@196@01 r) (Set_in (inv@195@01 r) g@117@01)) (= (inv@195@01 r) r))
  :pattern ((inv@195@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>)))
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r)))
    (=>
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r))
      (Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>))))
  :qid |qp.fvfDomDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@198@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@198@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@199@01 $Ref)) (!
  (=>
    (Set_in n@199@01 g@117@01)
    (and (= (inv@200@01 n@199@01) n@199@01) (img@201@01 n@199@01)))
  :pattern ((Set_in n@199@01 g@117@01))
  :pattern ((inv@200@01 n@199@01))
  :pattern ((img@201@01 n@199@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@201@01 r) (Set_in (inv@200@01 r) g@117@01)) (= (inv@200@01 r) r))
  :pattern ((inv@200@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>)))
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r)))
    (=>
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r))
      (Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>))))
  :qid |qp.fvfDomDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@202@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@202@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@206@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@206@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 g@117@01)
    (and (= (inv@204@01 n@203@01) n@203@01) (img@205@01 n@203@01)))
  :pattern ((Set_in n@203@01 g@117@01))
  :pattern ((inv@204@01 n@203@01))
  :pattern ((img@205@01 n@203@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@205@01 r) (Set_in (inv@204@01 r) g@117@01)) (= (inv@204@01 r) r))
  :pattern ((inv@204@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r)))
    (=>
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r))
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>))))
  :qid |qp.fvfDomDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@208@01 $Ref)) (!
  (=>
    (Set_in n@208@01 g@117@01)
    (and (= (inv@209@01 n@208@01) n@208@01) (img@210@01 n@208@01)))
  :pattern ((Set_in n@208@01 g@117@01))
  :pattern ((inv@209@01 n@208@01))
  :pattern ((img@210@01 n@208@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@210@01 r) (Set_in (inv@209@01 r) g@117@01)) (= (inv@209@01 r) r))
  :pattern ((inv@209@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)))
    (=>
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@213@01 $Ref)) (!
  (=>
    (Set_in n@213@01 g@117@01)
    (and (= (inv@214@01 n@213@01) n@213@01) (img@215@01 n@213@01)))
  :pattern ((Set_in n@213@01 g@117@01))
  :pattern ((inv@214@01 n@213@01))
  :pattern ((img@215@01 n@213@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@215@01 r) (Set_in (inv@214@01 r) g@117@01)) (= (inv@214@01 r) r))
  :pattern ((inv@214@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)))
    (=>
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@117@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@117@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@117@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@117@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@117@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@117@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert (=>
  (not (= v1@188@01 v2@189@01))
  (and
    (not (= v1@188@01 v2@189@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@191@01 r) g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
      :pattern ((inv@191@01 r))
      :qid |quant-u-7275|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@195@01 r) g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@197@01  $FVF<r>) r) r))
      :pattern ((inv@195@01 r))
      :qid |quant-u-7278|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@193@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@198@01  $FVF<r>))) g@117@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@200@01 r) g@117@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
      :pattern ((inv@200@01 r))
      :qid |quant-u-7281|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@204@01 r) g@117@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@206@01  $FVF<r>) r) r))
      :pattern ((inv@204@01 r))
      :qid |quant-u-7284|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
      (and
        (not
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@209@01 r) g@117@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@211@01  $FVF<l>) r) r))
          :pattern ((inv@209@01 r))
          :qid |quant-u-7287|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@214@01 r) g@117@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@216@01  $FVF<r>) r) r))
          :pattern ((inv@214@01 r))
          :qid |quant-u-7290|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01)
        (=>
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@219@01 r) g@117@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@221@01  $FVF<l>) r) r))
              :pattern ((inv@219@01 r))
              :qid |quant-u-7293|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@224@01 r) g@117@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@226@01  $FVF<r>) r) r))
              :pattern ((inv@224@01 r))
              :qid |quant-u-7296|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@222@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@227@01  $FVF<r>))) g@117@01)))
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)))))
    (or
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01)))))
; Joined path conditions
(assert (or (= v1@188@01 v2@189@01) (not (= v1@188@01 v2@189@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@190@01 $Ref)) (!
  (=>
    (Set_in n@190@01 g@117@01)
    (and (= (inv@191@01 n@190@01) n@190@01) (img@192@01 n@190@01)))
  :pattern ((Set_in n@190@01 g@117@01))
  :pattern ((inv@191@01 n@190@01))
  :pattern ((img@192@01 n@190@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@192@01 r) (Set_in (inv@191@01 r) g@117@01)) (= (inv@191@01 r) r))
  :pattern ((inv@191@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>)))
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r)))
    (=>
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r))
      (Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>))))
  :qid |qp.fvfDomDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@193@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@193@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@197@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@197@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((n@194@01 $Ref)) (!
  (=>
    (Set_in n@194@01 g@117@01)
    (and (= (inv@195@01 n@194@01) n@194@01) (img@196@01 n@194@01)))
  :pattern ((Set_in n@194@01 g@117@01))
  :pattern ((inv@195@01 n@194@01))
  :pattern ((img@196@01 n@194@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@196@01 r) (Set_in (inv@195@01 r) g@117@01)) (= (inv@195@01 r) r))
  :pattern ((inv@195@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>)))
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r)))
    (=>
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r))
      (Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>))))
  :qid |qp.fvfDomDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@198@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@198@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@199@01 $Ref)) (!
  (=>
    (Set_in n@199@01 g@117@01)
    (and (= (inv@200@01 n@199@01) n@199@01) (img@201@01 n@199@01)))
  :pattern ((Set_in n@199@01 g@117@01))
  :pattern ((inv@200@01 n@199@01))
  :pattern ((img@201@01 n@199@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@201@01 r) (Set_in (inv@200@01 r) g@117@01)) (= (inv@200@01 r) r))
  :pattern ((inv@200@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>)))
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r)))
    (=>
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r))
      (Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>))))
  :qid |qp.fvfDomDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@202@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@202@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@206@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@206@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 g@117@01)
    (and (= (inv@204@01 n@203@01) n@203@01) (img@205@01 n@203@01)))
  :pattern ((Set_in n@203@01 g@117@01))
  :pattern ((inv@204@01 n@203@01))
  :pattern ((img@205@01 n@203@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@205@01 r) (Set_in (inv@204@01 r) g@117@01)) (= (inv@204@01 r) r))
  :pattern ((inv@204@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r)))
    (=>
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r))
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>))))
  :qid |qp.fvfDomDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@208@01 $Ref)) (!
  (=>
    (Set_in n@208@01 g@117@01)
    (and (= (inv@209@01 n@208@01) n@208@01) (img@210@01 n@208@01)))
  :pattern ((Set_in n@208@01 g@117@01))
  :pattern ((inv@209@01 n@208@01))
  :pattern ((img@210@01 n@208@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@210@01 r) (Set_in (inv@209@01 r) g@117@01)) (= (inv@209@01 r) r))
  :pattern ((inv@209@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)))
    (=>
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@213@01 $Ref)) (!
  (=>
    (Set_in n@213@01 g@117@01)
    (and (= (inv@214@01 n@213@01) n@213@01) (img@215@01 n@213@01)))
  :pattern ((Set_in n@213@01 g@117@01))
  :pattern ((inv@214@01 n@213@01))
  :pattern ((img@215@01 n@213@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@215@01 r) (Set_in (inv@214@01 r) g@117@01)) (= (inv@214@01 r) r))
  :pattern ((inv@214@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)))
    (=>
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@117@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@117@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@117@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@117@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@117@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@117@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@188@01 $Ref) (v2@189@01 $Ref)) (!
  (and
    (=>
      (not (= v1@188@01 v2@189@01))
      (and
        (not (= v1@188@01 v2@189@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@191@01 r) g@117@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
          :pattern ((inv@191@01 r))
          :qid |quant-u-7275|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@195@01 r) g@117@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@197@01  $FVF<r>) r) r))
          :pattern ((inv@195@01 r))
          :qid |quant-u-7278|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@193@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@198@01  $FVF<r>))) g@117@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@200@01 r) g@117@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
          :pattern ((inv@200@01 r))
          :qid |quant-u-7281|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@204@01 r) g@117@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@206@01  $FVF<r>) r) r))
          :pattern ((inv@204@01 r))
          :qid |quant-u-7284|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
          (and
            (not
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@209@01 r) g@117@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@211@01  $FVF<l>) r) r))
              :pattern ((inv@209@01 r))
              :qid |quant-u-7287|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@214@01 r) g@117@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@216@01  $FVF<r>) r) r))
              :pattern ((inv@214@01 r))
              :qid |quant-u-7290|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01)
            (=>
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
              (and
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@219@01 r) g@117@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@221@01  $FVF<l>) r) r))
                  :pattern ((inv@219@01 r))
                  :qid |quant-u-7293|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@224@01 r) g@117@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@226@01  $FVF<r>) r) r))
                  :pattern ((inv@224@01 r))
                  :qid |quant-u-7296|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@222@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@227@01  $FVF<r>))) g@117@01)))
            (or
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)))))
        (or
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))))
    (or (= v1@188@01 v2@189@01) (not (= v1@188@01 v2@189@01))))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@193@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@198@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@270@27@275@10-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 46 | y@119@01 == Null]
(assert (= y@119@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@190@01 $Ref)) (!
  (=>
    (Set_in n@190@01 g@117@01)
    (and (= (inv@191@01 n@190@01) n@190@01) (img@192@01 n@190@01)))
  :pattern ((Set_in n@190@01 g@117@01))
  :pattern ((inv@191@01 n@190@01))
  :pattern ((img@192@01 n@190@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@192@01 r) (Set_in (inv@191@01 r) g@117@01)) (= (inv@191@01 r) r))
  :pattern ((inv@191@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>)))
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r)))
    (=>
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r))
      (Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@193@01  $FVF<l>))))
  :qid |qp.fvfDomDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@193@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@136@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@136@01  $FVF<l>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@191@01 r) g@117@01) (img@192@01 r))
      (and
        (img@142@01 r)
        (and (Set_in (inv@141@01 r) g@117@01) (not (= (inv@141@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@193@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@136@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@193@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@146@01 r)
      (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@197@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@197@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@197@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((n@194@01 $Ref)) (!
  (=>
    (Set_in n@194@01 g@117@01)
    (and (= (inv@195@01 n@194@01) n@194@01) (img@196@01 n@194@01)))
  :pattern ((Set_in n@194@01 g@117@01))
  :pattern ((inv@195@01 n@194@01))
  :pattern ((img@196@01 n@194@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@196@01 r) (Set_in (inv@195@01 r) g@117@01)) (= (inv@195@01 r) r))
  :pattern ((inv@195@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>)))
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r)))
    (=>
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r))
      (Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@198@01  $FVF<r>))))
  :qid |qp.fvfDomDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r))
      (and
        (img@146@01 r)
        (and (Set_in (inv@145@01 r) g@117@01) (not (= (inv@145@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@198@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@195@01 r) g@117@01) (img@196@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@198@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@138@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@138@01  $FVF<r>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@138@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@198@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@199@01 $Ref)) (!
  (=>
    (Set_in n@199@01 g@117@01)
    (and (= (inv@200@01 n@199@01) n@199@01) (img@201@01 n@199@01)))
  :pattern ((Set_in n@199@01 g@117@01))
  :pattern ((inv@200@01 n@199@01))
  :pattern ((img@201@01 n@199@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@201@01 r) (Set_in (inv@200@01 r) g@117@01)) (= (inv@200@01 r) r))
  :pattern ((inv@200@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>)))
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r)))
    (=>
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r))
      (Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@202@01  $FVF<l>))))
  :qid |qp.fvfDomDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@202@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g@117@01) (img@201@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@202@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@202@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@206@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@206@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@206@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 g@117@01)
    (and (= (inv@204@01 n@203@01) n@203@01) (img@205@01 n@203@01)))
  :pattern ((Set_in n@203@01 g@117@01))
  :pattern ((inv@204@01 n@203@01))
  :pattern ((img@205@01 n@203@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@205@01 r) (Set_in (inv@204@01 r) g@117@01)) (= (inv@204@01 r) r))
  :pattern ((inv@204@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r)))
    (=>
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r))
      (Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@207@01  $FVF<r>))))
  :qid |qp.fvfDomDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@204@01 r) g@117@01) (img@205@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@207@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@207@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@211@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@211@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@208@01 $Ref)) (!
  (=>
    (Set_in n@208@01 g@117@01)
    (and (= (inv@209@01 n@208@01) n@208@01) (img@210@01 n@208@01)))
  :pattern ((Set_in n@208@01 g@117@01))
  :pattern ((inv@209@01 n@208@01))
  :pattern ((img@210@01 n@208@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@210@01 r) (Set_in (inv@209@01 r) g@117@01)) (= (inv@209@01 r) r))
  :pattern ((inv@209@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)))
    (=>
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@212@01  $FVF<l>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@209@01 r) g@117@01) (img@210@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@212@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@212@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@216@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@216@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@213@01 $Ref)) (!
  (=>
    (Set_in n@213@01 g@117@01)
    (and (= (inv@214@01 n@213@01) n@213@01) (img@215@01 n@213@01)))
  :pattern ((Set_in n@213@01 g@117@01))
  :pattern ((inv@214@01 n@213@01))
  :pattern ((img@215@01 n@213@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@215@01 r) (Set_in (inv@214@01 r) g@117@01)) (= (inv@214@01 r) r))
  :pattern ((inv@214@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)))
    (=>
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@217@01  $FVF<r>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@214@01 r) g@117@01) (img@215@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@217@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@217@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@127@01 r)
      (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01))))
    (=
      ($FVF.lookup_l (as sm@221@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@221@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@117@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@117@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@117@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@222@01  $FVF<l>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@121@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@121@01  $FVF<l>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@117@01) (img@220@01 r))
      (and
        (img@127@01 r)
        (and (Set_in (inv@126@01 r) g@117@01) (not (= (inv@126@01 r) x@118@01)))))
    (=
      ($FVF.lookup_l (as sm@222@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r)))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@121@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@222@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@131@01 r)
      (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01))))
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@118@01)
    (=
      ($FVF.lookup_r (as sm@226@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@226@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((n@223@01 $Ref)) (!
  (=>
    (Set_in n@223@01 g@117@01)
    (and (= (inv@224@01 n@223@01) n@223@01) (img@225@01 n@223@01)))
  :pattern ((Set_in n@223@01 g@117@01))
  :pattern ((inv@224@01 n@223@01))
  :pattern ((img@225@01 n@223@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@225@01 r) (Set_in (inv@224@01 r) g@117@01)) (= (inv@224@01 r) r))
  :pattern ((inv@224@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)))
    (=>
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@227@01  $FVF<r>))))
  :qid |qp.fvfDomDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r))
      (and
        (img@131@01 r)
        (and (Set_in (inv@130@01 r) g@117@01) (not (= (inv@130@01 r) x@118@01)))))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@224@01 r) g@117@01) (img@225@01 r)) (= r x@118@01))
    (=
      ($FVF.lookup_r (as sm@227@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@123@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@123@01  $FVF<r>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@123@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@227@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef226|)))
(assert (=>
  (not (= y@119@01 $Ref.null))
  (and
    (not (= y@119@01 $Ref.null))
    (forall ((v1@188@01 $Ref) (v2@189@01 $Ref)) (!
      (and
        (=>
          (not (= v1@188@01 v2@189@01))
          (and
            (not (= v1@188@01 v2@189@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@191@01 r) g@117@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@143@01  $FVF<l>) r) r))
              :pattern ((inv@191@01 r))
              :qid |quant-u-7275|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@195@01 r) g@117@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@197@01  $FVF<r>) r) r))
              :pattern ((inv@195@01 r))
              :qid |quant-u-7278|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@193@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@198@01  $FVF<r>))) g@117@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@200@01 r) g@117@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@128@01  $FVF<l>) r) r))
              :pattern ((inv@200@01 r))
              :qid |quant-u-7281|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@204@01 r) g@117@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@206@01  $FVF<r>) r) r))
              :pattern ((inv@204@01 r))
              :qid |quant-u-7284|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01)
            (=>
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
              (and
                (not
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@209@01 r) g@117@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@211@01  $FVF<l>) r) r))
                  :pattern ((inv@209@01 r))
                  :qid |quant-u-7287|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@214@01 r) g@117@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@216@01  $FVF<r>) r) r))
                  :pattern ((inv@214@01 r))
                  :qid |quant-u-7290|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01)
                (=>
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
                  (and
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@219@01 r) g@117@01)
                        ($FVF.loc_l ($FVF.lookup_l (as sm@221@01  $FVF<l>) r) r))
                      :pattern ((inv@219@01 r))
                      :qid |quant-u-7293|))
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@224@01 r) g@117@01)
                        ($FVF.loc_r ($FVF.lookup_r (as sm@226@01  $FVF<r>) r) r))
                      :pattern ((inv@224@01 r))
                      :qid |quant-u-7296|))
                    ($$%precondition ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@222@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@227@01  $FVF<r>))) g@117@01)))
                (or
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
                  (not
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)))))
            (or
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))))
        (or (= v1@188@01 v2@189@01) (not (= v1@188@01 v2@189@01))))
      :pattern ((exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@193@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@198@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@270@27@275@10-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@119@01 $Ref.null))
  (forall ((v1@188@01 $Ref) (v2@189@01 $Ref)) (!
    (=>
      (not (= v1@188@01 v2@189@01))
      (=
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@193@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@198@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01)
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@202@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@207@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@212@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@217@01  $FVF<r>))) g@117@01) v1@188@01 x@118@01)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@222@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@227@01  $FVF<r>))) g@117@01) y@119@01 v2@189@01)))))
    :pattern ((exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@193@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@198@01  $FVF<r>))) g@117@01) v1@188@01 v2@189@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@270@27@275@10|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- unlink_left ----------
(declare-const g@228@01 Set<$Ref>)
(declare-const x@229@01 $Ref)
(declare-const g@230@01 Set<$Ref>)
(declare-const x@231@01 $Ref)
(push) ; 1
(declare-const $t@232@01 $Snap)
(assert (= $t@232@01 ($Snap.combine ($Snap.first $t@232@01) ($Snap.second $t@232@01))))
(assert (= ($Snap.first $t@232@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@231@01 g@230@01))
(assert (=
  ($Snap.second $t@232@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@232@01))
    ($Snap.second ($Snap.second $t@232@01)))))
(assert (= ($Snap.first ($Snap.second $t@232@01)) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@230@01)))
(assert (=
  ($Snap.second ($Snap.second $t@232@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@232@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@232@01))) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@232@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@232@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))
; [eval] (__left__() == __left__() ? write : 1 / 2)
; [eval] __left__() == __left__()
; [eval] __left__()
; [eval] __left__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | True | live]
; [else-branch: 50 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 50 | True]
(pop) ; 3
(pop) ; 2
; Joined path conditions
(declare-const sm@233@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@233@01  $FVF<l>) x@231@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))
(assert (not (= x@231@01 $Ref.null)))
(declare-const sm@234@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@234@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@234@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@234@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef229|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@234@01  $FVF<l>) x@231@01) x@231@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))))
; [eval] (__left__() == __right__() ? write : 1 / 2)
; [eval] __left__() == __right__()
; [eval] __left__()
; [eval] __right__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | __left__[__FieldEnum__] == __right__[__FieldEnum__] | dead]
; [else-branch: 51 | __left__[__FieldEnum__] != __right__[__FieldEnum__] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 51 | __left__[__FieldEnum__] != __right__[__FieldEnum__]]
(assert (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__))))
(declare-const sm@235@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@235@01  $FVF<r>) x@231@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))))
(declare-const sm@236@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@236@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@236@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@236@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef231|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@236@01  $FVF<r>) x@231@01) x@231@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))))
(declare-const n@237@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 52 | !(n@237@01 in g@230@01) | live]
; [else-branch: 52 | n@237@01 in g@230@01 | live]
(push) ; 4
; [then-branch: 52 | !(n@237@01 in g@230@01)]
(assert (not (Set_in n@237@01 g@230@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 52 | n@237@01 in g@230@01]
(assert (Set_in n@237@01 g@230@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@237@01 g@230@01) (not (Set_in n@237@01 g@230@01))))
(assert (and (Set_in n@237@01 g@230@01) (not (= n@237@01 x@231@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@238@01 ($Ref) $Ref)
(declare-fun img@239@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@237@01 $Ref)) (!
  (=>
    (and (Set_in n@237@01 g@230@01) (not (= n@237@01 x@231@01)))
    (or (Set_in n@237@01 g@230@01) (not (Set_in n@237@01 g@230@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) n@237@01) n@237@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@237@01 $Ref) (n2@237@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@237@01 g@230@01) (not (= n1@237@01 x@231@01)))
      (and (Set_in n2@237@01 g@230@01) (not (= n2@237@01 x@231@01)))
      (= n1@237@01 n2@237@01))
    (= n1@237@01 n2@237@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@237@01 $Ref)) (!
  (=>
    (and (Set_in n@237@01 g@230@01) (not (= n@237@01 x@231@01)))
    (and (= (inv@238@01 n@237@01) n@237@01) (img@239@01 n@237@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) n@237@01) n@237@01))
  :qid |quant-u-7299|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (= (inv@238@01 r) r))
  :pattern ((inv@238@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@237@01 $Ref)) (!
  (=>
    (and (Set_in n@237@01 g@230@01) (not (= n@237@01 x@231@01)))
    (not (= n@237@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) n@237@01) n@237@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@240@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
  :pattern ((inv@238@01 r))
  :qid |quant-u-7300|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))))))
(declare-const n$0@241@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0 != x
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 53 | !(n$0@241@01 in g@230@01) | live]
; [else-branch: 53 | n$0@241@01 in g@230@01 | live]
(push) ; 4
; [then-branch: 53 | !(n$0@241@01 in g@230@01)]
(assert (not (Set_in n$0@241@01 g@230@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 53 | n$0@241@01 in g@230@01]
(assert (Set_in n$0@241@01 g@230@01))
; [eval] n$0 != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$0@241@01 g@230@01) (not (Set_in n$0@241@01 g@230@01))))
(assert (and (Set_in n$0@241@01 g@230@01) (not (= n$0@241@01 x@231@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@242@01 ($Ref) $Ref)
(declare-fun img@243@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$0@241@01 $Ref)) (!
  (=>
    (and (Set_in n$0@241@01 g@230@01) (not (= n$0@241@01 x@231@01)))
    (or (Set_in n$0@241@01 g@230@01) (not (Set_in n$0@241@01 g@230@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) n$0@241@01) n$0@241@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$01@241@01 $Ref) (n$02@241@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$01@241@01 g@230@01) (not (= n$01@241@01 x@231@01)))
      (and (Set_in n$02@241@01 g@230@01) (not (= n$02@241@01 x@231@01)))
      (= n$01@241@01 n$02@241@01))
    (= n$01@241@01 n$02@241@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@241@01 $Ref)) (!
  (=>
    (and (Set_in n$0@241@01 g@230@01) (not (= n$0@241@01 x@231@01)))
    (and (= (inv@242@01 n$0@241@01) n$0@241@01) (img@243@01 n$0@241@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) n$0@241@01) n$0@241@01))
  :qid |quant-u-7302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (= (inv@242@01 r) r))
  :pattern ((inv@242@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$0@241@01 $Ref)) (!
  (=>
    (and (Set_in n$0@241@01 g@230@01) (not (= n$0@241@01 x@231@01)))
    (not (= n$0@241@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) n$0@241@01) n$0@241@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@244@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) r) r))
  :pattern ((inv@242@01 r))
  :qid |quant-u-7303|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))))
  $Snap.unit))
; [eval] (forall n$1: Ref :: { (n$1.l in g) } { (n$1 in g), n$1.l } (n$1 in g) && n$1.l != null ==> (n$1.l in g))
(declare-const n$1@245@01 $Ref)
(push) ; 2
; [eval] (n$1 in g) && n$1.l != null ==> (n$1.l in g)
; [eval] (n$1 in g) && n$1.l != null
; [eval] (n$1 in g)
(push) ; 3
; [then-branch: 54 | !(n$1@245@01 in g@230@01) | live]
; [else-branch: 54 | n$1@245@01 in g@230@01 | live]
(push) ; 4
; [then-branch: 54 | !(n$1@245@01 in g@230@01)]
(assert (not (Set_in n$1@245@01 g@230@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 54 | n$1@245@01 in g@230@01]
(assert (Set_in n$1@245@01 g@230@01))
; [eval] n$1.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
      (=
        ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
    :qid |qp.fvfValDef233|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef234|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) n$1@245@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@245@01 x@231@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@239@01 n$1@245@01)
        (and
          (Set_in (inv@238@01 n$1@245@01) g@230@01)
          (not (= (inv@238@01 n$1@245@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert (=>
  (Set_in n$1@245@01 g@230@01)
  (and
    (Set_in n$1@245@01 g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) n$1@245@01))))
(assert (or (Set_in n$1@245@01 g@230@01) (not (Set_in n$1@245@01 g@230@01))))
(push) ; 3
; [then-branch: 55 | n$1@245@01 in g@230@01 && Lookup(l, sm@240@01, n$1@245@01) != Null | live]
; [else-branch: 55 | !(n$1@245@01 in g@230@01 && Lookup(l, sm@240@01, n$1@245@01) != Null) | live]
(push) ; 4
; [then-branch: 55 | n$1@245@01 in g@230@01 && Lookup(l, sm@240@01, n$1@245@01) != Null]
(assert (and
  (Set_in n$1@245@01 g@230@01)
  (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null))))
; [eval] (n$1.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
      (=
        ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
    :qid |qp.fvfValDef233|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef234|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) n$1@245@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@245@01 x@231@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@239@01 n$1@245@01)
        (and
          (Set_in (inv@238@01 n$1@245@01) g@230@01)
          (not (= (inv@238@01 n$1@245@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 55 | !(n$1@245@01 in g@230@01 && Lookup(l, sm@240@01, n$1@245@01) != Null)]
(assert (not
  (and
    (Set_in n$1@245@01 g@230@01)
    (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert (=>
  (and
    (Set_in n$1@245@01 g@230@01)
    (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null)))
  (and
    (Set_in n$1@245@01 g@230@01)
    (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) n$1@245@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@245@01 g@230@01)
      (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null))))
  (and
    (Set_in n$1@245@01 g@230@01)
    (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef234|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$1@245@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@245@01 g@230@01)
      (and
        (Set_in n$1@245@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) n$1@245@01)))
    (or (Set_in n$1@245@01 g@230@01) (not (Set_in n$1@245@01 g@230@01)))
    (=>
      (and
        (Set_in n$1@245@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null)))
      (and
        (Set_in n$1@245@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) n$1@245@01)))
    (or
      (not
        (and
          (Set_in n$1@245@01 g@230@01)
          (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null))))
      (and
        (Set_in n$1@245@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) g@230@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45-aux|)))
(assert (forall ((n$1@245@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@245@01 g@230@01)
      (and
        (Set_in n$1@245@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) n$1@245@01)))
    (or (Set_in n$1@245@01 g@230@01) (not (Set_in n$1@245@01 g@230@01)))
    (=>
      (and
        (Set_in n$1@245@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null)))
      (and
        (Set_in n$1@245@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) n$1@245@01)))
    (or
      (not
        (and
          (Set_in n$1@245@01 g@230@01)
          (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null))))
      (and
        (Set_in n$1@245@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null)))))
  :pattern ((Set_in n$1@245@01 g@230@01) ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) n$1@245@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45-aux|)))
(assert (forall ((n$1@245@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@245@01 g@230@01)
      (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) g@230@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) g@230@01))
  :pattern ((Set_in n$1@245@01 g@230@01) ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n$1@245@01) n$1@245@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.r in g) } { (n$2 in g), n$2.r } (n$2 in g) && n$2.r != null ==> (n$2.r in g))
(declare-const n$2@246@01 $Ref)
(push) ; 2
; [eval] (n$2 in g) && n$2.r != null ==> (n$2.r in g)
; [eval] (n$2 in g) && n$2.r != null
; [eval] (n$2 in g)
(push) ; 3
; [then-branch: 56 | !(n$2@246@01 in g@230@01) | live]
; [else-branch: 56 | n$2@246@01 in g@230@01 | live]
(push) ; 4
; [then-branch: 56 | !(n$2@246@01 in g@230@01)]
(assert (not (Set_in n$2@246@01 g@230@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 56 | n$2@246@01 in g@230@01]
(assert (Set_in n$2@246@01 g@230@01))
; [eval] n$2.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
    :qid |qp.fvfValDef235|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
      (=
        ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
    :qid |qp.fvfValDef236|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef237|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) n$2@246@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@246@01 x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@243@01 n$2@246@01)
        (and
          (Set_in (inv@242@01 n$2@246@01) g@230@01)
          (not (= (inv@242@01 n$2@246@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (=>
  (Set_in n$2@246@01 g@230@01)
  (and
    (Set_in n$2@246@01 g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) n$2@246@01))))
(assert (or (Set_in n$2@246@01 g@230@01) (not (Set_in n$2@246@01 g@230@01))))
(push) ; 3
; [then-branch: 57 | n$2@246@01 in g@230@01 && Lookup(r, sm@244@01, n$2@246@01) != Null | live]
; [else-branch: 57 | !(n$2@246@01 in g@230@01 && Lookup(r, sm@244@01, n$2@246@01) != Null) | live]
(push) ; 4
; [then-branch: 57 | n$2@246@01 in g@230@01 && Lookup(r, sm@244@01, n$2@246@01) != Null]
(assert (and
  (Set_in n$2@246@01 g@230@01)
  (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null))))
; [eval] (n$2.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
    :qid |qp.fvfValDef235|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
      (=
        ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
    :qid |qp.fvfValDef236|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef237|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) n$2@246@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@246@01 x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@243@01 n$2@246@01)
        (and
          (Set_in (inv@242@01 n$2@246@01) g@230@01)
          (not (= (inv@242@01 n$2@246@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 57 | !(n$2@246@01 in g@230@01 && Lookup(r, sm@244@01, n$2@246@01) != Null)]
(assert (not
  (and
    (Set_in n$2@246@01 g@230@01)
    (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (=>
  (and
    (Set_in n$2@246@01 g@230@01)
    (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null)))
  (and
    (Set_in n$2@246@01 g@230@01)
    (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) n$2@246@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@246@01 g@230@01)
      (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null))))
  (and
    (Set_in n$2@246@01 g@230@01)
    (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@244@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@244@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef237|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@246@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@246@01 g@230@01)
      (and
        (Set_in n$2@246@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) n$2@246@01)))
    (or (Set_in n$2@246@01 g@230@01) (not (Set_in n$2@246@01 g@230@01)))
    (=>
      (and
        (Set_in n$2@246@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null)))
      (and
        (Set_in n$2@246@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) n$2@246@01)))
    (or
      (not
        (and
          (Set_in n$2@246@01 g@230@01)
          (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null))))
      (and
        (Set_in n$2@246@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) g@230@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45-aux|)))
(assert (forall ((n$2@246@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@246@01 g@230@01)
      (and
        (Set_in n$2@246@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) n$2@246@01)))
    (or (Set_in n$2@246@01 g@230@01) (not (Set_in n$2@246@01 g@230@01)))
    (=>
      (and
        (Set_in n$2@246@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null)))
      (and
        (Set_in n$2@246@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) n$2@246@01)))
    (or
      (not
        (and
          (Set_in n$2@246@01 g@230@01)
          (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null))))
      (and
        (Set_in n$2@246@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null)))))
  :pattern ((Set_in n$2@246@01 g@230@01) ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) n$2@246@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45-aux|)))
(assert (forall ((n$2@246@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@246@01 g@230@01)
      (not (= ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) g@230@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) g@230@01))
  :pattern ((Set_in n$2@246@01 g@230@01) ($FVF.loc_r ($FVF.lookup_r (as sm@244@01  $FVF<r>) n$2@246@01) n$2@246@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@279@14@279@45|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@247@01 $Snap)
(assert (= $t@247@01 ($Snap.combine ($Snap.first $t@247@01) ($Snap.second $t@247@01))))
(assert (= ($Snap.first $t@247@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@247@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@247@01))
    ($Snap.second ($Snap.second $t@247@01)))))
(assert (= ($Snap.first ($Snap.second $t@247@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@247@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@247@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))
; [eval] (__left__() == __left__() ? write : 1 / 2)
; [eval] __left__() == __left__()
; [eval] __left__()
; [eval] __left__()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | True | live]
; [else-branch: 58 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 58 | True]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@248@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@248@01  $FVF<l>) x@231@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@247@01))))))
(declare-const sm@249@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@249@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@249@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@249@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@249@01  $FVF<l>) x@231@01) x@231@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@247@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@247@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))
; [eval] (__left__() == __right__() ? write : 1 / 2)
; [eval] __left__() == __right__()
; [eval] __left__()
; [eval] __right__()
(push) ; 3
; [then-branch: 59 | __left__[__FieldEnum__] == __right__[__FieldEnum__] | dead]
; [else-branch: 59 | __left__[__FieldEnum__] != __right__[__FieldEnum__] | live]
(push) ; 4
; [else-branch: 59 | __left__[__FieldEnum__] != __right__[__FieldEnum__]]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@250@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@250@01  $FVF<r>) x@231@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))
(declare-const sm@251@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@251@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@251@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef240|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@251@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef241|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@251@01  $FVF<r>) x@231@01) x@231@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))))
(declare-const n$3@252@01 $Ref)
(push) ; 3
; [eval] (n$3 in g) && n$3 != x
; [eval] (n$3 in g)
(push) ; 4
; [then-branch: 60 | !(n$3@252@01 in g@230@01) | live]
; [else-branch: 60 | n$3@252@01 in g@230@01 | live]
(push) ; 5
; [then-branch: 60 | !(n$3@252@01 in g@230@01)]
(assert (not (Set_in n$3@252@01 g@230@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 60 | n$3@252@01 in g@230@01]
(assert (Set_in n$3@252@01 g@230@01))
; [eval] n$3 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$3@252@01 g@230@01) (not (Set_in n$3@252@01 g@230@01))))
(assert (and (Set_in n$3@252@01 g@230@01) (not (= n$3@252@01 x@231@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@253@01 ($Ref) $Ref)
(declare-fun img@254@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$3@252@01 $Ref)) (!
  (=>
    (and (Set_in n$3@252@01 g@230@01) (not (= n$3@252@01 x@231@01)))
    (or (Set_in n$3@252@01 g@230@01) (not (Set_in n$3@252@01 g@230@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) n$3@252@01) n$3@252@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@252@01 $Ref) (n$32@252@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$31@252@01 g@230@01) (not (= n$31@252@01 x@231@01)))
      (and (Set_in n$32@252@01 g@230@01) (not (= n$32@252@01 x@231@01)))
      (= n$31@252@01 n$32@252@01))
    (= n$31@252@01 n$32@252@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@252@01 $Ref)) (!
  (=>
    (and (Set_in n$3@252@01 g@230@01) (not (= n$3@252@01 x@231@01)))
    (and (= (inv@253@01 n$3@252@01) n$3@252@01) (img@254@01 n$3@252@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) n$3@252@01) n$3@252@01))
  :qid |quant-u-7305|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@254@01 r)
      (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01))))
    (= (inv@253@01 r) r))
  :pattern ((inv@253@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@252@01 $Ref)) (!
  (=>
    (and (Set_in n$3@252@01 g@230@01) (not (= n$3@252@01 x@231@01)))
    (not (= n$3@252@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) n$3@252@01) n$3@252@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@255@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@254@01 r)
      (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
  :pattern ((inv@253@01 r))
  :qid |quant-u-7306|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))))
(declare-const n$4@256@01 $Ref)
(push) ; 3
; [eval] (n$4 in g) && n$4 != x
; [eval] (n$4 in g)
(push) ; 4
; [then-branch: 61 | !(n$4@256@01 in g@230@01) | live]
; [else-branch: 61 | n$4@256@01 in g@230@01 | live]
(push) ; 5
; [then-branch: 61 | !(n$4@256@01 in g@230@01)]
(assert (not (Set_in n$4@256@01 g@230@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 61 | n$4@256@01 in g@230@01]
(assert (Set_in n$4@256@01 g@230@01))
; [eval] n$4 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$4@256@01 g@230@01) (not (Set_in n$4@256@01 g@230@01))))
(assert (and (Set_in n$4@256@01 g@230@01) (not (= n$4@256@01 x@231@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@257@01 ($Ref) $Ref)
(declare-fun img@258@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$4@256@01 $Ref)) (!
  (=>
    (and (Set_in n$4@256@01 g@230@01) (not (= n$4@256@01 x@231@01)))
    (or (Set_in n$4@256@01 g@230@01) (not (Set_in n$4@256@01 g@230@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) n$4@256@01) n$4@256@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@256@01 $Ref) (n$42@256@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$41@256@01 g@230@01) (not (= n$41@256@01 x@231@01)))
      (and (Set_in n$42@256@01 g@230@01) (not (= n$42@256@01 x@231@01)))
      (= n$41@256@01 n$42@256@01))
    (= n$41@256@01 n$42@256@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@256@01 $Ref)) (!
  (=>
    (and (Set_in n$4@256@01 g@230@01) (not (= n$4@256@01 x@231@01)))
    (and (= (inv@257@01 n$4@256@01) n$4@256@01) (img@258@01 n$4@256@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) n$4@256@01) n$4@256@01))
  :qid |quant-u-7308|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (= (inv@257@01 r) r))
  :pattern ((inv@257@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@256@01 $Ref)) (!
  (=>
    (and (Set_in n$4@256@01 g@230@01) (not (= n$4@256@01 x@231@01)))
    (not (= n$4@256@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) n$4@256@01) n$4@256@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@259@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef247|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) r) r))
  :pattern ((inv@257@01 r))
  :qid |quant-u-7309|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))
  $Snap.unit))
; [eval] (forall n$5: Ref :: { (n$5.l in g) } { (n$5 in g), n$5.l } (n$5 in g) && n$5.l != null ==> (n$5.l in g))
(declare-const n$5@260@01 $Ref)
(push) ; 3
; [eval] (n$5 in g) && n$5.l != null ==> (n$5.l in g)
; [eval] (n$5 in g) && n$5.l != null
; [eval] (n$5 in g)
(push) ; 4
; [then-branch: 62 | !(n$5@260@01 in g@230@01) | live]
; [else-branch: 62 | n$5@260@01 in g@230@01 | live]
(push) ; 5
; [then-branch: 62 | !(n$5@260@01 in g@230@01)]
(assert (not (Set_in n$5@260@01 g@230@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 62 | n$5@260@01 in g@230@01]
(assert (Set_in n$5@260@01 g@230@01))
; [eval] n$5.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
    :qid |qp.fvfValDef242|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01))))
      (=
        ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
    :qid |qp.fvfValDef243|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef244|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) n$5@260@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@260@01 x@231@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@254@01 n$5@260@01)
        (and
          (Set_in (inv@253@01 n$5@260@01) g@230@01)
          (not (= (inv@253@01 n$5@260@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@254@01 r)
      (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (=>
  (Set_in n$5@260@01 g@230@01)
  (and
    (Set_in n$5@260@01 g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) n$5@260@01))))
(assert (or (Set_in n$5@260@01 g@230@01) (not (Set_in n$5@260@01 g@230@01))))
(push) ; 4
; [then-branch: 63 | n$5@260@01 in g@230@01 && Lookup(l, sm@255@01, n$5@260@01) != Null | live]
; [else-branch: 63 | !(n$5@260@01 in g@230@01 && Lookup(l, sm@255@01, n$5@260@01) != Null) | live]
(push) ; 5
; [then-branch: 63 | n$5@260@01 in g@230@01 && Lookup(l, sm@255@01, n$5@260@01) != Null]
(assert (and
  (Set_in n$5@260@01 g@230@01)
  (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null))))
; [eval] (n$5.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
    :qid |qp.fvfValDef242|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01))))
      (=
        ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
    :qid |qp.fvfValDef243|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef244|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) n$5@260@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@260@01 x@231@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@254@01 n$5@260@01)
        (and
          (Set_in (inv@253@01 n$5@260@01) g@230@01)
          (not (= (inv@253@01 n$5@260@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 63 | !(n$5@260@01 in g@230@01 && Lookup(l, sm@255@01, n$5@260@01) != Null)]
(assert (not
  (and
    (Set_in n$5@260@01 g@230@01)
    (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@254@01 r)
      (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (=>
  (and
    (Set_in n$5@260@01 g@230@01)
    (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null)))
  (and
    (Set_in n$5@260@01 g@230@01)
    (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) n$5@260@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$5@260@01 g@230@01)
      (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null))))
  (and
    (Set_in n$5@260@01 g@230@01)
    (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@254@01 r)
      (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef244|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$5@260@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@260@01 g@230@01)
      (and
        (Set_in n$5@260@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) n$5@260@01)))
    (or (Set_in n$5@260@01 g@230@01) (not (Set_in n$5@260@01 g@230@01)))
    (=>
      (and
        (Set_in n$5@260@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null)))
      (and
        (Set_in n$5@260@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) n$5@260@01)))
    (or
      (not
        (and
          (Set_in n$5@260@01 g@230@01)
          (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null))))
      (and
        (Set_in n$5@260@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) g@230@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44-aux|)))
(assert (forall ((n$5@260@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@260@01 g@230@01)
      (and
        (Set_in n$5@260@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) n$5@260@01)))
    (or (Set_in n$5@260@01 g@230@01) (not (Set_in n$5@260@01 g@230@01)))
    (=>
      (and
        (Set_in n$5@260@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null)))
      (and
        (Set_in n$5@260@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) n$5@260@01)))
    (or
      (not
        (and
          (Set_in n$5@260@01 g@230@01)
          (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null))))
      (and
        (Set_in n$5@260@01 g@230@01)
        (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null)))))
  :pattern ((Set_in n$5@260@01 g@230@01) ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) n$5@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44-aux|)))
(assert (forall ((n$5@260@01 $Ref)) (!
  (=>
    (and
      (Set_in n$5@260@01 g@230@01)
      (not (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) g@230@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) g@230@01))
  :pattern ((Set_in n$5@260@01 g@230@01) ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n$5@260@01) n$5@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))))
  $Snap.unit))
; [eval] (forall n$6: Ref :: { (n$6.r in g) } { (n$6 in g), n$6.r } (n$6 in g) && n$6.r != null ==> (n$6.r in g))
(declare-const n$6@261@01 $Ref)
(push) ; 3
; [eval] (n$6 in g) && n$6.r != null ==> (n$6.r in g)
; [eval] (n$6 in g) && n$6.r != null
; [eval] (n$6 in g)
(push) ; 4
; [then-branch: 64 | !(n$6@261@01 in g@230@01) | live]
; [else-branch: 64 | n$6@261@01 in g@230@01 | live]
(push) ; 5
; [then-branch: 64 | !(n$6@261@01 in g@230@01)]
(assert (not (Set_in n$6@261@01 g@230@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 64 | n$6@261@01 in g@230@01]
(assert (Set_in n$6@261@01 g@230@01))
; [eval] n$6.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
    :qid |qp.fvfValDef245|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
      (=
        ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
    :qid |qp.fvfValDef246|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef247|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) n$6@261@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@261@01 x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@258@01 n$6@261@01)
        (and
          (Set_in (inv@257@01 n$6@261@01) g@230@01)
          (not (= (inv@257@01 n$6@261@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef247|)))
(assert (=>
  (Set_in n$6@261@01 g@230@01)
  (and
    (Set_in n$6@261@01 g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) n$6@261@01))))
(assert (or (Set_in n$6@261@01 g@230@01) (not (Set_in n$6@261@01 g@230@01))))
(push) ; 4
; [then-branch: 65 | n$6@261@01 in g@230@01 && Lookup(r, sm@259@01, n$6@261@01) != Null | live]
; [else-branch: 65 | !(n$6@261@01 in g@230@01 && Lookup(r, sm@259@01, n$6@261@01) != Null) | live]
(push) ; 5
; [then-branch: 65 | n$6@261@01 in g@230@01 && Lookup(r, sm@259@01, n$6@261@01) != Null]
(assert (and
  (Set_in n$6@261@01 g@230@01)
  (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null))))
; [eval] (n$6.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
    :qid |qp.fvfValDef245|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
      (=
        ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
    :qid |qp.fvfValDef246|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef247|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) n$6@261@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@261@01 x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@258@01 n$6@261@01)
        (and
          (Set_in (inv@257@01 n$6@261@01) g@230@01)
          (not (= (inv@257@01 n$6@261@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 65 | !(n$6@261@01 in g@230@01 && Lookup(r, sm@259@01, n$6@261@01) != Null)]
(assert (not
  (and
    (Set_in n$6@261@01 g@230@01)
    (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef247|)))
(assert (=>
  (and
    (Set_in n$6@261@01 g@230@01)
    (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null)))
  (and
    (Set_in n$6@261@01 g@230@01)
    (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) n$6@261@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@261@01 g@230@01)
      (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null))))
  (and
    (Set_in n$6@261@01 g@230@01)
    (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@259@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@259@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef247|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@261@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@261@01 g@230@01)
      (and
        (Set_in n$6@261@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) n$6@261@01)))
    (or (Set_in n$6@261@01 g@230@01) (not (Set_in n$6@261@01 g@230@01)))
    (=>
      (and
        (Set_in n$6@261@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null)))
      (and
        (Set_in n$6@261@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) n$6@261@01)))
    (or
      (not
        (and
          (Set_in n$6@261@01 g@230@01)
          (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null))))
      (and
        (Set_in n$6@261@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) g@230@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44-aux|)))
(assert (forall ((n$6@261@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@261@01 g@230@01)
      (and
        (Set_in n$6@261@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) n$6@261@01)))
    (or (Set_in n$6@261@01 g@230@01) (not (Set_in n$6@261@01 g@230@01)))
    (=>
      (and
        (Set_in n$6@261@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null)))
      (and
        (Set_in n$6@261@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) n$6@261@01)))
    (or
      (not
        (and
          (Set_in n$6@261@01 g@230@01)
          (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null))))
      (and
        (Set_in n$6@261@01 g@230@01)
        (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null)))))
  :pattern ((Set_in n$6@261@01 g@230@01) ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) n$6@261@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44-aux|)))
(assert (forall ((n$6@261@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@261@01 g@230@01)
      (not (= ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) g@230@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) g@230@01))
  :pattern ((Set_in n$6@261@01 g@230@01) ($FVF.loc_r ($FVF.lookup_r (as sm@259@01  $FVF<r>) n$6@261@01) n$6@261@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@280@13@280@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))))
  $Snap.unit))
; [eval] x.l == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
    :qid |qp.fvfValDef242|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01))))
      (=
        ($FVF.lookup_l (as sm@255@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
    :qid |qp.fvfValDef243|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@255@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef244|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) x@231@01) x@231@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@254@01 x@231@01)
        (and
          (Set_in (inv@253@01 x@231@01) g@230@01)
          (not (= (inv@253@01 x@231@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_l (as sm@255@01  $FVF<l>) x@231@01) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))))))
  $Snap.unit))
; [eval] old(x.l) == null ==> $$(g) == old($$(g))
; [eval] old(x.l) == null
; [eval] old(x.l)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
      (=
        ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
    :qid |qp.fvfValDef233|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef234|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) x@231@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@239@01 x@231@01)
        (and
          (Set_in (inv@238@01 x@231@01) g@230@01)
          (not (= (inv@238@01 x@231@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | Lookup(l, sm@240@01, x@231@01) == Null | live]
; [else-branch: 66 | Lookup(l, sm@240@01, x@231@01) != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 66 | Lookup(l, sm@240@01, x@231@01) == Null]
(assert (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@262@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@262@01 g@230@01))
(pop) ; 6
(declare-fun inv@263@01 ($Ref) $Ref)
(declare-fun img@264@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@262@01 $Ref) (n2@262@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@262@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n1@262@01) n1@262@01))
      (and
        (Set_in n2@262@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n2@262@01) n2@262@01))
      (= n1@262@01 n2@262@01))
    (= n1@262@01 n2@262@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@262@01 $Ref)) (!
  (=>
    (Set_in n@262@01 g@230@01)
    (and (= (inv@263@01 n@262@01) n@262@01) (img@264@01 n@262@01)))
  :pattern ((Set_in n@262@01 g@230@01))
  :pattern ((inv@263@01 n@262@01))
  :pattern ((img@264@01 n@262@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@264@01 r) (Set_in (inv@263@01 r) g@230@01)) (= (inv@263@01 r) r))
  :pattern ((inv@263@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@263@01 r) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
  :pattern ((inv@263@01 r))
  :qid |quant-u-7311|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r) (= r (inv@263@01 r)))
    (>
      (+
        (ite
          (and
            (img@254@01 r)
            (and
              (Set_in (inv@253@01 r) g@230@01)
              (not (= (inv@253@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7312|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@265@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@265@01  $FVF<l>)))
      (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r)))
    (=>
      (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r))
      (Set_in r ($FVF.domain_l (as sm@265@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@265@01  $FVF<l>))))
  :qid |qp.fvfDomDef251|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@265@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@265@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@265@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@265@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef249|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@265@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef250|)))
(declare-const n@266@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@266@01 g@230@01))
(pop) ; 6
(declare-fun inv@267@01 ($Ref) $Ref)
(declare-fun img@268@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@269@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@269@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@269@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@269@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@269@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@269@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef254|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@266@01 $Ref) (n2@266@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@266@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@269@01  $FVF<r>) n1@266@01) n1@266@01))
      (and
        (Set_in n2@266@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@269@01  $FVF<r>) n2@266@01) n2@266@01))
      (= n1@266@01 n2@266@01))
    (= n1@266@01 n2@266@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@266@01 $Ref)) (!
  (=>
    (Set_in n@266@01 g@230@01)
    (and (= (inv@267@01 n@266@01) n@266@01) (img@268@01 n@266@01)))
  :pattern ((Set_in n@266@01 g@230@01))
  :pattern ((inv@267@01 n@266@01))
  :pattern ((img@268@01 n@266@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@268@01 r) (Set_in (inv@267@01 r) g@230@01)) (= (inv@267@01 r) r))
  :pattern ((inv@267@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@267@01 r) g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@269@01  $FVF<r>) r) r))
  :pattern ((inv@267@01 r))
  :qid |quant-u-7314|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r) (= r (inv@267@01 r)))
    (>
      (+
        (ite
          (and
            (img@258@01 r)
            (and
              (Set_in (inv@257@01 r) g@230@01)
              (not (= (inv@257@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7315|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@270@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@270@01  $FVF<r>)))
      (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r)))
    (=>
      (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r))
      (Set_in r ($FVF.domain_r (as sm@270@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@270@01  $FVF<r>))))
  :qid |qp.fvfDomDef258|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@270@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@270@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@270@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@270@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@270@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef257|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@265@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@270@01  $FVF<r>))) g@230@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@262@01 $Ref)) (!
  (=>
    (Set_in n@262@01 g@230@01)
    (and (= (inv@263@01 n@262@01) n@262@01) (img@264@01 n@262@01)))
  :pattern ((Set_in n@262@01 g@230@01))
  :pattern ((inv@263@01 n@262@01))
  :pattern ((img@264@01 n@262@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@264@01 r) (Set_in (inv@263@01 r) g@230@01)) (= (inv@263@01 r) r))
  :pattern ((inv@263@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@265@01  $FVF<l>)))
      (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r)))
    (=>
      (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r))
      (Set_in r ($FVF.domain_l (as sm@265@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@265@01  $FVF<l>))))
  :qid |qp.fvfDomDef251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@265@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@265@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@265@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@265@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef249|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@265@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@269@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@269@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@269@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@269@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@269@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef254|)))
(assert (forall ((n@266@01 $Ref)) (!
  (=>
    (Set_in n@266@01 g@230@01)
    (and (= (inv@267@01 n@266@01) n@266@01) (img@268@01 n@266@01)))
  :pattern ((Set_in n@266@01 g@230@01))
  :pattern ((inv@267@01 n@266@01))
  :pattern ((img@268@01 n@266@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@268@01 r) (Set_in (inv@267@01 r) g@230@01)) (= (inv@267@01 r) r))
  :pattern ((inv@267@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@270@01  $FVF<r>)))
      (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r)))
    (=>
      (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r))
      (Set_in r ($FVF.domain_r (as sm@270@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@270@01  $FVF<r>))))
  :qid |qp.fvfDomDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@270@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@270@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@270@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@270@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@270@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef257|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@263@01 r) g@230@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
    :pattern ((inv@263@01 r))
    :qid |quant-u-7311|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@267@01 r) g@230@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@269@01  $FVF<r>) r) r))
    :pattern ((inv@267@01 r))
    :qid |quant-u-7314|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@265@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@270@01  $FVF<r>))) g@230@01)))
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@271@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@271@01 g@230@01))
(pop) ; 6
(declare-fun inv@272@01 ($Ref) $Ref)
(declare-fun img@273@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@271@01 $Ref) (n2@271@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@271@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n1@271@01) n1@271@01))
      (and
        (Set_in n2@271@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n2@271@01) n2@271@01))
      (= n1@271@01 n2@271@01))
    (= n1@271@01 n2@271@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@230@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@230@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@230@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@272@01 r) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
  :pattern ((inv@272@01 r))
  :qid |quant-u-7317|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r) (= r (inv@272@01 r)))
    (>
      (+
        (ite
          (and
            (img@239@01 r)
            (and
              (Set_in (inv@238@01 r) g@230@01)
              (not (= (inv@238@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7318|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@274@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@274@01  $FVF<l>)))
      (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r))
      (Set_in r ($FVF.domain_l (as sm@274@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@274@01  $FVF<l>))))
  :qid |qp.fvfDomDef262|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@274@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@274@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@274@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@274@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@274@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef261|)))
(declare-const n@275@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@275@01 g@230@01))
(pop) ; 6
(declare-fun inv@276@01 ($Ref) $Ref)
(declare-fun img@277@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@278@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@278@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@278@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@278@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@278@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@278@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef265|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@275@01 $Ref) (n2@275@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@275@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@278@01  $FVF<r>) n1@275@01) n1@275@01))
      (and
        (Set_in n2@275@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@278@01  $FVF<r>) n2@275@01) n2@275@01))
      (= n1@275@01 n2@275@01))
    (= n1@275@01 n2@275@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@275@01 $Ref)) (!
  (=>
    (Set_in n@275@01 g@230@01)
    (and (= (inv@276@01 n@275@01) n@275@01) (img@277@01 n@275@01)))
  :pattern ((Set_in n@275@01 g@230@01))
  :pattern ((inv@276@01 n@275@01))
  :pattern ((img@277@01 n@275@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@277@01 r) (Set_in (inv@276@01 r) g@230@01)) (= (inv@276@01 r) r))
  :pattern ((inv@276@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@276@01 r) g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@278@01  $FVF<r>) r) r))
  :pattern ((inv@276@01 r))
  :qid |quant-u-7320|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r) (= r (inv@276@01 r)))
    (>
      (+
        (ite
          (and
            (img@243@01 r)
            (and
              (Set_in (inv@242@01 r) g@230@01)
              (not (= (inv@242@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7321|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@279@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@279@01  $FVF<r>)))
      (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r)))
    (=>
      (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r))
      (Set_in r ($FVF.domain_r (as sm@279@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@279@01  $FVF<r>))))
  :qid |qp.fvfDomDef269|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@279@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@279@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@279@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@279@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@279@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@274@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@279@01  $FVF<r>))) g@230@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@230@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@230@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@230@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@274@01  $FVF<l>)))
      (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r))
      (Set_in r ($FVF.domain_l (as sm@274@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@274@01  $FVF<l>))))
  :qid |qp.fvfDomDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@274@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@274@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@274@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@274@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@274@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@278@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@278@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@278@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@278@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@278@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef265|)))
(assert (forall ((n@275@01 $Ref)) (!
  (=>
    (Set_in n@275@01 g@230@01)
    (and (= (inv@276@01 n@275@01) n@275@01) (img@277@01 n@275@01)))
  :pattern ((Set_in n@275@01 g@230@01))
  :pattern ((inv@276@01 n@275@01))
  :pattern ((img@277@01 n@275@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@277@01 r) (Set_in (inv@276@01 r) g@230@01)) (= (inv@276@01 r) r))
  :pattern ((inv@276@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@279@01  $FVF<r>)))
      (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r)))
    (=>
      (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r))
      (Set_in r ($FVF.domain_r (as sm@279@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@279@01  $FVF<r>))))
  :qid |qp.fvfDomDef269|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@279@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@279@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@279@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@279@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@279@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@272@01 r) g@230@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
    :pattern ((inv@272@01 r))
    :qid |quant-u-7317|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@276@01 r) g@230@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@278@01  $FVF<r>) r) r))
    :pattern ((inv@276@01 r))
    :qid |quant-u-7320|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@274@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@279@01  $FVF<r>))) g@230@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 66 | Lookup(l, sm@240@01, x@231@01) != Null]
(assert (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@262@01 $Ref)) (!
  (=>
    (Set_in n@262@01 g@230@01)
    (and (= (inv@263@01 n@262@01) n@262@01) (img@264@01 n@262@01)))
  :pattern ((Set_in n@262@01 g@230@01))
  :pattern ((inv@263@01 n@262@01))
  :pattern ((img@264@01 n@262@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@264@01 r) (Set_in (inv@263@01 r) g@230@01)) (= (inv@263@01 r) r))
  :pattern ((inv@263@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@265@01  $FVF<l>)))
      (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r)))
    (=>
      (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r))
      (Set_in r ($FVF.domain_l (as sm@265@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@265@01  $FVF<l>))))
  :qid |qp.fvfDomDef251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@265@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@265@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@263@01 r) g@230@01) (img@264@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@265@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@265@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef249|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@265@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@269@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@269@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@269@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@269@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@269@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef254|)))
(assert (forall ((n@266@01 $Ref)) (!
  (=>
    (Set_in n@266@01 g@230@01)
    (and (= (inv@267@01 n@266@01) n@266@01) (img@268@01 n@266@01)))
  :pattern ((Set_in n@266@01 g@230@01))
  :pattern ((inv@267@01 n@266@01))
  :pattern ((img@268@01 n@266@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@268@01 r) (Set_in (inv@267@01 r) g@230@01)) (= (inv@267@01 r) r))
  :pattern ((inv@267@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@270@01  $FVF<r>)))
      (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r)))
    (=>
      (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r))
      (Set_in r ($FVF.domain_r (as sm@270@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@270@01  $FVF<r>))))
  :qid |qp.fvfDomDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@270@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@270@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@267@01 r) g@230@01) (img@268@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@270@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@270@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@270@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef257|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@230@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@230@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@230@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@274@01  $FVF<l>)))
      (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r))
      (Set_in r ($FVF.domain_l (as sm@274@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@274@01  $FVF<l>))))
  :qid |qp.fvfDomDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@274@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@274@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@230@01) (img@273@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@274@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@274@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@274@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@278@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@278@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@278@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@278@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@278@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef265|)))
(assert (forall ((n@275@01 $Ref)) (!
  (=>
    (Set_in n@275@01 g@230@01)
    (and (= (inv@276@01 n@275@01) n@275@01) (img@277@01 n@275@01)))
  :pattern ((Set_in n@275@01 g@230@01))
  :pattern ((inv@276@01 n@275@01))
  :pattern ((img@277@01 n@275@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@277@01 r) (Set_in (inv@276@01 r) g@230@01)) (= (inv@276@01 r) r))
  :pattern ((inv@276@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@279@01  $FVF<r>)))
      (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r)))
    (=>
      (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r))
      (Set_in r ($FVF.domain_r (as sm@279@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@279@01  $FVF<r>))))
  :qid |qp.fvfDomDef269|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@279@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@279@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@276@01 r) g@230@01) (img@277@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@279@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@279@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@279@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (=>
  (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)
  (and
    (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@263@01 r) g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
      :pattern ((inv@263@01 r))
      :qid |quant-u-7311|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@267@01 r) g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@269@01  $FVF<r>) r) r))
      :pattern ((inv@267@01 r))
      :qid |quant-u-7314|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@265@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@270@01  $FVF<r>))) g@230@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@272@01 r) g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
      :pattern ((inv@272@01 r))
      :qid |quant-u-7317|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@276@01 r) g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@278@01  $FVF<r>) r) r))
      :pattern ((inv@276@01 r))
      :qid |quant-u-7320|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@274@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@279@01  $FVF<r>))) g@230@01))))
; Joined path conditions
(assert (or
  (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))
  (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)))
(assert (=>
  (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)
  (Set_equal ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@265@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@270@01  $FVF<r>))) g@230@01) ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@274@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@279@01  $FVF<r>))) g@230@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))))))
  $Snap.unit))
; [eval] old(x.l) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.l))))
; [eval] old(x.l) != null
; [eval] old(x.l)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
      (=
        ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
    :qid |qp.fvfValDef233|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef234|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@239@01 x@231@01)
        (and
          (Set_in (inv@238@01 x@231@01) g@230@01)
          (not (= (inv@238@01 x@231@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 67 | Lookup(l, sm@240@01, x@231@01) != Null | live]
; [else-branch: 67 | Lookup(l, sm@240@01, x@231@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 67 | Lookup(l, sm@240@01, x@231@01) != Null]
(assert (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.l))))
(declare-const v1@280@01 $Ref)
(declare-const v2@281@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.l)))
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@282@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@282@01 g@230@01))
(pop) ; 7
(declare-fun inv@283@01 ($Ref) $Ref)
(declare-fun img@284@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@282@01 $Ref) (n2@282@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@282@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n1@282@01) n1@282@01))
      (and
        (Set_in n2@282@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n2@282@01) n2@282@01))
      (= n1@282@01 n2@282@01))
    (= n1@282@01 n2@282@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@282@01 $Ref)) (!
  (=>
    (Set_in n@282@01 g@230@01)
    (and (= (inv@283@01 n@282@01) n@282@01) (img@284@01 n@282@01)))
  :pattern ((Set_in n@282@01 g@230@01))
  :pattern ((inv@283@01 n@282@01))
  :pattern ((img@284@01 n@282@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@284@01 r) (Set_in (inv@283@01 r) g@230@01)) (= (inv@283@01 r) r))
  :pattern ((inv@283@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@283@01 r) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
  :pattern ((inv@283@01 r))
  :qid |quant-u-7323|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r) (= r (inv@283@01 r)))
    (>
      (+
        (ite
          (and
            (img@254@01 r)
            (and
              (Set_in (inv@253@01 r) g@230@01)
              (not (= (inv@253@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7324|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@285@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>)))
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r)))
    (=>
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r))
      (Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>))))
  :qid |qp.fvfDomDef273|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@285@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@285@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef272|)))
(declare-const n@286@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@286@01 g@230@01))
(pop) ; 7
(declare-fun inv@287@01 ($Ref) $Ref)
(declare-fun img@288@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@289@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@289@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@289@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef276|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@286@01 $Ref) (n2@286@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@286@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@289@01  $FVF<r>) n1@286@01) n1@286@01))
      (and
        (Set_in n2@286@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@289@01  $FVF<r>) n2@286@01) n2@286@01))
      (= n1@286@01 n2@286@01))
    (= n1@286@01 n2@286@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@286@01 $Ref)) (!
  (=>
    (Set_in n@286@01 g@230@01)
    (and (= (inv@287@01 n@286@01) n@286@01) (img@288@01 n@286@01)))
  :pattern ((Set_in n@286@01 g@230@01))
  :pattern ((inv@287@01 n@286@01))
  :pattern ((img@288@01 n@286@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@288@01 r) (Set_in (inv@287@01 r) g@230@01)) (= (inv@287@01 r) r))
  :pattern ((inv@287@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@287@01 r) g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@289@01  $FVF<r>) r) r))
  :pattern ((inv@287@01 r))
  :qid |quant-u-7326|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r) (= r (inv@287@01 r)))
    (>
      (+
        (ite
          (and
            (img@258@01 r)
            (and
              (Set_in (inv@257@01 r) g@230@01)
              (not (= (inv@257@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7327|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@290@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>)))
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r)))
    (=>
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r))
      (Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>))))
  :qid |qp.fvfDomDef280|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@290@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@290@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef279|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@285@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@290@01  $FVF<r>))) g@230@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@282@01 $Ref)) (!
  (=>
    (Set_in n@282@01 g@230@01)
    (and (= (inv@283@01 n@282@01) n@282@01) (img@284@01 n@282@01)))
  :pattern ((Set_in n@282@01 g@230@01))
  :pattern ((inv@283@01 n@282@01))
  :pattern ((img@284@01 n@282@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@284@01 r) (Set_in (inv@283@01 r) g@230@01)) (= (inv@283@01 r) r))
  :pattern ((inv@283@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>)))
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r)))
    (=>
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r))
      (Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>))))
  :qid |qp.fvfDomDef273|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@285@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@285@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@289@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@289@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (forall ((n@286@01 $Ref)) (!
  (=>
    (Set_in n@286@01 g@230@01)
    (and (= (inv@287@01 n@286@01) n@286@01) (img@288@01 n@286@01)))
  :pattern ((Set_in n@286@01 g@230@01))
  :pattern ((inv@287@01 n@286@01))
  :pattern ((img@288@01 n@286@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@288@01 r) (Set_in (inv@287@01 r) g@230@01)) (= (inv@287@01 r) r))
  :pattern ((inv@287@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>)))
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r)))
    (=>
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r))
      (Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>))))
  :qid |qp.fvfDomDef280|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@290@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@290@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef279|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@283@01 r) g@230@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
    :pattern ((inv@283@01 r))
    :qid |quant-u-7323|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@287@01 r) g@230@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@289@01  $FVF<r>) r) r))
    :pattern ((inv@287@01 r))
    :qid |quant-u-7326|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@285@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@290@01  $FVF<r>))) g@230@01)))
; [eval] edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.l))
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 6
(declare-const n@291@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@291@01 g@230@01))
(pop) ; 7
(declare-fun inv@292@01 ($Ref) $Ref)
(declare-fun img@293@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@291@01 $Ref) (n2@291@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@291@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n1@291@01) n1@291@01))
      (and
        (Set_in n2@291@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n2@291@01) n2@291@01))
      (= n1@291@01 n2@291@01))
    (= n1@291@01 n2@291@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@291@01 $Ref)) (!
  (=>
    (Set_in n@291@01 g@230@01)
    (and (= (inv@292@01 n@291@01) n@291@01) (img@293@01 n@291@01)))
  :pattern ((Set_in n@291@01 g@230@01))
  :pattern ((inv@292@01 n@291@01))
  :pattern ((img@293@01 n@291@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@293@01 r) (Set_in (inv@292@01 r) g@230@01)) (= (inv@292@01 r) r))
  :pattern ((inv@292@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@292@01 r) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
  :pattern ((inv@292@01 r))
  :qid |quant-u-7329|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r) (= r (inv@292@01 r)))
    (>
      (+
        (ite
          (and
            (img@239@01 r)
            (and
              (Set_in (inv@238@01 r) g@230@01)
              (not (= (inv@238@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7330|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@294@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>)))
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r)))
    (=>
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r))
      (Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>))))
  :qid |qp.fvfDomDef284|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@294@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef281|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@294@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef282|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef283|)))
(declare-const n@295@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@295@01 g@230@01))
(pop) ; 7
(declare-fun inv@296@01 ($Ref) $Ref)
(declare-fun img@297@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@298@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@298@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@298@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef287|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@295@01 $Ref) (n2@295@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@295@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@298@01  $FVF<r>) n1@295@01) n1@295@01))
      (and
        (Set_in n2@295@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@298@01  $FVF<r>) n2@295@01) n2@295@01))
      (= n1@295@01 n2@295@01))
    (= n1@295@01 n2@295@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@295@01 $Ref)) (!
  (=>
    (Set_in n@295@01 g@230@01)
    (and (= (inv@296@01 n@295@01) n@295@01) (img@297@01 n@295@01)))
  :pattern ((Set_in n@295@01 g@230@01))
  :pattern ((inv@296@01 n@295@01))
  :pattern ((img@297@01 n@295@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@297@01 r) (Set_in (inv@296@01 r) g@230@01)) (= (inv@296@01 r) r))
  :pattern ((inv@296@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@296@01 r) g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@298@01  $FVF<r>) r) r))
  :pattern ((inv@296@01 r))
  :qid |quant-u-7332|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r) (= r (inv@296@01 r)))
    (>
      (+
        (ite
          (and
            (img@243@01 r)
            (and
              (Set_in (inv@242@01 r) g@230@01)
              (not (= (inv@242@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7333|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@299@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>)))
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r)))
    (=>
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r))
      (Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>))))
  :qid |qp.fvfDomDef291|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef289|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef290|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@291@01 $Ref)) (!
  (=>
    (Set_in n@291@01 g@230@01)
    (and (= (inv@292@01 n@291@01) n@291@01) (img@293@01 n@291@01)))
  :pattern ((Set_in n@291@01 g@230@01))
  :pattern ((inv@292@01 n@291@01))
  :pattern ((img@293@01 n@291@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@293@01 r) (Set_in (inv@292@01 r) g@230@01)) (= (inv@292@01 r) r))
  :pattern ((inv@292@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>)))
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r)))
    (=>
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r))
      (Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>))))
  :qid |qp.fvfDomDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@294@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef281|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@294@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef282|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef283|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@298@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@298@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@295@01 $Ref)) (!
  (=>
    (Set_in n@295@01 g@230@01)
    (and (= (inv@296@01 n@295@01) n@295@01) (img@297@01 n@295@01)))
  :pattern ((Set_in n@295@01 g@230@01))
  :pattern ((inv@296@01 n@295@01))
  :pattern ((img@297@01 n@295@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@297@01 r) (Set_in (inv@296@01 r) g@230@01)) (= (inv@296@01 r) r))
  :pattern ((inv@296@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>)))
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r)))
    (=>
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r))
      (Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>))))
  :qid |qp.fvfDomDef291|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef289|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef290|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@292@01 r) g@230@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
    :pattern ((inv@292@01 r))
    :qid |quant-u-7329|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@296@01 r) g@230@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@298@01  $FVF<r>) r) r))
    :pattern ((inv@296@01 r))
    :qid |quant-u-7332|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01)))
(push) ; 6
; [then-branch: 68 | !(edge[Bool]($$((sm@294@01, sm@299@01), g@230@01), v1@280@01, v2@281@01)) | live]
; [else-branch: 68 | edge[Bool]($$((sm@294@01, sm@299@01), g@230@01), v1@280@01, v2@281@01) | live]
(push) ; 7
; [then-branch: 68 | !(edge[Bool]($$((sm@294@01, sm@299@01), g@230@01), v1@280@01, v2@281@01))]
(assert (not
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 68 | edge[Bool]($$((sm@294@01, sm@299@01), g@230@01), v1@280@01, v2@281@01)]
(assert (edge<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01))
; [eval] !(v1 == x && v2 == old(x.l))
; [eval] v1 == x && v2 == old(x.l)
; [eval] v1 == x
(push) ; 8
; [then-branch: 69 | v1@280@01 != x@231@01 | live]
; [else-branch: 69 | v1@280@01 == x@231@01 | live]
(push) ; 9
; [then-branch: 69 | v1@280@01 != x@231@01]
(assert (not (= v1@280@01 x@231@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 69 | v1@280@01 == x@231@01]
(assert (= v1@280@01 x@231@01))
; [eval] v2 == old(x.l)
; [eval] old(x.l)
(declare-const sm@300@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@300@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@300@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef294|)))
(declare-const pm@301@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@301@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef295|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@300@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@301@01  $FPM) r))
  :qid |qp.resTrgDef296|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@300@01  $FVF<l>) x@231@01) x@231@01))
(push) ; 10
(assert (not (< $Perm.No ($FVF.perm_l (as pm@301@01  $FPM) x@231@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@300@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@300@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@301@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef295|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@300@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@301@01  $FPM) r))
  :qid |qp.resTrgDef296|)))
(assert (=>
  (= v1@280@01 x@231@01)
  (and
    (= v1@280@01 x@231@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@300@01  $FVF<l>) x@231@01) x@231@01))))
(assert (or (= v1@280@01 x@231@01) (not (= v1@280@01 x@231@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@300@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@300@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@301@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef295|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@300@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@301@01  $FPM) r))
  :qid |qp.resTrgDef296|)))
(assert (=>
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
  (and
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
    (=>
      (= v1@280@01 x@231@01)
      (and
        (= v1@280@01 x@231@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@300@01  $FVF<l>) x@231@01) x@231@01)))
    (or (= v1@280@01 x@231@01) (not (= v1@280@01 x@231@01))))))
(assert (or
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@282@01 $Ref)) (!
  (=>
    (Set_in n@282@01 g@230@01)
    (and (= (inv@283@01 n@282@01) n@282@01) (img@284@01 n@282@01)))
  :pattern ((Set_in n@282@01 g@230@01))
  :pattern ((inv@283@01 n@282@01))
  :pattern ((img@284@01 n@282@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@284@01 r) (Set_in (inv@283@01 r) g@230@01)) (= (inv@283@01 r) r))
  :pattern ((inv@283@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>)))
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r)))
    (=>
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r))
      (Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>))))
  :qid |qp.fvfDomDef273|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@285@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@285@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@289@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@289@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (forall ((n@286@01 $Ref)) (!
  (=>
    (Set_in n@286@01 g@230@01)
    (and (= (inv@287@01 n@286@01) n@286@01) (img@288@01 n@286@01)))
  :pattern ((Set_in n@286@01 g@230@01))
  :pattern ((inv@287@01 n@286@01))
  :pattern ((img@288@01 n@286@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@288@01 r) (Set_in (inv@287@01 r) g@230@01)) (= (inv@287@01 r) r))
  :pattern ((inv@287@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>)))
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r)))
    (=>
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r))
      (Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>))))
  :qid |qp.fvfDomDef280|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@290@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@290@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef279|)))
(assert (forall ((n@291@01 $Ref)) (!
  (=>
    (Set_in n@291@01 g@230@01)
    (and (= (inv@292@01 n@291@01) n@291@01) (img@293@01 n@291@01)))
  :pattern ((Set_in n@291@01 g@230@01))
  :pattern ((inv@292@01 n@291@01))
  :pattern ((img@293@01 n@291@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@293@01 r) (Set_in (inv@292@01 r) g@230@01)) (= (inv@292@01 r) r))
  :pattern ((inv@292@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>)))
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r)))
    (=>
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r))
      (Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>))))
  :qid |qp.fvfDomDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@294@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef281|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@294@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef282|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef283|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@298@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@298@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@295@01 $Ref)) (!
  (=>
    (Set_in n@295@01 g@230@01)
    (and (= (inv@296@01 n@295@01) n@295@01) (img@297@01 n@295@01)))
  :pattern ((Set_in n@295@01 g@230@01))
  :pattern ((inv@296@01 n@295@01))
  :pattern ((img@297@01 n@295@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@297@01 r) (Set_in (inv@296@01 r) g@230@01)) (= (inv@296@01 r) r))
  :pattern ((inv@296@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>)))
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r)))
    (=>
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r))
      (Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>))))
  :qid |qp.fvfDomDef291|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef289|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@300@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@300@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@301@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef295|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@300@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@301@01  $FPM) r))
  :qid |qp.resTrgDef296|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@283@01 r) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
  :pattern ((inv@283@01 r))
  :qid |quant-u-7323|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@287@01 r) g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@289@01  $FVF<r>) r) r))
  :pattern ((inv@287@01 r))
  :qid |quant-u-7326|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@285@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@290@01  $FVF<r>))) g@230@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@292@01 r) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
  :pattern ((inv@292@01 r))
  :qid |quant-u-7329|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@296@01 r) g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@298@01  $FVF<r>) r) r))
  :pattern ((inv@296@01 r))
  :qid |quant-u-7332|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@280@01 $Ref) (v2@281@01 $Ref)) (!
  (and
    (=>
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
      (and
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
        (=>
          (= v1@280@01 x@231@01)
          (and
            (= v1@280@01 x@231@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@300@01  $FVF<l>) x@231@01) x@231@01)))
        (or (= v1@280@01 x@231@01) (not (= v1@280@01 x@231@01)))))
    (or
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01))))
  :pattern ((edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@285@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@290@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@283@34@285@86-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 67 | Lookup(l, sm@240@01, x@231@01) == Null]
(assert (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@282@01 $Ref)) (!
  (=>
    (Set_in n@282@01 g@230@01)
    (and (= (inv@283@01 n@282@01) n@282@01) (img@284@01 n@282@01)))
  :pattern ((Set_in n@282@01 g@230@01))
  :pattern ((inv@283@01 n@282@01))
  :pattern ((img@284@01 n@282@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@284@01 r) (Set_in (inv@283@01 r) g@230@01)) (= (inv@283@01 r) r))
  :pattern ((inv@283@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>)))
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r)))
    (=>
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r))
      (Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@285@01  $FVF<l>))))
  :qid |qp.fvfDomDef273|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@285@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@283@01 r) g@230@01) (img@284@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@285@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@285@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@289@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@289@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@289@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (forall ((n@286@01 $Ref)) (!
  (=>
    (Set_in n@286@01 g@230@01)
    (and (= (inv@287@01 n@286@01) n@286@01) (img@288@01 n@286@01)))
  :pattern ((Set_in n@286@01 g@230@01))
  :pattern ((inv@287@01 n@286@01))
  :pattern ((img@288@01 n@286@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@288@01 r) (Set_in (inv@287@01 r) g@230@01)) (= (inv@287@01 r) r))
  :pattern ((inv@287@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>)))
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r)))
    (=>
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r))
      (Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@290@01  $FVF<r>))))
  :qid |qp.fvfDomDef280|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@290@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@287@01 r) g@230@01) (img@288@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@290@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@290@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef279|)))
(assert (forall ((n@291@01 $Ref)) (!
  (=>
    (Set_in n@291@01 g@230@01)
    (and (= (inv@292@01 n@291@01) n@291@01) (img@293@01 n@291@01)))
  :pattern ((Set_in n@291@01 g@230@01))
  :pattern ((inv@292@01 n@291@01))
  :pattern ((img@293@01 n@291@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@293@01 r) (Set_in (inv@292@01 r) g@230@01)) (= (inv@292@01 r) r))
  :pattern ((inv@292@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>)))
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r)))
    (=>
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r))
      (Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@294@01  $FVF<l>))))
  :qid |qp.fvfDomDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@294@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef281|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@292@01 r) g@230@01) (img@293@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@294@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef282|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@294@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef283|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@298@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@298@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@298@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@295@01 $Ref)) (!
  (=>
    (Set_in n@295@01 g@230@01)
    (and (= (inv@296@01 n@295@01) n@295@01) (img@297@01 n@295@01)))
  :pattern ((Set_in n@295@01 g@230@01))
  :pattern ((inv@296@01 n@295@01))
  :pattern ((img@297@01 n@295@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@297@01 r) (Set_in (inv@296@01 r) g@230@01)) (= (inv@296@01 r) r))
  :pattern ((inv@296@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>)))
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r)))
    (=>
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r))
      (Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@299@01  $FVF<r>))))
  :qid |qp.fvfDomDef291|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@296@01 r) g@230@01) (img@297@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@299@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef289|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@299@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@300@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@300@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@300@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@301@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef295|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@300@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@301@01  $FPM) r))
  :qid |qp.resTrgDef296|)))
(assert (=>
  (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@283@01 r) g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
      :pattern ((inv@283@01 r))
      :qid |quant-u-7323|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@287@01 r) g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@289@01  $FVF<r>) r) r))
      :pattern ((inv@287@01 r))
      :qid |quant-u-7326|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@285@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@290@01  $FVF<r>))) g@230@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@292@01 r) g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
      :pattern ((inv@292@01 r))
      :qid |quant-u-7329|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@296@01 r) g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@298@01  $FVF<r>) r) r))
      :pattern ((inv@296@01 r))
      :qid |quant-u-7332|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01)
    (forall ((v1@280@01 $Ref) (v2@281@01 $Ref)) (!
      (and
        (=>
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
          (and
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
            (=>
              (= v1@280@01 x@231@01)
              (and
                (= v1@280@01 x@231@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@300@01  $FVF<l>) x@231@01) x@231@01)))
            (or (= v1@280@01 x@231@01) (not (= v1@280@01 x@231@01)))))
        (or
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01))))
      :pattern ((edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@285@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@290@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@283@34@285@86-aux|)))))
; Joined path conditions
(assert (or
  (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)
  (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))))
(assert (=>
  (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))
  (forall ((v1@280@01 $Ref) (v2@281@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@285@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@290@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
      (and
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@294@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@299@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01)
        (not
          (and
            (= v1@280@01 x@231@01)
            (= v2@281@01 ($FVF.lookup_l (as sm@300@01  $FVF<l>) x@231@01))))))
    :pattern ((edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@285@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@290@01  $FVF<r>))) g@230@01) v1@280@01 v2@281@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@283@34@285@86|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))))))))
  $Snap.unit))
; [eval] old(x.l) != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2))))
; [eval] old(x.l) != null
; [eval] old(x.l)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@231@01)
      (=
        ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
      (=
        ($FVF.lookup_l (as sm@240@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
    :qid |qp.fvfValDef233|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@240@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef234|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@239@01 x@231@01)
        (and
          (Set_in (inv@238@01 x@231@01) g@230@01)
          (not (= (inv@238@01 x@231@01) x@231@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 70 | Lookup(l, sm@240@01, x@231@01) != Null | live]
; [else-branch: 70 | Lookup(l, sm@240@01, x@231@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 70 | Lookup(l, sm@240@01, x@231@01) != Null]
(assert (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2))))
(declare-const v1@302@01 $Ref)
(declare-const v2@303@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2)))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 71 | v1@302@01 != v2@303@01 | live]
; [else-branch: 71 | v1@302@01 == v2@303@01 | live]
(push) ; 7
; [then-branch: 71 | v1@302@01 != v2@303@01]
(assert (not (= v1@302@01 v2@303@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2)))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@304@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@304@01 g@230@01))
(pop) ; 9
(declare-fun inv@305@01 ($Ref) $Ref)
(declare-fun img@306@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@304@01 $Ref) (n2@304@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@304@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n1@304@01) n1@304@01))
      (and
        (Set_in n2@304@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) n2@304@01) n2@304@01))
      (= n1@304@01 n2@304@01))
    (= n1@304@01 n2@304@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@304@01 $Ref)) (!
  (=>
    (Set_in n@304@01 g@230@01)
    (and (= (inv@305@01 n@304@01) n@304@01) (img@306@01 n@304@01)))
  :pattern ((Set_in n@304@01 g@230@01))
  :pattern ((inv@305@01 n@304@01))
  :pattern ((img@306@01 n@304@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@306@01 r) (Set_in (inv@305@01 r) g@230@01)) (= (inv@305@01 r) r))
  :pattern ((inv@305@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@305@01 r) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
  :pattern ((inv@305@01 r))
  :qid |quant-u-7335|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r) (= r (inv@305@01 r)))
    (>
      (+
        (ite
          (and
            (img@254@01 r)
            (and
              (Set_in (inv@253@01 r) g@230@01)
              (not (= (inv@253@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7336|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@307@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>)))
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r)))
    (=>
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r))
      (Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>))))
  :qid |qp.fvfDomDef300|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@307@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef297|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@307@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef298|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef299|)))
(declare-const n@308@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@308@01 g@230@01))
(pop) ; 9
(declare-fun inv@309@01 ($Ref) $Ref)
(declare-fun img@310@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@311@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@311@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef301|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@311@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef303|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@308@01 $Ref) (n2@308@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@308@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@311@01  $FVF<r>) n1@308@01) n1@308@01))
      (and
        (Set_in n2@308@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@311@01  $FVF<r>) n2@308@01) n2@308@01))
      (= n1@308@01 n2@308@01))
    (= n1@308@01 n2@308@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g@230@01)
    (and (= (inv@309@01 n@308@01) n@308@01) (img@310@01 n@308@01)))
  :pattern ((Set_in n@308@01 g@230@01))
  :pattern ((inv@309@01 n@308@01))
  :pattern ((img@310@01 n@308@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@310@01 r) (Set_in (inv@309@01 r) g@230@01)) (= (inv@309@01 r) r))
  :pattern ((inv@309@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@309@01 r) g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@311@01  $FVF<r>) r) r))
  :pattern ((inv@309@01 r))
  :qid |quant-u-7338|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r) (= r (inv@309@01 r)))
    (>
      (+
        (ite
          (and
            (img@258@01 r)
            (and
              (Set_in (inv@257@01 r) g@230@01)
              (not (= (inv@257@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7339|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@312@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>)))
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r)))
    (=>
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r))
      (Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>))))
  :qid |qp.fvfDomDef307|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@312@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@312@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef305|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef306|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@307@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@312@01  $FVF<r>))) g@230@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@304@01 $Ref)) (!
  (=>
    (Set_in n@304@01 g@230@01)
    (and (= (inv@305@01 n@304@01) n@304@01) (img@306@01 n@304@01)))
  :pattern ((Set_in n@304@01 g@230@01))
  :pattern ((inv@305@01 n@304@01))
  :pattern ((img@306@01 n@304@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@306@01 r) (Set_in (inv@305@01 r) g@230@01)) (= (inv@305@01 r) r))
  :pattern ((inv@305@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>)))
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r)))
    (=>
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r))
      (Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>))))
  :qid |qp.fvfDomDef300|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@307@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef297|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@307@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef298|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef299|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@311@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef301|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@311@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef303|)))
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g@230@01)
    (and (= (inv@309@01 n@308@01) n@308@01) (img@310@01 n@308@01)))
  :pattern ((Set_in n@308@01 g@230@01))
  :pattern ((inv@309@01 n@308@01))
  :pattern ((img@310@01 n@308@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@310@01 r) (Set_in (inv@309@01 r) g@230@01)) (= (inv@309@01 r) r))
  :pattern ((inv@309@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>)))
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r)))
    (=>
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r))
      (Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>))))
  :qid |qp.fvfDomDef307|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@312@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@312@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef305|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef306|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@305@01 r) g@230@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
    :pattern ((inv@305@01 r))
    :qid |quant-u-7335|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@309@01 r) g@230@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@311@01  $FVF<r>) r) r))
    :pattern ((inv@309@01 r))
    :qid |quant-u-7338|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@307@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@312@01  $FVF<r>))) g@230@01)))
; [eval] exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2))
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@313@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@313@01 g@230@01))
(pop) ; 9
(declare-fun inv@314@01 ($Ref) $Ref)
(declare-fun img@315@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@313@01 $Ref) (n2@313@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@313@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n1@313@01) n1@313@01))
      (and
        (Set_in n2@313@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) n2@313@01) n2@313@01))
      (= n1@313@01 n2@313@01))
    (= n1@313@01 n2@313@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@313@01 $Ref)) (!
  (=>
    (Set_in n@313@01 g@230@01)
    (and (= (inv@314@01 n@313@01) n@313@01) (img@315@01 n@313@01)))
  :pattern ((Set_in n@313@01 g@230@01))
  :pattern ((inv@314@01 n@313@01))
  :pattern ((img@315@01 n@313@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@315@01 r) (Set_in (inv@314@01 r) g@230@01)) (= (inv@314@01 r) r))
  :pattern ((inv@314@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@314@01 r) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
  :pattern ((inv@314@01 r))
  :qid |quant-u-7341|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r) (= r (inv@314@01 r)))
    (>
      (+
        (ite
          (and
            (img@239@01 r)
            (and
              (Set_in (inv@238@01 r) g@230@01)
              (not (= (inv@238@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7342|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@316@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>)))
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r)))
    (=>
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r))
      (Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>))))
  :qid |qp.fvfDomDef311|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@316@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@316@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef309|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef310|)))
(declare-const n@317@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@317@01 g@230@01))
(pop) ; 9
(declare-fun inv@318@01 ($Ref) $Ref)
(declare-fun img@319@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@320@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@320@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef312|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@320@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef313|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef314|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@317@01 $Ref) (n2@317@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@317@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@320@01  $FVF<r>) n1@317@01) n1@317@01))
      (and
        (Set_in n2@317@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@320@01  $FVF<r>) n2@317@01) n2@317@01))
      (= n1@317@01 n2@317@01))
    (= n1@317@01 n2@317@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@317@01 $Ref)) (!
  (=>
    (Set_in n@317@01 g@230@01)
    (and (= (inv@318@01 n@317@01) n@317@01) (img@319@01 n@317@01)))
  :pattern ((Set_in n@317@01 g@230@01))
  :pattern ((inv@318@01 n@317@01))
  :pattern ((img@319@01 n@317@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@319@01 r) (Set_in (inv@318@01 r) g@230@01)) (= (inv@318@01 r) r))
  :pattern ((inv@318@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@318@01 r) g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@320@01  $FVF<r>) r) r))
  :pattern ((inv@318@01 r))
  :qid |quant-u-7344|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r) (= r (inv@318@01 r)))
    (>
      (+
        (ite
          (and
            (img@243@01 r)
            (and
              (Set_in (inv@242@01 r) g@230@01)
              (not (= (inv@242@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7345|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@321@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>)))
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r)))
    (=>
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r))
      (Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>))))
  :qid |qp.fvfDomDef318|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@321@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef315|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@321@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef317|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@313@01 $Ref)) (!
  (=>
    (Set_in n@313@01 g@230@01)
    (and (= (inv@314@01 n@313@01) n@313@01) (img@315@01 n@313@01)))
  :pattern ((Set_in n@313@01 g@230@01))
  :pattern ((inv@314@01 n@313@01))
  :pattern ((img@315@01 n@313@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@315@01 r) (Set_in (inv@314@01 r) g@230@01)) (= (inv@314@01 r) r))
  :pattern ((inv@314@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>)))
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r)))
    (=>
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r))
      (Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>))))
  :qid |qp.fvfDomDef311|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@316@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@316@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef309|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef310|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@320@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef312|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@320@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef313|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef314|)))
(assert (forall ((n@317@01 $Ref)) (!
  (=>
    (Set_in n@317@01 g@230@01)
    (and (= (inv@318@01 n@317@01) n@317@01) (img@319@01 n@317@01)))
  :pattern ((Set_in n@317@01 g@230@01))
  :pattern ((inv@318@01 n@317@01))
  :pattern ((img@319@01 n@317@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@319@01 r) (Set_in (inv@318@01 r) g@230@01)) (= (inv@318@01 r) r))
  :pattern ((inv@318@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>)))
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r)))
    (=>
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r))
      (Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>))))
  :qid |qp.fvfDomDef318|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@321@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef315|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@321@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef317|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@314@01 r) g@230@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
    :pattern ((inv@314@01 r))
    :qid |quant-u-7341|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@318@01 r) g@230@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@320@01  $FVF<r>) r) r))
    :pattern ((inv@318@01 r))
    :qid |quant-u-7344|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01)))
(push) ; 8
; [then-branch: 72 | !(exists_path[Bool]($$((sm@316@01, sm@321@01), g@230@01), v1@302@01, v2@303@01)) | live]
; [else-branch: 72 | exists_path[Bool]($$((sm@316@01, sm@321@01), g@230@01), v1@302@01, v2@303@01) | live]
(push) ; 9
; [then-branch: 72 | !(exists_path[Bool]($$((sm@316@01, sm@321@01), g@230@01), v1@302@01, v2@303@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 72 | exists_path[Bool]($$((sm@316@01, sm@321@01), g@230@01), v1@302@01, v2@303@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01))
; [eval] !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.l), v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@322@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@322@01 g@230@01))
(pop) ; 11
(declare-fun inv@323@01 ($Ref) $Ref)
(declare-fun img@324@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@325@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef319|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef320|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef321|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@322@01 $Ref) (n2@322@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@322@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@325@01  $FVF<l>) n1@322@01) n1@322@01))
      (and
        (Set_in n2@322@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@325@01  $FVF<l>) n2@322@01) n2@322@01))
      (= n1@322@01 n2@322@01))
    (= n1@322@01 n2@322@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@322@01 $Ref)) (!
  (=>
    (Set_in n@322@01 g@230@01)
    (and (= (inv@323@01 n@322@01) n@322@01) (img@324@01 n@322@01)))
  :pattern ((Set_in n@322@01 g@230@01))
  :pattern ((inv@323@01 n@322@01))
  :pattern ((img@324@01 n@322@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@324@01 r) (Set_in (inv@323@01 r) g@230@01)) (= (inv@323@01 r) r))
  :pattern ((inv@323@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@323@01 r) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@325@01  $FVF<l>) r) r))
  :pattern ((inv@323@01 r))
  :qid |quant-u-7347|)))
(push) ; 11
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r) (= r (inv@323@01 r)))
    (>
      (+
        (ite
          (and
            (img@239@01 r)
            (and
              (Set_in (inv@238@01 r) g@230@01)
              (not (= (inv@238@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7348|))))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(declare-const sm@326@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)))
    (=>
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>))))
  :qid |qp.fvfDomDef325|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef324|)))
(declare-const n@327@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@327@01 g@230@01))
(pop) ; 11
(declare-fun inv@328@01 ($Ref) $Ref)
(declare-fun img@329@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@330@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef328|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@327@01 $Ref) (n2@327@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@327@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@330@01  $FVF<r>) n1@327@01) n1@327@01))
      (and
        (Set_in n2@327@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@330@01  $FVF<r>) n2@327@01) n2@327@01))
      (= n1@327@01 n2@327@01))
    (= n1@327@01 n2@327@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@327@01 $Ref)) (!
  (=>
    (Set_in n@327@01 g@230@01)
    (and (= (inv@328@01 n@327@01) n@327@01) (img@329@01 n@327@01)))
  :pattern ((Set_in n@327@01 g@230@01))
  :pattern ((inv@328@01 n@327@01))
  :pattern ((img@329@01 n@327@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@329@01 r) (Set_in (inv@328@01 r) g@230@01)) (= (inv@328@01 r) r))
  :pattern ((inv@328@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@328@01 r) g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@330@01  $FVF<r>) r) r))
  :pattern ((inv@328@01 r))
  :qid |quant-u-7350|)))
(push) ; 11
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r) (= r (inv@328@01 r)))
    (>
      (+
        (ite
          (and
            (img@243@01 r)
            (and
              (Set_in (inv@242@01 r) g@230@01)
              (not (= (inv@242@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7351|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const sm@331@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)))
    (=>
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>))))
  :qid |qp.fvfDomDef332|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef329|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef330|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef331|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef319|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef320|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef321|)))
(assert (forall ((n@322@01 $Ref)) (!
  (=>
    (Set_in n@322@01 g@230@01)
    (and (= (inv@323@01 n@322@01) n@322@01) (img@324@01 n@322@01)))
  :pattern ((Set_in n@322@01 g@230@01))
  :pattern ((inv@323@01 n@322@01))
  :pattern ((img@324@01 n@322@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@324@01 r) (Set_in (inv@323@01 r) g@230@01)) (= (inv@323@01 r) r))
  :pattern ((inv@323@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)))
    (=>
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>))))
  :qid |qp.fvfDomDef325|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef324|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef328|)))
(assert (forall ((n@327@01 $Ref)) (!
  (=>
    (Set_in n@327@01 g@230@01)
    (and (= (inv@328@01 n@327@01) n@327@01) (img@329@01 n@327@01)))
  :pattern ((Set_in n@327@01 g@230@01))
  :pattern ((inv@328@01 n@327@01))
  :pattern ((img@329@01 n@327@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@329@01 r) (Set_in (inv@328@01 r) g@230@01)) (= (inv@328@01 r) r))
  :pattern ((inv@328@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)))
    (=>
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>))))
  :qid |qp.fvfDomDef332|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef329|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef330|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef331|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@323@01 r) g@230@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@325@01  $FVF<l>) r) r))
    :pattern ((inv@323@01 r))
    :qid |quant-u-7347|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@328@01 r) g@230@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@330@01  $FVF<r>) r) r))
    :pattern ((inv@328@01 r))
    :qid |quant-u-7350|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01)))
(push) ; 10
; [then-branch: 73 | !(exists_path[Bool]($$((sm@326@01, sm@331@01), g@230@01), v1@302@01, x@231@01)) | live]
; [else-branch: 73 | exists_path[Bool]($$((sm@326@01, sm@331@01), g@230@01), v1@302@01, x@231@01) | live]
(push) ; 11
; [then-branch: 73 | !(exists_path[Bool]($$((sm@326@01, sm@331@01), g@230@01), v1@302@01, x@231@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 73 | exists_path[Bool]($$((sm@326@01, sm@331@01), g@230@01), v1@302@01, x@231@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01))
; [eval] exists_path(old($$(g)), old(x.l), v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 12
(declare-const n@332@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@332@01 g@230@01))
(pop) ; 13
(declare-fun inv@333@01 ($Ref) $Ref)
(declare-fun img@334@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@335@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef334|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef335|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@332@01 $Ref) (n2@332@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@332@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@335@01  $FVF<l>) n1@332@01) n1@332@01))
      (and
        (Set_in n2@332@01 g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@335@01  $FVF<l>) n2@332@01) n2@332@01))
      (= n1@332@01 n2@332@01))
    (= n1@332@01 n2@332@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@332@01 $Ref)) (!
  (=>
    (Set_in n@332@01 g@230@01)
    (and (= (inv@333@01 n@332@01) n@332@01) (img@334@01 n@332@01)))
  :pattern ((Set_in n@332@01 g@230@01))
  :pattern ((inv@333@01 n@332@01))
  :pattern ((img@334@01 n@332@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@334@01 r) (Set_in (inv@333@01 r) g@230@01)) (= (inv@333@01 r) r))
  :pattern ((inv@333@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@333@01 r) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@335@01  $FVF<l>) r) r))
  :pattern ((inv@333@01 r))
  :qid |quant-u-7353|)))
(push) ; 13
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r) (= r (inv@333@01 r)))
    (>
      (+
        (ite
          (and
            (img@239@01 r)
            (and
              (Set_in (inv@238@01 r) g@230@01)
              (not (= (inv@238@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7354|))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(declare-const sm@336@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)))
    (=>
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>))))
  :qid |qp.fvfDomDef339|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef338|)))
(declare-const n@337@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@337@01 g@230@01))
(pop) ; 13
(declare-fun inv@338@01 ($Ref) $Ref)
(declare-fun img@339@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@340@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef342|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@337@01 $Ref) (n2@337@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@337@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@340@01  $FVF<r>) n1@337@01) n1@337@01))
      (and
        (Set_in n2@337@01 g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@340@01  $FVF<r>) n2@337@01) n2@337@01))
      (= n1@337@01 n2@337@01))
    (= n1@337@01 n2@337@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@337@01 $Ref)) (!
  (=>
    (Set_in n@337@01 g@230@01)
    (and (= (inv@338@01 n@337@01) n@337@01) (img@339@01 n@337@01)))
  :pattern ((Set_in n@337@01 g@230@01))
  :pattern ((inv@338@01 n@337@01))
  :pattern ((img@339@01 n@337@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@339@01 r) (Set_in (inv@338@01 r) g@230@01)) (= (inv@338@01 r) r))
  :pattern ((inv@338@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@338@01 r) g@230@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@340@01  $FVF<r>) r) r))
  :pattern ((inv@338@01 r))
  :qid |quant-u-7356|)))
(push) ; 13
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r) (= r (inv@338@01 r)))
    (>
      (+
        (ite
          (and
            (img@243@01 r)
            (and
              (Set_in (inv@242@01 r) g@230@01)
              (not (= (inv@242@01 r) x@231@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@231@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7357|))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(declare-const sm@341@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)))
    (=>
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>))))
  :qid |qp.fvfDomDef346|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef344|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef345|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@336@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@341@01  $FVF<r>))) g@230@01))
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef334|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef335|)))
(assert (forall ((n@332@01 $Ref)) (!
  (=>
    (Set_in n@332@01 g@230@01)
    (and (= (inv@333@01 n@332@01) n@332@01) (img@334@01 n@332@01)))
  :pattern ((Set_in n@332@01 g@230@01))
  :pattern ((inv@333@01 n@332@01))
  :pattern ((img@334@01 n@332@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@334@01 r) (Set_in (inv@333@01 r) g@230@01)) (= (inv@333@01 r) r))
  :pattern ((inv@333@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)))
    (=>
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>))))
  :qid |qp.fvfDomDef339|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef338|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef342|)))
(assert (forall ((n@337@01 $Ref)) (!
  (=>
    (Set_in n@337@01 g@230@01)
    (and (= (inv@338@01 n@337@01) n@337@01) (img@339@01 n@337@01)))
  :pattern ((Set_in n@337@01 g@230@01))
  :pattern ((inv@338@01 n@337@01))
  :pattern ((img@339@01 n@337@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@339@01 r) (Set_in (inv@338@01 r) g@230@01)) (= (inv@338@01 r) r))
  :pattern ((inv@338@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)))
    (=>
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>))))
  :qid |qp.fvfDomDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef344|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef345|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@333@01 r) g@230@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@335@01  $FVF<l>) r) r))
    :pattern ((inv@333@01 r))
    :qid |quant-u-7353|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@338@01 r) g@230@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@340@01  $FVF<r>) r) r))
    :pattern ((inv@338@01 r))
    :qid |quant-u-7356|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@336@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@341@01  $FVF<r>))) g@230@01)))
; [eval] old(x.l)
(declare-const sm@342@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef348|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef349|)))
(declare-const pm@343@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@343@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resPrmSumDef350|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resTrgDef351|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) x@231@01) x@231@01))
(push) ; 12
(assert (not (< $Perm.No ($FVF.perm_l (as pm@343@01  $FPM) x@231@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef334|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef335|)))
(assert (forall ((n@332@01 $Ref)) (!
  (=>
    (Set_in n@332@01 g@230@01)
    (and (= (inv@333@01 n@332@01) n@332@01) (img@334@01 n@332@01)))
  :pattern ((Set_in n@332@01 g@230@01))
  :pattern ((inv@333@01 n@332@01))
  :pattern ((img@334@01 n@332@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@334@01 r) (Set_in (inv@333@01 r) g@230@01)) (= (inv@333@01 r) r))
  :pattern ((inv@333@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)))
    (=>
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>))))
  :qid |qp.fvfDomDef339|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef338|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef342|)))
(assert (forall ((n@337@01 $Ref)) (!
  (=>
    (Set_in n@337@01 g@230@01)
    (and (= (inv@338@01 n@337@01) n@337@01) (img@339@01 n@337@01)))
  :pattern ((Set_in n@337@01 g@230@01))
  :pattern ((inv@338@01 n@337@01))
  :pattern ((img@339@01 n@337@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@339@01 r) (Set_in (inv@338@01 r) g@230@01)) (= (inv@338@01 r) r))
  :pattern ((inv@338@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)))
    (=>
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>))))
  :qid |qp.fvfDomDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef344|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef348|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef349|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@343@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resPrmSumDef350|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resTrgDef351|)))
(assert (=>
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
  (and
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@333@01 r) g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@335@01  $FVF<l>) r) r))
      :pattern ((inv@333@01 r))
      :qid |quant-u-7353|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@338@01 r) g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@340@01  $FVF<r>) r) r))
      :pattern ((inv@338@01 r))
      :qid |quant-u-7356|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@336@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@341@01  $FVF<r>))) g@230@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) x@231@01) x@231@01))))
(assert (or
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef319|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef320|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef321|)))
(assert (forall ((n@322@01 $Ref)) (!
  (=>
    (Set_in n@322@01 g@230@01)
    (and (= (inv@323@01 n@322@01) n@322@01) (img@324@01 n@322@01)))
  :pattern ((Set_in n@322@01 g@230@01))
  :pattern ((inv@323@01 n@322@01))
  :pattern ((img@324@01 n@322@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@324@01 r) (Set_in (inv@323@01 r) g@230@01)) (= (inv@323@01 r) r))
  :pattern ((inv@323@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)))
    (=>
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>))))
  :qid |qp.fvfDomDef325|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef324|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef328|)))
(assert (forall ((n@327@01 $Ref)) (!
  (=>
    (Set_in n@327@01 g@230@01)
    (and (= (inv@328@01 n@327@01) n@327@01) (img@329@01 n@327@01)))
  :pattern ((Set_in n@327@01 g@230@01))
  :pattern ((inv@328@01 n@327@01))
  :pattern ((img@329@01 n@327@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@329@01 r) (Set_in (inv@328@01 r) g@230@01)) (= (inv@328@01 r) r))
  :pattern ((inv@328@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)))
    (=>
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>))))
  :qid |qp.fvfDomDef332|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef329|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef330|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef331|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef334|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef335|)))
(assert (forall ((n@332@01 $Ref)) (!
  (=>
    (Set_in n@332@01 g@230@01)
    (and (= (inv@333@01 n@332@01) n@332@01) (img@334@01 n@332@01)))
  :pattern ((Set_in n@332@01 g@230@01))
  :pattern ((inv@333@01 n@332@01))
  :pattern ((img@334@01 n@332@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@334@01 r) (Set_in (inv@333@01 r) g@230@01)) (= (inv@333@01 r) r))
  :pattern ((inv@333@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)))
    (=>
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>))))
  :qid |qp.fvfDomDef339|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef338|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef342|)))
(assert (forall ((n@337@01 $Ref)) (!
  (=>
    (Set_in n@337@01 g@230@01)
    (and (= (inv@338@01 n@337@01) n@337@01) (img@339@01 n@337@01)))
  :pattern ((Set_in n@337@01 g@230@01))
  :pattern ((inv@338@01 n@337@01))
  :pattern ((img@339@01 n@337@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@339@01 r) (Set_in (inv@338@01 r) g@230@01)) (= (inv@338@01 r) r))
  :pattern ((inv@338@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)))
    (=>
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>))))
  :qid |qp.fvfDomDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef344|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef348|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef349|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@343@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resPrmSumDef350|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resTrgDef351|)))
(assert (=>
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
  (and
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@323@01 r) g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@325@01  $FVF<l>) r) r))
      :pattern ((inv@323@01 r))
      :qid |quant-u-7347|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@328@01 r) g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@330@01  $FVF<r>) r) r))
      :pattern ((inv@328@01 r))
      :qid |quant-u-7350|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01)
    (=>
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
      (and
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@333@01 r) g@230@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@335@01  $FVF<l>) r) r))
          :pattern ((inv@333@01 r))
          :qid |quant-u-7353|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@338@01 r) g@230@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@340@01  $FVF<r>) r) r))
          :pattern ((inv@338@01 r))
          :qid |quant-u-7356|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@336@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@341@01  $FVF<r>))) g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) x@231@01) x@231@01)))
    (or
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01))))))
(assert (or
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 71 | v1@302@01 == v2@303@01]
(assert (= v1@302@01 v2@303@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@304@01 $Ref)) (!
  (=>
    (Set_in n@304@01 g@230@01)
    (and (= (inv@305@01 n@304@01) n@304@01) (img@306@01 n@304@01)))
  :pattern ((Set_in n@304@01 g@230@01))
  :pattern ((inv@305@01 n@304@01))
  :pattern ((img@306@01 n@304@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@306@01 r) (Set_in (inv@305@01 r) g@230@01)) (= (inv@305@01 r) r))
  :pattern ((inv@305@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>)))
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r)))
    (=>
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r))
      (Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>))))
  :qid |qp.fvfDomDef300|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@307@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef297|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@307@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef298|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef299|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@311@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef301|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@311@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef303|)))
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g@230@01)
    (and (= (inv@309@01 n@308@01) n@308@01) (img@310@01 n@308@01)))
  :pattern ((Set_in n@308@01 g@230@01))
  :pattern ((inv@309@01 n@308@01))
  :pattern ((img@310@01 n@308@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@310@01 r) (Set_in (inv@309@01 r) g@230@01)) (= (inv@309@01 r) r))
  :pattern ((inv@309@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>)))
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r)))
    (=>
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r))
      (Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>))))
  :qid |qp.fvfDomDef307|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@312@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@312@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef305|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef306|)))
(assert (forall ((n@313@01 $Ref)) (!
  (=>
    (Set_in n@313@01 g@230@01)
    (and (= (inv@314@01 n@313@01) n@313@01) (img@315@01 n@313@01)))
  :pattern ((Set_in n@313@01 g@230@01))
  :pattern ((inv@314@01 n@313@01))
  :pattern ((img@315@01 n@313@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@315@01 r) (Set_in (inv@314@01 r) g@230@01)) (= (inv@314@01 r) r))
  :pattern ((inv@314@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>)))
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r)))
    (=>
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r))
      (Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>))))
  :qid |qp.fvfDomDef311|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@316@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@316@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef309|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef310|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@320@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef312|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@320@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef313|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef314|)))
(assert (forall ((n@317@01 $Ref)) (!
  (=>
    (Set_in n@317@01 g@230@01)
    (and (= (inv@318@01 n@317@01) n@317@01) (img@319@01 n@317@01)))
  :pattern ((Set_in n@317@01 g@230@01))
  :pattern ((inv@318@01 n@317@01))
  :pattern ((img@319@01 n@317@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@319@01 r) (Set_in (inv@318@01 r) g@230@01)) (= (inv@318@01 r) r))
  :pattern ((inv@318@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>)))
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r)))
    (=>
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r))
      (Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>))))
  :qid |qp.fvfDomDef318|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@321@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef315|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@321@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef317|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef319|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef320|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef321|)))
(assert (forall ((n@322@01 $Ref)) (!
  (=>
    (Set_in n@322@01 g@230@01)
    (and (= (inv@323@01 n@322@01) n@322@01) (img@324@01 n@322@01)))
  :pattern ((Set_in n@322@01 g@230@01))
  :pattern ((inv@323@01 n@322@01))
  :pattern ((img@324@01 n@322@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@324@01 r) (Set_in (inv@323@01 r) g@230@01)) (= (inv@323@01 r) r))
  :pattern ((inv@323@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)))
    (=>
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>))))
  :qid |qp.fvfDomDef325|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef324|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef328|)))
(assert (forall ((n@327@01 $Ref)) (!
  (=>
    (Set_in n@327@01 g@230@01)
    (and (= (inv@328@01 n@327@01) n@327@01) (img@329@01 n@327@01)))
  :pattern ((Set_in n@327@01 g@230@01))
  :pattern ((inv@328@01 n@327@01))
  :pattern ((img@329@01 n@327@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@329@01 r) (Set_in (inv@328@01 r) g@230@01)) (= (inv@328@01 r) r))
  :pattern ((inv@328@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)))
    (=>
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>))))
  :qid |qp.fvfDomDef332|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef329|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef330|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef331|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef334|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef335|)))
(assert (forall ((n@332@01 $Ref)) (!
  (=>
    (Set_in n@332@01 g@230@01)
    (and (= (inv@333@01 n@332@01) n@332@01) (img@334@01 n@332@01)))
  :pattern ((Set_in n@332@01 g@230@01))
  :pattern ((inv@333@01 n@332@01))
  :pattern ((img@334@01 n@332@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@334@01 r) (Set_in (inv@333@01 r) g@230@01)) (= (inv@333@01 r) r))
  :pattern ((inv@333@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)))
    (=>
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>))))
  :qid |qp.fvfDomDef339|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef338|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef342|)))
(assert (forall ((n@337@01 $Ref)) (!
  (=>
    (Set_in n@337@01 g@230@01)
    (and (= (inv@338@01 n@337@01) n@337@01) (img@339@01 n@337@01)))
  :pattern ((Set_in n@337@01 g@230@01))
  :pattern ((inv@338@01 n@337@01))
  :pattern ((img@339@01 n@337@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@339@01 r) (Set_in (inv@338@01 r) g@230@01)) (= (inv@338@01 r) r))
  :pattern ((inv@338@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)))
    (=>
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>))))
  :qid |qp.fvfDomDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef344|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef348|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef349|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@343@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resPrmSumDef350|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resTrgDef351|)))
(assert (=>
  (not (= v1@302@01 v2@303@01))
  (and
    (not (= v1@302@01 v2@303@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@305@01 r) g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
      :pattern ((inv@305@01 r))
      :qid |quant-u-7335|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@309@01 r) g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@311@01  $FVF<r>) r) r))
      :pattern ((inv@309@01 r))
      :qid |quant-u-7338|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@307@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@312@01  $FVF<r>))) g@230@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@314@01 r) g@230@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
      :pattern ((inv@314@01 r))
      :qid |quant-u-7341|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@318@01 r) g@230@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@320@01  $FVF<r>) r) r))
      :pattern ((inv@318@01 r))
      :qid |quant-u-7344|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01)
    (=>
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
      (and
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@323@01 r) g@230@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@325@01  $FVF<l>) r) r))
          :pattern ((inv@323@01 r))
          :qid |quant-u-7347|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@328@01 r) g@230@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@330@01  $FVF<r>) r) r))
          :pattern ((inv@328@01 r))
          :qid |quant-u-7350|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01)
        (=>
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@333@01 r) g@230@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@335@01  $FVF<l>) r) r))
              :pattern ((inv@333@01 r))
              :qid |quant-u-7353|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@338@01 r) g@230@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@340@01  $FVF<r>) r) r))
              :pattern ((inv@338@01 r))
              :qid |quant-u-7356|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@336@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@341@01  $FVF<r>))) g@230@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) x@231@01) x@231@01)))
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)))))
    (or
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01))))))
; Joined path conditions
(assert (or (= v1@302@01 v2@303@01) (not (= v1@302@01 v2@303@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@304@01 $Ref)) (!
  (=>
    (Set_in n@304@01 g@230@01)
    (and (= (inv@305@01 n@304@01) n@304@01) (img@306@01 n@304@01)))
  :pattern ((Set_in n@304@01 g@230@01))
  :pattern ((inv@305@01 n@304@01))
  :pattern ((img@306@01 n@304@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@306@01 r) (Set_in (inv@305@01 r) g@230@01)) (= (inv@305@01 r) r))
  :pattern ((inv@305@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>)))
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r)))
    (=>
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r))
      (Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>))))
  :qid |qp.fvfDomDef300|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@307@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef297|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@307@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef298|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef299|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@311@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef301|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@311@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef303|)))
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g@230@01)
    (and (= (inv@309@01 n@308@01) n@308@01) (img@310@01 n@308@01)))
  :pattern ((Set_in n@308@01 g@230@01))
  :pattern ((inv@309@01 n@308@01))
  :pattern ((img@310@01 n@308@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@310@01 r) (Set_in (inv@309@01 r) g@230@01)) (= (inv@309@01 r) r))
  :pattern ((inv@309@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>)))
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r)))
    (=>
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r))
      (Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>))))
  :qid |qp.fvfDomDef307|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@312@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@312@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef305|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef306|)))
(assert (forall ((n@313@01 $Ref)) (!
  (=>
    (Set_in n@313@01 g@230@01)
    (and (= (inv@314@01 n@313@01) n@313@01) (img@315@01 n@313@01)))
  :pattern ((Set_in n@313@01 g@230@01))
  :pattern ((inv@314@01 n@313@01))
  :pattern ((img@315@01 n@313@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@315@01 r) (Set_in (inv@314@01 r) g@230@01)) (= (inv@314@01 r) r))
  :pattern ((inv@314@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>)))
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r)))
    (=>
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r))
      (Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>))))
  :qid |qp.fvfDomDef311|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@316@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@316@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef309|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef310|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@320@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef312|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@320@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef313|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef314|)))
(assert (forall ((n@317@01 $Ref)) (!
  (=>
    (Set_in n@317@01 g@230@01)
    (and (= (inv@318@01 n@317@01) n@317@01) (img@319@01 n@317@01)))
  :pattern ((Set_in n@317@01 g@230@01))
  :pattern ((inv@318@01 n@317@01))
  :pattern ((img@319@01 n@317@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@319@01 r) (Set_in (inv@318@01 r) g@230@01)) (= (inv@318@01 r) r))
  :pattern ((inv@318@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>)))
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r)))
    (=>
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r))
      (Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>))))
  :qid |qp.fvfDomDef318|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@321@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef315|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@321@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef317|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef319|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef320|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef321|)))
(assert (forall ((n@322@01 $Ref)) (!
  (=>
    (Set_in n@322@01 g@230@01)
    (and (= (inv@323@01 n@322@01) n@322@01) (img@324@01 n@322@01)))
  :pattern ((Set_in n@322@01 g@230@01))
  :pattern ((inv@323@01 n@322@01))
  :pattern ((img@324@01 n@322@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@324@01 r) (Set_in (inv@323@01 r) g@230@01)) (= (inv@323@01 r) r))
  :pattern ((inv@323@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)))
    (=>
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>))))
  :qid |qp.fvfDomDef325|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef324|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef328|)))
(assert (forall ((n@327@01 $Ref)) (!
  (=>
    (Set_in n@327@01 g@230@01)
    (and (= (inv@328@01 n@327@01) n@327@01) (img@329@01 n@327@01)))
  :pattern ((Set_in n@327@01 g@230@01))
  :pattern ((inv@328@01 n@327@01))
  :pattern ((img@329@01 n@327@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@329@01 r) (Set_in (inv@328@01 r) g@230@01)) (= (inv@328@01 r) r))
  :pattern ((inv@328@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)))
    (=>
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>))))
  :qid |qp.fvfDomDef332|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef329|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef330|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef331|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef334|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef335|)))
(assert (forall ((n@332@01 $Ref)) (!
  (=>
    (Set_in n@332@01 g@230@01)
    (and (= (inv@333@01 n@332@01) n@332@01) (img@334@01 n@332@01)))
  :pattern ((Set_in n@332@01 g@230@01))
  :pattern ((inv@333@01 n@332@01))
  :pattern ((img@334@01 n@332@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@334@01 r) (Set_in (inv@333@01 r) g@230@01)) (= (inv@333@01 r) r))
  :pattern ((inv@333@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)))
    (=>
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>))))
  :qid |qp.fvfDomDef339|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef338|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef342|)))
(assert (forall ((n@337@01 $Ref)) (!
  (=>
    (Set_in n@337@01 g@230@01)
    (and (= (inv@338@01 n@337@01) n@337@01) (img@339@01 n@337@01)))
  :pattern ((Set_in n@337@01 g@230@01))
  :pattern ((inv@338@01 n@337@01))
  :pattern ((img@339@01 n@337@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@339@01 r) (Set_in (inv@338@01 r) g@230@01)) (= (inv@338@01 r) r))
  :pattern ((inv@338@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)))
    (=>
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>))))
  :qid |qp.fvfDomDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef344|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef348|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef349|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@343@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resPrmSumDef350|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resTrgDef351|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@302@01 $Ref) (v2@303@01 $Ref)) (!
  (and
    (=>
      (not (= v1@302@01 v2@303@01))
      (and
        (not (= v1@302@01 v2@303@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@305@01 r) g@230@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
          :pattern ((inv@305@01 r))
          :qid |quant-u-7335|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@309@01 r) g@230@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@311@01  $FVF<r>) r) r))
          :pattern ((inv@309@01 r))
          :qid |quant-u-7338|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@307@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@312@01  $FVF<r>))) g@230@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@314@01 r) g@230@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
          :pattern ((inv@314@01 r))
          :qid |quant-u-7341|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@318@01 r) g@230@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@320@01  $FVF<r>) r) r))
          :pattern ((inv@318@01 r))
          :qid |quant-u-7344|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01)
        (=>
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@323@01 r) g@230@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@325@01  $FVF<l>) r) r))
              :pattern ((inv@323@01 r))
              :qid |quant-u-7347|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@328@01 r) g@230@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@330@01  $FVF<r>) r) r))
              :pattern ((inv@328@01 r))
              :qid |quant-u-7350|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01)
            (=>
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
              (and
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@333@01 r) g@230@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@335@01  $FVF<l>) r) r))
                  :pattern ((inv@333@01 r))
                  :qid |quant-u-7353|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@338@01 r) g@230@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@340@01  $FVF<r>) r) r))
                  :pattern ((inv@338@01 r))
                  :qid |quant-u-7356|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@336@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@341@01  $FVF<r>))) g@230@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) x@231@01) x@231@01)))
            (or
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)))))
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)))))
    (or (= v1@302@01 v2@303@01) (not (= v1@302@01 v2@303@01))))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@307@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@312@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@286@34@291@10-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 70 | Lookup(l, sm@240@01, x@231@01) == Null]
(assert (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@304@01 $Ref)) (!
  (=>
    (Set_in n@304@01 g@230@01)
    (and (= (inv@305@01 n@304@01) n@304@01) (img@306@01 n@304@01)))
  :pattern ((Set_in n@304@01 g@230@01))
  :pattern ((inv@305@01 n@304@01))
  :pattern ((img@306@01 n@304@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@306@01 r) (Set_in (inv@305@01 r) g@230@01)) (= (inv@305@01 r) r))
  :pattern ((inv@305@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>)))
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r)))
    (=>
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r))
      (Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@307@01  $FVF<l>))))
  :qid |qp.fvfDomDef300|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@307@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@248@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@248@01  $FVF<l>) r))
  :qid |qp.fvfValDef297|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@305@01 r) g@230@01) (img@306@01 r))
      (and
        (img@254@01 r)
        (and (Set_in (inv@253@01 r) g@230@01) (not (= (inv@253@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@307@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r))
  :qid |qp.fvfValDef298|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@248@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@307@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef299|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@311@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef301|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@311@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@311@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef303|)))
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g@230@01)
    (and (= (inv@309@01 n@308@01) n@308@01) (img@310@01 n@308@01)))
  :pattern ((Set_in n@308@01 g@230@01))
  :pattern ((inv@309@01 n@308@01))
  :pattern ((img@310@01 n@308@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@310@01 r) (Set_in (inv@309@01 r) g@230@01)) (= (inv@309@01 r) r))
  :pattern ((inv@309@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>)))
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r)))
    (=>
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r))
      (Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@312@01  $FVF<r>))))
  :qid |qp.fvfDomDef307|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r))
      (and
        (img@258@01 r)
        (and (Set_in (inv@257@01 r) g@230@01) (not (= (inv@257@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@312@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@309@01 r) g@230@01) (img@310@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@312@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@250@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@250@01  $FVF<r>) r))
  :qid |qp.fvfValDef305|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@247@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@250@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@312@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef306|)))
(assert (forall ((n@313@01 $Ref)) (!
  (=>
    (Set_in n@313@01 g@230@01)
    (and (= (inv@314@01 n@313@01) n@313@01) (img@315@01 n@313@01)))
  :pattern ((Set_in n@313@01 g@230@01))
  :pattern ((inv@314@01 n@313@01))
  :pattern ((img@315@01 n@313@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@315@01 r) (Set_in (inv@314@01 r) g@230@01)) (= (inv@314@01 r) r))
  :pattern ((inv@314@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>)))
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r)))
    (=>
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r))
      (Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@316@01  $FVF<l>))))
  :qid |qp.fvfDomDef311|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@316@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@314@01 r) g@230@01) (img@315@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@316@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef309|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@316@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef310|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@320@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef312|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@320@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef313|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@320@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef314|)))
(assert (forall ((n@317@01 $Ref)) (!
  (=>
    (Set_in n@317@01 g@230@01)
    (and (= (inv@318@01 n@317@01) n@317@01) (img@319@01 n@317@01)))
  :pattern ((Set_in n@317@01 g@230@01))
  :pattern ((inv@318@01 n@317@01))
  :pattern ((img@319@01 n@317@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@319@01 r) (Set_in (inv@318@01 r) g@230@01)) (= (inv@318@01 r) r))
  :pattern ((inv@318@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>)))
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r)))
    (=>
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r))
      (Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@321@01  $FVF<r>))))
  :qid |qp.fvfDomDef318|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@321@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef315|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@318@01 r) g@230@01) (img@319@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@321@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@321@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef317|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef319|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@325@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef320|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@325@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef321|)))
(assert (forall ((n@322@01 $Ref)) (!
  (=>
    (Set_in n@322@01 g@230@01)
    (and (= (inv@323@01 n@322@01) n@322@01) (img@324@01 n@322@01)))
  :pattern ((Set_in n@322@01 g@230@01))
  :pattern ((inv@323@01 n@322@01))
  :pattern ((img@324@01 n@322@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@324@01 r) (Set_in (inv@323@01 r) g@230@01)) (= (inv@323@01 r) r))
  :pattern ((inv@323@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)))
    (=>
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@326@01  $FVF<l>))))
  :qid |qp.fvfDomDef325|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@323@01 r) g@230@01) (img@324@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@326@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@326@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef324|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@330@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@330@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef328|)))
(assert (forall ((n@327@01 $Ref)) (!
  (=>
    (Set_in n@327@01 g@230@01)
    (and (= (inv@328@01 n@327@01) n@327@01) (img@329@01 n@327@01)))
  :pattern ((Set_in n@327@01 g@230@01))
  :pattern ((inv@328@01 n@327@01))
  :pattern ((img@329@01 n@327@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@329@01 r) (Set_in (inv@328@01 r) g@230@01)) (= (inv@328@01 r) r))
  :pattern ((inv@328@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)))
    (=>
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@331@01  $FVF<r>))))
  :qid |qp.fvfDomDef332|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef329|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@328@01 r) g@230@01) (img@329@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@331@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef330|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@331@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef331|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@335@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef334|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@335@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef335|)))
(assert (forall ((n@332@01 $Ref)) (!
  (=>
    (Set_in n@332@01 g@230@01)
    (and (= (inv@333@01 n@332@01) n@332@01) (img@334@01 n@332@01)))
  :pattern ((Set_in n@332@01 g@230@01))
  :pattern ((inv@333@01 n@332@01))
  :pattern ((img@334@01 n@332@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@334@01 r) (Set_in (inv@333@01 r) g@230@01)) (= (inv@333@01 r) r))
  :pattern ((inv@333@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)))
    (=>
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@336@01  $FVF<l>))))
  :qid |qp.fvfDomDef339|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@333@01 r) g@230@01) (img@334@01 r))
      (and
        (img@239@01 r)
        (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01)))))
    (=
      ($FVF.lookup_l (as sm@336@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@336@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef338|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@243@01 r)
      (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01))))
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_r (as sm@340@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@340@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef342|)))
(assert (forall ((n@337@01 $Ref)) (!
  (=>
    (Set_in n@337@01 g@230@01)
    (and (= (inv@338@01 n@337@01) n@337@01) (img@339@01 n@337@01)))
  :pattern ((Set_in n@337@01 g@230@01))
  :pattern ((inv@338@01 n@337@01))
  :pattern ((img@339@01 n@337@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@339@01 r) (Set_in (inv@338@01 r) g@230@01)) (= (inv@338@01 r) r))
  :pattern ((inv@338@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)))
    (=>
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@341@01  $FVF<r>))))
  :qid |qp.fvfDomDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r))
      (and
        (img@243@01 r)
        (and (Set_in (inv@242@01 r) g@230@01) (not (= (inv@242@01 r) x@231@01)))))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r))
  :qid |qp.fvfValDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@338@01 r) g@230@01) (img@339@01 r)) (= r x@231@01))
    (=
      ($FVF.lookup_r (as sm@341@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@235@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@235@01  $FVF<r>) r))
  :qid |qp.fvfValDef344|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@235@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@341@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@231@01)
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@233@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@233@01  $FVF<l>) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and (Set_in (inv@238@01 r) g@230@01) (not (= (inv@238@01 r) x@231@01))))
    (=
      ($FVF.lookup_l (as sm@342@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r))
  :qid |qp.fvfValDef348|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@342@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef349|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@343@01  $FPM) r)
    (+
      (ite (= r x@231@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@239@01 r)
          (and
            (Set_in (inv@238@01 r) g@230@01)
            (not (= (inv@238@01 r) x@231@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resPrmSumDef350|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@233@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))) r) r))
  :pattern (($FVF.perm_l (as pm@343@01  $FPM) r))
  :qid |qp.resTrgDef351|)))
(assert (=>
  (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))
    (forall ((v1@302@01 $Ref) (v2@303@01 $Ref)) (!
      (and
        (=>
          (not (= v1@302@01 v2@303@01))
          (and
            (not (= v1@302@01 v2@303@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@305@01 r) g@230@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@255@01  $FVF<l>) r) r))
              :pattern ((inv@305@01 r))
              :qid |quant-u-7335|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@309@01 r) g@230@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@311@01  $FVF<r>) r) r))
              :pattern ((inv@309@01 r))
              :qid |quant-u-7338|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@307@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@312@01  $FVF<r>))) g@230@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@314@01 r) g@230@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@240@01  $FVF<l>) r) r))
              :pattern ((inv@314@01 r))
              :qid |quant-u-7341|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@318@01 r) g@230@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@320@01  $FVF<r>) r) r))
              :pattern ((inv@318@01 r))
              :qid |quant-u-7344|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01)
            (=>
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
              (and
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@323@01 r) g@230@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@325@01  $FVF<l>) r) r))
                  :pattern ((inv@323@01 r))
                  :qid |quant-u-7347|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@328@01 r) g@230@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@330@01  $FVF<r>) r) r))
                  :pattern ((inv@328@01 r))
                  :qid |quant-u-7350|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01)
                (=>
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
                  (and
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@333@01 r) g@230@01)
                        ($FVF.loc_l ($FVF.lookup_l (as sm@335@01  $FVF<l>) r) r))
                      :pattern ((inv@333@01 r))
                      :qid |quant-u-7353|))
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@338@01 r) g@230@01)
                        ($FVF.loc_r ($FVF.lookup_r (as sm@340@01  $FVF<r>) r) r))
                      :pattern ((inv@338@01 r))
                      :qid |quant-u-7356|))
                    ($$%precondition ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@336@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@341@01  $FVF<r>))) g@230@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@342@01  $FVF<l>) x@231@01) x@231@01)))
                (or
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
                  (not
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)))))
            (or
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)))))
        (or (= v1@302@01 v2@303@01) (not (= v1@302@01 v2@303@01))))
      :pattern ((exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@307@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@312@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@286@34@291@10-aux|)))))
; Joined path conditions
(assert (=>
  (not (= ($FVF.lookup_l (as sm@240@01  $FVF<l>) x@231@01) $Ref.null))
  (forall ((v1@302@01 $Ref) (v2@303@01 $Ref)) (!
    (=>
      (not (= v1@302@01 v2@303@01))
      (=
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@307@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@312@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
        (and
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@316@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@321@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01)
          (not
            (and
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@326@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@331@01  $FVF<r>))) g@230@01) v1@302@01 x@231@01)
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@336@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@341@01  $FVF<r>))) g@230@01) ($FVF.lookup_l (as sm@342@01  $FVF<l>) x@231@01) v2@303@01))))))
    :pattern ((exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@307@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@312@01  $FVF<r>))) g@230@01) v1@302@01 v2@303@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@286@34@291@10|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- unlink_right ----------
(declare-const g@344@01 Set<$Ref>)
(declare-const x@345@01 $Ref)
(declare-const g@346@01 Set<$Ref>)
(declare-const x@347@01 $Ref)
(push) ; 1
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 ($Snap.combine ($Snap.first $t@348@01) ($Snap.second $t@348@01))))
(assert (= ($Snap.first $t@348@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@347@01 g@346@01))
(assert (=
  ($Snap.second $t@348@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@348@01))
    ($Snap.second ($Snap.second $t@348@01)))))
(assert (= ($Snap.first ($Snap.second $t@348@01)) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@346@01)))
(assert (=
  ($Snap.second ($Snap.second $t@348@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@348@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@348@01))) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@348@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))
; [eval] (__right__() == __left__() ? write : 1 / 2)
; [eval] __right__() == __left__()
; [eval] __right__()
; [eval] __left__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (as __right__<__FieldEnum__>  __FieldEnum__)
    (as __left__<__FieldEnum__>  __FieldEnum__)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 74 | __right__[__FieldEnum__] == __left__[__FieldEnum__] | dead]
; [else-branch: 74 | __right__[__FieldEnum__] != __left__[__FieldEnum__] | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 74 | __right__[__FieldEnum__] != __left__[__FieldEnum__]]
(assert (not
  (=
    (as __right__<__FieldEnum__>  __FieldEnum__)
    (as __left__<__FieldEnum__>  __FieldEnum__))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (not
  (=
    (as __right__<__FieldEnum__>  __FieldEnum__)
    (as __left__<__FieldEnum__>  __FieldEnum__))))
(declare-const sm@349@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@349@01  $FVF<l>) x@347@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))
(assert (not (= x@347@01 $Ref.null)))
(declare-const sm@350@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@350@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@350@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef352|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@350@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef353|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@350@01  $FVF<l>) x@347@01) x@347@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))
; [eval] (__right__() == __right__() ? write : 1 / 2)
; [eval] __right__() == __right__()
; [eval] __right__()
; [eval] __right__()
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | True | live]
; [else-branch: 75 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 75 | True]
(pop) ; 3
(pop) ; 2
; Joined path conditions
(declare-const sm@351@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@351@01  $FVF<r>) x@347@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))
(declare-const sm@352@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@352@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@352@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef354|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@352@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef355|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@352@01  $FVF<r>) x@347@01) x@347@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))))
(declare-const n@353@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 76 | !(n@353@01 in g@346@01) | live]
; [else-branch: 76 | n@353@01 in g@346@01 | live]
(push) ; 4
; [then-branch: 76 | !(n@353@01 in g@346@01)]
(assert (not (Set_in n@353@01 g@346@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 76 | n@353@01 in g@346@01]
(assert (Set_in n@353@01 g@346@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@353@01 g@346@01) (not (Set_in n@353@01 g@346@01))))
(assert (and (Set_in n@353@01 g@346@01) (not (= n@353@01 x@347@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@354@01 ($Ref) $Ref)
(declare-fun img@355@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@353@01 $Ref)) (!
  (=>
    (and (Set_in n@353@01 g@346@01) (not (= n@353@01 x@347@01)))
    (or (Set_in n@353@01 g@346@01) (not (Set_in n@353@01 g@346@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) n@353@01) n@353@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@353@01 $Ref) (n2@353@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@353@01 g@346@01) (not (= n1@353@01 x@347@01)))
      (and (Set_in n2@353@01 g@346@01) (not (= n2@353@01 x@347@01)))
      (= n1@353@01 n2@353@01))
    (= n1@353@01 n2@353@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@353@01 $Ref)) (!
  (=>
    (and (Set_in n@353@01 g@346@01) (not (= n@353@01 x@347@01)))
    (and (= (inv@354@01 n@353@01) n@353@01) (img@355@01 n@353@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) n@353@01) n@353@01))
  :qid |quant-u-7359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (= (inv@354@01 r) r))
  :pattern ((inv@354@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@353@01 $Ref)) (!
  (=>
    (and (Set_in n@353@01 g@346@01) (not (= n@353@01 x@347@01)))
    (not (= n@353@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) n@353@01) n@353@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@356@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef356|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef357|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef358|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
  :pattern ((inv@354@01 r))
  :qid |quant-u-7360|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))))
(declare-const n$0@357@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0 != x
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 77 | !(n$0@357@01 in g@346@01) | live]
; [else-branch: 77 | n$0@357@01 in g@346@01 | live]
(push) ; 4
; [then-branch: 77 | !(n$0@357@01 in g@346@01)]
(assert (not (Set_in n$0@357@01 g@346@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 77 | n$0@357@01 in g@346@01]
(assert (Set_in n$0@357@01 g@346@01))
; [eval] n$0 != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$0@357@01 g@346@01) (not (Set_in n$0@357@01 g@346@01))))
(assert (and (Set_in n$0@357@01 g@346@01) (not (= n$0@357@01 x@347@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@358@01 ($Ref) $Ref)
(declare-fun img@359@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$0@357@01 $Ref)) (!
  (=>
    (and (Set_in n$0@357@01 g@346@01) (not (= n$0@357@01 x@347@01)))
    (or (Set_in n$0@357@01 g@346@01) (not (Set_in n$0@357@01 g@346@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) n$0@357@01) n$0@357@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$01@357@01 $Ref) (n$02@357@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$01@357@01 g@346@01) (not (= n$01@357@01 x@347@01)))
      (and (Set_in n$02@357@01 g@346@01) (not (= n$02@357@01 x@347@01)))
      (= n$01@357@01 n$02@357@01))
    (= n$01@357@01 n$02@357@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@357@01 $Ref)) (!
  (=>
    (and (Set_in n$0@357@01 g@346@01) (not (= n$0@357@01 x@347@01)))
    (and (= (inv@358@01 n$0@357@01) n$0@357@01) (img@359@01 n$0@357@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) n$0@357@01) n$0@357@01))
  :qid |quant-u-7362|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (= (inv@358@01 r) r))
  :pattern ((inv@358@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$0@357@01 $Ref)) (!
  (=>
    (and (Set_in n$0@357@01 g@346@01) (not (= n$0@357@01 x@347@01)))
    (not (= n$0@357@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) n$0@357@01) n$0@357@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@360@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) r) r))
  :pattern ((inv@358@01 r))
  :qid |quant-u-7363|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))
  $Snap.unit))
; [eval] (forall n$1: Ref :: { (n$1.l in g) } { (n$1 in g), n$1.l } (n$1 in g) && n$1.l != null ==> (n$1.l in g))
(declare-const n$1@361@01 $Ref)
(push) ; 2
; [eval] (n$1 in g) && n$1.l != null ==> (n$1.l in g)
; [eval] (n$1 in g) && n$1.l != null
; [eval] (n$1 in g)
(push) ; 3
; [then-branch: 78 | !(n$1@361@01 in g@346@01) | live]
; [else-branch: 78 | n$1@361@01 in g@346@01 | live]
(push) ; 4
; [then-branch: 78 | !(n$1@361@01 in g@346@01)]
(assert (not (Set_in n$1@361@01 g@346@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 78 | n$1@361@01 in g@346@01]
(assert (Set_in n$1@361@01 g@346@01))
; [eval] n$1.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
    :qid |qp.fvfValDef356|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
      (=
        ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
    :qid |qp.fvfValDef357|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef358|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) n$1@361@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@361@01 x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@355@01 n$1@361@01)
        (and
          (Set_in (inv@354@01 n$1@361@01) g@346@01)
          (not (= (inv@354@01 n$1@361@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef356|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef357|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef358|)))
(assert (=>
  (Set_in n$1@361@01 g@346@01)
  (and
    (Set_in n$1@361@01 g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) n$1@361@01))))
(assert (or (Set_in n$1@361@01 g@346@01) (not (Set_in n$1@361@01 g@346@01))))
(push) ; 3
; [then-branch: 79 | n$1@361@01 in g@346@01 && Lookup(l, sm@356@01, n$1@361@01) != Null | live]
; [else-branch: 79 | !(n$1@361@01 in g@346@01 && Lookup(l, sm@356@01, n$1@361@01) != Null) | live]
(push) ; 4
; [then-branch: 79 | n$1@361@01 in g@346@01 && Lookup(l, sm@356@01, n$1@361@01) != Null]
(assert (and
  (Set_in n$1@361@01 g@346@01)
  (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null))))
; [eval] (n$1.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
    :qid |qp.fvfValDef356|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
      (=
        ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
    :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
    :qid |qp.fvfValDef357|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef358|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) n$1@361@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$1@361@01 x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@355@01 n$1@361@01)
        (and
          (Set_in (inv@354@01 n$1@361@01) g@346@01)
          (not (= (inv@354@01 n$1@361@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 79 | !(n$1@361@01 in g@346@01 && Lookup(l, sm@356@01, n$1@361@01) != Null)]
(assert (not
  (and
    (Set_in n$1@361@01 g@346@01)
    (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef356|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef357|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef358|)))
(assert (=>
  (and
    (Set_in n$1@361@01 g@346@01)
    (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null)))
  (and
    (Set_in n$1@361@01 g@346@01)
    (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) n$1@361@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@361@01 g@346@01)
      (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null))))
  (and
    (Set_in n$1@361@01 g@346@01)
    (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef356|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@356@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef357|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@356@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef358|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$1@361@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@361@01 g@346@01)
      (and
        (Set_in n$1@361@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) n$1@361@01)))
    (or (Set_in n$1@361@01 g@346@01) (not (Set_in n$1@361@01 g@346@01)))
    (=>
      (and
        (Set_in n$1@361@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null)))
      (and
        (Set_in n$1@361@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) n$1@361@01)))
    (or
      (not
        (and
          (Set_in n$1@361@01 g@346@01)
          (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null))))
      (and
        (Set_in n$1@361@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) g@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@295@14@295@46-aux|)))
(assert (forall ((n$1@361@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@361@01 g@346@01)
      (and
        (Set_in n$1@361@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) n$1@361@01)))
    (or (Set_in n$1@361@01 g@346@01) (not (Set_in n$1@361@01 g@346@01)))
    (=>
      (and
        (Set_in n$1@361@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null)))
      (and
        (Set_in n$1@361@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) n$1@361@01)))
    (or
      (not
        (and
          (Set_in n$1@361@01 g@346@01)
          (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null))))
      (and
        (Set_in n$1@361@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null)))))
  :pattern ((Set_in n$1@361@01 g@346@01) ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) n$1@361@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@295@14@295@46-aux|)))
(assert (forall ((n$1@361@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@361@01 g@346@01)
      (not (= ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) g@346@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) g@346@01))
  :pattern ((Set_in n$1@361@01 g@346@01) ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n$1@361@01) n$1@361@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@295@14@295@46|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.r in g) } { (n$2 in g), n$2.r } (n$2 in g) && n$2.r != null ==> (n$2.r in g))
(declare-const n$2@362@01 $Ref)
(push) ; 2
; [eval] (n$2 in g) && n$2.r != null ==> (n$2.r in g)
; [eval] (n$2 in g) && n$2.r != null
; [eval] (n$2 in g)
(push) ; 3
; [then-branch: 80 | !(n$2@362@01 in g@346@01) | live]
; [else-branch: 80 | n$2@362@01 in g@346@01 | live]
(push) ; 4
; [then-branch: 80 | !(n$2@362@01 in g@346@01)]
(assert (not (Set_in n$2@362@01 g@346@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 80 | n$2@362@01 in g@346@01]
(assert (Set_in n$2@362@01 g@346@01))
; [eval] n$2.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
    :qid |qp.fvfValDef359|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
    :qid |qp.fvfValDef360|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef361|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) n$2@362@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@362@01 x@347@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@359@01 n$2@362@01)
        (and
          (Set_in (inv@358@01 n$2@362@01) g@346@01)
          (not (= (inv@358@01 n$2@362@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (=>
  (Set_in n$2@362@01 g@346@01)
  (and
    (Set_in n$2@362@01 g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) n$2@362@01))))
(assert (or (Set_in n$2@362@01 g@346@01) (not (Set_in n$2@362@01 g@346@01))))
(push) ; 3
; [then-branch: 81 | n$2@362@01 in g@346@01 && Lookup(r, sm@360@01, n$2@362@01) != Null | live]
; [else-branch: 81 | !(n$2@362@01 in g@346@01 && Lookup(r, sm@360@01, n$2@362@01) != Null) | live]
(push) ; 4
; [then-branch: 81 | n$2@362@01 in g@346@01 && Lookup(r, sm@360@01, n$2@362@01) != Null]
(assert (and
  (Set_in n$2@362@01 g@346@01)
  (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null))))
; [eval] (n$2.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
    :qid |qp.fvfValDef359|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
    :qid |qp.fvfValDef360|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef361|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) n$2@362@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@362@01 x@347@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@359@01 n$2@362@01)
        (and
          (Set_in (inv@358@01 n$2@362@01) g@346@01)
          (not (= (inv@358@01 n$2@362@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 81 | !(n$2@362@01 in g@346@01 && Lookup(r, sm@360@01, n$2@362@01) != Null)]
(assert (not
  (and
    (Set_in n$2@362@01 g@346@01)
    (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (=>
  (and
    (Set_in n$2@362@01 g@346@01)
    (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null)))
  (and
    (Set_in n$2@362@01 g@346@01)
    (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) n$2@362@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@362@01 g@346@01)
      (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null))))
  (and
    (Set_in n$2@362@01 g@346@01)
    (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@362@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@362@01 g@346@01)
      (and
        (Set_in n$2@362@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) n$2@362@01)))
    (or (Set_in n$2@362@01 g@346@01) (not (Set_in n$2@362@01 g@346@01)))
    (=>
      (and
        (Set_in n$2@362@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null)))
      (and
        (Set_in n$2@362@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) n$2@362@01)))
    (or
      (not
        (and
          (Set_in n$2@362@01 g@346@01)
          (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null))))
      (and
        (Set_in n$2@362@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) g@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@295@14@295@46-aux|)))
(assert (forall ((n$2@362@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@362@01 g@346@01)
      (and
        (Set_in n$2@362@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) n$2@362@01)))
    (or (Set_in n$2@362@01 g@346@01) (not (Set_in n$2@362@01 g@346@01)))
    (=>
      (and
        (Set_in n$2@362@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null)))
      (and
        (Set_in n$2@362@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) n$2@362@01)))
    (or
      (not
        (and
          (Set_in n$2@362@01 g@346@01)
          (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null))))
      (and
        (Set_in n$2@362@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null)))))
  :pattern ((Set_in n$2@362@01 g@346@01) ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) n$2@362@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@295@14@295@46-aux|)))
(assert (forall ((n$2@362@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@362@01 g@346@01)
      (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) g@346@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) g@346@01))
  :pattern ((Set_in n$2@362@01 g@346@01) ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) n$2@362@01) n$2@362@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@295@14@295@46|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@363@01 $Snap)
(assert (= $t@363@01 ($Snap.combine ($Snap.first $t@363@01) ($Snap.second $t@363@01))))
(assert (= ($Snap.first $t@363@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@363@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@363@01))
    ($Snap.second ($Snap.second $t@363@01)))))
(assert (= ($Snap.first ($Snap.second $t@363@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@363@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@363@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
; [eval] (__right__() == __left__() ? write : 1 / 2)
; [eval] __right__() == __left__()
; [eval] __right__()
; [eval] __left__()
(push) ; 3
; [then-branch: 82 | __right__[__FieldEnum__] == __left__[__FieldEnum__] | dead]
; [else-branch: 82 | __right__[__FieldEnum__] != __left__[__FieldEnum__] | live]
(push) ; 4
; [else-branch: 82 | __right__[__FieldEnum__] != __left__[__FieldEnum__]]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@364@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@364@01  $FVF<l>) x@347@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@363@01))))))
(declare-const sm@365@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@365@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@365@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef362|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
  :pattern (($FVF.lookup_l (as sm@365@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef363|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@365@01  $FVF<l>) x@347@01) x@347@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@363@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
; [eval] (__right__() == __right__() ? write : 1 / 2)
; [eval] __right__() == __right__()
; [eval] __right__()
; [eval] __right__()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | True | live]
; [else-branch: 83 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 83 | True]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(declare-const sm@366@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@366@01  $FVF<r>) x@347@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
(declare-const sm@367@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@367@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@367@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef364|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r)
  :pattern (($FVF.lookup_r (as sm@367@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef365|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@367@01  $FVF<r>) x@347@01) x@347@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
(declare-const n$3@368@01 $Ref)
(push) ; 3
; [eval] (n$3 in g) && n$3 != x
; [eval] (n$3 in g)
(push) ; 4
; [then-branch: 84 | !(n$3@368@01 in g@346@01) | live]
; [else-branch: 84 | n$3@368@01 in g@346@01 | live]
(push) ; 5
; [then-branch: 84 | !(n$3@368@01 in g@346@01)]
(assert (not (Set_in n$3@368@01 g@346@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 84 | n$3@368@01 in g@346@01]
(assert (Set_in n$3@368@01 g@346@01))
; [eval] n$3 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$3@368@01 g@346@01) (not (Set_in n$3@368@01 g@346@01))))
(assert (and (Set_in n$3@368@01 g@346@01) (not (= n$3@368@01 x@347@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@369@01 ($Ref) $Ref)
(declare-fun img@370@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$3@368@01 $Ref)) (!
  (=>
    (and (Set_in n$3@368@01 g@346@01) (not (= n$3@368@01 x@347@01)))
    (or (Set_in n$3@368@01 g@346@01) (not (Set_in n$3@368@01 g@346@01))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) n$3@368@01) n$3@368@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@368@01 $Ref) (n$32@368@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$31@368@01 g@346@01) (not (= n$31@368@01 x@347@01)))
      (and (Set_in n$32@368@01 g@346@01) (not (= n$32@368@01 x@347@01)))
      (= n$31@368@01 n$32@368@01))
    (= n$31@368@01 n$32@368@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@368@01 $Ref)) (!
  (=>
    (and (Set_in n$3@368@01 g@346@01) (not (= n$3@368@01 x@347@01)))
    (and (= (inv@369@01 n$3@368@01) n$3@368@01) (img@370@01 n$3@368@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) n$3@368@01) n$3@368@01))
  :qid |quant-u-7365|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@370@01 r)
      (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01))))
    (= (inv@369@01 r) r))
  :pattern ((inv@369@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@368@01 $Ref)) (!
  (=>
    (and (Set_in n$3@368@01 g@346@01) (not (= n$3@368@01 x@347@01)))
    (not (= n$3@368@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) n$3@368@01) n$3@368@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@371@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef366|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@370@01 r)
      (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef367|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef368|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
  :pattern ((inv@369@01 r))
  :qid |quant-u-7366|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
(declare-const n$4@372@01 $Ref)
(push) ; 3
; [eval] (n$4 in g) && n$4 != x
; [eval] (n$4 in g)
(push) ; 4
; [then-branch: 85 | !(n$4@372@01 in g@346@01) | live]
; [else-branch: 85 | n$4@372@01 in g@346@01 | live]
(push) ; 5
; [then-branch: 85 | !(n$4@372@01 in g@346@01)]
(assert (not (Set_in n$4@372@01 g@346@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 85 | n$4@372@01 in g@346@01]
(assert (Set_in n$4@372@01 g@346@01))
; [eval] n$4 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$4@372@01 g@346@01) (not (Set_in n$4@372@01 g@346@01))))
(assert (and (Set_in n$4@372@01 g@346@01) (not (= n$4@372@01 x@347@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@373@01 ($Ref) $Ref)
(declare-fun img@374@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$4@372@01 $Ref)) (!
  (=>
    (and (Set_in n$4@372@01 g@346@01) (not (= n$4@372@01 x@347@01)))
    (or (Set_in n$4@372@01 g@346@01) (not (Set_in n$4@372@01 g@346@01))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) n$4@372@01) n$4@372@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@372@01 $Ref) (n$42@372@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$41@372@01 g@346@01) (not (= n$41@372@01 x@347@01)))
      (and (Set_in n$42@372@01 g@346@01) (not (= n$42@372@01 x@347@01)))
      (= n$41@372@01 n$42@372@01))
    (= n$41@372@01 n$42@372@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@372@01 $Ref)) (!
  (=>
    (and (Set_in n$4@372@01 g@346@01) (not (= n$4@372@01 x@347@01)))
    (and (= (inv@373@01 n$4@372@01) n$4@372@01) (img@374@01 n$4@372@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) n$4@372@01) n$4@372@01))
  :qid |quant-u-7368|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (= (inv@373@01 r) r))
  :pattern ((inv@373@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@372@01 $Ref)) (!
  (=>
    (and (Set_in n$4@372@01 g@346@01) (not (= n$4@372@01 x@347@01)))
    (not (= n$4@372@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) n$4@372@01) n$4@372@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@375@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef369|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef370|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef371|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) r) r))
  :pattern ((inv@373@01 r))
  :qid |quant-u-7369|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  $Snap.unit))
; [eval] (forall n$5: Ref :: { (n$5.l in g) } { (n$5 in g), n$5.l } (n$5 in g) && n$5.l != null ==> (n$5.l in g))
(declare-const n$5@376@01 $Ref)
(push) ; 3
; [eval] (n$5 in g) && n$5.l != null ==> (n$5.l in g)
; [eval] (n$5 in g) && n$5.l != null
; [eval] (n$5 in g)
(push) ; 4
; [then-branch: 86 | !(n$5@376@01 in g@346@01) | live]
; [else-branch: 86 | n$5@376@01 in g@346@01 | live]
(push) ; 5
; [then-branch: 86 | !(n$5@376@01 in g@346@01)]
(assert (not (Set_in n$5@376@01 g@346@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 86 | n$5@376@01 in g@346@01]
(assert (Set_in n$5@376@01 g@346@01))
; [eval] n$5.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
    :qid |qp.fvfValDef366|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01))))
      (=
        ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
    :qid |qp.fvfValDef367|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef368|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) n$5@376@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@376@01 x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@370@01 n$5@376@01)
        (and
          (Set_in (inv@369@01 n$5@376@01) g@346@01)
          (not (= (inv@369@01 n$5@376@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef366|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@370@01 r)
      (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef367|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef368|)))
(assert (=>
  (Set_in n$5@376@01 g@346@01)
  (and
    (Set_in n$5@376@01 g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) n$5@376@01))))
(assert (or (Set_in n$5@376@01 g@346@01) (not (Set_in n$5@376@01 g@346@01))))
(push) ; 4
; [then-branch: 87 | n$5@376@01 in g@346@01 && Lookup(l, sm@371@01, n$5@376@01) != Null | live]
; [else-branch: 87 | !(n$5@376@01 in g@346@01 && Lookup(l, sm@371@01, n$5@376@01) != Null) | live]
(push) ; 5
; [then-branch: 87 | n$5@376@01 in g@346@01 && Lookup(l, sm@371@01, n$5@376@01) != Null]
(assert (and
  (Set_in n$5@376@01 g@346@01)
  (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null))))
; [eval] (n$5.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
    :qid |qp.fvfValDef366|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01))))
      (=
        ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
    :qid |qp.fvfValDef367|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef368|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) n$5@376@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$5@376@01 x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No)
    (ite
      (and
        (img@370@01 n$5@376@01)
        (and
          (Set_in (inv@369@01 n$5@376@01) g@346@01)
          (not (= (inv@369@01 n$5@376@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 87 | !(n$5@376@01 in g@346@01 && Lookup(l, sm@371@01, n$5@376@01) != Null)]
(assert (not
  (and
    (Set_in n$5@376@01 g@346@01)
    (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef366|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@370@01 r)
      (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef367|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef368|)))
(assert (=>
  (and
    (Set_in n$5@376@01 g@346@01)
    (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null)))
  (and
    (Set_in n$5@376@01 g@346@01)
    (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) n$5@376@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$5@376@01 g@346@01)
      (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null))))
  (and
    (Set_in n$5@376@01 g@346@01)
    (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef366|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@370@01 r)
      (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@371@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef367|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@371@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef368|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$5@376@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@376@01 g@346@01)
      (and
        (Set_in n$5@376@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) n$5@376@01)))
    (or (Set_in n$5@376@01 g@346@01) (not (Set_in n$5@376@01 g@346@01)))
    (=>
      (and
        (Set_in n$5@376@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null)))
      (and
        (Set_in n$5@376@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) n$5@376@01)))
    (or
      (not
        (and
          (Set_in n$5@376@01 g@346@01)
          (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null))))
      (and
        (Set_in n$5@376@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) g@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@296@13@296@45-aux|)))
(assert (forall ((n$5@376@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@376@01 g@346@01)
      (and
        (Set_in n$5@376@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) n$5@376@01)))
    (or (Set_in n$5@376@01 g@346@01) (not (Set_in n$5@376@01 g@346@01)))
    (=>
      (and
        (Set_in n$5@376@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null)))
      (and
        (Set_in n$5@376@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) n$5@376@01)))
    (or
      (not
        (and
          (Set_in n$5@376@01 g@346@01)
          (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null))))
      (and
        (Set_in n$5@376@01 g@346@01)
        (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null)))))
  :pattern ((Set_in n$5@376@01 g@346@01) ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) n$5@376@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@296@13@296@45-aux|)))
(assert (forall ((n$5@376@01 $Ref)) (!
  (=>
    (and
      (Set_in n$5@376@01 g@346@01)
      (not (= ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) g@346@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) g@346@01))
  :pattern ((Set_in n$5@376@01 g@346@01) ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n$5@376@01) n$5@376@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@296@13@296@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  $Snap.unit))
; [eval] (forall n$6: Ref :: { (n$6.r in g) } { (n$6 in g), n$6.r } (n$6 in g) && n$6.r != null ==> (n$6.r in g))
(declare-const n$6@377@01 $Ref)
(push) ; 3
; [eval] (n$6 in g) && n$6.r != null ==> (n$6.r in g)
; [eval] (n$6 in g) && n$6.r != null
; [eval] (n$6 in g)
(push) ; 4
; [then-branch: 88 | !(n$6@377@01 in g@346@01) | live]
; [else-branch: 88 | n$6@377@01 in g@346@01 | live]
(push) ; 5
; [then-branch: 88 | !(n$6@377@01 in g@346@01)]
(assert (not (Set_in n$6@377@01 g@346@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 88 | n$6@377@01 in g@346@01]
(assert (Set_in n$6@377@01 g@346@01))
; [eval] n$6.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
    :qid |qp.fvfValDef369|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
      (=
        ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
    :qid |qp.fvfValDef370|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef371|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) n$6@377@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@377@01 x@347@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@374@01 n$6@377@01)
        (and
          (Set_in (inv@373@01 n$6@377@01) g@346@01)
          (not (= (inv@373@01 n$6@377@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef369|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef370|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef371|)))
(assert (=>
  (Set_in n$6@377@01 g@346@01)
  (and
    (Set_in n$6@377@01 g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) n$6@377@01))))
(assert (or (Set_in n$6@377@01 g@346@01) (not (Set_in n$6@377@01 g@346@01))))
(push) ; 4
; [then-branch: 89 | n$6@377@01 in g@346@01 && Lookup(r, sm@375@01, n$6@377@01) != Null | live]
; [else-branch: 89 | !(n$6@377@01 in g@346@01 && Lookup(r, sm@375@01, n$6@377@01) != Null) | live]
(push) ; 5
; [then-branch: 89 | n$6@377@01 in g@346@01 && Lookup(r, sm@375@01, n$6@377@01) != Null]
(assert (and
  (Set_in n$6@377@01 g@346@01)
  (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null))))
; [eval] (n$6.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
    :qid |qp.fvfValDef369|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
      (=
        ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
    :qid |qp.fvfValDef370|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef371|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) n$6@377@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$6@377@01 x@347@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@374@01 n$6@377@01)
        (and
          (Set_in (inv@373@01 n$6@377@01) g@346@01)
          (not (= (inv@373@01 n$6@377@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 89 | !(n$6@377@01 in g@346@01 && Lookup(r, sm@375@01, n$6@377@01) != Null)]
(assert (not
  (and
    (Set_in n$6@377@01 g@346@01)
    (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef369|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef370|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef371|)))
(assert (=>
  (and
    (Set_in n$6@377@01 g@346@01)
    (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null)))
  (and
    (Set_in n$6@377@01 g@346@01)
    (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) n$6@377@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@377@01 g@346@01)
      (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null))))
  (and
    (Set_in n$6@377@01 g@346@01)
    (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef369|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef370|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef371|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@377@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@377@01 g@346@01)
      (and
        (Set_in n$6@377@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) n$6@377@01)))
    (or (Set_in n$6@377@01 g@346@01) (not (Set_in n$6@377@01 g@346@01)))
    (=>
      (and
        (Set_in n$6@377@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null)))
      (and
        (Set_in n$6@377@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) n$6@377@01)))
    (or
      (not
        (and
          (Set_in n$6@377@01 g@346@01)
          (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null))))
      (and
        (Set_in n$6@377@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) g@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@296@13@296@45-aux|)))
(assert (forall ((n$6@377@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@377@01 g@346@01)
      (and
        (Set_in n$6@377@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) n$6@377@01)))
    (or (Set_in n$6@377@01 g@346@01) (not (Set_in n$6@377@01 g@346@01)))
    (=>
      (and
        (Set_in n$6@377@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null)))
      (and
        (Set_in n$6@377@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) n$6@377@01)))
    (or
      (not
        (and
          (Set_in n$6@377@01 g@346@01)
          (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null))))
      (and
        (Set_in n$6@377@01 g@346@01)
        (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null)))))
  :pattern ((Set_in n$6@377@01 g@346@01) ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) n$6@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@296@13@296@45-aux|)))
(assert (forall ((n$6@377@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@377@01 g@346@01)
      (not (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) g@346@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) g@346@01))
  :pattern ((Set_in n$6@377@01 g@346@01) ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) n$6@377@01) n$6@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@296@13@296@45|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  $Snap.unit))
; [eval] x.r == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
    :qid |qp.fvfValDef369|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
      (=
        ($FVF.lookup_r (as sm@375@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
    :qid |qp.fvfValDef370|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@375@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef371|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@375@01  $FVF<r>) x@347@01) x@347@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@374@01 x@347@01)
        (and
          (Set_in (inv@373@01 x@347@01) g@346@01)
          (not (= (inv@373@01 x@347@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_r (as sm@375@01  $FVF<r>) x@347@01) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
  $Snap.unit))
; [eval] old(x.r) == null ==> $$(g) == old($$(g))
; [eval] old(x.r) == null
; [eval] old(x.r)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
    :qid |qp.fvfValDef359|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
    :qid |qp.fvfValDef360|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef361|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) x@347@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@359@01 x@347@01)
        (and
          (Set_in (inv@358@01 x@347@01) g@346@01)
          (not (= (inv@358@01 x@347@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | Lookup(r, sm@360@01, x@347@01) == Null | live]
; [else-branch: 90 | Lookup(r, sm@360@01, x@347@01) != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 90 | Lookup(r, sm@360@01, x@347@01) == Null]
(assert (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@378@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@378@01 g@346@01))
(pop) ; 6
(declare-fun inv@379@01 ($Ref) $Ref)
(declare-fun img@380@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@378@01 $Ref) (n2@378@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@378@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n1@378@01) n1@378@01))
      (and
        (Set_in n2@378@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n2@378@01) n2@378@01))
      (= n1@378@01 n2@378@01))
    (= n1@378@01 n2@378@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@378@01 $Ref)) (!
  (=>
    (Set_in n@378@01 g@346@01)
    (and (= (inv@379@01 n@378@01) n@378@01) (img@380@01 n@378@01)))
  :pattern ((Set_in n@378@01 g@346@01))
  :pattern ((inv@379@01 n@378@01))
  :pattern ((img@380@01 n@378@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@380@01 r) (Set_in (inv@379@01 r) g@346@01)) (= (inv@379@01 r) r))
  :pattern ((inv@379@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@379@01 r) g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
  :pattern ((inv@379@01 r))
  :qid |quant-u-7371|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r) (= r (inv@379@01 r)))
    (>
      (+
        (ite
          (and
            (img@370@01 r)
            (and
              (Set_in (inv@369@01 r) g@346@01)
              (not (= (inv@369@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7372|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@381@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@381@01  $FVF<l>)))
      (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r)))
    (=>
      (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r))
      (Set_in r ($FVF.domain_l (as sm@381@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@381@01  $FVF<l>))))
  :qid |qp.fvfDomDef375|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@381@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@381@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef372|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@381@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@381@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef373|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@381@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef374|)))
(declare-const n@382@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@382@01 g@346@01))
(pop) ; 6
(declare-fun inv@383@01 ($Ref) $Ref)
(declare-fun img@384@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@385@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@385@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@385@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef376|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@385@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@385@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef377|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@385@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef378|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@382@01 $Ref) (n2@382@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@382@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@385@01  $FVF<r>) n1@382@01) n1@382@01))
      (and
        (Set_in n2@382@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@385@01  $FVF<r>) n2@382@01) n2@382@01))
      (= n1@382@01 n2@382@01))
    (= n1@382@01 n2@382@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@382@01 $Ref)) (!
  (=>
    (Set_in n@382@01 g@346@01)
    (and (= (inv@383@01 n@382@01) n@382@01) (img@384@01 n@382@01)))
  :pattern ((Set_in n@382@01 g@346@01))
  :pattern ((inv@383@01 n@382@01))
  :pattern ((img@384@01 n@382@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@384@01 r) (Set_in (inv@383@01 r) g@346@01)) (= (inv@383@01 r) r))
  :pattern ((inv@383@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@383@01 r) g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@385@01  $FVF<r>) r) r))
  :pattern ((inv@383@01 r))
  :qid |quant-u-7374|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r) (= r (inv@383@01 r)))
    (>
      (+
        (ite
          (and
            (img@374@01 r)
            (and
              (Set_in (inv@373@01 r) g@346@01)
              (not (= (inv@373@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7375|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@386@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@386@01  $FVF<r>)))
      (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r)))
    (=>
      (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r))
      (Set_in r ($FVF.domain_r (as sm@386@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@386@01  $FVF<r>))))
  :qid |qp.fvfDomDef382|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@386@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@386@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef379|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@386@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@386@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef380|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@386@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef381|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@381@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@386@01  $FVF<r>))) g@346@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@378@01 $Ref)) (!
  (=>
    (Set_in n@378@01 g@346@01)
    (and (= (inv@379@01 n@378@01) n@378@01) (img@380@01 n@378@01)))
  :pattern ((Set_in n@378@01 g@346@01))
  :pattern ((inv@379@01 n@378@01))
  :pattern ((img@380@01 n@378@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@380@01 r) (Set_in (inv@379@01 r) g@346@01)) (= (inv@379@01 r) r))
  :pattern ((inv@379@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@381@01  $FVF<l>)))
      (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r)))
    (=>
      (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r))
      (Set_in r ($FVF.domain_l (as sm@381@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@381@01  $FVF<l>))))
  :qid |qp.fvfDomDef375|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@381@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@381@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef372|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@381@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@381@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef373|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@381@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef374|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@385@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@385@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef376|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@385@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@385@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef377|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@385@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef378|)))
(assert (forall ((n@382@01 $Ref)) (!
  (=>
    (Set_in n@382@01 g@346@01)
    (and (= (inv@383@01 n@382@01) n@382@01) (img@384@01 n@382@01)))
  :pattern ((Set_in n@382@01 g@346@01))
  :pattern ((inv@383@01 n@382@01))
  :pattern ((img@384@01 n@382@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@384@01 r) (Set_in (inv@383@01 r) g@346@01)) (= (inv@383@01 r) r))
  :pattern ((inv@383@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@386@01  $FVF<r>)))
      (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r)))
    (=>
      (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r))
      (Set_in r ($FVF.domain_r (as sm@386@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@386@01  $FVF<r>))))
  :qid |qp.fvfDomDef382|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@386@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@386@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef379|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@386@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@386@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef380|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@386@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef381|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@379@01 r) g@346@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
    :pattern ((inv@379@01 r))
    :qid |quant-u-7371|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@383@01 r) g@346@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@385@01  $FVF<r>) r) r))
    :pattern ((inv@383@01 r))
    :qid |quant-u-7374|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@381@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@386@01  $FVF<r>))) g@346@01)))
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@387@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@387@01 g@346@01))
(pop) ; 6
(declare-fun inv@388@01 ($Ref) $Ref)
(declare-fun img@389@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@387@01 $Ref) (n2@387@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@387@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n1@387@01) n1@387@01))
      (and
        (Set_in n2@387@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n2@387@01) n2@387@01))
      (= n1@387@01 n2@387@01))
    (= n1@387@01 n2@387@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@387@01 $Ref)) (!
  (=>
    (Set_in n@387@01 g@346@01)
    (and (= (inv@388@01 n@387@01) n@387@01) (img@389@01 n@387@01)))
  :pattern ((Set_in n@387@01 g@346@01))
  :pattern ((inv@388@01 n@387@01))
  :pattern ((img@389@01 n@387@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@389@01 r) (Set_in (inv@388@01 r) g@346@01)) (= (inv@388@01 r) r))
  :pattern ((inv@388@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@388@01 r) g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
  :pattern ((inv@388@01 r))
  :qid |quant-u-7377|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r) (= r (inv@388@01 r)))
    (>
      (+
        (ite
          (and
            (img@355@01 r)
            (and
              (Set_in (inv@354@01 r) g@346@01)
              (not (= (inv@354@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7378|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@390@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@390@01  $FVF<l>)))
      (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r)))
    (=>
      (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r))
      (Set_in r ($FVF.domain_l (as sm@390@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@390@01  $FVF<l>))))
  :qid |qp.fvfDomDef386|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@390@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@390@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef383|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@390@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@390@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef384|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@390@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef385|)))
(declare-const n@391@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@391@01 g@346@01))
(pop) ; 6
(declare-fun inv@392@01 ($Ref) $Ref)
(declare-fun img@393@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@394@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@394@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@394@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef387|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@394@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@394@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef388|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@394@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef389|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@391@01 $Ref) (n2@391@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@391@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@394@01  $FVF<r>) n1@391@01) n1@391@01))
      (and
        (Set_in n2@391@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@394@01  $FVF<r>) n2@391@01) n2@391@01))
      (= n1@391@01 n2@391@01))
    (= n1@391@01 n2@391@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@391@01 $Ref)) (!
  (=>
    (Set_in n@391@01 g@346@01)
    (and (= (inv@392@01 n@391@01) n@391@01) (img@393@01 n@391@01)))
  :pattern ((Set_in n@391@01 g@346@01))
  :pattern ((inv@392@01 n@391@01))
  :pattern ((img@393@01 n@391@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@393@01 r) (Set_in (inv@392@01 r) g@346@01)) (= (inv@392@01 r) r))
  :pattern ((inv@392@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@392@01 r) g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@394@01  $FVF<r>) r) r))
  :pattern ((inv@392@01 r))
  :qid |quant-u-7380|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r) (= r (inv@392@01 r)))
    (>
      (+
        (ite
          (and
            (img@359@01 r)
            (and
              (Set_in (inv@358@01 r) g@346@01)
              (not (= (inv@358@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7381|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@395@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@395@01  $FVF<r>)))
      (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r)))
    (=>
      (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r))
      (Set_in r ($FVF.domain_r (as sm@395@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@395@01  $FVF<r>))))
  :qid |qp.fvfDomDef393|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@395@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@395@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef390|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@395@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@395@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef391|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@395@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef392|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@390@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@395@01  $FVF<r>))) g@346@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@387@01 $Ref)) (!
  (=>
    (Set_in n@387@01 g@346@01)
    (and (= (inv@388@01 n@387@01) n@387@01) (img@389@01 n@387@01)))
  :pattern ((Set_in n@387@01 g@346@01))
  :pattern ((inv@388@01 n@387@01))
  :pattern ((img@389@01 n@387@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@389@01 r) (Set_in (inv@388@01 r) g@346@01)) (= (inv@388@01 r) r))
  :pattern ((inv@388@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@390@01  $FVF<l>)))
      (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r)))
    (=>
      (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r))
      (Set_in r ($FVF.domain_l (as sm@390@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@390@01  $FVF<l>))))
  :qid |qp.fvfDomDef386|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@390@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@390@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef383|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@390@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@390@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef384|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@390@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef385|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@394@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@394@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef387|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@394@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@394@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef388|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@394@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef389|)))
(assert (forall ((n@391@01 $Ref)) (!
  (=>
    (Set_in n@391@01 g@346@01)
    (and (= (inv@392@01 n@391@01) n@391@01) (img@393@01 n@391@01)))
  :pattern ((Set_in n@391@01 g@346@01))
  :pattern ((inv@392@01 n@391@01))
  :pattern ((img@393@01 n@391@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@393@01 r) (Set_in (inv@392@01 r) g@346@01)) (= (inv@392@01 r) r))
  :pattern ((inv@392@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@395@01  $FVF<r>)))
      (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r)))
    (=>
      (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r))
      (Set_in r ($FVF.domain_r (as sm@395@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@395@01  $FVF<r>))))
  :qid |qp.fvfDomDef393|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@395@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@395@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef390|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@395@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@395@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef391|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@395@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef392|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@388@01 r) g@346@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
    :pattern ((inv@388@01 r))
    :qid |quant-u-7377|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@392@01 r) g@346@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@394@01  $FVF<r>) r) r))
    :pattern ((inv@392@01 r))
    :qid |quant-u-7380|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@390@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@395@01  $FVF<r>))) g@346@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 90 | Lookup(r, sm@360@01, x@347@01) != Null]
(assert (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@378@01 $Ref)) (!
  (=>
    (Set_in n@378@01 g@346@01)
    (and (= (inv@379@01 n@378@01) n@378@01) (img@380@01 n@378@01)))
  :pattern ((Set_in n@378@01 g@346@01))
  :pattern ((inv@379@01 n@378@01))
  :pattern ((img@380@01 n@378@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@380@01 r) (Set_in (inv@379@01 r) g@346@01)) (= (inv@379@01 r) r))
  :pattern ((inv@379@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@381@01  $FVF<l>)))
      (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r)))
    (=>
      (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r))
      (Set_in r ($FVF.domain_l (as sm@381@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@381@01  $FVF<l>))))
  :qid |qp.fvfDomDef375|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@381@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@381@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef372|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@379@01 r) g@346@01) (img@380@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@381@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@381@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef373|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@381@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef374|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@385@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@385@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef376|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@385@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@385@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef377|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@385@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef378|)))
(assert (forall ((n@382@01 $Ref)) (!
  (=>
    (Set_in n@382@01 g@346@01)
    (and (= (inv@383@01 n@382@01) n@382@01) (img@384@01 n@382@01)))
  :pattern ((Set_in n@382@01 g@346@01))
  :pattern ((inv@383@01 n@382@01))
  :pattern ((img@384@01 n@382@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@384@01 r) (Set_in (inv@383@01 r) g@346@01)) (= (inv@383@01 r) r))
  :pattern ((inv@383@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@386@01  $FVF<r>)))
      (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r)))
    (=>
      (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r))
      (Set_in r ($FVF.domain_r (as sm@386@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@386@01  $FVF<r>))))
  :qid |qp.fvfDomDef382|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@386@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@386@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef379|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@383@01 r) g@346@01) (img@384@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@386@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@386@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef380|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@386@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef381|)))
(assert (forall ((n@387@01 $Ref)) (!
  (=>
    (Set_in n@387@01 g@346@01)
    (and (= (inv@388@01 n@387@01) n@387@01) (img@389@01 n@387@01)))
  :pattern ((Set_in n@387@01 g@346@01))
  :pattern ((inv@388@01 n@387@01))
  :pattern ((img@389@01 n@387@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@389@01 r) (Set_in (inv@388@01 r) g@346@01)) (= (inv@388@01 r) r))
  :pattern ((inv@388@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@390@01  $FVF<l>)))
      (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r)))
    (=>
      (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r))
      (Set_in r ($FVF.domain_l (as sm@390@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@390@01  $FVF<l>))))
  :qid |qp.fvfDomDef386|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@390@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@390@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef383|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@388@01 r) g@346@01) (img@389@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@390@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@390@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef384|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@390@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef385|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@394@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@394@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef387|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@394@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@394@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef388|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@394@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef389|)))
(assert (forall ((n@391@01 $Ref)) (!
  (=>
    (Set_in n@391@01 g@346@01)
    (and (= (inv@392@01 n@391@01) n@391@01) (img@393@01 n@391@01)))
  :pattern ((Set_in n@391@01 g@346@01))
  :pattern ((inv@392@01 n@391@01))
  :pattern ((img@393@01 n@391@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@393@01 r) (Set_in (inv@392@01 r) g@346@01)) (= (inv@392@01 r) r))
  :pattern ((inv@392@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@395@01  $FVF<r>)))
      (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r)))
    (=>
      (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r))
      (Set_in r ($FVF.domain_r (as sm@395@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@395@01  $FVF<r>))))
  :qid |qp.fvfDomDef393|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@395@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@395@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef390|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@392@01 r) g@346@01) (img@393@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@395@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@395@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef391|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@395@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef392|)))
(assert (=>
  (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)
  (and
    (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@379@01 r) g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
      :pattern ((inv@379@01 r))
      :qid |quant-u-7371|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@383@01 r) g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@385@01  $FVF<r>) r) r))
      :pattern ((inv@383@01 r))
      :qid |quant-u-7374|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@381@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@386@01  $FVF<r>))) g@346@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@388@01 r) g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
      :pattern ((inv@388@01 r))
      :qid |quant-u-7377|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@392@01 r) g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@394@01  $FVF<r>) r) r))
      :pattern ((inv@392@01 r))
      :qid |quant-u-7380|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@390@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@395@01  $FVF<r>))) g@346@01))))
; Joined path conditions
(assert (or
  (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))
  (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)))
(assert (=>
  (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)
  (Set_equal ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@381@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@386@01  $FVF<r>))) g@346@01) ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@390@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@395@01  $FVF<r>))) g@346@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
  $Snap.unit))
; [eval] old(x.r) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.r))))
; [eval] old(x.r) != null
; [eval] old(x.r)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
    :qid |qp.fvfValDef359|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
    :qid |qp.fvfValDef360|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef361|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@359@01 x@347@01)
        (and
          (Set_in (inv@358@01 x@347@01) g@346@01)
          (not (= (inv@358@01 x@347@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 91 | Lookup(r, sm@360@01, x@347@01) != Null | live]
; [else-branch: 91 | Lookup(r, sm@360@01, x@347@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 91 | Lookup(r, sm@360@01, x@347@01) != Null]
(assert (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.r))))
(declare-const v1@396@01 $Ref)
(declare-const v2@397@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.r)))
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@398@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@398@01 g@346@01))
(pop) ; 7
(declare-fun inv@399@01 ($Ref) $Ref)
(declare-fun img@400@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@398@01 $Ref) (n2@398@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@398@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n1@398@01) n1@398@01))
      (and
        (Set_in n2@398@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n2@398@01) n2@398@01))
      (= n1@398@01 n2@398@01))
    (= n1@398@01 n2@398@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@398@01 $Ref)) (!
  (=>
    (Set_in n@398@01 g@346@01)
    (and (= (inv@399@01 n@398@01) n@398@01) (img@400@01 n@398@01)))
  :pattern ((Set_in n@398@01 g@346@01))
  :pattern ((inv@399@01 n@398@01))
  :pattern ((img@400@01 n@398@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@400@01 r) (Set_in (inv@399@01 r) g@346@01)) (= (inv@399@01 r) r))
  :pattern ((inv@399@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@399@01 r) g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
  :pattern ((inv@399@01 r))
  :qid |quant-u-7383|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r) (= r (inv@399@01 r)))
    (>
      (+
        (ite
          (and
            (img@370@01 r)
            (and
              (Set_in (inv@369@01 r) g@346@01)
              (not (= (inv@369@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7384|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@401@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>)))
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r)))
    (=>
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r))
      (Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>))))
  :qid |qp.fvfDomDef397|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@401@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef394|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@401@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef395|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef396|)))
(declare-const n@402@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@402@01 g@346@01))
(pop) ; 7
(declare-fun inv@403@01 ($Ref) $Ref)
(declare-fun img@404@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@405@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@405@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef398|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@405@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef399|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef400|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@402@01 $Ref) (n2@402@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@402@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@405@01  $FVF<r>) n1@402@01) n1@402@01))
      (and
        (Set_in n2@402@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@405@01  $FVF<r>) n2@402@01) n2@402@01))
      (= n1@402@01 n2@402@01))
    (= n1@402@01 n2@402@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@402@01 $Ref)) (!
  (=>
    (Set_in n@402@01 g@346@01)
    (and (= (inv@403@01 n@402@01) n@402@01) (img@404@01 n@402@01)))
  :pattern ((Set_in n@402@01 g@346@01))
  :pattern ((inv@403@01 n@402@01))
  :pattern ((img@404@01 n@402@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@404@01 r) (Set_in (inv@403@01 r) g@346@01)) (= (inv@403@01 r) r))
  :pattern ((inv@403@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@403@01 r) g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@405@01  $FVF<r>) r) r))
  :pattern ((inv@403@01 r))
  :qid |quant-u-7386|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r) (= r (inv@403@01 r)))
    (>
      (+
        (ite
          (and
            (img@374@01 r)
            (and
              (Set_in (inv@373@01 r) g@346@01)
              (not (= (inv@373@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7387|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@406@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>)))
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r)))
    (=>
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r))
      (Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>))))
  :qid |qp.fvfDomDef404|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef401|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef402|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef403|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@401@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@406@01  $FVF<r>))) g@346@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@398@01 $Ref)) (!
  (=>
    (Set_in n@398@01 g@346@01)
    (and (= (inv@399@01 n@398@01) n@398@01) (img@400@01 n@398@01)))
  :pattern ((Set_in n@398@01 g@346@01))
  :pattern ((inv@399@01 n@398@01))
  :pattern ((img@400@01 n@398@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@400@01 r) (Set_in (inv@399@01 r) g@346@01)) (= (inv@399@01 r) r))
  :pattern ((inv@399@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>)))
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r)))
    (=>
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r))
      (Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>))))
  :qid |qp.fvfDomDef397|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@401@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef394|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@401@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef395|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef396|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@405@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef398|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@405@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef399|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef400|)))
(assert (forall ((n@402@01 $Ref)) (!
  (=>
    (Set_in n@402@01 g@346@01)
    (and (= (inv@403@01 n@402@01) n@402@01) (img@404@01 n@402@01)))
  :pattern ((Set_in n@402@01 g@346@01))
  :pattern ((inv@403@01 n@402@01))
  :pattern ((img@404@01 n@402@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@404@01 r) (Set_in (inv@403@01 r) g@346@01)) (= (inv@403@01 r) r))
  :pattern ((inv@403@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>)))
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r)))
    (=>
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r))
      (Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>))))
  :qid |qp.fvfDomDef404|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef401|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef402|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef403|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@399@01 r) g@346@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
    :pattern ((inv@399@01 r))
    :qid |quant-u-7383|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@403@01 r) g@346@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@405@01  $FVF<r>) r) r))
    :pattern ((inv@403@01 r))
    :qid |quant-u-7386|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@401@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@406@01  $FVF<r>))) g@346@01)))
; [eval] edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.r))
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 6
(declare-const n@407@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@407@01 g@346@01))
(pop) ; 7
(declare-fun inv@408@01 ($Ref) $Ref)
(declare-fun img@409@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@407@01 $Ref) (n2@407@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@407@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n1@407@01) n1@407@01))
      (and
        (Set_in n2@407@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n2@407@01) n2@407@01))
      (= n1@407@01 n2@407@01))
    (= n1@407@01 n2@407@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@407@01 $Ref)) (!
  (=>
    (Set_in n@407@01 g@346@01)
    (and (= (inv@408@01 n@407@01) n@407@01) (img@409@01 n@407@01)))
  :pattern ((Set_in n@407@01 g@346@01))
  :pattern ((inv@408@01 n@407@01))
  :pattern ((img@409@01 n@407@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@409@01 r) (Set_in (inv@408@01 r) g@346@01)) (= (inv@408@01 r) r))
  :pattern ((inv@408@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@408@01 r) g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
  :pattern ((inv@408@01 r))
  :qid |quant-u-7389|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r) (= r (inv@408@01 r)))
    (>
      (+
        (ite
          (and
            (img@355@01 r)
            (and
              (Set_in (inv@354@01 r) g@346@01)
              (not (= (inv@354@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7390|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@410@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>)))
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r)))
    (=>
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r))
      (Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>))))
  :qid |qp.fvfDomDef408|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@410@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef405|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@410@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef406|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef407|)))
(declare-const n@411@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@411@01 g@346@01))
(pop) ; 7
(declare-fun inv@412@01 ($Ref) $Ref)
(declare-fun img@413@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@414@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@414@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef409|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@414@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef410|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef411|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@411@01 $Ref) (n2@411@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@411@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@414@01  $FVF<r>) n1@411@01) n1@411@01))
      (and
        (Set_in n2@411@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@414@01  $FVF<r>) n2@411@01) n2@411@01))
      (= n1@411@01 n2@411@01))
    (= n1@411@01 n2@411@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@411@01 $Ref)) (!
  (=>
    (Set_in n@411@01 g@346@01)
    (and (= (inv@412@01 n@411@01) n@411@01) (img@413@01 n@411@01)))
  :pattern ((Set_in n@411@01 g@346@01))
  :pattern ((inv@412@01 n@411@01))
  :pattern ((img@413@01 n@411@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@413@01 r) (Set_in (inv@412@01 r) g@346@01)) (= (inv@412@01 r) r))
  :pattern ((inv@412@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@412@01 r) g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@414@01  $FVF<r>) r) r))
  :pattern ((inv@412@01 r))
  :qid |quant-u-7392|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r) (= r (inv@412@01 r)))
    (>
      (+
        (ite
          (and
            (img@359@01 r)
            (and
              (Set_in (inv@358@01 r) g@346@01)
              (not (= (inv@358@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7393|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@415@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>)))
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r)))
    (=>
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r))
      (Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>))))
  :qid |qp.fvfDomDef415|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@415@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef412|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@415@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef413|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef414|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@407@01 $Ref)) (!
  (=>
    (Set_in n@407@01 g@346@01)
    (and (= (inv@408@01 n@407@01) n@407@01) (img@409@01 n@407@01)))
  :pattern ((Set_in n@407@01 g@346@01))
  :pattern ((inv@408@01 n@407@01))
  :pattern ((img@409@01 n@407@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@409@01 r) (Set_in (inv@408@01 r) g@346@01)) (= (inv@408@01 r) r))
  :pattern ((inv@408@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>)))
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r)))
    (=>
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r))
      (Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>))))
  :qid |qp.fvfDomDef408|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@410@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef405|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@410@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef406|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef407|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@414@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef409|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@414@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef410|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef411|)))
(assert (forall ((n@411@01 $Ref)) (!
  (=>
    (Set_in n@411@01 g@346@01)
    (and (= (inv@412@01 n@411@01) n@411@01) (img@413@01 n@411@01)))
  :pattern ((Set_in n@411@01 g@346@01))
  :pattern ((inv@412@01 n@411@01))
  :pattern ((img@413@01 n@411@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@413@01 r) (Set_in (inv@412@01 r) g@346@01)) (= (inv@412@01 r) r))
  :pattern ((inv@412@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>)))
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r)))
    (=>
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r))
      (Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>))))
  :qid |qp.fvfDomDef415|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@415@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef412|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@415@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef413|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef414|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@408@01 r) g@346@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
    :pattern ((inv@408@01 r))
    :qid |quant-u-7389|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@412@01 r) g@346@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@414@01  $FVF<r>) r) r))
    :pattern ((inv@412@01 r))
    :qid |quant-u-7392|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01)))
(push) ; 6
; [then-branch: 92 | !(edge[Bool]($$((sm@410@01, sm@415@01), g@346@01), v1@396@01, v2@397@01)) | live]
; [else-branch: 92 | edge[Bool]($$((sm@410@01, sm@415@01), g@346@01), v1@396@01, v2@397@01) | live]
(push) ; 7
; [then-branch: 92 | !(edge[Bool]($$((sm@410@01, sm@415@01), g@346@01), v1@396@01, v2@397@01))]
(assert (not
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 92 | edge[Bool]($$((sm@410@01, sm@415@01), g@346@01), v1@396@01, v2@397@01)]
(assert (edge<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01))
; [eval] !(v1 == x && v2 == old(x.r))
; [eval] v1 == x && v2 == old(x.r)
; [eval] v1 == x
(push) ; 8
; [then-branch: 93 | v1@396@01 != x@347@01 | live]
; [else-branch: 93 | v1@396@01 == x@347@01 | live]
(push) ; 9
; [then-branch: 93 | v1@396@01 != x@347@01]
(assert (not (= v1@396@01 x@347@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 93 | v1@396@01 == x@347@01]
(assert (= v1@396@01 x@347@01))
; [eval] v2 == old(x.r)
; [eval] old(x.r)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
    :qid |qp.fvfValDef359|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
    :qid |qp.fvfValDef360|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef361|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@359@01 x@347@01)
        (and
          (Set_in (inv@358@01 x@347@01) g@346@01)
          (not (= (inv@358@01 x@347@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (or (= v1@396@01 x@347@01) (not (= v1@396@01 x@347@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (=>
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
  (and
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
    (or (= v1@396@01 x@347@01) (not (= v1@396@01 x@347@01))))))
(assert (or
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@398@01 $Ref)) (!
  (=>
    (Set_in n@398@01 g@346@01)
    (and (= (inv@399@01 n@398@01) n@398@01) (img@400@01 n@398@01)))
  :pattern ((Set_in n@398@01 g@346@01))
  :pattern ((inv@399@01 n@398@01))
  :pattern ((img@400@01 n@398@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@400@01 r) (Set_in (inv@399@01 r) g@346@01)) (= (inv@399@01 r) r))
  :pattern ((inv@399@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>)))
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r)))
    (=>
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r))
      (Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>))))
  :qid |qp.fvfDomDef397|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@401@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef394|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@401@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef395|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef396|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@405@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef398|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@405@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef399|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef400|)))
(assert (forall ((n@402@01 $Ref)) (!
  (=>
    (Set_in n@402@01 g@346@01)
    (and (= (inv@403@01 n@402@01) n@402@01) (img@404@01 n@402@01)))
  :pattern ((Set_in n@402@01 g@346@01))
  :pattern ((inv@403@01 n@402@01))
  :pattern ((img@404@01 n@402@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@404@01 r) (Set_in (inv@403@01 r) g@346@01)) (= (inv@403@01 r) r))
  :pattern ((inv@403@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>)))
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r)))
    (=>
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r))
      (Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>))))
  :qid |qp.fvfDomDef404|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef401|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef402|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef403|)))
(assert (forall ((n@407@01 $Ref)) (!
  (=>
    (Set_in n@407@01 g@346@01)
    (and (= (inv@408@01 n@407@01) n@407@01) (img@409@01 n@407@01)))
  :pattern ((Set_in n@407@01 g@346@01))
  :pattern ((inv@408@01 n@407@01))
  :pattern ((img@409@01 n@407@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@409@01 r) (Set_in (inv@408@01 r) g@346@01)) (= (inv@408@01 r) r))
  :pattern ((inv@408@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>)))
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r)))
    (=>
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r))
      (Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>))))
  :qid |qp.fvfDomDef408|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@410@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef405|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@410@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef406|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef407|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@414@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef409|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@414@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef410|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef411|)))
(assert (forall ((n@411@01 $Ref)) (!
  (=>
    (Set_in n@411@01 g@346@01)
    (and (= (inv@412@01 n@411@01) n@411@01) (img@413@01 n@411@01)))
  :pattern ((Set_in n@411@01 g@346@01))
  :pattern ((inv@412@01 n@411@01))
  :pattern ((img@413@01 n@411@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@413@01 r) (Set_in (inv@412@01 r) g@346@01)) (= (inv@412@01 r) r))
  :pattern ((inv@412@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>)))
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r)))
    (=>
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r))
      (Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>))))
  :qid |qp.fvfDomDef415|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@415@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef412|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@415@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef413|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef414|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@399@01 r) g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
  :pattern ((inv@399@01 r))
  :qid |quant-u-7383|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@403@01 r) g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@405@01  $FVF<r>) r) r))
  :pattern ((inv@403@01 r))
  :qid |quant-u-7386|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@401@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@406@01  $FVF<r>))) g@346@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@408@01 r) g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
  :pattern ((inv@408@01 r))
  :qid |quant-u-7389|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@412@01 r) g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@414@01  $FVF<r>) r) r))
  :pattern ((inv@412@01 r))
  :qid |quant-u-7392|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@396@01 $Ref) (v2@397@01 $Ref)) (!
  (and
    (=>
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
      (and
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
        (or (= v1@396@01 x@347@01) (not (= v1@396@01 x@347@01)))))
    (or
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01))))
  :pattern ((edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@401@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@406@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@299@34@301@86-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 91 | Lookup(r, sm@360@01, x@347@01) == Null]
(assert (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@398@01 $Ref)) (!
  (=>
    (Set_in n@398@01 g@346@01)
    (and (= (inv@399@01 n@398@01) n@398@01) (img@400@01 n@398@01)))
  :pattern ((Set_in n@398@01 g@346@01))
  :pattern ((inv@399@01 n@398@01))
  :pattern ((img@400@01 n@398@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@400@01 r) (Set_in (inv@399@01 r) g@346@01)) (= (inv@399@01 r) r))
  :pattern ((inv@399@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>)))
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r)))
    (=>
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r))
      (Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@401@01  $FVF<l>))))
  :qid |qp.fvfDomDef397|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@401@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef394|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@399@01 r) g@346@01) (img@400@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@401@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef395|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@401@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef396|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@405@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef398|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@405@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef399|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@405@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef400|)))
(assert (forall ((n@402@01 $Ref)) (!
  (=>
    (Set_in n@402@01 g@346@01)
    (and (= (inv@403@01 n@402@01) n@402@01) (img@404@01 n@402@01)))
  :pattern ((Set_in n@402@01 g@346@01))
  :pattern ((inv@403@01 n@402@01))
  :pattern ((img@404@01 n@402@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@404@01 r) (Set_in (inv@403@01 r) g@346@01)) (= (inv@403@01 r) r))
  :pattern ((inv@403@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>)))
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r)))
    (=>
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r))
      (Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@406@01  $FVF<r>))))
  :qid |qp.fvfDomDef404|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef401|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@403@01 r) g@346@01) (img@404@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@406@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef402|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@406@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef403|)))
(assert (forall ((n@407@01 $Ref)) (!
  (=>
    (Set_in n@407@01 g@346@01)
    (and (= (inv@408@01 n@407@01) n@407@01) (img@409@01 n@407@01)))
  :pattern ((Set_in n@407@01 g@346@01))
  :pattern ((inv@408@01 n@407@01))
  :pattern ((img@409@01 n@407@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@409@01 r) (Set_in (inv@408@01 r) g@346@01)) (= (inv@408@01 r) r))
  :pattern ((inv@408@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>)))
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r)))
    (=>
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r))
      (Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@410@01  $FVF<l>))))
  :qid |qp.fvfDomDef408|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@410@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef405|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@346@01) (img@409@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@410@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef406|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@410@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef407|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@414@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef409|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@414@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef410|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@414@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef411|)))
(assert (forall ((n@411@01 $Ref)) (!
  (=>
    (Set_in n@411@01 g@346@01)
    (and (= (inv@412@01 n@411@01) n@411@01) (img@413@01 n@411@01)))
  :pattern ((Set_in n@411@01 g@346@01))
  :pattern ((inv@412@01 n@411@01))
  :pattern ((img@413@01 n@411@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@413@01 r) (Set_in (inv@412@01 r) g@346@01)) (= (inv@412@01 r) r))
  :pattern ((inv@412@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>)))
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r)))
    (=>
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r))
      (Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@415@01  $FVF<r>))))
  :qid |qp.fvfDomDef415|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@415@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef412|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@412@01 r) g@346@01) (img@413@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@415@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef413|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@415@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef414|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (=>
  (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@399@01 r) g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
      :pattern ((inv@399@01 r))
      :qid |quant-u-7383|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@403@01 r) g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@405@01  $FVF<r>) r) r))
      :pattern ((inv@403@01 r))
      :qid |quant-u-7386|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@401@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@406@01  $FVF<r>))) g@346@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@408@01 r) g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
      :pattern ((inv@408@01 r))
      :qid |quant-u-7389|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@412@01 r) g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@414@01  $FVF<r>) r) r))
      :pattern ((inv@412@01 r))
      :qid |quant-u-7392|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01)
    (forall ((v1@396@01 $Ref) (v2@397@01 $Ref)) (!
      (and
        (=>
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
          (and
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
            (or (= v1@396@01 x@347@01) (not (= v1@396@01 x@347@01)))))
        (or
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01))))
      :pattern ((edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@401@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@406@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@299@34@301@86-aux|)))))
; Joined path conditions
(assert (or
  (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)
  (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))))
(assert (=>
  (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))
  (forall ((v1@396@01 $Ref) (v2@397@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@401@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@406@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
      (and
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@410@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@415@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01)
        (not
          (and
            (= v1@396@01 x@347@01)
            (= v2@397@01 ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01))))))
    :pattern ((edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@401@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@406@01  $FVF<r>))) g@346@01) v1@396@01 v2@397@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@299@34@301@86|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
  $Snap.unit))
; [eval] old(x.r) != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.r), v2))))
; [eval] old(x.r) != null
; [eval] old(x.r)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
    :qid |qp.fvfValDef359|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
    :qid |qp.fvfValDef360|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef361|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@359@01 x@347@01)
        (and
          (Set_in (inv@358@01 x@347@01) g@346@01)
          (not (= (inv@358@01 x@347@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 94 | Lookup(r, sm@360@01, x@347@01) != Null | live]
; [else-branch: 94 | Lookup(r, sm@360@01, x@347@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 94 | Lookup(r, sm@360@01, x@347@01) != Null]
(assert (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.r), v2))))
(declare-const v1@416@01 $Ref)
(declare-const v2@417@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.r), v2)))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 95 | v1@416@01 != v2@417@01 | live]
; [else-branch: 95 | v1@416@01 == v2@417@01 | live]
(push) ; 7
; [then-branch: 95 | v1@416@01 != v2@417@01]
(assert (not (= v1@416@01 v2@417@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.r), v2)))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@418@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@418@01 g@346@01))
(pop) ; 9
(declare-fun inv@419@01 ($Ref) $Ref)
(declare-fun img@420@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@418@01 $Ref) (n2@418@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@418@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n1@418@01) n1@418@01))
      (and
        (Set_in n2@418@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) n2@418@01) n2@418@01))
      (= n1@418@01 n2@418@01))
    (= n1@418@01 n2@418@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@418@01 $Ref)) (!
  (=>
    (Set_in n@418@01 g@346@01)
    (and (= (inv@419@01 n@418@01) n@418@01) (img@420@01 n@418@01)))
  :pattern ((Set_in n@418@01 g@346@01))
  :pattern ((inv@419@01 n@418@01))
  :pattern ((img@420@01 n@418@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@420@01 r) (Set_in (inv@419@01 r) g@346@01)) (= (inv@419@01 r) r))
  :pattern ((inv@419@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@419@01 r) g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
  :pattern ((inv@419@01 r))
  :qid |quant-u-7395|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r) (= r (inv@419@01 r)))
    (>
      (+
        (ite
          (and
            (img@370@01 r)
            (and
              (Set_in (inv@369@01 r) g@346@01)
              (not (= (inv@369@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7396|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@421@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>)))
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r)))
    (=>
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r))
      (Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>))))
  :qid |qp.fvfDomDef419|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@421@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef416|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@421@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef417|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef418|)))
(declare-const n@422@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@422@01 g@346@01))
(pop) ; 9
(declare-fun inv@423@01 ($Ref) $Ref)
(declare-fun img@424@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@425@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@425@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef420|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@425@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef421|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef422|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@422@01 $Ref) (n2@422@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@422@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@425@01  $FVF<r>) n1@422@01) n1@422@01))
      (and
        (Set_in n2@422@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@425@01  $FVF<r>) n2@422@01) n2@422@01))
      (= n1@422@01 n2@422@01))
    (= n1@422@01 n2@422@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@422@01 $Ref)) (!
  (=>
    (Set_in n@422@01 g@346@01)
    (and (= (inv@423@01 n@422@01) n@422@01) (img@424@01 n@422@01)))
  :pattern ((Set_in n@422@01 g@346@01))
  :pattern ((inv@423@01 n@422@01))
  :pattern ((img@424@01 n@422@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@424@01 r) (Set_in (inv@423@01 r) g@346@01)) (= (inv@423@01 r) r))
  :pattern ((inv@423@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@423@01 r) g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@425@01  $FVF<r>) r) r))
  :pattern ((inv@423@01 r))
  :qid |quant-u-7398|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r) (= r (inv@423@01 r)))
    (>
      (+
        (ite
          (and
            (img@374@01 r)
            (and
              (Set_in (inv@373@01 r) g@346@01)
              (not (= (inv@373@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7399|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@426@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>)))
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r)))
    (=>
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r))
      (Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>))))
  :qid |qp.fvfDomDef426|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@426@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef423|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@426@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef424|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef425|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@421@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@426@01  $FVF<r>))) g@346@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@418@01 $Ref)) (!
  (=>
    (Set_in n@418@01 g@346@01)
    (and (= (inv@419@01 n@418@01) n@418@01) (img@420@01 n@418@01)))
  :pattern ((Set_in n@418@01 g@346@01))
  :pattern ((inv@419@01 n@418@01))
  :pattern ((img@420@01 n@418@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@420@01 r) (Set_in (inv@419@01 r) g@346@01)) (= (inv@419@01 r) r))
  :pattern ((inv@419@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>)))
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r)))
    (=>
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r))
      (Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>))))
  :qid |qp.fvfDomDef419|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@421@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef416|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@421@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef417|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef418|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@425@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef420|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@425@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef421|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef422|)))
(assert (forall ((n@422@01 $Ref)) (!
  (=>
    (Set_in n@422@01 g@346@01)
    (and (= (inv@423@01 n@422@01) n@422@01) (img@424@01 n@422@01)))
  :pattern ((Set_in n@422@01 g@346@01))
  :pattern ((inv@423@01 n@422@01))
  :pattern ((img@424@01 n@422@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@424@01 r) (Set_in (inv@423@01 r) g@346@01)) (= (inv@423@01 r) r))
  :pattern ((inv@423@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>)))
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r)))
    (=>
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r))
      (Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>))))
  :qid |qp.fvfDomDef426|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@426@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef423|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@426@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef424|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef425|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@419@01 r) g@346@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
    :pattern ((inv@419@01 r))
    :qid |quant-u-7395|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@423@01 r) g@346@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@425@01  $FVF<r>) r) r))
    :pattern ((inv@423@01 r))
    :qid |quant-u-7398|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@421@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@426@01  $FVF<r>))) g@346@01)))
; [eval] exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.r), v2))
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@427@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@427@01 g@346@01))
(pop) ; 9
(declare-fun inv@428@01 ($Ref) $Ref)
(declare-fun img@429@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@427@01 $Ref) (n2@427@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@427@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n1@427@01) n1@427@01))
      (and
        (Set_in n2@427@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) n2@427@01) n2@427@01))
      (= n1@427@01 n2@427@01))
    (= n1@427@01 n2@427@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@346@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@346@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@346@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@428@01 r) g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
  :pattern ((inv@428@01 r))
  :qid |quant-u-7401|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r) (= r (inv@428@01 r)))
    (>
      (+
        (ite
          (and
            (img@355@01 r)
            (and
              (Set_in (inv@354@01 r) g@346@01)
              (not (= (inv@354@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7402|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@430@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>)))
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r))
      (Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>))))
  :qid |qp.fvfDomDef430|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@430@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef427|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@430@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef428|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef429|)))
(declare-const n@431@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@431@01 g@346@01))
(pop) ; 9
(declare-fun inv@432@01 ($Ref) $Ref)
(declare-fun img@433@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@434@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@434@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef431|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@434@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef432|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef433|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@431@01 $Ref) (n2@431@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@431@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@434@01  $FVF<r>) n1@431@01) n1@431@01))
      (and
        (Set_in n2@431@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@434@01  $FVF<r>) n2@431@01) n2@431@01))
      (= n1@431@01 n2@431@01))
    (= n1@431@01 n2@431@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@431@01 $Ref)) (!
  (=>
    (Set_in n@431@01 g@346@01)
    (and (= (inv@432@01 n@431@01) n@431@01) (img@433@01 n@431@01)))
  :pattern ((Set_in n@431@01 g@346@01))
  :pattern ((inv@432@01 n@431@01))
  :pattern ((img@433@01 n@431@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@433@01 r) (Set_in (inv@432@01 r) g@346@01)) (= (inv@432@01 r) r))
  :pattern ((inv@432@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@432@01 r) g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@434@01  $FVF<r>) r) r))
  :pattern ((inv@432@01 r))
  :qid |quant-u-7404|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r) (= r (inv@432@01 r)))
    (>
      (+
        (ite
          (and
            (img@359@01 r)
            (and
              (Set_in (inv@358@01 r) g@346@01)
              (not (= (inv@358@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7405|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@435@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>)))
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r)))
    (=>
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r))
      (Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>))))
  :qid |qp.fvfDomDef437|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@435@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef434|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@435@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef435|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef436|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@346@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@346@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@346@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>)))
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r))
      (Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>))))
  :qid |qp.fvfDomDef430|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@430@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef427|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@430@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef428|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef429|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@434@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef431|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@434@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef432|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef433|)))
(assert (forall ((n@431@01 $Ref)) (!
  (=>
    (Set_in n@431@01 g@346@01)
    (and (= (inv@432@01 n@431@01) n@431@01) (img@433@01 n@431@01)))
  :pattern ((Set_in n@431@01 g@346@01))
  :pattern ((inv@432@01 n@431@01))
  :pattern ((img@433@01 n@431@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@433@01 r) (Set_in (inv@432@01 r) g@346@01)) (= (inv@432@01 r) r))
  :pattern ((inv@432@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>)))
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r)))
    (=>
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r))
      (Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>))))
  :qid |qp.fvfDomDef437|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@435@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef434|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@435@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef435|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef436|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@428@01 r) g@346@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
    :pattern ((inv@428@01 r))
    :qid |quant-u-7401|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@432@01 r) g@346@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@434@01  $FVF<r>) r) r))
    :pattern ((inv@432@01 r))
    :qid |quant-u-7404|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01)))
(push) ; 8
; [then-branch: 96 | !(exists_path[Bool]($$((sm@430@01, sm@435@01), g@346@01), v1@416@01, v2@417@01)) | live]
; [else-branch: 96 | exists_path[Bool]($$((sm@430@01, sm@435@01), g@346@01), v1@416@01, v2@417@01) | live]
(push) ; 9
; [then-branch: 96 | !(exists_path[Bool]($$((sm@430@01, sm@435@01), g@346@01), v1@416@01, v2@417@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 96 | exists_path[Bool]($$((sm@430@01, sm@435@01), g@346@01), v1@416@01, v2@417@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01))
; [eval] !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.r), v2))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.r), v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@436@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@436@01 g@346@01))
(pop) ; 11
(declare-fun inv@437@01 ($Ref) $Ref)
(declare-fun img@438@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@439@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef438|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef439|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef440|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@436@01 $Ref) (n2@436@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@436@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@439@01  $FVF<l>) n1@436@01) n1@436@01))
      (and
        (Set_in n2@436@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@439@01  $FVF<l>) n2@436@01) n2@436@01))
      (= n1@436@01 n2@436@01))
    (= n1@436@01 n2@436@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@436@01 $Ref)) (!
  (=>
    (Set_in n@436@01 g@346@01)
    (and (= (inv@437@01 n@436@01) n@436@01) (img@438@01 n@436@01)))
  :pattern ((Set_in n@436@01 g@346@01))
  :pattern ((inv@437@01 n@436@01))
  :pattern ((img@438@01 n@436@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@438@01 r) (Set_in (inv@437@01 r) g@346@01)) (= (inv@437@01 r) r))
  :pattern ((inv@437@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@437@01 r) g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@439@01  $FVF<l>) r) r))
  :pattern ((inv@437@01 r))
  :qid |quant-u-7407|)))
(push) ; 11
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r) (= r (inv@437@01 r)))
    (>
      (+
        (ite
          (and
            (img@355@01 r)
            (and
              (Set_in (inv@354@01 r) g@346@01)
              (not (= (inv@354@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7408|))))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(declare-const sm@440@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)))
    (=>
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>))))
  :qid |qp.fvfDomDef444|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef441|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef442|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef443|)))
(declare-const n@441@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@441@01 g@346@01))
(pop) ; 11
(declare-fun inv@442@01 ($Ref) $Ref)
(declare-fun img@443@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@444@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef445|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef446|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef447|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@441@01 $Ref) (n2@441@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@441@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@444@01  $FVF<r>) n1@441@01) n1@441@01))
      (and
        (Set_in n2@441@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@444@01  $FVF<r>) n2@441@01) n2@441@01))
      (= n1@441@01 n2@441@01))
    (= n1@441@01 n2@441@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@441@01 $Ref)) (!
  (=>
    (Set_in n@441@01 g@346@01)
    (and (= (inv@442@01 n@441@01) n@441@01) (img@443@01 n@441@01)))
  :pattern ((Set_in n@441@01 g@346@01))
  :pattern ((inv@442@01 n@441@01))
  :pattern ((img@443@01 n@441@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@443@01 r) (Set_in (inv@442@01 r) g@346@01)) (= (inv@442@01 r) r))
  :pattern ((inv@442@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@442@01 r) g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@444@01  $FVF<r>) r) r))
  :pattern ((inv@442@01 r))
  :qid |quant-u-7410|)))
(push) ; 11
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r) (= r (inv@442@01 r)))
    (>
      (+
        (ite
          (and
            (img@359@01 r)
            (and
              (Set_in (inv@358@01 r) g@346@01)
              (not (= (inv@358@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7411|))))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(declare-const sm@445@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)))
    (=>
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>))))
  :qid |qp.fvfDomDef451|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef448|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef449|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef450|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef438|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef439|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef440|)))
(assert (forall ((n@436@01 $Ref)) (!
  (=>
    (Set_in n@436@01 g@346@01)
    (and (= (inv@437@01 n@436@01) n@436@01) (img@438@01 n@436@01)))
  :pattern ((Set_in n@436@01 g@346@01))
  :pattern ((inv@437@01 n@436@01))
  :pattern ((img@438@01 n@436@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@438@01 r) (Set_in (inv@437@01 r) g@346@01)) (= (inv@437@01 r) r))
  :pattern ((inv@437@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)))
    (=>
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>))))
  :qid |qp.fvfDomDef444|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef441|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef442|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef443|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef445|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef446|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef447|)))
(assert (forall ((n@441@01 $Ref)) (!
  (=>
    (Set_in n@441@01 g@346@01)
    (and (= (inv@442@01 n@441@01) n@441@01) (img@443@01 n@441@01)))
  :pattern ((Set_in n@441@01 g@346@01))
  :pattern ((inv@442@01 n@441@01))
  :pattern ((img@443@01 n@441@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@443@01 r) (Set_in (inv@442@01 r) g@346@01)) (= (inv@442@01 r) r))
  :pattern ((inv@442@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)))
    (=>
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>))))
  :qid |qp.fvfDomDef451|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef448|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef449|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef450|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@437@01 r) g@346@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@439@01  $FVF<l>) r) r))
    :pattern ((inv@437@01 r))
    :qid |quant-u-7407|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@442@01 r) g@346@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@444@01  $FVF<r>) r) r))
    :pattern ((inv@442@01 r))
    :qid |quant-u-7410|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01)))
(push) ; 10
; [then-branch: 97 | !(exists_path[Bool]($$((sm@440@01, sm@445@01), g@346@01), v1@416@01, x@347@01)) | live]
; [else-branch: 97 | exists_path[Bool]($$((sm@440@01, sm@445@01), g@346@01), v1@416@01, x@347@01) | live]
(push) ; 11
; [then-branch: 97 | !(exists_path[Bool]($$((sm@440@01, sm@445@01), g@346@01), v1@416@01, x@347@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 97 | exists_path[Bool]($$((sm@440@01, sm@445@01), g@346@01), v1@416@01, x@347@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01))
; [eval] exists_path(old($$(g)), old(x.r), v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 12
(declare-const n@446@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@446@01 g@346@01))
(pop) ; 13
(declare-fun inv@447@01 ($Ref) $Ref)
(declare-fun img@448@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@449@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef452|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef453|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef454|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@446@01 $Ref) (n2@446@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@446@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@449@01  $FVF<l>) n1@446@01) n1@446@01))
      (and
        (Set_in n2@446@01 g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@449@01  $FVF<l>) n2@446@01) n2@446@01))
      (= n1@446@01 n2@446@01))
    (= n1@446@01 n2@446@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@446@01 $Ref)) (!
  (=>
    (Set_in n@446@01 g@346@01)
    (and (= (inv@447@01 n@446@01) n@446@01) (img@448@01 n@446@01)))
  :pattern ((Set_in n@446@01 g@346@01))
  :pattern ((inv@447@01 n@446@01))
  :pattern ((img@448@01 n@446@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@448@01 r) (Set_in (inv@447@01 r) g@346@01)) (= (inv@447@01 r) r))
  :pattern ((inv@447@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@447@01 r) g@346@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@449@01  $FVF<l>) r) r))
  :pattern ((inv@447@01 r))
  :qid |quant-u-7413|)))
(push) ; 13
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r) (= r (inv@447@01 r)))
    (>
      (+
        (ite
          (and
            (img@355@01 r)
            (and
              (Set_in (inv@354@01 r) g@346@01)
              (not (= (inv@354@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7414|))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(declare-const sm@450@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)))
    (=>
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>))))
  :qid |qp.fvfDomDef458|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef455|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef456|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef457|)))
(declare-const n@451@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@451@01 g@346@01))
(pop) ; 13
(declare-fun inv@452@01 ($Ref) $Ref)
(declare-fun img@453@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@454@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef459|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef460|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef461|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@451@01 $Ref) (n2@451@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@451@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@454@01  $FVF<r>) n1@451@01) n1@451@01))
      (and
        (Set_in n2@451@01 g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@454@01  $FVF<r>) n2@451@01) n2@451@01))
      (= n1@451@01 n2@451@01))
    (= n1@451@01 n2@451@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@451@01 $Ref)) (!
  (=>
    (Set_in n@451@01 g@346@01)
    (and (= (inv@452@01 n@451@01) n@451@01) (img@453@01 n@451@01)))
  :pattern ((Set_in n@451@01 g@346@01))
  :pattern ((inv@452@01 n@451@01))
  :pattern ((img@453@01 n@451@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@453@01 r) (Set_in (inv@452@01 r) g@346@01)) (= (inv@452@01 r) r))
  :pattern ((inv@452@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@452@01 r) g@346@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@454@01  $FVF<r>) r) r))
  :pattern ((inv@452@01 r))
  :qid |quant-u-7416|)))
(push) ; 13
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r) (= r (inv@452@01 r)))
    (>
      (+
        (ite
          (and
            (img@359@01 r)
            (and
              (Set_in (inv@358@01 r) g@346@01)
              (not (= (inv@358@01 r) x@347@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@347@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7417|))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(declare-const sm@455@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)))
    (=>
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>))))
  :qid |qp.fvfDomDef465|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef462|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef463|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef464|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@450@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@455@01  $FVF<r>))) g@346@01))
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef452|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef453|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef454|)))
(assert (forall ((n@446@01 $Ref)) (!
  (=>
    (Set_in n@446@01 g@346@01)
    (and (= (inv@447@01 n@446@01) n@446@01) (img@448@01 n@446@01)))
  :pattern ((Set_in n@446@01 g@346@01))
  :pattern ((inv@447@01 n@446@01))
  :pattern ((img@448@01 n@446@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@448@01 r) (Set_in (inv@447@01 r) g@346@01)) (= (inv@447@01 r) r))
  :pattern ((inv@447@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)))
    (=>
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>))))
  :qid |qp.fvfDomDef458|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef455|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef456|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef457|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef459|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef460|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef461|)))
(assert (forall ((n@451@01 $Ref)) (!
  (=>
    (Set_in n@451@01 g@346@01)
    (and (= (inv@452@01 n@451@01) n@451@01) (img@453@01 n@451@01)))
  :pattern ((Set_in n@451@01 g@346@01))
  :pattern ((inv@452@01 n@451@01))
  :pattern ((img@453@01 n@451@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@453@01 r) (Set_in (inv@452@01 r) g@346@01)) (= (inv@452@01 r) r))
  :pattern ((inv@452@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)))
    (=>
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>))))
  :qid |qp.fvfDomDef465|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef462|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef463|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef464|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@447@01 r) g@346@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@449@01  $FVF<l>) r) r))
    :pattern ((inv@447@01 r))
    :qid |quant-u-7413|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@452@01 r) g@346@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@454@01  $FVF<r>) r) r))
    :pattern ((inv@452@01 r))
    :qid |quant-u-7416|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@450@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@455@01  $FVF<r>))) g@346@01)))
; [eval] old(x.r)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@347@01)
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
    :qid |qp.fvfValDef359|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
      (=
        ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
    :qid |qp.fvfValDef360|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef361|))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@359@01 x@347@01)
        (and
          (Set_in (inv@358@01 x@347@01) g@346@01)
          (not (= (inv@358@01 x@347@01) x@347@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef452|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef453|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef454|)))
(assert (forall ((n@446@01 $Ref)) (!
  (=>
    (Set_in n@446@01 g@346@01)
    (and (= (inv@447@01 n@446@01) n@446@01) (img@448@01 n@446@01)))
  :pattern ((Set_in n@446@01 g@346@01))
  :pattern ((inv@447@01 n@446@01))
  :pattern ((img@448@01 n@446@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@448@01 r) (Set_in (inv@447@01 r) g@346@01)) (= (inv@447@01 r) r))
  :pattern ((inv@447@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)))
    (=>
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>))))
  :qid |qp.fvfDomDef458|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef455|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef456|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef457|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef459|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef460|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef461|)))
(assert (forall ((n@451@01 $Ref)) (!
  (=>
    (Set_in n@451@01 g@346@01)
    (and (= (inv@452@01 n@451@01) n@451@01) (img@453@01 n@451@01)))
  :pattern ((Set_in n@451@01 g@346@01))
  :pattern ((inv@452@01 n@451@01))
  :pattern ((img@453@01 n@451@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@453@01 r) (Set_in (inv@452@01 r) g@346@01)) (= (inv@452@01 r) r))
  :pattern ((inv@452@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)))
    (=>
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>))))
  :qid |qp.fvfDomDef465|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef462|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef463|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef464|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (=>
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
  (and
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@447@01 r) g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@449@01  $FVF<l>) r) r))
      :pattern ((inv@447@01 r))
      :qid |quant-u-7413|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@452@01 r) g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@454@01  $FVF<r>) r) r))
      :pattern ((inv@452@01 r))
      :qid |quant-u-7416|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@450@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@455@01  $FVF<r>))) g@346@01))))
(assert (or
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef438|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef439|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef440|)))
(assert (forall ((n@436@01 $Ref)) (!
  (=>
    (Set_in n@436@01 g@346@01)
    (and (= (inv@437@01 n@436@01) n@436@01) (img@438@01 n@436@01)))
  :pattern ((Set_in n@436@01 g@346@01))
  :pattern ((inv@437@01 n@436@01))
  :pattern ((img@438@01 n@436@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@438@01 r) (Set_in (inv@437@01 r) g@346@01)) (= (inv@437@01 r) r))
  :pattern ((inv@437@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)))
    (=>
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>))))
  :qid |qp.fvfDomDef444|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef441|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef442|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef443|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef445|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef446|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef447|)))
(assert (forall ((n@441@01 $Ref)) (!
  (=>
    (Set_in n@441@01 g@346@01)
    (and (= (inv@442@01 n@441@01) n@441@01) (img@443@01 n@441@01)))
  :pattern ((Set_in n@441@01 g@346@01))
  :pattern ((inv@442@01 n@441@01))
  :pattern ((img@443@01 n@441@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@443@01 r) (Set_in (inv@442@01 r) g@346@01)) (= (inv@442@01 r) r))
  :pattern ((inv@442@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)))
    (=>
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>))))
  :qid |qp.fvfDomDef451|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef448|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef449|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef450|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef452|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef453|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef454|)))
(assert (forall ((n@446@01 $Ref)) (!
  (=>
    (Set_in n@446@01 g@346@01)
    (and (= (inv@447@01 n@446@01) n@446@01) (img@448@01 n@446@01)))
  :pattern ((Set_in n@446@01 g@346@01))
  :pattern ((inv@447@01 n@446@01))
  :pattern ((img@448@01 n@446@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@448@01 r) (Set_in (inv@447@01 r) g@346@01)) (= (inv@447@01 r) r))
  :pattern ((inv@447@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)))
    (=>
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>))))
  :qid |qp.fvfDomDef458|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef455|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef456|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef457|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef459|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef460|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef461|)))
(assert (forall ((n@451@01 $Ref)) (!
  (=>
    (Set_in n@451@01 g@346@01)
    (and (= (inv@452@01 n@451@01) n@451@01) (img@453@01 n@451@01)))
  :pattern ((Set_in n@451@01 g@346@01))
  :pattern ((inv@452@01 n@451@01))
  :pattern ((img@453@01 n@451@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@453@01 r) (Set_in (inv@452@01 r) g@346@01)) (= (inv@452@01 r) r))
  :pattern ((inv@452@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)))
    (=>
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>))))
  :qid |qp.fvfDomDef465|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef462|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef463|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef464|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (=>
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
  (and
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@437@01 r) g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@439@01  $FVF<l>) r) r))
      :pattern ((inv@437@01 r))
      :qid |quant-u-7407|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@442@01 r) g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@444@01  $FVF<r>) r) r))
      :pattern ((inv@442@01 r))
      :qid |quant-u-7410|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01)
    (=>
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
      (and
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@447@01 r) g@346@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@449@01  $FVF<l>) r) r))
          :pattern ((inv@447@01 r))
          :qid |quant-u-7413|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@452@01 r) g@346@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@454@01  $FVF<r>) r) r))
          :pattern ((inv@452@01 r))
          :qid |quant-u-7416|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@450@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@455@01  $FVF<r>))) g@346@01)))
    (or
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01))))))
(assert (or
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 95 | v1@416@01 == v2@417@01]
(assert (= v1@416@01 v2@417@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@418@01 $Ref)) (!
  (=>
    (Set_in n@418@01 g@346@01)
    (and (= (inv@419@01 n@418@01) n@418@01) (img@420@01 n@418@01)))
  :pattern ((Set_in n@418@01 g@346@01))
  :pattern ((inv@419@01 n@418@01))
  :pattern ((img@420@01 n@418@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@420@01 r) (Set_in (inv@419@01 r) g@346@01)) (= (inv@419@01 r) r))
  :pattern ((inv@419@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>)))
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r)))
    (=>
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r))
      (Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>))))
  :qid |qp.fvfDomDef419|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@421@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef416|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@421@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef417|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef418|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@425@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef420|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@425@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef421|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef422|)))
(assert (forall ((n@422@01 $Ref)) (!
  (=>
    (Set_in n@422@01 g@346@01)
    (and (= (inv@423@01 n@422@01) n@422@01) (img@424@01 n@422@01)))
  :pattern ((Set_in n@422@01 g@346@01))
  :pattern ((inv@423@01 n@422@01))
  :pattern ((img@424@01 n@422@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@424@01 r) (Set_in (inv@423@01 r) g@346@01)) (= (inv@423@01 r) r))
  :pattern ((inv@423@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>)))
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r)))
    (=>
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r))
      (Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>))))
  :qid |qp.fvfDomDef426|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@426@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef423|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@426@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef424|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef425|)))
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@346@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@346@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@346@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>)))
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r))
      (Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>))))
  :qid |qp.fvfDomDef430|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@430@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef427|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@430@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef428|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef429|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@434@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef431|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@434@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef432|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef433|)))
(assert (forall ((n@431@01 $Ref)) (!
  (=>
    (Set_in n@431@01 g@346@01)
    (and (= (inv@432@01 n@431@01) n@431@01) (img@433@01 n@431@01)))
  :pattern ((Set_in n@431@01 g@346@01))
  :pattern ((inv@432@01 n@431@01))
  :pattern ((img@433@01 n@431@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@433@01 r) (Set_in (inv@432@01 r) g@346@01)) (= (inv@432@01 r) r))
  :pattern ((inv@432@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>)))
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r)))
    (=>
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r))
      (Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>))))
  :qid |qp.fvfDomDef437|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@435@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef434|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@435@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef435|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef436|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef438|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef439|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef440|)))
(assert (forall ((n@436@01 $Ref)) (!
  (=>
    (Set_in n@436@01 g@346@01)
    (and (= (inv@437@01 n@436@01) n@436@01) (img@438@01 n@436@01)))
  :pattern ((Set_in n@436@01 g@346@01))
  :pattern ((inv@437@01 n@436@01))
  :pattern ((img@438@01 n@436@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@438@01 r) (Set_in (inv@437@01 r) g@346@01)) (= (inv@437@01 r) r))
  :pattern ((inv@437@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)))
    (=>
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>))))
  :qid |qp.fvfDomDef444|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef441|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef442|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef443|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef445|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef446|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef447|)))
(assert (forall ((n@441@01 $Ref)) (!
  (=>
    (Set_in n@441@01 g@346@01)
    (and (= (inv@442@01 n@441@01) n@441@01) (img@443@01 n@441@01)))
  :pattern ((Set_in n@441@01 g@346@01))
  :pattern ((inv@442@01 n@441@01))
  :pattern ((img@443@01 n@441@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@443@01 r) (Set_in (inv@442@01 r) g@346@01)) (= (inv@442@01 r) r))
  :pattern ((inv@442@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)))
    (=>
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>))))
  :qid |qp.fvfDomDef451|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef448|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef449|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef450|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef452|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef453|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef454|)))
(assert (forall ((n@446@01 $Ref)) (!
  (=>
    (Set_in n@446@01 g@346@01)
    (and (= (inv@447@01 n@446@01) n@446@01) (img@448@01 n@446@01)))
  :pattern ((Set_in n@446@01 g@346@01))
  :pattern ((inv@447@01 n@446@01))
  :pattern ((img@448@01 n@446@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@448@01 r) (Set_in (inv@447@01 r) g@346@01)) (= (inv@447@01 r) r))
  :pattern ((inv@447@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)))
    (=>
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>))))
  :qid |qp.fvfDomDef458|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef455|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef456|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef457|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef459|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef460|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef461|)))
(assert (forall ((n@451@01 $Ref)) (!
  (=>
    (Set_in n@451@01 g@346@01)
    (and (= (inv@452@01 n@451@01) n@451@01) (img@453@01 n@451@01)))
  :pattern ((Set_in n@451@01 g@346@01))
  :pattern ((inv@452@01 n@451@01))
  :pattern ((img@453@01 n@451@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@453@01 r) (Set_in (inv@452@01 r) g@346@01)) (= (inv@452@01 r) r))
  :pattern ((inv@452@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)))
    (=>
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>))))
  :qid |qp.fvfDomDef465|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef462|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef463|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef464|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (=>
  (not (= v1@416@01 v2@417@01))
  (and
    (not (= v1@416@01 v2@417@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@419@01 r) g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
      :pattern ((inv@419@01 r))
      :qid |quant-u-7395|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@423@01 r) g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@425@01  $FVF<r>) r) r))
      :pattern ((inv@423@01 r))
      :qid |quant-u-7398|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@421@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@426@01  $FVF<r>))) g@346@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@428@01 r) g@346@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
      :pattern ((inv@428@01 r))
      :qid |quant-u-7401|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@432@01 r) g@346@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@434@01  $FVF<r>) r) r))
      :pattern ((inv@432@01 r))
      :qid |quant-u-7404|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01)
    (=>
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
      (and
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@437@01 r) g@346@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@439@01  $FVF<l>) r) r))
          :pattern ((inv@437@01 r))
          :qid |quant-u-7407|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@442@01 r) g@346@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@444@01  $FVF<r>) r) r))
          :pattern ((inv@442@01 r))
          :qid |quant-u-7410|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01)
        (=>
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@447@01 r) g@346@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@449@01  $FVF<l>) r) r))
              :pattern ((inv@447@01 r))
              :qid |quant-u-7413|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@452@01 r) g@346@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@454@01  $FVF<r>) r) r))
              :pattern ((inv@452@01 r))
              :qid |quant-u-7416|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@450@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@455@01  $FVF<r>))) g@346@01)))
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)))))
    (or
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01))))))
; Joined path conditions
(assert (or (= v1@416@01 v2@417@01) (not (= v1@416@01 v2@417@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@418@01 $Ref)) (!
  (=>
    (Set_in n@418@01 g@346@01)
    (and (= (inv@419@01 n@418@01) n@418@01) (img@420@01 n@418@01)))
  :pattern ((Set_in n@418@01 g@346@01))
  :pattern ((inv@419@01 n@418@01))
  :pattern ((img@420@01 n@418@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@420@01 r) (Set_in (inv@419@01 r) g@346@01)) (= (inv@419@01 r) r))
  :pattern ((inv@419@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>)))
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r)))
    (=>
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r))
      (Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>))))
  :qid |qp.fvfDomDef419|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@421@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef416|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@421@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef417|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef418|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@425@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef420|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@425@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef421|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef422|)))
(assert (forall ((n@422@01 $Ref)) (!
  (=>
    (Set_in n@422@01 g@346@01)
    (and (= (inv@423@01 n@422@01) n@422@01) (img@424@01 n@422@01)))
  :pattern ((Set_in n@422@01 g@346@01))
  :pattern ((inv@423@01 n@422@01))
  :pattern ((img@424@01 n@422@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@424@01 r) (Set_in (inv@423@01 r) g@346@01)) (= (inv@423@01 r) r))
  :pattern ((inv@423@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>)))
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r)))
    (=>
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r))
      (Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>))))
  :qid |qp.fvfDomDef426|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@426@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef423|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@426@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef424|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef425|)))
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@346@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@346@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@346@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>)))
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r))
      (Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>))))
  :qid |qp.fvfDomDef430|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@430@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef427|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@430@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef428|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef429|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@434@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef431|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@434@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef432|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef433|)))
(assert (forall ((n@431@01 $Ref)) (!
  (=>
    (Set_in n@431@01 g@346@01)
    (and (= (inv@432@01 n@431@01) n@431@01) (img@433@01 n@431@01)))
  :pattern ((Set_in n@431@01 g@346@01))
  :pattern ((inv@432@01 n@431@01))
  :pattern ((img@433@01 n@431@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@433@01 r) (Set_in (inv@432@01 r) g@346@01)) (= (inv@432@01 r) r))
  :pattern ((inv@432@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>)))
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r)))
    (=>
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r))
      (Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>))))
  :qid |qp.fvfDomDef437|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@435@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef434|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@435@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef435|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef436|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef438|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef439|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef440|)))
(assert (forall ((n@436@01 $Ref)) (!
  (=>
    (Set_in n@436@01 g@346@01)
    (and (= (inv@437@01 n@436@01) n@436@01) (img@438@01 n@436@01)))
  :pattern ((Set_in n@436@01 g@346@01))
  :pattern ((inv@437@01 n@436@01))
  :pattern ((img@438@01 n@436@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@438@01 r) (Set_in (inv@437@01 r) g@346@01)) (= (inv@437@01 r) r))
  :pattern ((inv@437@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)))
    (=>
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>))))
  :qid |qp.fvfDomDef444|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef441|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef442|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef443|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef445|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef446|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef447|)))
(assert (forall ((n@441@01 $Ref)) (!
  (=>
    (Set_in n@441@01 g@346@01)
    (and (= (inv@442@01 n@441@01) n@441@01) (img@443@01 n@441@01)))
  :pattern ((Set_in n@441@01 g@346@01))
  :pattern ((inv@442@01 n@441@01))
  :pattern ((img@443@01 n@441@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@443@01 r) (Set_in (inv@442@01 r) g@346@01)) (= (inv@442@01 r) r))
  :pattern ((inv@442@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)))
    (=>
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>))))
  :qid |qp.fvfDomDef451|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef448|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef449|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef450|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef452|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef453|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef454|)))
(assert (forall ((n@446@01 $Ref)) (!
  (=>
    (Set_in n@446@01 g@346@01)
    (and (= (inv@447@01 n@446@01) n@446@01) (img@448@01 n@446@01)))
  :pattern ((Set_in n@446@01 g@346@01))
  :pattern ((inv@447@01 n@446@01))
  :pattern ((img@448@01 n@446@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@448@01 r) (Set_in (inv@447@01 r) g@346@01)) (= (inv@447@01 r) r))
  :pattern ((inv@447@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)))
    (=>
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>))))
  :qid |qp.fvfDomDef458|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef455|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef456|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef457|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef459|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef460|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef461|)))
(assert (forall ((n@451@01 $Ref)) (!
  (=>
    (Set_in n@451@01 g@346@01)
    (and (= (inv@452@01 n@451@01) n@451@01) (img@453@01 n@451@01)))
  :pattern ((Set_in n@451@01 g@346@01))
  :pattern ((inv@452@01 n@451@01))
  :pattern ((img@453@01 n@451@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@453@01 r) (Set_in (inv@452@01 r) g@346@01)) (= (inv@452@01 r) r))
  :pattern ((inv@452@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)))
    (=>
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>))))
  :qid |qp.fvfDomDef465|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef462|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef463|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef464|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@416@01 $Ref) (v2@417@01 $Ref)) (!
  (and
    (=>
      (not (= v1@416@01 v2@417@01))
      (and
        (not (= v1@416@01 v2@417@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@419@01 r) g@346@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
          :pattern ((inv@419@01 r))
          :qid |quant-u-7395|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@423@01 r) g@346@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@425@01  $FVF<r>) r) r))
          :pattern ((inv@423@01 r))
          :qid |quant-u-7398|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@421@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@426@01  $FVF<r>))) g@346@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@428@01 r) g@346@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
          :pattern ((inv@428@01 r))
          :qid |quant-u-7401|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@432@01 r) g@346@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@434@01  $FVF<r>) r) r))
          :pattern ((inv@432@01 r))
          :qid |quant-u-7404|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01)
        (=>
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@437@01 r) g@346@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@439@01  $FVF<l>) r) r))
              :pattern ((inv@437@01 r))
              :qid |quant-u-7407|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@442@01 r) g@346@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@444@01  $FVF<r>) r) r))
              :pattern ((inv@442@01 r))
              :qid |quant-u-7410|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01)
            (=>
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
              (and
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@447@01 r) g@346@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@449@01  $FVF<l>) r) r))
                  :pattern ((inv@447@01 r))
                  :qid |quant-u-7413|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@452@01 r) g@346@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@454@01  $FVF<r>) r) r))
                  :pattern ((inv@452@01 r))
                  :qid |quant-u-7416|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@450@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@455@01  $FVF<r>))) g@346@01)))
            (or
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)))))
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)))))
    (or (= v1@416@01 v2@417@01) (not (= v1@416@01 v2@417@01))))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@421@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@426@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@302@34@307@10-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 94 | Lookup(r, sm@360@01, x@347@01) == Null]
(assert (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@418@01 $Ref)) (!
  (=>
    (Set_in n@418@01 g@346@01)
    (and (= (inv@419@01 n@418@01) n@418@01) (img@420@01 n@418@01)))
  :pattern ((Set_in n@418@01 g@346@01))
  :pattern ((inv@419@01 n@418@01))
  :pattern ((img@420@01 n@418@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@420@01 r) (Set_in (inv@419@01 r) g@346@01)) (= (inv@419@01 r) r))
  :pattern ((inv@419@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>)))
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r)))
    (=>
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r))
      (Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@421@01  $FVF<l>))))
  :qid |qp.fvfDomDef419|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@421@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@364@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@364@01  $FVF<l>) r))
  :qid |qp.fvfValDef416|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@419@01 r) g@346@01) (img@420@01 r))
      (and
        (img@370@01 r)
        (and (Set_in (inv@369@01 r) g@346@01) (not (= (inv@369@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@421@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r))
  :qid |qp.fvfValDef417|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@364@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@421@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef418|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@425@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef420|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@425@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef421|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@425@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef422|)))
(assert (forall ((n@422@01 $Ref)) (!
  (=>
    (Set_in n@422@01 g@346@01)
    (and (= (inv@423@01 n@422@01) n@422@01) (img@424@01 n@422@01)))
  :pattern ((Set_in n@422@01 g@346@01))
  :pattern ((inv@423@01 n@422@01))
  :pattern ((img@424@01 n@422@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@424@01 r) (Set_in (inv@423@01 r) g@346@01)) (= (inv@423@01 r) r))
  :pattern ((inv@423@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>)))
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r)))
    (=>
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r))
      (Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@426@01  $FVF<r>))))
  :qid |qp.fvfDomDef426|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r))
      (and
        (img@374@01 r)
        (and (Set_in (inv@373@01 r) g@346@01) (not (= (inv@373@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@426@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r))
  :qid |qp.fvfValDef423|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@423@01 r) g@346@01) (img@424@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@426@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@366@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@366@01  $FVF<r>) r))
  :qid |qp.fvfValDef424|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@366@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@426@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef425|)))
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@346@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@346@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@346@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>)))
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r))
      (Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@430@01  $FVF<l>))))
  :qid |qp.fvfDomDef430|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@430@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef427|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@346@01) (img@429@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@430@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef428|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@430@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef429|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@434@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef431|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@434@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef432|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@434@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef433|)))
(assert (forall ((n@431@01 $Ref)) (!
  (=>
    (Set_in n@431@01 g@346@01)
    (and (= (inv@432@01 n@431@01) n@431@01) (img@433@01 n@431@01)))
  :pattern ((Set_in n@431@01 g@346@01))
  :pattern ((inv@432@01 n@431@01))
  :pattern ((img@433@01 n@431@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@433@01 r) (Set_in (inv@432@01 r) g@346@01)) (= (inv@432@01 r) r))
  :pattern ((inv@432@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>)))
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r)))
    (=>
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r))
      (Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@435@01  $FVF<r>))))
  :qid |qp.fvfDomDef437|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@435@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef434|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@432@01 r) g@346@01) (img@433@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@435@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef435|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@435@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef436|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef438|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@439@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef439|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@439@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef440|)))
(assert (forall ((n@436@01 $Ref)) (!
  (=>
    (Set_in n@436@01 g@346@01)
    (and (= (inv@437@01 n@436@01) n@436@01) (img@438@01 n@436@01)))
  :pattern ((Set_in n@436@01 g@346@01))
  :pattern ((inv@437@01 n@436@01))
  :pattern ((img@438@01 n@436@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@438@01 r) (Set_in (inv@437@01 r) g@346@01)) (= (inv@437@01 r) r))
  :pattern ((inv@437@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)))
    (=>
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@440@01  $FVF<l>))))
  :qid |qp.fvfDomDef444|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef441|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@437@01 r) g@346@01) (img@438@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@440@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef442|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@440@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef443|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef445|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@444@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef446|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@444@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef447|)))
(assert (forall ((n@441@01 $Ref)) (!
  (=>
    (Set_in n@441@01 g@346@01)
    (and (= (inv@442@01 n@441@01) n@441@01) (img@443@01 n@441@01)))
  :pattern ((Set_in n@441@01 g@346@01))
  :pattern ((inv@442@01 n@441@01))
  :pattern ((img@443@01 n@441@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@443@01 r) (Set_in (inv@442@01 r) g@346@01)) (= (inv@442@01 r) r))
  :pattern ((inv@442@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)))
    (=>
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@445@01  $FVF<r>))))
  :qid |qp.fvfDomDef451|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef448|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@442@01 r) g@346@01) (img@443@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@445@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef449|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@445@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef450|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef452|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@355@01 r)
      (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01))))
    (=
      ($FVF.lookup_l (as sm@449@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef453|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@449@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef454|)))
(assert (forall ((n@446@01 $Ref)) (!
  (=>
    (Set_in n@446@01 g@346@01)
    (and (= (inv@447@01 n@446@01) n@446@01) (img@448@01 n@446@01)))
  :pattern ((Set_in n@446@01 g@346@01))
  :pattern ((inv@447@01 n@446@01))
  :pattern ((img@448@01 n@446@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@448@01 r) (Set_in (inv@447@01 r) g@346@01)) (= (inv@447@01 r) r))
  :pattern ((inv@447@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)))
    (=>
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@450@01  $FVF<l>))))
  :qid |qp.fvfDomDef458|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@349@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@349@01  $FVF<l>) r))
  :qid |qp.fvfValDef455|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@447@01 r) g@346@01) (img@448@01 r))
      (and
        (img@355@01 r)
        (and (Set_in (inv@354@01 r) g@346@01) (not (= (inv@354@01 r) x@347@01)))))
    (=
      ($FVF.lookup_l (as sm@450@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r)))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r))
  :qid |qp.fvfValDef456|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@349@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@450@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef457|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef459|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@454@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef460|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@454@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef461|)))
(assert (forall ((n@451@01 $Ref)) (!
  (=>
    (Set_in n@451@01 g@346@01)
    (and (= (inv@452@01 n@451@01) n@451@01) (img@453@01 n@451@01)))
  :pattern ((Set_in n@451@01 g@346@01))
  :pattern ((inv@452@01 n@451@01))
  :pattern ((img@453@01 n@451@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@453@01 r) (Set_in (inv@452@01 r) g@346@01)) (= (inv@452@01 r) r))
  :pattern ((inv@452@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)))
    (=>
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@455@01  $FVF<r>))))
  :qid |qp.fvfDomDef465|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r))
      (and
        (img@359@01 r)
        (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01)))))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef462|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@452@01 r) g@346@01) (img@453@01 r)) (= r x@347@01))
    (=
      ($FVF.lookup_r (as sm@455@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef463|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@455@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef464|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@347@01)
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@351@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@351@01  $FVF<r>) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@359@01 r)
      (and (Set_in (inv@358@01 r) g@346@01) (not (= (inv@358@01 r) x@347@01))))
    (=
      ($FVF.lookup_r (as sm@360@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r)))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r (as sm@351@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@360@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef361|)))
(assert (=>
  (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))
    (forall ((v1@416@01 $Ref) (v2@417@01 $Ref)) (!
      (and
        (=>
          (not (= v1@416@01 v2@417@01))
          (and
            (not (= v1@416@01 v2@417@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@419@01 r) g@346@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@371@01  $FVF<l>) r) r))
              :pattern ((inv@419@01 r))
              :qid |quant-u-7395|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@423@01 r) g@346@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@425@01  $FVF<r>) r) r))
              :pattern ((inv@423@01 r))
              :qid |quant-u-7398|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@421@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@426@01  $FVF<r>))) g@346@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@428@01 r) g@346@01)
                ($FVF.loc_l ($FVF.lookup_l (as sm@356@01  $FVF<l>) r) r))
              :pattern ((inv@428@01 r))
              :qid |quant-u-7401|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@432@01 r) g@346@01)
                ($FVF.loc_r ($FVF.lookup_r (as sm@434@01  $FVF<r>) r) r))
              :pattern ((inv@432@01 r))
              :qid |quant-u-7404|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01)
            (=>
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
              (and
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@437@01 r) g@346@01)
                    ($FVF.loc_l ($FVF.lookup_l (as sm@439@01  $FVF<l>) r) r))
                  :pattern ((inv@437@01 r))
                  :qid |quant-u-7407|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@442@01 r) g@346@01)
                    ($FVF.loc_r ($FVF.lookup_r (as sm@444@01  $FVF<r>) r) r))
                  :pattern ((inv@442@01 r))
                  :qid |quant-u-7410|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01)
                (=>
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
                  (and
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@447@01 r) g@346@01)
                        ($FVF.loc_l ($FVF.lookup_l (as sm@449@01  $FVF<l>) r) r))
                      :pattern ((inv@447@01 r))
                      :qid |quant-u-7413|))
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@452@01 r) g@346@01)
                        ($FVF.loc_r ($FVF.lookup_r (as sm@454@01  $FVF<r>) r) r))
                      :pattern ((inv@452@01 r))
                      :qid |quant-u-7416|))
                    ($$%precondition ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@450@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@455@01  $FVF<r>))) g@346@01)))
                (or
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
                  (not
                    (exists_path<Bool> ($$ ($Snap.combine
                      ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
                      ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)))))
            (or
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)))))
        (or (= v1@416@01 v2@417@01) (not (= v1@416@01 v2@417@01))))
      :pattern ((exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@421@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@426@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@302@34@307@10-aux|)))))
; Joined path conditions
(assert (=>
  (not (= ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) $Ref.null))
  (forall ((v1@416@01 $Ref) (v2@417@01 $Ref)) (!
    (=>
      (not (= v1@416@01 v2@417@01))
      (=
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@421@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@426@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
        (and
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@430@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@435@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01)
          (not
            (and
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@440@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@445@01  $FVF<r>))) g@346@01) v1@416@01 x@347@01)
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@450@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@455@01  $FVF<r>))) g@346@01) ($FVF.lookup_r (as sm@360@01  $FVF<r>) x@347@01) v2@417@01))))))
    :pattern ((exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@421@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@426@01  $FVF<r>))) g@346@01) v1@416@01 v2@417@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@302@34@307@10|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- join ----------
(declare-const g0@456@01 Set<$Ref>)
(declare-const g1@457@01 Set<$Ref>)
(declare-const x0@458@01 $Ref)
(declare-const x1@459@01 $Ref)
(declare-const x@460@01 $Ref)
(declare-const g0@461@01 Set<$Ref>)
(declare-const g1@462@01 Set<$Ref>)
(declare-const x0@463@01 $Ref)
(declare-const x1@464@01 $Ref)
(declare-const x@465@01 $Ref)
(push) ; 1
(declare-const $t@466@01 $Snap)
(assert (= $t@466@01 ($Snap.combine ($Snap.first $t@466@01) ($Snap.second $t@466@01))))
(assert (= ($Snap.first $t@466@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@461@01)))
(assert (=
  ($Snap.second $t@466@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@466@01))
    ($Snap.second ($Snap.second $t@466@01)))))
(declare-const n@467@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@467@01 g0@461@01))
(declare-const sm@468@01 $FVF<l>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@469@01 ($Ref) $Ref)
(declare-fun img@470@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@467@01 $Ref) (n2@467@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@467@01 g0@461@01)
      (Set_in n2@467@01 g0@461@01)
      (= n1@467@01 n2@467@01))
    (= n1@467@01 n2@467@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@467@01 $Ref)) (!
  (=>
    (Set_in n@467@01 g0@461@01)
    (and (= (inv@469@01 n@467@01) n@467@01) (img@470@01 n@467@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) n@467@01) n@467@01))
  :qid |quant-u-7419|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (= (inv@469@01 r) r))
  :pattern ((inv@469@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@467@01 $Ref)) (!
  (=> (Set_in n@467@01 g0@461@01) (not (= n@467@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) n@467@01) n@467@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@471@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@471@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef467|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef468|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@469@01 r) g0@461@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) r) r))
  :pattern ((inv@469@01 r))
  :qid |quant-u-7420|)))
(assert (=
  ($Snap.second ($Snap.second $t@466@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@466@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))
(declare-const n$0@472@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0)
(assert (Set_in n$0@472@01 g0@461@01))
(declare-const sm@473@01 $FVF<r>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@474@01 ($Ref) $Ref)
(declare-fun img@475@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$01@472@01 $Ref) (n$02@472@01 $Ref)) (!
  (=>
    (and
      (Set_in n$01@472@01 g0@461@01)
      (Set_in n$02@472@01 g0@461@01)
      (= n$01@472@01 n$02@472@01))
    (= n$01@472@01 n$02@472@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@472@01 $Ref)) (!
  (=>
    (Set_in n$0@472@01 g0@461@01)
    (and (= (inv@474@01 n$0@472@01) n$0@472@01) (img@475@01 n$0@472@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) n$0@472@01) n$0@472@01))
  :qid |quant-u-7422|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (= (inv@474@01 r) r))
  :pattern ((inv@474@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$0@472@01 $Ref)) (!
  (=> (Set_in n$0@472@01 g0@461@01) (not (= n$0@472@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) n$0@472@01) n$0@472@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@476@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@476@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef470|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef471|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@474@01 r) g0@461@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) r) r))
  :pattern ((inv@474@01 r))
  :qid |quant-u-7423|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@466@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@466@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@466@01))))
  $Snap.unit))
; [eval] (forall n$1: Ref :: { (n$1.l in g0) } { (n$1 in g0), n$1.l } (n$1 in g0) && n$1.l != null ==> (n$1.l in g0))
(declare-const n$1@477@01 $Ref)
(push) ; 2
; [eval] (n$1 in g0) && n$1.l != null ==> (n$1.l in g0)
; [eval] (n$1 in g0) && n$1.l != null
; [eval] (n$1 in g0)
(push) ; 3
; [then-branch: 98 | !(n$1@477@01 in g0@461@01) | live]
; [else-branch: 98 | n$1@477@01 in g0@461@01 | live]
(push) ; 4
; [then-branch: 98 | !(n$1@477@01 in g0@461@01)]
(assert (not (Set_in n$1@477@01 g0@461@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 98 | n$1@477@01 in g0@461@01]
(assert (Set_in n$1@477@01 g0@461@01))
; [eval] n$1.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (=
        ($FVF.lookup_l (as sm@471@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef467|))
  (forall ((r $Ref)) (!
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef468|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) n$1@477@01))
(push) ; 5
(assert (not (and (img@470@01 n$1@477@01) (Set_in (inv@469@01 n$1@477@01) g0@461@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@471@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef467|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef468|)))
(assert (=>
  (Set_in n$1@477@01 g0@461@01)
  (and
    (Set_in n$1@477@01 g0@461@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) n$1@477@01))))
(assert (or (Set_in n$1@477@01 g0@461@01) (not (Set_in n$1@477@01 g0@461@01))))
(push) ; 3
; [then-branch: 99 | n$1@477@01 in g0@461@01 && Lookup(l, sm@471@01, n$1@477@01) != Null | live]
; [else-branch: 99 | !(n$1@477@01 in g0@461@01 && Lookup(l, sm@471@01, n$1@477@01) != Null) | live]
(push) ; 4
; [then-branch: 99 | n$1@477@01 in g0@461@01 && Lookup(l, sm@471@01, n$1@477@01) != Null]
(assert (and
  (Set_in n$1@477@01 g0@461@01)
  (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null))))
; [eval] (n$1.l in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (=
        ($FVF.lookup_l (as sm@471@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef467|))
  (forall ((r $Ref)) (!
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef468|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) n$1@477@01))
(push) ; 5
(assert (not (and (img@470@01 n$1@477@01) (Set_in (inv@469@01 n$1@477@01) g0@461@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 99 | !(n$1@477@01 in g0@461@01 && Lookup(l, sm@471@01, n$1@477@01) != Null)]
(assert (not
  (and
    (Set_in n$1@477@01 g0@461@01)
    (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@471@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef467|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef468|)))
(assert (=>
  (and
    (Set_in n$1@477@01 g0@461@01)
    (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null)))
  (and
    (Set_in n$1@477@01 g0@461@01)
    (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) n$1@477@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@477@01 g0@461@01)
      (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null))))
  (and
    (Set_in n$1@477@01 g0@461@01)
    (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@471@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef467|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@471@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef468|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$1@477@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@477@01 g0@461@01)
      (and
        (Set_in n$1@477@01 g0@461@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) n$1@477@01)))
    (or (Set_in n$1@477@01 g0@461@01) (not (Set_in n$1@477@01 g0@461@01)))
    (=>
      (and
        (Set_in n$1@477@01 g0@461@01)
        (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null)))
      (and
        (Set_in n$1@477@01 g0@461@01)
        (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) n$1@477@01)))
    (or
      (not
        (and
          (Set_in n$1@477@01 g0@461@01)
          (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null))))
      (and
        (Set_in n$1@477@01 g0@461@01)
        (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) g0@461@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@311@14@311@23-aux|)))
(assert (forall ((n$1@477@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@477@01 g0@461@01)
      (and
        (Set_in n$1@477@01 g0@461@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) n$1@477@01)))
    (or (Set_in n$1@477@01 g0@461@01) (not (Set_in n$1@477@01 g0@461@01)))
    (=>
      (and
        (Set_in n$1@477@01 g0@461@01)
        (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null)))
      (and
        (Set_in n$1@477@01 g0@461@01)
        (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) n$1@477@01)))
    (or
      (not
        (and
          (Set_in n$1@477@01 g0@461@01)
          (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null))))
      (and
        (Set_in n$1@477@01 g0@461@01)
        (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null)))))
  :pattern ((Set_in n$1@477@01 g0@461@01) ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) n$1@477@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@311@14@311@23-aux|)))
(assert (forall ((n$1@477@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@477@01 g0@461@01)
      (not (= ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) g0@461@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) g0@461@01))
  :pattern ((Set_in n$1@477@01 g0@461@01) ($FVF.loc_l ($FVF.lookup_l (as sm@471@01  $FVF<l>) n$1@477@01) n$1@477@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@311@14@311@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.r in g0) } { (n$2 in g0), n$2.r } (n$2 in g0) && n$2.r != null ==> (n$2.r in g0))
(declare-const n$2@478@01 $Ref)
(push) ; 2
; [eval] (n$2 in g0) && n$2.r != null ==> (n$2.r in g0)
; [eval] (n$2 in g0) && n$2.r != null
; [eval] (n$2 in g0)
(push) ; 3
; [then-branch: 100 | !(n$2@478@01 in g0@461@01) | live]
; [else-branch: 100 | n$2@478@01 in g0@461@01 | live]
(push) ; 4
; [then-branch: 100 | !(n$2@478@01 in g0@461@01)]
(assert (not (Set_in n$2@478@01 g0@461@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 100 | n$2@478@01 in g0@461@01]
(assert (Set_in n$2@478@01 g0@461@01))
; [eval] n$2.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (=
        ($FVF.lookup_r (as sm@476@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
    :qid |qp.fvfValDef470|))
  (forall ((r $Ref)) (!
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef471|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) n$2@478@01))
(push) ; 5
(assert (not (and (img@475@01 n$2@478@01) (Set_in (inv@474@01 n$2@478@01) g0@461@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@476@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef470|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef471|)))
(assert (=>
  (Set_in n$2@478@01 g0@461@01)
  (and
    (Set_in n$2@478@01 g0@461@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) n$2@478@01))))
(assert (or (Set_in n$2@478@01 g0@461@01) (not (Set_in n$2@478@01 g0@461@01))))
(push) ; 3
; [then-branch: 101 | n$2@478@01 in g0@461@01 && Lookup(r, sm@476@01, n$2@478@01) != Null | live]
; [else-branch: 101 | !(n$2@478@01 in g0@461@01 && Lookup(r, sm@476@01, n$2@478@01) != Null) | live]
(push) ; 4
; [then-branch: 101 | n$2@478@01 in g0@461@01 && Lookup(r, sm@476@01, n$2@478@01) != Null]
(assert (and
  (Set_in n$2@478@01 g0@461@01)
  (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null))))
; [eval] (n$2.r in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (=
        ($FVF.lookup_r (as sm@476@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
    :qid |qp.fvfValDef470|))
  (forall ((r $Ref)) (!
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef471|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) n$2@478@01))
(push) ; 5
(assert (not (and (img@475@01 n$2@478@01) (Set_in (inv@474@01 n$2@478@01) g0@461@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 101 | !(n$2@478@01 in g0@461@01 && Lookup(r, sm@476@01, n$2@478@01) != Null)]
(assert (not
  (and
    (Set_in n$2@478@01 g0@461@01)
    (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@476@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef470|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef471|)))
(assert (=>
  (and
    (Set_in n$2@478@01 g0@461@01)
    (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null)))
  (and
    (Set_in n$2@478@01 g0@461@01)
    (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) n$2@478@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@478@01 g0@461@01)
      (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null))))
  (and
    (Set_in n$2@478@01 g0@461@01)
    (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@476@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef470|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@476@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef471|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@478@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@478@01 g0@461@01)
      (and
        (Set_in n$2@478@01 g0@461@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) n$2@478@01)))
    (or (Set_in n$2@478@01 g0@461@01) (not (Set_in n$2@478@01 g0@461@01)))
    (=>
      (and
        (Set_in n$2@478@01 g0@461@01)
        (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null)))
      (and
        (Set_in n$2@478@01 g0@461@01)
        (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) n$2@478@01)))
    (or
      (not
        (and
          (Set_in n$2@478@01 g0@461@01)
          (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null))))
      (and
        (Set_in n$2@478@01 g0@461@01)
        (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) g0@461@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@311@14@311@23-aux|)))
(assert (forall ((n$2@478@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@478@01 g0@461@01)
      (and
        (Set_in n$2@478@01 g0@461@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) n$2@478@01)))
    (or (Set_in n$2@478@01 g0@461@01) (not (Set_in n$2@478@01 g0@461@01)))
    (=>
      (and
        (Set_in n$2@478@01 g0@461@01)
        (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null)))
      (and
        (Set_in n$2@478@01 g0@461@01)
        (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) n$2@478@01)))
    (or
      (not
        (and
          (Set_in n$2@478@01 g0@461@01)
          (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null))))
      (and
        (Set_in n$2@478@01 g0@461@01)
        (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null)))))
  :pattern ((Set_in n$2@478@01 g0@461@01) ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) n$2@478@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@311@14@311@23-aux|)))
(assert (forall ((n$2@478@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@478@01 g0@461@01)
      (not (= ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) g0@461@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) g0@461@01))
  :pattern ((Set_in n$2@478@01 g0@461@01) ($FVF.loc_r ($FVF.lookup_r (as sm@476@01  $FVF<r>) n$2@478@01) n$2@478@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@311@14@311@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))
  $Snap.unit))
; [eval] (x0 in g0)
(assert (Set_in x0@463@01 g0@461@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))
  $Snap.unit))
; [eval] (x in g0)
(assert (Set_in x@465@01 g0@461@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@462@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))
(declare-const n$3@479@01 $Ref)
(push) ; 2
; [eval] (n$3 in g1)
(assert (Set_in n$3@479@01 g1@462@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@480@01 ($Ref) $Ref)
(declare-fun img@481@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$31@479@01 $Ref) (n$32@479@01 $Ref)) (!
  (=>
    (and
      (Set_in n$31@479@01 g1@462@01)
      (Set_in n$32@479@01 g1@462@01)
      (= n$31@479@01 n$32@479@01))
    (= n$31@479@01 n$32@479@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@479@01 $Ref)) (!
  (=>
    (Set_in n$3@479@01 g1@462@01)
    (and (= (inv@480@01 n$3@479@01) n$3@479@01) (img@481@01 n$3@479@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) n$3@479@01) n$3@479@01))
  :qid |quant-u-7425|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (= (inv@480@01 r) r))
  :pattern ((inv@480@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@479@01 $Ref)) (!
  (=> (Set_in n$3@479@01 g1@462@01) (not (= n$3@479@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) n$3@479@01) n$3@479@01))
  :qid |l-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$3@479@01 n@467@01)
    (=
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))))
  
  :qid |quant-u-7426|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const sm@482@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef472|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef473|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef474|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@480@01 r) g1@462@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
  :pattern ((inv@480@01 r))
  :qid |quant-u-7427|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))
(declare-const n$4@483@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$4 in g1)
(assert (Set_in n$4@483@01 g1@462@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@484@01 ($Ref) $Ref)
(declare-fun img@485@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$41@483@01 $Ref) (n$42@483@01 $Ref)) (!
  (=>
    (and
      (Set_in n$41@483@01 g1@462@01)
      (Set_in n$42@483@01 g1@462@01)
      (= n$41@483@01 n$42@483@01))
    (= n$41@483@01 n$42@483@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@483@01 $Ref)) (!
  (=>
    (Set_in n$4@483@01 g1@462@01)
    (and (= (inv@484@01 n$4@483@01) n$4@483@01) (img@485@01 n$4@483@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) n$4@483@01) n$4@483@01))
  :qid |quant-u-7429|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (= (inv@484@01 r) r))
  :pattern ((inv@484@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@483@01 $Ref)) (!
  (=> (Set_in n$4@483@01 g1@462@01) (not (= n$4@483@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) n$4@483@01) n$4@483@01))
  :qid |r-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$4@483@01 n$0@472@01)
    (=
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))))
  
  :qid |quant-u-7430|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const sm@486@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef475|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef476|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef477|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@484@01 r) g1@462@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) r) r))
  :pattern ((inv@484@01 r))
  :qid |quant-u-7431|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))
  $Snap.unit))
; [eval] (forall n$5: Ref :: { (n$5.l in g1) } { (n$5 in g1), n$5.l } (n$5 in g1) && n$5.l != null ==> (n$5.l in g1))
(declare-const n$5@487@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$5 in g1) && n$5.l != null ==> (n$5.l in g1)
; [eval] (n$5 in g1) && n$5.l != null
; [eval] (n$5 in g1)
(push) ; 3
; [then-branch: 102 | !(n$5@487@01 in g1@462@01) | live]
; [else-branch: 102 | n$5@487@01 in g1@462@01 | live]
(push) ; 4
; [then-branch: 102 | !(n$5@487@01 in g1@462@01)]
(assert (not (Set_in n$5@487@01 g1@462@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 102 | n$5@487@01 in g1@462@01]
(assert (Set_in n$5@487@01 g1@462@01))
; [eval] n$5.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (=
        ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef472|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (=
        ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
    :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
    :qid |qp.fvfValDef473|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef474|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) n$5@487@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@470@01 n$5@487@01) (Set_in (inv@469@01 n$5@487@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@481@01 n$5@487@01) (Set_in (inv@480@01 n$5@487@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef472|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef473|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef474|)))
(assert (=>
  (Set_in n$5@487@01 g1@462@01)
  (and
    (Set_in n$5@487@01 g1@462@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) n$5@487@01))))
(assert (or (Set_in n$5@487@01 g1@462@01) (not (Set_in n$5@487@01 g1@462@01))))
(push) ; 3
; [then-branch: 103 | n$5@487@01 in g1@462@01 && Lookup(l, sm@482@01, n$5@487@01) != Null | live]
; [else-branch: 103 | !(n$5@487@01 in g1@462@01 && Lookup(l, sm@482@01, n$5@487@01) != Null) | live]
(push) ; 4
; [then-branch: 103 | n$5@487@01 in g1@462@01 && Lookup(l, sm@482@01, n$5@487@01) != Null]
(assert (and
  (Set_in n$5@487@01 g1@462@01)
  (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null))))
; [eval] (n$5.l in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (=
        ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef472|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (=
        ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
    :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
    :qid |qp.fvfValDef473|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef474|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) n$5@487@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@470@01 n$5@487@01) (Set_in (inv@469@01 n$5@487@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@481@01 n$5@487@01) (Set_in (inv@480@01 n$5@487@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 103 | !(n$5@487@01 in g1@462@01 && Lookup(l, sm@482@01, n$5@487@01) != Null)]
(assert (not
  (and
    (Set_in n$5@487@01 g1@462@01)
    (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef472|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef473|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef474|)))
(assert (=>
  (and
    (Set_in n$5@487@01 g1@462@01)
    (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null)))
  (and
    (Set_in n$5@487@01 g1@462@01)
    (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) n$5@487@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$5@487@01 g1@462@01)
      (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null))))
  (and
    (Set_in n$5@487@01 g1@462@01)
    (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef472|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef473|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef474|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$5@487@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@487@01 g1@462@01)
      (and
        (Set_in n$5@487@01 g1@462@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) n$5@487@01)))
    (or (Set_in n$5@487@01 g1@462@01) (not (Set_in n$5@487@01 g1@462@01)))
    (=>
      (and
        (Set_in n$5@487@01 g1@462@01)
        (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null)))
      (and
        (Set_in n$5@487@01 g1@462@01)
        (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) n$5@487@01)))
    (or
      (not
        (and
          (Set_in n$5@487@01 g1@462@01)
          (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null))))
      (and
        (Set_in n$5@487@01 g1@462@01)
        (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) g1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@315@14@315@23-aux|)))
(assert (forall ((n$5@487@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@487@01 g1@462@01)
      (and
        (Set_in n$5@487@01 g1@462@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) n$5@487@01)))
    (or (Set_in n$5@487@01 g1@462@01) (not (Set_in n$5@487@01 g1@462@01)))
    (=>
      (and
        (Set_in n$5@487@01 g1@462@01)
        (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null)))
      (and
        (Set_in n$5@487@01 g1@462@01)
        (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) n$5@487@01)))
    (or
      (not
        (and
          (Set_in n$5@487@01 g1@462@01)
          (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null))))
      (and
        (Set_in n$5@487@01 g1@462@01)
        (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null)))))
  :pattern ((Set_in n$5@487@01 g1@462@01) ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) n$5@487@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@315@14@315@23-aux|)))
(assert (forall ((n$5@487@01 $Ref)) (!
  (=>
    (and
      (Set_in n$5@487@01 g1@462@01)
      (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) g1@462@01))
  :pattern ((Set_in ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) g1@462@01))
  :pattern ((Set_in n$5@487@01 g1@462@01) ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n$5@487@01) n$5@487@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@315@14@315@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))
  $Snap.unit))
; [eval] (forall n$6: Ref :: { (n$6.r in g1) } { (n$6 in g1), n$6.r } (n$6 in g1) && n$6.r != null ==> (n$6.r in g1))
(declare-const n$6@488@01 $Ref)
(push) ; 2
; [eval] (n$6 in g1) && n$6.r != null ==> (n$6.r in g1)
; [eval] (n$6 in g1) && n$6.r != null
; [eval] (n$6 in g1)
(push) ; 3
; [then-branch: 104 | !(n$6@488@01 in g1@462@01) | live]
; [else-branch: 104 | n$6@488@01 in g1@462@01 | live]
(push) ; 4
; [then-branch: 104 | !(n$6@488@01 in g1@462@01)]
(assert (not (Set_in n$6@488@01 g1@462@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 104 | n$6@488@01 in g1@462@01]
(assert (Set_in n$6@488@01 g1@462@01))
; [eval] n$6.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (=
        ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
    :qid |qp.fvfValDef475|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (=
        ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
    :qid |qp.fvfValDef476|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef477|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) n$6@488@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@475@01 n$6@488@01) (Set_in (inv@474@01 n$6@488@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@485@01 n$6@488@01) (Set_in (inv@484@01 n$6@488@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef475|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef476|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef477|)))
(assert (=>
  (Set_in n$6@488@01 g1@462@01)
  (and
    (Set_in n$6@488@01 g1@462@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) n$6@488@01))))
(assert (or (Set_in n$6@488@01 g1@462@01) (not (Set_in n$6@488@01 g1@462@01))))
(push) ; 3
; [then-branch: 105 | n$6@488@01 in g1@462@01 && Lookup(r, sm@486@01, n$6@488@01) != Null | live]
; [else-branch: 105 | !(n$6@488@01 in g1@462@01 && Lookup(r, sm@486@01, n$6@488@01) != Null) | live]
(push) ; 4
; [then-branch: 105 | n$6@488@01 in g1@462@01 && Lookup(r, sm@486@01, n$6@488@01) != Null]
(assert (and
  (Set_in n$6@488@01 g1@462@01)
  (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null))))
; [eval] (n$6.r in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (=
        ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
    :qid |qp.fvfValDef475|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (=
        ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
    :qid |qp.fvfValDef476|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef477|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) n$6@488@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@475@01 n$6@488@01) (Set_in (inv@474@01 n$6@488@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@485@01 n$6@488@01) (Set_in (inv@484@01 n$6@488@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 105 | !(n$6@488@01 in g1@462@01 && Lookup(r, sm@486@01, n$6@488@01) != Null)]
(assert (not
  (and
    (Set_in n$6@488@01 g1@462@01)
    (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef475|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef476|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef477|)))
(assert (=>
  (and
    (Set_in n$6@488@01 g1@462@01)
    (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null)))
  (and
    (Set_in n$6@488@01 g1@462@01)
    (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) n$6@488@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@488@01 g1@462@01)
      (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null))))
  (and
    (Set_in n$6@488@01 g1@462@01)
    (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef475|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef476|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef477|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@488@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@488@01 g1@462@01)
      (and
        (Set_in n$6@488@01 g1@462@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) n$6@488@01)))
    (or (Set_in n$6@488@01 g1@462@01) (not (Set_in n$6@488@01 g1@462@01)))
    (=>
      (and
        (Set_in n$6@488@01 g1@462@01)
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null)))
      (and
        (Set_in n$6@488@01 g1@462@01)
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) n$6@488@01)))
    (or
      (not
        (and
          (Set_in n$6@488@01 g1@462@01)
          (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null))))
      (and
        (Set_in n$6@488@01 g1@462@01)
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) g1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@315@14@315@23-aux|)))
(assert (forall ((n$6@488@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@488@01 g1@462@01)
      (and
        (Set_in n$6@488@01 g1@462@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) n$6@488@01)))
    (or (Set_in n$6@488@01 g1@462@01) (not (Set_in n$6@488@01 g1@462@01)))
    (=>
      (and
        (Set_in n$6@488@01 g1@462@01)
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null)))
      (and
        (Set_in n$6@488@01 g1@462@01)
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) n$6@488@01)))
    (or
      (not
        (and
          (Set_in n$6@488@01 g1@462@01)
          (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null))))
      (and
        (Set_in n$6@488@01 g1@462@01)
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null)))))
  :pattern ((Set_in n$6@488@01 g1@462@01) ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) n$6@488@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@315@14@315@23-aux|)))
(assert (forall ((n$6@488@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@488@01 g1@462@01)
      (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) g1@462@01))
  :pattern ((Set_in ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) g1@462@01))
  :pattern ((Set_in n$6@488@01 g1@462@01) ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$6@488@01) n$6@488@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@315@14@315@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))
  $Snap.unit))
; [eval] (x1 in g1)
(assert (Set_in x1@464@01 g1@462@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7 in g0), (n$7 in g1) } (n$7 in g0) ==> !((n$7 in g1)))
(declare-const n$7@489@01 $Ref)
(push) ; 2
; [eval] (n$7 in g0) ==> !((n$7 in g1))
; [eval] (n$7 in g0)
(push) ; 3
; [then-branch: 106 | n$7@489@01 in g0@461@01 | live]
; [else-branch: 106 | !(n$7@489@01 in g0@461@01) | live]
(push) ; 4
; [then-branch: 106 | n$7@489@01 in g0@461@01]
(assert (Set_in n$7@489@01 g0@461@01))
; [eval] !((n$7 in g1))
; [eval] (n$7 in g1)
(pop) ; 4
(push) ; 4
; [else-branch: 106 | !(n$7@489@01 in g0@461@01)]
(assert (not (Set_in n$7@489@01 g0@461@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in n$7@489@01 g0@461@01)) (Set_in n$7@489@01 g0@461@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@489@01 $Ref)) (!
  (or (not (Set_in n$7@489@01 g0@461@01)) (Set_in n$7@489@01 g0@461@01))
  :pattern ((Set_in n$7@489@01 g0@461@01) (Set_in n$7@489@01 g1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@318@14@318@34-aux|)))
(assert (forall ((n$7@489@01 $Ref)) (!
  (=> (Set_in n$7@489@01 g0@461@01) (not (Set_in n$7@489@01 g1@462@01)))
  :pattern ((Set_in n$7@489@01 g0@461@01) (Set_in n$7@489@01 g1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@318@14@318@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8 in g0), (n$8 in g1) } (n$8 in g1) ==> !((n$8 in g0)))
(declare-const n$8@490@01 $Ref)
(push) ; 2
; [eval] (n$8 in g1) ==> !((n$8 in g0))
; [eval] (n$8 in g1)
(push) ; 3
; [then-branch: 107 | n$8@490@01 in g1@462@01 | live]
; [else-branch: 107 | !(n$8@490@01 in g1@462@01) | live]
(push) ; 4
; [then-branch: 107 | n$8@490@01 in g1@462@01]
(assert (Set_in n$8@490@01 g1@462@01))
; [eval] !((n$8 in g0))
; [eval] (n$8 in g0)
(pop) ; 4
(push) ; 4
; [else-branch: 107 | !(n$8@490@01 in g1@462@01)]
(assert (not (Set_in n$8@490@01 g1@462@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in n$8@490@01 g1@462@01)) (Set_in n$8@490@01 g1@462@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@490@01 $Ref)) (!
  (or (not (Set_in n$8@490@01 g1@462@01)) (Set_in n$8@490@01 g1@462@01))
  :pattern ((Set_in n$8@490@01 g0@461@01) (Set_in n$8@490@01 g1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@318@14@318@34-aux|)))
(assert (forall ((n$8@490@01 $Ref)) (!
  (=> (Set_in n$8@490@01 g1@462@01) (not (Set_in n$8@490@01 g0@461@01)))
  :pattern ((Set_in n$8@490@01 g0@461@01) (Set_in n$8@490@01 g1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@318@14@318@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in g0) } (n in g0) ==> exists_path($$(g0), x, n))
(declare-const n@491@01 $Ref)
(push) ; 2
; [eval] (n in g0) ==> exists_path($$(g0), x, n)
; [eval] (n in g0)
(push) ; 3
; [then-branch: 108 | n@491@01 in g0@461@01 | live]
; [else-branch: 108 | !(n@491@01 in g0@461@01) | live]
(push) ; 4
; [then-branch: 108 | n@491@01 in g0@461@01]
(assert (Set_in n@491@01 g0@461@01))
; [eval] exists_path($$(g0), x, n)
; [eval] $$(g0)
(push) ; 5
(declare-const n@492@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@492@01 g0@461@01))
(pop) ; 6
(declare-fun inv@493@01 ($Ref) $Ref)
(declare-fun img@494@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@492@01 $Ref) (n2@492@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@492@01 g0@461@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n1@492@01) n1@492@01))
      (and
        (Set_in n2@492@01 g0@461@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n2@492@01) n2@492@01))
      (= n1@492@01 n2@492@01))
    (= n1@492@01 n2@492@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@492@01 $Ref)) (!
  (=>
    (Set_in n@492@01 g0@461@01)
    (and (= (inv@493@01 n@492@01) n@492@01) (img@494@01 n@492@01)))
  :pattern ((Set_in n@492@01 g0@461@01))
  :pattern ((inv@493@01 n@492@01))
  :pattern ((img@494@01 n@492@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@494@01 r) (Set_in (inv@493@01 r) g0@461@01))
    (= (inv@493@01 r) r))
  :pattern ((inv@493@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@493@01 r) g0@461@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
  :pattern ((inv@493@01 r))
  :qid |quant-u-7433|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r) (= r (inv@493@01 r)))
    (>
      (+
        (ite
          (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7434|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@495@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>)))
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r)))
    (=>
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>))))
  :qid |qp.fvfDomDef481|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@495@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef478|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@495@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef479|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef480|)))
(declare-const n@496@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@496@01 g0@461@01))
(pop) ; 6
(declare-fun inv@497@01 ($Ref) $Ref)
(declare-fun img@498@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@499@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@499@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef482|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@499@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef483|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef484|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@496@01 $Ref) (n2@496@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@496@01 g0@461@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@499@01  $FVF<r>) n1@496@01) n1@496@01))
      (and
        (Set_in n2@496@01 g0@461@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@499@01  $FVF<r>) n2@496@01) n2@496@01))
      (= n1@496@01 n2@496@01))
    (= n1@496@01 n2@496@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@496@01 $Ref)) (!
  (=>
    (Set_in n@496@01 g0@461@01)
    (and (= (inv@497@01 n@496@01) n@496@01) (img@498@01 n@496@01)))
  :pattern ((Set_in n@496@01 g0@461@01))
  :pattern ((inv@497@01 n@496@01))
  :pattern ((img@498@01 n@496@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@498@01 r) (Set_in (inv@497@01 r) g0@461@01))
    (= (inv@497@01 r) r))
  :pattern ((inv@497@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@497@01 r) g0@461@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@499@01  $FVF<r>) r) r))
  :pattern ((inv@497@01 r))
  :qid |quant-u-7436|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r) (= r (inv@497@01 r)))
    (>
      (+
        (ite
          (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7437|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@500@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>)))
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r)))
    (=>
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>))))
  :qid |qp.fvfDomDef488|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@500@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef485|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@500@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef486|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef487|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@495@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@500@01  $FVF<r>))) g0@461@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@492@01 $Ref)) (!
  (=>
    (Set_in n@492@01 g0@461@01)
    (and (= (inv@493@01 n@492@01) n@492@01) (img@494@01 n@492@01)))
  :pattern ((Set_in n@492@01 g0@461@01))
  :pattern ((inv@493@01 n@492@01))
  :pattern ((img@494@01 n@492@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@494@01 r) (Set_in (inv@493@01 r) g0@461@01))
    (= (inv@493@01 r) r))
  :pattern ((inv@493@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>)))
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r)))
    (=>
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>))))
  :qid |qp.fvfDomDef481|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@495@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef478|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@495@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef479|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef480|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@499@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef482|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@499@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef483|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef484|)))
(assert (forall ((n@496@01 $Ref)) (!
  (=>
    (Set_in n@496@01 g0@461@01)
    (and (= (inv@497@01 n@496@01) n@496@01) (img@498@01 n@496@01)))
  :pattern ((Set_in n@496@01 g0@461@01))
  :pattern ((inv@497@01 n@496@01))
  :pattern ((img@498@01 n@496@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@498@01 r) (Set_in (inv@497@01 r) g0@461@01))
    (= (inv@497@01 r) r))
  :pattern ((inv@497@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>)))
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r)))
    (=>
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>))))
  :qid |qp.fvfDomDef488|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@500@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef485|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@500@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef486|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef487|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@493@01 r) g0@461@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
    :pattern ((inv@493@01 r))
    :qid |quant-u-7433|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@497@01 r) g0@461@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@499@01  $FVF<r>) r) r))
    :pattern ((inv@497@01 r))
    :qid |quant-u-7436|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@495@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@500@01  $FVF<r>))) g0@461@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 108 | !(n@491@01 in g0@461@01)]
(assert (not (Set_in n@491@01 g0@461@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@492@01 $Ref)) (!
  (=>
    (Set_in n@492@01 g0@461@01)
    (and (= (inv@493@01 n@492@01) n@492@01) (img@494@01 n@492@01)))
  :pattern ((Set_in n@492@01 g0@461@01))
  :pattern ((inv@493@01 n@492@01))
  :pattern ((img@494@01 n@492@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@494@01 r) (Set_in (inv@493@01 r) g0@461@01))
    (= (inv@493@01 r) r))
  :pattern ((inv@493@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>)))
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r)))
    (=>
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>))))
  :qid |qp.fvfDomDef481|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@495@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef478|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@495@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef479|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef480|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@499@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef482|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@499@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef483|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef484|)))
(assert (forall ((n@496@01 $Ref)) (!
  (=>
    (Set_in n@496@01 g0@461@01)
    (and (= (inv@497@01 n@496@01) n@496@01) (img@498@01 n@496@01)))
  :pattern ((Set_in n@496@01 g0@461@01))
  :pattern ((inv@497@01 n@496@01))
  :pattern ((img@498@01 n@496@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@498@01 r) (Set_in (inv@497@01 r) g0@461@01))
    (= (inv@497@01 r) r))
  :pattern ((inv@497@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>)))
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r)))
    (=>
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>))))
  :qid |qp.fvfDomDef488|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@500@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef485|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@500@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef486|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef487|)))
(assert (=>
  (Set_in n@491@01 g0@461@01)
  (and
    (Set_in n@491@01 g0@461@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@493@01 r) g0@461@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
      :pattern ((inv@493@01 r))
      :qid |quant-u-7433|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@497@01 r) g0@461@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@499@01  $FVF<r>) r) r))
      :pattern ((inv@497@01 r))
      :qid |quant-u-7436|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@495@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@500@01  $FVF<r>))) g0@461@01))))
; Joined path conditions
(assert (or (not (Set_in n@491@01 g0@461@01)) (Set_in n@491@01 g0@461@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@492@01 $Ref)) (!
  (=>
    (Set_in n@492@01 g0@461@01)
    (and (= (inv@493@01 n@492@01) n@492@01) (img@494@01 n@492@01)))
  :pattern ((Set_in n@492@01 g0@461@01))
  :pattern ((inv@493@01 n@492@01))
  :pattern ((img@494@01 n@492@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@494@01 r) (Set_in (inv@493@01 r) g0@461@01))
    (= (inv@493@01 r) r))
  :pattern ((inv@493@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>)))
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r)))
    (=>
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@495@01  $FVF<l>))))
  :qid |qp.fvfDomDef481|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@495@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef478|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@493@01 r) g0@461@01) (img@494@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@495@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef479|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@495@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef480|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@499@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef482|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@499@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef483|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@499@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef484|)))
(assert (forall ((n@496@01 $Ref)) (!
  (=>
    (Set_in n@496@01 g0@461@01)
    (and (= (inv@497@01 n@496@01) n@496@01) (img@498@01 n@496@01)))
  :pattern ((Set_in n@496@01 g0@461@01))
  :pattern ((inv@497@01 n@496@01))
  :pattern ((img@498@01 n@496@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@498@01 r) (Set_in (inv@497@01 r) g0@461@01))
    (= (inv@497@01 r) r))
  :pattern ((inv@497@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>)))
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r)))
    (=>
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@500@01  $FVF<r>))))
  :qid |qp.fvfDomDef488|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@500@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef485|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@497@01 r) g0@461@01) (img@498@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@500@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef486|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@500@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef487|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@491@01 $Ref)) (!
  (and
    (=>
      (Set_in n@491@01 g0@461@01)
      (and
        (Set_in n@491@01 g0@461@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@493@01 r) g0@461@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
          :pattern ((inv@493@01 r))
          :qid |quant-u-7433|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@497@01 r) g0@461@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@499@01  $FVF<r>) r) r))
          :pattern ((inv@497@01 r))
          :qid |quant-u-7436|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@495@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@500@01  $FVF<r>))) g0@461@01)))
    (or (not (Set_in n@491@01 g0@461@01)) (Set_in n@491@01 g0@461@01)))
  :pattern ((Set_in n@491@01 g0@461@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@319@14@319@77-aux|)))
(assert (forall ((n@491@01 $Ref)) (!
  (=>
    (Set_in n@491@01 g0@461@01)
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@495@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@500@01  $FVF<r>))) g0@461@01) x@465@01 n@491@01))
  :pattern ((Set_in n@491@01 g0@461@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@319@14@319@77|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { exists_path($$(g0), n, x0) } (n in g0) ==> exists_path($$(g0), n, x0))
(declare-const n@501@01 $Ref)
(push) ; 2
; [eval] (n in g0) ==> exists_path($$(g0), n, x0)
; [eval] (n in g0)
(push) ; 3
; [then-branch: 109 | n@501@01 in g0@461@01 | live]
; [else-branch: 109 | !(n@501@01 in g0@461@01) | live]
(push) ; 4
; [then-branch: 109 | n@501@01 in g0@461@01]
(assert (Set_in n@501@01 g0@461@01))
; [eval] exists_path($$(g0), n, x0)
; [eval] $$(g0)
(push) ; 5
(declare-const n@502@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@502@01 g0@461@01))
(pop) ; 6
(declare-fun inv@503@01 ($Ref) $Ref)
(declare-fun img@504@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@502@01 $Ref) (n2@502@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@502@01 g0@461@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n1@502@01) n1@502@01))
      (and
        (Set_in n2@502@01 g0@461@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n2@502@01) n2@502@01))
      (= n1@502@01 n2@502@01))
    (= n1@502@01 n2@502@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@502@01 $Ref)) (!
  (=>
    (Set_in n@502@01 g0@461@01)
    (and (= (inv@503@01 n@502@01) n@502@01) (img@504@01 n@502@01)))
  :pattern ((Set_in n@502@01 g0@461@01))
  :pattern ((inv@503@01 n@502@01))
  :pattern ((img@504@01 n@502@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@504@01 r) (Set_in (inv@503@01 r) g0@461@01))
    (= (inv@503@01 r) r))
  :pattern ((inv@503@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@503@01 r) g0@461@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
  :pattern ((inv@503@01 r))
  :qid |quant-u-7439|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r) (= r (inv@503@01 r)))
    (>
      (+
        (ite
          (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7440|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@505@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>)))
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r)))
    (=>
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>))))
  :qid |qp.fvfDomDef492|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@505@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef489|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@505@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef490|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef491|)))
(declare-const n@506@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@506@01 g0@461@01))
(pop) ; 6
(declare-fun inv@507@01 ($Ref) $Ref)
(declare-fun img@508@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@509@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@509@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef493|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@509@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef494|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef495|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@506@01 $Ref) (n2@506@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@506@01 g0@461@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@509@01  $FVF<r>) n1@506@01) n1@506@01))
      (and
        (Set_in n2@506@01 g0@461@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@509@01  $FVF<r>) n2@506@01) n2@506@01))
      (= n1@506@01 n2@506@01))
    (= n1@506@01 n2@506@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@506@01 $Ref)) (!
  (=>
    (Set_in n@506@01 g0@461@01)
    (and (= (inv@507@01 n@506@01) n@506@01) (img@508@01 n@506@01)))
  :pattern ((Set_in n@506@01 g0@461@01))
  :pattern ((inv@507@01 n@506@01))
  :pattern ((img@508@01 n@506@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@508@01 r) (Set_in (inv@507@01 r) g0@461@01))
    (= (inv@507@01 r) r))
  :pattern ((inv@507@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@507@01 r) g0@461@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@509@01  $FVF<r>) r) r))
  :pattern ((inv@507@01 r))
  :qid |quant-u-7442|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r) (= r (inv@507@01 r)))
    (>
      (+
        (ite
          (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7443|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@510@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>)))
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r)))
    (=>
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>))))
  :qid |qp.fvfDomDef499|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@510@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef496|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@510@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef497|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef498|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@505@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@510@01  $FVF<r>))) g0@461@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@502@01 $Ref)) (!
  (=>
    (Set_in n@502@01 g0@461@01)
    (and (= (inv@503@01 n@502@01) n@502@01) (img@504@01 n@502@01)))
  :pattern ((Set_in n@502@01 g0@461@01))
  :pattern ((inv@503@01 n@502@01))
  :pattern ((img@504@01 n@502@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@504@01 r) (Set_in (inv@503@01 r) g0@461@01))
    (= (inv@503@01 r) r))
  :pattern ((inv@503@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>)))
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r)))
    (=>
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>))))
  :qid |qp.fvfDomDef492|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@505@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef489|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@505@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef490|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef491|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@509@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef493|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@509@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef494|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef495|)))
(assert (forall ((n@506@01 $Ref)) (!
  (=>
    (Set_in n@506@01 g0@461@01)
    (and (= (inv@507@01 n@506@01) n@506@01) (img@508@01 n@506@01)))
  :pattern ((Set_in n@506@01 g0@461@01))
  :pattern ((inv@507@01 n@506@01))
  :pattern ((img@508@01 n@506@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@508@01 r) (Set_in (inv@507@01 r) g0@461@01))
    (= (inv@507@01 r) r))
  :pattern ((inv@507@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>)))
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r)))
    (=>
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>))))
  :qid |qp.fvfDomDef499|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@510@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef496|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@510@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef497|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef498|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@503@01 r) g0@461@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
    :pattern ((inv@503@01 r))
    :qid |quant-u-7439|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@507@01 r) g0@461@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@509@01  $FVF<r>) r) r))
    :pattern ((inv@507@01 r))
    :qid |quant-u-7442|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@505@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@510@01  $FVF<r>))) g0@461@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 109 | !(n@501@01 in g0@461@01)]
(assert (not (Set_in n@501@01 g0@461@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@502@01 $Ref)) (!
  (=>
    (Set_in n@502@01 g0@461@01)
    (and (= (inv@503@01 n@502@01) n@502@01) (img@504@01 n@502@01)))
  :pattern ((Set_in n@502@01 g0@461@01))
  :pattern ((inv@503@01 n@502@01))
  :pattern ((img@504@01 n@502@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@504@01 r) (Set_in (inv@503@01 r) g0@461@01))
    (= (inv@503@01 r) r))
  :pattern ((inv@503@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>)))
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r)))
    (=>
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>))))
  :qid |qp.fvfDomDef492|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@505@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef489|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@505@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef490|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef491|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@509@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef493|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@509@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef494|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef495|)))
(assert (forall ((n@506@01 $Ref)) (!
  (=>
    (Set_in n@506@01 g0@461@01)
    (and (= (inv@507@01 n@506@01) n@506@01) (img@508@01 n@506@01)))
  :pattern ((Set_in n@506@01 g0@461@01))
  :pattern ((inv@507@01 n@506@01))
  :pattern ((img@508@01 n@506@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@508@01 r) (Set_in (inv@507@01 r) g0@461@01))
    (= (inv@507@01 r) r))
  :pattern ((inv@507@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>)))
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r)))
    (=>
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>))))
  :qid |qp.fvfDomDef499|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@510@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef496|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@510@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef497|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef498|)))
(assert (=>
  (Set_in n@501@01 g0@461@01)
  (and
    (Set_in n@501@01 g0@461@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@503@01 r) g0@461@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
      :pattern ((inv@503@01 r))
      :qid |quant-u-7439|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@507@01 r) g0@461@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@509@01  $FVF<r>) r) r))
      :pattern ((inv@507@01 r))
      :qid |quant-u-7442|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@505@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@510@01  $FVF<r>))) g0@461@01))))
; Joined path conditions
(assert (or (not (Set_in n@501@01 g0@461@01)) (Set_in n@501@01 g0@461@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@502@01 $Ref)) (!
  (=>
    (Set_in n@502@01 g0@461@01)
    (and (= (inv@503@01 n@502@01) n@502@01) (img@504@01 n@502@01)))
  :pattern ((Set_in n@502@01 g0@461@01))
  :pattern ((inv@503@01 n@502@01))
  :pattern ((img@504@01 n@502@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@504@01 r) (Set_in (inv@503@01 r) g0@461@01))
    (= (inv@503@01 r) r))
  :pattern ((inv@503@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>)))
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r)))
    (=>
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@505@01  $FVF<l>))))
  :qid |qp.fvfDomDef492|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@505@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef489|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@503@01 r) g0@461@01) (img@504@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@505@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef490|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@505@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef491|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@509@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef493|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@509@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef494|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@509@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef495|)))
(assert (forall ((n@506@01 $Ref)) (!
  (=>
    (Set_in n@506@01 g0@461@01)
    (and (= (inv@507@01 n@506@01) n@506@01) (img@508@01 n@506@01)))
  :pattern ((Set_in n@506@01 g0@461@01))
  :pattern ((inv@507@01 n@506@01))
  :pattern ((img@508@01 n@506@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@508@01 r) (Set_in (inv@507@01 r) g0@461@01))
    (= (inv@507@01 r) r))
  :pattern ((inv@507@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>)))
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r)))
    (=>
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@510@01  $FVF<r>))))
  :qid |qp.fvfDomDef499|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@510@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef496|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@507@01 r) g0@461@01) (img@508@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@510@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef497|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@510@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef498|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@501@01 $Ref)) (!
  (and
    (=>
      (Set_in n@501@01 g0@461@01)
      (and
        (Set_in n@501@01 g0@461@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@503@01 r) g0@461@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
          :pattern ((inv@503@01 r))
          :qid |quant-u-7439|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@507@01 r) g0@461@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@509@01  $FVF<r>) r) r))
          :pattern ((inv@507@01 r))
          :qid |quant-u-7442|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@505@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@510@01  $FVF<r>))) g0@461@01)))
    (or (not (Set_in n@501@01 g0@461@01)) (Set_in n@501@01 g0@461@01)))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@505@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@510@01  $FVF<r>))) g0@461@01) n@501@01 x0@463@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@320@14@320@95-aux|)))
(assert (forall ((n@501@01 $Ref)) (!
  (=>
    (Set_in n@501@01 g0@461@01)
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@505@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@510@01  $FVF<r>))) g0@461@01) n@501@01 x0@463@01))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@505@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@510@01  $FVF<r>))) g0@461@01) n@501@01 x0@463@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@320@14@320@95|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))))))
  $Snap.unit))
; [eval] (forall m: Ref :: { exists_path($$(g1), x1, m) } { (m in g1) } (m in g1) ==> exists_path($$(g1), x1, m))
(declare-const m@511@01 $Ref)
(push) ; 2
; [eval] (m in g1) ==> exists_path($$(g1), x1, m)
; [eval] (m in g1)
(push) ; 3
; [then-branch: 110 | m@511@01 in g1@462@01 | live]
; [else-branch: 110 | !(m@511@01 in g1@462@01) | live]
(push) ; 4
; [then-branch: 110 | m@511@01 in g1@462@01]
(assert (Set_in m@511@01 g1@462@01))
; [eval] exists_path($$(g1), x1, m)
; [eval] $$(g1)
(push) ; 5
(declare-const n@512@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@512@01 g1@462@01))
(pop) ; 6
(declare-fun inv@513@01 ($Ref) $Ref)
(declare-fun img@514@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@512@01 $Ref) (n2@512@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@512@01 g1@462@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n1@512@01) n1@512@01))
      (and
        (Set_in n2@512@01 g1@462@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n2@512@01) n2@512@01))
      (= n1@512@01 n2@512@01))
    (= n1@512@01 n2@512@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@512@01 $Ref)) (!
  (=>
    (Set_in n@512@01 g1@462@01)
    (and (= (inv@513@01 n@512@01) n@512@01) (img@514@01 n@512@01)))
  :pattern ((Set_in n@512@01 g1@462@01))
  :pattern ((inv@513@01 n@512@01))
  :pattern ((img@514@01 n@512@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@514@01 r) (Set_in (inv@513@01 r) g1@462@01))
    (= (inv@513@01 r) r))
  :pattern ((inv@513@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@513@01 r) g1@462@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
  :pattern ((inv@513@01 r))
  :qid |quant-u-7445|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r) (= r (inv@513@01 r)))
    (>
      (+
        (ite
          (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7446|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@515@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>)))
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r)))
    (=>
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>))))
  :qid |qp.fvfDomDef503|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@515@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef500|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@515@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef501|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef502|)))
(declare-const n@516@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@516@01 g1@462@01))
(pop) ; 6
(declare-fun inv@517@01 ($Ref) $Ref)
(declare-fun img@518@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@519@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@519@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef504|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@519@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef505|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef506|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@516@01 $Ref) (n2@516@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@516@01 g1@462@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@519@01  $FVF<r>) n1@516@01) n1@516@01))
      (and
        (Set_in n2@516@01 g1@462@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@519@01  $FVF<r>) n2@516@01) n2@516@01))
      (= n1@516@01 n2@516@01))
    (= n1@516@01 n2@516@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@516@01 $Ref)) (!
  (=>
    (Set_in n@516@01 g1@462@01)
    (and (= (inv@517@01 n@516@01) n@516@01) (img@518@01 n@516@01)))
  :pattern ((Set_in n@516@01 g1@462@01))
  :pattern ((inv@517@01 n@516@01))
  :pattern ((img@518@01 n@516@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@518@01 r) (Set_in (inv@517@01 r) g1@462@01))
    (= (inv@517@01 r) r))
  :pattern ((inv@517@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@517@01 r) g1@462@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@519@01  $FVF<r>) r) r))
  :pattern ((inv@517@01 r))
  :qid |quant-u-7448|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r) (= r (inv@517@01 r)))
    (>
      (+
        (ite
          (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7449|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@520@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>)))
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r)))
    (=>
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>))))
  :qid |qp.fvfDomDef510|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@520@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef507|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@520@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef508|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef509|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@515@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@520@01  $FVF<r>))) g1@462@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@512@01 $Ref)) (!
  (=>
    (Set_in n@512@01 g1@462@01)
    (and (= (inv@513@01 n@512@01) n@512@01) (img@514@01 n@512@01)))
  :pattern ((Set_in n@512@01 g1@462@01))
  :pattern ((inv@513@01 n@512@01))
  :pattern ((img@514@01 n@512@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@514@01 r) (Set_in (inv@513@01 r) g1@462@01))
    (= (inv@513@01 r) r))
  :pattern ((inv@513@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>)))
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r)))
    (=>
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>))))
  :qid |qp.fvfDomDef503|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@515@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef500|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@515@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef501|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef502|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@519@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef504|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@519@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef505|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef506|)))
(assert (forall ((n@516@01 $Ref)) (!
  (=>
    (Set_in n@516@01 g1@462@01)
    (and (= (inv@517@01 n@516@01) n@516@01) (img@518@01 n@516@01)))
  :pattern ((Set_in n@516@01 g1@462@01))
  :pattern ((inv@517@01 n@516@01))
  :pattern ((img@518@01 n@516@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@518@01 r) (Set_in (inv@517@01 r) g1@462@01))
    (= (inv@517@01 r) r))
  :pattern ((inv@517@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>)))
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r)))
    (=>
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>))))
  :qid |qp.fvfDomDef510|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@520@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef507|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@520@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef508|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef509|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@513@01 r) g1@462@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
    :pattern ((inv@513@01 r))
    :qid |quant-u-7445|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@517@01 r) g1@462@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@519@01  $FVF<r>) r) r))
    :pattern ((inv@517@01 r))
    :qid |quant-u-7448|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@515@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@520@01  $FVF<r>))) g1@462@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 110 | !(m@511@01 in g1@462@01)]
(assert (not (Set_in m@511@01 g1@462@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@512@01 $Ref)) (!
  (=>
    (Set_in n@512@01 g1@462@01)
    (and (= (inv@513@01 n@512@01) n@512@01) (img@514@01 n@512@01)))
  :pattern ((Set_in n@512@01 g1@462@01))
  :pattern ((inv@513@01 n@512@01))
  :pattern ((img@514@01 n@512@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@514@01 r) (Set_in (inv@513@01 r) g1@462@01))
    (= (inv@513@01 r) r))
  :pattern ((inv@513@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>)))
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r)))
    (=>
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>))))
  :qid |qp.fvfDomDef503|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@515@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef500|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@515@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef501|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef502|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@519@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef504|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@519@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef505|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef506|)))
(assert (forall ((n@516@01 $Ref)) (!
  (=>
    (Set_in n@516@01 g1@462@01)
    (and (= (inv@517@01 n@516@01) n@516@01) (img@518@01 n@516@01)))
  :pattern ((Set_in n@516@01 g1@462@01))
  :pattern ((inv@517@01 n@516@01))
  :pattern ((img@518@01 n@516@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@518@01 r) (Set_in (inv@517@01 r) g1@462@01))
    (= (inv@517@01 r) r))
  :pattern ((inv@517@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>)))
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r)))
    (=>
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>))))
  :qid |qp.fvfDomDef510|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@520@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef507|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@520@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef508|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef509|)))
(assert (=>
  (Set_in m@511@01 g1@462@01)
  (and
    (Set_in m@511@01 g1@462@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@513@01 r) g1@462@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
      :pattern ((inv@513@01 r))
      :qid |quant-u-7445|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@517@01 r) g1@462@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@519@01  $FVF<r>) r) r))
      :pattern ((inv@517@01 r))
      :qid |quant-u-7448|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@515@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@520@01  $FVF<r>))) g1@462@01))))
; Joined path conditions
(assert (or (not (Set_in m@511@01 g1@462@01)) (Set_in m@511@01 g1@462@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@512@01 $Ref)) (!
  (=>
    (Set_in n@512@01 g1@462@01)
    (and (= (inv@513@01 n@512@01) n@512@01) (img@514@01 n@512@01)))
  :pattern ((Set_in n@512@01 g1@462@01))
  :pattern ((inv@513@01 n@512@01))
  :pattern ((img@514@01 n@512@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@514@01 r) (Set_in (inv@513@01 r) g1@462@01))
    (= (inv@513@01 r) r))
  :pattern ((inv@513@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>)))
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r)))
    (=>
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@515@01  $FVF<l>))))
  :qid |qp.fvfDomDef503|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@515@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef500|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@513@01 r) g1@462@01) (img@514@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@515@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef501|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@515@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef502|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@519@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef504|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@519@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef505|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@519@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef506|)))
(assert (forall ((n@516@01 $Ref)) (!
  (=>
    (Set_in n@516@01 g1@462@01)
    (and (= (inv@517@01 n@516@01) n@516@01) (img@518@01 n@516@01)))
  :pattern ((Set_in n@516@01 g1@462@01))
  :pattern ((inv@517@01 n@516@01))
  :pattern ((img@518@01 n@516@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@518@01 r) (Set_in (inv@517@01 r) g1@462@01))
    (= (inv@517@01 r) r))
  :pattern ((inv@517@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>)))
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r)))
    (=>
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@520@01  $FVF<r>))))
  :qid |qp.fvfDomDef510|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@520@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef507|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@517@01 r) g1@462@01) (img@518@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@520@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef508|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@520@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef509|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((m@511@01 $Ref)) (!
  (and
    (=>
      (Set_in m@511@01 g1@462@01)
      (and
        (Set_in m@511@01 g1@462@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@513@01 r) g1@462@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
          :pattern ((inv@513@01 r))
          :qid |quant-u-7445|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@517@01 r) g1@462@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@519@01  $FVF<r>) r) r))
          :pattern ((inv@517@01 r))
          :qid |quant-u-7448|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@515@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@520@01  $FVF<r>))) g1@462@01)))
    (or (not (Set_in m@511@01 g1@462@01)) (Set_in m@511@01 g1@462@01)))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@515@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@520@01  $FVF<r>))) g1@462@01) x1@464@01 m@511@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@321@14@321@106-aux|)))
(assert (forall ((m@511@01 $Ref)) (!
  (and
    (=>
      (Set_in m@511@01 g1@462@01)
      (and
        (Set_in m@511@01 g1@462@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@513@01 r) g1@462@01)
            ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
          :pattern ((inv@513@01 r))
          :qid |quant-u-7445|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@517@01 r) g1@462@01)
            ($FVF.loc_r ($FVF.lookup_r (as sm@519@01  $FVF<r>) r) r))
          :pattern ((inv@517@01 r))
          :qid |quant-u-7448|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@515@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@520@01  $FVF<r>))) g1@462@01)))
    (or (not (Set_in m@511@01 g1@462@01)) (Set_in m@511@01 g1@462@01)))
  :pattern ((Set_in m@511@01 g1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@321@14@321@106-aux|)))
(assert (forall ((m@511@01 $Ref)) (!
  (=>
    (Set_in m@511@01 g1@462@01)
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@515@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@520@01  $FVF<r>))) g1@462@01) x1@464@01 m@511@01))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@515@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@520@01  $FVF<r>))) g1@462@01) x1@464@01 m@511@01))
  :pattern ((Set_in m@511@01 g1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@321@14@321@106|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))))))))))
  $Snap.unit))
; [eval] x0.l == null || x0.r == null
; [eval] x0.l == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (=
        ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef472|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (=
        ($FVF.lookup_l (as sm@482@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
    :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
    :qid |qp.fvfValDef473|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@482@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef474|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) x0@463@01) x0@463@01))
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@470@01 x0@463@01) (Set_in (inv@469@01 x0@463@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@481@01 x0@463@01) (Set_in (inv@480@01 x0@463@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
; [then-branch: 111 | Lookup(l, sm@482@01, x0@463@01) == Null | live]
; [else-branch: 111 | Lookup(l, sm@482@01, x0@463@01) != Null | live]
(push) ; 3
; [then-branch: 111 | Lookup(l, sm@482@01, x0@463@01) == Null]
(assert (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) x0@463@01) $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 111 | Lookup(l, sm@482@01, x0@463@01) != Null]
(assert (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) x0@463@01) $Ref.null)))
; [eval] x0.r == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (=
        ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
    :qid |qp.fvfValDef475|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (=
        ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
    :qid |qp.fvfValDef476|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef477|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) x0@463@01) x0@463@01))
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@475@01 x0@463@01) (Set_in (inv@474@01 x0@463@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@485@01 x0@463@01) (Set_in (inv@484@01 x0@463@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef475|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef476|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef477|)))
(assert (=>
  (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) x0@463@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) x0@463@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) x0@463@01) x0@463@01))))
(assert (or
  (not (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) x0@463@01) $Ref.null))
  (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) x0@463@01) $Ref.null)))
(assert (or
  (= ($FVF.lookup_l (as sm@482@01  $FVF<l>) x0@463@01) $Ref.null)
  (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) x0@463@01) $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@521@01 $Snap)
(assert (= $t@521@01 ($Snap.combine ($Snap.first $t@521@01) ($Snap.second $t@521@01))))
(assert (= ($Snap.first $t@521@01) $Snap.unit))
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(assert (not (Set_in $Ref.null (Set_union g0@461@01 g1@462@01))))
(assert (=
  ($Snap.second $t@521@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@521@01))
    ($Snap.second ($Snap.second $t@521@01)))))
(declare-const n$9@522@01 $Ref)
(push) ; 3
; [eval] (n$9 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$9@522@01 (Set_union g0@461@01 g1@462@01)))
(declare-const sm@523@01 $FVF<l>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@524@01 ($Ref) $Ref)
(declare-fun img@525@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$91@522@01 $Ref) (n$92@522@01 $Ref)) (!
  (=>
    (and
      (Set_in n$91@522@01 (Set_union g0@461@01 g1@462@01))
      (Set_in n$92@522@01 (Set_union g0@461@01 g1@462@01))
      (= n$91@522@01 n$92@522@01))
    (= n$91@522@01 n$92@522@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$9@522@01 $Ref)) (!
  (=>
    (Set_in n$9@522@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@524@01 n$9@522@01) n$9@522@01) (img@525@01 n$9@522@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) n$9@522@01) n$9@522@01))
  :qid |quant-u-7451|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@525@01 r) (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@524@01 r) r))
  :pattern ((inv@524@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$9@522@01 $Ref)) (!
  (=>
    (Set_in n$9@522@01 (Set_union g0@461@01 g1@462@01))
    (not (= n$9@522@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) n$9@522@01) n$9@522@01))
  :qid |l-permImpliesNonNull|)))
(declare-const sm@526@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@525@01 r) (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@526@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r)))
  :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r))
  :qid |qp.fvfValDef512|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef513|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) r) r))
  :pattern ((inv@524@01 r))
  :qid |quant-u-7452|)))
(assert (=
  ($Snap.second ($Snap.second $t@521@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@521@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@521@01))))))
(declare-const n$10@527@01 $Ref)
(push) ; 3
; [eval] (n$10 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$10@527@01 (Set_union g0@461@01 g1@462@01)))
(declare-const sm@528@01 $FVF<r>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@529@01 ($Ref) $Ref)
(declare-fun img@530@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$101@527@01 $Ref) (n$102@527@01 $Ref)) (!
  (=>
    (and
      (Set_in n$101@527@01 (Set_union g0@461@01 g1@462@01))
      (Set_in n$102@527@01 (Set_union g0@461@01 g1@462@01))
      (= n$101@527@01 n$102@527@01))
    (= n$101@527@01 n$102@527@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$10@527@01 $Ref)) (!
  (=>
    (Set_in n$10@527@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@529@01 n$10@527@01) n$10@527@01) (img@530@01 n$10@527@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) n$10@527@01) n$10@527@01))
  :qid |quant-u-7454|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@530@01 r) (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@529@01 r) r))
  :pattern ((inv@529@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$10@527@01 $Ref)) (!
  (=>
    (Set_in n$10@527@01 (Set_union g0@461@01 g1@462@01))
    (not (= n$10@527@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) n$10@527@01) n$10@527@01))
  :qid |r-permImpliesNonNull|)))
(declare-const sm@531@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@530@01 r) (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@531@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r))
  :qid |qp.fvfValDef515|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef516|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) r) r))
  :pattern ((inv@529@01 r))
  :qid |quant-u-7455|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@521@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@521@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@521@01))))
  $Snap.unit))
; [eval] (forall n$11: Ref :: { (n$11.l in (g0 union g1)) } { (n$11 in (g0 union g1)), n$11.l } (n$11 in (g0 union g1)) && n$11.l != null ==> (n$11.l in (g0 union g1)))
(declare-const n$11@532@01 $Ref)
(push) ; 3
; [eval] (n$11 in (g0 union g1)) && n$11.l != null ==> (n$11.l in (g0 union g1))
; [eval] (n$11 in (g0 union g1)) && n$11.l != null
; [eval] (n$11 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 112 | !(n$11@532@01 in g0@461@01 ∪ g1@462@01) | live]
; [else-branch: 112 | n$11@532@01 in g0@461@01 ∪ g1@462@01 | live]
(push) ; 5
; [then-branch: 112 | !(n$11@532@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 112 | n$11@532@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01)))
; [eval] n$11.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@525@01 r)
        (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01)))
      (=
        ($FVF.lookup_l (as sm@526@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r)))
    :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r))
    :qid |qp.fvfValDef512|))
  (forall ((r $Ref)) (!
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r) r)
    :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef513|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) n$11@532@01))
(push) ; 6
(assert (not (and
  (img@525@01 n$11@532@01)
  (Set_in (inv@524@01 n$11@532@01) (Set_union g0@461@01 g1@462@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@525@01 r) (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@526@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r)))
  :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r))
  :qid |qp.fvfValDef512|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef513|)))
(assert (=>
  (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
  (and
    (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) n$11@532@01))))
(assert (or
  (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
  (not (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01)))))
(push) ; 4
; [then-branch: 113 | n$11@532@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@526@01, n$11@532@01) != Null | live]
; [else-branch: 113 | !(n$11@532@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@526@01, n$11@532@01) != Null) | live]
(push) ; 5
; [then-branch: 113 | n$11@532@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@526@01, n$11@532@01) != Null]
(assert (and
  (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
  (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null))))
; [eval] (n$11.l in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@525@01 r)
        (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01)))
      (=
        ($FVF.lookup_l (as sm@526@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r)))
    :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r))
    :qid |qp.fvfValDef512|))
  (forall ((r $Ref)) (!
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r) r)
    :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef513|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) n$11@532@01))
(push) ; 6
(assert (not (and
  (img@525@01 n$11@532@01)
  (Set_in (inv@524@01 n$11@532@01) (Set_union g0@461@01 g1@462@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 113 | !(n$11@532@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@526@01, n$11@532@01) != Null)]
(assert (not
  (and
    (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@525@01 r) (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@526@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r)))
  :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r))
  :qid |qp.fvfValDef512|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef513|)))
(assert (=>
  (and
    (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null)))
  (and
    (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) n$11@532@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null))))
  (and
    (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@525@01 r) (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@526@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r)))
  :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r))
  :qid |qp.fvfValDef512|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@526@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef513|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$11@532@01 $Ref)) (!
  (and
    (=>
      (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) n$11@532@01)))
    (or
      (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null)))
      (and
        (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) n$11@532@01)))
    (or
      (not
        (and
          (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null))))
      (and
        (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) (Set_union g0@461@01 g1@462@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@325@13@325@31-aux|)))
(assert (forall ((n$11@532@01 $Ref)) (!
  (and
    (=>
      (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) n$11@532@01)))
    (or
      (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null)))
      (and
        (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) n$11@532@01)))
    (or
      (not
        (and
          (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null))))
      (and
        (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null)))))
  :pattern ((Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) n$11@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@325@13@325@31-aux|)))
(assert (forall ((n$11@532@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in n$11@532@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n$11@532@01) n$11@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@325@13@325@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01)))))
  $Snap.unit))
; [eval] (forall n$12: Ref :: { (n$12.r in (g0 union g1)) } { (n$12 in (g0 union g1)), n$12.r } (n$12 in (g0 union g1)) && n$12.r != null ==> (n$12.r in (g0 union g1)))
(declare-const n$12@533@01 $Ref)
(push) ; 3
; [eval] (n$12 in (g0 union g1)) && n$12.r != null ==> (n$12.r in (g0 union g1))
; [eval] (n$12 in (g0 union g1)) && n$12.r != null
; [eval] (n$12 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 114 | !(n$12@533@01 in g0@461@01 ∪ g1@462@01) | live]
; [else-branch: 114 | n$12@533@01 in g0@461@01 ∪ g1@462@01 | live]
(push) ; 5
; [then-branch: 114 | !(n$12@533@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 114 | n$12@533@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01)))
; [eval] n$12.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@530@01 r)
        (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01)))
      (=
        ($FVF.lookup_r (as sm@531@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r))
    :qid |qp.fvfValDef515|))
  (forall ((r $Ref)) (!
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r) r)
    :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef516|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) n$12@533@01))
(push) ; 6
(assert (not (and
  (img@530@01 n$12@533@01)
  (Set_in (inv@529@01 n$12@533@01) (Set_union g0@461@01 g1@462@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@530@01 r) (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@531@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r))
  :qid |qp.fvfValDef515|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef516|)))
(assert (=>
  (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
  (and
    (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) n$12@533@01))))
(assert (or
  (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
  (not (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01)))))
(push) ; 4
; [then-branch: 115 | n$12@533@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@531@01, n$12@533@01) != Null | live]
; [else-branch: 115 | !(n$12@533@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@531@01, n$12@533@01) != Null) | live]
(push) ; 5
; [then-branch: 115 | n$12@533@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@531@01, n$12@533@01) != Null]
(assert (and
  (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
  (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null))))
; [eval] (n$12.r in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@530@01 r)
        (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01)))
      (=
        ($FVF.lookup_r (as sm@531@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r))
    :qid |qp.fvfValDef515|))
  (forall ((r $Ref)) (!
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r) r)
    :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef516|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) n$12@533@01))
(push) ; 6
(assert (not (and
  (img@530@01 n$12@533@01)
  (Set_in (inv@529@01 n$12@533@01) (Set_union g0@461@01 g1@462@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 115 | !(n$12@533@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@531@01, n$12@533@01) != Null)]
(assert (not
  (and
    (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@530@01 r) (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@531@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r))
  :qid |qp.fvfValDef515|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef516|)))
(assert (=>
  (and
    (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null)))
  (and
    (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) n$12@533@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null))))
  (and
    (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@530@01 r) (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@531@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r))
  :qid |qp.fvfValDef515|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@531@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef516|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$12@533@01 $Ref)) (!
  (and
    (=>
      (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) n$12@533@01)))
    (or
      (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null)))
      (and
        (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) n$12@533@01)))
    (or
      (not
        (and
          (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null))))
      (and
        (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) (Set_union g0@461@01 g1@462@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@325@13@325@31-aux|)))
(assert (forall ((n$12@533@01 $Ref)) (!
  (and
    (=>
      (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) n$12@533@01)))
    (or
      (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null)))
      (and
        (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) n$12@533@01)))
    (or
      (not
        (and
          (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null))))
      (and
        (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null)))))
  :pattern ((Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) n$12@533@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@325@13@325@31-aux|)))
(assert (forall ((n$12@533@01 $Ref)) (!
  (=>
    (and
      (Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in n$12@533@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n$12@533@01) n$12@533@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@325@13@325@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01)))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in (g0 union g1)) } { exists_path($$((g0 union g1)), x, n) } (n in (g0 union g1)) ==> exists_path($$((g0 union g1)), x, n))
(declare-const n@534@01 $Ref)
(push) ; 3
; [eval] (n in (g0 union g1)) ==> exists_path($$((g0 union g1)), x, n)
; [eval] (n in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 116 | n@534@01 in g0@461@01 ∪ g1@462@01 | live]
; [else-branch: 116 | !(n@534@01 in g0@461@01 ∪ g1@462@01) | live]
(push) ; 5
; [then-branch: 116 | n@534@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n@534@01 (Set_union g0@461@01 g1@462@01)))
; [eval] exists_path($$((g0 union g1)), x, n)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@535@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@535@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 7
(declare-fun inv@536@01 ($Ref) $Ref)
(declare-fun img@537@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@535@01 $Ref) (n2@535@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@535@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n1@535@01) n1@535@01))
      (and
        (Set_in n2@535@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) n2@535@01) n2@535@01))
      (= n1@535@01 n2@535@01))
    (= n1@535@01 n2@535@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@535@01 $Ref)) (!
  (=>
    (Set_in n@535@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@536@01 n@535@01) n@535@01) (img@537@01 n@535@01)))
  :pattern ((Set_in n@535@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@536@01 n@535@01))
  :pattern ((img@537@01 n@535@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@537@01 r) (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@536@01 r) r))
  :pattern ((inv@536@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) r) r))
  :pattern ((inv@536@01 r))
  :qid |quant-u-7457|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
      (img@537@01 r)
      (= r (inv@536@01 r)))
    (>
      (ite
        (and
          (img@525@01 r)
          (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-7458|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@538@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>)))
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r)))
    (=>
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r))
      (Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>))))
  :qid |qp.fvfDomDef519|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r))
      (and
        (img@525@01 r)
        (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01))))
    (=
      ($FVF.lookup_l (as sm@538@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r)))
  :pattern (($FVF.lookup_l (as sm@538@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r))
  :qid |qp.fvfValDef517|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@538@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef518|)))
(declare-const n@539@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@539@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 7
(declare-fun inv@540@01 ($Ref) $Ref)
(declare-fun img@541@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@539@01 $Ref) (n2@539@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@539@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n1@539@01) n1@539@01))
      (and
        (Set_in n2@539@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) n2@539@01) n2@539@01))
      (= n1@539@01 n2@539@01))
    (= n1@539@01 n2@539@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@539@01 $Ref)) (!
  (=>
    (Set_in n@539@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@540@01 n@539@01) n@539@01) (img@541@01 n@539@01)))
  :pattern ((Set_in n@539@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@540@01 n@539@01))
  :pattern ((img@541@01 n@539@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@541@01 r) (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@540@01 r) r))
  :pattern ((inv@540@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) r) r))
  :pattern ((inv@540@01 r))
  :qid |quant-u-7460|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
      (img@541@01 r)
      (= r (inv@540@01 r)))
    (>
      (ite
        (and
          (img@530@01 r)
          (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-7461|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@542@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>)))
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r)))
    (=>
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r))
      (Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>))))
  :qid |qp.fvfDomDef522|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r))
      (and
        (img@530@01 r)
        (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01))))
    (=
      ($FVF.lookup_r (as sm@542@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@542@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r))
  :qid |qp.fvfValDef520|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@542@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef521|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@538@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@542@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@535@01 $Ref)) (!
  (=>
    (Set_in n@535@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@536@01 n@535@01) n@535@01) (img@537@01 n@535@01)))
  :pattern ((Set_in n@535@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@536@01 n@535@01))
  :pattern ((img@537@01 n@535@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@537@01 r) (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@536@01 r) r))
  :pattern ((inv@536@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>)))
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r)))
    (=>
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r))
      (Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>))))
  :qid |qp.fvfDomDef519|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r))
      (and
        (img@525@01 r)
        (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01))))
    (=
      ($FVF.lookup_l (as sm@538@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r)))
  :pattern (($FVF.lookup_l (as sm@538@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r))
  :qid |qp.fvfValDef517|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@538@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef518|)))
(assert (forall ((n@539@01 $Ref)) (!
  (=>
    (Set_in n@539@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@540@01 n@539@01) n@539@01) (img@541@01 n@539@01)))
  :pattern ((Set_in n@539@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@540@01 n@539@01))
  :pattern ((img@541@01 n@539@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@541@01 r) (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@540@01 r) r))
  :pattern ((inv@540@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>)))
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r)))
    (=>
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r))
      (Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>))))
  :qid |qp.fvfDomDef522|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r))
      (and
        (img@530@01 r)
        (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01))))
    (=
      ($FVF.lookup_r (as sm@542@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@542@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r))
  :qid |qp.fvfValDef520|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@542@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef521|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) r) r))
    :pattern ((inv@536@01 r))
    :qid |quant-u-7457|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) r) r))
    :pattern ((inv@540@01 r))
    :qid |quant-u-7460|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@538@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@542@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 116 | !(n@534@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((n@535@01 $Ref)) (!
  (=>
    (Set_in n@535@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@536@01 n@535@01) n@535@01) (img@537@01 n@535@01)))
  :pattern ((Set_in n@535@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@536@01 n@535@01))
  :pattern ((img@537@01 n@535@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@537@01 r) (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@536@01 r) r))
  :pattern ((inv@536@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>)))
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r)))
    (=>
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r))
      (Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>))))
  :qid |qp.fvfDomDef519|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r))
      (and
        (img@525@01 r)
        (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01))))
    (=
      ($FVF.lookup_l (as sm@538@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r)))
  :pattern (($FVF.lookup_l (as sm@538@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r))
  :qid |qp.fvfValDef517|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@538@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef518|)))
(assert (forall ((n@539@01 $Ref)) (!
  (=>
    (Set_in n@539@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@540@01 n@539@01) n@539@01) (img@541@01 n@539@01)))
  :pattern ((Set_in n@539@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@540@01 n@539@01))
  :pattern ((img@541@01 n@539@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@541@01 r) (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@540@01 r) r))
  :pattern ((inv@540@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>)))
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r)))
    (=>
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r))
      (Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>))))
  :qid |qp.fvfDomDef522|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r))
      (and
        (img@530@01 r)
        (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01))))
    (=
      ($FVF.lookup_r (as sm@542@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@542@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r))
  :qid |qp.fvfValDef520|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@542@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef521|)))
(assert (=>
  (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))
  (and
    (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) r) r))
      :pattern ((inv@536@01 r))
      :qid |quant-u-7457|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) r) r))
      :pattern ((inv@540@01 r))
      :qid |quant-u-7460|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@538@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@542@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))))
; Joined path conditions
(assert (or
  (not (Set_in n@534@01 (Set_union g0@461@01 g1@462@01)))
  (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@535@01 $Ref)) (!
  (=>
    (Set_in n@535@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@536@01 n@535@01) n@535@01) (img@537@01 n@535@01)))
  :pattern ((Set_in n@535@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@536@01 n@535@01))
  :pattern ((img@537@01 n@535@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@537@01 r) (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@536@01 r) r))
  :pattern ((inv@536@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>)))
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r)))
    (=>
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r))
      (Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@538@01  $FVF<l>))))
  :qid |qp.fvfDomDef519|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
        (img@537@01 r))
      (and
        (img@525@01 r)
        (Set_in (inv@524@01 r) (Set_union g0@461@01 g1@462@01))))
    (=
      ($FVF.lookup_l (as sm@538@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r)))
  :pattern (($FVF.lookup_l (as sm@538@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r))
  :qid |qp.fvfValDef517|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@521@01))) r) r)
  :pattern (($FVF.lookup_l (as sm@538@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef518|)))
(assert (forall ((n@539@01 $Ref)) (!
  (=>
    (Set_in n@539@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@540@01 n@539@01) n@539@01) (img@541@01 n@539@01)))
  :pattern ((Set_in n@539@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@540@01 n@539@01))
  :pattern ((img@541@01 n@539@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@541@01 r) (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@540@01 r) r))
  :pattern ((inv@540@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>)))
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r)))
    (=>
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r))
      (Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@542@01  $FVF<r>))))
  :qid |qp.fvfDomDef522|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
        (img@541@01 r))
      (and
        (img@530@01 r)
        (Set_in (inv@529@01 r) (Set_union g0@461@01 g1@462@01))))
    (=
      ($FVF.lookup_r (as sm@542@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@542@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r))
  :qid |qp.fvfValDef520|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@521@01)))) r) r)
  :pattern (($FVF.lookup_r (as sm@542@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef521|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@534@01 $Ref)) (!
  (and
    (=>
      (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) r) r))
          :pattern ((inv@536@01 r))
          :qid |quant-u-7457|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) r) r))
          :pattern ((inv@540@01 r))
          :qid |quant-u-7460|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@538@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@542@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
    (or
      (not (Set_in n@534@01 (Set_union g0@461@01 g1@462@01)))
      (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))))
  :pattern ((Set_in n@534@01 (Set_union g0@461@01 g1@462@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@326@13@326@84-aux|)))
(assert (forall ((n@534@01 $Ref)) (!
  (and
    (=>
      (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@536@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_l ($FVF.lookup_l (as sm@526@01  $FVF<l>) r) r))
          :pattern ((inv@536@01 r))
          :qid |quant-u-7457|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@540@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_r ($FVF.lookup_r (as sm@531@01  $FVF<r>) r) r))
          :pattern ((inv@540@01 r))
          :qid |quant-u-7460|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@538@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@542@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
    (or
      (not (Set_in n@534@01 (Set_union g0@461@01 g1@462@01)))
      (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@538@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@542@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) x@465@01 n@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@326@13@326@84-aux|)))
(assert (forall ((n@534@01 $Ref)) (!
  (=>
    (Set_in n@534@01 (Set_union g0@461@01 g1@462@01))
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@538@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@542@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) x@465@01 n@534@01))
  :pattern ((Set_in n@534@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@538@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@542@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) x@465@01 n@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@326@13@326@84|)))
(pop) ; 2
(push) ; 2
; [exec]
; inhale apply_TCFraming(g0, g1)
(declare-const $t@543@01 $Snap)
(assert (= $t@543@01 $Snap.unit))
; [eval] apply_TCFraming(g0, g1)
(push) ; 3
(declare-const n@544@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@544@01 g0@461@01))
(pop) ; 4
(declare-fun inv@545@01 ($Ref) $Ref)
(declare-fun img@546@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@544@01 $Ref) (n2@544@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@544@01 g0@461@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n1@544@01) n1@544@01))
      (and
        (Set_in n2@544@01 g0@461@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) n2@544@01) n2@544@01))
      (= n1@544@01 n2@544@01))
    (= n1@544@01 n2@544@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@544@01 $Ref)) (!
  (=>
    (Set_in n@544@01 g0@461@01)
    (and (= (inv@545@01 n@544@01) n@544@01) (img@546@01 n@544@01)))
  :pattern ((Set_in n@544@01 g0@461@01))
  :pattern ((inv@545@01 n@544@01))
  :pattern ((img@546@01 n@544@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@546@01 r) (Set_in (inv@545@01 r) g0@461@01))
    (= (inv@545@01 r) r))
  :pattern ((inv@545@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@545@01 r) g0@461@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
  :pattern ((inv@545@01 r))
  :qid |quant-u-7463|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@545@01 r) g0@461@01) (img@546@01 r) (= r (inv@545@01 r)))
    (>
      (+
        (ite
          (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7464|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@547@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@547@01  $FVF<l>)))
      (and (Set_in (inv@545@01 r) g0@461@01) (img@546@01 r)))
    (=>
      (and (Set_in (inv@545@01 r) g0@461@01) (img@546@01 r))
      (Set_in r ($FVF.domain_l (as sm@547@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@547@01  $FVF<l>))))
  :qid |qp.fvfDomDef526|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@545@01 r) g0@461@01) (img@546@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@547@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@547@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef523|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@545@01 r) g0@461@01) (img@546@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@547@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@547@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef524|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@547@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef525|)))
(declare-const n@548@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@548@01 g0@461@01))
(pop) ; 4
(declare-fun inv@549@01 ($Ref) $Ref)
(declare-fun img@550@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@551@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@551@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@551@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef527|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@551@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@551@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef528|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@551@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef529|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@548@01 $Ref) (n2@548@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@548@01 g0@461@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@551@01  $FVF<r>) n1@548@01) n1@548@01))
      (and
        (Set_in n2@548@01 g0@461@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@551@01  $FVF<r>) n2@548@01) n2@548@01))
      (= n1@548@01 n2@548@01))
    (= n1@548@01 n2@548@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@548@01 $Ref)) (!
  (=>
    (Set_in n@548@01 g0@461@01)
    (and (= (inv@549@01 n@548@01) n@548@01) (img@550@01 n@548@01)))
  :pattern ((Set_in n@548@01 g0@461@01))
  :pattern ((inv@549@01 n@548@01))
  :pattern ((img@550@01 n@548@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@550@01 r) (Set_in (inv@549@01 r) g0@461@01))
    (= (inv@549@01 r) r))
  :pattern ((inv@549@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@549@01 r) g0@461@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@551@01  $FVF<r>) r) r))
  :pattern ((inv@549@01 r))
  :qid |quant-u-7466|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@549@01 r) g0@461@01) (img@550@01 r) (= r (inv@549@01 r)))
    (>
      (+
        (ite
          (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7467|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@552@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@552@01  $FVF<r>)))
      (and (Set_in (inv@549@01 r) g0@461@01) (img@550@01 r)))
    (=>
      (and (Set_in (inv@549@01 r) g0@461@01) (img@550@01 r))
      (Set_in r ($FVF.domain_r (as sm@552@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@552@01  $FVF<r>))))
  :qid |qp.fvfDomDef533|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@549@01 r) g0@461@01) (img@550@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@552@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@552@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef530|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@549@01 r) g0@461@01) (img@550@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@552@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@552@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef531|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@552@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef532|)))
(declare-const n@553@01 $Ref)
(push) ; 4
; [eval] (n in g1)
(assert (Set_in n@553@01 g1@462@01))
(pop) ; 4
(declare-fun inv@554@01 ($Ref) $Ref)
(declare-fun img@555@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@556@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@556@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@556@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef534|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@556@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@556@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef535|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@556@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef536|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@553@01 $Ref) (n2@553@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@553@01 g1@462@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@556@01  $FVF<l>) n1@553@01) n1@553@01))
      (and
        (Set_in n2@553@01 g1@462@01)
        ($FVF.loc_l ($FVF.lookup_l (as sm@556@01  $FVF<l>) n2@553@01) n2@553@01))
      (= n1@553@01 n2@553@01))
    (= n1@553@01 n2@553@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@553@01 $Ref)) (!
  (=>
    (Set_in n@553@01 g1@462@01)
    (and (= (inv@554@01 n@553@01) n@553@01) (img@555@01 n@553@01)))
  :pattern ((Set_in n@553@01 g1@462@01))
  :pattern ((inv@554@01 n@553@01))
  :pattern ((img@555@01 n@553@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@555@01 r) (Set_in (inv@554@01 r) g1@462@01))
    (= (inv@554@01 r) r))
  :pattern ((inv@554@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@554@01 r) g1@462@01)
    ($FVF.loc_l ($FVF.lookup_l (as sm@556@01  $FVF<l>) r) r))
  :pattern ((inv@554@01 r))
  :qid |quant-u-7469|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@554@01 r) g1@462@01) (img@555@01 r) (= r (inv@554@01 r)))
    (>
      (+
        (ite
          (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7470|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@557@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@557@01  $FVF<l>)))
      (and (Set_in (inv@554@01 r) g1@462@01) (img@555@01 r)))
    (=>
      (and (Set_in (inv@554@01 r) g1@462@01) (img@555@01 r))
      (Set_in r ($FVF.domain_l (as sm@557@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@557@01  $FVF<l>))))
  :qid |qp.fvfDomDef540|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@554@01 r) g1@462@01) (img@555@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@557@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@557@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef537|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@554@01 r) g1@462@01) (img@555@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@557@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@557@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef538|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@557@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef539|)))
(declare-const n@558@01 $Ref)
(push) ; 4
; [eval] (n in g1)
(assert (Set_in n@558@01 g1@462@01))
(pop) ; 4
(declare-fun inv@559@01 ($Ref) $Ref)
(declare-fun img@560@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@561@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@561@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@561@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef541|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@561@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@561@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef542|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@561@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef543|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@558@01 $Ref) (n2@558@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@558@01 g1@462@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@561@01  $FVF<r>) n1@558@01) n1@558@01))
      (and
        (Set_in n2@558@01 g1@462@01)
        ($FVF.loc_r ($FVF.lookup_r (as sm@561@01  $FVF<r>) n2@558@01) n2@558@01))
      (= n1@558@01 n2@558@01))
    (= n1@558@01 n2@558@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@558@01 $Ref)) (!
  (=>
    (Set_in n@558@01 g1@462@01)
    (and (= (inv@559@01 n@558@01) n@558@01) (img@560@01 n@558@01)))
  :pattern ((Set_in n@558@01 g1@462@01))
  :pattern ((inv@559@01 n@558@01))
  :pattern ((img@560@01 n@558@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@560@01 r) (Set_in (inv@559@01 r) g1@462@01))
    (= (inv@559@01 r) r))
  :pattern ((inv@559@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@559@01 r) g1@462@01)
    ($FVF.loc_r ($FVF.lookup_r (as sm@561@01  $FVF<r>) r) r))
  :pattern ((inv@559@01 r))
  :qid |quant-u-7472|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@559@01 r) g1@462@01) (img@560@01 r) (= r (inv@559@01 r)))
    (>
      (+
        (ite
          (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7473|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@562@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@562@01  $FVF<r>)))
      (and (Set_in (inv@559@01 r) g1@462@01) (img@560@01 r)))
    (=>
      (and (Set_in (inv@559@01 r) g1@462@01) (img@560@01 r))
      (Set_in r ($FVF.domain_r (as sm@562@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@562@01  $FVF<r>))))
  :qid |qp.fvfDomDef547|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@559@01 r) g1@462@01) (img@560@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@562@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@562@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef544|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@559@01 r) g1@462@01) (img@560@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@562@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@562@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef545|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@562@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef546|)))
; [eval] (forall n$0: Ref ::(n$0 in g0) ==> !((n$0 in g1)))
(declare-const n$0@563@01 $Ref)
(push) ; 4
; [eval] (n$0 in g0) ==> !((n$0 in g1))
; [eval] (n$0 in g0)
(push) ; 5
; [then-branch: 117 | n$0@563@01 in g0@461@01 | live]
; [else-branch: 117 | !(n$0@563@01 in g0@461@01) | live]
(push) ; 6
; [then-branch: 117 | n$0@563@01 in g0@461@01]
(assert (Set_in n$0@563@01 g0@461@01))
; [eval] !((n$0 in g1))
; [eval] (n$0 in g1)
(pop) ; 6
(push) ; 6
; [else-branch: 117 | !(n$0@563@01 in g0@461@01)]
(assert (not (Set_in n$0@563@01 g0@461@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in n$0@563@01 g0@461@01)) (Set_in n$0@563@01 g0@461@01)))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$0@563@01 $Ref)) (!
  (=> (Set_in n$0@563@01 g0@461@01) (not (Set_in n$0@563@01 g1@462@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@208@14@208@34|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@563@01 $Ref)) (!
  (=> (Set_in n$0@563@01 g0@461@01) (not (Set_in n$0@563@01 g1@462@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@208@14@208@34|)))
; [eval] (forall n$1: Ref ::(n$1 in g1) ==> !((n$1 in g0)))
(declare-const n$1@564@01 $Ref)
(push) ; 4
; [eval] (n$1 in g1) ==> !((n$1 in g0))
; [eval] (n$1 in g1)
(push) ; 5
; [then-branch: 118 | n$1@564@01 in g1@462@01 | live]
; [else-branch: 118 | !(n$1@564@01 in g1@462@01) | live]
(push) ; 6
; [then-branch: 118 | n$1@564@01 in g1@462@01]
(assert (Set_in n$1@564@01 g1@462@01))
; [eval] !((n$1 in g0))
; [eval] (n$1 in g0)
(pop) ; 6
(push) ; 6
; [else-branch: 118 | !(n$1@564@01 in g1@462@01)]
(assert (not (Set_in n$1@564@01 g1@462@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in n$1@564@01 g1@462@01)) (Set_in n$1@564@01 g1@462@01)))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$1@564@01 $Ref)) (!
  (=> (Set_in n$1@564@01 g1@462@01) (not (Set_in n$1@564@01 g0@461@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@208@14@208@34|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$1@564@01 $Ref)) (!
  (=> (Set_in n$1@564@01 g1@462@01) (not (Set_in n$1@564@01 g0@461@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@208@14@208@34|)))
(assert (apply_TCFraming%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@547@01  $FVF<l>))
  ($Snap.combine
    ($SortWrappers.$FVF<r>To$Snap (as sm@552@01  $FVF<r>))
    ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@557@01  $FVF<l>))
      ($Snap.combine
        ($SortWrappers.$FVF<r>To$Snap (as sm@562@01  $FVF<r>))
        ($Snap.combine $Snap.unit $Snap.unit))))) g0@461@01 g1@462@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@544@01 $Ref)) (!
  (=>
    (Set_in n@544@01 g0@461@01)
    (and (= (inv@545@01 n@544@01) n@544@01) (img@546@01 n@544@01)))
  :pattern ((Set_in n@544@01 g0@461@01))
  :pattern ((inv@545@01 n@544@01))
  :pattern ((img@546@01 n@544@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@546@01 r) (Set_in (inv@545@01 r) g0@461@01))
    (= (inv@545@01 r) r))
  :pattern ((inv@545@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@547@01  $FVF<l>)))
      (and (Set_in (inv@545@01 r) g0@461@01) (img@546@01 r)))
    (=>
      (and (Set_in (inv@545@01 r) g0@461@01) (img@546@01 r))
      (Set_in r ($FVF.domain_l (as sm@547@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@547@01  $FVF<l>))))
  :qid |qp.fvfDomDef526|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@545@01 r) g0@461@01) (img@546@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@547@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@547@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef523|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@545@01 r) g0@461@01) (img@546@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@547@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@547@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef524|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@547@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef525|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@551@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@551@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef527|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@551@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@551@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef528|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@551@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef529|)))
(assert (forall ((n@548@01 $Ref)) (!
  (=>
    (Set_in n@548@01 g0@461@01)
    (and (= (inv@549@01 n@548@01) n@548@01) (img@550@01 n@548@01)))
  :pattern ((Set_in n@548@01 g0@461@01))
  :pattern ((inv@549@01 n@548@01))
  :pattern ((img@550@01 n@548@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@550@01 r) (Set_in (inv@549@01 r) g0@461@01))
    (= (inv@549@01 r) r))
  :pattern ((inv@549@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@552@01  $FVF<r>)))
      (and (Set_in (inv@549@01 r) g0@461@01) (img@550@01 r)))
    (=>
      (and (Set_in (inv@549@01 r) g0@461@01) (img@550@01 r))
      (Set_in r ($FVF.domain_r (as sm@552@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@552@01  $FVF<r>))))
  :qid |qp.fvfDomDef533|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@549@01 r) g0@461@01) (img@550@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@552@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@552@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef530|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@549@01 r) g0@461@01) (img@550@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@552@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@552@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef531|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@552@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef532|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@556@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@556@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef534|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@556@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@556@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef535|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@556@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef536|)))
(assert (forall ((n@553@01 $Ref)) (!
  (=>
    (Set_in n@553@01 g1@462@01)
    (and (= (inv@554@01 n@553@01) n@553@01) (img@555@01 n@553@01)))
  :pattern ((Set_in n@553@01 g1@462@01))
  :pattern ((inv@554@01 n@553@01))
  :pattern ((img@555@01 n@553@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@555@01 r) (Set_in (inv@554@01 r) g1@462@01))
    (= (inv@554@01 r) r))
  :pattern ((inv@554@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@557@01  $FVF<l>)))
      (and (Set_in (inv@554@01 r) g1@462@01) (img@555@01 r)))
    (=>
      (and (Set_in (inv@554@01 r) g1@462@01) (img@555@01 r))
      (Set_in r ($FVF.domain_l (as sm@557@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@557@01  $FVF<l>))))
  :qid |qp.fvfDomDef540|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@554@01 r) g1@462@01) (img@555@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@557@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@557@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef537|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@554@01 r) g1@462@01) (img@555@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@557@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@557@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef538|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@557@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef539|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@561@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@561@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef541|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@561@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@561@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef542|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@561@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef543|)))
(assert (forall ((n@558@01 $Ref)) (!
  (=>
    (Set_in n@558@01 g1@462@01)
    (and (= (inv@559@01 n@558@01) n@558@01) (img@560@01 n@558@01)))
  :pattern ((Set_in n@558@01 g1@462@01))
  :pattern ((inv@559@01 n@558@01))
  :pattern ((img@560@01 n@558@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@560@01 r) (Set_in (inv@559@01 r) g1@462@01))
    (= (inv@559@01 r) r))
  :pattern ((inv@559@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@562@01  $FVF<r>)))
      (and (Set_in (inv@559@01 r) g1@462@01) (img@560@01 r)))
    (=>
      (and (Set_in (inv@559@01 r) g1@462@01) (img@560@01 r))
      (Set_in r ($FVF.domain_r (as sm@562@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@562@01  $FVF<r>))))
  :qid |qp.fvfDomDef547|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@559@01 r) g1@462@01) (img@560@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@562@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@562@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef544|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@559@01 r) g1@462@01) (img@560@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@562@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@562@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef545|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@562@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef546|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@545@01 r) g0@461@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@482@01  $FVF<l>) r) r))
    :pattern ((inv@545@01 r))
    :qid |quant-u-7463|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@549@01 r) g0@461@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@551@01  $FVF<r>) r) r))
    :pattern ((inv@549@01 r))
    :qid |quant-u-7466|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@554@01 r) g1@462@01)
      ($FVF.loc_l ($FVF.lookup_l (as sm@556@01  $FVF<l>) r) r))
    :pattern ((inv@554@01 r))
    :qid |quant-u-7469|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@559@01 r) g1@462@01)
      ($FVF.loc_r ($FVF.lookup_r (as sm@561@01  $FVF<r>) r) r))
    :pattern ((inv@559@01 r))
    :qid |quant-u-7472|))
  (forall ((n$0@563@01 $Ref)) (!
    (=> (Set_in n$0@563@01 g0@461@01) (not (Set_in n$0@563@01 g1@462@01)))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@208@14@208@34|))
  (forall ((n$1@564@01 $Ref)) (!
    (=> (Set_in n$1@564@01 g1@462@01) (not (Set_in n$1@564@01 g0@461@01)))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@208@14@208@34|))
  (apply_TCFraming%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@547@01  $FVF<l>))
    ($Snap.combine
      ($SortWrappers.$FVF<r>To$Snap (as sm@552@01  $FVF<r>))
      ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@557@01  $FVF<l>))
        ($Snap.combine
          ($SortWrappers.$FVF<r>To$Snap (as sm@562@01  $FVF<r>))
          ($Snap.combine $Snap.unit $Snap.unit))))) g0@461@01 g1@462@01)))
(assert (apply_TCFraming ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@547@01  $FVF<l>))
  ($Snap.combine
    ($SortWrappers.$FVF<r>To$Snap (as sm@552@01  $FVF<r>))
    ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@557@01  $FVF<l>))
      ($Snap.combine
        ($SortWrappers.$FVF<r>To$Snap (as sm@562@01  $FVF<r>))
        ($Snap.combine $Snap.unit $Snap.unit))))) g0@461@01 g1@462@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] x0.l == null
(declare-const sm@565@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef548|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef549|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef550|)))
(declare-const pm@566@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_l (as pm@566@01  $FPM) r)
    (+
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_l (as pm@566@01  $FPM) r))
  :qid |qp.resPrmSumDef551|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.perm_l (as pm@566@01  $FPM) r))
  :qid |qp.resTrgDef552|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) x0@463@01) x0@463@01))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_l (as pm@566@01  $FPM) x0@463@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) x0@463@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) x0@463@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [then-branch: 119 | Lookup(l, sm@565@01, x0@463@01) == Null | live]
; [else-branch: 119 | Lookup(l, sm@565@01, x0@463@01) != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 119 | Lookup(l, sm@565@01, x0@463@01) == Null]
(assert (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) x0@463@01) $Ref.null))
; [exec]
; link_left((g0 union g1), x0, x1)
; [eval] (g0 union g1)
; [eval] (x in g)
(push) ; 4
(assert (not (Set_in x0@463@01 (Set_union g0@461@01 g1@462@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_in x0@463@01 (Set_union g0@461@01 g1@462@01)))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= x1@464@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= x1@464@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | x1@464@01 != Null | live]
; [else-branch: 120 | x1@464@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 120 | x1@464@01 != Null]
(assert (not (= x1@464@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (= x1@464@01 $Ref.null)))
(push) ; 4
(assert (not (=>
  (not (= x1@464@01 $Ref.null))
  (Set_in x1@464@01 (Set_union g0@461@01 g1@462@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= x1@464@01 $Ref.null))
  (Set_in x1@464@01 (Set_union g0@461@01 g1@462@01))))
; [eval] !((null in g))
; [eval] (null in g)
(push) ; 4
(assert (not (not (Set_in $Ref.null (Set_union g0@461@01 g1@462@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null (Set_union g0@461@01 g1@462@01))))
; [eval] (x in g)
; [eval] (__left__() == __left__() ? write : 1 / 2)
; [eval] __left__() == __left__()
; [eval] __left__()
; [eval] __left__()
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 121 | True | live]
; [else-branch: 121 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 121 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Definitional axioms for snapshot map values
; Precomputing data for removing quantified permissions
(define-fun pTaken@567@01 ((r $Ref)) $Perm
  (ite
    (= r x0@463@01)
    ($Perm.min
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@568@01 ((r $Ref)) $Perm
  (ite
    (= r x0@463@01)
    ($Perm.min
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@567@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        $Perm.Write
        $Perm.No)
      (pTaken@567@01 r))
    $Perm.No)
  
  :qid |quant-u-7475|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@567@01 r) $Perm.No)
  
  :qid |quant-u-7476|))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r x0@463@01) (= (- $Perm.Write (pTaken@567@01 r)) $Perm.No))
  
  :qid |quant-u-7477|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (__left__() == __right__() ? write : 1 / 2)
; [eval] __left__() == __right__()
; [eval] __left__()
; [eval] __right__()
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 122 | __left__[__FieldEnum__] == __right__[__FieldEnum__] | dead]
; [else-branch: 122 | __left__[__FieldEnum__] != __right__[__FieldEnum__] | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 122 | __left__[__FieldEnum__] != __right__[__FieldEnum__]]
(assert (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (=
    (as __left__<__FieldEnum__>  __FieldEnum__)
    (as __right__<__FieldEnum__>  __FieldEnum__))))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) x0@463@01) x0@463@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@569@01 ((r $Ref)) $Perm
  (ite
    (= r x0@463@01)
    ($Perm.min
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@570@01 ((r $Ref)) $Perm
  (ite
    (= r x0@463@01)
    ($Perm.min
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        $Perm.Write
        $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@569@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        $Perm.Write
        $Perm.No)
      (pTaken@569@01 r))
    $Perm.No)
  
  :qid |quant-u-7479|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@569@01 r) $Perm.No)
  
  :qid |quant-u-7480|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@569@01 r)) $Perm.No))
  
  :qid |quant-u-7481|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        $Perm.Write
        $Perm.No)
      (pTaken@570@01 r))
    $Perm.No)
  
  :qid |quant-u-7482|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@570@01 r) $Perm.No)
  
  :qid |quant-u-7483|))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@569@01 r)) (pTaken@570@01 r))
      $Perm.No))
  
  :qid |quant-u-7484|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const n@571@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 5
; [then-branch: 123 | !(n@571@01 in g0@461@01 ∪ g1@462@01) | live]
; [else-branch: 123 | n@571@01 in g0@461@01 ∪ g1@462@01 | live]
(push) ; 6
; [then-branch: 123 | !(n@571@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n@571@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 123 | n@571@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n@571@01 (Set_union g0@461@01 g1@462@01)))
; [eval] n != x
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Set_in n@571@01 (Set_union g0@461@01 g1@462@01))
  (not (Set_in n@571@01 (Set_union g0@461@01 g1@462@01)))))
(assert (and
  (Set_in n@571@01 (Set_union g0@461@01 g1@462@01))
  (not (= n@571@01 x0@463@01))))
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@572@01 ($Ref) $Ref)
(declare-fun img@573@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@571@01 $Ref)) (!
  (=>
    (and
      (Set_in n@571@01 (Set_union g0@461@01 g1@462@01))
      (not (= n@571@01 x0@463@01)))
    (or
      (Set_in n@571@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n@571@01 (Set_union g0@461@01 g1@462@01)))))
  :pattern (($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n@571@01) n@571@01))
  :qid |l-aux|)))
(declare-const sm@574@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- $Perm.Write (pTaken@567@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@574@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@574@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef553|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@574@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@574@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef554|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@574@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef555|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@571@01 $Ref) (n2@571@01 $Ref)) (!
  (=>
    (and
      (and
        (and
          (Set_in n1@571@01 (Set_union g0@461@01 g1@462@01))
          (not (= n1@571@01 x0@463@01)))
        ($FVF.loc_l ($FVF.lookup_l (as sm@574@01  $FVF<l>) n1@571@01) n1@571@01))
      (and
        (and
          (Set_in n2@571@01 (Set_union g0@461@01 g1@462@01))
          (not (= n2@571@01 x0@463@01)))
        ($FVF.loc_l ($FVF.lookup_l (as sm@574@01  $FVF<l>) n2@571@01) n2@571@01))
      (= n1@571@01 n2@571@01))
    (= n1@571@01 n2@571@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@571@01 $Ref)) (!
  (=>
    (and
      (Set_in n@571@01 (Set_union g0@461@01 g1@462@01))
      (not (= n@571@01 x0@463@01)))
    (and (= (inv@572@01 n@571@01) n@571@01) (img@573@01 n@571@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n@571@01) n@571@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@573@01 r)
      (and
        (Set_in (inv@572@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@572@01 r) x0@463@01))))
    (= (inv@572@01 r) r))
  :pattern ((inv@572@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@572@01 r) (Set_union g0@461@01 g1@462@01))
      (not (= (inv@572@01 r) x0@463@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@574@01  $FVF<l>) r) r))
  :pattern ((inv@572@01 r))
  :qid |quant-u-7486|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@575@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (Set_in (inv@572@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@572@01 r) x0@463@01)))
      (img@573@01 r)
      (= r (inv@572@01 r)))
    ($Perm.min
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (- $Perm.Write (pTaken@567@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@576@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (Set_in (inv@572@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@572@01 r) x0@463@01)))
      (img@573@01 r)
      (= r (inv@572@01 r)))
    ($Perm.min
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        $Perm.Write
        $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@575@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (- $Perm.Write (pTaken@567@01 r))
        $Perm.No)
      (pTaken@575@01 r))
    $Perm.No)
  
  :qid |quant-u-7488|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@575@01 r) $Perm.No)
  
  :qid |quant-u-7489|))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@572@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@572@01 r) x0@463@01)))
      (img@573@01 r)
      (= r (inv@572@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@575@01 r)) $Perm.No))
  
  :qid |quant-u-7490|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        $Perm.Write
        $Perm.No)
      (pTaken@576@01 r))
    $Perm.No)
  
  :qid |quant-u-7491|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@576@01 r) $Perm.No)
  
  :qid |quant-u-7492|))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@572@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@572@01 r) x0@463@01)))
      (img@573@01 r)
      (= r (inv@572@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@575@01 r)) (pTaken@576@01 r))
      $Perm.No))
  
  :qid |quant-u-7493|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const n$0@577@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$0 in g) && n$0 != x
; [eval] (n$0 in g)
(push) ; 5
; [then-branch: 124 | !(n$0@577@01 in g0@461@01 ∪ g1@462@01) | live]
; [else-branch: 124 | n$0@577@01 in g0@461@01 ∪ g1@462@01 | live]
(push) ; 6
; [then-branch: 124 | !(n$0@577@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n$0@577@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 124 | n$0@577@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n$0@577@01 (Set_union g0@461@01 g1@462@01)))
; [eval] n$0 != x
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Set_in n$0@577@01 (Set_union g0@461@01 g1@462@01))
  (not (Set_in n$0@577@01 (Set_union g0@461@01 g1@462@01)))))
(assert (and
  (Set_in n$0@577@01 (Set_union g0@461@01 g1@462@01))
  (not (= n$0@577@01 x0@463@01))))
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@578@01 ($Ref) $Ref)
(declare-fun img@579@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$0@577@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@577@01 (Set_union g0@461@01 g1@462@01))
      (not (= n$0@577@01 x0@463@01)))
    (or
      (Set_in n$0@577@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$0@577@01 (Set_union g0@461@01 g1@462@01)))))
  :pattern (($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$0@577@01) n$0@577@01))
  :qid |r-aux|)))
(declare-const sm@580@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@580@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@580@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef556|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- $Perm.Write (pTaken@570@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@580@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@580@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef557|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@580@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef558|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$01@577@01 $Ref) (n$02@577@01 $Ref)) (!
  (=>
    (and
      (and
        (and
          (Set_in n$01@577@01 (Set_union g0@461@01 g1@462@01))
          (not (= n$01@577@01 x0@463@01)))
        ($FVF.loc_r ($FVF.lookup_r (as sm@580@01  $FVF<r>) n$01@577@01) n$01@577@01))
      (and
        (and
          (Set_in n$02@577@01 (Set_union g0@461@01 g1@462@01))
          (not (= n$02@577@01 x0@463@01)))
        ($FVF.loc_r ($FVF.lookup_r (as sm@580@01  $FVF<r>) n$02@577@01) n$02@577@01))
      (= n$01@577@01 n$02@577@01))
    (= n$01@577@01 n$02@577@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@577@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@577@01 (Set_union g0@461@01 g1@462@01))
      (not (= n$0@577@01 x0@463@01)))
    (and (= (inv@578@01 n$0@577@01) n$0@577@01) (img@579@01 n$0@577@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$0@577@01) n$0@577@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@579@01 r)
      (and
        (Set_in (inv@578@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@578@01 r) x0@463@01))))
    (= (inv@578@01 r) r))
  :pattern ((inv@578@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@578@01 r) (Set_union g0@461@01 g1@462@01))
      (not (= (inv@578@01 r) x0@463@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@580@01  $FVF<r>) r) r))
  :pattern ((inv@578@01 r))
  :qid |quant-u-7495|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@581@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (Set_in (inv@578@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@578@01 r) x0@463@01)))
      (img@579@01 r)
      (= r (inv@578@01 r)))
    ($Perm.min
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        $Perm.Write
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@582@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (Set_in (inv@578@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@578@01 r) x0@463@01)))
      (img@579@01 r)
      (= r (inv@578@01 r)))
    ($Perm.min
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (- $Perm.Write (pTaken@570@01 r))
        $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@581@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        $Perm.Write
        $Perm.No)
      (pTaken@581@01 r))
    $Perm.No)
  
  :qid |quant-u-7497|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@581@01 r) $Perm.No)
  
  :qid |quant-u-7498|))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@578@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@578@01 r) x0@463@01)))
      (img@579@01 r)
      (= r (inv@578@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@581@01 r)) $Perm.No))
  
  :qid |quant-u-7499|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (- $Perm.Write (pTaken@570@01 r))
        $Perm.No)
      (pTaken@582@01 r))
    $Perm.No)
  
  :qid |quant-u-7500|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@582@01 r) $Perm.No)
  
  :qid |quant-u-7501|))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@578@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@578@01 r) x0@463@01)))
      (img@579@01 r)
      (= r (inv@578@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@581@01 r)) (pTaken@582@01 r))
      $Perm.No))
  
  :qid |quant-u-7502|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$1: Ref :: { (n$1.l in g) } { (n$1 in g), n$1.l } (n$1 in g) && n$1.l != null ==> (n$1.l in g))
(declare-const n$1@583@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$1 in g) && n$1.l != null ==> (n$1.l in g)
; [eval] (n$1 in g) && n$1.l != null
; [eval] (n$1 in g)
(push) ; 5
; [then-branch: 125 | !(n$1@583@01 in g0@461@01 ∪ g1@462@01) | live]
; [else-branch: 125 | n$1@583@01 in g0@461@01 ∪ g1@462@01 | live]
(push) ; 6
; [then-branch: 125 | !(n$1@583@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 125 | n$1@583@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01)))
; [eval] n$1.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (=
        ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef548|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (=
        ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
    :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
    :qid |qp.fvfValDef549|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef550|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@470@01 n$1@583@01) (Set_in (inv@469@01 n$1@583@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@481@01 n$1@583@01) (Set_in (inv@480@01 n$1@583@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef548|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef549|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef550|)))
(assert (=>
  (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
  (and
    (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01))))
(assert (or
  (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
  (not (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01)))))
(push) ; 5
; [then-branch: 126 | n$1@583@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@565@01, n$1@583@01) != Null | live]
; [else-branch: 126 | !(n$1@583@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@565@01, n$1@583@01) != Null) | live]
(push) ; 6
; [then-branch: 126 | n$1@583@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@565@01, n$1@583@01) != Null]
(assert (and
  (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
  (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null))))
; [eval] (n$1.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (=
        ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef548|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (=
        ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
    :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
    :qid |qp.fvfValDef549|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef550|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@470@01 n$1@583@01) (Set_in (inv@469@01 n$1@583@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@481@01 n$1@583@01) (Set_in (inv@480@01 n$1@583@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 126 | !(n$1@583@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@565@01, n$1@583@01) != Null)]
(assert (not
  (and
    (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef548|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef549|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef550|)))
(assert (=>
  (and
    (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null)))
  (and
    (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null))))
  (and
    (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef548|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef549|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef550|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$1@583@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01)))
    (or
      (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null)))
      (and
        (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01)))
    (or
      (not
        (and
          (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null))))
      (and
        (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) (Set_union g0@461@01 g1@462@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(assert (forall ((n$1@583@01 $Ref)) (!
  (and
    (=>
      (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01)))
    (or
      (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null)))
      (and
        (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01)))
    (or
      (not
        (and
          (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null))))
      (and
        (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null)))))
  :pattern ((Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(push) ; 4
(assert (not (forall ((n$1@583@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(assert (forall ((n$1@583@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in n$1@583@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n$1@583@01) n$1@583@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45|)))
; [eval] (forall n$2: Ref :: { (n$2.r in g) } { (n$2 in g), n$2.r } (n$2 in g) && n$2.r != null ==> (n$2.r in g))
(declare-const n$2@584@01 $Ref)
(push) ; 4
; [eval] (n$2 in g) && n$2.r != null ==> (n$2.r in g)
; [eval] (n$2 in g) && n$2.r != null
; [eval] (n$2 in g)
(push) ; 5
; [then-branch: 127 | !(n$2@584@01 in g0@461@01 ∪ g1@462@01) | live]
; [else-branch: 127 | n$2@584@01 in g0@461@01 ∪ g1@462@01 | live]
(push) ; 6
; [then-branch: 127 | !(n$2@584@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 127 | n$2@584@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01)))
; [eval] n$2.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (=
        ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
    :qid |qp.fvfValDef475|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (=
        ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
    :qid |qp.fvfValDef476|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef477|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@475@01 n$2@584@01) (Set_in (inv@474@01 n$2@584@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@485@01 n$2@584@01) (Set_in (inv@484@01 n$2@584@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef475|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef476|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef477|)))
(assert (=>
  (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
  (and
    (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01))))
(assert (or
  (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
  (not (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01)))))
(push) ; 5
; [then-branch: 128 | n$2@584@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@486@01, n$2@584@01) != Null | live]
; [else-branch: 128 | !(n$2@584@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@486@01, n$2@584@01) != Null) | live]
(push) ; 6
; [then-branch: 128 | n$2@584@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@486@01, n$2@584@01) != Null]
(assert (and
  (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
  (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null))))
; [eval] (n$2.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (=
        ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
    :qid |qp.fvfValDef475|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (=
        ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
    :qid |qp.fvfValDef476|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef477|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@475@01 n$2@584@01) (Set_in (inv@474@01 n$2@584@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@485@01 n$2@584@01) (Set_in (inv@484@01 n$2@584@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 128 | !(n$2@584@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@486@01, n$2@584@01) != Null)]
(assert (not
  (and
    (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef475|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef476|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef477|)))
(assert (=>
  (and
    (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null)))
  (and
    (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null))))
  (and
    (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef475|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@486@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef476|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@486@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef477|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@584@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01)))
    (or
      (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null)))
      (and
        (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01)))
    (or
      (not
        (and
          (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null))))
      (and
        (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) (Set_union g0@461@01 g1@462@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(assert (forall ((n$2@584@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01)))
    (or
      (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null)))
      (and
        (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01)))
    (or
      (not
        (and
          (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null))))
      (and
        (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null)))))
  :pattern ((Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45-aux|)))
(push) ; 4
(assert (not (forall ((n$2@584@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$2@584@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in n$2@584@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_r ($FVF.lookup_r (as sm@486@01  $FVF<r>) n$2@584@01) n$2@584@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@244@14@244@45|)))
; [eval] x.l == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (=
        ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef548|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (=
        ($FVF.lookup_l (as sm@565@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
    :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
    :qid |qp.fvfValDef549|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
    :pattern (($FVF.lookup_l (as sm@565@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef550|))))
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@470@01 x0@463@01) (Set_in (inv@469@01 x0@463@01) g0@461@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@481@01 x0@463@01) (Set_in (inv@480@01 x0@463@01) g1@462@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $t@585@01 $Snap)
(assert (= $t@585@01 ($Snap.combine ($Snap.first $t@585@01) ($Snap.second $t@585@01))))
(assert (= ($Snap.first $t@585@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@585@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@585@01))
    ($Snap.second ($Snap.second $t@585@01)))))
(assert (= ($Snap.first ($Snap.second $t@585@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@585@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@585@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))
; [eval] (__left__() == __left__() ? write : 1 / 2)
; [eval] __left__() == __left__()
; [eval] __left__()
; [eval] __left__()
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 129 | True | live]
; [else-branch: 129 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 129 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(declare-const sm@586@01 $FVF<l>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_l (as sm@586@01  $FVF<l>) x0@463@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@585@01))))))
(assert (not (= x0@463@01 $Ref.null)))
(declare-const sm@587@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@587@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@587@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef559|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@587@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@587@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef560|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@587@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@587@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef561|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r))
  :pattern (($FVF.lookup_l (as sm@587@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef562|)))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@587@01  $FVF<l>) x0@463@01) x0@463@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@585@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@585@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))
; [eval] (__left__() == __right__() ? write : 1 / 2)
; [eval] __left__() == __right__()
; [eval] __left__()
; [eval] __right__()
(push) ; 4
; [then-branch: 130 | __left__[__FieldEnum__] == __right__[__FieldEnum__] | dead]
; [else-branch: 130 | __left__[__FieldEnum__] != __right__[__FieldEnum__] | live]
(push) ; 5
; [else-branch: 130 | __left__[__FieldEnum__] != __right__[__FieldEnum__]]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(declare-const sm@588@01 $FVF<r>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_r (as sm@588@01  $FVF<r>) x0@463@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))
(declare-const sm@589@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@589@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@589@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef563|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@589@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@589@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef564|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@589@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@589@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef565|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r))
  :pattern (($FVF.lookup_r (as sm@589@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef566|)))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@589@01  $FVF<r>) x0@463@01) x0@463@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))))
(declare-const n$3@590@01 $Ref)
(push) ; 4
; [eval] (n$3 in g) && n$3 != x
; [eval] (n$3 in g)
(push) ; 5
; [then-branch: 131 | !(n$3@590@01 in g0@461@01 ∪ g1@462@01) | live]
; [else-branch: 131 | n$3@590@01 in g0@461@01 ∪ g1@462@01 | live]
(push) ; 6
; [then-branch: 131 | !(n$3@590@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n$3@590@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 131 | n$3@590@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n$3@590@01 (Set_union g0@461@01 g1@462@01)))
; [eval] n$3 != x
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Set_in n$3@590@01 (Set_union g0@461@01 g1@462@01))
  (not (Set_in n$3@590@01 (Set_union g0@461@01 g1@462@01)))))
(assert (and
  (Set_in n$3@590@01 (Set_union g0@461@01 g1@462@01))
  (not (= n$3@590@01 x0@463@01))))
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@591@01 ($Ref) $Ref)
(declare-fun img@592@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$3@590@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@590@01 (Set_union g0@461@01 g1@462@01))
      (not (= n$3@590@01 x0@463@01)))
    (or
      (Set_in n$3@590@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$3@590@01 (Set_union g0@461@01 g1@462@01)))))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) n$3@590@01) n$3@590@01))
  :qid |l-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$31@590@01 $Ref) (n$32@590@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$31@590@01 (Set_union g0@461@01 g1@462@01))
        (not (= n$31@590@01 x0@463@01)))
      (and
        (Set_in n$32@590@01 (Set_union g0@461@01 g1@462@01))
        (not (= n$32@590@01 x0@463@01)))
      (= n$31@590@01 n$32@590@01))
    (= n$31@590@01 n$32@590@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@590@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@590@01 (Set_union g0@461@01 g1@462@01))
      (not (= n$3@590@01 x0@463@01)))
    (and (= (inv@591@01 n$3@590@01) n$3@590@01) (img@592@01 n$3@590@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) n$3@590@01) n$3@590@01))
  :qid |quant-u-7504|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (= (inv@591@01 r) r))
  :pattern ((inv@591@01 r))
  :qid |l-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@590@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@590@01 (Set_union g0@461@01 g1@462@01))
      (not (= n$3@590@01 x0@463@01)))
    (not (= n$3@590@01 $Ref.null)))
  :pattern (($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) n$3@590@01) n$3@590@01))
  :qid |l-permImpliesNonNull|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$3@590@01 n$3@479@01)
    (=
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01))))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))))
  
  :qid |quant-u-7505|))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$3@590@01 n@467@01)
    (=
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01))))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))))
  
  :qid |quant-u-7506|))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(declare-const sm@593@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef567|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef568|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef569|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef570|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef571|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
      (not (= (inv@591@01 r) x0@463@01)))
    ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) r) r))
  :pattern ((inv@591@01 r))
  :qid |quant-u-7507|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))))
(declare-const n$4@594@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$4 in g) && n$4 != x
; [eval] (n$4 in g)
(push) ; 5
; [then-branch: 132 | !(n$4@594@01 in g0@461@01 ∪ g1@462@01) | live]
; [else-branch: 132 | n$4@594@01 in g0@461@01 ∪ g1@462@01 | live]
(push) ; 6
; [then-branch: 132 | !(n$4@594@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n$4@594@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 132 | n$4@594@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n$4@594@01 (Set_union g0@461@01 g1@462@01)))
; [eval] n$4 != x
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Set_in n$4@594@01 (Set_union g0@461@01 g1@462@01))
  (not (Set_in n$4@594@01 (Set_union g0@461@01 g1@462@01)))))
(assert (and
  (Set_in n$4@594@01 (Set_union g0@461@01 g1@462@01))
  (not (= n$4@594@01 x0@463@01))))
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@595@01 ($Ref) $Ref)
(declare-fun img@596@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$4@594@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@594@01 (Set_union g0@461@01 g1@462@01))
      (not (= n$4@594@01 x0@463@01)))
    (or
      (Set_in n$4@594@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$4@594@01 (Set_union g0@461@01 g1@462@01)))))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) n$4@594@01) n$4@594@01))
  :qid |r-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$41@594@01 $Ref) (n$42@594@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$41@594@01 (Set_union g0@461@01 g1@462@01))
        (not (= n$41@594@01 x0@463@01)))
      (and
        (Set_in n$42@594@01 (Set_union g0@461@01 g1@462@01))
        (not (= n$42@594@01 x0@463@01)))
      (= n$41@594@01 n$42@594@01))
    (= n$41@594@01 n$42@594@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@594@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@594@01 (Set_union g0@461@01 g1@462@01))
      (not (= n$4@594@01 x0@463@01)))
    (and (= (inv@595@01 n$4@594@01) n$4@594@01) (img@596@01 n$4@594@01)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) n$4@594@01) n$4@594@01))
  :qid |quant-u-7509|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (= (inv@595@01 r) r))
  :pattern ((inv@595@01 r))
  :qid |r-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@594@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@594@01 (Set_union g0@461@01 g1@462@01))
      (not (= n$4@594@01 x0@463@01)))
    (not (= n$4@594@01 $Ref.null)))
  :pattern (($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) n$4@594@01) n$4@594@01))
  :qid |r-permImpliesNonNull|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$4@594@01 n$4@483@01)
    (=
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01))))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))))
  
  :qid |quant-u-7510|))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$4@594@01 n$0@472@01)
    (=
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01))))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))))
  
  :qid |quant-u-7511|))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(declare-const sm@597@01 $FVF<r>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef572|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef573|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef574|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef575|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef576|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
      (not (= (inv@595@01 r) x0@463@01)))
    ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) r) r))
  :pattern ((inv@595@01 r))
  :qid |quant-u-7512|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))
  $Snap.unit))
; [eval] (forall n$5: Ref :: { (n$5.l in g) } { (n$5 in g), n$5.l } (n$5 in g) && n$5.l != null ==> (n$5.l in g))
(declare-const n$5@598@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$5 in g) && n$5.l != null ==> (n$5.l in g)
; [eval] (n$5 in g) && n$5.l != null
; [eval] (n$5 in g)
(push) ; 5
; [then-branch: 133 | !(n$5@598@01 in g0@461@01 ∪ g1@462@01) | live]
; [else-branch: 133 | n$5@598@01 in g0@461@01 ∪ g1@462@01 | live]
(push) ; 6
; [then-branch: 133 | !(n$5@598@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 133 | n$5@598@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01)))
; [eval] n$5.l != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false)
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef567|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false)
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
    :qid |qp.fvfValDef568|))
  (forall ((r $Ref)) (!
    (=>
      (= r x0@463@01)
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
    :qid |qp.fvfValDef569|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01))))
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
    :qid |qp.fvfValDef570|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
      ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef571|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) n$5@598@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (img@470@01 n$5@598@01)
            (Set_in (inv@469@01 n$5@598@01) g0@461@01))
          (-
            (- $Perm.Write (pTaken@567@01 n$5@598@01))
            (pTaken@575@01 n$5@598@01))
          $Perm.No)
        (ite
          (and
            (img@481@01 n$5@598@01)
            (Set_in (inv@480@01 n$5@598@01) g1@462@01))
          (- $Perm.Write (pTaken@576@01 n$5@598@01))
          $Perm.No))
      (ite (= n$5@598@01 x0@463@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@592@01 n$5@598@01)
        (and
          (Set_in (inv@591@01 n$5@598@01) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 n$5@598@01) x0@463@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef567|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef568|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef569|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef570|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef571|)))
(assert (=>
  (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
  (and
    (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) n$5@598@01))))
(assert (or
  (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
  (not (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01)))))
(push) ; 5
; [then-branch: 134 | n$5@598@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@593@01, n$5@598@01) != Null | live]
; [else-branch: 134 | !(n$5@598@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@593@01, n$5@598@01) != Null) | live]
(push) ; 6
; [then-branch: 134 | n$5@598@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@593@01, n$5@598@01) != Null]
(assert (and
  (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
  (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null))))
; [eval] (n$5.l in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false)
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef567|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false)
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
    :qid |qp.fvfValDef568|))
  (forall ((r $Ref)) (!
    (=>
      (= r x0@463@01)
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
    :qid |qp.fvfValDef569|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01))))
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
    :qid |qp.fvfValDef570|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
      ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef571|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) n$5@598@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (img@470@01 n$5@598@01)
            (Set_in (inv@469@01 n$5@598@01) g0@461@01))
          (-
            (- $Perm.Write (pTaken@567@01 n$5@598@01))
            (pTaken@575@01 n$5@598@01))
          $Perm.No)
        (ite
          (and
            (img@481@01 n$5@598@01)
            (Set_in (inv@480@01 n$5@598@01) g1@462@01))
          (- $Perm.Write (pTaken@576@01 n$5@598@01))
          $Perm.No))
      (ite (= n$5@598@01 x0@463@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@592@01 n$5@598@01)
        (and
          (Set_in (inv@591@01 n$5@598@01) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 n$5@598@01) x0@463@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.04s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 134 | !(n$5@598@01 in g0@461@01 ∪ g1@462@01 && Lookup(l, sm@593@01, n$5@598@01) != Null)]
(assert (not
  (and
    (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef567|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef568|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef569|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef570|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef571|)))
(assert (=>
  (and
    (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null)))
  (and
    (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null))
    ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) n$5@598@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null))))
  (and
    (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef567|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef568|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef569|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef570|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef571|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$5@598@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) n$5@598@01)))
    (or
      (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null)))
      (and
        (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) n$5@598@01)))
    (or
      (not
        (and
          (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null))))
      (and
        (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) (Set_union g0@461@01 g1@462@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$5@598@01 $Ref)) (!
  (and
    (=>
      (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) n$5@598@01)))
    (or
      (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null)))
      (and
        (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null))
        ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) n$5@598@01)))
    (or
      (not
        (and
          (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null))))
      (and
        (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null)))))
  :pattern ((Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) n$5@598@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$5@598@01 $Ref)) (!
  (=>
    (and
      (Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) $Ref.null)))
    (Set_in ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in n$5@598@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n$5@598@01) n$5@598@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))))
  $Snap.unit))
; [eval] (forall n$6: Ref :: { (n$6.r in g) } { (n$6 in g), n$6.r } (n$6 in g) && n$6.r != null ==> (n$6.r in g))
(declare-const n$6@599@01 $Ref)
(push) ; 4
; [eval] (n$6 in g) && n$6.r != null ==> (n$6.r in g)
; [eval] (n$6 in g) && n$6.r != null
; [eval] (n$6 in g)
(push) ; 5
; [then-branch: 135 | !(n$6@599@01 in g0@461@01 ∪ g1@462@01) | live]
; [else-branch: 135 | n$6@599@01 in g0@461@01 ∪ g1@462@01 | live]
(push) ; 6
; [then-branch: 135 | !(n$6@599@01 in g0@461@01 ∪ g1@462@01)]
(assert (not (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 135 | n$6@599@01 in g0@461@01 ∪ g1@462@01]
(assert (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01)))
; [eval] n$6.r != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false)
      (=
        ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
    :qid |qp.fvfValDef572|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false)
      (=
        ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
    :qid |qp.fvfValDef573|))
  (forall ((r $Ref)) (!
    (=>
      (= r x0@463@01)
      (=
        ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
    :qid |qp.fvfValDef574|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01))))
      (=
        ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
    :qid |qp.fvfValDef575|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
      ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef576|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) n$6@599@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (img@475@01 n$6@599@01)
            (Set_in (inv@474@01 n$6@599@01) g0@461@01))
          (-
            (- $Perm.Write (pTaken@570@01 n$6@599@01))
            (pTaken@582@01 n$6@599@01))
          $Perm.No)
        (ite
          (and
            (img@485@01 n$6@599@01)
            (Set_in (inv@484@01 n$6@599@01) g1@462@01))
          (- $Perm.Write (pTaken@581@01 n$6@599@01))
          $Perm.No))
      (ite (= n$6@599@01 x0@463@01) (/ (to_real 1) (to_real 2)) $Perm.No))
    (ite
      (and
        (img@596@01 n$6@599@01)
        (and
          (Set_in (inv@595@01 n$6@599@01) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 n$6@599@01) x0@463@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef572|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef573|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef574|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef575|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef576|)))
(assert (=>
  (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
  (and
    (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) n$6@599@01))))
(assert (or
  (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
  (not (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01)))))
(push) ; 5
; [then-branch: 136 | n$6@599@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@597@01, n$6@599@01) != Null | live]
; [else-branch: 136 | !(n$6@599@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@597@01, n$6@599@01) != Null) | live]
(push) ; 6
; [then-branch: 136 | n$6@599@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@597@01, n$6@599@01) != Null]
(assert (and
  (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
  (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null))))
; [eval] (n$6.r in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false)
      (=
        ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
    :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
    :qid |qp.fvfValDef572|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false)
      (=
        ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
    :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
    :qid |qp.fvfValDef573|))
  (forall ((r $Ref)) (!
    (=>
      (= r x0@463@01)
      (=
        ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
        ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
    :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
    :qid |qp.fvfValDef574|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01))))
      (=
        ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
        ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
    :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
    :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
    :qid |qp.fvfValDef575|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
      ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
      ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r))
    :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
    :qid |qp.fvfResTrgDef576|))))
(assert ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) n$6@599@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (img@475@01 n$6@599@01)
            (Set_in (inv@474@01 n$6@599@01) g0@461@01))
          (-
            (- $Perm.Write (pTaken@570@01 n$6@599@01))
            (pTaken@582@01 n$6@599@01))
          $Perm.No)
        (ite
          (and
            (img@485@01 n$6@599@01)
            (Set_in (inv@484@01 n$6@599@01) g1@462@01))
          (- $Perm.Write (pTaken@581@01 n$6@599@01))
          $Perm.No))
      (ite (= n$6@599@01 x0@463@01) (/ (to_real 1) (to_real 2)) $Perm.No))
    (ite
      (and
        (img@596@01 n$6@599@01)
        (and
          (Set_in (inv@595@01 n$6@599@01) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 n$6@599@01) x0@463@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 136 | !(n$6@599@01 in g0@461@01 ∪ g1@462@01 && Lookup(r, sm@597@01, n$6@599@01) != Null)]
(assert (not
  (and
    (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef572|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef573|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef574|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef575|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef576|)))
(assert (=>
  (and
    (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null)))
  (and
    (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null))
    ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) n$6@599@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null))))
  (and
    (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
    (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef572|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef573|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef574|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@597@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef575|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r))
  :pattern (($FVF.lookup_r (as sm@597@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef576|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@599@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) n$6@599@01)))
    (or
      (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null)))
      (and
        (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) n$6@599@01)))
    (or
      (not
        (and
          (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null))))
      (and
        (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) (Set_union g0@461@01 g1@462@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$6@599@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
      (and
        (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) n$6@599@01)))
    (or
      (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
      (not (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))))
    (=>
      (and
        (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null)))
      (and
        (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null))
        ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) n$6@599@01)))
    (or
      (not
        (and
          (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
          (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null))))
      (and
        (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
        (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null)))))
  :pattern ((Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) n$6@599@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44-aux|)))
(assert (forall ((n$6@599@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01))
      (not (= ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) $Ref.null)))
    (Set_in ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) (Set_union g0@461@01 g1@462@01)))
  :pattern ((Set_in n$6@599@01 (Set_union g0@461@01 g1@462@01)) ($FVF.loc_r ($FVF.lookup_r (as sm@597@01  $FVF<r>) n$6@599@01) n$6@599@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@246@13@246@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))))
  $Snap.unit))
; [eval] x.l == y
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false)
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
    :qid |qp.fvfValDef567|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false)
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
    :qid |qp.fvfValDef568|))
  (forall ((r $Ref)) (!
    (=>
      (= r x0@463@01)
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
    :qid |qp.fvfValDef569|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01))))
      (=
        ($FVF.lookup_l (as sm@593@01  $FVF<l>) r)
        ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
    :qid |qp.fvfValDef570|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
      ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
      ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
    :pattern (($FVF.lookup_l (as sm@593@01  $FVF<l>) r))
    :qid |qp.fvfResTrgDef571|))))
(assert ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) x0@463@01) x0@463@01))
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and (img@470@01 x0@463@01) (Set_in (inv@469@01 x0@463@01) g0@461@01))
          (- (- $Perm.Write (pTaken@567@01 x0@463@01)) (pTaken@575@01 x0@463@01))
          $Perm.No)
        (ite
          (and (img@481@01 x0@463@01) (Set_in (inv@480@01 x0@463@01) g1@462@01))
          (- $Perm.Write (pTaken@576@01 x0@463@01))
          $Perm.No))
      $Perm.Write)
    (ite
      (and
        (img@592@01 x0@463@01)
        (and
          (Set_in (inv@591@01 x0@463@01) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 x0@463@01) x0@463@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_l (as sm@593@01  $FVF<l>) x0@463@01) x1@464@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))))))
  $Snap.unit))
; [eval] y == null ==> $$(g) == old($$(g))
; [eval] y == null
(push) ; 4
; [then-branch: 137 | x1@464@01 == Null | dead]
; [else-branch: 137 | x1@464@01 != Null | live]
(push) ; 5
; [else-branch: 137 | x1@464@01 != Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
; [eval] y != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= x1@464@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 138 | x1@464@01 != Null | live]
; [else-branch: 138 | x1@464@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 138 | x1@464@01 != Null]
; [eval] (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
(declare-const v1@600@01 $Ref)
(declare-const v2@601@01 $Ref)
(push) ; 6
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 7
(declare-const n@602@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@602@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 8
(declare-fun inv@603@01 ($Ref) $Ref)
(declare-fun img@604@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@602@01 $Ref) (n2@602@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@602@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n1@602@01) n1@602@01))
      (and
        (Set_in n2@602@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) n2@602@01) n2@602@01))
      (= n1@602@01 n2@602@01))
    (= n1@602@01 n2@602@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@602@01 $Ref)) (!
  (=>
    (Set_in n@602@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@603@01 n@602@01) n@602@01) (img@604@01 n@602@01)))
  :pattern ((Set_in n@602@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@603@01 n@602@01))
  :pattern ((img@604@01 n@602@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@604@01 r) (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@603@01 r) r))
  :pattern ((inv@603@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) r) r))
  :pattern ((inv@603@01 r))
  :qid |quant-u-7514|)))
(push) ; 8
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
      (img@604@01 r)
      (= r (inv@603@01 r)))
    (>
      (+
        (+
          (+
            (ite
              (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
              (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r))
              $Perm.No)
            (ite
              (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
              (- $Perm.Write (pTaken@576@01 r))
              $Perm.No))
          (ite
            (and
              (img@592@01 r)
              (and
                (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
                (not (= (inv@591@01 r) x0@463@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x0@463@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7515|))))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(declare-const sm@605@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>)))
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r)))
    (=>
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>))))
  :qid |qp.fvfDomDef582|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef577|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef578|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef579|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef580|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef581|)))
(declare-const n@606@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@606@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 8
(declare-fun inv@607@01 ($Ref) $Ref)
(declare-fun img@608@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@609@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef583|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef584|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef585|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef586|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef587|)))
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@606@01 $Ref) (n2@606@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@606@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@609@01  $FVF<r>) n1@606@01) n1@606@01))
      (and
        (Set_in n2@606@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@609@01  $FVF<r>) n2@606@01) n2@606@01))
      (= n1@606@01 n2@606@01))
    (= n1@606@01 n2@606@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@606@01 $Ref)) (!
  (=>
    (Set_in n@606@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@607@01 n@606@01) n@606@01) (img@608@01 n@606@01)))
  :pattern ((Set_in n@606@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@607@01 n@606@01))
  :pattern ((img@608@01 n@606@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@608@01 r) (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@607@01 r) r))
  :pattern ((inv@607@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@609@01  $FVF<r>) r) r))
  :pattern ((inv@607@01 r))
  :qid |quant-u-7517|)))
(push) ; 8
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
      (img@608@01 r)
      (= r (inv@607@01 r)))
    (>
      (+
        (+
          (+
            (ite
              (and
                (img@596@01 r)
                (and
                  (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
                  (not (= (inv@595@01 r) x0@463@01))))
              (/ (to_real 1) (to_real 2))
              $Perm.No)
            (ite
              (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
              (- $Perm.Write (pTaken@581@01 r))
              $Perm.No))
          (ite
            (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
            (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r))
            $Perm.No))
        (ite (= r x0@463@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7518|))))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(declare-const sm@610@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>)))
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r)))
    (=>
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>))))
  :qid |qp.fvfDomDef593|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef588|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef589|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef590|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef591|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef592|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@605@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@610@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))
(pop) ; 7
; Joined path conditions
(assert (forall ((n@602@01 $Ref)) (!
  (=>
    (Set_in n@602@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@603@01 n@602@01) n@602@01) (img@604@01 n@602@01)))
  :pattern ((Set_in n@602@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@603@01 n@602@01))
  :pattern ((img@604@01 n@602@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@604@01 r) (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@603@01 r) r))
  :pattern ((inv@603@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>)))
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r)))
    (=>
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>))))
  :qid |qp.fvfDomDef582|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef577|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef578|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef579|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef580|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef581|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef583|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef584|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef585|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef586|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef587|)))
(assert (forall ((n@606@01 $Ref)) (!
  (=>
    (Set_in n@606@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@607@01 n@606@01) n@606@01) (img@608@01 n@606@01)))
  :pattern ((Set_in n@606@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@607@01 n@606@01))
  :pattern ((img@608@01 n@606@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@608@01 r) (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@607@01 r) r))
  :pattern ((inv@607@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>)))
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r)))
    (=>
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>))))
  :qid |qp.fvfDomDef593|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef588|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef589|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef590|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef591|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef592|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) r) r))
    :pattern ((inv@603@01 r))
    :qid |quant-u-7514|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_r ($FVF.lookup_r (as sm@609@01  $FVF<r>) r) r))
    :pattern ((inv@607@01 r))
    :qid |quant-u-7517|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@605@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@610@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
; [eval] edge(old($$(g)), v1, v2) || v1 == x && v2 == y
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 7
(declare-const n@611@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@611@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 8
(declare-fun inv@612@01 ($Ref) $Ref)
(declare-fun img@613@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@611@01 $Ref) (n2@611@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@611@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n1@611@01) n1@611@01))
      (and
        (Set_in n2@611@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) n2@611@01) n2@611@01))
      (= n1@611@01 n2@611@01))
    (= n1@611@01 n2@611@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@611@01 $Ref)) (!
  (=>
    (Set_in n@611@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@612@01 n@611@01) n@611@01) (img@613@01 n@611@01)))
  :pattern ((Set_in n@611@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@612@01 n@611@01))
  :pattern ((img@613@01 n@611@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@613@01 r) (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@612@01 r) r))
  :pattern ((inv@612@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) r) r))
  :pattern ((inv@612@01 r))
  :qid |quant-u-7520|)))
(push) ; 8
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
      (img@613@01 r)
      (= r (inv@612@01 r)))
    (>
      (+
        (ite
          (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7521|))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(declare-const sm@614@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>)))
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r)))
    (=>
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>))))
  :qid |qp.fvfDomDef597|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@614@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef594|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@614@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef595|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef596|)))
(declare-const n@615@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@615@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 8
(declare-fun inv@616@01 ($Ref) $Ref)
(declare-fun img@617@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@618@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@618@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef598|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@618@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef599|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef600|)))
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@615@01 $Ref) (n2@615@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@615@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@618@01  $FVF<r>) n1@615@01) n1@615@01))
      (and
        (Set_in n2@615@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@618@01  $FVF<r>) n2@615@01) n2@615@01))
      (= n1@615@01 n2@615@01))
    (= n1@615@01 n2@615@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@615@01 $Ref)) (!
  (=>
    (Set_in n@615@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@616@01 n@615@01) n@615@01) (img@617@01 n@615@01)))
  :pattern ((Set_in n@615@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@616@01 n@615@01))
  :pattern ((img@617@01 n@615@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@617@01 r) (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@616@01 r) r))
  :pattern ((inv@616@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@618@01  $FVF<r>) r) r))
  :pattern ((inv@616@01 r))
  :qid |quant-u-7523|)))
(push) ; 8
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
      (img@617@01 r)
      (= r (inv@616@01 r)))
    (>
      (+
        (ite
          (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7524|))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(declare-const sm@619@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>)))
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r)))
    (=>
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>))))
  :qid |qp.fvfDomDef604|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@619@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef601|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@619@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef602|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef603|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))
(pop) ; 7
; Joined path conditions
(assert (forall ((n@611@01 $Ref)) (!
  (=>
    (Set_in n@611@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@612@01 n@611@01) n@611@01) (img@613@01 n@611@01)))
  :pattern ((Set_in n@611@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@612@01 n@611@01))
  :pattern ((img@613@01 n@611@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@613@01 r) (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@612@01 r) r))
  :pattern ((inv@612@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>)))
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r)))
    (=>
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>))))
  :qid |qp.fvfDomDef597|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@614@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef594|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@614@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef595|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef596|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@618@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef598|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@618@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef599|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef600|)))
(assert (forall ((n@615@01 $Ref)) (!
  (=>
    (Set_in n@615@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@616@01 n@615@01) n@615@01) (img@617@01 n@615@01)))
  :pattern ((Set_in n@615@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@616@01 n@615@01))
  :pattern ((img@617@01 n@615@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@617@01 r) (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@616@01 r) r))
  :pattern ((inv@616@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>)))
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r)))
    (=>
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>))))
  :qid |qp.fvfDomDef604|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@619@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef601|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@619@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef602|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef603|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) r) r))
    :pattern ((inv@612@01 r))
    :qid |quant-u-7520|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_r ($FVF.lookup_r (as sm@618@01  $FVF<r>) r) r))
    :pattern ((inv@616@01 r))
    :qid |quant-u-7523|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
(push) ; 7
; [then-branch: 139 | edge[Bool]($$((sm@614@01, sm@619@01), g0@461@01 ∪ g1@462@01), v1@600@01, v2@601@01) | live]
; [else-branch: 139 | !(edge[Bool]($$((sm@614@01, sm@619@01), g0@461@01 ∪ g1@462@01), v1@600@01, v2@601@01)) | live]
(push) ; 8
; [then-branch: 139 | edge[Bool]($$((sm@614@01, sm@619@01), g0@461@01 ∪ g1@462@01), v1@600@01, v2@601@01)]
(assert (edge<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
(pop) ; 8
(push) ; 8
; [else-branch: 139 | !(edge[Bool]($$((sm@614@01, sm@619@01), g0@461@01 ∪ g1@462@01), v1@600@01, v2@601@01))]
(assert (not
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01)))
; [eval] v1 == x && v2 == y
; [eval] v1 == x
(push) ; 9
; [then-branch: 140 | v1@600@01 != x0@463@01 | live]
; [else-branch: 140 | v1@600@01 == x0@463@01 | live]
(push) ; 10
; [then-branch: 140 | v1@600@01 != x0@463@01]
(assert (not (= v1@600@01 x0@463@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 140 | v1@600@01 == x0@463@01]
(assert (= v1@600@01 x0@463@01))
; [eval] v2 == y
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (= v1@600@01 x0@463@01) (not (= v1@600@01 x0@463@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
  (and
    (not
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
    (or (= v1@600@01 x0@463@01) (not (= v1@600@01 x0@463@01))))))
(assert (or
  (not
    (edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
  (edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01)))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@602@01 $Ref)) (!
  (=>
    (Set_in n@602@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@603@01 n@602@01) n@602@01) (img@604@01 n@602@01)))
  :pattern ((Set_in n@602@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@603@01 n@602@01))
  :pattern ((img@604@01 n@602@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@604@01 r) (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@603@01 r) r))
  :pattern ((inv@603@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>)))
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r)))
    (=>
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>))))
  :qid |qp.fvfDomDef582|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef577|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef578|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef579|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef580|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef581|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef583|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef584|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef585|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef586|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef587|)))
(assert (forall ((n@606@01 $Ref)) (!
  (=>
    (Set_in n@606@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@607@01 n@606@01) n@606@01) (img@608@01 n@606@01)))
  :pattern ((Set_in n@606@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@607@01 n@606@01))
  :pattern ((img@608@01 n@606@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@608@01 r) (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@607@01 r) r))
  :pattern ((inv@607@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>)))
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r)))
    (=>
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>))))
  :qid |qp.fvfDomDef593|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef588|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef589|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef590|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef591|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef592|)))
(assert (forall ((n@611@01 $Ref)) (!
  (=>
    (Set_in n@611@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@612@01 n@611@01) n@611@01) (img@613@01 n@611@01)))
  :pattern ((Set_in n@611@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@612@01 n@611@01))
  :pattern ((img@613@01 n@611@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@613@01 r) (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@612@01 r) r))
  :pattern ((inv@612@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>)))
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r)))
    (=>
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>))))
  :qid |qp.fvfDomDef597|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@614@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef594|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@614@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef595|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef596|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@618@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef598|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@618@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef599|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef600|)))
(assert (forall ((n@615@01 $Ref)) (!
  (=>
    (Set_in n@615@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@616@01 n@615@01) n@615@01) (img@617@01 n@615@01)))
  :pattern ((Set_in n@615@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@616@01 n@615@01))
  :pattern ((img@617@01 n@615@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@617@01 r) (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@616@01 r) r))
  :pattern ((inv@616@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>)))
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r)))
    (=>
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>))))
  :qid |qp.fvfDomDef604|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@619@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef601|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@619@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef602|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef603|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) r) r))
  :pattern ((inv@603@01 r))
  :qid |quant-u-7514|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@609@01  $FVF<r>) r) r))
  :pattern ((inv@607@01 r))
  :qid |quant-u-7517|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@605@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@610@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) r) r))
  :pattern ((inv@612@01 r))
  :qid |quant-u-7520|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@618@01  $FVF<r>) r) r))
  :pattern ((inv@616@01 r))
  :qid |quant-u-7523|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@600@01 $Ref) (v2@601@01 $Ref)) (!
  (and
    (=>
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
      (and
        (not
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
        (or (= v1@600@01 x0@463@01) (not (= v1@600@01 x0@463@01)))))
    (or
      (not
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01)))
  :pattern ((edge<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@249@27@251@78-aux|)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((n@602@01 $Ref)) (!
  (=>
    (Set_in n@602@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@603@01 n@602@01) n@602@01) (img@604@01 n@602@01)))
  :pattern ((Set_in n@602@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@603@01 n@602@01))
  :pattern ((img@604@01 n@602@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@604@01 r) (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@603@01 r) r))
  :pattern ((inv@603@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>)))
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r)))
    (=>
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@605@01  $FVF<l>))))
  :qid |qp.fvfDomDef582|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef577|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef578|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef579|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        (img@604@01 r))
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_l (as sm@605@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef580|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@605@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef581|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef583|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef584|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef585|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@609@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef586|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@609@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef587|)))
(assert (forall ((n@606@01 $Ref)) (!
  (=>
    (Set_in n@606@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@607@01 n@606@01) n@606@01) (img@608@01 n@606@01)))
  :pattern ((Set_in n@606@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@607@01 n@606@01))
  :pattern ((img@608@01 n@606@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@608@01 r) (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@607@01 r) r))
  :pattern ((inv@607@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>)))
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r)))
    (=>
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@610@01  $FVF<r>))))
  :qid |qp.fvfDomDef593|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef588|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef589|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef590|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        (img@608@01 r))
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@610@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef591|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@610@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef592|)))
(assert (forall ((n@611@01 $Ref)) (!
  (=>
    (Set_in n@611@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@612@01 n@611@01) n@611@01) (img@613@01 n@611@01)))
  :pattern ((Set_in n@611@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@612@01 n@611@01))
  :pattern ((img@613@01 n@611@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@613@01 r) (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@612@01 r) r))
  :pattern ((inv@612@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>)))
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r)))
    (=>
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@614@01  $FVF<l>))))
  :qid |qp.fvfDomDef597|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@614@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef594|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        (img@613@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@614@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef595|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@614@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef596|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@618@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef598|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@618@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef599|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@618@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef600|)))
(assert (forall ((n@615@01 $Ref)) (!
  (=>
    (Set_in n@615@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@616@01 n@615@01) n@615@01) (img@617@01 n@615@01)))
  :pattern ((Set_in n@615@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@616@01 n@615@01))
  :pattern ((img@617@01 n@615@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@617@01 r) (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@616@01 r) r))
  :pattern ((inv@616@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>)))
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r)))
    (=>
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@619@01  $FVF<r>))))
  :qid |qp.fvfDomDef604|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@619@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef601|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        (img@617@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@619@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef602|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@619@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef603|)))
(assert (=>
  (not (= x1@464@01 $Ref.null))
  (and
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@603@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@593@01  $FVF<l>) r) r))
      :pattern ((inv@603@01 r))
      :qid |quant-u-7514|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@607@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@609@01  $FVF<r>) r) r))
      :pattern ((inv@607@01 r))
      :qid |quant-u-7517|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@605@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@610@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@612@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@565@01  $FVF<l>) r) r))
      :pattern ((inv@612@01 r))
      :qid |quant-u-7520|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@616@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@618@01  $FVF<r>) r) r))
      :pattern ((inv@616@01 r))
      :qid |quant-u-7523|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
    (forall ((v1@600@01 $Ref) (v2@601@01 $Ref)) (!
      (and
        (=>
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
          (and
            (not
              (edge<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
            (or (= v1@600@01 x0@463@01) (not (= v1@600@01 x0@463@01)))))
        (or
          (not
            (edge<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
          (edge<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01)))
      :pattern ((edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@249@27@251@78-aux|)))))
(assert (=>
  (not (= x1@464@01 $Ref.null))
  (forall ((v1@600@01 $Ref) (v2@601@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@605@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@610@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01)
      (or
        (edge<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01)
        (and (= v1@600@01 x0@463@01) (= v2@601@01 x1@464@01))))
    :pattern ((edge<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@614@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@619@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@600@01 v2@601@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@249@27@251@78|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
; [eval] y != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= x1@464@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 141 | x1@464@01 != Null | live]
; [else-branch: 141 | x1@464@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 141 | x1@464@01 != Null]
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
(declare-const v1@620@01 $Ref)
(declare-const v2@621@01 $Ref)
(push) ; 6
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] v1 != v2
(push) ; 7
; [then-branch: 142 | v1@620@01 != v2@621@01 | live]
; [else-branch: 142 | v1@620@01 == v2@621@01 | live]
(push) ; 8
; [then-branch: 142 | v1@620@01 != v2@621@01]
(assert (not (= v1@620@01 v2@621@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 9
(declare-const n@622@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@622@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 10
(declare-fun inv@623@01 ($Ref) $Ref)
(declare-fun img@624@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@625@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef605|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef606|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef607|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef608|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef609|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@622@01 $Ref) (n2@622@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@622@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@625@01  $FVF<l>) n1@622@01) n1@622@01))
      (and
        (Set_in n2@622@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@625@01  $FVF<l>) n2@622@01) n2@622@01))
      (= n1@622@01 n2@622@01))
    (= n1@622@01 n2@622@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@622@01 $Ref)) (!
  (=>
    (Set_in n@622@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@623@01 n@622@01) n@622@01) (img@624@01 n@622@01)))
  :pattern ((Set_in n@622@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@623@01 n@622@01))
  :pattern ((img@624@01 n@622@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@624@01 r) (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@623@01 r) r))
  :pattern ((inv@623@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@625@01  $FVF<l>) r) r))
  :pattern ((inv@623@01 r))
  :qid |quant-u-7526|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
      (img@624@01 r)
      (= r (inv@623@01 r)))
    (>
      (+
        (+
          (+
            (ite
              (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
              (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r))
              $Perm.No)
            (ite
              (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
              (- $Perm.Write (pTaken@576@01 r))
              $Perm.No))
          (ite
            (and
              (img@592@01 r)
              (and
                (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
                (not (= (inv@591@01 r) x0@463@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x0@463@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7527|))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(declare-const sm@626@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>)))
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r)))
    (=>
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>))))
  :qid |qp.fvfDomDef615|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef610|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef611|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef612|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef613|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef614|)))
(declare-const n@627@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@627@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 10
(declare-fun inv@628@01 ($Ref) $Ref)
(declare-fun img@629@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@630@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef616|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef617|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef618|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef619|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef620|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@627@01 $Ref) (n2@627@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@627@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@630@01  $FVF<r>) n1@627@01) n1@627@01))
      (and
        (Set_in n2@627@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@630@01  $FVF<r>) n2@627@01) n2@627@01))
      (= n1@627@01 n2@627@01))
    (= n1@627@01 n2@627@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@627@01 $Ref)) (!
  (=>
    (Set_in n@627@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@628@01 n@627@01) n@627@01) (img@629@01 n@627@01)))
  :pattern ((Set_in n@627@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@628@01 n@627@01))
  :pattern ((img@629@01 n@627@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@629@01 r) (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@628@01 r) r))
  :pattern ((inv@628@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@630@01  $FVF<r>) r) r))
  :pattern ((inv@628@01 r))
  :qid |quant-u-7529|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
      (img@629@01 r)
      (= r (inv@628@01 r)))
    (>
      (+
        (+
          (+
            (ite
              (and
                (img@596@01 r)
                (and
                  (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
                  (not (= (inv@595@01 r) x0@463@01))))
              (/ (to_real 1) (to_real 2))
              $Perm.No)
            (ite
              (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
              (- $Perm.Write (pTaken@581@01 r))
              $Perm.No))
          (ite
            (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
            (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r))
            $Perm.No))
        (ite (= r x0@463@01) (/ (to_real 1) (to_real 2)) $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7530|))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(declare-const sm@631@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>)))
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r)))
    (=>
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>))))
  :qid |qp.fvfDomDef626|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef621|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef622|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef623|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef624|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef625|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@626@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@631@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef605|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef606|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef607|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef608|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef609|)))
(assert (forall ((n@622@01 $Ref)) (!
  (=>
    (Set_in n@622@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@623@01 n@622@01) n@622@01) (img@624@01 n@622@01)))
  :pattern ((Set_in n@622@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@623@01 n@622@01))
  :pattern ((img@624@01 n@622@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@624@01 r) (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@623@01 r) r))
  :pattern ((inv@623@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>)))
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r)))
    (=>
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>))))
  :qid |qp.fvfDomDef615|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef610|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef611|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef612|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef613|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef614|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef616|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef617|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef618|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef619|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef620|)))
(assert (forall ((n@627@01 $Ref)) (!
  (=>
    (Set_in n@627@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@628@01 n@627@01) n@627@01) (img@629@01 n@627@01)))
  :pattern ((Set_in n@627@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@628@01 n@627@01))
  :pattern ((img@629@01 n@627@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@629@01 r) (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@628@01 r) r))
  :pattern ((inv@628@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>)))
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r)))
    (=>
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>))))
  :qid |qp.fvfDomDef626|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef621|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef622|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef623|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef624|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef625|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_l ($FVF.lookup_l (as sm@625@01  $FVF<l>) r) r))
    :pattern ((inv@623@01 r))
    :qid |quant-u-7526|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_r ($FVF.lookup_r (as sm@630@01  $FVF<r>) r) r))
    :pattern ((inv@628@01 r))
    :qid |quant-u-7529|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@626@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@631@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
; [eval] exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 9
(declare-const n@632@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@632@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 10
(declare-fun inv@633@01 ($Ref) $Ref)
(declare-fun img@634@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@635@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@635@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef627|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@635@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef628|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef629|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@632@01 $Ref) (n2@632@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@632@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@635@01  $FVF<l>) n1@632@01) n1@632@01))
      (and
        (Set_in n2@632@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@635@01  $FVF<l>) n2@632@01) n2@632@01))
      (= n1@632@01 n2@632@01))
    (= n1@632@01 n2@632@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@632@01 $Ref)) (!
  (=>
    (Set_in n@632@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@633@01 n@632@01) n@632@01) (img@634@01 n@632@01)))
  :pattern ((Set_in n@632@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@633@01 n@632@01))
  :pattern ((img@634@01 n@632@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@634@01 r) (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@633@01 r) r))
  :pattern ((inv@633@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@635@01  $FVF<l>) r) r))
  :pattern ((inv@633@01 r))
  :qid |quant-u-7532|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
      (img@634@01 r)
      (= r (inv@633@01 r)))
    (>
      (+
        (ite
          (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7533|))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(declare-const sm@636@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>)))
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r)))
    (=>
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>))))
  :qid |qp.fvfDomDef633|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@636@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef630|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@636@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef631|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef632|)))
(declare-const n@637@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@637@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 10
(declare-fun inv@638@01 ($Ref) $Ref)
(declare-fun img@639@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@640@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@640@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef634|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@640@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef635|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef636|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@637@01 $Ref) (n2@637@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@637@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@640@01  $FVF<r>) n1@637@01) n1@637@01))
      (and
        (Set_in n2@637@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@640@01  $FVF<r>) n2@637@01) n2@637@01))
      (= n1@637@01 n2@637@01))
    (= n1@637@01 n2@637@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@637@01 $Ref)) (!
  (=>
    (Set_in n@637@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@638@01 n@637@01) n@637@01) (img@639@01 n@637@01)))
  :pattern ((Set_in n@637@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@638@01 n@637@01))
  :pattern ((img@639@01 n@637@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@639@01 r) (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@638@01 r) r))
  :pattern ((inv@638@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@640@01  $FVF<r>) r) r))
  :pattern ((inv@638@01 r))
  :qid |quant-u-7535|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
      (img@639@01 r)
      (= r (inv@638@01 r)))
    (>
      (+
        (ite
          (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7536|))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(declare-const sm@641@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>)))
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r)))
    (=>
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>))))
  :qid |qp.fvfDomDef640|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@641@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef637|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@641@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef638|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef639|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@635@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef627|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@635@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef628|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef629|)))
(assert (forall ((n@632@01 $Ref)) (!
  (=>
    (Set_in n@632@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@633@01 n@632@01) n@632@01) (img@634@01 n@632@01)))
  :pattern ((Set_in n@632@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@633@01 n@632@01))
  :pattern ((img@634@01 n@632@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@634@01 r) (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@633@01 r) r))
  :pattern ((inv@633@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>)))
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r)))
    (=>
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>))))
  :qid |qp.fvfDomDef633|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@636@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef630|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@636@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef631|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef632|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@640@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef634|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@640@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef635|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef636|)))
(assert (forall ((n@637@01 $Ref)) (!
  (=>
    (Set_in n@637@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@638@01 n@637@01) n@637@01) (img@639@01 n@637@01)))
  :pattern ((Set_in n@637@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@638@01 n@637@01))
  :pattern ((img@639@01 n@637@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@639@01 r) (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@638@01 r) r))
  :pattern ((inv@638@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>)))
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r)))
    (=>
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>))))
  :qid |qp.fvfDomDef640|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@641@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef637|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@641@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef638|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef639|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_l ($FVF.lookup_l (as sm@635@01  $FVF<l>) r) r))
    :pattern ((inv@633@01 r))
    :qid |quant-u-7532|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_r ($FVF.lookup_r (as sm@640@01  $FVF<r>) r) r))
    :pattern ((inv@638@01 r))
    :qid |quant-u-7535|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
(push) ; 9
; [then-branch: 143 | exists_path[Bool]($$((sm@636@01, sm@641@01), g0@461@01 ∪ g1@462@01), v1@620@01, v2@621@01) | live]
; [else-branch: 143 | !(exists_path[Bool]($$((sm@636@01, sm@641@01), g0@461@01 ∪ g1@462@01), v1@620@01, v2@621@01)) | live]
(push) ; 10
; [then-branch: 143 | exists_path[Bool]($$((sm@636@01, sm@641@01), g0@461@01 ∪ g1@462@01), v1@620@01, v2@621@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
(pop) ; 10
(push) ; 10
; [else-branch: 143 | !(exists_path[Bool]($$((sm@636@01, sm@641@01), g0@461@01 ∪ g1@462@01), v1@620@01, v2@621@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01)))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 11
(declare-const n@642@01 $Ref)
(push) ; 12
; [eval] (n in refs)
(assert (Set_in n@642@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 12
(declare-fun inv@643@01 ($Ref) $Ref)
(declare-fun img@644@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@645@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef641|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef642|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef643|)))
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((n1@642@01 $Ref) (n2@642@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@642@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@645@01  $FVF<l>) n1@642@01) n1@642@01))
      (and
        (Set_in n2@642@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@645@01  $FVF<l>) n2@642@01) n2@642@01))
      (= n1@642@01 n2@642@01))
    (= n1@642@01 n2@642@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@642@01 $Ref)) (!
  (=>
    (Set_in n@642@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@643@01 n@642@01) n@642@01) (img@644@01 n@642@01)))
  :pattern ((Set_in n@642@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@643@01 n@642@01))
  :pattern ((img@644@01 n@642@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@644@01 r) (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@643@01 r) r))
  :pattern ((inv@643@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@645@01  $FVF<l>) r) r))
  :pattern ((inv@643@01 r))
  :qid |quant-u-7538|)))
(push) ; 12
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
      (img@644@01 r)
      (= r (inv@643@01 r)))
    (>
      (+
        (ite
          (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7539|))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(declare-const sm@646@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r)))
    (=>
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>))))
  :qid |qp.fvfDomDef647|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef644|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef645|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef646|)))
(declare-const n@647@01 $Ref)
(push) ; 12
; [eval] (n in refs)
(assert (Set_in n@647@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 12
(declare-fun inv@648@01 ($Ref) $Ref)
(declare-fun img@649@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@650@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef648|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef649|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef650|)))
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((n1@647@01 $Ref) (n2@647@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@647@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@650@01  $FVF<r>) n1@647@01) n1@647@01))
      (and
        (Set_in n2@647@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@650@01  $FVF<r>) n2@647@01) n2@647@01))
      (= n1@647@01 n2@647@01))
    (= n1@647@01 n2@647@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@647@01 $Ref)) (!
  (=>
    (Set_in n@647@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@648@01 n@647@01) n@647@01) (img@649@01 n@647@01)))
  :pattern ((Set_in n@647@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@648@01 n@647@01))
  :pattern ((img@649@01 n@647@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@649@01 r) (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@648@01 r) r))
  :pattern ((inv@648@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@650@01  $FVF<r>) r) r))
  :pattern ((inv@648@01 r))
  :qid |quant-u-7541|)))
(push) ; 12
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
      (img@649@01 r)
      (= r (inv@648@01 r)))
    (>
      (+
        (ite
          (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7542|))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(declare-const sm@651@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r)))
    (=>
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>))))
  :qid |qp.fvfDomDef654|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef651|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef652|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef653|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef641|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef642|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef643|)))
(assert (forall ((n@642@01 $Ref)) (!
  (=>
    (Set_in n@642@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@643@01 n@642@01) n@642@01) (img@644@01 n@642@01)))
  :pattern ((Set_in n@642@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@643@01 n@642@01))
  :pattern ((img@644@01 n@642@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@644@01 r) (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@643@01 r) r))
  :pattern ((inv@643@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r)))
    (=>
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>))))
  :qid |qp.fvfDomDef647|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef644|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef645|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef646|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef648|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef649|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef650|)))
(assert (forall ((n@647@01 $Ref)) (!
  (=>
    (Set_in n@647@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@648@01 n@647@01) n@647@01) (img@649@01 n@647@01)))
  :pattern ((Set_in n@647@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@648@01 n@647@01))
  :pattern ((img@649@01 n@647@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@649@01 r) (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@648@01 r) r))
  :pattern ((inv@648@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r)))
    (=>
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>))))
  :qid |qp.fvfDomDef654|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef651|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef652|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef653|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_l ($FVF.lookup_l (as sm@645@01  $FVF<l>) r) r))
    :pattern ((inv@643@01 r))
    :qid |quant-u-7538|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_r ($FVF.lookup_r (as sm@650@01  $FVF<r>) r) r))
    :pattern ((inv@648@01 r))
    :qid |quant-u-7541|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
(push) ; 11
; [then-branch: 144 | !(exists_path[Bool]($$((sm@646@01, sm@651@01), g0@461@01 ∪ g1@462@01), v1@620@01, x0@463@01)) | live]
; [else-branch: 144 | exists_path[Bool]($$((sm@646@01, sm@651@01), g0@461@01 ∪ g1@462@01), v1@620@01, x0@463@01) | live]
(push) ; 12
; [then-branch: 144 | !(exists_path[Bool]($$((sm@646@01, sm@651@01), g0@461@01 ∪ g1@462@01), v1@620@01, x0@463@01))]
(assert (not
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 144 | exists_path[Bool]($$((sm@646@01, sm@651@01), g0@461@01 ∪ g1@462@01), v1@620@01, x0@463@01)]
(assert (exists_path<Bool> ($$ ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01))
; [eval] exists_path(old($$(g)), y, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 13
(declare-const n@652@01 $Ref)
(push) ; 14
; [eval] (n in refs)
(assert (Set_in n@652@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 14
(declare-fun inv@653@01 ($Ref) $Ref)
(declare-fun img@654@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@655@01 $FVF<l>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef655|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef656|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef657|)))
; Check receiver injectivity
(push) ; 14
(assert (not (forall ((n1@652@01 $Ref) (n2@652@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@652@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@655@01  $FVF<l>) n1@652@01) n1@652@01))
      (and
        (Set_in n2@652@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@655@01  $FVF<l>) n2@652@01) n2@652@01))
      (= n1@652@01 n2@652@01))
    (= n1@652@01 n2@652@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@652@01 $Ref)) (!
  (=>
    (Set_in n@652@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@653@01 n@652@01) n@652@01) (img@654@01 n@652@01)))
  :pattern ((Set_in n@652@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@653@01 n@652@01))
  :pattern ((img@654@01 n@652@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@654@01 r) (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@653@01 r) r))
  :pattern ((inv@653@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@655@01  $FVF<l>) r) r))
  :pattern ((inv@653@01 r))
  :qid |quant-u-7544|)))
(push) ; 14
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
      (img@654@01 r)
      (= r (inv@653@01 r)))
    (>
      (+
        (ite
          (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7545|))))
(check-sat)
; unsat
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(declare-const sm@656@01 $FVF<l>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r)))
    (=>
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>))))
  :qid |qp.fvfDomDef661|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef658|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef659|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef660|)))
(declare-const n@657@01 $Ref)
(push) ; 14
; [eval] (n in refs)
(assert (Set_in n@657@01 (Set_union g0@461@01 g1@462@01)))
(pop) ; 14
(declare-fun inv@658@01 ($Ref) $Ref)
(declare-fun img@659@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@660@01 $FVF<r>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef662|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef663|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef664|)))
; Check receiver injectivity
(push) ; 14
(assert (not (forall ((n1@657@01 $Ref) (n2@657@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@657@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@660@01  $FVF<r>) n1@657@01) n1@657@01))
      (and
        (Set_in n2@657@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@660@01  $FVF<r>) n2@657@01) n2@657@01))
      (= n1@657@01 n2@657@01))
    (= n1@657@01 n2@657@01))
  
  :qid |r-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@657@01 $Ref)) (!
  (=>
    (Set_in n@657@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@658@01 n@657@01) n@657@01) (img@659@01 n@657@01)))
  :pattern ((Set_in n@657@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@658@01 n@657@01))
  :pattern ((img@659@01 n@657@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@659@01 r) (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@658@01 r) r))
  :pattern ((inv@658@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_r ($FVF.lookup_r (as sm@660@01  $FVF<r>) r) r))
  :pattern ((inv@658@01 r))
  :qid |quant-u-7547|)))
(push) ; 14
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
      (img@659@01 r)
      (= r (inv@658@01 r)))
    (>
      (+
        (ite
          (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7548|))))
(check-sat)
; unsat
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(declare-const sm@661@01 $FVF<r>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r)))
    (=>
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>))))
  :qid |qp.fvfDomDef668|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef665|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef666|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef667|)))
(assert ($$%precondition ($Snap.combine
  ($SortWrappers.$FVF<l>To$Snap (as sm@656@01  $FVF<l>))
  ($SortWrappers.$FVF<r>To$Snap (as sm@661@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))
(pop) ; 13
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef655|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef656|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef657|)))
(assert (forall ((n@652@01 $Ref)) (!
  (=>
    (Set_in n@652@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@653@01 n@652@01) n@652@01) (img@654@01 n@652@01)))
  :pattern ((Set_in n@652@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@653@01 n@652@01))
  :pattern ((img@654@01 n@652@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@654@01 r) (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@653@01 r) r))
  :pattern ((inv@653@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r)))
    (=>
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>))))
  :qid |qp.fvfDomDef661|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef658|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef659|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef660|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef662|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef663|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef664|)))
(assert (forall ((n@657@01 $Ref)) (!
  (=>
    (Set_in n@657@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@658@01 n@657@01) n@657@01) (img@659@01 n@657@01)))
  :pattern ((Set_in n@657@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@658@01 n@657@01))
  :pattern ((img@659@01 n@657@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@659@01 r) (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@658@01 r) r))
  :pattern ((inv@658@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r)))
    (=>
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>))))
  :qid |qp.fvfDomDef668|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef665|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef666|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef667|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_l ($FVF.lookup_l (as sm@655@01  $FVF<l>) r) r))
    :pattern ((inv@653@01 r))
    :qid |quant-u-7544|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
      ($FVF.loc_r ($FVF.lookup_r (as sm@660@01  $FVF<r>) r) r))
    :pattern ((inv@658@01 r))
    :qid |quant-u-7547|))
  ($$%precondition ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@656@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@661@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef655|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef656|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef657|)))
(assert (forall ((n@652@01 $Ref)) (!
  (=>
    (Set_in n@652@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@653@01 n@652@01) n@652@01) (img@654@01 n@652@01)))
  :pattern ((Set_in n@652@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@653@01 n@652@01))
  :pattern ((img@654@01 n@652@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@654@01 r) (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@653@01 r) r))
  :pattern ((inv@653@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r)))
    (=>
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>))))
  :qid |qp.fvfDomDef661|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef658|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef659|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef660|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef662|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef663|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef664|)))
(assert (forall ((n@657@01 $Ref)) (!
  (=>
    (Set_in n@657@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@658@01 n@657@01) n@657@01) (img@659@01 n@657@01)))
  :pattern ((Set_in n@657@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@658@01 n@657@01))
  :pattern ((img@659@01 n@657@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@659@01 r) (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@658@01 r) r))
  :pattern ((inv@658@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r)))
    (=>
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>))))
  :qid |qp.fvfDomDef668|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef665|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef666|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef667|)))
(assert (=>
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
  (and
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@655@01  $FVF<l>) r) r))
      :pattern ((inv@653@01 r))
      :qid |quant-u-7544|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@660@01  $FVF<r>) r) r))
      :pattern ((inv@658@01 r))
      :qid |quant-u-7547|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@656@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@661@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)))))
(assert (or
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef641|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef642|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef643|)))
(assert (forall ((n@642@01 $Ref)) (!
  (=>
    (Set_in n@642@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@643@01 n@642@01) n@642@01) (img@644@01 n@642@01)))
  :pattern ((Set_in n@642@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@643@01 n@642@01))
  :pattern ((img@644@01 n@642@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@644@01 r) (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@643@01 r) r))
  :pattern ((inv@643@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r)))
    (=>
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>))))
  :qid |qp.fvfDomDef647|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef644|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef645|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef646|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef648|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef649|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef650|)))
(assert (forall ((n@647@01 $Ref)) (!
  (=>
    (Set_in n@647@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@648@01 n@647@01) n@647@01) (img@649@01 n@647@01)))
  :pattern ((Set_in n@647@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@648@01 n@647@01))
  :pattern ((img@649@01 n@647@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@649@01 r) (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@648@01 r) r))
  :pattern ((inv@648@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r)))
    (=>
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>))))
  :qid |qp.fvfDomDef654|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef651|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef652|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef653|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef655|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef656|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef657|)))
(assert (forall ((n@652@01 $Ref)) (!
  (=>
    (Set_in n@652@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@653@01 n@652@01) n@652@01) (img@654@01 n@652@01)))
  :pattern ((Set_in n@652@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@653@01 n@652@01))
  :pattern ((img@654@01 n@652@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@654@01 r) (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@653@01 r) r))
  :pattern ((inv@653@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r)))
    (=>
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>))))
  :qid |qp.fvfDomDef661|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef658|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef659|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef660|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef662|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef663|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef664|)))
(assert (forall ((n@657@01 $Ref)) (!
  (=>
    (Set_in n@657@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@658@01 n@657@01) n@657@01) (img@659@01 n@657@01)))
  :pattern ((Set_in n@657@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@658@01 n@657@01))
  :pattern ((img@659@01 n@657@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@659@01 r) (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@658@01 r) r))
  :pattern ((inv@658@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r)))
    (=>
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>))))
  :qid |qp.fvfDomDef668|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef665|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef666|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef667|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
  (and
    (not
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@645@01  $FVF<l>) r) r))
      :pattern ((inv@643@01 r))
      :qid |quant-u-7538|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@650@01  $FVF<r>) r) r))
      :pattern ((inv@648@01 r))
      :qid |quant-u-7541|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
    (=>
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
      (and
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_l ($FVF.lookup_l (as sm@655@01  $FVF<l>) r) r))
          :pattern ((inv@653@01 r))
          :qid |quant-u-7544|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_r ($FVF.lookup_r (as sm@660@01  $FVF<r>) r) r))
          :pattern ((inv@658@01 r))
          :qid |quant-u-7547|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@656@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@661@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
    (or
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01))))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
  (exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 142 | v1@620@01 == v2@621@01]
(assert (= v1@620@01 v2@621@01))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef605|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef606|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef607|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef608|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef609|)))
(assert (forall ((n@622@01 $Ref)) (!
  (=>
    (Set_in n@622@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@623@01 n@622@01) n@622@01) (img@624@01 n@622@01)))
  :pattern ((Set_in n@622@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@623@01 n@622@01))
  :pattern ((img@624@01 n@622@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@624@01 r) (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@623@01 r) r))
  :pattern ((inv@623@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>)))
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r)))
    (=>
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>))))
  :qid |qp.fvfDomDef615|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef610|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef611|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef612|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef613|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef614|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef616|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef617|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef618|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef619|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef620|)))
(assert (forall ((n@627@01 $Ref)) (!
  (=>
    (Set_in n@627@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@628@01 n@627@01) n@627@01) (img@629@01 n@627@01)))
  :pattern ((Set_in n@627@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@628@01 n@627@01))
  :pattern ((img@629@01 n@627@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@629@01 r) (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@628@01 r) r))
  :pattern ((inv@628@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>)))
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r)))
    (=>
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>))))
  :qid |qp.fvfDomDef626|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef621|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef622|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef623|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef624|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef625|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@635@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef627|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@635@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef628|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef629|)))
(assert (forall ((n@632@01 $Ref)) (!
  (=>
    (Set_in n@632@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@633@01 n@632@01) n@632@01) (img@634@01 n@632@01)))
  :pattern ((Set_in n@632@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@633@01 n@632@01))
  :pattern ((img@634@01 n@632@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@634@01 r) (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@633@01 r) r))
  :pattern ((inv@633@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>)))
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r)))
    (=>
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>))))
  :qid |qp.fvfDomDef633|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@636@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef630|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@636@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef631|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef632|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@640@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef634|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@640@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef635|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef636|)))
(assert (forall ((n@637@01 $Ref)) (!
  (=>
    (Set_in n@637@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@638@01 n@637@01) n@637@01) (img@639@01 n@637@01)))
  :pattern ((Set_in n@637@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@638@01 n@637@01))
  :pattern ((img@639@01 n@637@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@639@01 r) (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@638@01 r) r))
  :pattern ((inv@638@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>)))
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r)))
    (=>
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>))))
  :qid |qp.fvfDomDef640|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@641@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef637|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@641@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef638|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef639|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef641|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef642|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef643|)))
(assert (forall ((n@642@01 $Ref)) (!
  (=>
    (Set_in n@642@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@643@01 n@642@01) n@642@01) (img@644@01 n@642@01)))
  :pattern ((Set_in n@642@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@643@01 n@642@01))
  :pattern ((img@644@01 n@642@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@644@01 r) (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@643@01 r) r))
  :pattern ((inv@643@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r)))
    (=>
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>))))
  :qid |qp.fvfDomDef647|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef644|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef645|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef646|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef648|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef649|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef650|)))
(assert (forall ((n@647@01 $Ref)) (!
  (=>
    (Set_in n@647@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@648@01 n@647@01) n@647@01) (img@649@01 n@647@01)))
  :pattern ((Set_in n@647@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@648@01 n@647@01))
  :pattern ((img@649@01 n@647@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@649@01 r) (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@648@01 r) r))
  :pattern ((inv@648@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r)))
    (=>
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>))))
  :qid |qp.fvfDomDef654|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef651|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef652|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef653|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef655|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef656|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef657|)))
(assert (forall ((n@652@01 $Ref)) (!
  (=>
    (Set_in n@652@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@653@01 n@652@01) n@652@01) (img@654@01 n@652@01)))
  :pattern ((Set_in n@652@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@653@01 n@652@01))
  :pattern ((img@654@01 n@652@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@654@01 r) (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@653@01 r) r))
  :pattern ((inv@653@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r)))
    (=>
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>))))
  :qid |qp.fvfDomDef661|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef658|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef659|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef660|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef662|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef663|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef664|)))
(assert (forall ((n@657@01 $Ref)) (!
  (=>
    (Set_in n@657@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@658@01 n@657@01) n@657@01) (img@659@01 n@657@01)))
  :pattern ((Set_in n@657@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@658@01 n@657@01))
  :pattern ((img@659@01 n@657@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@659@01 r) (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@658@01 r) r))
  :pattern ((inv@658@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r)))
    (=>
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>))))
  :qid |qp.fvfDomDef668|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef665|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef666|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef667|)))
(assert (=>
  (not (= v1@620@01 v2@621@01))
  (and
    (not (= v1@620@01 v2@621@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@625@01  $FVF<l>) r) r))
      :pattern ((inv@623@01 r))
      :qid |quant-u-7526|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@630@01  $FVF<r>) r) r))
      :pattern ((inv@628@01 r))
      :qid |quant-u-7529|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@626@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@631@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@635@01  $FVF<l>) r) r))
      :pattern ((inv@633@01 r))
      :qid |quant-u-7532|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_r ($FVF.lookup_r (as sm@640@01  $FVF<r>) r) r))
      :pattern ((inv@638@01 r))
      :qid |quant-u-7535|))
    ($$%precondition ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
    (=>
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
      (and
        (not
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_l ($FVF.lookup_l (as sm@645@01  $FVF<l>) r) r))
          :pattern ((inv@643@01 r))
          :qid |quant-u-7538|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_r ($FVF.lookup_r (as sm@650@01  $FVF<r>) r) r))
          :pattern ((inv@648@01 r))
          :qid |quant-u-7541|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
        (=>
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
                ($FVF.loc_l ($FVF.lookup_l (as sm@655@01  $FVF<l>) r) r))
              :pattern ((inv@653@01 r))
              :qid |quant-u-7544|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
                ($FVF.loc_r ($FVF.lookup_r (as sm@660@01  $FVF<r>) r) r))
              :pattern ((inv@658@01 r))
              :qid |quant-u-7547|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@656@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@661@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)))))
    (or
      (not
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
      (exists_path<Bool> ($$ ($Snap.combine
        ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
        ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01)))))
; Joined path conditions
(assert (or (= v1@620@01 v2@621@01) (not (= v1@620@01 v2@621@01))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef605|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef606|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef607|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef608|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef609|)))
(assert (forall ((n@622@01 $Ref)) (!
  (=>
    (Set_in n@622@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@623@01 n@622@01) n@622@01) (img@624@01 n@622@01)))
  :pattern ((Set_in n@622@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@623@01 n@622@01))
  :pattern ((img@624@01 n@622@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@624@01 r) (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@623@01 r) r))
  :pattern ((inv@623@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>)))
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r)))
    (=>
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>))))
  :qid |qp.fvfDomDef615|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef610|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef611|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef612|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef613|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef614|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef616|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef617|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef618|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef619|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef620|)))
(assert (forall ((n@627@01 $Ref)) (!
  (=>
    (Set_in n@627@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@628@01 n@627@01) n@627@01) (img@629@01 n@627@01)))
  :pattern ((Set_in n@627@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@628@01 n@627@01))
  :pattern ((img@629@01 n@627@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@629@01 r) (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@628@01 r) r))
  :pattern ((inv@628@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>)))
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r)))
    (=>
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>))))
  :qid |qp.fvfDomDef626|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef621|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef622|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef623|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef624|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef625|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@635@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef627|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@635@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef628|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef629|)))
(assert (forall ((n@632@01 $Ref)) (!
  (=>
    (Set_in n@632@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@633@01 n@632@01) n@632@01) (img@634@01 n@632@01)))
  :pattern ((Set_in n@632@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@633@01 n@632@01))
  :pattern ((img@634@01 n@632@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@634@01 r) (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@633@01 r) r))
  :pattern ((inv@633@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>)))
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r)))
    (=>
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>))))
  :qid |qp.fvfDomDef633|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@636@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef630|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@636@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef631|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef632|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@640@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef634|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@640@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef635|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef636|)))
(assert (forall ((n@637@01 $Ref)) (!
  (=>
    (Set_in n@637@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@638@01 n@637@01) n@637@01) (img@639@01 n@637@01)))
  :pattern ((Set_in n@637@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@638@01 n@637@01))
  :pattern ((img@639@01 n@637@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@639@01 r) (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@638@01 r) r))
  :pattern ((inv@638@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>)))
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r)))
    (=>
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>))))
  :qid |qp.fvfDomDef640|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@641@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef637|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@641@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef638|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef639|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef641|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef642|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef643|)))
(assert (forall ((n@642@01 $Ref)) (!
  (=>
    (Set_in n@642@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@643@01 n@642@01) n@642@01) (img@644@01 n@642@01)))
  :pattern ((Set_in n@642@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@643@01 n@642@01))
  :pattern ((img@644@01 n@642@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@644@01 r) (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@643@01 r) r))
  :pattern ((inv@643@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r)))
    (=>
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>))))
  :qid |qp.fvfDomDef647|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef644|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef645|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef646|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef648|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef649|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef650|)))
(assert (forall ((n@647@01 $Ref)) (!
  (=>
    (Set_in n@647@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@648@01 n@647@01) n@647@01) (img@649@01 n@647@01)))
  :pattern ((Set_in n@647@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@648@01 n@647@01))
  :pattern ((img@649@01 n@647@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@649@01 r) (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@648@01 r) r))
  :pattern ((inv@648@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r)))
    (=>
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>))))
  :qid |qp.fvfDomDef654|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef651|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef652|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef653|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef655|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef656|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef657|)))
(assert (forall ((n@652@01 $Ref)) (!
  (=>
    (Set_in n@652@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@653@01 n@652@01) n@652@01) (img@654@01 n@652@01)))
  :pattern ((Set_in n@652@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@653@01 n@652@01))
  :pattern ((img@654@01 n@652@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@654@01 r) (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@653@01 r) r))
  :pattern ((inv@653@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r)))
    (=>
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>))))
  :qid |qp.fvfDomDef661|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef658|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef659|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef660|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef662|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef663|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef664|)))
(assert (forall ((n@657@01 $Ref)) (!
  (=>
    (Set_in n@657@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@658@01 n@657@01) n@657@01) (img@659@01 n@657@01)))
  :pattern ((Set_in n@657@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@658@01 n@657@01))
  :pattern ((img@659@01 n@657@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@659@01 r) (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@658@01 r) r))
  :pattern ((inv@658@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r)))
    (=>
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>))))
  :qid |qp.fvfDomDef668|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef665|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef666|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef667|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@620@01 $Ref) (v2@621@01 $Ref)) (!
  (and
    (=>
      (not (= v1@620@01 v2@621@01))
      (and
        (not (= v1@620@01 v2@621@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_l ($FVF.lookup_l (as sm@625@01  $FVF<l>) r) r))
          :pattern ((inv@623@01 r))
          :qid |quant-u-7526|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_r ($FVF.lookup_r (as sm@630@01  $FVF<r>) r) r))
          :pattern ((inv@628@01 r))
          :qid |quant-u-7529|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@626@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@631@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_l ($FVF.lookup_l (as sm@635@01  $FVF<l>) r) r))
          :pattern ((inv@633@01 r))
          :qid |quant-u-7532|))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
            ($FVF.loc_r ($FVF.lookup_r (as sm@640@01  $FVF<r>) r) r))
          :pattern ((inv@638@01 r))
          :qid |quant-u-7535|))
        ($$%precondition ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
        (=>
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
          (and
            (not
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
                ($FVF.loc_l ($FVF.lookup_l (as sm@645@01  $FVF<l>) r) r))
              :pattern ((inv@643@01 r))
              :qid |quant-u-7538|))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
                ($FVF.loc_r ($FVF.lookup_r (as sm@650@01  $FVF<r>) r) r))
              :pattern ((inv@648@01 r))
              :qid |quant-u-7541|))
            ($$%precondition ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
            (=>
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
              (and
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
                    ($FVF.loc_l ($FVF.lookup_l (as sm@655@01  $FVF<l>) r) r))
                  :pattern ((inv@653@01 r))
                  :qid |quant-u-7544|))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
                    ($FVF.loc_r ($FVF.lookup_r (as sm@660@01  $FVF<r>) r) r))
                  :pattern ((inv@658@01 r))
                  :qid |quant-u-7547|))
                ($$%precondition ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@656@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@661@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
            (or
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)))))
        (or
          (not
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))))
    (or (= v1@620@01 v2@621@01) (not (= v1@620@01 v2@621@01))))
  :pattern ((exists_path<Bool> ($$ ($Snap.combine
    ($SortWrappers.$FVF<l>To$Snap (as sm@626@01  $FVF<l>))
    ($SortWrappers.$FVF<r>To$Snap (as sm@631@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@252@27@257@10-aux|)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef605|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef606|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef607|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@625@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef608|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@625@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef609|)))
(assert (forall ((n@622@01 $Ref)) (!
  (=>
    (Set_in n@622@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@623@01 n@622@01) n@622@01) (img@624@01 n@622@01)))
  :pattern ((Set_in n@622@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@623@01 n@622@01))
  :pattern ((img@624@01 n@622@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@624@01 r) (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@623@01 r) r))
  :pattern ((inv@623@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>)))
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r)))
    (=>
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@626@01  $FVF<l>))))
  :qid |qp.fvfDomDef615|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef610|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
        false))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef611|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef612|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
        (img@624@01 r))
      (and
        (img@592@01 r)
        (and
          (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@591@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_l (as sm@626@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef613|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@626@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef614|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@596@01 r)
      (and
        (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@595@01 r) x0@463@01))))
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef616|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef617|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef618|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
      false)
    (=
      ($FVF.lookup_r (as sm@630@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef619|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@630@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef620|)))
(assert (forall ((n@627@01 $Ref)) (!
  (=>
    (Set_in n@627@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@628@01 n@627@01) n@627@01) (img@629@01 n@627@01)))
  :pattern ((Set_in n@627@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@628@01 n@627@01))
  :pattern ((img@629@01 n@627@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@629@01 r) (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@628@01 r) r))
  :pattern ((inv@628@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>)))
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r)))
    (=>
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@631@01  $FVF<r>))))
  :qid |qp.fvfDomDef626|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (and
        (img@596@01 r)
        (and
          (Set_in (inv@595@01 r) (Set_union g0@461@01 g1@462@01))
          (not (= (inv@595@01 r) x0@463@01)))))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r))
  :qid |qp.fvfValDef621|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (= r x0@463@01))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r (as sm@588@01  $FVF<r>) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r (as sm@588@01  $FVF<r>) r))
  :qid |qp.fvfValDef622|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (ite
        (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
        (< $Perm.No (- $Perm.Write (pTaken@581@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef623|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
        (img@629@01 r))
      (ite
        (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@570@01 r)) (pTaken@582@01 r)))
        false))
    (=
      ($FVF.lookup_r (as sm@631@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef624|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r (as sm@588@01  $FVF<r>) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@631@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef625|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@635@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef627|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@635@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef628|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@635@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef629|)))
(assert (forall ((n@632@01 $Ref)) (!
  (=>
    (Set_in n@632@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@633@01 n@632@01) n@632@01) (img@634@01 n@632@01)))
  :pattern ((Set_in n@632@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@633@01 n@632@01))
  :pattern ((img@634@01 n@632@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@634@01 r) (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@633@01 r) r))
  :pattern ((inv@633@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>)))
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r)))
    (=>
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@636@01  $FVF<l>))))
  :qid |qp.fvfDomDef633|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@636@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef630|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
        (img@634@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@636@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef631|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@636@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef632|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@640@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef634|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@640@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef635|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@640@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef636|)))
(assert (forall ((n@637@01 $Ref)) (!
  (=>
    (Set_in n@637@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@638@01 n@637@01) n@637@01) (img@639@01 n@637@01)))
  :pattern ((Set_in n@637@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@638@01 n@637@01))
  :pattern ((img@639@01 n@637@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@639@01 r) (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@638@01 r) r))
  :pattern ((inv@638@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>)))
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r)))
    (=>
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@641@01  $FVF<r>))))
  :qid |qp.fvfDomDef640|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@641@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef637|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
        (img@639@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@641@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef638|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@641@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef639|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef641|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@645@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef642|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@645@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef643|)))
(assert (forall ((n@642@01 $Ref)) (!
  (=>
    (Set_in n@642@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@643@01 n@642@01) n@642@01) (img@644@01 n@642@01)))
  :pattern ((Set_in n@642@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@643@01 n@642@01))
  :pattern ((img@644@01 n@642@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@644@01 r) (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@643@01 r) r))
  :pattern ((inv@643@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r)))
    (=>
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@646@01  $FVF<l>))))
  :qid |qp.fvfDomDef647|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef644|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
        (img@644@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@646@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef645|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@646@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef646|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef648|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@650@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef649|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@650@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef650|)))
(assert (forall ((n@647@01 $Ref)) (!
  (=>
    (Set_in n@647@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@648@01 n@647@01) n@647@01) (img@649@01 n@647@01)))
  :pattern ((Set_in n@647@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@648@01 n@647@01))
  :pattern ((img@649@01 n@647@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@649@01 r) (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@648@01 r) r))
  :pattern ((inv@648@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r)))
    (=>
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@651@01  $FVF<r>))))
  :qid |qp.fvfDomDef654|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef651|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
        (img@649@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@651@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef652|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@651@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef653|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef655|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
    (=
      ($FVF.lookup_l (as sm@655@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef656|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@655@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef657|)))
(assert (forall ((n@652@01 $Ref)) (!
  (=>
    (Set_in n@652@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@653@01 n@652@01) n@652@01) (img@654@01 n@652@01)))
  :pattern ((Set_in n@652@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@653@01 n@652@01))
  :pattern ((img@654@01 n@652@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@654@01 r) (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@653@01 r) r))
  :pattern ((inv@653@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r)))
    (=>
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>)))))
  :pattern ((Set_in r ($FVF.domain_l (as sm@656@01  $FVF<l>))))
  :qid |qp.fvfDomDef661|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef658|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
        (img@654@01 r))
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01)))
    (=
      ($FVF.lookup_l (as sm@656@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef659|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r))
  :pattern (($FVF.lookup_l (as sm@656@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef660|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef662|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01))
    (=
      ($FVF.lookup_r (as sm@660@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef663|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@660@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef664|)))
(assert (forall ((n@657@01 $Ref)) (!
  (=>
    (Set_in n@657@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@658@01 n@657@01) n@657@01) (img@659@01 n@657@01)))
  :pattern ((Set_in n@657@01 (Set_union g0@461@01 g1@462@01)))
  :pattern ((inv@658@01 n@657@01))
  :pattern ((img@659@01 n@657@01))
  :qid |r-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@659@01 r) (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@658@01 r) r))
  :pattern ((inv@658@01 r))
  :qid |r-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r)))
    (=>
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>)))))
  :pattern ((Set_in r ($FVF.domain_r (as sm@661@01  $FVF<r>))))
  :qid |qp.fvfDomDef668|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@485@01 r) (Set_in (inv@484@01 r) g1@462@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r))
  :qid |qp.fvfValDef665|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
        (img@659@01 r))
      (and (img@475@01 r) (Set_in (inv@474@01 r) g0@461@01)))
    (=
      ($FVF.lookup_r (as sm@661@01  $FVF<r>) r)
      ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r)))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :pattern (($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r))
  :qid |qp.fvfValDef666|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01))))))))))) r) r)
    ($FVF.loc_r ($FVF.lookup_r ($SortWrappers.$SnapTo$FVF<r> ($Snap.first ($Snap.second ($Snap.second $t@466@01)))) r) r))
  :pattern (($FVF.lookup_r (as sm@661@01  $FVF<r>) r))
  :qid |qp.fvfResTrgDef667|)))
(assert (=>
  (not (= x1@464@01 $Ref.null))
  (forall ((v1@620@01 $Ref) (v2@621@01 $Ref)) (!
    (and
      (=>
        (not (= v1@620@01 v2@621@01))
        (and
          (not (= v1@620@01 v2@621@01))
          (forall ((r $Ref)) (!
            (=>
              (Set_in (inv@623@01 r) (Set_union g0@461@01 g1@462@01))
              ($FVF.loc_l ($FVF.lookup_l (as sm@625@01  $FVF<l>) r) r))
            :pattern ((inv@623@01 r))
            :qid |quant-u-7526|))
          (forall ((r $Ref)) (!
            (=>
              (Set_in (inv@628@01 r) (Set_union g0@461@01 g1@462@01))
              ($FVF.loc_r ($FVF.lookup_r (as sm@630@01  $FVF<r>) r) r))
            :pattern ((inv@628@01 r))
            :qid |quant-u-7529|))
          ($$%precondition ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@626@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@631@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
          (forall ((r $Ref)) (!
            (=>
              (Set_in (inv@633@01 r) (Set_union g0@461@01 g1@462@01))
              ($FVF.loc_l ($FVF.lookup_l (as sm@635@01  $FVF<l>) r) r))
            :pattern ((inv@633@01 r))
            :qid |quant-u-7532|))
          (forall ((r $Ref)) (!
            (=>
              (Set_in (inv@638@01 r) (Set_union g0@461@01 g1@462@01))
              ($FVF.loc_r ($FVF.lookup_r (as sm@640@01  $FVF<r>) r) r))
            :pattern ((inv@638@01 r))
            :qid |quant-u-7535|))
          ($$%precondition ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
          (=>
            (not
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
            (and
              (not
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
              (forall ((r $Ref)) (!
                (=>
                  (Set_in (inv@643@01 r) (Set_union g0@461@01 g1@462@01))
                  ($FVF.loc_l ($FVF.lookup_l (as sm@645@01  $FVF<l>) r) r))
                :pattern ((inv@643@01 r))
                :qid |quant-u-7538|))
              (forall ((r $Ref)) (!
                (=>
                  (Set_in (inv@648@01 r) (Set_union g0@461@01 g1@462@01))
                  ($FVF.loc_r ($FVF.lookup_r (as sm@650@01  $FVF<r>) r) r))
                :pattern ((inv@648@01 r))
                :qid |quant-u-7541|))
              ($$%precondition ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))
              (=>
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
                (and
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
                  (forall ((r $Ref)) (!
                    (=>
                      (Set_in (inv@653@01 r) (Set_union g0@461@01 g1@462@01))
                      ($FVF.loc_l ($FVF.lookup_l (as sm@655@01  $FVF<l>) r) r))
                    :pattern ((inv@653@01 r))
                    :qid |quant-u-7544|))
                  (forall ((r $Ref)) (!
                    (=>
                      (Set_in (inv@658@01 r) (Set_union g0@461@01 g1@462@01))
                      ($FVF.loc_r ($FVF.lookup_r (as sm@660@01  $FVF<r>) r) r))
                    :pattern ((inv@658@01 r))
                    :qid |quant-u-7547|))
                  ($$%precondition ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@656@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@661@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01))))
              (or
                (exists_path<Bool> ($$ ($Snap.combine
                  ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
                  ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
                (not
                  (exists_path<Bool> ($$ ($Snap.combine
                    ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
                    ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)))))
          (or
            (not
              (exists_path<Bool> ($$ ($Snap.combine
                ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
                ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))))
      (or (= v1@620@01 v2@621@01) (not (= v1@620@01 v2@621@01))))
    :pattern ((exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@626@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@631@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@252@27@257@10-aux|))))
(assert (=>
  (not (= x1@464@01 $Ref.null))
  (forall ((v1@620@01 $Ref) (v2@621@01 $Ref)) (!
    (=>
      (not (= v1@620@01 v2@621@01))
      (=
        (exists_path<Bool> ($$ ($Snap.combine
          ($SortWrappers.$FVF<l>To$Snap (as sm@626@01  $FVF<l>))
          ($SortWrappers.$FVF<r>To$Snap (as sm@631@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01)
        (or
          (exists_path<Bool> ($$ ($Snap.combine
            ($SortWrappers.$FVF<l>To$Snap (as sm@636@01  $FVF<l>))
            ($SortWrappers.$FVF<r>To$Snap (as sm@641@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01)
          (and
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@646@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@651@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 x0@463@01)
            (exists_path<Bool> ($$ ($Snap.combine
              ($SortWrappers.$FVF<l>To$Snap (as sm@656@01  $FVF<l>))
              ($SortWrappers.$FVF<r>To$Snap (as sm@661@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) x1@464@01 v2@621@01)))))
    :pattern ((exists_path<Bool> ($$ ($Snap.combine
      ($SortWrappers.$FVF<l>To$Snap (as sm@626@01  $FVF<l>))
      ($SortWrappers.$FVF<r>To$Snap (as sm@631@01  $FVF<r>))) (Set_union g0@461@01 g1@462@01)) v1@620@01 v2@621@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/binary/create_edge1.vpr@252@27@257@10|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(declare-const n$9@662@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$9 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$9@662@01 (Set_union g0@461@01 g1@462@01)))
(declare-const sm@663@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@663@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@663@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef669|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@663@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@663@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef670|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@663@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@663@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef671|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@663@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@663@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef672|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@663@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef673|)))
(pop) ; 4
(declare-fun inv@664@01 ($Ref) $Ref)
(declare-fun img@665@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@663@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@663@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef669|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@663@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@663@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef670|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@663@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@663@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef671|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@663@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@663@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef672|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@663@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef673|)))
; Nested auxiliary terms: non-globals
(declare-const sm@666@01 $FVF<l>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@666@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r)))
  :pattern (($FVF.lookup_l (as sm@666@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r))
  :qid |qp.fvfValDef674|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
      (< $Perm.No (- $Perm.Write (pTaken@576@01 r)))
      false)
    (=
      ($FVF.lookup_l (as sm@666@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r)))
  :pattern (($FVF.lookup_l (as sm@666@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r))
  :qid |qp.fvfValDef675|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x0@463@01)
    (=
      ($FVF.lookup_l (as sm@666@01  $FVF<l>) r)
      ($FVF.lookup_l (as sm@586@01  $FVF<l>) r)))
  :pattern (($FVF.lookup_l (as sm@666@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l (as sm@586@01  $FVF<l>) r))
  :qid |qp.fvfValDef676|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@592@01 r)
      (and
        (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
        (not (= (inv@591@01 r) x0@463@01))))
    (=
      ($FVF.lookup_l (as sm@666@01  $FVF<l>) r)
      ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r)))
  :pattern (($FVF.lookup_l (as sm@666@01  $FVF<l>) r))
  :pattern (($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r))
  :qid |qp.fvfValDef677|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second $t@466@01))) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@466@01)))))))))) r) r)
    ($FVF.loc_l ($FVF.lookup_l (as sm@586@01  $FVF<l>) r) r)
    ($FVF.loc_l ($FVF.lookup_l ($SortWrappers.$SnapTo$FVF<l> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@585@01)))))) r) r))
  :pattern (($FVF.lookup_l (as sm@666@01  $FVF<l>) r))
  :qid |qp.fvfResTrgDef678|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$91@662@01 $Ref) (n$92@662@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$91@662@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@666@01  $FVF<l>) n$91@662@01) n$91@662@01))
      (and
        (Set_in n$92@662@01 (Set_union g0@461@01 g1@462@01))
        ($FVF.loc_l ($FVF.lookup_l (as sm@666@01  $FVF<l>) n$92@662@01) n$92@662@01))
      (= n$91@662@01 n$92@662@01))
    (= n$91@662@01 n$92@662@01))
  
  :qid |l-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$9@662@01 $Ref)) (!
  (=>
    (Set_in n$9@662@01 (Set_union g0@461@01 g1@462@01))
    (and (= (inv@664@01 n$9@662@01) n$9@662@01) (img@665@01 n$9@662@01)))
  :pattern (($FVF.loc_l ($FVF.lookup_l (as sm@663@01  $FVF<l>) n$9@662@01) n$9@662@01))
  :qid |l-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@665@01 r) (Set_in (inv@664@01 r) (Set_union g0@461@01 g1@462@01)))
    (= (inv@664@01 r) r))
  :pattern ((inv@664@01 r))
  :qid |l-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@664@01 r) (Set_union g0@461@01 g1@462@01))
    ($FVF.loc_l ($FVF.lookup_l (as sm@666@01  $FVF<l>) r) r))
  :pattern ((inv@664@01 r))
  :qid |quant-u-7550|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@667@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@664@01 r) (Set_union g0@461@01 g1@462@01))
      (img@665@01 r)
      (= r (inv@664@01 r)))
    ($Perm.min
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@668@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@664@01 r) (Set_union g0@461@01 g1@462@01))
      (img@665@01 r)
      (= r (inv@664@01 r)))
    ($Perm.min
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (- $Perm.Write (pTaken@576@01 r))
        $Perm.No)
      (- $Perm.Write (pTaken@667@01 r)))
    $Perm.No))
(define-fun pTaken@669@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@664@01 r) (Set_union g0@461@01 g1@462@01))
      (img@665@01 r)
      (= r (inv@664@01 r)))
    ($Perm.min
      (ite
        (and
          (img@592@01 r)
          (and
            (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
            (not (= (inv@591@01 r) x0@463@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- (- $Perm.Write (pTaken@667@01 r)) (pTaken@668@01 r)))
    $Perm.No))
(define-fun pTaken@670@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@664@01 r) (Set_union g0@461@01 g1@462@01))
      (img@665@01 r)
      (= r (inv@664@01 r)))
    ($Perm.min
      (ite (= r x0@463@01) $Perm.Write $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@667@01 r)) (pTaken@668@01 r))
        (pTaken@669@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@470@01 r) (Set_in (inv@469@01 r) g0@461@01))
        (- (- $Perm.Write (pTaken@567@01 r)) (pTaken@575@01 r))
        $Perm.No)
      (pTaken@667@01 r))
    $Perm.No)
  
  :qid |quant-u-7552|))))
(check-sat)
; unsat
(pop) ; 4
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@664@01 r) (Set_union g0@461@01 g1@462@01))
      (img@665@01 r)
      (= r (inv@664@01 r)))
    (= (- $Perm.Write (pTaken@667@01 r)) $Perm.No))
  
  :qid |quant-u-7553|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@481@01 r) (Set_in (inv@480@01 r) g1@462@01))
        (- $Perm.Write (pTaken@576@01 r))
        $Perm.No)
      (pTaken@668@01 r))
    $Perm.No)
  
  :qid |quant-u-7554|))))
(check-sat)
; unsat
(pop) ; 4
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@664@01 r) (Set_union g0@461@01 g1@462@01))
      (img@665@01 r)
      (= r (inv@664@01 r)))
    (= (- (- $Perm.Write (pTaken@667@01 r)) (pTaken@668@01 r)) $Perm.No))
  
  :qid |quant-u-7555|))))
(check-sat)
; unknown
(pop) ; 4
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@592@01 r)
          (and
            (Set_in (inv@591@01 r) (Set_union g0@461@01 g1@462@01))
            (not (= (inv@591@01 r) x0@463@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@669@01 r))
    $Perm.No)
  
  :qid |quant-u-7556|))))
(check-sat)
; unsat
(pop) ; 4
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@664@01 r) (Set_union g0@461@01 g1@462@01))
      (img@665@01 r)
      (= r (inv@664@01 r)))
    (=
      (-
        (- (- $Perm.Write (pTaken@667@01 r)) (pTaken@668@01 r))
        (pTaken@669@01 r))
      $Perm.No))
  
  :qid |quant-u-7557|))))
(check-sat)
