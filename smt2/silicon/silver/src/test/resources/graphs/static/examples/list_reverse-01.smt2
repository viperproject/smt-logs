(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-27 02:55:56
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Edge> 0)
(declare-sort Set<$Snap> 0)
(declare-sort Edge 0)
(declare-sort TrClo 0)
(declare-sort $FVF<next> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Edge>To$Snap (Set<Edge>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Edge> ($Snap) Set<Edge>)
(assert (forall ((x Set<Edge>)) (!
    (= x ($SortWrappers.$SnapToSet<Edge>($SortWrappers.Set<Edge>To$Snap x)))
    :pattern (($SortWrappers.Set<Edge>To$Snap x))
    :qid |$Snap.$SnapToSet<Edge>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Edge>To$Snap($SortWrappers.$SnapToSet<Edge> x)))
    :pattern (($SortWrappers.$SnapToSet<Edge> x))
    :qid |$Snap.Set<Edge>To$SnapToSet<Edge>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.EdgeTo$Snap (Edge) $Snap)
(declare-fun $SortWrappers.$SnapToEdge ($Snap) Edge)
(assert (forall ((x Edge)) (!
    (= x ($SortWrappers.$SnapToEdge($SortWrappers.EdgeTo$Snap x)))
    :pattern (($SortWrappers.EdgeTo$Snap x))
    :qid |$Snap.$SnapToEdgeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.EdgeTo$Snap($SortWrappers.$SnapToEdge x)))
    :pattern (($SortWrappers.$SnapToEdge x))
    :qid |$Snap.EdgeTo$SnapToEdge|
    )))
(declare-fun $SortWrappers.TrCloTo$Snap (TrClo) $Snap)
(declare-fun $SortWrappers.$SnapToTrClo ($Snap) TrClo)
(assert (forall ((x TrClo)) (!
    (= x ($SortWrappers.$SnapToTrClo($SortWrappers.TrCloTo$Snap x)))
    :pattern (($SortWrappers.TrCloTo$Snap x))
    :qid |$Snap.$SnapToTrCloTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TrCloTo$Snap($SortWrappers.$SnapToTrClo x)))
    :pattern (($SortWrappers.$SnapToTrClo x))
    :qid |$Snap.TrCloTo$SnapToTrClo|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<next>To$Snap ($FVF<next>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<next> ($Snap) $FVF<next>)
(assert (forall ((x $FVF<next>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<next>($SortWrappers.$FVF<next>To$Snap x)))
    :pattern (($SortWrappers.$FVF<next>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<next>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<next>To$Snap($SortWrappers.$SnapTo$FVF<next> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<next> x))
    :qid |$Snap.$FVF<next>To$SnapTo$FVF<next>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Edge>) Int)
(declare-const Set_empty Set<Edge>)
(declare-fun Set_in (Edge Set<Edge>) Bool)
(declare-fun Set_singleton (Edge) Set<Edge>)
(declare-fun Set_unionone (Set<Edge> Edge) Set<Edge>)
(declare-fun Set_union (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_intersection (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_difference (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_subset (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_equal (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_skolem_diff (Set<Edge> Set<Edge>) Edge)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun exists_path<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_path_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun inst_uReach<Set<Ref>> (Set<Edge> $Ref) Set<$Ref>)
(declare-fun acyclic_graph<Bool> (Set<Edge>) Bool)
(declare-fun unshared_graph<Bool> (Set<Edge>) Bool)
(declare-fun func_graph<Bool> (Set<Edge>) Bool)
(declare-fun edge<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_pred<Ref> (Edge) $Ref)
(declare-fun edge_succ<Ref> (Edge) $Ref)
(declare-fun create_edge<Edge> ($Ref $Ref) Edge)
(declare-fun create_edge_<Edge> ($Ref $Ref) Edge)
; /field_value_functions_declarations.smt2 [next: Ref]
(declare-fun $FVF.domain_next ($FVF<next>) Set<$Ref>)
(declare-fun $FVF.lookup_next ($FVF<next> $Ref) $Ref)
(declare-fun $FVF.after_next ($FVF<next> $FVF<next>) Bool)
(declare-fun $FVF.loc_next ($Ref $Ref) Bool)
(declare-fun $FVF.perm_next ($FPM $Ref) $Perm)
(declare-const $fvfTOP_next $FVF<next>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $$ ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%limited ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%stateless (Set<$Ref>) Bool)
(declare-fun $$%precondition ($Snap Set<$Ref>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Edge>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Edge)) (!
  (not (Set_in o (as Set_empty  Set<Edge>)))
  :pattern ((Set_in o (as Set_empty  Set<Edge>)))
  )))
(assert (forall ((s Set<Edge>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Edge>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Edge))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Edge)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Edge) (o Edge)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Edge)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (o Edge)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (Set_subset a b)
    (forall ((o Edge)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge<Bool> EG p s) (edge_<Bool> EG p s))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_EdgeSynonim|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge_<Bool> EG p s) (Set_in (create_edge<Edge> p s) EG))
  :pattern ((Set_in (create_edge<Edge> p s) EG))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_Edge|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (v $Ref)) (!
  (= (Set_in v (inst_uReach<Set<Ref>> EG x)) (exists_path<Bool> EG x v))
  :pattern ((Set_in v (inst_uReach<Set<Ref>> EG x)))
  :pattern ((exists_path<Bool> EG x v))
  :qid |prog.ax_instantiation_uReach|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (= (exists_path<Bool> EG start end) (exists_path_<Bool> EG start end))
  :pattern ((exists_path<Bool> EG start end))
  :qid |prog.ax_Alias|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (=
    (exists_path_<Bool> EG start end)
    (or
      (= start end)
      (exists ((w $Ref)) (!
        (and (edge<Bool> EG start w) (exists_path_<Bool> EG w end))
        :pattern ((edge<Bool> EG start w))
        :pattern ((exists_path_<Bool> EG w end))
        ))))
  :pattern ((exists_path<Bool> EG start end))
  :pattern ((edge<Bool> EG start end))
  :qid |prog.ax_ExistsPath|)))
(assert (forall ((EG Set<Edge>) (u $Ref) (v $Ref) (w $Ref)) (!
  (=>
    (and (exists_path_<Bool> EG u w) (exists_path_<Bool> EG w v))
    (exists_path_<Bool> EG u v))
  :pattern ((exists_path<Bool> EG u w) (exists_path<Bool> EG w v))
  :qid |prog.ax_ExistsPathTrans|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (acyclic_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref)) (!
      (or (not (edge<Bool> EG v1 v2)) (not (exists_path<Bool> EG v2 v1)))
      :pattern ((edge<Bool> EG v1 v2))
      :pattern ((exists_path<Bool> EG v2 v1))
      )))
  :pattern ((acyclic_graph<Bool> EG))
  :qid |prog.ax_AcyclicGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (unshared_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v1 v) (edge<Bool> EG v2 v)) (= v1 v2))
      :pattern ((edge<Bool> EG v1 v) (edge<Bool> EG v2 v))
      )))
  :pattern ((unshared_graph<Bool> EG))
  :qid |prog.ax_UnsharedGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (func_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v v1) (edge<Bool> EG v v2)) (= v1 v2))
      :pattern ((edge<Bool> EG v v1) (edge<Bool> EG v v2))
      )))
  :pattern ((func_graph<Bool> EG))
  :qid |prog.ax_FuncGraph|)))
(assert (forall ((p $Ref) (s $Ref)) (!
  (and
    (= (edge_pred<Ref> (create_edge<Edge> p s)) p)
    (= (edge_succ<Ref> (create_edge<Edge> p s)) s))
  :pattern ((create_edge<Edge> p s))
  :qid |prog.edge_injectivity|)))
; /field_value_functions_axioms.smt2 [next: Ref]
(assert (forall ((vs $FVF<next>) (ws $FVF<next>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_next vs) ($FVF.domain_next ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_next vs))
            (= ($FVF.lookup_next vs x) ($FVF.lookup_next ws x)))
          :pattern (($FVF.lookup_next vs x) ($FVF.lookup_next ws x))
          :qid |qp.$FVF<next>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<next>To$Snap vs)
              ($SortWrappers.$FVF<next>To$Snap ws)
              )
    :qid |qp.$FVF<next>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_next pm r))
    :pattern (($FVF.perm_next pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_next f r) true)
    :pattern (($FVF.loc_next f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun inv@4@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@5@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@3@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@6@00 ($Snap Set<$Ref>) $FVF<next>)
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (= ($$%limited s@$ refs@0@00) ($$ s@$ refs@0@00))
  :pattern (($$ s@$ refs@0@00))
  :qid |quant-u-7919|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  ($$%stateless refs@0@00)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-7920|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) (and
    (forall ((n@2@00 $Ref)) (!
      (=>
        (Set_in n@2@00 refs@0@00)
        (and
          (= (inv@4@00 s@$ refs@0@00 n@2@00) n@2@00)
          (img@5@00 s@$ refs@0@00 n@2@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) n@2@00) n@2@00))
      :qid |quant-u-7922|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@5@00 s@$ refs@0@00 r)
          (Set_in (inv@4@00 s@$ refs@0@00 r) refs@0@00))
        (= (inv@4@00 s@$ refs@0@00 r) r))
      :pattern ((inv@4@00 s@$ refs@0@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@3@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef0|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@5@00 s@$ refs@0@00 r)
          (Set_in (inv@4@00 s@$ refs@0@00 r) refs@0@00))
        (=
          ($FVF.lookup_next (sm@6@00 s@$ refs@0@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r)))
      :pattern (($FVF.lookup_next (sm@6@00 s@$ refs@0@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r))
      :qid |qp.fvfValDef1|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r) r)
      :pattern (($FVF.lookup_next (sm@6@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef2|))
    (=>
      ($$%precondition s@$ refs@0@00)
      (forall ((p $Ref) (s $Ref)) (!
        (=
          (and
            (Set_in p refs@0@00)
            (and
              (Set_in s refs@0@00)
              (= ($FVF.lookup_next (sm@6@00 s@$ refs@0@00) p) s)))
          (Set_in (create_edge<Edge> p s) result@1@00))
        :pattern ((create_edge<Edge> p s))
        )))))
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-7924|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-7925|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- link ----------
(declare-const g@0@01 Set<$Ref>)
(declare-const x@1@01 $Ref)
(declare-const y@2@01 $Ref)
(declare-const g@3@01 Set<$Ref>)
(declare-const x@4@01 $Ref)
(declare-const y@5@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@6@01 $Snap)
(assert (= $t@6@01 ($Snap.combine ($Snap.first $t@6@01) ($Snap.second $t@6@01))))
(assert (= ($Snap.first $t@6@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@4@01 g@3@01))
(assert (=
  ($Snap.second $t@6@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@6@01))
    ($Snap.second ($Snap.second $t@6@01)))))
(assert (= ($Snap.first ($Snap.second $t@6@01)) $Snap.unit))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | y@5@01 != Null | live]
; [else-branch: 0 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 3
(push) ; 3
; [else-branch: 0 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (= y@5@01 $Ref.null) (not (= y@5@01 $Ref.null))))
(assert (=> (not (= y@5@01 $Ref.null)) (Set_in y@5@01 g@3@01)))
(assert (=
  ($Snap.second ($Snap.second $t@6@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@6@01))) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@3@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@6@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@01)))) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(declare-const sm@7@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@7@01  $FVF<next>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(assert (not (= x@4@01 $Ref.null)))
(declare-const sm@8@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@8@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@8@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@8@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@8@01  $FVF<next>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(declare-const n@9@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 1 | !(n@9@01 in g@3@01) | live]
; [else-branch: 1 | n@9@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 1 | !(n@9@01 in g@3@01)]
(assert (not (Set_in n@9@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1 | n@9@01 in g@3@01]
(assert (Set_in n@9@01 g@3@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@9@01 g@3@01) (not (Set_in n@9@01 g@3@01))))
(assert (and (Set_in n@9@01 g@3@01) (not (= n@9@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@10@01 ($Ref) $Ref)
(declare-fun img@11@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@9@01 $Ref)) (!
  (=>
    (and (Set_in n@9@01 g@3@01) (not (= n@9@01 x@4@01)))
    (or (Set_in n@9@01 g@3@01) (not (Set_in n@9@01 g@3@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) n@9@01) n@9@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@9@01 $Ref) (n2@9@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@9@01 g@3@01) (not (= n1@9@01 x@4@01)))
      (and (Set_in n2@9@01 g@3@01) (not (= n2@9@01 x@4@01)))
      (= n1@9@01 n2@9@01))
    (= n1@9@01 n2@9@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@9@01 $Ref)) (!
  (=>
    (and (Set_in n@9@01 g@3@01) (not (= n@9@01 x@4@01)))
    (and (= (inv@10@01 n@9@01) n@9@01) (img@11@01 n@9@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) n@9@01) n@9@01))
  :qid |quant-u-7927|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (= (inv@10@01 r) r))
  :pattern ((inv@10@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@9@01 $Ref)) (!
  (=>
    (and (Set_in n@9@01 g@3@01) (not (= n@9@01 x@4@01)))
    (not (= n@9@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) n@9@01) n@9@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@12@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
  :pattern ((inv@10@01 r))
  :qid |quant-u-7928|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
  $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@13@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 2 | !(n$0@13@01 in g@3@01) | live]
; [else-branch: 2 | n$0@13@01 in g@3@01 | live]
(push) ; 4
; [then-branch: 2 | !(n$0@13@01 in g@3@01)]
(assert (not (Set_in n$0@13@01 g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 2 | n$0@13@01 in g@3@01]
(assert (Set_in n$0@13@01 g@3@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@13@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@11@01 n$0@13@01)
        (and
          (Set_in (inv@10@01 n$0@13@01) g@3@01)
          (not (= (inv@10@01 n$0@13@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
(assert (=>
  (Set_in n$0@13@01 g@3@01)
  (and
    (Set_in n$0@13@01 g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))))
(assert (or (Set_in n$0@13@01 g@3@01) (not (Set_in n$0@13@01 g@3@01))))
(push) ; 3
; [then-branch: 3 | n$0@13@01 in g@3@01 && Lookup(next, sm@12@01, n$0@13@01) != Null | live]
; [else-branch: 3 | !(n$0@13@01 in g@3@01 && Lookup(next, sm@12@01, n$0@13@01) != Null) | live]
(push) ; 4
; [then-branch: 3 | n$0@13@01 in g@3@01 && Lookup(next, sm@12@01, n$0@13@01) != Null]
(assert (and
  (Set_in n$0@13@01 g@3@01)
  (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@13@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@11@01 n$0@13@01)
        (and
          (Set_in (inv@10@01 n$0@13@01) g@3@01)
          (not (= (inv@10@01 n$0@13@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(n$0@13@01 in g@3@01 && Lookup(next, sm@12@01, n$0@13@01) != Null)]
(assert (not
  (and
    (Set_in n$0@13@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
(assert (=>
  (and
    (Set_in n$0@13@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))
  (and
    (Set_in n$0@13@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@13@01 g@3@01)
      (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))))
  (and
    (Set_in n$0@13@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@13@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@13@01 g@3@01)
      (and
        (Set_in n$0@13@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01)))
    (or (Set_in n$0@13@01 g@3@01) (not (Set_in n$0@13@01 g@3@01)))
    (=>
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01)))
    (or
      (not
        (and
          (Set_in n$0@13@01 g@3@01)
          (not
            (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))))
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) g@3@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34-aux|)))
(assert (forall ((n$0@13@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@13@01 g@3@01)
      (and
        (Set_in n$0@13@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01)))
    (or (Set_in n$0@13@01 g@3@01) (not (Set_in n$0@13@01 g@3@01)))
    (=>
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01)))
    (or
      (not
        (and
          (Set_in n$0@13@01 g@3@01)
          (not
            (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null))))
      (and
        (Set_in n$0@13@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))))
  :pattern ((Set_in n$0@13@01 g@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34-aux|)))
(assert (forall ((n$0@13@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@13@01 g@3@01)
      (not (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) g@3@01))
  :pattern ((Set_in n$0@13@01 g@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n$0@13@01) n$0@13@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
  $Snap.unit))
; [eval] x.next == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@12@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
    :pattern (($FVF.lookup_next (as sm@12@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) x@4@01) x@4@01))
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@11@01 x@4@01)
        (and
          (Set_in (inv@10@01 x@4@01) g@3@01)
          (not (= (inv@10@01 x@4@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@12@01  $FVF<next>) x@4@01) $Ref.null))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 ($Snap.combine ($Snap.first $t@14@01) ($Snap.second $t@14@01))))
(assert (= ($Snap.first $t@14@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@14@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@14@01))
    ($Snap.second ($Snap.second $t@14@01)))))
(assert (= ($Snap.first ($Snap.second $t@14@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@14@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@14@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
(declare-const sm@15@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@15@01  $FVF<next>) x@4@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@14@01))))))
(declare-const sm@16@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@16@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@16@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@16@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef6|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@16@01  $FVF<next>) x@4@01) x@4@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@14@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
(declare-const n$1@17@01 $Ref)
(push) ; 3
; [eval] (n$1 in g) && n$1 != x
; [eval] (n$1 in g)
(push) ; 4
; [then-branch: 4 | !(n$1@17@01 in g@3@01) | live]
; [else-branch: 4 | n$1@17@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 4 | !(n$1@17@01 in g@3@01)]
(assert (not (Set_in n$1@17@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | n$1@17@01 in g@3@01]
(assert (Set_in n$1@17@01 g@3@01))
; [eval] n$1 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$1@17@01 g@3@01) (not (Set_in n$1@17@01 g@3@01))))
(assert (and (Set_in n$1@17@01 g@3@01) (not (= n$1@17@01 x@4@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@18@01 ($Ref) $Ref)
(declare-fun img@19@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$1@17@01 $Ref)) (!
  (=>
    (and (Set_in n$1@17@01 g@3@01) (not (= n$1@17@01 x@4@01)))
    (or (Set_in n$1@17@01 g@3@01) (not (Set_in n$1@17@01 g@3@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) n$1@17@01) n$1@17@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$11@17@01 $Ref) (n$12@17@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$11@17@01 g@3@01) (not (= n$11@17@01 x@4@01)))
      (and (Set_in n$12@17@01 g@3@01) (not (= n$12@17@01 x@4@01)))
      (= n$11@17@01 n$12@17@01))
    (= n$11@17@01 n$12@17@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@17@01 $Ref)) (!
  (=>
    (and (Set_in n$1@17@01 g@3@01) (not (= n$1@17@01 x@4@01)))
    (and (= (inv@18@01 n$1@17@01) n$1@17@01) (img@19@01 n$1@17@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) n$1@17@01) n$1@17@01))
  :qid |quant-u-7930|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
    (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@17@01 $Ref)) (!
  (=>
    (and (Set_in n$1@17@01 g@3@01) (not (= n$1@17@01 x@4@01)))
    (not (= n$1@17@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) n$1@17@01) n$1@17@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@20@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
  :pattern ((inv@18@01 r))
  :qid |quant-u-7931|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@21@01 $Ref)
(push) ; 3
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 4
; [then-branch: 5 | !(n$2@21@01 in g@3@01) | live]
; [else-branch: 5 | n$2@21@01 in g@3@01 | live]
(push) ; 5
; [then-branch: 5 | !(n$2@21@01 in g@3@01)]
(assert (not (Set_in n$2@21@01 g@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | n$2@21@01 in g@3@01]
(assert (Set_in n$2@21@01 g@3@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@21@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@19@01 n$2@21@01)
        (and
          (Set_in (inv@18@01 n$2@21@01) g@3@01)
          (not (= (inv@18@01 n$2@21@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (Set_in n$2@21@01 g@3@01)
  (and
    (Set_in n$2@21@01 g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))))
(assert (or (Set_in n$2@21@01 g@3@01) (not (Set_in n$2@21@01 g@3@01))))
(push) ; 4
; [then-branch: 6 | n$2@21@01 in g@3@01 && Lookup(next, sm@20@01, n$2@21@01) != Null | live]
; [else-branch: 6 | !(n$2@21@01 in g@3@01 && Lookup(next, sm@20@01, n$2@21@01) != Null) | live]
(push) ; 5
; [then-branch: 6 | n$2@21@01 in g@3@01 && Lookup(next, sm@20@01, n$2@21@01) != Null]
(assert (and
  (Set_in n$2@21@01 g@3@01)
  (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@21@01 x@4@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@19@01 n$2@21@01)
        (and
          (Set_in (inv@18@01 n$2@21@01) g@3@01)
          (not (= (inv@18@01 n$2@21@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 6 | !(n$2@21@01 in g@3@01 && Lookup(next, sm@20@01, n$2@21@01) != Null)]
(assert (not
  (and
    (Set_in n$2@21@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (and
    (Set_in n$2@21@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))
  (and
    (Set_in n$2@21@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@21@01 g@3@01)
      (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))))
  (and
    (Set_in n$2@21@01 g@3@01)
    (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@21@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@21@01 g@3@01)
      (and
        (Set_in n$2@21@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01)))
    (or (Set_in n$2@21@01 g@3@01) (not (Set_in n$2@21@01 g@3@01)))
    (=>
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01)))
    (or
      (not
        (and
          (Set_in n$2@21@01 g@3@01)
          (not
            (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))))
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) g@3@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33-aux|)))
(assert (forall ((n$2@21@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@21@01 g@3@01)
      (and
        (Set_in n$2@21@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01)))
    (or (Set_in n$2@21@01 g@3@01) (not (Set_in n$2@21@01 g@3@01)))
    (=>
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01)))
    (or
      (not
        (and
          (Set_in n$2@21@01 g@3@01)
          (not
            (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null))))
      (and
        (Set_in n$2@21@01 g@3@01)
        (not
          (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))))
  :pattern ((Set_in n$2@21@01 g@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33-aux|)))
(assert (forall ((n$2@21@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@21@01 g@3@01)
      (not (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) g@3@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) g@3@01))
  :pattern ((Set_in n$2@21@01 g@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n$2@21@01) n$2@21@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  $Snap.unit))
; [eval] x.next == y
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@4@01)
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
      (=
        ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) x@4@01) x@4@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@19@01 x@4@01)
        (and
          (Set_in (inv@18@01 x@4@01) g@3@01)
          (not (= (inv@18@01 x@4@01) x@4@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@20@01  $FVF<next>) x@4@01) y@5@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  $Snap.unit))
; [eval] y == null ==> $$(g) == old($$(g))
; [eval] y == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | y@5@01 == Null | live]
; [else-branch: 7 | y@5@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 7 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@22@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@22@01 g@3@01))
(pop) ; 6
(declare-fun inv@23@01 ($Ref) $Ref)
(declare-fun img@24@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@22@01 $Ref) (n2@22@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@22@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n1@22@01) n1@22@01))
      (and
        (Set_in n2@22@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n2@22@01) n2@22@01))
      (= n1@22@01 n2@22@01))
    (= n1@22@01 n2@22@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@22@01 $Ref)) (!
  (=>
    (Set_in n@22@01 g@3@01)
    (and (= (inv@23@01 n@22@01) n@22@01) (img@24@01 n@22@01)))
  :pattern ((Set_in n@22@01 g@3@01))
  :pattern ((inv@23@01 n@22@01))
  :pattern ((img@24@01 n@22@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@24@01 r) (Set_in (inv@23@01 r) g@3@01)) (= (inv@23@01 r) r))
  :pattern ((inv@23@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@23@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
  :pattern ((inv@23@01 r))
  :qid |quant-u-7933|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r) (= r (inv@23@01 r)))
    (>
      (+
        (ite
          (and
            (img@19@01 r)
            (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7934|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@25@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)))
    (=>
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef13|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g@3@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@22@01 $Ref)) (!
  (=>
    (Set_in n@22@01 g@3@01)
    (and (= (inv@23@01 n@22@01) n@22@01) (img@24@01 n@22@01)))
  :pattern ((Set_in n@22@01 g@3@01))
  :pattern ((inv@23@01 n@22@01))
  :pattern ((img@24@01 n@22@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@24@01 r) (Set_in (inv@23@01 r) g@3@01)) (= (inv@23@01 r) r))
  :pattern ((inv@23@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)))
    (=>
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@23@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
    :pattern ((inv@23@01 r))
    :qid |quant-u-7933|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g@3@01)))
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@26@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@26@01 g@3@01))
(pop) ; 6
(declare-fun inv@27@01 ($Ref) $Ref)
(declare-fun img@28@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@26@01 $Ref) (n2@26@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@26@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n1@26@01) n1@26@01))
      (and
        (Set_in n2@26@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n2@26@01) n2@26@01))
      (= n1@26@01 n2@26@01))
    (= n1@26@01 n2@26@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@27@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
  :pattern ((inv@27@01 r))
  :qid |quant-u-7936|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r) (= r (inv@27@01 r)))
    (>
      (+
        (ite
          (and
            (img@11@01 r)
            (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7937|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@29@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>))))
  :qid |qp.fvfDomDef17|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g@3@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>))))
  :qid |qp.fvfDomDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@27@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
    :pattern ((inv@27@01 r))
    :qid |quant-u-7936|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 7 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@22@01 $Ref)) (!
  (=>
    (Set_in n@22@01 g@3@01)
    (and (= (inv@23@01 n@22@01) n@22@01) (img@24@01 n@22@01)))
  :pattern ((Set_in n@22@01 g@3@01))
  :pattern ((inv@23@01 n@22@01))
  :pattern ((img@24@01 n@22@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@24@01 r) (Set_in (inv@23@01 r) g@3@01)) (= (inv@23@01 r) r))
  :pattern ((inv@23@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)))
    (=>
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@23@01 r) g@3@01) (img@24@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>))))
  :qid |qp.fvfDomDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g@3@01) (img@28@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (=>
  (= y@5@01 $Ref.null)
  (and
    (= y@5@01 $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@23@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
      :pattern ((inv@23@01 r))
      :qid |quant-u-7933|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@27@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
      :pattern ((inv@27@01 r))
      :qid |quant-u-7936|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g@3@01))))
; Joined path conditions
(assert (or (not (= y@5@01 $Ref.null)) (= y@5@01 $Ref.null)))
(assert (=>
  (= y@5@01 $Ref.null)
  (Set_equal ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g@3@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g@3@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | y@5@01 != Null | live]
; [else-branch: 8 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 8 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
(declare-const v1@30@01 $Ref)
(declare-const v2@31@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@32@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@32@01 g@3@01))
(pop) ; 7
(declare-fun inv@33@01 ($Ref) $Ref)
(declare-fun img@34@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@32@01 $Ref) (n2@32@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@32@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n1@32@01) n1@32@01))
      (and
        (Set_in n2@32@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n2@32@01) n2@32@01))
      (= n1@32@01 n2@32@01))
    (= n1@32@01 n2@32@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@32@01 $Ref)) (!
  (=>
    (Set_in n@32@01 g@3@01)
    (and (= (inv@33@01 n@32@01) n@32@01) (img@34@01 n@32@01)))
  :pattern ((Set_in n@32@01 g@3@01))
  :pattern ((inv@33@01 n@32@01))
  :pattern ((img@34@01 n@32@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@34@01 r) (Set_in (inv@33@01 r) g@3@01)) (= (inv@33@01 r) r))
  :pattern ((inv@33@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@33@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
  :pattern ((inv@33@01 r))
  :qid |quant-u-7939|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r) (= r (inv@33@01 r)))
    (>
      (+
        (ite
          (and
            (img@19@01 r)
            (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7940|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@35@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r)))
    (=>
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r))
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@32@01 $Ref)) (!
  (=>
    (Set_in n@32@01 g@3@01)
    (and (= (inv@33@01 n@32@01) n@32@01) (img@34@01 n@32@01)))
  :pattern ((Set_in n@32@01 g@3@01))
  :pattern ((inv@33@01 n@32@01))
  :pattern ((img@34@01 n@32@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@34@01 r) (Set_in (inv@33@01 r) g@3@01)) (= (inv@33@01 r) r))
  :pattern ((inv@33@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r)))
    (=>
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r))
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@33@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
    :pattern ((inv@33@01 r))
    :qid |quant-u-7939|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g@3@01)))
; [eval] edge(old($$(g)), v1, v2) || v1 == x && v2 == y
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 6
(declare-const n@36@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@36@01 g@3@01))
(pop) ; 7
(declare-fun inv@37@01 ($Ref) $Ref)
(declare-fun img@38@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@36@01 $Ref) (n2@36@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@36@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n1@36@01) n1@36@01))
      (and
        (Set_in n2@36@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n2@36@01) n2@36@01))
      (= n1@36@01 n2@36@01))
    (= n1@36@01 n2@36@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@37@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
  :pattern ((inv@37@01 r))
  :qid |quant-u-7942|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    (>
      (+
        (ite
          (and
            (img@11@01 r)
            (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7943|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@39@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@37@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
    :pattern ((inv@37@01 r))
    :qid |quant-u-7942|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01)))
(push) ; 6
; [then-branch: 9 | edge[Bool]($$(sm@39@01, g@3@01), v1@30@01, v2@31@01) | live]
; [else-branch: 9 | !(edge[Bool]($$(sm@39@01, g@3@01), v1@30@01, v2@31@01)) | live]
(push) ; 7
; [then-branch: 9 | edge[Bool]($$(sm@39@01, g@3@01), v1@30@01, v2@31@01)]
(assert (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
(pop) ; 7
(push) ; 7
; [else-branch: 9 | !(edge[Bool]($$(sm@39@01, g@3@01), v1@30@01, v2@31@01))]
(assert (not
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01)))
; [eval] v1 == x && v2 == y
; [eval] v1 == x
(push) ; 8
; [then-branch: 10 | v1@30@01 != x@4@01 | live]
; [else-branch: 10 | v1@30@01 == x@4@01 | live]
(push) ; 9
; [then-branch: 10 | v1@30@01 != x@4@01]
(assert (not (= v1@30@01 x@4@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 10 | v1@30@01 == x@4@01]
(assert (= v1@30@01 x@4@01))
; [eval] v2 == y
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (= v1@30@01 x@4@01) (not (= v1@30@01 x@4@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
  (and
    (not
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
    (or (= v1@30@01 x@4@01) (not (= v1@30@01 x@4@01))))))
(assert (or
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@32@01 $Ref)) (!
  (=>
    (Set_in n@32@01 g@3@01)
    (and (= (inv@33@01 n@32@01) n@32@01) (img@34@01 n@32@01)))
  :pattern ((Set_in n@32@01 g@3@01))
  :pattern ((inv@33@01 n@32@01))
  :pattern ((img@34@01 n@32@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@34@01 r) (Set_in (inv@33@01 r) g@3@01)) (= (inv@33@01 r) r))
  :pattern ((inv@33@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r)))
    (=>
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r))
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@33@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
  :pattern ((inv@33@01 r))
  :qid |quant-u-7939|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g@3@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@37@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
  :pattern ((inv@37@01 r))
  :qid |quant-u-7942|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@30@01 $Ref) (v2@31@01 $Ref)) (!
  (and
    (=>
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
      (and
        (not
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
        (or (= v1@30@01 x@4@01) (not (= v1@30@01 x@4@01)))))
    (or
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01)))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@281@27@283@78-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 8 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@32@01 $Ref)) (!
  (=>
    (Set_in n@32@01 g@3@01)
    (and (= (inv@33@01 n@32@01) n@32@01) (img@34@01 n@32@01)))
  :pattern ((Set_in n@32@01 g@3@01))
  :pattern ((inv@33@01 n@32@01))
  :pattern ((img@34@01 n@32@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@34@01 r) (Set_in (inv@33@01 r) g@3@01)) (= (inv@33@01 r) r))
  :pattern ((inv@33@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r)))
    (=>
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r))
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@33@01 r) g@3@01) (img@34@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g@3@01) (img@38@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (not (= y@5@01 $Ref.null))
  (and
    (not (= y@5@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@33@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
      :pattern ((inv@33@01 r))
      :qid |quant-u-7939|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@37@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
      :pattern ((inv@37@01 r))
      :qid |quant-u-7942|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01)
    (forall ((v1@30@01 $Ref) (v2@31@01 $Ref)) (!
      (and
        (=>
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
          (and
            (not
              (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
            (or (= v1@30@01 x@4@01) (not (= v1@30@01 x@4@01)))))
        (or
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01)))
      :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@281@27@283@78-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@5@01 $Ref.null))
  (forall ((v1@30@01 $Ref) (v2@31@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01)
      (or
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01)
        (and (= v1@30@01 x@4@01) (= v2@31@01 y@5@01))))
    :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@3@01) v1@30@01 v2@31@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@281@27@283@78|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
; [eval] y != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= y@5@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= y@5@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 11 | y@5@01 != Null | live]
; [else-branch: 11 | y@5@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 11 | y@5@01 != Null]
(assert (not (= y@5@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
(declare-const v1@40@01 $Ref)
(declare-const v2@41@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 12 | v1@40@01 != v2@41@01 | live]
; [else-branch: 12 | v1@40@01 == v2@41@01 | live]
(push) ; 7
; [then-branch: 12 | v1@40@01 != v2@41@01]
(assert (not (= v1@40@01 v2@41@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@42@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@42@01 g@3@01))
(pop) ; 9
(declare-fun inv@43@01 ($Ref) $Ref)
(declare-fun img@44@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@42@01 $Ref) (n2@42@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@42@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n1@42@01) n1@42@01))
      (and
        (Set_in n2@42@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) n2@42@01) n2@42@01))
      (= n1@42@01 n2@42@01))
    (= n1@42@01 n2@42@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@43@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
  :pattern ((inv@43@01 r))
  :qid |quant-u-7945|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r) (= r (inv@43@01 r)))
    (>
      (+
        (ite
          (and
            (img@19@01 r)
            (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7946|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@45@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef29|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@3@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@43@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
    :pattern ((inv@43@01 r))
    :qid |quant-u-7945|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@3@01)))
; [eval] exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@46@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@46@01 g@3@01))
(pop) ; 9
(declare-fun inv@47@01 ($Ref) $Ref)
(declare-fun img@48@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@46@01 $Ref) (n2@46@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@46@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n1@46@01) n1@46@01))
      (and
        (Set_in n2@46@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) n2@46@01) n2@46@01))
      (= n1@46@01 n2@46@01))
    (= n1@46@01 n2@46@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@46@01 $Ref)) (!
  (=>
    (Set_in n@46@01 g@3@01)
    (and (= (inv@47@01 n@46@01) n@46@01) (img@48@01 n@46@01)))
  :pattern ((Set_in n@46@01 g@3@01))
  :pattern ((inv@47@01 n@46@01))
  :pattern ((img@48@01 n@46@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@48@01 r) (Set_in (inv@47@01 r) g@3@01)) (= (inv@47@01 r) r))
  :pattern ((inv@47@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@47@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
  :pattern ((inv@47@01 r))
  :qid |quant-u-7948|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r) (= r (inv@47@01 r)))
    (>
      (+
        (ite
          (and
            (img@11@01 r)
            (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7949|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@49@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>)))
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r)))
    (=>
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r))
      (Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>))))
  :qid |qp.fvfDomDef33|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@49@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@49@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@46@01 $Ref)) (!
  (=>
    (Set_in n@46@01 g@3@01)
    (and (= (inv@47@01 n@46@01) n@46@01) (img@48@01 n@46@01)))
  :pattern ((Set_in n@46@01 g@3@01))
  :pattern ((inv@47@01 n@46@01))
  :pattern ((img@48@01 n@46@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@48@01 r) (Set_in (inv@47@01 r) g@3@01)) (= (inv@47@01 r) r))
  :pattern ((inv@47@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>)))
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r)))
    (=>
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r))
      (Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>))))
  :qid |qp.fvfDomDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@49@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@49@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@47@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
    :pattern ((inv@47@01 r))
    :qid |quant-u-7948|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01)))
(push) ; 8
; [then-branch: 13 | exists_path[Bool]($$(sm@49@01, g@3@01), v1@40@01, v2@41@01) | live]
; [else-branch: 13 | !(exists_path[Bool]($$(sm@49@01, g@3@01), v1@40@01, v2@41@01)) | live]
(push) ; 9
; [then-branch: 13 | exists_path[Bool]($$(sm@49@01, g@3@01), v1@40@01, v2@41@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
(pop) ; 9
(push) ; 9
; [else-branch: 13 | !(exists_path[Bool]($$(sm@49@01, g@3@01), v1@40@01, v2@41@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01)))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@50@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@50@01 g@3@01))
(pop) ; 11
(declare-fun inv@51@01 ($Ref) $Ref)
(declare-fun img@52@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@53@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@50@01 $Ref) (n2@50@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@50@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@53@01  $FVF<next>) n1@50@01) n1@50@01))
      (and
        (Set_in n2@50@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@53@01  $FVF<next>) n2@50@01) n2@50@01))
      (= n1@50@01 n2@50@01))
    (= n1@50@01 n2@50@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@51@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@53@01  $FVF<next>) r) r))
  :pattern ((inv@51@01 r))
  :qid |quant-u-7951|)))
(push) ; 11
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r) (= r (inv@51@01 r)))
    (>
      (+
        (ite
          (and
            (img@11@01 r)
            (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7952|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const sm@54@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@51@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@53@01  $FVF<next>) r) r))
    :pattern ((inv@51@01 r))
    :qid |quant-u-7951|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01)))
(push) ; 10
; [then-branch: 14 | !(exists_path[Bool]($$(sm@54@01, g@3@01), v1@40@01, x@4@01)) | live]
; [else-branch: 14 | exists_path[Bool]($$(sm@54@01, g@3@01), v1@40@01, x@4@01) | live]
(push) ; 11
; [then-branch: 14 | !(exists_path[Bool]($$(sm@54@01, g@3@01), v1@40@01, x@4@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 14 | exists_path[Bool]($$(sm@54@01, g@3@01), v1@40@01, x@4@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01))
; [eval] exists_path(old($$(g)), y, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 12
(declare-const n@55@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@55@01 g@3@01))
(pop) ; 13
(declare-fun inv@56@01 ($Ref) $Ref)
(declare-fun img@57@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@58@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@55@01 $Ref) (n2@55@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@55@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@58@01  $FVF<next>) n1@55@01) n1@55@01))
      (and
        (Set_in n2@55@01 g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@58@01  $FVF<next>) n2@55@01) n2@55@01))
      (= n1@55@01 n2@55@01))
    (= n1@55@01 n2@55@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@55@01 $Ref)) (!
  (=>
    (Set_in n@55@01 g@3@01)
    (and (= (inv@56@01 n@55@01) n@55@01) (img@57@01 n@55@01)))
  :pattern ((Set_in n@55@01 g@3@01))
  :pattern ((inv@56@01 n@55@01))
  :pattern ((img@57@01 n@55@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@57@01 r) (Set_in (inv@56@01 r) g@3@01)) (= (inv@56@01 r) r))
  :pattern ((inv@56@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@56@01 r) g@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@58@01  $FVF<next>) r) r))
  :pattern ((inv@56@01 r))
  :qid |quant-u-7954|)))
(push) ; 13
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r) (= r (inv@56@01 r)))
    (>
      (+
        (ite
          (and
            (img@11@01 r)
            (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@4@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7955|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const sm@59@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)))
    (=>
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@59@01  $FVF<next>)) g@3@01))
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@55@01 $Ref)) (!
  (=>
    (Set_in n@55@01 g@3@01)
    (and (= (inv@56@01 n@55@01) n@55@01) (img@57@01 n@55@01)))
  :pattern ((Set_in n@55@01 g@3@01))
  :pattern ((inv@56@01 n@55@01))
  :pattern ((img@57@01 n@55@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@57@01 r) (Set_in (inv@56@01 r) g@3@01)) (= (inv@56@01 r) r))
  :pattern ((inv@56@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)))
    (=>
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@56@01 r) g@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@58@01  $FVF<next>) r) r))
    :pattern ((inv@56@01 r))
    :qid |quant-u-7954|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@59@01  $FVF<next>)) g@3@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@55@01 $Ref)) (!
  (=>
    (Set_in n@55@01 g@3@01)
    (and (= (inv@56@01 n@55@01) n@55@01) (img@57@01 n@55@01)))
  :pattern ((Set_in n@55@01 g@3@01))
  :pattern ((inv@56@01 n@55@01))
  :pattern ((img@57@01 n@55@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@57@01 r) (Set_in (inv@56@01 r) g@3@01)) (= (inv@56@01 r) r))
  :pattern ((inv@56@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)))
    (=>
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@56@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@58@01  $FVF<next>) r) r))
      :pattern ((inv@56@01 r))
      :qid |quant-u-7954|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@59@01  $FVF<next>)) g@3@01))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@55@01 $Ref)) (!
  (=>
    (Set_in n@55@01 g@3@01)
    (and (= (inv@56@01 n@55@01) n@55@01) (img@57@01 n@55@01)))
  :pattern ((Set_in n@55@01 g@3@01))
  :pattern ((inv@56@01 n@55@01))
  :pattern ((img@57@01 n@55@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@57@01 r) (Set_in (inv@56@01 r) g@3@01)) (= (inv@56@01 r) r))
  :pattern ((inv@56@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)))
    (=>
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
  (and
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@51@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@53@01  $FVF<next>) r) r))
      :pattern ((inv@51@01 r))
      :qid |quant-u-7951|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@56@01 r) g@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@58@01  $FVF<next>) r) r))
          :pattern ((inv@56@01 r))
          :qid |quant-u-7954|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@59@01  $FVF<next>)) g@3@01)))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01))))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 12 | v1@40@01 == v2@41@01]
(assert (= v1@40@01 v2@41@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((n@46@01 $Ref)) (!
  (=>
    (Set_in n@46@01 g@3@01)
    (and (= (inv@47@01 n@46@01) n@46@01) (img@48@01 n@46@01)))
  :pattern ((Set_in n@46@01 g@3@01))
  :pattern ((inv@47@01 n@46@01))
  :pattern ((img@48@01 n@46@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@48@01 r) (Set_in (inv@47@01 r) g@3@01)) (= (inv@47@01 r) r))
  :pattern ((inv@47@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>)))
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r)))
    (=>
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r))
      (Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>))))
  :qid |qp.fvfDomDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@49@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@49@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@55@01 $Ref)) (!
  (=>
    (Set_in n@55@01 g@3@01)
    (and (= (inv@56@01 n@55@01) n@55@01) (img@57@01 n@55@01)))
  :pattern ((Set_in n@55@01 g@3@01))
  :pattern ((inv@56@01 n@55@01))
  :pattern ((img@57@01 n@55@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@57@01 r) (Set_in (inv@56@01 r) g@3@01)) (= (inv@56@01 r) r))
  :pattern ((inv@56@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)))
    (=>
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (=>
  (not (= v1@40@01 v2@41@01))
  (and
    (not (= v1@40@01 v2@41@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@43@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
      :pattern ((inv@43@01 r))
      :qid |quant-u-7945|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@3@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@47@01 r) g@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
      :pattern ((inv@47@01 r))
      :qid |quant-u-7948|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
      (and
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@51@01 r) g@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@53@01  $FVF<next>) r) r))
          :pattern ((inv@51@01 r))
          :qid |quant-u-7951|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@56@01 r) g@3@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@58@01  $FVF<next>) r) r))
              :pattern ((inv@56@01 r))
              :qid |quant-u-7954|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@59@01  $FVF<next>)) g@3@01)))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)))))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01)))))
; Joined path conditions
(assert (or (= v1@40@01 v2@41@01) (not (= v1@40@01 v2@41@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((n@46@01 $Ref)) (!
  (=>
    (Set_in n@46@01 g@3@01)
    (and (= (inv@47@01 n@46@01) n@46@01) (img@48@01 n@46@01)))
  :pattern ((Set_in n@46@01 g@3@01))
  :pattern ((inv@47@01 n@46@01))
  :pattern ((img@48@01 n@46@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@48@01 r) (Set_in (inv@47@01 r) g@3@01)) (= (inv@47@01 r) r))
  :pattern ((inv@47@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>)))
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r)))
    (=>
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r))
      (Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>))))
  :qid |qp.fvfDomDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@49@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@49@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@55@01 $Ref)) (!
  (=>
    (Set_in n@55@01 g@3@01)
    (and (= (inv@56@01 n@55@01) n@55@01) (img@57@01 n@55@01)))
  :pattern ((Set_in n@55@01 g@3@01))
  :pattern ((inv@56@01 n@55@01))
  :pattern ((img@57@01 n@55@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@57@01 r) (Set_in (inv@56@01 r) g@3@01)) (= (inv@56@01 r) r))
  :pattern ((inv@56@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)))
    (=>
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@40@01 $Ref) (v2@41@01 $Ref)) (!
  (and
    (=>
      (not (= v1@40@01 v2@41@01))
      (and
        (not (= v1@40@01 v2@41@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@43@01 r) g@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
          :pattern ((inv@43@01 r))
          :qid |quant-u-7945|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@3@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@47@01 r) g@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
          :pattern ((inv@47@01 r))
          :qid |quant-u-7948|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@51@01 r) g@3@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@53@01  $FVF<next>) r) r))
              :pattern ((inv@51@01 r))
              :qid |quant-u-7951|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@56@01 r) g@3@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@58@01  $FVF<next>) r) r))
                  :pattern ((inv@56@01 r))
                  :qid |quant-u-7954|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@59@01  $FVF<next>)) g@3@01)))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)))))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))))
    (or (= v1@40@01 v2@41@01) (not (= v1@40@01 v2@41@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@284@28@288@117-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 11 | y@5@01 == Null]
(assert (= y@5@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@42@01 $Ref)) (!
  (=>
    (Set_in n@42@01 g@3@01)
    (and (= (inv@43@01 n@42@01) n@42@01) (img@44@01 n@42@01)))
  :pattern ((Set_in n@42@01 g@3@01))
  :pattern ((inv@43@01 n@42@01))
  :pattern ((img@44@01 n@42@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@44@01 r) (Set_in (inv@43@01 r) g@3@01)) (= (inv@43@01 r) r))
  :pattern ((inv@43@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)))
    (=>
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@15@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@15@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@43@01 r) g@3@01) (img@44@01 r))
      (and
        (img@19@01 r)
        (and (Set_in (inv@18@01 r) g@3@01) (not (= (inv@18@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@15@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((n@46@01 $Ref)) (!
  (=>
    (Set_in n@46@01 g@3@01)
    (and (= (inv@47@01 n@46@01) n@46@01) (img@48@01 n@46@01)))
  :pattern ((Set_in n@46@01 g@3@01))
  :pattern ((inv@47@01 n@46@01))
  :pattern ((img@48@01 n@46@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@48@01 r) (Set_in (inv@47@01 r) g@3@01)) (= (inv@47@01 r) r))
  :pattern ((inv@47@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>)))
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r)))
    (=>
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r))
      (Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@49@01  $FVF<next>))))
  :qid |qp.fvfDomDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@49@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@47@01 r) g@3@01) (img@48@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@49@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@49@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@53@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@53@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((n@50@01 $Ref)) (!
  (=>
    (Set_in n@50@01 g@3@01)
    (and (= (inv@51@01 n@50@01) n@50@01) (img@52@01 n@50@01)))
  :pattern ((Set_in n@50@01 g@3@01))
  :pattern ((inv@51@01 n@50@01))
  :pattern ((img@52@01 n@50@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@52@01 r) (Set_in (inv@51@01 r) g@3@01)) (= (inv@51@01 r) r))
  :pattern ((inv@51@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)))
    (=>
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@51@01 r) g@3@01) (img@52@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@4@01)
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@11@01 r)
      (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01))))
    (=
      ($FVF.lookup_next (as sm@58@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@58@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (forall ((n@55@01 $Ref)) (!
  (=>
    (Set_in n@55@01 g@3@01)
    (and (= (inv@56@01 n@55@01) n@55@01) (img@57@01 n@55@01)))
  :pattern ((Set_in n@55@01 g@3@01))
  :pattern ((inv@56@01 n@55@01))
  :pattern ((img@57@01 n@55@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@57@01 r) (Set_in (inv@56@01 r) g@3@01)) (= (inv@56@01 r) r))
  :pattern ((inv@56@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)))
    (=>
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@59@01  $FVF<next>))))
  :qid |qp.fvfDomDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r)) (= r x@4@01))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@7@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@7@01  $FVF<next>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@56@01 r) g@3@01) (img@57@01 r))
      (and
        (img@11@01 r)
        (and (Set_in (inv@10@01 r) g@3@01) (not (= (inv@10@01 r) x@4@01)))))
    (=
      ($FVF.lookup_next (as sm@59@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@7@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@59@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (=>
  (not (= y@5@01 $Ref.null))
  (and
    (not (= y@5@01 $Ref.null))
    (forall ((v1@40@01 $Ref) (v2@41@01 $Ref)) (!
      (and
        (=>
          (not (= v1@40@01 v2@41@01))
          (and
            (not (= v1@40@01 v2@41@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@43@01 r) g@3@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@20@01  $FVF<next>) r) r))
              :pattern ((inv@43@01 r))
              :qid |quant-u-7945|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@3@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@47@01 r) g@3@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@12@01  $FVF<next>) r) r))
              :pattern ((inv@47@01 r))
              :qid |quant-u-7948|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01)
            (=>
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
              (and
                (not
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@51@01 r) g@3@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@53@01  $FVF<next>) r) r))
                  :pattern ((inv@51@01 r))
                  :qid |quant-u-7951|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01)
                (=>
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
                  (and
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@56@01 r) g@3@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@58@01  $FVF<next>) r) r))
                      :pattern ((inv@56@01 r))
                      :qid |quant-u-7954|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@59@01  $FVF<next>)) g@3@01)))
                (or
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)))))
            (or
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))))
        (or (= v1@40@01 v2@41@01) (not (= v1@40@01 v2@41@01))))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@284@28@288@117-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@5@01 $Ref.null))
  (forall ((v1@40@01 $Ref) (v2@41@01 $Ref)) (!
    (=>
      (not (= v1@40@01 v2@41@01))
      (=
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01)
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@49@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@3@01) v1@40@01 x@4@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@59@01  $FVF<next>)) g@3@01) y@5@01 v2@41@01)))))
    :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@3@01) v1@40@01 v2@41@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@284@28@288@117|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- unlink ----------
(declare-const g@60@01 Set<$Ref>)
(declare-const x@61@01 $Ref)
(declare-const g@62@01 Set<$Ref>)
(declare-const x@63@01 $Ref)
(push) ; 1
(declare-const $t@64@01 $Snap)
(assert (= $t@64@01 ($Snap.combine ($Snap.first $t@64@01) ($Snap.second $t@64@01))))
(assert (= ($Snap.first $t@64@01) $Snap.unit))
; [eval] (x in g)
(assert (Set_in x@63@01 g@62@01))
(assert (=
  ($Snap.second $t@64@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@64@01))
    ($Snap.second ($Snap.second $t@64@01)))))
(assert (= ($Snap.first ($Snap.second $t@64@01)) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@62@01)))
(assert (=
  ($Snap.second ($Snap.second $t@64@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@64@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@64@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@64@01))) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@64@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@64@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))))
(declare-const sm@65@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@65@01  $FVF<next>) x@63@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))))
(assert (not (= x@63@01 $Ref.null)))
(declare-const sm@66@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@66@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@66@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@66@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef49|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@66@01  $FVF<next>) x@63@01) x@63@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01))))))))
(declare-const n@67@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 3
; [then-branch: 15 | !(n@67@01 in g@62@01) | live]
; [else-branch: 15 | n@67@01 in g@62@01 | live]
(push) ; 4
; [then-branch: 15 | !(n@67@01 in g@62@01)]
(assert (not (Set_in n@67@01 g@62@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 15 | n@67@01 in g@62@01]
(assert (Set_in n@67@01 g@62@01))
; [eval] n != x
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@67@01 g@62@01) (not (Set_in n@67@01 g@62@01))))
(assert (and (Set_in n@67@01 g@62@01) (not (= n@67@01 x@63@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@68@01 ($Ref) $Ref)
(declare-fun img@69@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@67@01 $Ref)) (!
  (=>
    (and (Set_in n@67@01 g@62@01) (not (= n@67@01 x@63@01)))
    (or (Set_in n@67@01 g@62@01) (not (Set_in n@67@01 g@62@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) n@67@01) n@67@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@67@01 $Ref) (n2@67@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@67@01 g@62@01) (not (= n1@67@01 x@63@01)))
      (and (Set_in n2@67@01 g@62@01) (not (= n2@67@01 x@63@01)))
      (= n1@67@01 n2@67@01))
    (= n1@67@01 n2@67@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@67@01 $Ref)) (!
  (=>
    (and (Set_in n@67@01 g@62@01) (not (= n@67@01 x@63@01)))
    (and (= (inv@68@01 n@67@01) n@67@01) (img@69@01 n@67@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) n@67@01) n@67@01))
  :qid |quant-u-7957|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (= (inv@68@01 r) r))
  :pattern ((inv@68@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@67@01 $Ref)) (!
  (=>
    (and (Set_in n@67@01 g@62@01) (not (= n@67@01 x@63@01)))
    (not (= n@67@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) n@67@01) n@67@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@70@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
  :pattern ((inv@68@01 r))
  :qid |quant-u-7958|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))
  $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@71@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 16 | !(n$0@71@01 in g@62@01) | live]
; [else-branch: 16 | n$0@71@01 in g@62@01 | live]
(push) ; 4
; [then-branch: 16 | !(n$0@71@01 in g@62@01)]
(assert (not (Set_in n$0@71@01 g@62@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 16 | n$0@71@01 in g@62@01]
(assert (Set_in n$0@71@01 g@62@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@63@01)
      (=
        ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
      (=
        ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef52|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) n$0@71@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@71@01 x@63@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@69@01 n$0@71@01)
        (and
          (Set_in (inv@68@01 n$0@71@01) g@62@01)
          (not (= (inv@68@01 n$0@71@01) x@63@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef52|)))
(assert (=>
  (Set_in n$0@71@01 g@62@01)
  (and
    (Set_in n$0@71@01 g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) n$0@71@01))))
(assert (or (Set_in n$0@71@01 g@62@01) (not (Set_in n$0@71@01 g@62@01))))
(push) ; 3
; [then-branch: 17 | n$0@71@01 in g@62@01 && Lookup(next, sm@70@01, n$0@71@01) != Null | live]
; [else-branch: 17 | !(n$0@71@01 in g@62@01 && Lookup(next, sm@70@01, n$0@71@01) != Null) | live]
(push) ; 4
; [then-branch: 17 | n$0@71@01 in g@62@01 && Lookup(next, sm@70@01, n$0@71@01) != Null]
(assert (and
  (Set_in n$0@71@01 g@62@01)
  (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@63@01)
      (=
        ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
      (=
        ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef52|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) n$0@71@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@71@01 x@63@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@69@01 n$0@71@01)
        (and
          (Set_in (inv@68@01 n$0@71@01) g@62@01)
          (not (= (inv@68@01 n$0@71@01) x@63@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 17 | !(n$0@71@01 in g@62@01 && Lookup(next, sm@70@01, n$0@71@01) != Null)]
(assert (not
  (and
    (Set_in n$0@71@01 g@62@01)
    (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef52|)))
(assert (=>
  (and
    (Set_in n$0@71@01 g@62@01)
    (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null)))
  (and
    (Set_in n$0@71@01 g@62@01)
    (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) n$0@71@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@71@01 g@62@01)
      (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null))))
  (and
    (Set_in n$0@71@01 g@62@01)
    (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef52|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@71@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@71@01 g@62@01)
      (and
        (Set_in n$0@71@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) n$0@71@01)))
    (or (Set_in n$0@71@01 g@62@01) (not (Set_in n$0@71@01 g@62@01)))
    (=>
      (and
        (Set_in n$0@71@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null)))
      (and
        (Set_in n$0@71@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) n$0@71@01)))
    (or
      (not
        (and
          (Set_in n$0@71@01 g@62@01)
          (not
            (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null))))
      (and
        (Set_in n$0@71@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) g@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34-aux|)))
(assert (forall ((n$0@71@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@71@01 g@62@01)
      (and
        (Set_in n$0@71@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) n$0@71@01)))
    (or (Set_in n$0@71@01 g@62@01) (not (Set_in n$0@71@01 g@62@01)))
    (=>
      (and
        (Set_in n$0@71@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null)))
      (and
        (Set_in n$0@71@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) n$0@71@01)))
    (or
      (not
        (and
          (Set_in n$0@71@01 g@62@01)
          (not
            (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null))))
      (and
        (Set_in n$0@71@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null)))))
  :pattern ((Set_in n$0@71@01 g@62@01) ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) n$0@71@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34-aux|)))
(assert (forall ((n$0@71@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@71@01 g@62@01)
      (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) g@62@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) g@62@01))
  :pattern ((Set_in n$0@71@01 g@62@01) ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n$0@71@01) n$0@71@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 ($Snap.combine ($Snap.first $t@72@01) ($Snap.second $t@72@01))))
(assert (= ($Snap.first $t@72@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@72@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@72@01))
    ($Snap.second ($Snap.second $t@72@01)))))
(assert (= ($Snap.first ($Snap.second $t@72@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@72@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@72@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
(declare-const sm@73@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@73@01  $FVF<next>) x@63@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))
(declare-const sm@74@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@74@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@74@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@74@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef54|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@74@01  $FVF<next>) x@63@01) x@63@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@72@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
(declare-const n$1@75@01 $Ref)
(push) ; 3
; [eval] (n$1 in g) && n$1 != x
; [eval] (n$1 in g)
(push) ; 4
; [then-branch: 18 | !(n$1@75@01 in g@62@01) | live]
; [else-branch: 18 | n$1@75@01 in g@62@01 | live]
(push) ; 5
; [then-branch: 18 | !(n$1@75@01 in g@62@01)]
(assert (not (Set_in n$1@75@01 g@62@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | n$1@75@01 in g@62@01]
(assert (Set_in n$1@75@01 g@62@01))
; [eval] n$1 != x
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$1@75@01 g@62@01) (not (Set_in n$1@75@01 g@62@01))))
(assert (and (Set_in n$1@75@01 g@62@01) (not (= n$1@75@01 x@63@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@76@01 ($Ref) $Ref)
(declare-fun img@77@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$1@75@01 $Ref)) (!
  (=>
    (and (Set_in n$1@75@01 g@62@01) (not (= n$1@75@01 x@63@01)))
    (or (Set_in n$1@75@01 g@62@01) (not (Set_in n$1@75@01 g@62@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) n$1@75@01) n$1@75@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$11@75@01 $Ref) (n$12@75@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$11@75@01 g@62@01) (not (= n$11@75@01 x@63@01)))
      (and (Set_in n$12@75@01 g@62@01) (not (= n$12@75@01 x@63@01)))
      (= n$11@75@01 n$12@75@01))
    (= n$11@75@01 n$12@75@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@75@01 $Ref)) (!
  (=>
    (and (Set_in n$1@75@01 g@62@01) (not (= n$1@75@01 x@63@01)))
    (and (= (inv@76@01 n$1@75@01) n$1@75@01) (img@77@01 n$1@75@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) n$1@75@01) n$1@75@01))
  :qid |quant-u-7960|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@77@01 r)
      (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
    (= (inv@76@01 r) r))
  :pattern ((inv@76@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@75@01 $Ref)) (!
  (=>
    (and (Set_in n$1@75@01 g@62@01) (not (= n$1@75@01 x@63@01)))
    (not (= n$1@75@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) n$1@75@01) n$1@75@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@78@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@77@01 r)
      (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
  :pattern ((inv@76@01 r))
  :qid |quant-u-7961|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@79@01 $Ref)
(push) ; 3
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 4
; [then-branch: 19 | !(n$2@79@01 in g@62@01) | live]
; [else-branch: 19 | n$2@79@01 in g@62@01 | live]
(push) ; 5
; [then-branch: 19 | !(n$2@79@01 in g@62@01)]
(assert (not (Set_in n$2@79@01 g@62@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 19 | n$2@79@01 in g@62@01]
(assert (Set_in n$2@79@01 g@62@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@63@01)
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef57|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@79@01 x@63@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@77@01 n$2@79@01)
        (and
          (Set_in (inv@76@01 n$2@79@01) g@62@01)
          (not (= (inv@76@01 n$2@79@01) x@63@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@77@01 r)
      (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef57|)))
(assert (=>
  (Set_in n$2@79@01 g@62@01)
  (and
    (Set_in n$2@79@01 g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))))
(assert (or (Set_in n$2@79@01 g@62@01) (not (Set_in n$2@79@01 g@62@01))))
(push) ; 4
; [then-branch: 20 | n$2@79@01 in g@62@01 && Lookup(next, sm@78@01, n$2@79@01) != Null | live]
; [else-branch: 20 | !(n$2@79@01 in g@62@01 && Lookup(next, sm@78@01, n$2@79@01) != Null) | live]
(push) ; 5
; [then-branch: 20 | n$2@79@01 in g@62@01 && Lookup(next, sm@78@01, n$2@79@01) != Null]
(assert (and
  (Set_in n$2@79@01 g@62@01)
  (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@63@01)
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef57|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@79@01 x@63@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@77@01 n$2@79@01)
        (and
          (Set_in (inv@76@01 n$2@79@01) g@62@01)
          (not (= (inv@76@01 n$2@79@01) x@63@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 20 | !(n$2@79@01 in g@62@01 && Lookup(next, sm@78@01, n$2@79@01) != Null)]
(assert (not
  (and
    (Set_in n$2@79@01 g@62@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@77@01 r)
      (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef57|)))
(assert (=>
  (and
    (Set_in n$2@79@01 g@62@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
  (and
    (Set_in n$2@79@01 g@62@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@79@01 g@62@01)
      (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
  (and
    (Set_in n$2@79@01 g@62@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@77@01 r)
      (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef57|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@79@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@79@01 g@62@01)
      (and
        (Set_in n$2@79@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or (Set_in n$2@79@01 g@62@01) (not (Set_in n$2@79@01 g@62@01)))
    (=>
      (and
        (Set_in n$2@79@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
      (and
        (Set_in n$2@79@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or
      (not
        (and
          (Set_in n$2@79@01 g@62@01)
          (not
            (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
      (and
        (Set_in n$2@79@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) g@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33-aux|)))
(assert (forall ((n$2@79@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@79@01 g@62@01)
      (and
        (Set_in n$2@79@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or (Set_in n$2@79@01 g@62@01) (not (Set_in n$2@79@01 g@62@01)))
    (=>
      (and
        (Set_in n$2@79@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
      (and
        (Set_in n$2@79@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or
      (not
        (and
          (Set_in n$2@79@01 g@62@01)
          (not
            (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
      (and
        (Set_in n$2@79@01 g@62@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
  :pattern ((Set_in n$2@79@01 g@62@01) ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33-aux|)))
(assert (forall ((n$2@79@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@79@01 g@62@01)
      (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) g@62@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) g@62@01))
  :pattern ((Set_in n$2@79@01 g@62@01) ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
  $Snap.unit))
; [eval] x.next == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@63@01)
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef57|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) x@63@01) x@63@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@77@01 x@63@01)
        (and
          (Set_in (inv@76@01 x@63@01) g@62@01)
          (not (= (inv@76@01 x@63@01) x@63@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) x@63@01) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
  $Snap.unit))
; [eval] old(x.next) == null ==> $$(g) == old($$(g))
; [eval] old(x.next) == null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@63@01)
      (=
        ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
      (=
        ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef52|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) x@63@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@69@01 x@63@01)
        (and
          (Set_in (inv@68@01 x@63@01) g@62@01)
          (not (= (inv@68@01 x@63@01) x@63@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | Lookup(next, sm@70@01, x@63@01) == Null | live]
; [else-branch: 21 | Lookup(next, sm@70@01, x@63@01) != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 21 | Lookup(next, sm@70@01, x@63@01) == Null]
(assert (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@80@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@80@01 g@62@01))
(pop) ; 6
(declare-fun inv@81@01 ($Ref) $Ref)
(declare-fun img@82@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@80@01 $Ref) (n2@80@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@80@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n1@80@01) n1@80@01))
      (and
        (Set_in n2@80@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n2@80@01) n2@80@01))
      (= n1@80@01 n2@80@01))
    (= n1@80@01 n2@80@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@80@01 $Ref)) (!
  (=>
    (Set_in n@80@01 g@62@01)
    (and (= (inv@81@01 n@80@01) n@80@01) (img@82@01 n@80@01)))
  :pattern ((Set_in n@80@01 g@62@01))
  :pattern ((inv@81@01 n@80@01))
  :pattern ((img@82@01 n@80@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@82@01 r) (Set_in (inv@81@01 r) g@62@01)) (= (inv@81@01 r) r))
  :pattern ((inv@81@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@81@01 r) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
  :pattern ((inv@81@01 r))
  :qid |quant-u-7963|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r) (= r (inv@81@01 r)))
    (>
      (+
        (ite
          (and
            (img@77@01 r)
            (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@63@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7964|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@83@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@83@01  $FVF<next>)))
      (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r)))
    (=>
      (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r))
      (Set_in r ($FVF.domain_next (as sm@83@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@83@01  $FVF<next>))))
  :qid |qp.fvfDomDef61|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@83@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@83@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@83@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@83@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef59|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@83@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef60|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@83@01  $FVF<next>)) g@62@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@80@01 $Ref)) (!
  (=>
    (Set_in n@80@01 g@62@01)
    (and (= (inv@81@01 n@80@01) n@80@01) (img@82@01 n@80@01)))
  :pattern ((Set_in n@80@01 g@62@01))
  :pattern ((inv@81@01 n@80@01))
  :pattern ((img@82@01 n@80@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@82@01 r) (Set_in (inv@81@01 r) g@62@01)) (= (inv@81@01 r) r))
  :pattern ((inv@81@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@83@01  $FVF<next>)))
      (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r)))
    (=>
      (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r))
      (Set_in r ($FVF.domain_next (as sm@83@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@83@01  $FVF<next>))))
  :qid |qp.fvfDomDef61|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@83@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@83@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@83@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@83@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef59|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@83@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef60|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@81@01 r) g@62@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
    :pattern ((inv@81@01 r))
    :qid |quant-u-7963|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@83@01  $FVF<next>)) g@62@01)))
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@84@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@84@01 g@62@01))
(pop) ; 6
(declare-fun inv@85@01 ($Ref) $Ref)
(declare-fun img@86@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@84@01 $Ref) (n2@84@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@84@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n1@84@01) n1@84@01))
      (and
        (Set_in n2@84@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n2@84@01) n2@84@01))
      (= n1@84@01 n2@84@01))
    (= n1@84@01 n2@84@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@84@01 $Ref)) (!
  (=>
    (Set_in n@84@01 g@62@01)
    (and (= (inv@85@01 n@84@01) n@84@01) (img@86@01 n@84@01)))
  :pattern ((Set_in n@84@01 g@62@01))
  :pattern ((inv@85@01 n@84@01))
  :pattern ((img@86@01 n@84@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@86@01 r) (Set_in (inv@85@01 r) g@62@01)) (= (inv@85@01 r) r))
  :pattern ((inv@85@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@85@01 r) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
  :pattern ((inv@85@01 r))
  :qid |quant-u-7966|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r) (= r (inv@85@01 r)))
    (>
      (+
        (ite
          (and
            (img@69@01 r)
            (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@63@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7967|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@87@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@87@01  $FVF<next>)))
      (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r)))
    (=>
      (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r))
      (Set_in r ($FVF.domain_next (as sm@87@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@87@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@87@01  $FVF<next>)) g@62@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@84@01 $Ref)) (!
  (=>
    (Set_in n@84@01 g@62@01)
    (and (= (inv@85@01 n@84@01) n@84@01) (img@86@01 n@84@01)))
  :pattern ((Set_in n@84@01 g@62@01))
  :pattern ((inv@85@01 n@84@01))
  :pattern ((img@86@01 n@84@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@86@01 r) (Set_in (inv@85@01 r) g@62@01)) (= (inv@85@01 r) r))
  :pattern ((inv@85@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@87@01  $FVF<next>)))
      (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r)))
    (=>
      (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r))
      (Set_in r ($FVF.domain_next (as sm@87@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@87@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@85@01 r) g@62@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
    :pattern ((inv@85@01 r))
    :qid |quant-u-7966|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@87@01  $FVF<next>)) g@62@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 21 | Lookup(next, sm@70@01, x@63@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@80@01 $Ref)) (!
  (=>
    (Set_in n@80@01 g@62@01)
    (and (= (inv@81@01 n@80@01) n@80@01) (img@82@01 n@80@01)))
  :pattern ((Set_in n@80@01 g@62@01))
  :pattern ((inv@81@01 n@80@01))
  :pattern ((img@82@01 n@80@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@82@01 r) (Set_in (inv@81@01 r) g@62@01)) (= (inv@81@01 r) r))
  :pattern ((inv@81@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@83@01  $FVF<next>)))
      (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r)))
    (=>
      (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r))
      (Set_in r ($FVF.domain_next (as sm@83@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@83@01  $FVF<next>))))
  :qid |qp.fvfDomDef61|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@83@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@83@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@81@01 r) g@62@01) (img@82@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@83@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@83@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef59|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@83@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef60|)))
(assert (forall ((n@84@01 $Ref)) (!
  (=>
    (Set_in n@84@01 g@62@01)
    (and (= (inv@85@01 n@84@01) n@84@01) (img@86@01 n@84@01)))
  :pattern ((Set_in n@84@01 g@62@01))
  :pattern ((inv@85@01 n@84@01))
  :pattern ((img@86@01 n@84@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@86@01 r) (Set_in (inv@85@01 r) g@62@01)) (= (inv@85@01 r) r))
  :pattern ((inv@85@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@87@01  $FVF<next>)))
      (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r)))
    (=>
      (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r))
      (Set_in r ($FVF.domain_next (as sm@87@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@87@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@85@01 r) g@62@01) (img@86@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)
  (and
    (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@81@01 r) g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
      :pattern ((inv@81@01 r))
      :qid |quant-u-7963|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@83@01  $FVF<next>)) g@62@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@85@01 r) g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
      :pattern ((inv@85@01 r))
      :qid |quant-u-7966|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@87@01  $FVF<next>)) g@62@01))))
; Joined path conditions
(assert (or
  (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))
  (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)))
(assert (=>
  (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)
  (Set_equal ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@83@01  $FVF<next>)) g@62@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@87@01  $FVF<next>)) g@62@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
  $Snap.unit))
; [eval] old(x.next) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))))
; [eval] old(x.next) != null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@63@01)
      (=
        ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
      (=
        ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef52|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@69@01 x@63@01)
        (and
          (Set_in (inv@68@01 x@63@01) g@62@01)
          (not (= (inv@68@01 x@63@01) x@63@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 22 | Lookup(next, sm@70@01, x@63@01) != Null | live]
; [else-branch: 22 | Lookup(next, sm@70@01, x@63@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 22 | Lookup(next, sm@70@01, x@63@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))))
(declare-const v1@88@01 $Ref)
(declare-const v2@89@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next)))
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@90@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@90@01 g@62@01))
(pop) ; 7
(declare-fun inv@91@01 ($Ref) $Ref)
(declare-fun img@92@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@90@01 $Ref) (n2@90@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@90@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n1@90@01) n1@90@01))
      (and
        (Set_in n2@90@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n2@90@01) n2@90@01))
      (= n1@90@01 n2@90@01))
    (= n1@90@01 n2@90@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@90@01 $Ref)) (!
  (=>
    (Set_in n@90@01 g@62@01)
    (and (= (inv@91@01 n@90@01) n@90@01) (img@92@01 n@90@01)))
  :pattern ((Set_in n@90@01 g@62@01))
  :pattern ((inv@91@01 n@90@01))
  :pattern ((img@92@01 n@90@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@92@01 r) (Set_in (inv@91@01 r) g@62@01)) (= (inv@91@01 r) r))
  :pattern ((inv@91@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@91@01 r) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
  :pattern ((inv@91@01 r))
  :qid |quant-u-7969|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r) (= r (inv@91@01 r)))
    (>
      (+
        (ite
          (and
            (img@77@01 r)
            (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@63@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7970|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@93@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>)))
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r)))
    (=>
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r))
      (Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>))))
  :qid |qp.fvfDomDef69|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@93@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@93@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@93@01  $FVF<next>)) g@62@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@90@01 $Ref)) (!
  (=>
    (Set_in n@90@01 g@62@01)
    (and (= (inv@91@01 n@90@01) n@90@01) (img@92@01 n@90@01)))
  :pattern ((Set_in n@90@01 g@62@01))
  :pattern ((inv@91@01 n@90@01))
  :pattern ((img@92@01 n@90@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@92@01 r) (Set_in (inv@91@01 r) g@62@01)) (= (inv@91@01 r) r))
  :pattern ((inv@91@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>)))
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r)))
    (=>
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r))
      (Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>))))
  :qid |qp.fvfDomDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@93@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@93@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@91@01 r) g@62@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
    :pattern ((inv@91@01 r))
    :qid |quant-u-7969|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@93@01  $FVF<next>)) g@62@01)))
; [eval] edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 6
(declare-const n@94@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@94@01 g@62@01))
(pop) ; 7
(declare-fun inv@95@01 ($Ref) $Ref)
(declare-fun img@96@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@94@01 $Ref) (n2@94@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@94@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n1@94@01) n1@94@01))
      (and
        (Set_in n2@94@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n2@94@01) n2@94@01))
      (= n1@94@01 n2@94@01))
    (= n1@94@01 n2@94@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@62@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@62@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@62@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@95@01 r) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
  :pattern ((inv@95@01 r))
  :qid |quant-u-7972|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r) (= r (inv@95@01 r)))
    (>
      (+
        (ite
          (and
            (img@69@01 r)
            (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@63@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7973|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@97@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>)))
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r))
      (Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>))))
  :qid |qp.fvfDomDef73|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@97@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@97@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@62@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@62@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@62@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>)))
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r))
      (Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>))))
  :qid |qp.fvfDomDef73|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@97@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@97@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@95@01 r) g@62@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
    :pattern ((inv@95@01 r))
    :qid |quant-u-7972|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01)))
(push) ; 6
; [then-branch: 23 | !(edge[Bool]($$(sm@97@01, g@62@01), v1@88@01, v2@89@01)) | live]
; [else-branch: 23 | edge[Bool]($$(sm@97@01, g@62@01), v1@88@01, v2@89@01) | live]
(push) ; 7
; [then-branch: 23 | !(edge[Bool]($$(sm@97@01, g@62@01), v1@88@01, v2@89@01))]
(assert (not
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 23 | edge[Bool]($$(sm@97@01, g@62@01), v1@88@01, v2@89@01)]
(assert (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01))
; [eval] !(v1 == x && v2 == old(x.next))
; [eval] v1 == x && v2 == old(x.next)
; [eval] v1 == x
(push) ; 8
; [then-branch: 24 | v1@88@01 != x@63@01 | live]
; [else-branch: 24 | v1@88@01 == x@63@01 | live]
(push) ; 9
; [then-branch: 24 | v1@88@01 != x@63@01]
(assert (not (= v1@88@01 x@63@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 24 | v1@88@01 == x@63@01]
(assert (= v1@88@01 x@63@01))
; [eval] v2 == old(x.next)
; [eval] old(x.next)
(declare-const sm@98@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef76|)))
(declare-const pm@99@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@99@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@99@01  $FPM) r))
  :qid |qp.resPrmSumDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@98@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@99@01  $FPM) r))
  :qid |qp.resTrgDef78|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@98@01  $FVF<next>) x@63@01) x@63@01))
(push) ; 10
(assert (not (< $Perm.No ($FVF.perm_next (as pm@99@01  $FPM) x@63@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@99@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@99@01  $FPM) r))
  :qid |qp.resPrmSumDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@98@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@99@01  $FPM) r))
  :qid |qp.resTrgDef78|)))
(assert (=>
  (= v1@88@01 x@63@01)
  (and
    (= v1@88@01 x@63@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@98@01  $FVF<next>) x@63@01) x@63@01))))
(assert (or (= v1@88@01 x@63@01) (not (= v1@88@01 x@63@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@99@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@99@01  $FPM) r))
  :qid |qp.resPrmSumDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@98@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@99@01  $FPM) r))
  :qid |qp.resTrgDef78|)))
(assert (=>
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
  (and
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
    (=>
      (= v1@88@01 x@63@01)
      (and
        (= v1@88@01 x@63@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@98@01  $FVF<next>) x@63@01) x@63@01)))
    (or (= v1@88@01 x@63@01) (not (= v1@88@01 x@63@01))))))
(assert (or
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@90@01 $Ref)) (!
  (=>
    (Set_in n@90@01 g@62@01)
    (and (= (inv@91@01 n@90@01) n@90@01) (img@92@01 n@90@01)))
  :pattern ((Set_in n@90@01 g@62@01))
  :pattern ((inv@91@01 n@90@01))
  :pattern ((img@92@01 n@90@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@92@01 r) (Set_in (inv@91@01 r) g@62@01)) (= (inv@91@01 r) r))
  :pattern ((inv@91@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>)))
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r)))
    (=>
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r))
      (Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>))))
  :qid |qp.fvfDomDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@93@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@93@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@62@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@62@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@62@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>)))
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r))
      (Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>))))
  :qid |qp.fvfDomDef73|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@97@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@97@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@99@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@99@01  $FPM) r))
  :qid |qp.resPrmSumDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@98@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@99@01  $FPM) r))
  :qid |qp.resTrgDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@91@01 r) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
  :pattern ((inv@91@01 r))
  :qid |quant-u-7969|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@93@01  $FVF<next>)) g@62@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@95@01 r) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
  :pattern ((inv@95@01 r))
  :qid |quant-u-7972|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@88@01 $Ref) (v2@89@01 $Ref)) (!
  (and
    (=>
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
        (=>
          (= v1@88@01 x@63@01)
          (and
            (= v1@88@01 x@63@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@98@01  $FVF<next>) x@63@01) x@63@01)))
        (or (= v1@88@01 x@63@01) (not (= v1@88@01 x@63@01)))))
    (or
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@93@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 22 | Lookup(next, sm@70@01, x@63@01) == Null]
(assert (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@90@01 $Ref)) (!
  (=>
    (Set_in n@90@01 g@62@01)
    (and (= (inv@91@01 n@90@01) n@90@01) (img@92@01 n@90@01)))
  :pattern ((Set_in n@90@01 g@62@01))
  :pattern ((inv@91@01 n@90@01))
  :pattern ((img@92@01 n@90@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@92@01 r) (Set_in (inv@91@01 r) g@62@01)) (= (inv@91@01 r) r))
  :pattern ((inv@91@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>)))
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r)))
    (=>
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r))
      (Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@93@01  $FVF<next>))))
  :qid |qp.fvfDomDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@93@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@91@01 r) g@62@01) (img@92@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@93@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@93@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@62@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@62@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@62@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>)))
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r))
      (Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@97@01  $FVF<next>))))
  :qid |qp.fvfDomDef73|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@97@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@62@01) (img@96@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@97@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@97@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@99@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@99@01  $FPM) r))
  :qid |qp.resPrmSumDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@98@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@99@01  $FPM) r))
  :qid |qp.resTrgDef78|)))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@91@01 r) g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
      :pattern ((inv@91@01 r))
      :qid |quant-u-7969|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@93@01  $FVF<next>)) g@62@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@95@01 r) g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
      :pattern ((inv@95@01 r))
      :qid |quant-u-7972|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01)
    (forall ((v1@88@01 $Ref) (v2@89@01 $Ref)) (!
      (and
        (=>
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
          (and
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
            (=>
              (= v1@88@01 x@63@01)
              (and
                (= v1@88@01 x@63@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@98@01  $FVF<next>) x@63@01) x@63@01)))
            (or (= v1@88@01 x@63@01) (not (= v1@88@01 x@63@01)))))
        (or
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01))))
      :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@93@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89-aux|)))))
; Joined path conditions
(assert (or
  (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)
  (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))
  (forall ((v1@88@01 $Ref) (v2@89@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@93@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@97@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01)
        (not
          (and
            (= v1@88@01 x@63@01)
            (= v2@89@01 ($FVF.lookup_next (as sm@98@01  $FVF<next>) x@63@01))))))
    :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@93@01  $FVF<next>)) g@62@01) v1@88@01 v2@89@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
  $Snap.unit))
; [eval] old(x.next) != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))))
; [eval] old(x.next) != null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r x@63@01)
      (=
        ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
      (=
        ($FVF.lookup_next (as sm@70@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@70@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef52|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@69@01 x@63@01)
        (and
          (Set_in (inv@68@01 x@63@01) g@62@01)
          (not (= (inv@68@01 x@63@01) x@63@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 25 | Lookup(next, sm@70@01, x@63@01) != Null | live]
; [else-branch: 25 | Lookup(next, sm@70@01, x@63@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 25 | Lookup(next, sm@70@01, x@63@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))))
(declare-const v1@100@01 $Ref)
(declare-const v2@101@01 $Ref)
(push) ; 5
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)))
; [eval] v1 != v2
(push) ; 6
; [then-branch: 26 | v1@100@01 != v2@101@01 | live]
; [else-branch: 26 | v1@100@01 == v2@101@01 | live]
(push) ; 7
; [then-branch: 26 | v1@100@01 != v2@101@01]
(assert (not (= v1@100@01 v2@101@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 8
(declare-const n@102@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@102@01 g@62@01))
(pop) ; 9
(declare-fun inv@103@01 ($Ref) $Ref)
(declare-fun img@104@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@102@01 $Ref) (n2@102@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@102@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n1@102@01) n1@102@01))
      (and
        (Set_in n2@102@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n2@102@01) n2@102@01))
      (= n1@102@01 n2@102@01))
    (= n1@102@01 n2@102@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@102@01 $Ref)) (!
  (=>
    (Set_in n@102@01 g@62@01)
    (and (= (inv@103@01 n@102@01) n@102@01) (img@104@01 n@102@01)))
  :pattern ((Set_in n@102@01 g@62@01))
  :pattern ((inv@103@01 n@102@01))
  :pattern ((img@104@01 n@102@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@104@01 r) (Set_in (inv@103@01 r) g@62@01)) (= (inv@103@01 r) r))
  :pattern ((inv@103@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@103@01 r) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
  :pattern ((inv@103@01 r))
  :qid |quant-u-7975|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r) (= r (inv@103@01 r)))
    (>
      (+
        (ite
          (and
            (img@77@01 r)
            (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@63@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7976|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@105@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r)))
    (=>
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r))
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) g@62@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@102@01 $Ref)) (!
  (=>
    (Set_in n@102@01 g@62@01)
    (and (= (inv@103@01 n@102@01) n@102@01) (img@104@01 n@102@01)))
  :pattern ((Set_in n@102@01 g@62@01))
  :pattern ((inv@103@01 n@102@01))
  :pattern ((img@104@01 n@102@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@104@01 r) (Set_in (inv@103@01 r) g@62@01)) (= (inv@103@01 r) r))
  :pattern ((inv@103@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r)))
    (=>
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r))
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@103@01 r) g@62@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
    :pattern ((inv@103@01 r))
    :qid |quant-u-7975|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) g@62@01)))
; [eval] exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@106@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@106@01 g@62@01))
(pop) ; 9
(declare-fun inv@107@01 ($Ref) $Ref)
(declare-fun img@108@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@106@01 $Ref) (n2@106@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@106@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n1@106@01) n1@106@01))
      (and
        (Set_in n2@106@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) n2@106@01) n2@106@01))
      (= n1@106@01 n2@106@01))
    (= n1@106@01 n2@106@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@106@01 $Ref)) (!
  (=>
    (Set_in n@106@01 g@62@01)
    (and (= (inv@107@01 n@106@01) n@106@01) (img@108@01 n@106@01)))
  :pattern ((Set_in n@106@01 g@62@01))
  :pattern ((inv@107@01 n@106@01))
  :pattern ((img@108@01 n@106@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@108@01 r) (Set_in (inv@107@01 r) g@62@01)) (= (inv@107@01 r) r))
  :pattern ((inv@107@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@107@01 r) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
  :pattern ((inv@107@01 r))
  :qid |quant-u-7978|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r) (= r (inv@107@01 r)))
    (>
      (+
        (ite
          (and
            (img@69@01 r)
            (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@63@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7979|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@109@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>)))
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r)))
    (=>
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r))
      (Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>))))
  :qid |qp.fvfDomDef86|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@106@01 $Ref)) (!
  (=>
    (Set_in n@106@01 g@62@01)
    (and (= (inv@107@01 n@106@01) n@106@01) (img@108@01 n@106@01)))
  :pattern ((Set_in n@106@01 g@62@01))
  :pattern ((inv@107@01 n@106@01))
  :pattern ((img@108@01 n@106@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@108@01 r) (Set_in (inv@107@01 r) g@62@01)) (= (inv@107@01 r) r))
  :pattern ((inv@107@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>)))
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r)))
    (=>
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r))
      (Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>))))
  :qid |qp.fvfDomDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@107@01 r) g@62@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
    :pattern ((inv@107@01 r))
    :qid |quant-u-7978|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01)))
(push) ; 8
; [then-branch: 27 | !(exists_path[Bool]($$(sm@109@01, g@62@01), v1@100@01, v2@101@01)) | live]
; [else-branch: 27 | exists_path[Bool]($$(sm@109@01, g@62@01), v1@100@01, v2@101@01) | live]
(push) ; 9
; [then-branch: 27 | !(exists_path[Bool]($$(sm@109@01, g@62@01), v1@100@01, v2@101@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 27 | exists_path[Bool]($$(sm@109@01, g@62@01), v1@100@01, v2@101@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01))
; [eval] !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 10
(declare-const n@110@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@110@01 g@62@01))
(pop) ; 11
(declare-fun inv@111@01 ($Ref) $Ref)
(declare-fun img@112@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@113@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@110@01 $Ref) (n2@110@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@110@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@113@01  $FVF<next>) n1@110@01) n1@110@01))
      (and
        (Set_in n2@110@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@113@01  $FVF<next>) n2@110@01) n2@110@01))
      (= n1@110@01 n2@110@01))
    (= n1@110@01 n2@110@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@62@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@62@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@62@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@111@01 r) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@113@01  $FVF<next>) r) r))
  :pattern ((inv@111@01 r))
  :qid |quant-u-7981|)))
(push) ; 11
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r) (= r (inv@111@01 r)))
    (>
      (+
        (ite
          (and
            (img@69@01 r)
            (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@63@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7982|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const sm@114@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@62@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@62@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@62@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@111@01 r) g@62@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@113@01  $FVF<next>) r) r))
    :pattern ((inv@111@01 r))
    :qid |quant-u-7981|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01)))
(push) ; 10
; [then-branch: 28 | !(exists_path[Bool]($$(sm@114@01, g@62@01), v1@100@01, x@63@01)) | live]
; [else-branch: 28 | exists_path[Bool]($$(sm@114@01, g@62@01), v1@100@01, x@63@01) | live]
(push) ; 11
; [then-branch: 28 | !(exists_path[Bool]($$(sm@114@01, g@62@01), v1@100@01, x@63@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 28 | exists_path[Bool]($$(sm@114@01, g@62@01), v1@100@01, x@63@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01))
; [eval] exists_path(old($$(g)), old(x.next), v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 12
(declare-const n@115@01 $Ref)
(push) ; 13
; [eval] (n in refs)
(assert (Set_in n@115@01 g@62@01))
(pop) ; 13
(declare-fun inv@116@01 ($Ref) $Ref)
(declare-fun img@117@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@118@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
; Check receiver injectivity
(push) ; 13
(assert (not (forall ((n1@115@01 $Ref) (n2@115@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@115@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) n1@115@01) n1@115@01))
      (and
        (Set_in n2@115@01 g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) n2@115@01) n2@115@01))
      (= n1@115@01 n2@115@01))
    (= n1@115@01 n2@115@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 g@62@01)
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 g@62@01))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@117@01 r) (Set_in (inv@116@01 r) g@62@01)) (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@116@01 r) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
  :pattern ((inv@116@01 r))
  :qid |quant-u-7984|)))
(push) ; 13
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r) (= r (inv@116@01 r)))
    (>
      (+
        (ite
          (and
            (img@69@01 r)
            (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r x@63@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-7985|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const sm@119@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@119@01  $FVF<next>)) g@62@01))
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 g@62@01)
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 g@62@01))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@117@01 r) (Set_in (inv@116@01 r) g@62@01)) (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@116@01 r) g@62@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
    :pattern ((inv@116@01 r))
    :qid |quant-u-7984|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@119@01  $FVF<next>)) g@62@01)))
; [eval] old(x.next)
(declare-const sm@120@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(declare-const pm@121@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@121@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) x@63@01) x@63@01))
(push) ; 12
(assert (not (< $Perm.No ($FVF.perm_next (as pm@121@01  $FPM) x@63@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 g@62@01)
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 g@62@01))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@117@01 r) (Set_in (inv@116@01 r) g@62@01)) (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@121@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@116@01 r) g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
      :pattern ((inv@116@01 r))
      :qid |quant-u-7984|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@119@01  $FVF<next>)) g@62@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) x@63@01) x@63@01))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@62@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@62@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@62@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 g@62@01)
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 g@62@01))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@117@01 r) (Set_in (inv@116@01 r) g@62@01)) (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@121@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@111@01 r) g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@113@01  $FVF<next>) r) r))
      :pattern ((inv@111@01 r))
      :qid |quant-u-7981|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@116@01 r) g@62@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
          :pattern ((inv@116@01 r))
          :qid |quant-u-7984|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@119@01  $FVF<next>)) g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) x@63@01) x@63@01)))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01))))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 26 | v1@100@01 == v2@101@01]
(assert (= v1@100@01 v2@101@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@102@01 $Ref)) (!
  (=>
    (Set_in n@102@01 g@62@01)
    (and (= (inv@103@01 n@102@01) n@102@01) (img@104@01 n@102@01)))
  :pattern ((Set_in n@102@01 g@62@01))
  :pattern ((inv@103@01 n@102@01))
  :pattern ((img@104@01 n@102@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@104@01 r) (Set_in (inv@103@01 r) g@62@01)) (= (inv@103@01 r) r))
  :pattern ((inv@103@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r)))
    (=>
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r))
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@106@01 $Ref)) (!
  (=>
    (Set_in n@106@01 g@62@01)
    (and (= (inv@107@01 n@106@01) n@106@01) (img@108@01 n@106@01)))
  :pattern ((Set_in n@106@01 g@62@01))
  :pattern ((inv@107@01 n@106@01))
  :pattern ((img@108@01 n@106@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@108@01 r) (Set_in (inv@107@01 r) g@62@01)) (= (inv@107@01 r) r))
  :pattern ((inv@107@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>)))
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r)))
    (=>
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r))
      (Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>))))
  :qid |qp.fvfDomDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@62@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@62@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@62@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 g@62@01)
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 g@62@01))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@117@01 r) (Set_in (inv@116@01 r) g@62@01)) (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@121@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (not (= v1@100@01 v2@101@01))
  (and
    (not (= v1@100@01 v2@101@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@103@01 r) g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
      :pattern ((inv@103@01 r))
      :qid |quant-u-7975|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) g@62@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@107@01 r) g@62@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
      :pattern ((inv@107@01 r))
      :qid |quant-u-7978|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@111@01 r) g@62@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@113@01  $FVF<next>) r) r))
          :pattern ((inv@111@01 r))
          :qid |quant-u-7981|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@116@01 r) g@62@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
              :pattern ((inv@116@01 r))
              :qid |quant-u-7984|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@119@01  $FVF<next>)) g@62@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) x@63@01) x@63@01)))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)))))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01))))))
; Joined path conditions
(assert (or (= v1@100@01 v2@101@01) (not (= v1@100@01 v2@101@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@102@01 $Ref)) (!
  (=>
    (Set_in n@102@01 g@62@01)
    (and (= (inv@103@01 n@102@01) n@102@01) (img@104@01 n@102@01)))
  :pattern ((Set_in n@102@01 g@62@01))
  :pattern ((inv@103@01 n@102@01))
  :pattern ((img@104@01 n@102@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@104@01 r) (Set_in (inv@103@01 r) g@62@01)) (= (inv@103@01 r) r))
  :pattern ((inv@103@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r)))
    (=>
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r))
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@106@01 $Ref)) (!
  (=>
    (Set_in n@106@01 g@62@01)
    (and (= (inv@107@01 n@106@01) n@106@01) (img@108@01 n@106@01)))
  :pattern ((Set_in n@106@01 g@62@01))
  :pattern ((inv@107@01 n@106@01))
  :pattern ((img@108@01 n@106@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@108@01 r) (Set_in (inv@107@01 r) g@62@01)) (= (inv@107@01 r) r))
  :pattern ((inv@107@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>)))
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r)))
    (=>
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r))
      (Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>))))
  :qid |qp.fvfDomDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@62@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@62@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@62@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 g@62@01)
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 g@62@01))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@117@01 r) (Set_in (inv@116@01 r) g@62@01)) (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@121@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@100@01 $Ref) (v2@101@01 $Ref)) (!
  (and
    (=>
      (not (= v1@100@01 v2@101@01))
      (and
        (not (= v1@100@01 v2@101@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@103@01 r) g@62@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
          :pattern ((inv@103@01 r))
          :qid |quant-u-7975|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) g@62@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@107@01 r) g@62@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
          :pattern ((inv@107@01 r))
          :qid |quant-u-7978|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@111@01 r) g@62@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@113@01  $FVF<next>) r) r))
              :pattern ((inv@111@01 r))
              :qid |quant-u-7981|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@116@01 r) g@62@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
                  :pattern ((inv@116@01 r))
                  :qid |quant-u-7984|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@119@01  $FVF<next>)) g@62@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) x@63@01) x@63@01)))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)))))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)))))
    (or (= v1@100@01 v2@101@01) (not (= v1@100@01 v2@101@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 25 | Lookup(next, sm@70@01, x@63@01) == Null]
(assert (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@102@01 $Ref)) (!
  (=>
    (Set_in n@102@01 g@62@01)
    (and (= (inv@103@01 n@102@01) n@102@01) (img@104@01 n@102@01)))
  :pattern ((Set_in n@102@01 g@62@01))
  :pattern ((inv@103@01 n@102@01))
  :pattern ((img@104@01 n@102@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@104@01 r) (Set_in (inv@103@01 r) g@62@01)) (= (inv@103@01 r) r))
  :pattern ((inv@103@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r)))
    (=>
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r))
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@103@01 r) g@62@01) (img@104@01 r))
      (and
        (img@77@01 r)
        (and (Set_in (inv@76@01 r) g@62@01) (not (= (inv@76@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((n@106@01 $Ref)) (!
  (=>
    (Set_in n@106@01 g@62@01)
    (and (= (inv@107@01 n@106@01) n@106@01) (img@108@01 n@106@01)))
  :pattern ((Set_in n@106@01 g@62@01))
  :pattern ((inv@107@01 n@106@01))
  :pattern ((img@108@01 n@106@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@108@01 r) (Set_in (inv@107@01 r) g@62@01)) (= (inv@107@01 r) r))
  :pattern ((inv@107@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>)))
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r)))
    (=>
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r))
      (Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@109@01  $FVF<next>))))
  :qid |qp.fvfDomDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@107@01 r) g@62@01) (img@108@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@113@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@113@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@62@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@62@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@62@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@62@01) (img@112@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 g@62@01)
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 g@62@01))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@117@01 r) (Set_in (inv@116@01 r) g@62@01)) (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@119@01  $FVF<next>))))
  :qid |qp.fvfDomDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r)) (= r x@63@01))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) g@62@01) (img@117@01 r))
      (and
        (img@69@01 r)
        (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01)))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@63@01)
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@65@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@65@01  $FVF<next>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@69@01 r)
      (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@121@01  $FPM) r)
    (+
      (ite (= r x@63@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@69@01 r)
          (and (Set_in (inv@68@01 r) g@62@01) (not (= (inv@68@01 r) x@63@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@65@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@121@01  $FPM) r))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))
    (forall ((v1@100@01 $Ref) (v2@101@01 $Ref)) (!
      (and
        (=>
          (not (= v1@100@01 v2@101@01))
          (and
            (not (= v1@100@01 v2@101@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@103@01 r) g@62@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
              :pattern ((inv@103@01 r))
              :qid |quant-u-7975|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) g@62@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@107@01 r) g@62@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@70@01  $FVF<next>) r) r))
              :pattern ((inv@107@01 r))
              :qid |quant-u-7978|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@111@01 r) g@62@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@113@01  $FVF<next>) r) r))
                  :pattern ((inv@111@01 r))
                  :qid |quant-u-7981|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01)
                (=>
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
                  (and
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@116@01 r) g@62@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
                      :pattern ((inv@116@01 r))
                      :qid |quant-u-7984|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@119@01  $FVF<next>)) g@62@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@120@01  $FVF<next>) x@63@01) x@63@01)))
                (or
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)))))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)))))
        (or (= v1@100@01 v2@101@01) (not (= v1@100@01 v2@101@01))))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128-aux|)))))
; Joined path conditions
(assert (=>
  (not (= ($FVF.lookup_next (as sm@70@01  $FVF<next>) x@63@01) $Ref.null))
  (forall ((v1@100@01 $Ref) (v2@101@01 $Ref)) (!
    (=>
      (not (= v1@100@01 v2@101@01))
      (=
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@109@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01)
          (not
            (and
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g@62@01) v1@100@01 x@63@01)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@119@01  $FVF<next>)) g@62@01) ($FVF.lookup_next (as sm@120@01  $FVF<next>) x@63@01) v2@101@01))))))
    :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) g@62@01) v1@100@01 v2@101@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- reverse ----------
(declare-const g@122@01 Set<$Ref>)
(declare-const xe@123@01 $Ref)
(declare-const y@124@01 $Ref)
(declare-const g@125@01 Set<$Ref>)
(declare-const xe@126@01 $Ref)
(declare-const y@127@01 $Ref)
(push) ; 1
(declare-const $t@128@01 $Snap)
(assert (= $t@128@01 ($Snap.combine ($Snap.first $t@128@01) ($Snap.second $t@128@01))))
(assert (= ($Snap.first $t@128@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@125@01)))
(assert (=
  ($Snap.second $t@128@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@128@01))
    ($Snap.second ($Snap.second $t@128@01)))))
(declare-const n@129@01 $Ref)
(push) ; 2
; [eval] (n in g)
(assert (Set_in n@129@01 g@125@01))
(declare-const sm@130@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@131@01 ($Ref) $Ref)
(declare-fun img@132@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@129@01 $Ref) (n2@129@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@129@01 g@125@01)
      (Set_in n2@129@01 g@125@01)
      (= n1@129@01 n2@129@01))
    (= n1@129@01 n2@129@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@129@01 $Ref)) (!
  (=>
    (Set_in n@129@01 g@125@01)
    (and (= (inv@131@01 n@129@01) n@129@01) (img@132@01 n@129@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) n@129@01) n@129@01))
  :qid |quant-u-7987|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)) (= (inv@131@01 r) r))
  :pattern ((inv@131@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@129@01 $Ref)) (!
  (=> (Set_in n@129@01 g@125@01) (not (= n@129@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) n@129@01) n@129@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@133@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@131@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) r) r))
  :pattern ((inv@131@01 r))
  :qid |quant-u-7988|)))
(assert (=
  ($Snap.second ($Snap.second $t@128@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@128@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@128@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@134@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 29 | !(n$0@134@01 in g@125@01) | live]
; [else-branch: 29 | n$0@134@01 in g@125@01 | live]
(push) ; 4
; [then-branch: 29 | !(n$0@134@01 in g@125@01)]
(assert (not (Set_in n$0@134@01 g@125@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 29 | n$0@134@01 in g@125@01]
(assert (Set_in n$0@134@01 g@125@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
    :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
    :qid |qp.fvfValDef107|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef108|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) n$0@134@01))
(push) ; 5
(assert (not (and (img@132@01 n$0@134@01) (Set_in (inv@131@01 n$0@134@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef108|)))
(assert (=>
  (Set_in n$0@134@01 g@125@01)
  (and
    (Set_in n$0@134@01 g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) n$0@134@01))))
(assert (or (Set_in n$0@134@01 g@125@01) (not (Set_in n$0@134@01 g@125@01))))
(push) ; 3
; [then-branch: 30 | n$0@134@01 in g@125@01 && Lookup(next, sm@133@01, n$0@134@01) != Null | live]
; [else-branch: 30 | !(n$0@134@01 in g@125@01 && Lookup(next, sm@133@01, n$0@134@01) != Null) | live]
(push) ; 4
; [then-branch: 30 | n$0@134@01 in g@125@01 && Lookup(next, sm@133@01, n$0@134@01) != Null]
(assert (and
  (Set_in n$0@134@01 g@125@01)
  (not (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
    :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
    :qid |qp.fvfValDef107|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef108|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) n$0@134@01))
(push) ; 5
(assert (not (and (img@132@01 n$0@134@01) (Set_in (inv@131@01 n$0@134@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 30 | !(n$0@134@01 in g@125@01 && Lookup(next, sm@133@01, n$0@134@01) != Null)]
(assert (not
  (and
    (Set_in n$0@134@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef108|)))
(assert (=>
  (and
    (Set_in n$0@134@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null)))
  (and
    (Set_in n$0@134@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) n$0@134@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@134@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null))))
  (and
    (Set_in n$0@134@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef108|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@134@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@134@01 g@125@01)
      (and
        (Set_in n$0@134@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) n$0@134@01)))
    (or (Set_in n$0@134@01 g@125@01) (not (Set_in n$0@134@01 g@125@01)))
    (=>
      (and
        (Set_in n$0@134@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null)))
      (and
        (Set_in n$0@134@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) n$0@134@01)))
    (or
      (not
        (and
          (Set_in n$0@134@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01)
              $Ref.null))))
      (and
        (Set_in n$0@134@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) g@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@384@14@384@22-aux|)))
(assert (forall ((n$0@134@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@134@01 g@125@01)
      (and
        (Set_in n$0@134@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) n$0@134@01)))
    (or (Set_in n$0@134@01 g@125@01) (not (Set_in n$0@134@01 g@125@01)))
    (=>
      (and
        (Set_in n$0@134@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null)))
      (and
        (Set_in n$0@134@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) n$0@134@01)))
    (or
      (not
        (and
          (Set_in n$0@134@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01)
              $Ref.null))))
      (and
        (Set_in n$0@134@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null)))))
  :pattern ((Set_in n$0@134@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) n$0@134@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@384@14@384@22-aux|)))
(assert (forall ((n$0@134@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@134@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) g@125@01))
  :pattern ((Set_in n$0@134@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$0@134@01) n$0@134@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@384@14@384@22|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@128@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@128@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@128@01))))
  $Snap.unit))
; [eval] (xe in g)
(assert (Set_in xe@126@01 g@125@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))
  $Snap.unit))
; [eval] acyclic_graph($$(g))
; [eval] $$(g)
(push) ; 2
(declare-const n@135@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@135@01 g@125@01))
(pop) ; 3
(declare-fun inv@136@01 ($Ref) $Ref)
(declare-fun img@137@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@135@01 $Ref) (n2@135@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@135@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n1@135@01) n1@135@01))
      (and
        (Set_in n2@135@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n2@135@01) n2@135@01))
      (= n1@135@01 n2@135@01))
    (= n1@135@01 n2@135@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@135@01 $Ref)) (!
  (=>
    (Set_in n@135@01 g@125@01)
    (and (= (inv@136@01 n@135@01) n@135@01) (img@137@01 n@135@01)))
  :pattern ((Set_in n@135@01 g@125@01))
  :pattern ((inv@136@01 n@135@01))
  :pattern ((img@137@01 n@135@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@137@01 r) (Set_in (inv@136@01 r) g@125@01)) (= (inv@136@01 r) r))
  :pattern ((inv@136@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@136@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) r) r))
  :pattern ((inv@136@01 r))
  :qid |quant-u-7990|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@136@01 r) g@125@01) (img@137@01 r) (= r (inv@136@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-7991|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@138@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@138@01  $FVF<next>)))
      (and (Set_in (inv@136@01 r) g@125@01) (img@137@01 r)))
    (=>
      (and (Set_in (inv@136@01 r) g@125@01) (img@137@01 r))
      (Set_in r ($FVF.domain_next (as sm@138@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@138@01  $FVF<next>))))
  :qid |qp.fvfDomDef111|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@136@01 r) g@125@01) (img@137@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef110|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@138@01  $FVF<next>)) g@125@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@135@01 $Ref)) (!
  (=>
    (Set_in n@135@01 g@125@01)
    (and (= (inv@136@01 n@135@01) n@135@01) (img@137@01 n@135@01)))
  :pattern ((Set_in n@135@01 g@125@01))
  :pattern ((inv@136@01 n@135@01))
  :pattern ((img@137@01 n@135@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@137@01 r) (Set_in (inv@136@01 r) g@125@01)) (= (inv@136@01 r) r))
  :pattern ((inv@136@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@138@01  $FVF<next>)))
      (and (Set_in (inv@136@01 r) g@125@01) (img@137@01 r)))
    (=>
      (and (Set_in (inv@136@01 r) g@125@01) (img@137@01 r))
      (Set_in r ($FVF.domain_next (as sm@138@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@138@01  $FVF<next>))))
  :qid |qp.fvfDomDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@136@01 r) g@125@01) (img@137@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef110|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@136@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) r) r))
    :pattern ((inv@136@01 r))
    :qid |quant-u-7990|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@138@01  $FVF<next>)) g@125@01)))
(assert (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@138@01  $FVF<next>)) g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))
  $Snap.unit))
; [eval] unshared_graph($$(g))
; [eval] $$(g)
(push) ; 2
(declare-const n@139@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@139@01 g@125@01))
(pop) ; 3
(declare-fun inv@140@01 ($Ref) $Ref)
(declare-fun img@141@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@142@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@142@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@142@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@142@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@139@01 $Ref) (n2@139@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@139@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@142@01  $FVF<next>) n1@139@01) n1@139@01))
      (and
        (Set_in n2@139@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@142@01  $FVF<next>) n2@139@01) n2@139@01))
      (= n1@139@01 n2@139@01))
    (= n1@139@01 n2@139@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@139@01 $Ref)) (!
  (=>
    (Set_in n@139@01 g@125@01)
    (and (= (inv@140@01 n@139@01) n@139@01) (img@141@01 n@139@01)))
  :pattern ((Set_in n@139@01 g@125@01))
  :pattern ((inv@140@01 n@139@01))
  :pattern ((img@141@01 n@139@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@141@01 r) (Set_in (inv@140@01 r) g@125@01)) (= (inv@140@01 r) r))
  :pattern ((inv@140@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@140@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@142@01  $FVF<next>) r) r))
  :pattern ((inv@140@01 r))
  :qid |quant-u-7993|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@140@01 r) g@125@01) (img@141@01 r) (= r (inv@140@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-7994|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@143@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@143@01  $FVF<next>)))
      (and (Set_in (inv@140@01 r) g@125@01) (img@141@01 r)))
    (=>
      (and (Set_in (inv@140@01 r) g@125@01) (img@141@01 r))
      (Set_in r ($FVF.domain_next (as sm@143@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@143@01  $FVF<next>))))
  :qid |qp.fvfDomDef116|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@140@01 r) g@125@01) (img@141@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@143@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@143@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@143@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@143@01  $FVF<next>)) g@125@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@142@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@142@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@142@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@139@01 $Ref)) (!
  (=>
    (Set_in n@139@01 g@125@01)
    (and (= (inv@140@01 n@139@01) n@139@01) (img@141@01 n@139@01)))
  :pattern ((Set_in n@139@01 g@125@01))
  :pattern ((inv@140@01 n@139@01))
  :pattern ((img@141@01 n@139@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@141@01 r) (Set_in (inv@140@01 r) g@125@01)) (= (inv@140@01 r) r))
  :pattern ((inv@140@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@143@01  $FVF<next>)))
      (and (Set_in (inv@140@01 r) g@125@01) (img@141@01 r)))
    (=>
      (and (Set_in (inv@140@01 r) g@125@01) (img@141@01 r))
      (Set_in r ($FVF.domain_next (as sm@143@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@143@01  $FVF<next>))))
  :qid |qp.fvfDomDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@140@01 r) g@125@01) (img@141@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@143@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@143@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@143@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@140@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@142@01  $FVF<next>) r) r))
    :pattern ((inv@140@01 r))
    :qid |quant-u-7993|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@143@01  $FVF<next>)) g@125@01)))
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@143@01  $FVF<next>)) g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))
  $Snap.unit))
; [eval] func_graph($$(g))
; [eval] $$(g)
(push) ; 2
(declare-const n@144@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@144@01 g@125@01))
(pop) ; 3
(declare-fun inv@145@01 ($Ref) $Ref)
(declare-fun img@146@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@147@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef118|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@144@01 $Ref) (n2@144@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@144@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@147@01  $FVF<next>) n1@144@01) n1@144@01))
      (and
        (Set_in n2@144@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@147@01  $FVF<next>) n2@144@01) n2@144@01))
      (= n1@144@01 n2@144@01))
    (= n1@144@01 n2@144@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@144@01 $Ref)) (!
  (=>
    (Set_in n@144@01 g@125@01)
    (and (= (inv@145@01 n@144@01) n@144@01) (img@146@01 n@144@01)))
  :pattern ((Set_in n@144@01 g@125@01))
  :pattern ((inv@145@01 n@144@01))
  :pattern ((img@146@01 n@144@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@146@01 r) (Set_in (inv@145@01 r) g@125@01)) (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@145@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@147@01  $FVF<next>) r) r))
  :pattern ((inv@145@01 r))
  :qid |quant-u-7996|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@145@01 r) g@125@01) (img@146@01 r) (= r (inv@145@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-7997|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@148@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@148@01  $FVF<next>)))
      (and (Set_in (inv@145@01 r) g@125@01) (img@146@01 r)))
    (=>
      (and (Set_in (inv@145@01 r) g@125@01) (img@146@01 r))
      (Set_in r ($FVF.domain_next (as sm@148@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@148@01  $FVF<next>))))
  :qid |qp.fvfDomDef121|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) g@125@01) (img@146@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@148@01  $FVF<next>)) g@125@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef118|)))
(assert (forall ((n@144@01 $Ref)) (!
  (=>
    (Set_in n@144@01 g@125@01)
    (and (= (inv@145@01 n@144@01) n@144@01) (img@146@01 n@144@01)))
  :pattern ((Set_in n@144@01 g@125@01))
  :pattern ((inv@145@01 n@144@01))
  :pattern ((img@146@01 n@144@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@146@01 r) (Set_in (inv@145@01 r) g@125@01)) (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@148@01  $FVF<next>)))
      (and (Set_in (inv@145@01 r) g@125@01) (img@146@01 r)))
    (=>
      (and (Set_in (inv@145@01 r) g@125@01) (img@146@01 r))
      (Set_in r ($FVF.domain_next (as sm@148@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@148@01  $FVF<next>))))
  :qid |qp.fvfDomDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) g@125@01) (img@146@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@145@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@147@01  $FVF<next>) r) r))
    :pattern ((inv@145@01 r))
    :qid |quant-u-7996|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@148@01  $FVF<next>)) g@125@01)))
(assert (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@148@01  $FVF<next>)) g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))
  $Snap.unit))
; [eval] (forall v: Ref :: { exists_path($$(g), xe, v) } (v in g) ==> exists_path($$(g), xe, v))
(declare-const v@149@01 $Ref)
(push) ; 2
; [eval] (v in g) ==> exists_path($$(g), xe, v)
; [eval] (v in g)
(push) ; 3
; [then-branch: 31 | v@149@01 in g@125@01 | live]
; [else-branch: 31 | !(v@149@01 in g@125@01) | live]
(push) ; 4
; [then-branch: 31 | v@149@01 in g@125@01]
(assert (Set_in v@149@01 g@125@01))
; [eval] exists_path($$(g), xe, v)
; [eval] $$(g)
(push) ; 5
(declare-const n@150@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@150@01 g@125@01))
(pop) ; 6
(declare-fun inv@151@01 ($Ref) $Ref)
(declare-fun img@152@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@153@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@150@01 $Ref) (n2@150@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@150@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@153@01  $FVF<next>) n1@150@01) n1@150@01))
      (and
        (Set_in n2@150@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@153@01  $FVF<next>) n2@150@01) n2@150@01))
      (= n1@150@01 n2@150@01))
    (= n1@150@01 n2@150@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g@125@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g@125@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g@125@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@151@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@153@01  $FVF<next>) r) r))
  :pattern ((inv@151@01 r))
  :qid |quant-u-7999|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r) (= r (inv@151@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8000|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@154@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@154@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@154@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@154@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@154@01  $FVF<next>)) g@125@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g@125@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g@125@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g@125@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@154@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@154@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@154@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@151@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@153@01  $FVF<next>) r) r))
    :pattern ((inv@151@01 r))
    :qid |quant-u-7999|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@154@01  $FVF<next>)) g@125@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 31 | !(v@149@01 in g@125@01)]
(assert (not (Set_in v@149@01 g@125@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g@125@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g@125@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g@125@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@154@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@154@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@154@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert (=>
  (Set_in v@149@01 g@125@01)
  (and
    (Set_in v@149@01 g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@151@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@153@01  $FVF<next>) r) r))
      :pattern ((inv@151@01 r))
      :qid |quant-u-7999|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@154@01  $FVF<next>)) g@125@01))))
; Joined path conditions
(assert (or (not (Set_in v@149@01 g@125@01)) (Set_in v@149@01 g@125@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g@125@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g@125@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g@125@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@154@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g@125@01) (img@152@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@154@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@154@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@154@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in v@149@01 g@125@01)
      (and
        (Set_in v@149@01 g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@151@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@153@01  $FVF<next>) r) r))
          :pattern ((inv@151@01 r))
          :qid |quant-u-7999|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@154@01  $FVF<next>)) g@125@01)))
    (or (not (Set_in v@149@01 g@125@01)) (Set_in v@149@01 g@125@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@154@01  $FVF<next>)) g@125@01) xe@126@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@392@14@392@90-aux|)))
(assert (forall ((v@149@01 $Ref)) (!
  (=>
    (Set_in v@149@01 g@125@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@154@01  $FVF<next>)) g@125@01) xe@126@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@154@01  $FVF<next>)) g@125@01) xe@126@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@392@14@392@90|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var old_g: Set[Edge]
(declare-const old_g@155@01 Set<Edge>)
; [exec]
; var t: Ref
(declare-const t@156@01 $Ref)
; [exec]
; var x: Ref
(declare-const x@157@01 $Ref)
; [exec]
; old_g := $$(g)
; [eval] $$(g)
(push) ; 3
(declare-const n@158@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@158@01 g@125@01))
(pop) ; 4
(declare-fun inv@159@01 ($Ref) $Ref)
(declare-fun img@160@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@161@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@161@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@161@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@161@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef128|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@158@01 $Ref) (n2@158@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@158@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@161@01  $FVF<next>) n1@158@01) n1@158@01))
      (and
        (Set_in n2@158@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@161@01  $FVF<next>) n2@158@01) n2@158@01))
      (= n1@158@01 n2@158@01))
    (= n1@158@01 n2@158@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@158@01 $Ref)) (!
  (=>
    (Set_in n@158@01 g@125@01)
    (and (= (inv@159@01 n@158@01) n@158@01) (img@160@01 n@158@01)))
  :pattern ((Set_in n@158@01 g@125@01))
  :pattern ((inv@159@01 n@158@01))
  :pattern ((img@160@01 n@158@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@160@01 r) (Set_in (inv@159@01 r) g@125@01)) (= (inv@159@01 r) r))
  :pattern ((inv@159@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@159@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@161@01  $FVF<next>) r) r))
  :pattern ((inv@159@01 r))
  :qid |quant-u-8002|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@159@01 r) g@125@01) (img@160@01 r) (= r (inv@159@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8003|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@162@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@162@01  $FVF<next>)))
      (and (Set_in (inv@159@01 r) g@125@01) (img@160@01 r)))
    (=>
      (and (Set_in (inv@159@01 r) g@125@01) (img@160@01 r))
      (Set_in r ($FVF.domain_next (as sm@162@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@162@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@159@01 r) g@125@01) (img@160@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@162@01  $FVF<next>)) g@125@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@161@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@161@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@161@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef128|)))
(assert (forall ((n@158@01 $Ref)) (!
  (=>
    (Set_in n@158@01 g@125@01)
    (and (= (inv@159@01 n@158@01) n@158@01) (img@160@01 n@158@01)))
  :pattern ((Set_in n@158@01 g@125@01))
  :pattern ((inv@159@01 n@158@01))
  :pattern ((img@160@01 n@158@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@160@01 r) (Set_in (inv@159@01 r) g@125@01)) (= (inv@159@01 r) r))
  :pattern ((inv@159@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@162@01  $FVF<next>)))
      (and (Set_in (inv@159@01 r) g@125@01) (img@160@01 r)))
    (=>
      (and (Set_in (inv@159@01 r) g@125@01) (img@160@01 r))
      (Set_in r ($FVF.domain_next (as sm@162@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@162@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@159@01 r) g@125@01) (img@160@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@159@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@161@01  $FVF<next>) r) r))
    :pattern ((inv@159@01 r))
    :qid |quant-u-8002|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@162@01  $FVF<next>)) g@125@01)))
(declare-const old_g@163@01 Set<Edge>)
(assert (=
  old_g@163@01
  ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@162@01  $FVF<next>)) g@125@01)))
; [exec]
; t := null
; [exec]
; x := xe
; [exec]
; y := null
(declare-const save_g@164@01 Set<Edge>)
(declare-const save_y@165@01 $Ref)
(declare-const save_x@166@01 $Ref)
(declare-const t@167@01 $Ref)
(declare-const y@168@01 $Ref)
(declare-const x@169@01 $Ref)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 ($Snap.combine ($Snap.first $t@170@01) ($Snap.second $t@170@01))))
(assert (= ($Snap.first $t@170@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@170@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@170@01))
    ($Snap.second ($Snap.second $t@170@01)))))
(declare-const n$1@171@01 $Ref)
(push) ; 4
; [eval] (n$1 in g)
(assert (Set_in n$1@171@01 g@125@01))
(declare-const sm@172@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@173@01 ($Ref) $Ref)
(declare-fun img@174@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$11@171@01 $Ref) (n$12@171@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@171@01 g@125@01)
      (Set_in n$12@171@01 g@125@01)
      (= n$11@171@01 n$12@171@01))
    (= n$11@171@01 n$12@171@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@171@01 $Ref)) (!
  (=>
    (Set_in n$1@171@01 g@125@01)
    (and (= (inv@173@01 n$1@171@01) n$1@171@01) (img@174@01 n$1@171@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) n$1@171@01) n$1@171@01))
  :qid |quant-u-8005|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)) (= (inv@173@01 r) r))
  :pattern ((inv@173@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@171@01 $Ref)) (!
  (=> (Set_in n$1@171@01 g@125@01) (not (= n$1@171@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) n$1@171@01) n$1@171@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@175@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@175@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@173@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
  :pattern ((inv@173@01 r))
  :qid |quant-u-8006|)))
(assert (=
  ($Snap.second ($Snap.second $t@170@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@170@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@170@01))) $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@176@01 $Ref)
(push) ; 4
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 5
; [then-branch: 32 | !(n$2@176@01 in g@125@01) | live]
; [else-branch: 32 | n$2@176@01 in g@125@01 | live]
(push) ; 6
; [then-branch: 32 | !(n$2@176@01 in g@125@01)]
(assert (not (Set_in n$2@176@01 g@125@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 32 | n$2@176@01 in g@125@01]
(assert (Set_in n$2@176@01 g@125@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@175@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef133|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef134|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01))
(push) ; 7
(assert (not (and (img@174@01 n$2@176@01) (Set_in (inv@173@01 n$2@176@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@175@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (=>
  (Set_in n$2@176@01 g@125@01)
  (and
    (Set_in n$2@176@01 g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01))))
(assert (or (Set_in n$2@176@01 g@125@01) (not (Set_in n$2@176@01 g@125@01))))
(push) ; 5
; [then-branch: 33 | n$2@176@01 in g@125@01 && Lookup(next, sm@175@01, n$2@176@01) != Null | live]
; [else-branch: 33 | !(n$2@176@01 in g@125@01 && Lookup(next, sm@175@01, n$2@176@01) != Null) | live]
(push) ; 6
; [then-branch: 33 | n$2@176@01 in g@125@01 && Lookup(next, sm@175@01, n$2@176@01) != Null]
(assert (and
  (Set_in n$2@176@01 g@125@01)
  (not (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@175@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef133|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef134|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01))
(push) ; 7
(assert (not (and (img@174@01 n$2@176@01) (Set_in (inv@173@01 n$2@176@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 33 | !(n$2@176@01 in g@125@01 && Lookup(next, sm@175@01, n$2@176@01) != Null)]
(assert (not
  (and
    (Set_in n$2@176@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@175@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (=>
  (and
    (Set_in n$2@176@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))
  (and
    (Set_in n$2@176@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@176@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null))))
  (and
    (Set_in n$2@176@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@175@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@176@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@176@01 g@125@01)
      (and
        (Set_in n$2@176@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01)))
    (or (Set_in n$2@176@01 g@125@01) (not (Set_in n$2@176@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01)))
    (or
      (not
        (and
          (Set_in n$2@176@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01)
              $Ref.null))))
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) g@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@176@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@176@01 g@125@01)
      (and
        (Set_in n$2@176@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01)))
    (or (Set_in n$2@176@01 g@125@01) (not (Set_in n$2@176@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01)))
    (or
      (not
        (and
          (Set_in n$2@176@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01)
              $Ref.null))))
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))))
  :pattern ((Set_in n$2@176@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@176@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@176@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) g@125@01))
  :pattern ((Set_in n$2@176@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@170@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
  $Snap.unit))
; [eval] x != null ==> (x in g)
; [eval] x != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= x@169@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= x@169@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | x@169@01 != Null | live]
; [else-branch: 34 | x@169@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 34 | x@169@01 != Null]
(assert (not (= x@169@01 $Ref.null)))
; [eval] (x in g)
(pop) ; 5
(push) ; 5
; [else-branch: 34 | x@169@01 == Null]
(assert (= x@169@01 $Ref.null))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (= x@169@01 $Ref.null) (not (= x@169@01 $Ref.null))))
(assert (=> (not (= x@169@01 $Ref.null)) (Set_in x@169@01 g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
  $Snap.unit))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= y@168@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= y@168@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | y@168@01 != Null | live]
; [else-branch: 35 | y@168@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 35 | y@168@01 != Null]
(assert (not (= y@168@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 5
(push) ; 5
; [else-branch: 35 | y@168@01 == Null]
(assert (= y@168@01 $Ref.null))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (= y@168@01 $Ref.null) (not (= y@168@01 $Ref.null))))
(assert (=> (not (= y@168@01 $Ref.null)) (Set_in y@168@01 g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { exists_path($$(g), x, n) } { exists_path($$(g), y, n) } (n in g) ==> exists_path($$(g), x, n) || exists_path($$(g), y, n))
(declare-const n@177@01 $Ref)
(push) ; 4
; [eval] (n in g) ==> exists_path($$(g), x, n) || exists_path($$(g), y, n)
; [eval] (n in g)
(push) ; 5
; [then-branch: 36 | n@177@01 in g@125@01 | live]
; [else-branch: 36 | !(n@177@01 in g@125@01) | live]
(push) ; 6
; [then-branch: 36 | n@177@01 in g@125@01]
(assert (Set_in n@177@01 g@125@01))
; [eval] exists_path($$(g), x, n) || exists_path($$(g), y, n)
; [eval] exists_path($$(g), x, n)
; [eval] $$(g)
(push) ; 7
(declare-const n@178@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@178@01 g@125@01))
(pop) ; 8
(declare-fun inv@179@01 ($Ref) $Ref)
(declare-fun img@180@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@178@01 $Ref) (n2@178@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@178@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n1@178@01) n1@178@01))
      (and
        (Set_in n2@178@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n2@178@01) n2@178@01))
      (= n1@178@01 n2@178@01))
    (= n1@178@01 n2@178@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@178@01 $Ref)) (!
  (=>
    (Set_in n@178@01 g@125@01)
    (and (= (inv@179@01 n@178@01) n@178@01) (img@180@01 n@178@01)))
  :pattern ((Set_in n@178@01 g@125@01))
  :pattern ((inv@179@01 n@178@01))
  :pattern ((img@180@01 n@178@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@180@01 r) (Set_in (inv@179@01 r) g@125@01)) (= (inv@179@01 r) r))
  :pattern ((inv@179@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@179@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
  :pattern ((inv@179@01 r))
  :qid |quant-u-8008|)))
(push) ; 8
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r) (= r (inv@179@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8009|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const sm@181@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>)))
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r)))
    (=>
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r))
      (Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>))))
  :qid |qp.fvfDomDef137|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@181@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((n@178@01 $Ref)) (!
  (=>
    (Set_in n@178@01 g@125@01)
    (and (= (inv@179@01 n@178@01) n@178@01) (img@180@01 n@178@01)))
  :pattern ((Set_in n@178@01 g@125@01))
  :pattern ((inv@179@01 n@178@01))
  :pattern ((img@180@01 n@178@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@180@01 r) (Set_in (inv@179@01 r) g@125@01)) (= (inv@179@01 r) r))
  :pattern ((inv@179@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>)))
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r)))
    (=>
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r))
      (Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@181@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@179@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
    :pattern ((inv@179@01 r))
    :qid |quant-u-8008|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01)))
(push) ; 7
; [then-branch: 37 | exists_path[Bool]($$(sm@181@01, g@125@01), x@169@01, n@177@01) | live]
; [else-branch: 37 | !(exists_path[Bool]($$(sm@181@01, g@125@01), x@169@01, n@177@01)) | live]
(push) ; 8
; [then-branch: 37 | exists_path[Bool]($$(sm@181@01, g@125@01), x@169@01, n@177@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
(pop) ; 8
(push) ; 8
; [else-branch: 37 | !(exists_path[Bool]($$(sm@181@01, g@125@01), x@169@01, n@177@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01)))
; [eval] exists_path($$(g), y, n)
; [eval] $$(g)
(push) ; 9
(declare-const n@182@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@182@01 g@125@01))
(pop) ; 10
(declare-fun inv@183@01 ($Ref) $Ref)
(declare-fun img@184@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@185@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@185@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@182@01 $Ref) (n2@182@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@182@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@185@01  $FVF<next>) n1@182@01) n1@182@01))
      (and
        (Set_in n2@182@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@185@01  $FVF<next>) n2@182@01) n2@182@01))
      (= n1@182@01 n2@182@01))
    (= n1@182@01 n2@182@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@182@01 $Ref)) (!
  (=>
    (Set_in n@182@01 g@125@01)
    (and (= (inv@183@01 n@182@01) n@182@01) (img@184@01 n@182@01)))
  :pattern ((Set_in n@182@01 g@125@01))
  :pattern ((inv@183@01 n@182@01))
  :pattern ((img@184@01 n@182@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@184@01 r) (Set_in (inv@183@01 r) g@125@01)) (= (inv@183@01 r) r))
  :pattern ((inv@183@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@183@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@185@01  $FVF<next>) r) r))
  :pattern ((inv@183@01 r))
  :qid |quant-u-8011|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r) (= r (inv@183@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8012|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const sm@186@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r)))
    (=>
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@185@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((n@182@01 $Ref)) (!
  (=>
    (Set_in n@182@01 g@125@01)
    (and (= (inv@183@01 n@182@01) n@182@01) (img@184@01 n@182@01)))
  :pattern ((Set_in n@182@01 g@125@01))
  :pattern ((inv@183@01 n@182@01))
  :pattern ((img@184@01 n@182@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@184@01 r) (Set_in (inv@183@01 r) g@125@01)) (= (inv@183@01 r) r))
  :pattern ((inv@183@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r)))
    (=>
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@183@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@185@01  $FVF<next>) r) r))
    :pattern ((inv@183@01 r))
    :qid |quant-u-8011|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@185@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((n@182@01 $Ref)) (!
  (=>
    (Set_in n@182@01 g@125@01)
    (and (= (inv@183@01 n@182@01) n@182@01) (img@184@01 n@182@01)))
  :pattern ((Set_in n@182@01 g@125@01))
  :pattern ((inv@183@01 n@182@01))
  :pattern ((img@184@01 n@182@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@184@01 r) (Set_in (inv@183@01 r) g@125@01)) (= (inv@183@01 r) r))
  :pattern ((inv@183@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r)))
    (=>
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
  (and
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@183@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@185@01  $FVF<next>) r) r))
      :pattern ((inv@183@01 r))
      :qid |quant-u-8011|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 36 | !(n@177@01 in g@125@01)]
(assert (not (Set_in n@177@01 g@125@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((n@178@01 $Ref)) (!
  (=>
    (Set_in n@178@01 g@125@01)
    (and (= (inv@179@01 n@178@01) n@178@01) (img@180@01 n@178@01)))
  :pattern ((Set_in n@178@01 g@125@01))
  :pattern ((inv@179@01 n@178@01))
  :pattern ((img@180@01 n@178@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@180@01 r) (Set_in (inv@179@01 r) g@125@01)) (= (inv@179@01 r) r))
  :pattern ((inv@179@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>)))
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r)))
    (=>
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r))
      (Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@181@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@185@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((n@182@01 $Ref)) (!
  (=>
    (Set_in n@182@01 g@125@01)
    (and (= (inv@183@01 n@182@01) n@182@01) (img@184@01 n@182@01)))
  :pattern ((Set_in n@182@01 g@125@01))
  :pattern ((inv@183@01 n@182@01))
  :pattern ((img@184@01 n@182@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@184@01 r) (Set_in (inv@183@01 r) g@125@01)) (= (inv@183@01 r) r))
  :pattern ((inv@183@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r)))
    (=>
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (=>
  (Set_in n@177@01 g@125@01)
  (and
    (Set_in n@177@01 g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@179@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
      :pattern ((inv@179@01 r))
      :qid |quant-u-8008|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
      (and
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@183@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@185@01  $FVF<next>) r) r))
          :pattern ((inv@183@01 r))
          :qid |quant-u-8011|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01)))))
; Joined path conditions
(assert (or (not (Set_in n@177@01 g@125@01)) (Set_in n@177@01 g@125@01)))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@178@01 $Ref)) (!
  (=>
    (Set_in n@178@01 g@125@01)
    (and (= (inv@179@01 n@178@01) n@178@01) (img@180@01 n@178@01)))
  :pattern ((Set_in n@178@01 g@125@01))
  :pattern ((inv@179@01 n@178@01))
  :pattern ((img@180@01 n@178@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@180@01 r) (Set_in (inv@179@01 r) g@125@01)) (= (inv@179@01 r) r))
  :pattern ((inv@179@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>)))
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r)))
    (=>
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r))
      (Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@181@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@185@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((n@182@01 $Ref)) (!
  (=>
    (Set_in n@182@01 g@125@01)
    (and (= (inv@183@01 n@182@01) n@182@01) (img@184@01 n@182@01)))
  :pattern ((Set_in n@182@01 g@125@01))
  :pattern ((inv@183@01 n@182@01))
  :pattern ((img@184@01 n@182@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@184@01 r) (Set_in (inv@183@01 r) g@125@01)) (= (inv@183@01 r) r))
  :pattern ((inv@183@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r)))
    (=>
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@177@01 $Ref)) (!
  (and
    (=>
      (Set_in n@177@01 g@125@01)
      (and
        (Set_in n@177@01 g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@179@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
          :pattern ((inv@179@01 r))
          :qid |quant-u-8008|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@183@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@185@01  $FVF<next>) r) r))
              :pattern ((inv@183@01 r))
              :qid |quant-u-8011|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))))
    (or (not (Set_in n@177@01 g@125@01)) (Set_in n@177@01 g@125@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@177@01 $Ref)) (!
  (and
    (=>
      (Set_in n@177@01 g@125@01)
      (and
        (Set_in n@177@01 g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@179@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
          :pattern ((inv@179@01 r))
          :qid |quant-u-8008|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@183@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@185@01  $FVF<next>) r) r))
              :pattern ((inv@183@01 r))
              :qid |quant-u-8011|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))))
    (or (not (Set_in n@177@01 g@125@01)) (Set_in n@177@01 g@125@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01) y@168@01 n@177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@125@01)
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01) y@168@01 n@177@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01) y@168@01 n@177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  $Snap.unit))
; [eval] acyclic_graph($$(g))
; [eval] $$(g)
(push) ; 4
(declare-const n@187@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@187@01 g@125@01))
(pop) ; 5
(declare-fun inv@188@01 ($Ref) $Ref)
(declare-fun img@189@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@187@01 $Ref) (n2@187@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@187@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n1@187@01) n1@187@01))
      (and
        (Set_in n2@187@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n2@187@01) n2@187@01))
      (= n1@187@01 n2@187@01))
    (= n1@187@01 n2@187@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@187@01 $Ref)) (!
  (=>
    (Set_in n@187@01 g@125@01)
    (and (= (inv@188@01 n@187@01) n@187@01) (img@189@01 n@187@01)))
  :pattern ((Set_in n@187@01 g@125@01))
  :pattern ((inv@188@01 n@187@01))
  :pattern ((img@189@01 n@187@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@189@01 r) (Set_in (inv@188@01 r) g@125@01)) (= (inv@188@01 r) r))
  :pattern ((inv@188@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@188@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
  :pattern ((inv@188@01 r))
  :qid |quant-u-8014|)))
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@188@01 r) g@125@01) (img@189@01 r) (= r (inv@188@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8015|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@190@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@188@01 r) g@125@01) (img@189@01 r)))
    (=>
      (and (Set_in (inv@188@01 r) g@125@01) (img@189@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@188@01 r) g@125@01) (img@189@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@125@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((n@187@01 $Ref)) (!
  (=>
    (Set_in n@187@01 g@125@01)
    (and (= (inv@188@01 n@187@01) n@187@01) (img@189@01 n@187@01)))
  :pattern ((Set_in n@187@01 g@125@01))
  :pattern ((inv@188@01 n@187@01))
  :pattern ((img@189@01 n@187@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@189@01 r) (Set_in (inv@188@01 r) g@125@01)) (= (inv@188@01 r) r))
  :pattern ((inv@188@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@188@01 r) g@125@01) (img@189@01 r)))
    (=>
      (and (Set_in (inv@188@01 r) g@125@01) (img@189@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@188@01 r) g@125@01) (img@189@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@188@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
    :pattern ((inv@188@01 r))
    :qid |quant-u-8014|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@125@01)))
(assert (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
  $Snap.unit))
; [eval] unshared_graph($$(g))
; [eval] $$(g)
(push) ; 4
(declare-const n@191@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@191@01 g@125@01))
(pop) ; 5
(declare-fun inv@192@01 ($Ref) $Ref)
(declare-fun img@193@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@194@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@194@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@194@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@194@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef147|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@191@01 $Ref) (n2@191@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@191@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@194@01  $FVF<next>) n1@191@01) n1@191@01))
      (and
        (Set_in n2@191@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@194@01  $FVF<next>) n2@191@01) n2@191@01))
      (= n1@191@01 n2@191@01))
    (= n1@191@01 n2@191@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@191@01 $Ref)) (!
  (=>
    (Set_in n@191@01 g@125@01)
    (and (= (inv@192@01 n@191@01) n@191@01) (img@193@01 n@191@01)))
  :pattern ((Set_in n@191@01 g@125@01))
  :pattern ((inv@192@01 n@191@01))
  :pattern ((img@193@01 n@191@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@193@01 r) (Set_in (inv@192@01 r) g@125@01)) (= (inv@192@01 r) r))
  :pattern ((inv@192@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@192@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@194@01  $FVF<next>) r) r))
  :pattern ((inv@192@01 r))
  :qid |quant-u-8017|)))
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@192@01 r) g@125@01) (img@193@01 r) (= r (inv@192@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8018|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@195@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))
      (and (Set_in (inv@192@01 r) g@125@01) (img@193@01 r)))
    (=>
      (and (Set_in (inv@192@01 r) g@125@01) (img@193@01 r))
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>))))
  :qid |qp.fvfDomDef150|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@192@01 r) g@125@01) (img@193@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef149|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g@125@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@194@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@194@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@194@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef147|)))
(assert (forall ((n@191@01 $Ref)) (!
  (=>
    (Set_in n@191@01 g@125@01)
    (and (= (inv@192@01 n@191@01) n@191@01) (img@193@01 n@191@01)))
  :pattern ((Set_in n@191@01 g@125@01))
  :pattern ((inv@192@01 n@191@01))
  :pattern ((img@193@01 n@191@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@193@01 r) (Set_in (inv@192@01 r) g@125@01)) (= (inv@192@01 r) r))
  :pattern ((inv@192@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))
      (and (Set_in (inv@192@01 r) g@125@01) (img@193@01 r)))
    (=>
      (and (Set_in (inv@192@01 r) g@125@01) (img@193@01 r))
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>))))
  :qid |qp.fvfDomDef150|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@192@01 r) g@125@01) (img@193@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef149|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@192@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@194@01  $FVF<next>) r) r))
    :pattern ((inv@192@01 r))
    :qid |quant-u-8017|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g@125@01)))
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
  $Snap.unit))
; [eval] func_graph($$(g))
; [eval] $$(g)
(push) ; 4
(declare-const n@196@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@196@01 g@125@01))
(pop) ; 5
(declare-fun inv@197@01 ($Ref) $Ref)
(declare-fun img@198@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@199@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef152|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@196@01 $Ref) (n2@196@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@196@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) n1@196@01) n1@196@01))
      (and
        (Set_in n2@196@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) n2@196@01) n2@196@01))
      (= n1@196@01 n2@196@01))
    (= n1@196@01 n2@196@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@196@01 $Ref)) (!
  (=>
    (Set_in n@196@01 g@125@01)
    (and (= (inv@197@01 n@196@01) n@196@01) (img@198@01 n@196@01)))
  :pattern ((Set_in n@196@01 g@125@01))
  :pattern ((inv@197@01 n@196@01))
  :pattern ((img@198@01 n@196@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@198@01 r) (Set_in (inv@197@01 r) g@125@01)) (= (inv@197@01 r) r))
  :pattern ((inv@197@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@197@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
  :pattern ((inv@197@01 r))
  :qid |quant-u-8020|)))
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@197@01 r) g@125@01) (img@198@01 r) (= r (inv@197@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8021|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@200@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@200@01  $FVF<next>)))
      (and (Set_in (inv@197@01 r) g@125@01) (img@198@01 r)))
    (=>
      (and (Set_in (inv@197@01 r) g@125@01) (img@198@01 r))
      (Set_in r ($FVF.domain_next (as sm@200@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@200@01  $FVF<next>))))
  :qid |qp.fvfDomDef155|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) g@125@01) (img@198@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@200@01  $FVF<next>)) g@125@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef152|)))
(assert (forall ((n@196@01 $Ref)) (!
  (=>
    (Set_in n@196@01 g@125@01)
    (and (= (inv@197@01 n@196@01) n@196@01) (img@198@01 n@196@01)))
  :pattern ((Set_in n@196@01 g@125@01))
  :pattern ((inv@197@01 n@196@01))
  :pattern ((img@198@01 n@196@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@198@01 r) (Set_in (inv@197@01 r) g@125@01)) (= (inv@197@01 r) r))
  :pattern ((inv@197@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@200@01  $FVF<next>)))
      (and (Set_in (inv@197@01 r) g@125@01) (img@198@01 r)))
    (=>
      (and (Set_in (inv@197@01 r) g@125@01) (img@198@01 r))
      (Set_in r ($FVF.domain_next (as sm@200@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@200@01  $FVF<next>))))
  :qid |qp.fvfDomDef155|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) g@125@01) (img@198@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@197@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
    :pattern ((inv@197@01 r))
    :qid |quant-u-8020|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@200@01  $FVF<next>)) g@125@01)))
(assert (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@200@01  $FVF<next>)) g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
  $Snap.unit))
; [eval] x != xe && x != null ==> !exists_path($$(g), x, xe)
; [eval] x != xe && x != null
; [eval] x != xe
(push) ; 4
; [then-branch: 38 | x@169@01 == xe@126@01 | live]
; [else-branch: 38 | x@169@01 != xe@126@01 | live]
(push) ; 5
; [then-branch: 38 | x@169@01 == xe@126@01]
(assert (= x@169@01 xe@126@01))
(pop) ; 5
(push) ; 5
; [else-branch: 38 | x@169@01 != xe@126@01]
(assert (not (= x@169@01 xe@126@01)))
; [eval] x != null
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= x@169@01 xe@126@01)) (= x@169@01 xe@126@01)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 39 | x@169@01 != xe@126@01 && x@169@01 != Null | live]
; [else-branch: 39 | !(x@169@01 != xe@126@01 && x@169@01 != Null) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 39 | x@169@01 != xe@126@01 && x@169@01 != Null]
(assert (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null))))
; [eval] !exists_path($$(g), x, xe)
; [eval] exists_path($$(g), x, xe)
; [eval] $$(g)
(push) ; 6
(declare-const n@201@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@201@01 g@125@01))
(pop) ; 7
(declare-fun inv@202@01 ($Ref) $Ref)
(declare-fun img@203@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@204@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@204@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@204@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@204@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef157|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@201@01 $Ref) (n2@201@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@201@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@204@01  $FVF<next>) n1@201@01) n1@201@01))
      (and
        (Set_in n2@201@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@204@01  $FVF<next>) n2@201@01) n2@201@01))
      (= n1@201@01 n2@201@01))
    (= n1@201@01 n2@201@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@201@01 $Ref)) (!
  (=>
    (Set_in n@201@01 g@125@01)
    (and (= (inv@202@01 n@201@01) n@201@01) (img@203@01 n@201@01)))
  :pattern ((Set_in n@201@01 g@125@01))
  :pattern ((inv@202@01 n@201@01))
  :pattern ((img@203@01 n@201@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@203@01 r) (Set_in (inv@202@01 r) g@125@01)) (= (inv@202@01 r) r))
  :pattern ((inv@202@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@202@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@204@01  $FVF<next>) r) r))
  :pattern ((inv@202@01 r))
  :qid |quant-u-8023|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r) (= r (inv@202@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8024|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@205@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>)))
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r)))
    (=>
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r))
      (Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>))))
  :qid |qp.fvfDomDef160|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@205@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@205@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@205@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@205@01  $FVF<next>)) g@125@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@204@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@204@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@204@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef157|)))
(assert (forall ((n@201@01 $Ref)) (!
  (=>
    (Set_in n@201@01 g@125@01)
    (and (= (inv@202@01 n@201@01) n@201@01) (img@203@01 n@201@01)))
  :pattern ((Set_in n@201@01 g@125@01))
  :pattern ((inv@202@01 n@201@01))
  :pattern ((img@203@01 n@201@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@203@01 r) (Set_in (inv@202@01 r) g@125@01)) (= (inv@202@01 r) r))
  :pattern ((inv@202@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>)))
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r)))
    (=>
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r))
      (Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>))))
  :qid |qp.fvfDomDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@205@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@205@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@205@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@202@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@204@01  $FVF<next>) r) r))
    :pattern ((inv@202@01 r))
    :qid |quant-u-8023|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@205@01  $FVF<next>)) g@125@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 39 | !(x@169@01 != xe@126@01 && x@169@01 != Null)]
(assert (not (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@204@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@204@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@204@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef157|)))
(assert (forall ((n@201@01 $Ref)) (!
  (=>
    (Set_in n@201@01 g@125@01)
    (and (= (inv@202@01 n@201@01) n@201@01) (img@203@01 n@201@01)))
  :pattern ((Set_in n@201@01 g@125@01))
  :pattern ((inv@202@01 n@201@01))
  :pattern ((img@203@01 n@201@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@203@01 r) (Set_in (inv@202@01 r) g@125@01)) (= (inv@202@01 r) r))
  :pattern ((inv@202@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>)))
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r)))
    (=>
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r))
      (Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>))))
  :qid |qp.fvfDomDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@205@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@205@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@205@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert (=>
  (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null)))
  (and
    (not (= x@169@01 xe@126@01))
    (not (= x@169@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@202@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@204@01  $FVF<next>) r) r))
      :pattern ((inv@202@01 r))
      :qid |quant-u-8023|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@205@01  $FVF<next>)) g@125@01))))
; Joined path conditions
(assert (or
  (not (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null))))
  (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null)))))
(assert (=>
  (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null)))
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@205@01  $FVF<next>)) g@125@01) x@169@01 xe@126@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
  $Snap.unit))
; [eval] x != null ==> !edge($$(g), x, y)
; [eval] x != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= x@169@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= x@169@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 40 | x@169@01 != Null | live]
; [else-branch: 40 | x@169@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 40 | x@169@01 != Null]
(assert (not (= x@169@01 $Ref.null)))
; [eval] !edge($$(g), x, y)
; [eval] edge($$(g), x, y)
; [eval] $$(g)
(push) ; 6
(declare-const n@206@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@206@01 g@125@01))
(pop) ; 7
(declare-fun inv@207@01 ($Ref) $Ref)
(declare-fun img@208@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@209@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@209@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@209@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@209@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@206@01 $Ref) (n2@206@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@206@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@209@01  $FVF<next>) n1@206@01) n1@206@01))
      (and
        (Set_in n2@206@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@209@01  $FVF<next>) n2@206@01) n2@206@01))
      (= n1@206@01 n2@206@01))
    (= n1@206@01 n2@206@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@206@01 $Ref)) (!
  (=>
    (Set_in n@206@01 g@125@01)
    (and (= (inv@207@01 n@206@01) n@206@01) (img@208@01 n@206@01)))
  :pattern ((Set_in n@206@01 g@125@01))
  :pattern ((inv@207@01 n@206@01))
  :pattern ((img@208@01 n@206@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@208@01 r) (Set_in (inv@207@01 r) g@125@01)) (= (inv@207@01 r) r))
  :pattern ((inv@207@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@207@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@209@01  $FVF<next>) r) r))
  :pattern ((inv@207@01 r))
  :qid |quant-u-8026|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r) (= r (inv@207@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8027|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@210@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r)))
    (=>
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef165|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef164|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@125@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@209@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@209@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@209@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@206@01 $Ref)) (!
  (=>
    (Set_in n@206@01 g@125@01)
    (and (= (inv@207@01 n@206@01) n@206@01) (img@208@01 n@206@01)))
  :pattern ((Set_in n@206@01 g@125@01))
  :pattern ((inv@207@01 n@206@01))
  :pattern ((img@208@01 n@206@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@208@01 r) (Set_in (inv@207@01 r) g@125@01)) (= (inv@207@01 r) r))
  :pattern ((inv@207@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r)))
    (=>
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef164|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@207@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@209@01  $FVF<next>) r) r))
    :pattern ((inv@207@01 r))
    :qid |quant-u-8026|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@125@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 40 | x@169@01 == Null]
(assert (= x@169@01 $Ref.null))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@209@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@209@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@209@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@206@01 $Ref)) (!
  (=>
    (Set_in n@206@01 g@125@01)
    (and (= (inv@207@01 n@206@01) n@206@01) (img@208@01 n@206@01)))
  :pattern ((Set_in n@206@01 g@125@01))
  :pattern ((inv@207@01 n@206@01))
  :pattern ((img@208@01 n@206@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@208@01 r) (Set_in (inv@207@01 r) g@125@01)) (= (inv@207@01 r) r))
  :pattern ((inv@207@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r)))
    (=>
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef164|)))
(assert (=>
  (not (= x@169@01 $Ref.null))
  (and
    (not (= x@169@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@207@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@209@01  $FVF<next>) r) r))
      :pattern ((inv@207@01 r))
      :qid |quant-u-8026|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@125@01))))
; Joined path conditions
(assert (=>
  (not (= x@169@01 $Ref.null))
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@125@01) x@169@01 y@168@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
  $Snap.unit))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old_g, v1, v2) } { edge($$(g), v1, v2) } exists_path($$(g), x, v1) ==> edge(old_g, v1, v2) == edge($$(g), v1, v2))
(declare-const v1@211@01 $Ref)
(declare-const v2@212@01 $Ref)
(push) ; 4
; [eval] exists_path($$(g), x, v1) ==> edge(old_g, v1, v2) == edge($$(g), v1, v2)
; [eval] exists_path($$(g), x, v1)
; [eval] $$(g)
(push) ; 5
(declare-const n@213@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@213@01 g@125@01))
(pop) ; 6
(declare-fun inv@214@01 ($Ref) $Ref)
(declare-fun img@215@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@216@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@216@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@216@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@216@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef167|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@213@01 $Ref) (n2@213@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@213@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@216@01  $FVF<next>) n1@213@01) n1@213@01))
      (and
        (Set_in n2@213@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@216@01  $FVF<next>) n2@213@01) n2@213@01))
      (= n1@213@01 n2@213@01))
    (= n1@213@01 n2@213@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@213@01 $Ref)) (!
  (=>
    (Set_in n@213@01 g@125@01)
    (and (= (inv@214@01 n@213@01) n@213@01) (img@215@01 n@213@01)))
  :pattern ((Set_in n@213@01 g@125@01))
  :pattern ((inv@214@01 n@213@01))
  :pattern ((img@215@01 n@213@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@215@01 r) (Set_in (inv@214@01 r) g@125@01)) (= (inv@214@01 r) r))
  :pattern ((inv@214@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@214@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@216@01  $FVF<next>) r) r))
  :pattern ((inv@214@01 r))
  :qid |quant-u-8029|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r) (= r (inv@214@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8030|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@217@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r)))
    (=>
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef170|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@216@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@216@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@216@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef167|)))
(assert (forall ((n@213@01 $Ref)) (!
  (=>
    (Set_in n@213@01 g@125@01)
    (and (= (inv@214@01 n@213@01) n@213@01) (img@215@01 n@213@01)))
  :pattern ((Set_in n@213@01 g@125@01))
  :pattern ((inv@214@01 n@213@01))
  :pattern ((img@215@01 n@213@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@215@01 r) (Set_in (inv@214@01 r) g@125@01)) (= (inv@214@01 r) r))
  :pattern ((inv@214@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r)))
    (=>
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@214@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@216@01  $FVF<next>) r) r))
    :pattern ((inv@214@01 r))
    :qid |quant-u-8029|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01)))
(push) ; 5
; [then-branch: 41 | exists_path[Bool]($$(sm@217@01, g@125@01), x@169@01, v1@211@01) | live]
; [else-branch: 41 | !(exists_path[Bool]($$(sm@217@01, g@125@01), x@169@01, v1@211@01)) | live]
(push) ; 6
; [then-branch: 41 | exists_path[Bool]($$(sm@217@01, g@125@01), x@169@01, v1@211@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01))
; [eval] edge(old_g, v1, v2) == edge($$(g), v1, v2)
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 7
(declare-const n@218@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@218@01 g@125@01))
(pop) ; 8
(declare-fun inv@219@01 ($Ref) $Ref)
(declare-fun img@220@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@221@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@218@01 $Ref) (n2@218@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@218@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) n1@218@01) n1@218@01))
      (and
        (Set_in n2@218@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) n2@218@01) n2@218@01))
      (= n1@218@01 n2@218@01))
    (= n1@218@01 n2@218@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@125@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@125@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@125@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@219@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
  :pattern ((inv@219@01 r))
  :qid |quant-u-8032|)))
(push) ; 8
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r) (= r (inv@219@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8033|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const sm@222@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@125@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@125@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@125@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@219@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
    :pattern ((inv@219@01 r))
    :qid |quant-u-8032|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 41 | !(exists_path[Bool]($$(sm@217@01, g@125@01), x@169@01, v1@211@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@125@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@125@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@125@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@219@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
      :pattern ((inv@219@01 r))
      :qid |quant-u-8032|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01))))
; Joined path conditions
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)))
; [eval] edge(old_g, v1, v2)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@216@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@216@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@216@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef167|)))
(assert (forall ((n@213@01 $Ref)) (!
  (=>
    (Set_in n@213@01 g@125@01)
    (and (= (inv@214@01 n@213@01) n@213@01) (img@215@01 n@213@01)))
  :pattern ((Set_in n@213@01 g@125@01))
  :pattern ((inv@214@01 n@213@01))
  :pattern ((img@215@01 n@213@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@215@01 r) (Set_in (inv@214@01 r) g@125@01)) (= (inv@214@01 r) r))
  :pattern ((inv@214@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r)))
    (=>
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@125@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@125@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@125@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@214@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@216@01  $FVF<next>) r) r))
  :pattern ((inv@214@01 r))
  :qid |quant-u-8029|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@211@01 $Ref) (v2@212@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@219@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
          :pattern ((inv@219@01 r))
          :qid |quant-u-8032|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@211@01 v2@212@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@211@01 $Ref) (v2@212@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@219@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
          :pattern ((inv@219@01 r))
          :qid |quant-u-8032|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01) v1@211@01 v2@212@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@211@01 $Ref) (v2@212@01 $Ref)) (!
  (=>
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
    (=
      (edge<Bool> old_g@163@01 v1@211@01 v2@212@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01) v1@211@01 v2@212@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@211@01 v2@212@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01) v1@211@01 v2@212@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
  $Snap.unit))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old_g, v1, v2) } { edge($$(g), v1, v2) } exists_path($$(g), y, v2) && v1 != y ==> edge(old_g, v1, v2) == edge($$(g), v2, v1))
(declare-const v1@223@01 $Ref)
(declare-const v2@224@01 $Ref)
(push) ; 4
; [eval] exists_path($$(g), y, v2) && v1 != y ==> edge(old_g, v1, v2) == edge($$(g), v2, v1)
; [eval] exists_path($$(g), y, v2) && v1 != y
; [eval] exists_path($$(g), y, v2)
; [eval] $$(g)
(push) ; 5
(declare-const n@225@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@225@01 g@125@01))
(pop) ; 6
(declare-fun inv@226@01 ($Ref) $Ref)
(declare-fun img@227@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@228@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@225@01 $Ref) (n2@225@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@225@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) n1@225@01) n1@225@01))
      (and
        (Set_in n2@225@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) n2@225@01) n2@225@01))
      (= n1@225@01 n2@225@01))
    (= n1@225@01 n2@225@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@225@01 $Ref)) (!
  (=>
    (Set_in n@225@01 g@125@01)
    (and (= (inv@226@01 n@225@01) n@225@01) (img@227@01 n@225@01)))
  :pattern ((Set_in n@225@01 g@125@01))
  :pattern ((inv@226@01 n@225@01))
  :pattern ((img@227@01 n@225@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@227@01 r) (Set_in (inv@226@01 r) g@125@01)) (= (inv@226@01 r) r))
  :pattern ((inv@226@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@226@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) r) r))
  :pattern ((inv@226@01 r))
  :qid |quant-u-8035|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r) (= r (inv@226@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8036|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@229@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r)))
    (=>
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r))
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
(assert (forall ((n@225@01 $Ref)) (!
  (=>
    (Set_in n@225@01 g@125@01)
    (and (= (inv@226@01 n@225@01) n@225@01) (img@227@01 n@225@01)))
  :pattern ((Set_in n@225@01 g@125@01))
  :pattern ((inv@226@01 n@225@01))
  :pattern ((img@227@01 n@225@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@227@01 r) (Set_in (inv@226@01 r) g@125@01)) (= (inv@226@01 r) r))
  :pattern ((inv@226@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r)))
    (=>
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r))
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@226@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) r) r))
    :pattern ((inv@226@01 r))
    :qid |quant-u-8035|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01)))
(push) ; 5
; [then-branch: 42 | !(exists_path[Bool]($$(sm@229@01, g@125@01), y@168@01, v2@224@01)) | live]
; [else-branch: 42 | exists_path[Bool]($$(sm@229@01, g@125@01), y@168@01, v2@224@01) | live]
(push) ; 6
; [then-branch: 42 | !(exists_path[Bool]($$(sm@229@01, g@125@01), y@168@01, v2@224@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 42 | exists_path[Bool]($$(sm@229@01, g@125@01), y@168@01, v2@224@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01))
; [eval] v1 != y
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01))))
(push) ; 5
; [then-branch: 43 | exists_path[Bool]($$(sm@229@01, g@125@01), y@168@01, v2@224@01) && v1@223@01 != y@168@01 | live]
; [else-branch: 43 | !(exists_path[Bool]($$(sm@229@01, g@125@01), y@168@01, v2@224@01) && v1@223@01 != y@168@01) | live]
(push) ; 6
; [then-branch: 43 | exists_path[Bool]($$(sm@229@01, g@125@01), y@168@01, v2@224@01) && v1@223@01 != y@168@01]
(assert (and
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
  (not (= v1@223@01 y@168@01))))
; [eval] edge(old_g, v1, v2) == edge($$(g), v2, v1)
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v2, v1)
; [eval] $$(g)
(push) ; 7
(declare-const n@230@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@230@01 g@125@01))
(pop) ; 8
(declare-fun inv@231@01 ($Ref) $Ref)
(declare-fun img@232@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@233@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@233@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@230@01 $Ref) (n2@230@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@230@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) n1@230@01) n1@230@01))
      (and
        (Set_in n2@230@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) n2@230@01) n2@230@01))
      (= n1@230@01 n2@230@01))
    (= n1@230@01 n2@230@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@230@01 $Ref)) (!
  (=>
    (Set_in n@230@01 g@125@01)
    (and (= (inv@231@01 n@230@01) n@230@01) (img@232@01 n@230@01)))
  :pattern ((Set_in n@230@01 g@125@01))
  :pattern ((inv@231@01 n@230@01))
  :pattern ((img@232@01 n@230@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@232@01 r) (Set_in (inv@231@01 r) g@125@01)) (= (inv@231@01 r) r))
  :pattern ((inv@231@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@231@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) r) r))
  :pattern ((inv@231@01 r))
  :qid |quant-u-8038|)))
(push) ; 8
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r) (= r (inv@231@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8039|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const sm@234@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r)))
    (=>
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r))
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>)) g@125@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@233@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert (forall ((n@230@01 $Ref)) (!
  (=>
    (Set_in n@230@01 g@125@01)
    (and (= (inv@231@01 n@230@01) n@230@01) (img@232@01 n@230@01)))
  :pattern ((Set_in n@230@01 g@125@01))
  :pattern ((inv@231@01 n@230@01))
  :pattern ((img@232@01 n@230@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@232@01 r) (Set_in (inv@231@01 r) g@125@01)) (= (inv@231@01 r) r))
  :pattern ((inv@231@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r)))
    (=>
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r))
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@231@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) r) r))
    :pattern ((inv@231@01 r))
    :qid |quant-u-8038|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>)) g@125@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 43 | !(exists_path[Bool]($$(sm@229@01, g@125@01), y@168@01, v2@224@01) && v1@223@01 != y@168@01)]
(assert (not
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
    (not (= v1@223@01 y@168@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@233@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert (forall ((n@230@01 $Ref)) (!
  (=>
    (Set_in n@230@01 g@125@01)
    (and (= (inv@231@01 n@230@01) n@230@01) (img@232@01 n@230@01)))
  :pattern ((Set_in n@230@01 g@125@01))
  :pattern ((inv@231@01 n@230@01))
  :pattern ((img@232@01 n@230@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@232@01 r) (Set_in (inv@231@01 r) g@125@01)) (= (inv@231@01 r) r))
  :pattern ((inv@231@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r)))
    (=>
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r))
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (=>
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
    (not (= v1@223@01 y@168@01)))
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
    (not (= v1@223@01 y@168@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@231@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) r) r))
      :pattern ((inv@231@01 r))
      :qid |quant-u-8038|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>)) g@125@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
      (not (= v1@223@01 y@168@01))))
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
    (not (= v1@223@01 y@168@01)))))
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 5
(declare-const n@235@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@235@01 g@125@01))
(pop) ; 6
(declare-fun inv@236@01 ($Ref) $Ref)
(declare-fun img@237@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@238@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@238@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@238@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@238@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@235@01 $Ref) (n2@235@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@235@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@238@01  $FVF<next>) n1@235@01) n1@235@01))
      (and
        (Set_in n2@235@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@238@01  $FVF<next>) n2@235@01) n2@235@01))
      (= n1@235@01 n2@235@01))
    (= n1@235@01 n2@235@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@235@01 $Ref)) (!
  (=>
    (Set_in n@235@01 g@125@01)
    (and (= (inv@236@01 n@235@01) n@235@01) (img@237@01 n@235@01)))
  :pattern ((Set_in n@235@01 g@125@01))
  :pattern ((inv@236@01 n@235@01))
  :pattern ((img@237@01 n@235@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@237@01 r) (Set_in (inv@236@01 r) g@125@01)) (= (inv@236@01 r) r))
  :pattern ((inv@236@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@236@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@238@01  $FVF<next>) r) r))
  :pattern ((inv@236@01 r))
  :qid |quant-u-8041|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r) (= r (inv@236@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8042|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@239@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>)))
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r)))
    (=>
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r))
      (Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@239@01  $FVF<next>)) g@125@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@238@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@238@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@238@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@235@01 $Ref)) (!
  (=>
    (Set_in n@235@01 g@125@01)
    (and (= (inv@236@01 n@235@01) n@235@01) (img@237@01 n@235@01)))
  :pattern ((Set_in n@235@01 g@125@01))
  :pattern ((inv@236@01 n@235@01))
  :pattern ((img@237@01 n@235@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@237@01 r) (Set_in (inv@236@01 r) g@125@01)) (= (inv@236@01 r) r))
  :pattern ((inv@236@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>)))
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r)))
    (=>
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r))
      (Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@236@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@238@01  $FVF<next>) r) r))
    :pattern ((inv@236@01 r))
    :qid |quant-u-8041|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@239@01  $FVF<next>)) g@125@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@238@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@238@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@238@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@235@01 $Ref)) (!
  (=>
    (Set_in n@235@01 g@125@01)
    (and (= (inv@236@01 n@235@01) n@235@01) (img@237@01 n@235@01)))
  :pattern ((Set_in n@235@01 g@125@01))
  :pattern ((inv@236@01 n@235@01))
  :pattern ((img@237@01 n@235@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@237@01 r) (Set_in (inv@236@01 r) g@125@01)) (= (inv@236@01 r) r))
  :pattern ((inv@236@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>)))
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r)))
    (=>
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r))
      (Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@236@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@238@01  $FVF<next>) r) r))
  :pattern ((inv@236@01 r))
  :qid |quant-u-8041|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@239@01  $FVF<next>)) g@125@01))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
(assert (forall ((n@225@01 $Ref)) (!
  (=>
    (Set_in n@225@01 g@125@01)
    (and (= (inv@226@01 n@225@01) n@225@01) (img@227@01 n@225@01)))
  :pattern ((Set_in n@225@01 g@125@01))
  :pattern ((inv@226@01 n@225@01))
  :pattern ((img@227@01 n@225@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@227@01 r) (Set_in (inv@226@01 r) g@125@01)) (= (inv@226@01 r) r))
  :pattern ((inv@226@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r)))
    (=>
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r))
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@233@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert (forall ((n@230@01 $Ref)) (!
  (=>
    (Set_in n@230@01 g@125@01)
    (and (= (inv@231@01 n@230@01) n@230@01) (img@232@01 n@230@01)))
  :pattern ((Set_in n@230@01 g@125@01))
  :pattern ((inv@231@01 n@230@01))
  :pattern ((img@232@01 n@230@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@232@01 r) (Set_in (inv@231@01 r) g@125@01)) (= (inv@231@01 r) r))
  :pattern ((inv@231@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r)))
    (=>
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r))
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@238@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@238@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@238@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@235@01 $Ref)) (!
  (=>
    (Set_in n@235@01 g@125@01)
    (and (= (inv@236@01 n@235@01) n@235@01) (img@237@01 n@235@01)))
  :pattern ((Set_in n@235@01 g@125@01))
  :pattern ((inv@236@01 n@235@01))
  :pattern ((img@237@01 n@235@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@237@01 r) (Set_in (inv@236@01 r) g@125@01)) (= (inv@236@01 r) r))
  :pattern ((inv@236@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>)))
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r)))
    (=>
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r))
      (Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@226@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) r) r))
  :pattern ((inv@226@01 r))
  :qid |quant-u-8035|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@236@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@238@01  $FVF<next>) r) r))
  :pattern ((inv@236@01 r))
  :qid |quant-u-8041|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@239@01  $FVF<next>)) g@125@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@223@01 $Ref) (v2@224@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@231@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) r) r))
          :pattern ((inv@231@01 r))
          :qid |quant-u-8038|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
          (not (= v1@223@01 y@168@01))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01)))))
  :pattern ((edge<Bool> old_g@163@01 v1@223@01 v2@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@223@01 $Ref) (v2@224@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@231@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) r) r))
          :pattern ((inv@231@01 r))
          :qid |quant-u-8038|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
          (not (= v1@223@01 y@168@01))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01)))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@239@01  $FVF<next>)) g@125@01) v1@223@01 v2@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@223@01 $Ref) (v2@224@01 $Ref)) (!
  (=>
    (and
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
      (not (= v1@223@01 y@168@01)))
    (=
      (edge<Bool> old_g@163@01 v1@223@01 v2@224@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>)) g@125@01) v2@224@01 v1@223@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@223@01 v2@224@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@239@01  $FVF<next>)) g@125@01) v1@223@01 v2@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
  $Snap.unit))
; [eval] y != null && x != null ==> edge(old_g, y, x)
; [eval] y != null && x != null
; [eval] y != null
(push) ; 4
; [then-branch: 44 | y@168@01 == Null | live]
; [else-branch: 44 | y@168@01 != Null | live]
(push) ; 5
; [then-branch: 44 | y@168@01 == Null]
(assert (= y@168@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 44 | y@168@01 != Null]
(assert (not (= y@168@01 $Ref.null)))
; [eval] x != null
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= y@168@01 $Ref.null)) (= y@168@01 $Ref.null)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (and (not (= y@168@01 $Ref.null)) (not (= x@169@01 $Ref.null))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and (not (= y@168@01 $Ref.null)) (not (= x@169@01 $Ref.null)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 45 | y@168@01 != Null && x@169@01 != Null | live]
; [else-branch: 45 | !(y@168@01 != Null && x@169@01 != Null) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 45 | y@168@01 != Null && x@169@01 != Null]
(assert (and (not (= y@168@01 $Ref.null)) (not (= x@169@01 $Ref.null))))
; [eval] edge(old_g, y, x)
(pop) ; 5
(push) ; 5
; [else-branch: 45 | !(y@168@01 != Null && x@169@01 != Null)]
(assert (not (and (not (= y@168@01 $Ref.null)) (not (= x@169@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (not (= y@168@01 $Ref.null)) (not (= x@169@01 $Ref.null))))
  (and (not (= y@168@01 $Ref.null)) (not (= x@169@01 $Ref.null)))))
(assert (=>
  (and (not (= y@168@01 $Ref.null)) (not (= x@169@01 $Ref.null)))
  (edge<Bool> old_g@163@01 y@168@01 x@169@01)))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$1@240@01 $Ref)
(push) ; 4
; [eval] (n$1 in g)
(assert (Set_in n$1@240@01 g@125@01))
(declare-const sm@241@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@241@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@241@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef191|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@241@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef192|)))
(pop) ; 4
(declare-fun inv@242@01 ($Ref) $Ref)
(declare-fun img@243@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@241@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@241@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef191|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@241@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef192|)))
; Nested auxiliary terms: non-globals
(declare-const sm@244@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@244@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$11@240@01 $Ref) (n$12@240@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@240@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$11@240@01) n$11@240@01))
      (and
        (Set_in n$12@240@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$12@240@01) n$12@240@01))
      (= n$11@240@01 n$12@240@01))
    (= n$11@240@01 n$12@240@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@240@01 $Ref)) (!
  (=>
    (Set_in n$1@240@01 g@125@01)
    (and (= (inv@242@01 n$1@240@01) n$1@240@01) (img@243@01 n$1@240@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@241@01  $FVF<next>) n$1@240@01) n$1@240@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@243@01 r) (Set_in (inv@242@01 r) g@125@01)) (= (inv@242@01 r) r))
  :pattern ((inv@242@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@242@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) r) r))
  :pattern ((inv@242@01 r))
  :qid |quant-u-8044|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@245@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@242@01 r) g@125@01) (img@243@01 r) (= r (inv@242@01 r)))
    ($Perm.min
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      (pTaken@245@01 r))
    $Perm.No)
  
  :qid |quant-u-8046|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@242@01 r) g@125@01) (img@243@01 r) (= r (inv@242@01 r)))
    (= (- $Perm.Write (pTaken@245@01 r)) $Perm.No))
  
  :qid |quant-u-8047|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@246@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 5
; [then-branch: 46 | !(n$2@246@01 in g@125@01) | live]
; [else-branch: 46 | n$2@246@01 in g@125@01 | live]
(push) ; 6
; [then-branch: 46 | !(n$2@246@01 in g@125@01)]
(assert (not (Set_in n$2@246@01 g@125@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 46 | n$2@246@01 in g@125@01]
(assert (Set_in n$2@246@01 g@125@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@244@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
    :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
    :qid |qp.fvfValDef193|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef194|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01))
(push) ; 7
(assert (not (and (img@132@01 n$2@246@01) (Set_in (inv@131@01 n$2@246@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@244@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
(assert (=>
  (Set_in n$2@246@01 g@125@01)
  (and
    (Set_in n$2@246@01 g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01))))
(assert (or (Set_in n$2@246@01 g@125@01) (not (Set_in n$2@246@01 g@125@01))))
(push) ; 5
; [then-branch: 47 | n$2@246@01 in g@125@01 && Lookup(next, sm@244@01, n$2@246@01) != Null | live]
; [else-branch: 47 | !(n$2@246@01 in g@125@01 && Lookup(next, sm@244@01, n$2@246@01) != Null) | live]
(push) ; 6
; [then-branch: 47 | n$2@246@01 in g@125@01 && Lookup(next, sm@244@01, n$2@246@01) != Null]
(assert (and
  (Set_in n$2@246@01 g@125@01)
  (not (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@244@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
    :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
    :qid |qp.fvfValDef193|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef194|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01))
(push) ; 7
(assert (not (and (img@132@01 n$2@246@01) (Set_in (inv@131@01 n$2@246@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 47 | !(n$2@246@01 in g@125@01 && Lookup(next, sm@244@01, n$2@246@01) != Null)]
(assert (not
  (and
    (Set_in n$2@246@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@244@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
(assert (=>
  (and
    (Set_in n$2@246@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null)))
  (and
    (Set_in n$2@246@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@246@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null))))
  (and
    (Set_in n$2@246@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@244@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@244@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@246@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@246@01 g@125@01)
      (and
        (Set_in n$2@246@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01)))
    (or (Set_in n$2@246@01 g@125@01) (not (Set_in n$2@246@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@246@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null)))
      (and
        (Set_in n$2@246@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01)))
    (or
      (not
        (and
          (Set_in n$2@246@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01)
              $Ref.null))))
      (and
        (Set_in n$2@246@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) g@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@246@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@246@01 g@125@01)
      (and
        (Set_in n$2@246@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01)))
    (or (Set_in n$2@246@01 g@125@01) (not (Set_in n$2@246@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@246@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null)))
      (and
        (Set_in n$2@246@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01)))
    (or
      (not
        (and
          (Set_in n$2@246@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01)
              $Ref.null))))
      (and
        (Set_in n$2@246@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null)))))
  :pattern ((Set_in n$2@246@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(push) ; 4
(assert (not (forall ((n$2@246@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@246@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) g@125@01))
  :pattern ((Set_in n$2@246@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$2@246@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@246@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) g@125@01))
  :pattern ((Set_in n$2@246@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n$2@246@01) n$2@246@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27|)))
; [eval] x != null ==> (x in g)
; [eval] x != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= xe@126@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= xe@126@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | xe@126@01 != Null | live]
; [else-branch: 48 | xe@126@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 48 | xe@126@01 != Null]
(assert (not (= xe@126@01 $Ref.null)))
; [eval] (x in g)
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (= xe@126@01 $Ref.null)))
(push) ; 4
(assert (not (=> (not (= xe@126@01 $Ref.null)) (Set_in xe@126@01 g@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=> (not (= xe@126@01 $Ref.null)) (Set_in xe@126@01 g@125@01)))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 4
; [then-branch: 49 | False | dead]
; [else-branch: 49 | True | live]
(push) ; 5
; [else-branch: 49 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] (forall n: Ref :: { exists_path($$(g), x, n) } { exists_path($$(g), y, n) } (n in g) ==> exists_path($$(g), x, n) || exists_path($$(g), y, n))
(declare-const n@247@01 $Ref)
(push) ; 4
; [eval] (n in g) ==> exists_path($$(g), x, n) || exists_path($$(g), y, n)
; [eval] (n in g)
(push) ; 5
; [then-branch: 50 | n@247@01 in g@125@01 | live]
; [else-branch: 50 | !(n@247@01 in g@125@01) | live]
(push) ; 6
; [then-branch: 50 | n@247@01 in g@125@01]
(assert (Set_in n@247@01 g@125@01))
; [eval] exists_path($$(g), x, n) || exists_path($$(g), y, n)
; [eval] exists_path($$(g), x, n)
; [eval] $$(g)
(push) ; 7
(declare-const n@248@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@248@01 g@125@01))
(pop) ; 8
(declare-fun inv@249@01 ($Ref) $Ref)
(declare-fun img@250@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@248@01 $Ref) (n2@248@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@248@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n1@248@01) n1@248@01))
      (and
        (Set_in n2@248@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n2@248@01) n2@248@01))
      (= n1@248@01 n2@248@01))
    (= n1@248@01 n2@248@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@248@01 $Ref)) (!
  (=>
    (Set_in n@248@01 g@125@01)
    (and (= (inv@249@01 n@248@01) n@248@01) (img@250@01 n@248@01)))
  :pattern ((Set_in n@248@01 g@125@01))
  :pattern ((inv@249@01 n@248@01))
  :pattern ((img@250@01 n@248@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@250@01 r) (Set_in (inv@249@01 r) g@125@01)) (= (inv@249@01 r) r))
  :pattern ((inv@249@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@249@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) r) r))
  :pattern ((inv@249@01 r))
  :qid |quant-u-8049|)))
(push) ; 8
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r) (= r (inv@249@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8050|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const sm@251@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r)))
    (=>
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r))
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>))))
  :qid |qp.fvfDomDef197|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@251@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((n@248@01 $Ref)) (!
  (=>
    (Set_in n@248@01 g@125@01)
    (and (= (inv@249@01 n@248@01) n@248@01) (img@250@01 n@248@01)))
  :pattern ((Set_in n@248@01 g@125@01))
  :pattern ((inv@249@01 n@248@01))
  :pattern ((img@250@01 n@248@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@250@01 r) (Set_in (inv@249@01 r) g@125@01)) (= (inv@249@01 r) r))
  :pattern ((inv@249@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r)))
    (=>
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r))
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>))))
  :qid |qp.fvfDomDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@251@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@249@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) r) r))
    :pattern ((inv@249@01 r))
    :qid |quant-u-8049|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01)))
(push) ; 7
; [then-branch: 51 | exists_path[Bool]($$(sm@251@01, g@125@01), xe@126@01, n@247@01) | live]
; [else-branch: 51 | !(exists_path[Bool]($$(sm@251@01, g@125@01), xe@126@01, n@247@01)) | live]
(push) ; 8
; [then-branch: 51 | exists_path[Bool]($$(sm@251@01, g@125@01), xe@126@01, n@247@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
(pop) ; 8
(push) ; 8
; [else-branch: 51 | !(exists_path[Bool]($$(sm@251@01, g@125@01), xe@126@01, n@247@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01)))
; [eval] exists_path($$(g), y, n)
; [eval] $$(g)
(push) ; 9
(declare-const n@252@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@252@01 g@125@01))
(pop) ; 10
(declare-fun inv@253@01 ($Ref) $Ref)
(declare-fun img@254@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@255@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@255@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@252@01 $Ref) (n2@252@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@252@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@255@01  $FVF<next>) n1@252@01) n1@252@01))
      (and
        (Set_in n2@252@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@255@01  $FVF<next>) n2@252@01) n2@252@01))
      (= n1@252@01 n2@252@01))
    (= n1@252@01 n2@252@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@252@01 $Ref)) (!
  (=>
    (Set_in n@252@01 g@125@01)
    (and (= (inv@253@01 n@252@01) n@252@01) (img@254@01 n@252@01)))
  :pattern ((Set_in n@252@01 g@125@01))
  :pattern ((inv@253@01 n@252@01))
  :pattern ((img@254@01 n@252@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@254@01 r) (Set_in (inv@253@01 r) g@125@01)) (= (inv@253@01 r) r))
  :pattern ((inv@253@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@253@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@255@01  $FVF<next>) r) r))
  :pattern ((inv@253@01 r))
  :qid |quant-u-8052|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r) (= r (inv@253@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8053|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const sm@256@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>)))
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r)))
    (=>
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r))
      (Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@256@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@256@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@256@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@255@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert (forall ((n@252@01 $Ref)) (!
  (=>
    (Set_in n@252@01 g@125@01)
    (and (= (inv@253@01 n@252@01) n@252@01) (img@254@01 n@252@01)))
  :pattern ((Set_in n@252@01 g@125@01))
  :pattern ((inv@253@01 n@252@01))
  :pattern ((img@254@01 n@252@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@254@01 r) (Set_in (inv@253@01 r) g@125@01)) (= (inv@253@01 r) r))
  :pattern ((inv@253@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>)))
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r)))
    (=>
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r))
      (Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@256@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@256@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@256@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@253@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@255@01  $FVF<next>) r) r))
    :pattern ((inv@253@01 r))
    :qid |quant-u-8052|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@255@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert (forall ((n@252@01 $Ref)) (!
  (=>
    (Set_in n@252@01 g@125@01)
    (and (= (inv@253@01 n@252@01) n@252@01) (img@254@01 n@252@01)))
  :pattern ((Set_in n@252@01 g@125@01))
  :pattern ((inv@253@01 n@252@01))
  :pattern ((img@254@01 n@252@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@254@01 r) (Set_in (inv@253@01 r) g@125@01)) (= (inv@253@01 r) r))
  :pattern ((inv@253@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>)))
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r)))
    (=>
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r))
      (Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@256@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@256@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@256@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
  (and
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@253@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@255@01  $FVF<next>) r) r))
      :pattern ((inv@253@01 r))
      :qid |quant-u-8052|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 50 | !(n@247@01 in g@125@01)]
(assert (not (Set_in n@247@01 g@125@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((n@248@01 $Ref)) (!
  (=>
    (Set_in n@248@01 g@125@01)
    (and (= (inv@249@01 n@248@01) n@248@01) (img@250@01 n@248@01)))
  :pattern ((Set_in n@248@01 g@125@01))
  :pattern ((inv@249@01 n@248@01))
  :pattern ((img@250@01 n@248@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@250@01 r) (Set_in (inv@249@01 r) g@125@01)) (= (inv@249@01 r) r))
  :pattern ((inv@249@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r)))
    (=>
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r))
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>))))
  :qid |qp.fvfDomDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@251@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@255@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert (forall ((n@252@01 $Ref)) (!
  (=>
    (Set_in n@252@01 g@125@01)
    (and (= (inv@253@01 n@252@01) n@252@01) (img@254@01 n@252@01)))
  :pattern ((Set_in n@252@01 g@125@01))
  :pattern ((inv@253@01 n@252@01))
  :pattern ((img@254@01 n@252@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@254@01 r) (Set_in (inv@253@01 r) g@125@01)) (= (inv@253@01 r) r))
  :pattern ((inv@253@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>)))
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r)))
    (=>
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r))
      (Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@256@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@256@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@256@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (=>
  (Set_in n@247@01 g@125@01)
  (and
    (Set_in n@247@01 g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@249@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) r) r))
      :pattern ((inv@249@01 r))
      :qid |quant-u-8049|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
      (and
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@253@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@255@01  $FVF<next>) r) r))
          :pattern ((inv@253@01 r))
          :qid |quant-u-8052|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01)))))
; Joined path conditions
(assert (or (not (Set_in n@247@01 g@125@01)) (Set_in n@247@01 g@125@01)))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@248@01 $Ref)) (!
  (=>
    (Set_in n@248@01 g@125@01)
    (and (= (inv@249@01 n@248@01) n@248@01) (img@250@01 n@248@01)))
  :pattern ((Set_in n@248@01 g@125@01))
  :pattern ((inv@249@01 n@248@01))
  :pattern ((img@250@01 n@248@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@250@01 r) (Set_in (inv@249@01 r) g@125@01)) (= (inv@249@01 r) r))
  :pattern ((inv@249@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r)))
    (=>
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r))
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>))))
  :qid |qp.fvfDomDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@249@01 r) g@125@01) (img@250@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@251@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@255@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert (forall ((n@252@01 $Ref)) (!
  (=>
    (Set_in n@252@01 g@125@01)
    (and (= (inv@253@01 n@252@01) n@252@01) (img@254@01 n@252@01)))
  :pattern ((Set_in n@252@01 g@125@01))
  :pattern ((inv@253@01 n@252@01))
  :pattern ((img@254@01 n@252@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@254@01 r) (Set_in (inv@253@01 r) g@125@01)) (= (inv@253@01 r) r))
  :pattern ((inv@253@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>)))
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r)))
    (=>
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r))
      (Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@256@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@253@01 r) g@125@01) (img@254@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@256@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@256@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@256@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@247@01 $Ref)) (!
  (and
    (=>
      (Set_in n@247@01 g@125@01)
      (and
        (Set_in n@247@01 g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@249@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) r) r))
          :pattern ((inv@249@01 r))
          :qid |quant-u-8049|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@253@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@255@01  $FVF<next>) r) r))
              :pattern ((inv@253@01 r))
              :qid |quant-u-8052|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))))
    (or (not (Set_in n@247@01 g@125@01)) (Set_in n@247@01 g@125@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@247@01 $Ref)) (!
  (and
    (=>
      (Set_in n@247@01 g@125@01)
      (and
        (Set_in n@247@01 g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@249@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) r) r))
          :pattern ((inv@249@01 r))
          :qid |quant-u-8049|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@253@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@255@01  $FVF<next>) r) r))
              :pattern ((inv@253@01 r))
              :qid |quant-u-8052|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))))
    (or (not (Set_in n@247@01 g@125@01)) (Set_in n@247@01 g@125@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01) $Ref.null n@247@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@247@01 $Ref)) (!
  (=>
    (Set_in n@247@01 g@125@01)
    (and
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01)
      (=>
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01) $Ref.null n@247@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147_precondition|)))
(push) ; 4
(assert (not (forall ((n@247@01 $Ref)) (!
  (=>
    (and
      (=>
        (Set_in n@247@01 g@125@01)
        (and
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01)
          (=>
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01))))
      (Set_in n@247@01 g@125@01))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01) $Ref.null n@247@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01) $Ref.null n@247@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(assert (forall ((n@247@01 $Ref)) (!
  (=>
    (Set_in n@247@01 g@125@01)
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01) $Ref.null n@247@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) g@125@01) xe@126@01 n@247@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@256@01  $FVF<next>)) g@125@01) $Ref.null n@247@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147|)))
; [eval] acyclic_graph($$(g))
; [eval] $$(g)
(push) ; 4
(declare-const n@257@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@257@01 g@125@01))
(pop) ; 5
(declare-fun inv@258@01 ($Ref) $Ref)
(declare-fun img@259@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@257@01 $Ref) (n2@257@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@257@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n1@257@01) n1@257@01))
      (and
        (Set_in n2@257@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) n2@257@01) n2@257@01))
      (= n1@257@01 n2@257@01))
    (= n1@257@01 n2@257@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@125@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@125@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@125@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@258@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) r) r))
  :pattern ((inv@258@01 r))
  :qid |quant-u-8055|)))
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@258@01 r) g@125@01) (img@259@01 r) (= r (inv@258@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8056|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@260@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@260@01  $FVF<next>)))
      (and (Set_in (inv@258@01 r) g@125@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@125@01) (img@259@01 r))
      (Set_in r ($FVF.domain_next (as sm@260@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@260@01  $FVF<next>))))
  :qid |qp.fvfDomDef205|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@125@01) (img@259@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@260@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef204|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@260@01  $FVF<next>)) g@125@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((n@257@01 $Ref)) (!
  (=>
    (Set_in n@257@01 g@125@01)
    (and (= (inv@258@01 n@257@01) n@257@01) (img@259@01 n@257@01)))
  :pattern ((Set_in n@257@01 g@125@01))
  :pattern ((inv@258@01 n@257@01))
  :pattern ((img@259@01 n@257@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@259@01 r) (Set_in (inv@258@01 r) g@125@01)) (= (inv@258@01 r) r))
  :pattern ((inv@258@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@260@01  $FVF<next>)))
      (and (Set_in (inv@258@01 r) g@125@01) (img@259@01 r)))
    (=>
      (and (Set_in (inv@258@01 r) g@125@01) (img@259@01 r))
      (Set_in r ($FVF.domain_next (as sm@260@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@260@01  $FVF<next>))))
  :qid |qp.fvfDomDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@258@01 r) g@125@01) (img@259@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@260@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@260@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef204|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@258@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@244@01  $FVF<next>) r) r))
    :pattern ((inv@258@01 r))
    :qid |quant-u-8055|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@260@01  $FVF<next>)) g@125@01)))
(push) ; 4
(assert (not (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@260@01  $FVF<next>)) g@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@260@01  $FVF<next>)) g@125@01)))
; [eval] unshared_graph($$(g))
; [eval] $$(g)
(push) ; 4
(declare-const n@261@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@261@01 g@125@01))
(pop) ; 5
(declare-fun inv@262@01 ($Ref) $Ref)
(declare-fun img@263@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@264@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@264@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@264@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef206|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@264@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef207|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@261@01 $Ref) (n2@261@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@261@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@264@01  $FVF<next>) n1@261@01) n1@261@01))
      (and
        (Set_in n2@261@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@264@01  $FVF<next>) n2@261@01) n2@261@01))
      (= n1@261@01 n2@261@01))
    (= n1@261@01 n2@261@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@261@01 $Ref)) (!
  (=>
    (Set_in n@261@01 g@125@01)
    (and (= (inv@262@01 n@261@01) n@261@01) (img@263@01 n@261@01)))
  :pattern ((Set_in n@261@01 g@125@01))
  :pattern ((inv@262@01 n@261@01))
  :pattern ((img@263@01 n@261@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@263@01 r) (Set_in (inv@262@01 r) g@125@01)) (= (inv@262@01 r) r))
  :pattern ((inv@262@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@262@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@264@01  $FVF<next>) r) r))
  :pattern ((inv@262@01 r))
  :qid |quant-u-8058|)))
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@262@01 r) g@125@01) (img@263@01 r) (= r (inv@262@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8059|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@265@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@265@01  $FVF<next>)))
      (and (Set_in (inv@262@01 r) g@125@01) (img@263@01 r)))
    (=>
      (and (Set_in (inv@262@01 r) g@125@01) (img@263@01 r))
      (Set_in r ($FVF.domain_next (as sm@265@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@265@01  $FVF<next>))))
  :qid |qp.fvfDomDef210|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@262@01 r) g@125@01) (img@263@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@265@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@265@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@265@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@265@01  $FVF<next>)) g@125@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@264@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@264@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef206|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@264@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef207|)))
(assert (forall ((n@261@01 $Ref)) (!
  (=>
    (Set_in n@261@01 g@125@01)
    (and (= (inv@262@01 n@261@01) n@261@01) (img@263@01 n@261@01)))
  :pattern ((Set_in n@261@01 g@125@01))
  :pattern ((inv@262@01 n@261@01))
  :pattern ((img@263@01 n@261@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@263@01 r) (Set_in (inv@262@01 r) g@125@01)) (= (inv@262@01 r) r))
  :pattern ((inv@262@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@265@01  $FVF<next>)))
      (and (Set_in (inv@262@01 r) g@125@01) (img@263@01 r)))
    (=>
      (and (Set_in (inv@262@01 r) g@125@01) (img@263@01 r))
      (Set_in r ($FVF.domain_next (as sm@265@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@265@01  $FVF<next>))))
  :qid |qp.fvfDomDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@262@01 r) g@125@01) (img@263@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@265@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@265@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@265@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@262@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@264@01  $FVF<next>) r) r))
    :pattern ((inv@262@01 r))
    :qid |quant-u-8058|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@265@01  $FVF<next>)) g@125@01)))
(push) ; 4
(assert (not (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@265@01  $FVF<next>)) g@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@265@01  $FVF<next>)) g@125@01)))
; [eval] func_graph($$(g))
; [eval] $$(g)
(push) ; 4
(declare-const n@266@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@266@01 g@125@01))
(pop) ; 5
(declare-fun inv@267@01 ($Ref) $Ref)
(declare-fun img@268@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@269@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef212|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@266@01 $Ref) (n2@266@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@266@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n1@266@01) n1@266@01))
      (and
        (Set_in n2@266@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n2@266@01) n2@266@01))
      (= n1@266@01 n2@266@01))
    (= n1@266@01 n2@266@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@266@01 $Ref)) (!
  (=>
    (Set_in n@266@01 g@125@01)
    (and (= (inv@267@01 n@266@01) n@266@01) (img@268@01 n@266@01)))
  :pattern ((Set_in n@266@01 g@125@01))
  :pattern ((inv@267@01 n@266@01))
  :pattern ((img@268@01 n@266@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@268@01 r) (Set_in (inv@267@01 r) g@125@01)) (= (inv@267@01 r) r))
  :pattern ((inv@267@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@267@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) r) r))
  :pattern ((inv@267@01 r))
  :qid |quant-u-8061|)))
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@267@01 r) g@125@01) (img@268@01 r) (= r (inv@267@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8062|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@270@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@270@01  $FVF<next>)))
      (and (Set_in (inv@267@01 r) g@125@01) (img@268@01 r)))
    (=>
      (and (Set_in (inv@267@01 r) g@125@01) (img@268@01 r))
      (Set_in r ($FVF.domain_next (as sm@270@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@270@01  $FVF<next>))))
  :qid |qp.fvfDomDef215|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@267@01 r) g@125@01) (img@268@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@270@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef214|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@270@01  $FVF<next>)) g@125@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((n@266@01 $Ref)) (!
  (=>
    (Set_in n@266@01 g@125@01)
    (and (= (inv@267@01 n@266@01) n@266@01) (img@268@01 n@266@01)))
  :pattern ((Set_in n@266@01 g@125@01))
  :pattern ((inv@267@01 n@266@01))
  :pattern ((img@268@01 n@266@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@268@01 r) (Set_in (inv@267@01 r) g@125@01)) (= (inv@267@01 r) r))
  :pattern ((inv@267@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@270@01  $FVF<next>)))
      (and (Set_in (inv@267@01 r) g@125@01) (img@268@01 r)))
    (=>
      (and (Set_in (inv@267@01 r) g@125@01) (img@268@01 r))
      (Set_in r ($FVF.domain_next (as sm@270@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@270@01  $FVF<next>))))
  :qid |qp.fvfDomDef215|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@267@01 r) g@125@01) (img@268@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@270@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef214|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@267@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) r) r))
    :pattern ((inv@267@01 r))
    :qid |quant-u-8061|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@270@01  $FVF<next>)) g@125@01)))
(push) ; 4
(assert (not (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@270@01  $FVF<next>)) g@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@270@01  $FVF<next>)) g@125@01)))
; [eval] x != xe && x != null ==> !exists_path($$(g), x, xe)
; [eval] x != xe && x != null
; [eval] x != xe
(push) ; 4
; [then-branch: 52 | False | dead]
; [else-branch: 52 | True | live]
(push) ; 5
; [else-branch: 52 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] x != null ==> !edge($$(g), x, y)
; [eval] x != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= xe@126@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 53 | xe@126@01 != Null | live]
; [else-branch: 53 | xe@126@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 53 | xe@126@01 != Null]
; [eval] !edge($$(g), x, y)
; [eval] edge($$(g), x, y)
; [eval] $$(g)
(push) ; 6
(declare-const n@271@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@271@01 g@125@01))
(pop) ; 7
(declare-fun inv@272@01 ($Ref) $Ref)
(declare-fun img@273@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@274@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef216|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef217|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@271@01 $Ref) (n2@271@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@271@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n1@271@01) n1@271@01))
      (and
        (Set_in n2@271@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n2@271@01) n2@271@01))
      (= n1@271@01 n2@271@01))
    (= n1@271@01 n2@271@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@125@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@125@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@125@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@272@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
  :pattern ((inv@272@01 r))
  :qid |quant-u-8064|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@272@01 r) g@125@01) (img@273@01 r) (= r (inv@272@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8065|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@275@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>)))
      (and (Set_in (inv@272@01 r) g@125@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@125@01) (img@273@01 r))
      (Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@125@01) (img@273@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@275@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@275@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@275@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@275@01  $FVF<next>)) g@125@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef216|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef217|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@125@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@125@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@125@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>)))
      (and (Set_in (inv@272@01 r) g@125@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@125@01) (img@273@01 r))
      (Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@125@01) (img@273@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@275@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@275@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@275@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@272@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
    :pattern ((inv@272@01 r))
    :qid |quant-u-8064|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@275@01  $FVF<next>)) g@125@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef216|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef217|)))
(assert (forall ((n@271@01 $Ref)) (!
  (=>
    (Set_in n@271@01 g@125@01)
    (and (= (inv@272@01 n@271@01) n@271@01) (img@273@01 n@271@01)))
  :pattern ((Set_in n@271@01 g@125@01))
  :pattern ((inv@272@01 n@271@01))
  :pattern ((img@273@01 n@271@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@273@01 r) (Set_in (inv@272@01 r) g@125@01)) (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>)))
      (and (Set_in (inv@272@01 r) g@125@01) (img@273@01 r)))
    (=>
      (and (Set_in (inv@272@01 r) g@125@01) (img@273@01 r))
      (Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@272@01 r) g@125@01) (img@273@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@275@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@275@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@275@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (=>
  (not (= xe@126@01 $Ref.null))
  (and
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@272@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
      :pattern ((inv@272@01 r))
      :qid |quant-u-8064|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@275@01  $FVF<next>)) g@125@01))))
(push) ; 4
(assert (not (=>
  (not (= xe@126@01 $Ref.null))
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@275@01  $FVF<next>)) g@125@01) xe@126@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= xe@126@01 $Ref.null))
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@275@01  $FVF<next>)) g@125@01) xe@126@01 $Ref.null))))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old_g, v1, v2) } { edge($$(g), v1, v2) } exists_path($$(g), x, v1) ==> edge(old_g, v1, v2) == edge($$(g), v1, v2))
(declare-const v1@276@01 $Ref)
(declare-const v2@277@01 $Ref)
(push) ; 4
; [eval] exists_path($$(g), x, v1) ==> edge(old_g, v1, v2) == edge($$(g), v1, v2)
; [eval] exists_path($$(g), x, v1)
; [eval] $$(g)
(push) ; 5
(declare-const n@278@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@278@01 g@125@01))
(pop) ; 6
(declare-fun inv@279@01 ($Ref) $Ref)
(declare-fun img@280@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@281@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef222|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@278@01 $Ref) (n2@278@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@278@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) n1@278@01) n1@278@01))
      (and
        (Set_in n2@278@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) n2@278@01) n2@278@01))
      (= n1@278@01 n2@278@01))
    (= n1@278@01 n2@278@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@278@01 $Ref)) (!
  (=>
    (Set_in n@278@01 g@125@01)
    (and (= (inv@279@01 n@278@01) n@278@01) (img@280@01 n@278@01)))
  :pattern ((Set_in n@278@01 g@125@01))
  :pattern ((inv@279@01 n@278@01))
  :pattern ((img@280@01 n@278@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@280@01 r) (Set_in (inv@279@01 r) g@125@01)) (= (inv@279@01 r) r))
  :pattern ((inv@279@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@279@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) r) r))
  :pattern ((inv@279@01 r))
  :qid |quant-u-8067|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@279@01 r) g@125@01) (img@280@01 r) (= r (inv@279@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8068|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@282@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@279@01 r) g@125@01) (img@280@01 r)))
    (=>
      (and (Set_in (inv@279@01 r) g@125@01) (img@280@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef225|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@279@01 r) g@125@01) (img@280@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef224|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef222|)))
(assert (forall ((n@278@01 $Ref)) (!
  (=>
    (Set_in n@278@01 g@125@01)
    (and (= (inv@279@01 n@278@01) n@278@01) (img@280@01 n@278@01)))
  :pattern ((Set_in n@278@01 g@125@01))
  :pattern ((inv@279@01 n@278@01))
  :pattern ((img@280@01 n@278@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@280@01 r) (Set_in (inv@279@01 r) g@125@01)) (= (inv@279@01 r) r))
  :pattern ((inv@279@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@279@01 r) g@125@01) (img@280@01 r)))
    (=>
      (and (Set_in (inv@279@01 r) g@125@01) (img@280@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef225|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@279@01 r) g@125@01) (img@280@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef224|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@279@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) r) r))
    :pattern ((inv@279@01 r))
    :qid |quant-u-8067|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01)))
(push) ; 5
; [then-branch: 54 | exists_path[Bool]($$(sm@282@01, g@125@01), xe@126@01, v1@276@01) | live]
; [else-branch: 54 | !(exists_path[Bool]($$(sm@282@01, g@125@01), xe@126@01, v1@276@01)) | live]
(push) ; 6
; [then-branch: 54 | exists_path[Bool]($$(sm@282@01, g@125@01), xe@126@01, v1@276@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01))
; [eval] edge(old_g, v1, v2) == edge($$(g), v1, v2)
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 7
(declare-const n@283@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@283@01 g@125@01))
(pop) ; 8
(declare-fun inv@284@01 ($Ref) $Ref)
(declare-fun img@285@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@286@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef227|)))
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@283@01 $Ref) (n2@283@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@283@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) n1@283@01) n1@283@01))
      (and
        (Set_in n2@283@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) n2@283@01) n2@283@01))
      (= n1@283@01 n2@283@01))
    (= n1@283@01 n2@283@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@283@01 $Ref)) (!
  (=>
    (Set_in n@283@01 g@125@01)
    (and (= (inv@284@01 n@283@01) n@283@01) (img@285@01 n@283@01)))
  :pattern ((Set_in n@283@01 g@125@01))
  :pattern ((inv@284@01 n@283@01))
  :pattern ((img@285@01 n@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@285@01 r) (Set_in (inv@284@01 r) g@125@01)) (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@284@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) r) r))
  :pattern ((inv@284@01 r))
  :qid |quant-u-8070|)))
(push) ; 8
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r) (= r (inv@284@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8071|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const sm@287@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>))))
  :qid |qp.fvfDomDef230|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef229|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef227|)))
(assert (forall ((n@283@01 $Ref)) (!
  (=>
    (Set_in n@283@01 g@125@01)
    (and (= (inv@284@01 n@283@01) n@283@01) (img@285@01 n@283@01)))
  :pattern ((Set_in n@283@01 g@125@01))
  :pattern ((inv@284@01 n@283@01))
  :pattern ((img@285@01 n@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@285@01 r) (Set_in (inv@284@01 r) g@125@01)) (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>))))
  :qid |qp.fvfDomDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef229|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@284@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) r) r))
    :pattern ((inv@284@01 r))
    :qid |quant-u-8070|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 54 | !(exists_path[Bool]($$(sm@282@01, g@125@01), xe@126@01, v1@276@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef227|)))
(assert (forall ((n@283@01 $Ref)) (!
  (=>
    (Set_in n@283@01 g@125@01)
    (and (= (inv@284@01 n@283@01) n@283@01) (img@285@01 n@283@01)))
  :pattern ((Set_in n@283@01 g@125@01))
  :pattern ((inv@284@01 n@283@01))
  :pattern ((img@285@01 n@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@285@01 r) (Set_in (inv@284@01 r) g@125@01)) (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>))))
  :qid |qp.fvfDomDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef229|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@284@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) r) r))
      :pattern ((inv@284@01 r))
      :qid |quant-u-8070|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01))))
; Joined path conditions
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)))
; [eval] edge(old_g, v1, v2)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef222|)))
(assert (forall ((n@278@01 $Ref)) (!
  (=>
    (Set_in n@278@01 g@125@01)
    (and (= (inv@279@01 n@278@01) n@278@01) (img@280@01 n@278@01)))
  :pattern ((Set_in n@278@01 g@125@01))
  :pattern ((inv@279@01 n@278@01))
  :pattern ((img@280@01 n@278@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@280@01 r) (Set_in (inv@279@01 r) g@125@01)) (= (inv@279@01 r) r))
  :pattern ((inv@279@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@279@01 r) g@125@01) (img@280@01 r)))
    (=>
      (and (Set_in (inv@279@01 r) g@125@01) (img@280@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef225|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@279@01 r) g@125@01) (img@280@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef227|)))
(assert (forall ((n@283@01 $Ref)) (!
  (=>
    (Set_in n@283@01 g@125@01)
    (and (= (inv@284@01 n@283@01) n@283@01) (img@285@01 n@283@01)))
  :pattern ((Set_in n@283@01 g@125@01))
  :pattern ((inv@284@01 n@283@01))
  :pattern ((img@285@01 n@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@285@01 r) (Set_in (inv@284@01 r) g@125@01)) (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>))))
  :qid |qp.fvfDomDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g@125@01) (img@285@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef229|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@279@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) r) r))
  :pattern ((inv@279@01 r))
  :qid |quant-u-8067|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@276@01 $Ref) (v2@277@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@284@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) r) r))
          :pattern ((inv@284@01 r))
          :qid |quant-u-8070|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@276@01 v2@277@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@276@01 $Ref) (v2@277@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@284@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@286@01  $FVF<next>) r) r))
          :pattern ((inv@284@01 r))
          :qid |quant-u-8070|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01) v1@276@01 v2@277@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@276@01 $Ref) (v2@277@01 $Ref)) (!
  (and
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@276@01 v2@277@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01) v1@276@01 v2@277@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166_precondition|)))
(push) ; 4
(assert (not (forall ((v1@276@01 $Ref) (v2@277@01 $Ref)) (!
  (=>
    (and
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01)))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01))
    (=
      (edge<Bool> old_g@163@01 v1@276@01 v2@277@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01) v1@276@01 v2@277@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@276@01 v2@277@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01) v1@276@01 v2@277@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((v1@276@01 $Ref) (v2@277@01 $Ref)) (!
  (=>
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g@125@01) xe@126@01 v1@276@01)
    (=
      (edge<Bool> old_g@163@01 v1@276@01 v2@277@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01) v1@276@01 v2@277@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@276@01 v2@277@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g@125@01) v1@276@01 v2@277@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166|)))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old_g, v1, v2) } { edge($$(g), v1, v2) } exists_path($$(g), y, v2) && v1 != y ==> edge(old_g, v1, v2) == edge($$(g), v2, v1))
(declare-const v1@288@01 $Ref)
(declare-const v2@289@01 $Ref)
(push) ; 4
; [eval] exists_path($$(g), y, v2) && v1 != y ==> edge(old_g, v1, v2) == edge($$(g), v2, v1)
; [eval] exists_path($$(g), y, v2) && v1 != y
; [eval] exists_path($$(g), y, v2)
; [eval] $$(g)
(push) ; 5
(declare-const n@290@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@290@01 g@125@01))
(pop) ; 6
(declare-fun inv@291@01 ($Ref) $Ref)
(declare-fun img@292@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@293@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@290@01 $Ref) (n2@290@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@290@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n1@290@01) n1@290@01))
      (and
        (Set_in n2@290@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n2@290@01) n2@290@01))
      (= n1@290@01 n2@290@01))
    (= n1@290@01 n2@290@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@290@01 $Ref)) (!
  (=>
    (Set_in n@290@01 g@125@01)
    (and (= (inv@291@01 n@290@01) n@290@01) (img@292@01 n@290@01)))
  :pattern ((Set_in n@290@01 g@125@01))
  :pattern ((inv@291@01 n@290@01))
  :pattern ((img@292@01 n@290@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@292@01 r) (Set_in (inv@291@01 r) g@125@01)) (= (inv@291@01 r) r))
  :pattern ((inv@291@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@291@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
  :pattern ((inv@291@01 r))
  :qid |quant-u-8073|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@291@01 r) g@125@01) (img@292@01 r) (= r (inv@291@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8074|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@294@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@294@01  $FVF<next>)))
      (and (Set_in (inv@291@01 r) g@125@01) (img@292@01 r)))
    (=>
      (and (Set_in (inv@291@01 r) g@125@01) (img@292@01 r))
      (Set_in r ($FVF.domain_next (as sm@294@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@294@01  $FVF<next>))))
  :qid |qp.fvfDomDef235|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@291@01 r) g@125@01) (img@292@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
(assert (forall ((n@290@01 $Ref)) (!
  (=>
    (Set_in n@290@01 g@125@01)
    (and (= (inv@291@01 n@290@01) n@290@01) (img@292@01 n@290@01)))
  :pattern ((Set_in n@290@01 g@125@01))
  :pattern ((inv@291@01 n@290@01))
  :pattern ((img@292@01 n@290@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@292@01 r) (Set_in (inv@291@01 r) g@125@01)) (= (inv@291@01 r) r))
  :pattern ((inv@291@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@294@01  $FVF<next>)))
      (and (Set_in (inv@291@01 r) g@125@01) (img@292@01 r)))
    (=>
      (and (Set_in (inv@291@01 r) g@125@01) (img@292@01 r))
      (Set_in r ($FVF.domain_next (as sm@294@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@294@01  $FVF<next>))))
  :qid |qp.fvfDomDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@291@01 r) g@125@01) (img@292@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@291@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
    :pattern ((inv@291@01 r))
    :qid |quant-u-8073|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01)))
(push) ; 5
; [then-branch: 55 | !(exists_path[Bool]($$(sm@294@01, g@125@01), Null, v2@289@01)) | live]
; [else-branch: 55 | exists_path[Bool]($$(sm@294@01, g@125@01), Null, v2@289@01) | live]
(push) ; 6
; [then-branch: 55 | !(exists_path[Bool]($$(sm@294@01, g@125@01), Null, v2@289@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 55 | exists_path[Bool]($$(sm@294@01, g@125@01), Null, v2@289@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01))
; [eval] v1 != y
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01))))
(push) ; 5
; [then-branch: 56 | exists_path[Bool]($$(sm@294@01, g@125@01), Null, v2@289@01) && v1@288@01 != Null | live]
; [else-branch: 56 | !(exists_path[Bool]($$(sm@294@01, g@125@01), Null, v2@289@01) && v1@288@01 != Null) | live]
(push) ; 6
; [then-branch: 56 | exists_path[Bool]($$(sm@294@01, g@125@01), Null, v2@289@01) && v1@288@01 != Null]
(assert (and
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
  (not (= v1@288@01 $Ref.null))))
; [eval] edge(old_g, v1, v2) == edge($$(g), v2, v1)
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v2, v1)
; [eval] $$(g)
(push) ; 7
(declare-const n@295@01 $Ref)
(push) ; 8
; [eval] (n in refs)
(assert (Set_in n@295@01 g@125@01))
(pop) ; 8
(declare-fun inv@296@01 ($Ref) $Ref)
(declare-fun img@297@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@298@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@298@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
; Check receiver injectivity
(push) ; 8
(assert (not (forall ((n1@295@01 $Ref) (n2@295@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@295@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@298@01  $FVF<next>) n1@295@01) n1@295@01))
      (and
        (Set_in n2@295@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@298@01  $FVF<next>) n2@295@01) n2@295@01))
      (= n1@295@01 n2@295@01))
    (= n1@295@01 n2@295@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@295@01 $Ref)) (!
  (=>
    (Set_in n@295@01 g@125@01)
    (and (= (inv@296@01 n@295@01) n@295@01) (img@297@01 n@295@01)))
  :pattern ((Set_in n@295@01 g@125@01))
  :pattern ((inv@296@01 n@295@01))
  :pattern ((img@297@01 n@295@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@297@01 r) (Set_in (inv@296@01 r) g@125@01)) (= (inv@296@01 r) r))
  :pattern ((inv@296@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@296@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@298@01  $FVF<next>) r) r))
  :pattern ((inv@296@01 r))
  :qid |quant-u-8076|)))
(push) ; 8
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r) (= r (inv@296@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8077|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const sm@299@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>)))
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r)))
    (=>
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r))
      (Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>))))
  :qid |qp.fvfDomDef240|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@299@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@299@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@299@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@299@01  $FVF<next>)) g@125@01))
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@298@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (forall ((n@295@01 $Ref)) (!
  (=>
    (Set_in n@295@01 g@125@01)
    (and (= (inv@296@01 n@295@01) n@295@01) (img@297@01 n@295@01)))
  :pattern ((Set_in n@295@01 g@125@01))
  :pattern ((inv@296@01 n@295@01))
  :pattern ((img@297@01 n@295@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@297@01 r) (Set_in (inv@296@01 r) g@125@01)) (= (inv@296@01 r) r))
  :pattern ((inv@296@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>)))
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r)))
    (=>
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r))
      (Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>))))
  :qid |qp.fvfDomDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@299@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@299@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@299@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@296@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@298@01  $FVF<next>) r) r))
    :pattern ((inv@296@01 r))
    :qid |quant-u-8076|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@299@01  $FVF<next>)) g@125@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 56 | !(exists_path[Bool]($$(sm@294@01, g@125@01), Null, v2@289@01) && v1@288@01 != Null)]
(assert (not
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
    (not (= v1@288@01 $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@298@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (forall ((n@295@01 $Ref)) (!
  (=>
    (Set_in n@295@01 g@125@01)
    (and (= (inv@296@01 n@295@01) n@295@01) (img@297@01 n@295@01)))
  :pattern ((Set_in n@295@01 g@125@01))
  :pattern ((inv@296@01 n@295@01))
  :pattern ((img@297@01 n@295@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@297@01 r) (Set_in (inv@296@01 r) g@125@01)) (= (inv@296@01 r) r))
  :pattern ((inv@296@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>)))
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r)))
    (=>
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r))
      (Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>))))
  :qid |qp.fvfDomDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@299@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@299@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@299@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert (=>
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
    (not (= v1@288@01 $Ref.null)))
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
    (not (= v1@288@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@296@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@298@01  $FVF<next>) r) r))
      :pattern ((inv@296@01 r))
      :qid |quant-u-8076|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@299@01  $FVF<next>)) g@125@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
      (not (= v1@288@01 $Ref.null))))
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
    (not (= v1@288@01 $Ref.null)))))
; [eval] edge(old_g, v1, v2)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 5
(declare-const n@300@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@300@01 g@125@01))
(pop) ; 6
(declare-fun inv@301@01 ($Ref) $Ref)
(declare-fun img@302@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@303@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@303@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@303@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@303@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@300@01 $Ref) (n2@300@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@300@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@303@01  $FVF<next>) n1@300@01) n1@300@01))
      (and
        (Set_in n2@300@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@303@01  $FVF<next>) n2@300@01) n2@300@01))
      (= n1@300@01 n2@300@01))
    (= n1@300@01 n2@300@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@300@01 $Ref)) (!
  (=>
    (Set_in n@300@01 g@125@01)
    (and (= (inv@301@01 n@300@01) n@300@01) (img@302@01 n@300@01)))
  :pattern ((Set_in n@300@01 g@125@01))
  :pattern ((inv@301@01 n@300@01))
  :pattern ((img@302@01 n@300@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@302@01 r) (Set_in (inv@301@01 r) g@125@01)) (= (inv@301@01 r) r))
  :pattern ((inv@301@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@301@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@303@01  $FVF<next>) r) r))
  :pattern ((inv@301@01 r))
  :qid |quant-u-8079|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r) (= r (inv@301@01 r)))
    (>
      (ite
        (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8080|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@304@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>)))
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r)))
    (=>
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r))
      (Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>))))
  :qid |qp.fvfDomDef245|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@304@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@304@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@304@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@304@01  $FVF<next>)) g@125@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@303@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@303@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@303@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
(assert (forall ((n@300@01 $Ref)) (!
  (=>
    (Set_in n@300@01 g@125@01)
    (and (= (inv@301@01 n@300@01) n@300@01) (img@302@01 n@300@01)))
  :pattern ((Set_in n@300@01 g@125@01))
  :pattern ((inv@301@01 n@300@01))
  :pattern ((img@302@01 n@300@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@302@01 r) (Set_in (inv@301@01 r) g@125@01)) (= (inv@301@01 r) r))
  :pattern ((inv@301@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>)))
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r)))
    (=>
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r))
      (Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>))))
  :qid |qp.fvfDomDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@304@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@304@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@304@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@301@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@303@01  $FVF<next>) r) r))
    :pattern ((inv@301@01 r))
    :qid |quant-u-8079|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@304@01  $FVF<next>)) g@125@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@303@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@303@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@303@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
(assert (forall ((n@300@01 $Ref)) (!
  (=>
    (Set_in n@300@01 g@125@01)
    (and (= (inv@301@01 n@300@01) n@300@01) (img@302@01 n@300@01)))
  :pattern ((Set_in n@300@01 g@125@01))
  :pattern ((inv@301@01 n@300@01))
  :pattern ((img@302@01 n@300@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@302@01 r) (Set_in (inv@301@01 r) g@125@01)) (= (inv@301@01 r) r))
  :pattern ((inv@301@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>)))
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r)))
    (=>
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r))
      (Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>))))
  :qid |qp.fvfDomDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@304@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@304@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@304@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@301@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@303@01  $FVF<next>) r) r))
  :pattern ((inv@301@01 r))
  :qid |quant-u-8079|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@304@01  $FVF<next>)) g@125@01))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
(assert (forall ((n@290@01 $Ref)) (!
  (=>
    (Set_in n@290@01 g@125@01)
    (and (= (inv@291@01 n@290@01) n@290@01) (img@292@01 n@290@01)))
  :pattern ((Set_in n@290@01 g@125@01))
  :pattern ((inv@291@01 n@290@01))
  :pattern ((img@292@01 n@290@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@292@01 r) (Set_in (inv@291@01 r) g@125@01)) (= (inv@291@01 r) r))
  :pattern ((inv@291@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@294@01  $FVF<next>)))
      (and (Set_in (inv@291@01 r) g@125@01) (img@292@01 r)))
    (=>
      (and (Set_in (inv@291@01 r) g@125@01) (img@292@01 r))
      (Set_in r ($FVF.domain_next (as sm@294@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@294@01  $FVF<next>))))
  :qid |qp.fvfDomDef235|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@291@01 r) g@125@01) (img@292@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef234|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@298@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (forall ((n@295@01 $Ref)) (!
  (=>
    (Set_in n@295@01 g@125@01)
    (and (= (inv@296@01 n@295@01) n@295@01) (img@297@01 n@295@01)))
  :pattern ((Set_in n@295@01 g@125@01))
  :pattern ((inv@296@01 n@295@01))
  :pattern ((img@297@01 n@295@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@297@01 r) (Set_in (inv@296@01 r) g@125@01)) (= (inv@296@01 r) r))
  :pattern ((inv@296@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>)))
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r)))
    (=>
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r))
      (Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@299@01  $FVF<next>))))
  :qid |qp.fvfDomDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g@125@01) (img@297@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@299@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@299@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@299@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@303@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@303@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@303@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
(assert (forall ((n@300@01 $Ref)) (!
  (=>
    (Set_in n@300@01 g@125@01)
    (and (= (inv@301@01 n@300@01) n@300@01) (img@302@01 n@300@01)))
  :pattern ((Set_in n@300@01 g@125@01))
  :pattern ((inv@301@01 n@300@01))
  :pattern ((img@302@01 n@300@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@302@01 r) (Set_in (inv@301@01 r) g@125@01)) (= (inv@301@01 r) r))
  :pattern ((inv@301@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>)))
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r)))
    (=>
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r))
      (Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@304@01  $FVF<next>))))
  :qid |qp.fvfDomDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@301@01 r) g@125@01) (img@302@01 r))
      (and (img@132@01 r) (Set_in (inv@131@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@304@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r)))
  :pattern (($FVF.lookup_next (as sm@304@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@128@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@304@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@291@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
  :pattern ((inv@291@01 r))
  :qid |quant-u-8073|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@301@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@303@01  $FVF<next>) r) r))
  :pattern ((inv@301@01 r))
  :qid |quant-u-8079|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@304@01  $FVF<next>)) g@125@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@288@01 $Ref) (v2@289@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
        (not (= v1@288@01 $Ref.null)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
        (not (= v1@288@01 $Ref.null))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@296@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@298@01  $FVF<next>) r) r))
          :pattern ((inv@296@01 r))
          :qid |quant-u-8076|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@299@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
          (not (= v1@288@01 $Ref.null))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
        (not (= v1@288@01 $Ref.null)))))
  :pattern ((edge<Bool> old_g@163@01 v1@288@01 v2@289@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@288@01 $Ref) (v2@289@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
        (not (= v1@288@01 $Ref.null)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
        (not (= v1@288@01 $Ref.null))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@296@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@298@01  $FVF<next>) r) r))
          :pattern ((inv@296@01 r))
          :qid |quant-u-8076|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@299@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
          (not (= v1@288@01 $Ref.null))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
        (not (= v1@288@01 $Ref.null)))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@304@01  $FVF<next>)) g@125@01) v1@288@01 v2@289@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@288@01 $Ref) (v2@289@01 $Ref)) (!
  (and
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01)
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
        (not (= v1@288@01 $Ref.null)))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@299@01  $FVF<next>)) g@125@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@288@01 v2@289@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@304@01  $FVF<next>)) g@125@01) v1@288@01 v2@289@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166_precondition|)))
(push) ; 4
(assert (not (forall ((v1@288@01 $Ref) (v2@289@01 $Ref)) (!
  (=>
    (and
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01)
        (=>
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
            (not (= v1@288@01 $Ref.null)))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@299@01  $FVF<next>)) g@125@01)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
        (not (= v1@288@01 $Ref.null))))
    (=
      (edge<Bool> old_g@163@01 v1@288@01 v2@289@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@299@01  $FVF<next>)) g@125@01) v2@289@01 v1@288@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@288@01 v2@289@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@304@01  $FVF<next>)) g@125@01) v1@288@01 v2@289@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(assert (forall ((v1@288@01 $Ref) (v2@289@01 $Ref)) (!
  (=>
    (and
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@294@01  $FVF<next>)) g@125@01) $Ref.null v2@289@01)
      (not (= v1@288@01 $Ref.null)))
    (=
      (edge<Bool> old_g@163@01 v1@288@01 v2@289@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@299@01  $FVF<next>)) g@125@01) v2@289@01 v1@288@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@288@01 v2@289@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@304@01  $FVF<next>)) g@125@01) v1@288@01 v2@289@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166|)))
; [eval] y != null && x != null ==> edge(old_g, y, x)
; [eval] y != null && x != null
; [eval] y != null
(push) ; 4
; [then-branch: 57 | False | dead]
; [else-branch: 57 | True | live]
(push) ; 5
; [else-branch: 57 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (forall ((r $Ref)) (!
  (=> (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)) (= (inv@173@01 r) r))
  :pattern ((inv@173@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@175@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@175@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@178@01 $Ref)) (!
  (=>
    (Set_in n@178@01 g@125@01)
    (and (= (inv@179@01 n@178@01) n@178@01) (img@180@01 n@178@01)))
  :pattern ((Set_in n@178@01 g@125@01))
  :pattern ((inv@179@01 n@178@01))
  :pattern ((img@180@01 n@178@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@180@01 r) (Set_in (inv@179@01 r) g@125@01)) (= (inv@179@01 r) r))
  :pattern ((inv@179@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>)))
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r)))
    (=>
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r))
      (Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@181@01  $FVF<next>))))
  :qid |qp.fvfDomDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@179@01 r) g@125@01) (img@180@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@181@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@181@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@185@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@185@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((n@182@01 $Ref)) (!
  (=>
    (Set_in n@182@01 g@125@01)
    (and (= (inv@183@01 n@182@01) n@182@01) (img@184@01 n@182@01)))
  :pattern ((Set_in n@182@01 g@125@01))
  :pattern ((inv@183@01 n@182@01))
  :pattern ((img@184@01 n@182@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@184@01 r) (Set_in (inv@183@01 r) g@125@01)) (= (inv@183@01 r) r))
  :pattern ((inv@183@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r)))
    (=>
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@183@01 r) g@125@01) (img@184@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@187@01 $Ref)) (!
  (=>
    (Set_in n@187@01 g@125@01)
    (and (= (inv@188@01 n@187@01) n@187@01) (img@189@01 n@187@01)))
  :pattern ((Set_in n@187@01 g@125@01))
  :pattern ((inv@188@01 n@187@01))
  :pattern ((img@189@01 n@187@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@189@01 r) (Set_in (inv@188@01 r) g@125@01)) (= (inv@188@01 r) r))
  :pattern ((inv@188@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@188@01 r) g@125@01) (img@189@01 r)))
    (=>
      (and (Set_in (inv@188@01 r) g@125@01) (img@189@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@188@01 r) g@125@01) (img@189@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@194@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@194@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@194@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef147|)))
(assert (forall ((n@191@01 $Ref)) (!
  (=>
    (Set_in n@191@01 g@125@01)
    (and (= (inv@192@01 n@191@01) n@191@01) (img@193@01 n@191@01)))
  :pattern ((Set_in n@191@01 g@125@01))
  :pattern ((inv@192@01 n@191@01))
  :pattern ((img@193@01 n@191@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@193@01 r) (Set_in (inv@192@01 r) g@125@01)) (= (inv@192@01 r) r))
  :pattern ((inv@192@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))
      (and (Set_in (inv@192@01 r) g@125@01) (img@193@01 r)))
    (=>
      (and (Set_in (inv@192@01 r) g@125@01) (img@193@01 r))
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>))))
  :qid |qp.fvfDomDef150|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@192@01 r) g@125@01) (img@193@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef152|)))
(assert (forall ((n@196@01 $Ref)) (!
  (=>
    (Set_in n@196@01 g@125@01)
    (and (= (inv@197@01 n@196@01) n@196@01) (img@198@01 n@196@01)))
  :pattern ((Set_in n@196@01 g@125@01))
  :pattern ((inv@197@01 n@196@01))
  :pattern ((img@198@01 n@196@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@198@01 r) (Set_in (inv@197@01 r) g@125@01)) (= (inv@197@01 r) r))
  :pattern ((inv@197@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@200@01  $FVF<next>)))
      (and (Set_in (inv@197@01 r) g@125@01) (img@198@01 r)))
    (=>
      (and (Set_in (inv@197@01 r) g@125@01) (img@198@01 r))
      (Set_in r ($FVF.domain_next (as sm@200@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@200@01  $FVF<next>))))
  :qid |qp.fvfDomDef155|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) g@125@01) (img@198@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@204@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@204@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@204@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef157|)))
(assert (forall ((n@201@01 $Ref)) (!
  (=>
    (Set_in n@201@01 g@125@01)
    (and (= (inv@202@01 n@201@01) n@201@01) (img@203@01 n@201@01)))
  :pattern ((Set_in n@201@01 g@125@01))
  :pattern ((inv@202@01 n@201@01))
  :pattern ((img@203@01 n@201@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@203@01 r) (Set_in (inv@202@01 r) g@125@01)) (= (inv@202@01 r) r))
  :pattern ((inv@202@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>)))
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r)))
    (=>
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r))
      (Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@205@01  $FVF<next>))))
  :qid |qp.fvfDomDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@202@01 r) g@125@01) (img@203@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@205@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@205@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@205@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@209@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@209@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@209@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@206@01 $Ref)) (!
  (=>
    (Set_in n@206@01 g@125@01)
    (and (= (inv@207@01 n@206@01) n@206@01) (img@208@01 n@206@01)))
  :pattern ((Set_in n@206@01 g@125@01))
  :pattern ((inv@207@01 n@206@01))
  :pattern ((img@208@01 n@206@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@208@01 r) (Set_in (inv@207@01 r) g@125@01)) (= (inv@207@01 r) r))
  :pattern ((inv@207@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r)))
    (=>
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@207@01 r) g@125@01) (img@208@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef164|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@216@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@216@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@216@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef167|)))
(assert (forall ((n@213@01 $Ref)) (!
  (=>
    (Set_in n@213@01 g@125@01)
    (and (= (inv@214@01 n@213@01) n@213@01) (img@215@01 n@213@01)))
  :pattern ((Set_in n@213@01 g@125@01))
  :pattern ((inv@214@01 n@213@01))
  :pattern ((img@215@01 n@213@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@215@01 r) (Set_in (inv@214@01 r) g@125@01)) (= (inv@214@01 r) r))
  :pattern ((inv@214@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r)))
    (=>
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@214@01 r) g@125@01) (img@215@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@125@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@125@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@125@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@222@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@125@01) (img@220@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
(assert (forall ((n@225@01 $Ref)) (!
  (=>
    (Set_in n@225@01 g@125@01)
    (and (= (inv@226@01 n@225@01) n@225@01) (img@227@01 n@225@01)))
  :pattern ((Set_in n@225@01 g@125@01))
  :pattern ((inv@226@01 n@225@01))
  :pattern ((img@227@01 n@225@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@227@01 r) (Set_in (inv@226@01 r) g@125@01)) (= (inv@226@01 r) r))
  :pattern ((inv@226@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r)))
    (=>
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r))
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g@125@01) (img@227@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@233@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert (forall ((n@230@01 $Ref)) (!
  (=>
    (Set_in n@230@01 g@125@01)
    (and (= (inv@231@01 n@230@01) n@230@01) (img@232@01 n@230@01)))
  :pattern ((Set_in n@230@01 g@125@01))
  :pattern ((inv@231@01 n@230@01))
  :pattern ((img@232@01 n@230@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@232@01 r) (Set_in (inv@231@01 r) g@125@01)) (= (inv@231@01 r) r))
  :pattern ((inv@231@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r)))
    (=>
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r))
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@231@01 r) g@125@01) (img@232@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@238@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@238@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@238@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (forall ((n@235@01 $Ref)) (!
  (=>
    (Set_in n@235@01 g@125@01)
    (and (= (inv@236@01 n@235@01) n@235@01) (img@237@01 n@235@01)))
  :pattern ((Set_in n@235@01 g@125@01))
  :pattern ((inv@236@01 n@235@01))
  :pattern ((img@237@01 n@235@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@237@01 r) (Set_in (inv@236@01 r) g@125@01)) (= (inv@236@01 r) r))
  :pattern ((inv@236@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>)))
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r)))
    (=>
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r))
      (Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@239@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@236@01 r) g@125@01) (img@237@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert (forall ((n$1@171@01 $Ref)) (!
  (=>
    (Set_in n$1@171@01 g@125@01)
    (and (= (inv@173@01 n$1@171@01) n$1@171@01) (img@174@01 n$1@171@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) n$1@171@01) n$1@171@01))
  :qid |quant-u-8005|)))
(assert (forall ((n$1@171@01 $Ref)) (!
  (=> (Set_in n$1@171@01 g@125@01) (not (= n$1@171@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) n$1@171@01) n$1@171@01))
  :qid |next-permImpliesNonNull|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@173@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
  :pattern ((inv@173@01 r))
  :qid |quant-u-8006|)))
(assert (=
  ($Snap.second ($Snap.second $t@170@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@170@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@170@01))) $Snap.unit))
(assert (forall ((n$2@176@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@176@01 g@125@01)
      (and
        (Set_in n$2@176@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01)))
    (or (Set_in n$2@176@01 g@125@01) (not (Set_in n$2@176@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01)))
    (or
      (not
        (and
          (Set_in n$2@176@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01)
              $Ref.null))))
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) g@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@176@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@176@01 g@125@01)
      (and
        (Set_in n$2@176@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01)))
    (or (Set_in n$2@176@01 g@125@01) (not (Set_in n$2@176@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01)))
    (or
      (not
        (and
          (Set_in n$2@176@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01)
              $Ref.null))))
      (and
        (Set_in n$2@176@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))))
  :pattern ((Set_in n$2@176@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@176@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@176@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) g@125@01))
  :pattern ((Set_in n$2@176@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) n$2@176@01) n$2@176@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@170@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
  $Snap.unit))
(assert (or (= x@169@01 $Ref.null) (not (= x@169@01 $Ref.null))))
(assert (=> (not (= x@169@01 $Ref.null)) (Set_in x@169@01 g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
  $Snap.unit))
(assert (or (= y@168@01 $Ref.null) (not (= y@168@01 $Ref.null))))
(assert (=> (not (= y@168@01 $Ref.null)) (Set_in y@168@01 g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  $Snap.unit))
(assert (forall ((n@177@01 $Ref)) (!
  (and
    (=>
      (Set_in n@177@01 g@125@01)
      (and
        (Set_in n@177@01 g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@179@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
          :pattern ((inv@179@01 r))
          :qid |quant-u-8008|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@183@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@185@01  $FVF<next>) r) r))
              :pattern ((inv@183@01 r))
              :qid |quant-u-8011|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))))
    (or (not (Set_in n@177@01 g@125@01)) (Set_in n@177@01 g@125@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@177@01 $Ref)) (!
  (and
    (=>
      (Set_in n@177@01 g@125@01)
      (and
        (Set_in n@177@01 g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@179@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
          :pattern ((inv@179@01 r))
          :qid |quant-u-8008|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@183@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@185@01  $FVF<next>) r) r))
              :pattern ((inv@183@01 r))
              :qid |quant-u-8011|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))))
    (or (not (Set_in n@177@01 g@125@01)) (Set_in n@177@01 g@125@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01) y@168@01 n@177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@125@01)
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01) y@168@01 n@177@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@181@01  $FVF<next>)) g@125@01) x@169@01 n@177@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) g@125@01) y@168@01 n@177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@188@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@175@01  $FVF<next>) r) r))
  :pattern ((inv@188@01 r))
  :qid |quant-u-8014|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@125@01))
(assert (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@192@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@194@01  $FVF<next>) r) r))
  :pattern ((inv@192@01 r))
  :qid |quant-u-8017|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g@125@01))
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@197@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
  :pattern ((inv@197@01 r))
  :qid |quant-u-8020|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@200@01  $FVF<next>)) g@125@01))
(assert (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@200@01  $FVF<next>)) g@125@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
  $Snap.unit))
(assert (or (not (= x@169@01 xe@126@01)) (= x@169@01 xe@126@01)))
(assert (=>
  (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null)))
  (and
    (not (= x@169@01 xe@126@01))
    (not (= x@169@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@202@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@204@01  $FVF<next>) r) r))
      :pattern ((inv@202@01 r))
      :qid |quant-u-8023|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@205@01  $FVF<next>)) g@125@01))))
(assert (or
  (not (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null))))
  (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null)))))
(assert (=>
  (and (not (= x@169@01 xe@126@01)) (not (= x@169@01 $Ref.null)))
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@205@01  $FVF<next>)) g@125@01) x@169@01 xe@126@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
  $Snap.unit))
(assert (=>
  (not (= x@169@01 $Ref.null))
  (and
    (not (= x@169@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@207@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@209@01  $FVF<next>) r) r))
      :pattern ((inv@207@01 r))
      :qid |quant-u-8026|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@125@01))))
(assert (=>
  (not (= x@169@01 $Ref.null))
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@125@01) x@169@01 y@168@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@214@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@216@01  $FVF<next>) r) r))
  :pattern ((inv@214@01 r))
  :qid |quant-u-8029|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01))
(assert (forall ((v1@211@01 $Ref) (v2@212@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@219@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
          :pattern ((inv@219@01 r))
          :qid |quant-u-8032|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@211@01 v2@212@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@211@01 $Ref) (v2@212@01 $Ref)) (!
  (and
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@219@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
          :pattern ((inv@219@01 r))
          :qid |quant-u-8032|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01) v1@211@01 v2@212@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166-aux|)))
(assert (forall ((v1@211@01 $Ref) (v2@212@01 $Ref)) (!
  (=>
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@125@01) x@169@01 v1@211@01)
    (=
      (edge<Bool> old_g@163@01 v1@211@01 v2@212@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01) v1@211@01 v2@212@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@211@01 v2@212@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@222@01  $FVF<next>)) g@125@01) v1@211@01 v2@212@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@425@19@425@166|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@226@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) r) r))
  :pattern ((inv@226@01 r))
  :qid |quant-u-8035|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@236@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@238@01  $FVF<next>) r) r))
  :pattern ((inv@236@01 r))
  :qid |quant-u-8041|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@239@01  $FVF<next>)) g@125@01))
(assert (forall ((v1@223@01 $Ref) (v2@224@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@231@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) r) r))
          :pattern ((inv@231@01 r))
          :qid |quant-u-8038|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
          (not (= v1@223@01 y@168@01))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01)))))
  :pattern ((edge<Bool> old_g@163@01 v1@223@01 v2@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@223@01 $Ref) (v2@224@01 $Ref)) (!
  (and
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)))
    (=>
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01)))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@231@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) r) r))
          :pattern ((inv@231@01 r))
          :qid |quant-u-8038|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
          (not (= v1@223@01 y@168@01))))
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
        (not (= v1@223@01 y@168@01)))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@239@01  $FVF<next>)) g@125@01) v1@223@01 v2@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166-aux|)))
(assert (forall ((v1@223@01 $Ref) (v2@224@01 $Ref)) (!
  (=>
    (and
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>)) g@125@01) y@168@01 v2@224@01)
      (not (= v1@223@01 y@168@01)))
    (=
      (edge<Bool> old_g@163@01 v1@223@01 v2@224@01)
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>)) g@125@01) v2@224@01 v1@223@01)))
  :pattern ((edge<Bool> old_g@163@01 v1@223@01 v2@224@01))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@239@01  $FVF<next>)) g@125@01) v1@223@01 v2@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@428@19@428@166|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
  $Snap.unit))
(assert (or (not (= y@168@01 $Ref.null)) (= y@168@01 $Ref.null)))
(assert (or
  (not (and (not (= y@168@01 $Ref.null)) (not (= x@169@01 $Ref.null))))
  (and (not (= y@168@01 $Ref.null)) (not (= x@169@01 $Ref.null)))))
(assert (=>
  (and (not (= y@168@01 $Ref.null)) (not (= x@169@01 $Ref.null)))
  (edge<Bool> old_g@163@01 y@168@01 x@169@01)))
(assert (= $t@170@01 ($Snap.combine ($Snap.first $t@170@01) ($Snap.second $t@170@01))))
(assert (= ($Snap.first $t@170@01) $Snap.unit))
(assert (=
  ($Snap.second $t@170@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@170@01))
    ($Snap.second ($Snap.second $t@170@01)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] x != null
(pop) ; 5
(push) ; 5
; [eval] !(x != null)
; [eval] x != null
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] x != null
(push) ; 5
(set-option :timeout 10)
(assert (not (= x@169@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= x@169@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 58 | x@169@01 != Null | live]
; [else-branch: 58 | x@169@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 58 | x@169@01 != Null]
(assert (not (= x@169@01 $Ref.null)))
; [exec]
; var save_g: Set[Edge]
(declare-const save_g@305@01 Set<Edge>)
; [exec]
; var save_y: Ref
(declare-const save_y@306@01 $Ref)
; [exec]
; var save_x: Ref
(declare-const save_x@307@01 $Ref)
; [exec]
; save_g := $$(g)
; [eval] $$(g)
(push) ; 6
(declare-const n@308@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@308@01 g@125@01))
(pop) ; 7
(declare-fun inv@309@01 ($Ref) $Ref)
(declare-fun img@310@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@311@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@311@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@311@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@311@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef247|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@308@01 $Ref) (n2@308@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@308@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@311@01  $FVF<next>) n1@308@01) n1@308@01))
      (and
        (Set_in n2@308@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@311@01  $FVF<next>) n2@308@01) n2@308@01))
      (= n1@308@01 n2@308@01))
    (= n1@308@01 n2@308@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g@125@01)
    (and (= (inv@309@01 n@308@01) n@308@01) (img@310@01 n@308@01)))
  :pattern ((Set_in n@308@01 g@125@01))
  :pattern ((inv@309@01 n@308@01))
  :pattern ((img@310@01 n@308@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@310@01 r) (Set_in (inv@309@01 r) g@125@01)) (= (inv@309@01 r) r))
  :pattern ((inv@309@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@309@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@311@01  $FVF<next>) r) r))
  :pattern ((inv@309@01 r))
  :qid |quant-u-8082|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@309@01 r) g@125@01) (img@310@01 r) (= r (inv@309@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8083|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@312@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))
      (and (Set_in (inv@309@01 r) g@125@01) (img@310@01 r)))
    (=>
      (and (Set_in (inv@309@01 r) g@125@01) (img@310@01 r))
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>))))
  :qid |qp.fvfDomDef250|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@309@01 r) g@125@01) (img@310@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef249|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@312@01  $FVF<next>)) g@125@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@311@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@311@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@311@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef247|)))
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g@125@01)
    (and (= (inv@309@01 n@308@01) n@308@01) (img@310@01 n@308@01)))
  :pattern ((Set_in n@308@01 g@125@01))
  :pattern ((inv@309@01 n@308@01))
  :pattern ((img@310@01 n@308@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@310@01 r) (Set_in (inv@309@01 r) g@125@01)) (= (inv@309@01 r) r))
  :pattern ((inv@309@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))
      (and (Set_in (inv@309@01 r) g@125@01) (img@310@01 r)))
    (=>
      (and (Set_in (inv@309@01 r) g@125@01) (img@310@01 r))
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>))))
  :qid |qp.fvfDomDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@309@01 r) g@125@01) (img@310@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef249|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@309@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@311@01  $FVF<next>) r) r))
    :pattern ((inv@309@01 r))
    :qid |quant-u-8082|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@312@01  $FVF<next>)) g@125@01)))
(declare-const save_g@313@01 Set<Edge>)
(assert (=
  save_g@313@01
  ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@312@01  $FVF<next>)) g@125@01)))
; [exec]
; save_y := y
; [exec]
; save_x := x
; [exec]
; t := x.next
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) x@169@01) x@169@01))
(push) ; 6
(assert (not (and (img@174@01 x@169@01) (Set_in (inv@173@01 x@169@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const t@314@01 $Ref)
(assert (=
  t@314@01
  ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) x@169@01)))
; [exec]
; unlink(g, x)
; [eval] (x in g)
(push) ; 6
(assert (not (Set_in x@169@01 g@125@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Set_in x@169@01 g@125@01))
; [eval] !((null in g))
; [eval] (null in g)
; [eval] (x in g)
(declare-const sm@315@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@315@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) x@169@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@316@01 ((r $Ref)) $Perm
  (ite
    (= r x@169@01)
    ($Perm.min
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      (pTaken@316@01 r))
    $Perm.No)
  
  :qid |quant-u-8085|))))
(check-sat)
; unknown
(pop) ; 6
; 0.50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@316@01 r) $Perm.No)
  
  :qid |quant-u-8086|))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r x@169@01) (= (- $Perm.Write (pTaken@316@01 r)) $Perm.No))
  
  :qid |quant-u-8087|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const n@317@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 7
; [then-branch: 59 | !(n@317@01 in g@125@01) | live]
; [else-branch: 59 | n@317@01 in g@125@01 | live]
(push) ; 8
; [then-branch: 59 | !(n@317@01 in g@125@01)]
(assert (not (Set_in n@317@01 g@125@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 59 | n@317@01 in g@125@01]
(assert (Set_in n@317@01 g@125@01))
; [eval] n != x
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@317@01 g@125@01) (not (Set_in n@317@01 g@125@01))))
(assert (and (Set_in n@317@01 g@125@01) (not (= n@317@01 x@169@01))))
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@318@01 ($Ref) $Ref)
(declare-fun img@319@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@317@01 $Ref)) (!
  (=>
    (and (Set_in n@317@01 g@125@01) (not (= n@317@01 x@169@01)))
    (or (Set_in n@317@01 g@125@01) (not (Set_in n@317@01 g@125@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n@317@01) n@317@01))
  :qid |next-aux|)))
(declare-const sm@320@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- $Perm.Write (pTaken@316@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@320@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@320@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@320@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef254|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@317@01 $Ref) (n2@317@01 $Ref)) (!
  (=>
    (and
      (and
        (and (Set_in n1@317@01 g@125@01) (not (= n1@317@01 x@169@01)))
        ($FVF.loc_next ($FVF.lookup_next (as sm@320@01  $FVF<next>) n1@317@01) n1@317@01))
      (and
        (and (Set_in n2@317@01 g@125@01) (not (= n2@317@01 x@169@01)))
        ($FVF.loc_next ($FVF.lookup_next (as sm@320@01  $FVF<next>) n2@317@01) n2@317@01))
      (= n1@317@01 n2@317@01))
    (= n1@317@01 n2@317@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@317@01 $Ref)) (!
  (=>
    (and (Set_in n@317@01 g@125@01) (not (= n@317@01 x@169@01)))
    (and (= (inv@318@01 n@317@01) n@317@01) (img@319@01 n@317@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n@317@01) n@317@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@319@01 r)
      (and (Set_in (inv@318@01 r) g@125@01) (not (= (inv@318@01 r) x@169@01))))
    (= (inv@318@01 r) r))
  :pattern ((inv@318@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@318@01 r) g@125@01) (not (= (inv@318@01 r) x@169@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@320@01  $FVF<next>) r) r))
  :pattern ((inv@318@01 r))
  :qid |quant-u-8089|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@321@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (Set_in (inv@318@01 r) g@125@01) (not (= (inv@318@01 r) x@169@01)))
      (img@319@01 r)
      (= r (inv@318@01 r)))
    ($Perm.min
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (- $Perm.Write (pTaken@316@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (- $Perm.Write (pTaken@316@01 r))
        $Perm.No)
      (pTaken@321@01 r))
    $Perm.No)
  
  :qid |quant-u-8091|))))
(check-sat)
; unknown
(pop) ; 6
; 0.50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@321@01 r) $Perm.No)
  
  :qid |quant-u-8092|))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@318@01 r) g@125@01) (not (= (inv@318@01 r) x@169@01)))
      (img@319@01 r)
      (= r (inv@318@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@321@01 r)) $Perm.No))
  
  :qid |quant-u-8093|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@322@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 7
; [then-branch: 60 | !(n$0@322@01 in g@125@01) | live]
; [else-branch: 60 | n$0@322@01 in g@125@01 | live]
(push) ; 8
; [then-branch: 60 | !(n$0@322@01 in g@125@01)]
(assert (not (Set_in n$0@322@01 g@125@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 60 | n$0@322@01 in g@125@01]
(assert (Set_in n$0@322@01 g@125@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@315@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef251|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef252|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01))
(push) ; 9
(assert (not (and (img@174@01 n$0@322@01) (Set_in (inv@173@01 n$0@322@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@315@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
(assert (=>
  (Set_in n$0@322@01 g@125@01)
  (and
    (Set_in n$0@322@01 g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01))))
(assert (or (Set_in n$0@322@01 g@125@01) (not (Set_in n$0@322@01 g@125@01))))
(push) ; 7
; [then-branch: 61 | n$0@322@01 in g@125@01 && Lookup(next, sm@315@01, n$0@322@01) != Null | live]
; [else-branch: 61 | !(n$0@322@01 in g@125@01 && Lookup(next, sm@315@01, n$0@322@01) != Null) | live]
(push) ; 8
; [then-branch: 61 | n$0@322@01 in g@125@01 && Lookup(next, sm@315@01, n$0@322@01) != Null]
(assert (and
  (Set_in n$0@322@01 g@125@01)
  (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@315@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef251|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef252|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01))
(push) ; 9
(assert (not (and (img@174@01 n$0@322@01) (Set_in (inv@173@01 n$0@322@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 61 | !(n$0@322@01 in g@125@01 && Lookup(next, sm@315@01, n$0@322@01) != Null)]
(assert (not
  (and
    (Set_in n$0@322@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@315@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
(assert (=>
  (and
    (Set_in n$0@322@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null)))
  (and
    (Set_in n$0@322@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@322@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null))))
  (and
    (Set_in n$0@322@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@315@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@322@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@322@01 g@125@01)
      (and
        (Set_in n$0@322@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01)))
    (or (Set_in n$0@322@01 g@125@01) (not (Set_in n$0@322@01 g@125@01)))
    (=>
      (and
        (Set_in n$0@322@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null)))
      (and
        (Set_in n$0@322@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01)))
    (or
      (not
        (and
          (Set_in n$0@322@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01)
              $Ref.null))))
      (and
        (Set_in n$0@322@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) g@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34-aux|)))
(assert (forall ((n$0@322@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@322@01 g@125@01)
      (and
        (Set_in n$0@322@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01)))
    (or (Set_in n$0@322@01 g@125@01) (not (Set_in n$0@322@01 g@125@01)))
    (=>
      (and
        (Set_in n$0@322@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null)))
      (and
        (Set_in n$0@322@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01)))
    (or
      (not
        (and
          (Set_in n$0@322@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01)
              $Ref.null))))
      (and
        (Set_in n$0@322@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null)))))
  :pattern ((Set_in n$0@322@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34-aux|)))
(push) ; 6
(assert (not (forall ((n$0@322@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@322@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) g@125@01))
  :pattern ((Set_in n$0@322@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@322@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@322@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) g@125@01))
  :pattern ((Set_in n$0@322@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n$0@322@01) n$0@322@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@292@14@292@34|)))
(declare-const $t@323@01 $Snap)
(assert (= $t@323@01 ($Snap.combine ($Snap.first $t@323@01) ($Snap.second $t@323@01))))
(assert (= ($Snap.first $t@323@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@323@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@323@01))
    ($Snap.second ($Snap.second $t@323@01)))))
(assert (= ($Snap.first ($Snap.second $t@323@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@323@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@323@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
(declare-const sm@324@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@324@01  $FVF<next>) x@169@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
(declare-const sm@325@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@325@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@325@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@325@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@325@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r))
  :pattern (($FVF.lookup_next (as sm@325@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef257|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@325@01  $FVF<next>) x@169@01) x@169@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@323@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
(declare-const n$1@326@01 $Ref)
(push) ; 6
; [eval] (n$1 in g) && n$1 != x
; [eval] (n$1 in g)
(push) ; 7
; [then-branch: 62 | !(n$1@326@01 in g@125@01) | live]
; [else-branch: 62 | n$1@326@01 in g@125@01 | live]
(push) ; 8
; [then-branch: 62 | !(n$1@326@01 in g@125@01)]
(assert (not (Set_in n$1@326@01 g@125@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 62 | n$1@326@01 in g@125@01]
(assert (Set_in n$1@326@01 g@125@01))
; [eval] n$1 != x
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$1@326@01 g@125@01) (not (Set_in n$1@326@01 g@125@01))))
(assert (and (Set_in n$1@326@01 g@125@01) (not (= n$1@326@01 x@169@01))))
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@327@01 ($Ref) $Ref)
(declare-fun img@328@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$1@326@01 $Ref)) (!
  (=>
    (and (Set_in n$1@326@01 g@125@01) (not (= n$1@326@01 x@169@01)))
    (or (Set_in n$1@326@01 g@125@01) (not (Set_in n$1@326@01 g@125@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) n$1@326@01) n$1@326@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n$11@326@01 $Ref) (n$12@326@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$11@326@01 g@125@01) (not (= n$11@326@01 x@169@01)))
      (and (Set_in n$12@326@01 g@125@01) (not (= n$12@326@01 x@169@01)))
      (= n$11@326@01 n$12@326@01))
    (= n$11@326@01 n$12@326@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@326@01 $Ref)) (!
  (=>
    (and (Set_in n$1@326@01 g@125@01) (not (= n$1@326@01 x@169@01)))
    (and (= (inv@327@01 n$1@326@01) n$1@326@01) (img@328@01 n$1@326@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) n$1@326@01) n$1@326@01))
  :qid |quant-u-8095|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (= (inv@327@01 r) r))
  :pattern ((inv@327@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@326@01 $Ref)) (!
  (=>
    (and (Set_in n$1@326@01 g@125@01) (not (= n$1@326@01 x@169@01)))
    (not (= n$1@326@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) n$1@326@01) n$1@326@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@326@01 n$1@171@01)
    (=
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))))
  
  :qid |quant-u-8096|))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(declare-const sm@329@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
  :pattern ((inv@327@01 r))
  :qid |quant-u-8097|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@330@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 7
; [then-branch: 63 | !(n$2@330@01 in g@125@01) | live]
; [else-branch: 63 | n$2@330@01 in g@125@01 | live]
(push) ; 8
; [then-branch: 63 | !(n$2@330@01 in g@125@01)]
(assert (not (Set_in n$2@330@01 g@125@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 63 | n$2@330@01 in g@125@01]
(assert (Set_in n$2@330@01 g@125@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) n$2@330@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 n$2@330@01) (Set_in (inv@173@01 n$2@330@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 n$2@330@01)) (pTaken@321@01 n$2@330@01))
        $Perm.No)
      (ite (= n$2@330@01 x@169@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@328@01 n$2@330@01)
        (and
          (Set_in (inv@327@01 n$2@330@01) g@125@01)
          (not (= (inv@327@01 n$2@330@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (=>
  (Set_in n$2@330@01 g@125@01)
  (and
    (Set_in n$2@330@01 g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) n$2@330@01))))
(assert (or (Set_in n$2@330@01 g@125@01) (not (Set_in n$2@330@01 g@125@01))))
(push) ; 7
; [then-branch: 64 | n$2@330@01 in g@125@01 && Lookup(next, sm@329@01, n$2@330@01) != Null | live]
; [else-branch: 64 | !(n$2@330@01 in g@125@01 && Lookup(next, sm@329@01, n$2@330@01) != Null) | live]
(push) ; 8
; [then-branch: 64 | n$2@330@01 in g@125@01 && Lookup(next, sm@329@01, n$2@330@01) != Null]
(assert (and
  (Set_in n$2@330@01 g@125@01)
  (not (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) n$2@330@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 n$2@330@01) (Set_in (inv@173@01 n$2@330@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 n$2@330@01)) (pTaken@321@01 n$2@330@01))
        $Perm.No)
      (ite (= n$2@330@01 x@169@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@328@01 n$2@330@01)
        (and
          (Set_in (inv@327@01 n$2@330@01) g@125@01)
          (not (= (inv@327@01 n$2@330@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 64 | !(n$2@330@01 in g@125@01 && Lookup(next, sm@329@01, n$2@330@01) != Null)]
(assert (not
  (and
    (Set_in n$2@330@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (=>
  (and
    (Set_in n$2@330@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null)))
  (and
    (Set_in n$2@330@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) n$2@330@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@330@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null))))
  (and
    (Set_in n$2@330@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@330@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@330@01 g@125@01)
      (and
        (Set_in n$2@330@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) n$2@330@01)))
    (or (Set_in n$2@330@01 g@125@01) (not (Set_in n$2@330@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@330@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null)))
      (and
        (Set_in n$2@330@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) n$2@330@01)))
    (or
      (not
        (and
          (Set_in n$2@330@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01)
              $Ref.null))))
      (and
        (Set_in n$2@330@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) g@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33-aux|)))
(assert (forall ((n$2@330@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@330@01 g@125@01)
      (and
        (Set_in n$2@330@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) n$2@330@01)))
    (or (Set_in n$2@330@01 g@125@01) (not (Set_in n$2@330@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@330@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null)))
      (and
        (Set_in n$2@330@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) n$2@330@01)))
    (or
      (not
        (and
          (Set_in n$2@330@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01)
              $Ref.null))))
      (and
        (Set_in n$2@330@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null)))))
  :pattern ((Set_in n$2@330@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) n$2@330@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33-aux|)))
(assert (forall ((n$2@330@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@330@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) g@125@01))
  :pattern ((Set_in n$2@330@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$2@330@01) n$2@330@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@293@13@293@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
  $Snap.unit))
; [eval] x.next == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) x@169@01) x@169@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 x@169@01) (Set_in (inv@173@01 x@169@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 x@169@01)) (pTaken@321@01 x@169@01))
        $Perm.No)
      $Perm.Write)
    (ite
      (and
        (img@328@01 x@169@01)
        (and
          (Set_in (inv@327@01 x@169@01) g@125@01)
          (not (= (inv@327@01 x@169@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) x@169@01) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
  $Snap.unit))
; [eval] old(x.next) == null ==> $$(g) == old($$(g))
; [eval] old(x.next) == null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@315@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef251|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef252|))))
(push) ; 6
(assert (not (and (img@174@01 x@169@01) (Set_in (inv@173@01 x@169@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 65 | Lookup(next, sm@315@01, x@169@01) == Null | live]
; [else-branch: 65 | Lookup(next, sm@315@01, x@169@01) != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 65 | Lookup(next, sm@315@01, x@169@01) == Null]
(assert (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@331@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@331@01 g@125@01))
(pop) ; 9
(declare-fun inv@332@01 ($Ref) $Ref)
(declare-fun img@333@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@331@01 $Ref) (n2@331@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@331@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n1@331@01) n1@331@01))
      (and
        (Set_in n2@331@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n2@331@01) n2@331@01))
      (= n1@331@01 n2@331@01))
    (= n1@331@01 n2@331@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@331@01 $Ref)) (!
  (=>
    (Set_in n@331@01 g@125@01)
    (and (= (inv@332@01 n@331@01) n@331@01) (img@333@01 n@331@01)))
  :pattern ((Set_in n@331@01 g@125@01))
  :pattern ((inv@332@01 n@331@01))
  :pattern ((img@333@01 n@331@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@333@01 r) (Set_in (inv@332@01 r) g@125@01)) (= (inv@332@01 r) r))
  :pattern ((inv@332@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@332@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
  :pattern ((inv@332@01 r))
  :qid |quant-u-8099|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r) (= r (inv@332@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@328@01 r)
              (and
                (Set_in (inv@327@01 r) g@125@01)
                (not (= (inv@327@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8100|))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(declare-const sm@334@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>)))
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r)))
    (=>
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r))
      (Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>))))
  :qid |qp.fvfDomDef266|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef265|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@334@01  $FVF<next>)) g@125@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@331@01 $Ref)) (!
  (=>
    (Set_in n@331@01 g@125@01)
    (and (= (inv@332@01 n@331@01) n@331@01) (img@333@01 n@331@01)))
  :pattern ((Set_in n@331@01 g@125@01))
  :pattern ((inv@332@01 n@331@01))
  :pattern ((img@333@01 n@331@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@333@01 r) (Set_in (inv@332@01 r) g@125@01)) (= (inv@332@01 r) r))
  :pattern ((inv@332@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>)))
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r)))
    (=>
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r))
      (Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>))))
  :qid |qp.fvfDomDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef265|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@332@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
    :pattern ((inv@332@01 r))
    :qid |quant-u-8099|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@334@01  $FVF<next>)) g@125@01)))
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@335@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@335@01 g@125@01))
(pop) ; 9
(declare-fun inv@336@01 ($Ref) $Ref)
(declare-fun img@337@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@335@01 $Ref) (n2@335@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@335@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n1@335@01) n1@335@01))
      (and
        (Set_in n2@335@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n2@335@01) n2@335@01))
      (= n1@335@01 n2@335@01))
    (= n1@335@01 n2@335@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@335@01 $Ref)) (!
  (=>
    (Set_in n@335@01 g@125@01)
    (and (= (inv@336@01 n@335@01) n@335@01) (img@337@01 n@335@01)))
  :pattern ((Set_in n@335@01 g@125@01))
  :pattern ((inv@336@01 n@335@01))
  :pattern ((img@337@01 n@335@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@337@01 r) (Set_in (inv@336@01 r) g@125@01)) (= (inv@336@01 r) r))
  :pattern ((inv@336@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@336@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
  :pattern ((inv@336@01 r))
  :qid |quant-u-8102|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@336@01 r) g@125@01) (img@337@01 r) (= r (inv@336@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8103|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@338@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))
      (and (Set_in (inv@336@01 r) g@125@01) (img@337@01 r)))
    (=>
      (and (Set_in (inv@336@01 r) g@125@01) (img@337@01 r))
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>))))
  :qid |qp.fvfDomDef269|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@336@01 r) g@125@01) (img@337@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@338@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@125@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@335@01 $Ref)) (!
  (=>
    (Set_in n@335@01 g@125@01)
    (and (= (inv@336@01 n@335@01) n@335@01) (img@337@01 n@335@01)))
  :pattern ((Set_in n@335@01 g@125@01))
  :pattern ((inv@336@01 n@335@01))
  :pattern ((img@337@01 n@335@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@337@01 r) (Set_in (inv@336@01 r) g@125@01)) (= (inv@336@01 r) r))
  :pattern ((inv@336@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))
      (and (Set_in (inv@336@01 r) g@125@01) (img@337@01 r)))
    (=>
      (and (Set_in (inv@336@01 r) g@125@01) (img@337@01 r))
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>))))
  :qid |qp.fvfDomDef269|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@336@01 r) g@125@01) (img@337@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@338@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@336@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
    :pattern ((inv@336@01 r))
    :qid |quant-u-8102|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@125@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 65 | Lookup(next, sm@315@01, x@169@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@331@01 $Ref)) (!
  (=>
    (Set_in n@331@01 g@125@01)
    (and (= (inv@332@01 n@331@01) n@331@01) (img@333@01 n@331@01)))
  :pattern ((Set_in n@331@01 g@125@01))
  :pattern ((inv@332@01 n@331@01))
  :pattern ((img@333@01 n@331@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@333@01 r) (Set_in (inv@332@01 r) g@125@01)) (= (inv@332@01 r) r))
  :pattern ((inv@332@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>)))
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r)))
    (=>
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r))
      (Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>))))
  :qid |qp.fvfDomDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@332@01 r) g@125@01) (img@333@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef265|)))
(assert (forall ((n@335@01 $Ref)) (!
  (=>
    (Set_in n@335@01 g@125@01)
    (and (= (inv@336@01 n@335@01) n@335@01) (img@337@01 n@335@01)))
  :pattern ((Set_in n@335@01 g@125@01))
  :pattern ((inv@336@01 n@335@01))
  :pattern ((img@337@01 n@335@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@337@01 r) (Set_in (inv@336@01 r) g@125@01)) (= (inv@336@01 r) r))
  :pattern ((inv@336@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))
      (and (Set_in (inv@336@01 r) g@125@01) (img@337@01 r)))
    (=>
      (and (Set_in (inv@336@01 r) g@125@01) (img@337@01 r))
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>))))
  :qid |qp.fvfDomDef269|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@336@01 r) g@125@01) (img@337@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@338@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (=>
  (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)
  (and
    (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@332@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
      :pattern ((inv@332@01 r))
      :qid |quant-u-8099|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@334@01  $FVF<next>)) g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@336@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
      :pattern ((inv@336@01 r))
      :qid |quant-u-8102|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@125@01))))
; Joined path conditions
(assert (or
  (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))
  (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)))
(assert (=>
  (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)
  (Set_equal ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@334@01  $FVF<next>)) g@125@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>)) g@125@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  $Snap.unit))
; [eval] old(x.next) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))))
; [eval] old(x.next) != null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@315@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef251|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef252|))))
(push) ; 6
(assert (not (and (img@174@01 x@169@01) (Set_in (inv@173@01 x@169@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 66 | Lookup(next, sm@315@01, x@169@01) != Null | live]
; [else-branch: 66 | Lookup(next, sm@315@01, x@169@01) == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 66 | Lookup(next, sm@315@01, x@169@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))))
(declare-const v1@339@01 $Ref)
(declare-const v2@340@01 $Ref)
(push) ; 8
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next)))
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 9
(declare-const n@341@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@341@01 g@125@01))
(pop) ; 10
(declare-fun inv@342@01 ($Ref) $Ref)
(declare-fun img@343@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@341@01 $Ref) (n2@341@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@341@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n1@341@01) n1@341@01))
      (and
        (Set_in n2@341@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n2@341@01) n2@341@01))
      (= n1@341@01 n2@341@01))
    (= n1@341@01 n2@341@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@341@01 $Ref)) (!
  (=>
    (Set_in n@341@01 g@125@01)
    (and (= (inv@342@01 n@341@01) n@341@01) (img@343@01 n@341@01)))
  :pattern ((Set_in n@341@01 g@125@01))
  :pattern ((inv@342@01 n@341@01))
  :pattern ((img@343@01 n@341@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@343@01 r) (Set_in (inv@342@01 r) g@125@01)) (= (inv@342@01 r) r))
  :pattern ((inv@342@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@342@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
  :pattern ((inv@342@01 r))
  :qid |quant-u-8105|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r) (= r (inv@342@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@328@01 r)
              (and
                (Set_in (inv@327@01 r) g@125@01)
                (not (= (inv@327@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8106|))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(declare-const sm@344@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r)))
    (=>
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef274|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@125@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((n@341@01 $Ref)) (!
  (=>
    (Set_in n@341@01 g@125@01)
    (and (= (inv@342@01 n@341@01) n@341@01) (img@343@01 n@341@01)))
  :pattern ((Set_in n@341@01 g@125@01))
  :pattern ((inv@342@01 n@341@01))
  :pattern ((img@343@01 n@341@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@343@01 r) (Set_in (inv@342@01 r) g@125@01)) (= (inv@342@01 r) r))
  :pattern ((inv@342@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r)))
    (=>
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@342@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
    :pattern ((inv@342@01 r))
    :qid |quant-u-8105|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@125@01)))
; [eval] edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 9
(declare-const n@345@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@345@01 g@125@01))
(pop) ; 10
(declare-fun inv@346@01 ($Ref) $Ref)
(declare-fun img@347@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@345@01 $Ref) (n2@345@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@345@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n1@345@01) n1@345@01))
      (and
        (Set_in n2@345@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n2@345@01) n2@345@01))
      (= n1@345@01 n2@345@01))
    (= n1@345@01 n2@345@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@345@01 $Ref)) (!
  (=>
    (Set_in n@345@01 g@125@01)
    (and (= (inv@346@01 n@345@01) n@345@01) (img@347@01 n@345@01)))
  :pattern ((Set_in n@345@01 g@125@01))
  :pattern ((inv@346@01 n@345@01))
  :pattern ((img@347@01 n@345@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@347@01 r) (Set_in (inv@346@01 r) g@125@01)) (= (inv@346@01 r) r))
  :pattern ((inv@346@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@346@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
  :pattern ((inv@346@01 r))
  :qid |quant-u-8108|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r) (= r (inv@346@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8109|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const sm@348@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>)))
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r)))
    (=>
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r))
      (Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>))))
  :qid |qp.fvfDomDef277|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@348@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((n@345@01 $Ref)) (!
  (=>
    (Set_in n@345@01 g@125@01)
    (and (= (inv@346@01 n@345@01) n@345@01) (img@347@01 n@345@01)))
  :pattern ((Set_in n@345@01 g@125@01))
  :pattern ((inv@346@01 n@345@01))
  :pattern ((img@347@01 n@345@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@347@01 r) (Set_in (inv@346@01 r) g@125@01)) (= (inv@346@01 r) r))
  :pattern ((inv@346@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>)))
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r)))
    (=>
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r))
      (Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>))))
  :qid |qp.fvfDomDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@348@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@346@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
    :pattern ((inv@346@01 r))
    :qid |quant-u-8108|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01)))
(push) ; 9
; [then-branch: 67 | !(edge[Bool]($$(sm@348@01, g@125@01), v1@339@01, v2@340@01)) | live]
; [else-branch: 67 | edge[Bool]($$(sm@348@01, g@125@01), v1@339@01, v2@340@01) | live]
(push) ; 10
; [then-branch: 67 | !(edge[Bool]($$(sm@348@01, g@125@01), v1@339@01, v2@340@01))]
(assert (not
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 67 | edge[Bool]($$(sm@348@01, g@125@01), v1@339@01, v2@340@01)]
(assert (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01))
; [eval] !(v1 == x && v2 == old(x.next))
; [eval] v1 == x && v2 == old(x.next)
; [eval] v1 == x
(push) ; 11
; [then-branch: 68 | v1@339@01 != x@169@01 | live]
; [else-branch: 68 | v1@339@01 == x@169@01 | live]
(push) ; 12
; [then-branch: 68 | v1@339@01 != x@169@01]
(assert (not (= v1@339@01 x@169@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 68 | v1@339@01 == x@169@01]
(assert (= v1@339@01 x@169@01))
; [eval] v2 == old(x.next)
; [eval] old(x.next)
(push) ; 13
(assert (not (and (img@174@01 x@169@01) (Set_in (inv@173@01 x@169@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (= v1@339@01 x@169@01) (not (= v1@339@01 x@169@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
  (and
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
    (or (= v1@339@01 x@169@01) (not (= v1@339@01 x@169@01))))))
(assert (or
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@341@01 $Ref)) (!
  (=>
    (Set_in n@341@01 g@125@01)
    (and (= (inv@342@01 n@341@01) n@341@01) (img@343@01 n@341@01)))
  :pattern ((Set_in n@341@01 g@125@01))
  :pattern ((inv@342@01 n@341@01))
  :pattern ((img@343@01 n@341@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@343@01 r) (Set_in (inv@342@01 r) g@125@01)) (= (inv@342@01 r) r))
  :pattern ((inv@342@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r)))
    (=>
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
(assert (forall ((n@345@01 $Ref)) (!
  (=>
    (Set_in n@345@01 g@125@01)
    (and (= (inv@346@01 n@345@01) n@345@01) (img@347@01 n@345@01)))
  :pattern ((Set_in n@345@01 g@125@01))
  :pattern ((inv@346@01 n@345@01))
  :pattern ((img@347@01 n@345@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@347@01 r) (Set_in (inv@346@01 r) g@125@01)) (= (inv@346@01 r) r))
  :pattern ((inv@346@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>)))
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r)))
    (=>
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r))
      (Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>))))
  :qid |qp.fvfDomDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@348@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@342@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
  :pattern ((inv@342@01 r))
  :qid |quant-u-8105|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@125@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@346@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
  :pattern ((inv@346@01 r))
  :qid |quant-u-8108|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@339@01 $Ref) (v2@340@01 $Ref)) (!
  (and
    (=>
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
        (or (= v1@339@01 x@169@01) (not (= v1@339@01 x@169@01)))))
    (or
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 66 | Lookup(next, sm@315@01, x@169@01) == Null]
(assert (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@341@01 $Ref)) (!
  (=>
    (Set_in n@341@01 g@125@01)
    (and (= (inv@342@01 n@341@01) n@341@01) (img@343@01 n@341@01)))
  :pattern ((Set_in n@341@01 g@125@01))
  :pattern ((inv@342@01 n@341@01))
  :pattern ((img@343@01 n@341@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@343@01 r) (Set_in (inv@342@01 r) g@125@01)) (= (inv@342@01 r) r))
  :pattern ((inv@342@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r)))
    (=>
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@342@01 r) g@125@01) (img@343@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
(assert (forall ((n@345@01 $Ref)) (!
  (=>
    (Set_in n@345@01 g@125@01)
    (and (= (inv@346@01 n@345@01) n@345@01) (img@347@01 n@345@01)))
  :pattern ((Set_in n@345@01 g@125@01))
  :pattern ((inv@346@01 n@345@01))
  :pattern ((img@347@01 n@345@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@347@01 r) (Set_in (inv@346@01 r) g@125@01)) (= (inv@346@01 r) r))
  :pattern ((inv@346@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>)))
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r)))
    (=>
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r))
      (Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@348@01  $FVF<next>))))
  :qid |qp.fvfDomDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@346@01 r) g@125@01) (img@347@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@348@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@342@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
      :pattern ((inv@342@01 r))
      :qid |quant-u-8105|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@346@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
      :pattern ((inv@346@01 r))
      :qid |quant-u-8108|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01)
    (forall ((v1@339@01 $Ref) (v2@340@01 $Ref)) (!
      (and
        (=>
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
          (and
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
            (or (= v1@339@01 x@169@01) (not (= v1@339@01 x@169@01)))))
        (or
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01))))
      :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89-aux|)))))
; Joined path conditions
(assert (or
  (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)
  (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))
  (forall ((v1@339@01 $Ref) (v2@340@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@348@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01)
        (not
          (and
            (= v1@339@01 x@169@01)
            (=
              v2@340@01
              ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) x@169@01))))))
    :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) g@125@01) v1@339@01 v2@340@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@296@37@298@89|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  $Snap.unit))
; [eval] old(x.next) != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))))
; [eval] old(x.next) != null
; [eval] old(x.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (=
        ($FVF.lookup_next (as sm@315@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef251|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@315@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef252|))))
(push) ; 6
(assert (not (and (img@174@01 x@169@01) (Set_in (inv@173@01 x@169@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 69 | Lookup(next, sm@315@01, x@169@01) != Null | live]
; [else-branch: 69 | Lookup(next, sm@315@01, x@169@01) == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 69 | Lookup(next, sm@315@01, x@169@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))))
(declare-const v1@349@01 $Ref)
(declare-const v2@350@01 $Ref)
(push) ; 8
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)))
; [eval] v1 != v2
(push) ; 9
; [then-branch: 70 | v1@349@01 != v2@350@01 | live]
; [else-branch: 70 | v1@349@01 == v2@350@01 | live]
(push) ; 10
; [then-branch: 70 | v1@349@01 != v2@350@01]
(assert (not (= v1@349@01 v2@350@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 11
(declare-const n@351@01 $Ref)
(push) ; 12
; [eval] (n in refs)
(assert (Set_in n@351@01 g@125@01))
(pop) ; 12
(declare-fun inv@352@01 ($Ref) $Ref)
(declare-fun img@353@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((n1@351@01 $Ref) (n2@351@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@351@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n1@351@01) n1@351@01))
      (and
        (Set_in n2@351@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n2@351@01) n2@351@01))
      (= n1@351@01 n2@351@01))
    (= n1@351@01 n2@351@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@351@01 $Ref)) (!
  (=>
    (Set_in n@351@01 g@125@01)
    (and (= (inv@352@01 n@351@01) n@351@01) (img@353@01 n@351@01)))
  :pattern ((Set_in n@351@01 g@125@01))
  :pattern ((inv@352@01 n@351@01))
  :pattern ((img@353@01 n@351@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@353@01 r) (Set_in (inv@352@01 r) g@125@01)) (= (inv@352@01 r) r))
  :pattern ((inv@352@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@352@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
  :pattern ((inv@352@01 r))
  :qid |quant-u-8111|)))
(push) ; 12
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r) (= r (inv@352@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@328@01 r)
              (and
                (Set_in (inv@327@01 r) g@125@01)
                (not (= (inv@327@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8112|))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(declare-const sm@354@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>)))
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r)))
    (=>
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>))))
  :qid |qp.fvfDomDef282|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef280|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef281|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@354@01  $FVF<next>)) g@125@01))
(pop) ; 11
; Joined path conditions
(assert (forall ((n@351@01 $Ref)) (!
  (=>
    (Set_in n@351@01 g@125@01)
    (and (= (inv@352@01 n@351@01) n@351@01) (img@353@01 n@351@01)))
  :pattern ((Set_in n@351@01 g@125@01))
  :pattern ((inv@352@01 n@351@01))
  :pattern ((img@353@01 n@351@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@353@01 r) (Set_in (inv@352@01 r) g@125@01)) (= (inv@352@01 r) r))
  :pattern ((inv@352@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>)))
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r)))
    (=>
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>))))
  :qid |qp.fvfDomDef282|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef280|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef281|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@352@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
    :pattern ((inv@352@01 r))
    :qid |quant-u-8111|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@354@01  $FVF<next>)) g@125@01)))
; [eval] exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 11
(declare-const n@355@01 $Ref)
(push) ; 12
; [eval] (n in refs)
(assert (Set_in n@355@01 g@125@01))
(pop) ; 12
(declare-fun inv@356@01 ($Ref) $Ref)
(declare-fun img@357@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((n1@355@01 $Ref) (n2@355@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@355@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n1@355@01) n1@355@01))
      (and
        (Set_in n2@355@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) n2@355@01) n2@355@01))
      (= n1@355@01 n2@355@01))
    (= n1@355@01 n2@355@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@355@01 $Ref)) (!
  (=>
    (Set_in n@355@01 g@125@01)
    (and (= (inv@356@01 n@355@01) n@355@01) (img@357@01 n@355@01)))
  :pattern ((Set_in n@355@01 g@125@01))
  :pattern ((inv@356@01 n@355@01))
  :pattern ((img@357@01 n@355@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@357@01 r) (Set_in (inv@356@01 r) g@125@01)) (= (inv@356@01 r) r))
  :pattern ((inv@356@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@356@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
  :pattern ((inv@356@01 r))
  :qid |quant-u-8114|)))
(push) ; 12
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r) (= r (inv@356@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8115|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const sm@358@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r)))
    (=>
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r))
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>))))
  :qid |qp.fvfDomDef285|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@358@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01))
(pop) ; 11
; Joined path conditions
(assert (forall ((n@355@01 $Ref)) (!
  (=>
    (Set_in n@355@01 g@125@01)
    (and (= (inv@356@01 n@355@01) n@355@01) (img@357@01 n@355@01)))
  :pattern ((Set_in n@355@01 g@125@01))
  :pattern ((inv@356@01 n@355@01))
  :pattern ((img@357@01 n@355@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@357@01 r) (Set_in (inv@356@01 r) g@125@01)) (= (inv@356@01 r) r))
  :pattern ((inv@356@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r)))
    (=>
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r))
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>))))
  :qid |qp.fvfDomDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@358@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@356@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
    :pattern ((inv@356@01 r))
    :qid |quant-u-8114|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01)))
(push) ; 11
; [then-branch: 71 | !(exists_path[Bool]($$(sm@358@01, g@125@01), v1@349@01, v2@350@01)) | live]
; [else-branch: 71 | exists_path[Bool]($$(sm@358@01, g@125@01), v1@349@01, v2@350@01) | live]
(push) ; 12
; [then-branch: 71 | !(exists_path[Bool]($$(sm@358@01, g@125@01), v1@349@01, v2@350@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 71 | exists_path[Bool]($$(sm@358@01, g@125@01), v1@349@01, v2@350@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01))
; [eval] !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 13
(declare-const n@359@01 $Ref)
(push) ; 14
; [eval] (n in refs)
(assert (Set_in n@359@01 g@125@01))
(pop) ; 14
(declare-fun inv@360@01 ($Ref) $Ref)
(declare-fun img@361@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@362@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
; Check receiver injectivity
(push) ; 14
(assert (not (forall ((n1@359@01 $Ref) (n2@359@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@359@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n1@359@01) n1@359@01))
      (and
        (Set_in n2@359@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n2@359@01) n2@359@01))
      (= n1@359@01 n2@359@01))
    (= n1@359@01 n2@359@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@359@01 $Ref)) (!
  (=>
    (Set_in n@359@01 g@125@01)
    (and (= (inv@360@01 n@359@01) n@359@01) (img@361@01 n@359@01)))
  :pattern ((Set_in n@359@01 g@125@01))
  :pattern ((inv@360@01 n@359@01))
  :pattern ((img@361@01 n@359@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@361@01 r) (Set_in (inv@360@01 r) g@125@01)) (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@360@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
  :pattern ((inv@360@01 r))
  :qid |quant-u-8117|)))
(push) ; 14
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r) (= r (inv@360@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8118|))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const sm@363@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r)))
    (=>
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01))
(pop) ; 13
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@359@01 $Ref)) (!
  (=>
    (Set_in n@359@01 g@125@01)
    (and (= (inv@360@01 n@359@01) n@359@01) (img@361@01 n@359@01)))
  :pattern ((Set_in n@359@01 g@125@01))
  :pattern ((inv@360@01 n@359@01))
  :pattern ((img@361@01 n@359@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@361@01 r) (Set_in (inv@360@01 r) g@125@01)) (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r)))
    (=>
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@360@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
    :pattern ((inv@360@01 r))
    :qid |quant-u-8117|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01)))
(push) ; 13
; [then-branch: 72 | !(exists_path[Bool]($$(sm@363@01, g@125@01), v1@349@01, x@169@01)) | live]
; [else-branch: 72 | exists_path[Bool]($$(sm@363@01, g@125@01), v1@349@01, x@169@01) | live]
(push) ; 14
; [then-branch: 72 | !(exists_path[Bool]($$(sm@363@01, g@125@01), v1@349@01, x@169@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 72 | exists_path[Bool]($$(sm@363@01, g@125@01), v1@349@01, x@169@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01))
; [eval] exists_path(old($$(g)), old(x.next), v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 15
(declare-const n@364@01 $Ref)
(push) ; 16
; [eval] (n in refs)
(assert (Set_in n@364@01 g@125@01))
(pop) ; 16
(declare-fun inv@365@01 ($Ref) $Ref)
(declare-fun img@366@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@367@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@367@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
; Check receiver injectivity
(push) ; 16
(assert (not (forall ((n1@364@01 $Ref) (n2@364@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@364@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@367@01  $FVF<next>) n1@364@01) n1@364@01))
      (and
        (Set_in n2@364@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@367@01  $FVF<next>) n2@364@01) n2@364@01))
      (= n1@364@01 n2@364@01))
    (= n1@364@01 n2@364@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@364@01 $Ref)) (!
  (=>
    (Set_in n@364@01 g@125@01)
    (and (= (inv@365@01 n@364@01) n@364@01) (img@366@01 n@364@01)))
  :pattern ((Set_in n@364@01 g@125@01))
  :pattern ((inv@365@01 n@364@01))
  :pattern ((img@366@01 n@364@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@366@01 r) (Set_in (inv@365@01 r) g@125@01)) (= (inv@365@01 r) r))
  :pattern ((inv@365@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@365@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@367@01  $FVF<next>) r) r))
  :pattern ((inv@365@01 r))
  :qid |quant-u-8120|)))
(push) ; 16
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r) (= r (inv@365@01 r)))
    (>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-8121|))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(declare-const sm@368@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r)))
    (=>
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@368@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>)) g@125@01))
(pop) ; 15
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@367@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@364@01 $Ref)) (!
  (=>
    (Set_in n@364@01 g@125@01)
    (and (= (inv@365@01 n@364@01) n@364@01) (img@366@01 n@364@01)))
  :pattern ((Set_in n@364@01 g@125@01))
  :pattern ((inv@365@01 n@364@01))
  :pattern ((img@366@01 n@364@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@366@01 r) (Set_in (inv@365@01 r) g@125@01)) (= (inv@365@01 r) r))
  :pattern ((inv@365@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r)))
    (=>
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@368@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@365@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@367@01  $FVF<next>) r) r))
    :pattern ((inv@365@01 r))
    :qid |quant-u-8120|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>)) g@125@01)))
; [eval] old(x.next)
(push) ; 15
(assert (not (and (img@174@01 x@169@01) (Set_in (inv@173@01 x@169@01) g@125@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@367@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@364@01 $Ref)) (!
  (=>
    (Set_in n@364@01 g@125@01)
    (and (= (inv@365@01 n@364@01) n@364@01) (img@366@01 n@364@01)))
  :pattern ((Set_in n@364@01 g@125@01))
  :pattern ((inv@365@01 n@364@01))
  :pattern ((img@366@01 n@364@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@366@01 r) (Set_in (inv@365@01 r) g@125@01)) (= (inv@365@01 r) r))
  :pattern ((inv@365@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r)))
    (=>
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@368@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@365@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@367@01  $FVF<next>) r) r))
      :pattern ((inv@365@01 r))
      :qid |quant-u-8120|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>)) g@125@01))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@359@01 $Ref)) (!
  (=>
    (Set_in n@359@01 g@125@01)
    (and (= (inv@360@01 n@359@01) n@359@01) (img@361@01 n@359@01)))
  :pattern ((Set_in n@359@01 g@125@01))
  :pattern ((inv@360@01 n@359@01))
  :pattern ((img@361@01 n@359@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@361@01 r) (Set_in (inv@360@01 r) g@125@01)) (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r)))
    (=>
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@367@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@364@01 $Ref)) (!
  (=>
    (Set_in n@364@01 g@125@01)
    (and (= (inv@365@01 n@364@01) n@364@01) (img@366@01 n@364@01)))
  :pattern ((Set_in n@364@01 g@125@01))
  :pattern ((inv@365@01 n@364@01))
  :pattern ((img@366@01 n@364@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@366@01 r) (Set_in (inv@365@01 r) g@125@01)) (= (inv@365@01 r) r))
  :pattern ((inv@365@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r)))
    (=>
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@368@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@360@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
      :pattern ((inv@360@01 r))
      :qid |quant-u-8117|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@365@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@367@01  $FVF<next>) r) r))
          :pattern ((inv@365@01 r))
          :qid |quant-u-8120|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>)) g@125@01)))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01))))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 70 | v1@349@01 == v2@350@01]
(assert (= v1@349@01 v2@350@01))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((n@351@01 $Ref)) (!
  (=>
    (Set_in n@351@01 g@125@01)
    (and (= (inv@352@01 n@351@01) n@351@01) (img@353@01 n@351@01)))
  :pattern ((Set_in n@351@01 g@125@01))
  :pattern ((inv@352@01 n@351@01))
  :pattern ((img@353@01 n@351@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@353@01 r) (Set_in (inv@352@01 r) g@125@01)) (= (inv@352@01 r) r))
  :pattern ((inv@352@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>)))
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r)))
    (=>
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>))))
  :qid |qp.fvfDomDef282|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef280|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef281|)))
(assert (forall ((n@355@01 $Ref)) (!
  (=>
    (Set_in n@355@01 g@125@01)
    (and (= (inv@356@01 n@355@01) n@355@01) (img@357@01 n@355@01)))
  :pattern ((Set_in n@355@01 g@125@01))
  :pattern ((inv@356@01 n@355@01))
  :pattern ((img@357@01 n@355@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@357@01 r) (Set_in (inv@356@01 r) g@125@01)) (= (inv@356@01 r) r))
  :pattern ((inv@356@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r)))
    (=>
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r))
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>))))
  :qid |qp.fvfDomDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@358@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@359@01 $Ref)) (!
  (=>
    (Set_in n@359@01 g@125@01)
    (and (= (inv@360@01 n@359@01) n@359@01) (img@361@01 n@359@01)))
  :pattern ((Set_in n@359@01 g@125@01))
  :pattern ((inv@360@01 n@359@01))
  :pattern ((img@361@01 n@359@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@361@01 r) (Set_in (inv@360@01 r) g@125@01)) (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r)))
    (=>
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@367@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@364@01 $Ref)) (!
  (=>
    (Set_in n@364@01 g@125@01)
    (and (= (inv@365@01 n@364@01) n@364@01) (img@366@01 n@364@01)))
  :pattern ((Set_in n@364@01 g@125@01))
  :pattern ((inv@365@01 n@364@01))
  :pattern ((img@366@01 n@364@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@366@01 r) (Set_in (inv@365@01 r) g@125@01)) (= (inv@365@01 r) r))
  :pattern ((inv@365@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r)))
    (=>
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@368@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (=>
  (not (= v1@349@01 v2@350@01))
  (and
    (not (= v1@349@01 v2@350@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@352@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
      :pattern ((inv@352@01 r))
      :qid |quant-u-8111|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@354@01  $FVF<next>)) g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@356@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
      :pattern ((inv@356@01 r))
      :qid |quant-u-8114|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@360@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
          :pattern ((inv@360@01 r))
          :qid |quant-u-8117|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@365@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@367@01  $FVF<next>) r) r))
              :pattern ((inv@365@01 r))
              :qid |quant-u-8120|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>)) g@125@01)))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)))))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01))))))
; Joined path conditions
(assert (or (= v1@349@01 v2@350@01) (not (= v1@349@01 v2@350@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@351@01 $Ref)) (!
  (=>
    (Set_in n@351@01 g@125@01)
    (and (= (inv@352@01 n@351@01) n@351@01) (img@353@01 n@351@01)))
  :pattern ((Set_in n@351@01 g@125@01))
  :pattern ((inv@352@01 n@351@01))
  :pattern ((img@353@01 n@351@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@353@01 r) (Set_in (inv@352@01 r) g@125@01)) (= (inv@352@01 r) r))
  :pattern ((inv@352@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>)))
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r)))
    (=>
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>))))
  :qid |qp.fvfDomDef282|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef280|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef281|)))
(assert (forall ((n@355@01 $Ref)) (!
  (=>
    (Set_in n@355@01 g@125@01)
    (and (= (inv@356@01 n@355@01) n@355@01) (img@357@01 n@355@01)))
  :pattern ((Set_in n@355@01 g@125@01))
  :pattern ((inv@356@01 n@355@01))
  :pattern ((img@357@01 n@355@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@357@01 r) (Set_in (inv@356@01 r) g@125@01)) (= (inv@356@01 r) r))
  :pattern ((inv@356@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r)))
    (=>
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r))
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>))))
  :qid |qp.fvfDomDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@358@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@359@01 $Ref)) (!
  (=>
    (Set_in n@359@01 g@125@01)
    (and (= (inv@360@01 n@359@01) n@359@01) (img@361@01 n@359@01)))
  :pattern ((Set_in n@359@01 g@125@01))
  :pattern ((inv@360@01 n@359@01))
  :pattern ((img@361@01 n@359@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@361@01 r) (Set_in (inv@360@01 r) g@125@01)) (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r)))
    (=>
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@367@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@364@01 $Ref)) (!
  (=>
    (Set_in n@364@01 g@125@01)
    (and (= (inv@365@01 n@364@01) n@364@01) (img@366@01 n@364@01)))
  :pattern ((Set_in n@364@01 g@125@01))
  :pattern ((inv@365@01 n@364@01))
  :pattern ((img@366@01 n@364@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@366@01 r) (Set_in (inv@365@01 r) g@125@01)) (= (inv@365@01 r) r))
  :pattern ((inv@365@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r)))
    (=>
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@368@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@349@01 $Ref) (v2@350@01 $Ref)) (!
  (and
    (=>
      (not (= v1@349@01 v2@350@01))
      (and
        (not (= v1@349@01 v2@350@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@352@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
          :pattern ((inv@352@01 r))
          :qid |quant-u-8111|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@354@01  $FVF<next>)) g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@356@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
          :pattern ((inv@356@01 r))
          :qid |quant-u-8114|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@360@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
              :pattern ((inv@360@01 r))
              :qid |quant-u-8117|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@365@01 r) g@125@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@367@01  $FVF<next>) r) r))
                  :pattern ((inv@365@01 r))
                  :qid |quant-u-8120|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>)) g@125@01)))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)))))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)))))
    (or (= v1@349@01 v2@350@01) (not (= v1@349@01 v2@350@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@354@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 69 | Lookup(next, sm@315@01, x@169@01) == Null]
(assert (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@351@01 $Ref)) (!
  (=>
    (Set_in n@351@01 g@125@01)
    (and (= (inv@352@01 n@351@01) n@351@01) (img@353@01 n@351@01)))
  :pattern ((Set_in n@351@01 g@125@01))
  :pattern ((inv@352@01 n@351@01))
  :pattern ((img@353@01 n@351@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@353@01 r) (Set_in (inv@352@01 r) g@125@01)) (= (inv@352@01 r) r))
  :pattern ((inv@352@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>)))
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r)))
    (=>
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@354@01  $FVF<next>))))
  :qid |qp.fvfDomDef282|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@352@01 r) g@125@01) (img@353@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef280|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef281|)))
(assert (forall ((n@355@01 $Ref)) (!
  (=>
    (Set_in n@355@01 g@125@01)
    (and (= (inv@356@01 n@355@01) n@355@01) (img@357@01 n@355@01)))
  :pattern ((Set_in n@355@01 g@125@01))
  :pattern ((inv@356@01 n@355@01))
  :pattern ((img@357@01 n@355@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@357@01 r) (Set_in (inv@356@01 r) g@125@01)) (= (inv@356@01 r) r))
  :pattern ((inv@356@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r)))
    (=>
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r))
      (Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@358@01  $FVF<next>))))
  :qid |qp.fvfDomDef285|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@356@01 r) g@125@01) (img@357@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@358@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@358@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef286|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef287|)))
(assert (forall ((n@359@01 $Ref)) (!
  (=>
    (Set_in n@359@01 g@125@01)
    (and (= (inv@360@01 n@359@01) n@359@01) (img@361@01 n@359@01)))
  :pattern ((Set_in n@359@01 g@125@01))
  :pattern ((inv@360@01 n@359@01))
  :pattern ((img@361@01 n@359@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@361@01 r) (Set_in (inv@360@01 r) g@125@01)) (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r)))
    (=>
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@363@01  $FVF<next>))))
  :qid |qp.fvfDomDef290|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@360@01 r) g@125@01) (img@361@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef288|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef289|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
    (=
      ($FVF.lookup_next (as sm@367@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef291|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@367@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef292|)))
(assert (forall ((n@364@01 $Ref)) (!
  (=>
    (Set_in n@364@01 g@125@01)
    (and (= (inv@365@01 n@364@01) n@364@01) (img@366@01 n@364@01)))
  :pattern ((Set_in n@364@01 g@125@01))
  :pattern ((inv@365@01 n@364@01))
  :pattern ((img@366@01 n@364@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@366@01 r) (Set_in (inv@365@01 r) g@125@01)) (= (inv@365@01 r) r))
  :pattern ((inv@365@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r)))
    (=>
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>))))
  :qid |qp.fvfDomDef295|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@365@01 r) g@125@01) (img@366@01 r))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01)))
    (=
      ($FVF.lookup_next (as sm@368@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef293|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef294|)))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))
    (forall ((v1@349@01 $Ref) (v2@350@01 $Ref)) (!
      (and
        (=>
          (not (= v1@349@01 v2@350@01))
          (and
            (not (= v1@349@01 v2@350@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@352@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
              :pattern ((inv@352@01 r))
              :qid |quant-u-8111|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@354@01  $FVF<next>)) g@125@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@356@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@315@01  $FVF<next>) r) r))
              :pattern ((inv@356@01 r))
              :qid |quant-u-8114|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@360@01 r) g@125@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
                  :pattern ((inv@360@01 r))
                  :qid |quant-u-8117|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01)
                (=>
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
                  (and
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@365@01 r) g@125@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@367@01  $FVF<next>) r) r))
                      :pattern ((inv@365@01 r))
                      :qid |quant-u-8120|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>)) g@125@01)))
                (or
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)))))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)))))
        (or (= v1@349@01 v2@350@01) (not (= v1@349@01 v2@350@01))))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@354@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128-aux|)))))
; Joined path conditions
(assert (=>
  (not (= ($FVF.lookup_next (as sm@315@01  $FVF<next>) x@169@01) $Ref.null))
  (forall ((v1@349@01 $Ref) (v2@350@01 $Ref)) (!
    (=>
      (not (= v1@349@01 v2@350@01))
      (=
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@354@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
        (and
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@358@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01)
          (not
            (and
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@363@01  $FVF<next>)) g@125@01) v1@349@01 x@169@01)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>)) g@125@01) ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) x@169@01) v2@350@01))))))
    :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@354@01  $FVF<next>)) g@125@01) v1@349@01 v2@350@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@299@38@303@128|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; link(g, x, y)
; [eval] (x in g)
; [eval] y != null ==> (y in g)
; [eval] y != null
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= y@168@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= y@168@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 73 | y@168@01 != Null | live]
; [else-branch: 73 | y@168@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 73 | y@168@01 != Null]
(assert (not (= y@168@01 $Ref.null)))
; [eval] (y in g)
(pop) ; 7
(push) ; 7
; [else-branch: 73 | y@168@01 == Null]
(assert (= y@168@01 $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] !((null in g))
; [eval] (null in g)
; [eval] (x in g)
; Definitional axioms for snapshot map values
; Precomputing data for removing quantified permissions
(define-fun pTaken@369@01 ((r $Ref)) $Perm
  (ite
    (= r x@169@01)
    ($Perm.min (ite (= r x@169@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@370@01 ((r $Ref)) $Perm
  (ite
    (= r x@169@01)
    ($Perm.min
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
        $Perm.No)
      (- $Perm.Write (pTaken@369@01 r)))
    $Perm.No))
(define-fun pTaken@371@01 ((r $Ref)) $Perm
  (ite
    (= r x@169@01)
    ($Perm.min
      (ite
        (and
          (img@328@01 r)
          (and
            (Set_in (inv@327@01 r) g@125@01)
            (not (= (inv@327@01 r) x@169@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- (- $Perm.Write (pTaken@369@01 r)) (pTaken@370@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@369@01 x@169@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r x@169@01) (= (- $Perm.Write (pTaken@369@01 r)) $Perm.No))
  
  :qid |quant-u-8124|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const n@372@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n in g) && n != x
; [eval] (n in g)
(push) ; 7
; [then-branch: 74 | !(n@372@01 in g@125@01) | live]
; [else-branch: 74 | n@372@01 in g@125@01 | live]
(push) ; 8
; [then-branch: 74 | !(n@372@01 in g@125@01)]
(assert (not (Set_in n@372@01 g@125@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 74 | n@372@01 in g@125@01]
(assert (Set_in n@372@01 g@125@01))
; [eval] n != x
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@372@01 g@125@01) (not (Set_in n@372@01 g@125@01))))
(assert (and (Set_in n@372@01 g@125@01) (not (= n@372@01 x@169@01))))
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@373@01 ($Ref) $Ref)
(declare-fun img@374@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@372@01 $Ref)) (!
  (=>
    (and (Set_in n@372@01 g@125@01) (not (= n@372@01 x@169@01)))
    (or (Set_in n@372@01 g@125@01) (not (Set_in n@372@01 g@125@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n@372@01) n@372@01))
  :qid |next-aux|)))
(declare-const sm@375@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@375@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@375@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef296|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@375@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@375@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef297|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@375@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef298|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@372@01 $Ref) (n2@372@01 $Ref)) (!
  (=>
    (and
      (and
        (and (Set_in n1@372@01 g@125@01) (not (= n1@372@01 x@169@01)))
        ($FVF.loc_next ($FVF.lookup_next (as sm@375@01  $FVF<next>) n1@372@01) n1@372@01))
      (and
        (and (Set_in n2@372@01 g@125@01) (not (= n2@372@01 x@169@01)))
        ($FVF.loc_next ($FVF.lookup_next (as sm@375@01  $FVF<next>) n2@372@01) n2@372@01))
      (= n1@372@01 n2@372@01))
    (= n1@372@01 n2@372@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@372@01 $Ref)) (!
  (=>
    (and (Set_in n@372@01 g@125@01) (not (= n@372@01 x@169@01)))
    (and (= (inv@373@01 n@372@01) n@372@01) (img@374@01 n@372@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n@372@01) n@372@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@374@01 r)
      (and (Set_in (inv@373@01 r) g@125@01) (not (= (inv@373@01 r) x@169@01))))
    (= (inv@373@01 r) r))
  :pattern ((inv@373@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@373@01 r) g@125@01) (not (= (inv@373@01 r) x@169@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@375@01  $FVF<next>) r) r))
  :pattern ((inv@373@01 r))
  :qid |quant-u-8126|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@376@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (Set_in (inv@373@01 r) g@125@01) (not (= (inv@373@01 r) x@169@01)))
      (img@374@01 r)
      (= r (inv@373@01 r)))
    ($Perm.min
      (ite
        (and
          (img@328@01 r)
          (and
            (Set_in (inv@327@01 r) g@125@01)
            (not (= (inv@327@01 r) x@169@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@377@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (Set_in (inv@373@01 r) g@125@01) (not (= (inv@373@01 r) x@169@01)))
      (img@374@01 r)
      (= r (inv@373@01 r)))
    ($Perm.min
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
        $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@376@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@328@01 r)
          (and
            (Set_in (inv@327@01 r) g@125@01)
            (not (= (inv@327@01 r) x@169@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@376@01 r))
    $Perm.No)
  
  :qid |quant-u-8128|))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@373@01 r) g@125@01) (not (= (inv@373@01 r) x@169@01)))
      (img@374@01 r)
      (= r (inv@373@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@376@01 r)) $Perm.No))
  
  :qid |quant-u-8129|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@378@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 7
; [then-branch: 75 | !(n$0@378@01 in g@125@01) | live]
; [else-branch: 75 | n$0@378@01 in g@125@01 | live]
(push) ; 8
; [then-branch: 75 | !(n$0@378@01 in g@125@01)]
(assert (not (Set_in n$0@378@01 g@125@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 75 | n$0@378@01 in g@125@01]
(assert (Set_in n$0@378@01 g@125@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 n$0@378@01) (Set_in (inv@173@01 n$0@378@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 n$0@378@01)) (pTaken@321@01 n$0@378@01))
        $Perm.No)
      (ite (= n$0@378@01 x@169@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@328@01 n$0@378@01)
        (and
          (Set_in (inv@327@01 n$0@378@01) g@125@01)
          (not (= (inv@327@01 n$0@378@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (=>
  (Set_in n$0@378@01 g@125@01)
  (and
    (Set_in n$0@378@01 g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01))))
(assert (or (Set_in n$0@378@01 g@125@01) (not (Set_in n$0@378@01 g@125@01))))
(push) ; 7
; [then-branch: 76 | n$0@378@01 in g@125@01 && Lookup(next, sm@329@01, n$0@378@01) != Null | live]
; [else-branch: 76 | !(n$0@378@01 in g@125@01 && Lookup(next, sm@329@01, n$0@378@01) != Null) | live]
(push) ; 8
; [then-branch: 76 | n$0@378@01 in g@125@01 && Lookup(next, sm@329@01, n$0@378@01) != Null]
(assert (and
  (Set_in n$0@378@01 g@125@01)
  (not (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 n$0@378@01) (Set_in (inv@173@01 n$0@378@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 n$0@378@01)) (pTaken@321@01 n$0@378@01))
        $Perm.No)
      (ite (= n$0@378@01 x@169@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@328@01 n$0@378@01)
        (and
          (Set_in (inv@327@01 n$0@378@01) g@125@01)
          (not (= (inv@327@01 n$0@378@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 76 | !(n$0@378@01 in g@125@01 && Lookup(next, sm@329@01, n$0@378@01) != Null)]
(assert (not
  (and
    (Set_in n$0@378@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (=>
  (and
    (Set_in n$0@378@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null)))
  (and
    (Set_in n$0@378@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@378@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null))))
  (and
    (Set_in n$0@378@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@378@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@378@01 g@125@01)
      (and
        (Set_in n$0@378@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01)))
    (or (Set_in n$0@378@01 g@125@01) (not (Set_in n$0@378@01 g@125@01)))
    (=>
      (and
        (Set_in n$0@378@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null)))
      (and
        (Set_in n$0@378@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01)))
    (or
      (not
        (and
          (Set_in n$0@378@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01)
              $Ref.null))))
      (and
        (Set_in n$0@378@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) g@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34-aux|)))
(assert (forall ((n$0@378@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@378@01 g@125@01)
      (and
        (Set_in n$0@378@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01)))
    (or (Set_in n$0@378@01 g@125@01) (not (Set_in n$0@378@01 g@125@01)))
    (=>
      (and
        (Set_in n$0@378@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null)))
      (and
        (Set_in n$0@378@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01)))
    (or
      (not
        (and
          (Set_in n$0@378@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01)
              $Ref.null))))
      (and
        (Set_in n$0@378@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null)))))
  :pattern ((Set_in n$0@378@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34-aux|)))
(push) ; 6
(assert (not (forall ((n$0@378@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@378@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) g@125@01))
  :pattern ((Set_in n$0@378@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@378@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@378@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) g@125@01))
  :pattern ((Set_in n$0@378@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n$0@378@01) n$0@378@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@276@14@276@34|)))
; [eval] x.next == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef258|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@329@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@329@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 x@169@01) (Set_in (inv@173@01 x@169@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 x@169@01)) (pTaken@321@01 x@169@01))
        $Perm.No)
      $Perm.Write)
    (ite
      (and
        (img@328@01 x@169@01)
        (and
          (Set_in (inv@327@01 x@169@01) g@125@01)
          (not (= (inv@327@01 x@169@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 ($Snap.combine ($Snap.first $t@379@01) ($Snap.second $t@379@01))))
(assert (= ($Snap.first $t@379@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@379@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@379@01))
    ($Snap.second ($Snap.second $t@379@01)))))
(assert (= ($Snap.first ($Snap.second $t@379@01)) $Snap.unit))
; [eval] (x in g)
(assert (=
  ($Snap.second ($Snap.second $t@379@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@379@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@379@01))))))
(declare-const sm@380@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@380@01  $FVF<next>) x@169@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@379@01))))))
(declare-const sm@381@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@381@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@381@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef299|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@381@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@381@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef300|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r))
  :pattern (($FVF.lookup_next (as sm@381@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef301|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@381@01  $FVF<next>) x@169@01) x@169@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@379@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01)))))))
(declare-const n$1@382@01 $Ref)
(push) ; 6
; [eval] (n$1 in g) && n$1 != x
; [eval] (n$1 in g)
(push) ; 7
; [then-branch: 77 | !(n$1@382@01 in g@125@01) | live]
; [else-branch: 77 | n$1@382@01 in g@125@01 | live]
(push) ; 8
; [then-branch: 77 | !(n$1@382@01 in g@125@01)]
(assert (not (Set_in n$1@382@01 g@125@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 77 | n$1@382@01 in g@125@01]
(assert (Set_in n$1@382@01 g@125@01))
; [eval] n$1 != x
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$1@382@01 g@125@01) (not (Set_in n$1@382@01 g@125@01))))
(assert (and (Set_in n$1@382@01 g@125@01) (not (= n$1@382@01 x@169@01))))
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@383@01 ($Ref) $Ref)
(declare-fun img@384@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$1@382@01 $Ref)) (!
  (=>
    (and (Set_in n$1@382@01 g@125@01) (not (= n$1@382@01 x@169@01)))
    (or (Set_in n$1@382@01 g@125@01) (not (Set_in n$1@382@01 g@125@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) n$1@382@01) n$1@382@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n$11@382@01 $Ref) (n$12@382@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$11@382@01 g@125@01) (not (= n$11@382@01 x@169@01)))
      (and (Set_in n$12@382@01 g@125@01) (not (= n$12@382@01 x@169@01)))
      (= n$11@382@01 n$12@382@01))
    (= n$11@382@01 n$12@382@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@382@01 $Ref)) (!
  (=>
    (and (Set_in n$1@382@01 g@125@01) (not (= n$1@382@01 x@169@01)))
    (and (= (inv@383@01 n$1@382@01) n$1@382@01) (img@384@01 n$1@382@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) n$1@382@01) n$1@382@01))
  :qid |quant-u-8131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (= (inv@383@01 r) r))
  :pattern ((inv@383@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@382@01 $Ref)) (!
  (=>
    (and (Set_in n$1@382@01 g@125@01) (not (= n$1@382@01 x@169@01)))
    (not (= n$1@382@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) n$1@382@01) n$1@382@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@382@01 n$1@171@01)
    (=
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))))
  
  :qid |quant-u-8132|))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(declare-const sm@385@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
  :pattern ((inv@383@01 r))
  :qid |quant-u-8133|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@386@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 7
; [then-branch: 78 | !(n$2@386@01 in g@125@01) | live]
; [else-branch: 78 | n$2@386@01 in g@125@01 | live]
(push) ; 8
; [then-branch: 78 | !(n$2@386@01 in g@125@01)]
(assert (not (Set_in n$2@386@01 g@125@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 78 | n$2@386@01 in g@125@01]
(assert (Set_in n$2@386@01 g@125@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef302|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
    :qid |qp.fvfValDef303|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
    :qid |qp.fvfValDef304|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef305|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) n$2@386@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 n$2@386@01) (Set_in (inv@173@01 n$2@386@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 n$2@386@01)) (pTaken@321@01 n$2@386@01))
        $Perm.No)
      (ite (= n$2@386@01 x@169@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@384@01 n$2@386@01)
        (and
          (Set_in (inv@383@01 n$2@386@01) g@125@01)
          (not (= (inv@383@01 n$2@386@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
(assert (=>
  (Set_in n$2@386@01 g@125@01)
  (and
    (Set_in n$2@386@01 g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) n$2@386@01))))
(assert (or (Set_in n$2@386@01 g@125@01) (not (Set_in n$2@386@01 g@125@01))))
(push) ; 7
; [then-branch: 79 | n$2@386@01 in g@125@01 && Lookup(next, sm@385@01, n$2@386@01) != Null | live]
; [else-branch: 79 | !(n$2@386@01 in g@125@01 && Lookup(next, sm@385@01, n$2@386@01) != Null) | live]
(push) ; 8
; [then-branch: 79 | n$2@386@01 in g@125@01 && Lookup(next, sm@385@01, n$2@386@01) != Null]
(assert (and
  (Set_in n$2@386@01 g@125@01)
  (not (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef302|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
    :qid |qp.fvfValDef303|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
    :qid |qp.fvfValDef304|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef305|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) n$2@386@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 n$2@386@01) (Set_in (inv@173@01 n$2@386@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 n$2@386@01)) (pTaken@321@01 n$2@386@01))
        $Perm.No)
      (ite (= n$2@386@01 x@169@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@384@01 n$2@386@01)
        (and
          (Set_in (inv@383@01 n$2@386@01) g@125@01)
          (not (= (inv@383@01 n$2@386@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 79 | !(n$2@386@01 in g@125@01 && Lookup(next, sm@385@01, n$2@386@01) != Null)]
(assert (not
  (and
    (Set_in n$2@386@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
(assert (=>
  (and
    (Set_in n$2@386@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null)))
  (and
    (Set_in n$2@386@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) n$2@386@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@386@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null))))
  (and
    (Set_in n$2@386@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@386@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@386@01 g@125@01)
      (and
        (Set_in n$2@386@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) n$2@386@01)))
    (or (Set_in n$2@386@01 g@125@01) (not (Set_in n$2@386@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@386@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null)))
      (and
        (Set_in n$2@386@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) n$2@386@01)))
    (or
      (not
        (and
          (Set_in n$2@386@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01)
              $Ref.null))))
      (and
        (Set_in n$2@386@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) g@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33-aux|)))
(assert (forall ((n$2@386@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@386@01 g@125@01)
      (and
        (Set_in n$2@386@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) n$2@386@01)))
    (or (Set_in n$2@386@01 g@125@01) (not (Set_in n$2@386@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@386@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null)))
      (and
        (Set_in n$2@386@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) n$2@386@01)))
    (or
      (not
        (and
          (Set_in n$2@386@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01)
              $Ref.null))))
      (and
        (Set_in n$2@386@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null)))))
  :pattern ((Set_in n$2@386@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) n$2@386@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33-aux|)))
(assert (forall ((n$2@386@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@386@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) g@125@01))
  :pattern ((Set_in n$2@386@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@386@01) n$2@386@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@278@13@278@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01))))))
  $Snap.unit))
; [eval] x.next == y
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef302|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
    :qid |qp.fvfValDef303|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
    :qid |qp.fvfValDef304|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef305|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) x@169@01) x@169@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 x@169@01) (Set_in (inv@173@01 x@169@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 x@169@01)) (pTaken@321@01 x@169@01))
        $Perm.No)
      $Perm.Write)
    (ite
      (and
        (img@384@01 x@169@01)
        (and
          (Set_in (inv@383@01 x@169@01) g@125@01)
          (not (= (inv@383@01 x@169@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) x@169@01) y@168@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01)))))))
  $Snap.unit))
; [eval] y == null ==> $$(g) == old($$(g))
; [eval] y == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= y@168@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= y@168@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 80 | y@168@01 == Null | live]
; [else-branch: 80 | y@168@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 80 | y@168@01 == Null]
(assert (= y@168@01 $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@387@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@387@01 g@125@01))
(pop) ; 9
(declare-fun inv@388@01 ($Ref) $Ref)
(declare-fun img@389@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@387@01 $Ref) (n2@387@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@387@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n1@387@01) n1@387@01))
      (and
        (Set_in n2@387@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n2@387@01) n2@387@01))
      (= n1@387@01 n2@387@01))
    (= n1@387@01 n2@387@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@387@01 $Ref)) (!
  (=>
    (Set_in n@387@01 g@125@01)
    (and (= (inv@388@01 n@387@01) n@387@01) (img@389@01 n@387@01)))
  :pattern ((Set_in n@387@01 g@125@01))
  :pattern ((inv@388@01 n@387@01))
  :pattern ((img@389@01 n@387@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@389@01 r) (Set_in (inv@388@01 r) g@125@01)) (= (inv@388@01 r) r))
  :pattern ((inv@388@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@388@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
  :pattern ((inv@388@01 r))
  :qid |quant-u-8135|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r) (= r (inv@388@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@384@01 r)
              (and
                (Set_in (inv@383@01 r) g@125@01)
                (not (= (inv@383@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8136|))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(declare-const sm@390@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@390@01  $FVF<next>)))
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r)))
    (=>
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r))
      (Set_in r ($FVF.domain_next (as sm@390@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@390@01  $FVF<next>))))
  :qid |qp.fvfDomDef310|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef306|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef307|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef309|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@390@01  $FVF<next>)) g@125@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@387@01 $Ref)) (!
  (=>
    (Set_in n@387@01 g@125@01)
    (and (= (inv@388@01 n@387@01) n@387@01) (img@389@01 n@387@01)))
  :pattern ((Set_in n@387@01 g@125@01))
  :pattern ((inv@388@01 n@387@01))
  :pattern ((img@389@01 n@387@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@389@01 r) (Set_in (inv@388@01 r) g@125@01)) (= (inv@388@01 r) r))
  :pattern ((inv@388@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@390@01  $FVF<next>)))
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r)))
    (=>
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r))
      (Set_in r ($FVF.domain_next (as sm@390@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@390@01  $FVF<next>))))
  :qid |qp.fvfDomDef310|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef306|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef307|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef309|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@388@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
    :pattern ((inv@388@01 r))
    :qid |quant-u-8135|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@390@01  $FVF<next>)) g@125@01)))
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@391@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@391@01 g@125@01))
(pop) ; 9
(declare-fun inv@392@01 ($Ref) $Ref)
(declare-fun img@393@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@391@01 $Ref) (n2@391@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@391@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n1@391@01) n1@391@01))
      (and
        (Set_in n2@391@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n2@391@01) n2@391@01))
      (= n1@391@01 n2@391@01))
    (= n1@391@01 n2@391@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@391@01 $Ref)) (!
  (=>
    (Set_in n@391@01 g@125@01)
    (and (= (inv@392@01 n@391@01) n@391@01) (img@393@01 n@391@01)))
  :pattern ((Set_in n@391@01 g@125@01))
  :pattern ((inv@392@01 n@391@01))
  :pattern ((img@393@01 n@391@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@393@01 r) (Set_in (inv@392@01 r) g@125@01)) (= (inv@392@01 r) r))
  :pattern ((inv@392@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@392@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
  :pattern ((inv@392@01 r))
  :qid |quant-u-8138|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r) (= r (inv@392@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@328@01 r)
              (and
                (Set_in (inv@327@01 r) g@125@01)
                (not (= (inv@327@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8139|))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(declare-const sm@394@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@394@01  $FVF<next>)))
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r)))
    (=>
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r))
      (Set_in r ($FVF.domain_next (as sm@394@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@394@01  $FVF<next>))))
  :qid |qp.fvfDomDef315|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@394@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef311|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@394@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef312|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@394@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef313|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef314|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@394@01  $FVF<next>)) g@125@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@391@01 $Ref)) (!
  (=>
    (Set_in n@391@01 g@125@01)
    (and (= (inv@392@01 n@391@01) n@391@01) (img@393@01 n@391@01)))
  :pattern ((Set_in n@391@01 g@125@01))
  :pattern ((inv@392@01 n@391@01))
  :pattern ((img@393@01 n@391@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@393@01 r) (Set_in (inv@392@01 r) g@125@01)) (= (inv@392@01 r) r))
  :pattern ((inv@392@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@394@01  $FVF<next>)))
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r)))
    (=>
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r))
      (Set_in r ($FVF.domain_next (as sm@394@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@394@01  $FVF<next>))))
  :qid |qp.fvfDomDef315|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@394@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef311|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@394@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef312|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@394@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef313|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef314|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@392@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
    :pattern ((inv@392@01 r))
    :qid |quant-u-8138|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@394@01  $FVF<next>)) g@125@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 80 | y@168@01 != Null]
(assert (not (= y@168@01 $Ref.null)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@387@01 $Ref)) (!
  (=>
    (Set_in n@387@01 g@125@01)
    (and (= (inv@388@01 n@387@01) n@387@01) (img@389@01 n@387@01)))
  :pattern ((Set_in n@387@01 g@125@01))
  :pattern ((inv@388@01 n@387@01))
  :pattern ((img@389@01 n@387@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@389@01 r) (Set_in (inv@388@01 r) g@125@01)) (= (inv@388@01 r) r))
  :pattern ((inv@388@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@390@01  $FVF<next>)))
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r)))
    (=>
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r))
      (Set_in r ($FVF.domain_next (as sm@390@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@390@01  $FVF<next>))))
  :qid |qp.fvfDomDef310|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef306|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef307|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@388@01 r) g@125@01) (img@389@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@390@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef308|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@390@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef309|)))
(assert (forall ((n@391@01 $Ref)) (!
  (=>
    (Set_in n@391@01 g@125@01)
    (and (= (inv@392@01 n@391@01) n@391@01) (img@393@01 n@391@01)))
  :pattern ((Set_in n@391@01 g@125@01))
  :pattern ((inv@392@01 n@391@01))
  :pattern ((img@393@01 n@391@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@393@01 r) (Set_in (inv@392@01 r) g@125@01)) (= (inv@392@01 r) r))
  :pattern ((inv@392@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@394@01  $FVF<next>)))
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r)))
    (=>
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r))
      (Set_in r ($FVF.domain_next (as sm@394@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@394@01  $FVF<next>))))
  :qid |qp.fvfDomDef315|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@394@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef311|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@394@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef312|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@392@01 r) g@125@01) (img@393@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@394@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef313|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@394@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef314|)))
(assert (=>
  (= y@168@01 $Ref.null)
  (and
    (= y@168@01 $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@388@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
      :pattern ((inv@388@01 r))
      :qid |quant-u-8135|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@390@01  $FVF<next>)) g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@392@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
      :pattern ((inv@392@01 r))
      :qid |quant-u-8138|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@394@01  $FVF<next>)) g@125@01))))
; Joined path conditions
(assert (=>
  (= y@168@01 $Ref.null)
  (Set_equal ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@390@01  $FVF<next>)) g@125@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@394@01  $FVF<next>)) g@125@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
; [eval] y != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= y@168@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= y@168@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 81 | y@168@01 != Null | live]
; [else-branch: 81 | y@168@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 81 | y@168@01 != Null]
(assert (not (= y@168@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge(old($$(g)), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y))
(declare-const v1@395@01 $Ref)
(declare-const v2@396@01 $Ref)
(push) ; 8
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == x && v2 == y)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 9
(declare-const n@397@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@397@01 g@125@01))
(pop) ; 10
(declare-fun inv@398@01 ($Ref) $Ref)
(declare-fun img@399@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@397@01 $Ref) (n2@397@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@397@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n1@397@01) n1@397@01))
      (and
        (Set_in n2@397@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n2@397@01) n2@397@01))
      (= n1@397@01 n2@397@01))
    (= n1@397@01 n2@397@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@397@01 $Ref)) (!
  (=>
    (Set_in n@397@01 g@125@01)
    (and (= (inv@398@01 n@397@01) n@397@01) (img@399@01 n@397@01)))
  :pattern ((Set_in n@397@01 g@125@01))
  :pattern ((inv@398@01 n@397@01))
  :pattern ((img@399@01 n@397@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@399@01 r) (Set_in (inv@398@01 r) g@125@01)) (= (inv@398@01 r) r))
  :pattern ((inv@398@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@398@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
  :pattern ((inv@398@01 r))
  :qid |quant-u-8141|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r) (= r (inv@398@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@384@01 r)
              (and
                (Set_in (inv@383@01 r) g@125@01)
                (not (= (inv@383@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8142|))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(declare-const sm@400@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>)))
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r)))
    (=>
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>))))
  :qid |qp.fvfDomDef320|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef317|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef318|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef319|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@400@01  $FVF<next>)) g@125@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((n@397@01 $Ref)) (!
  (=>
    (Set_in n@397@01 g@125@01)
    (and (= (inv@398@01 n@397@01) n@397@01) (img@399@01 n@397@01)))
  :pattern ((Set_in n@397@01 g@125@01))
  :pattern ((inv@398@01 n@397@01))
  :pattern ((img@399@01 n@397@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@399@01 r) (Set_in (inv@398@01 r) g@125@01)) (= (inv@398@01 r) r))
  :pattern ((inv@398@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>)))
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r)))
    (=>
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>))))
  :qid |qp.fvfDomDef320|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef317|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef318|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef319|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@398@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
    :pattern ((inv@398@01 r))
    :qid |quant-u-8141|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@400@01  $FVF<next>)) g@125@01)))
; [eval] edge(old($$(g)), v1, v2) || v1 == x && v2 == y
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 9
(declare-const n@401@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@401@01 g@125@01))
(pop) ; 10
(declare-fun inv@402@01 ($Ref) $Ref)
(declare-fun img@403@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@401@01 $Ref) (n2@401@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@401@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n1@401@01) n1@401@01))
      (and
        (Set_in n2@401@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n2@401@01) n2@401@01))
      (= n1@401@01 n2@401@01))
    (= n1@401@01 n2@401@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@401@01 $Ref)) (!
  (=>
    (Set_in n@401@01 g@125@01)
    (and (= (inv@402@01 n@401@01) n@401@01) (img@403@01 n@401@01)))
  :pattern ((Set_in n@401@01 g@125@01))
  :pattern ((inv@402@01 n@401@01))
  :pattern ((img@403@01 n@401@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@403@01 r) (Set_in (inv@402@01 r) g@125@01)) (= (inv@402@01 r) r))
  :pattern ((inv@402@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@402@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
  :pattern ((inv@402@01 r))
  :qid |quant-u-8144|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r) (= r (inv@402@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@328@01 r)
              (and
                (Set_in (inv@327@01 r) g@125@01)
                (not (= (inv@327@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8145|))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(declare-const sm@404@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>)))
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r)))
    (=>
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>))))
  :qid |qp.fvfDomDef325|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef321|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef324|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((n@401@01 $Ref)) (!
  (=>
    (Set_in n@401@01 g@125@01)
    (and (= (inv@402@01 n@401@01) n@401@01) (img@403@01 n@401@01)))
  :pattern ((Set_in n@401@01 g@125@01))
  :pattern ((inv@402@01 n@401@01))
  :pattern ((img@403@01 n@401@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@403@01 r) (Set_in (inv@402@01 r) g@125@01)) (= (inv@402@01 r) r))
  :pattern ((inv@402@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>)))
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r)))
    (=>
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>))))
  :qid |qp.fvfDomDef325|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef321|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef324|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@402@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
    :pattern ((inv@402@01 r))
    :qid |quant-u-8144|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01)))
(push) ; 9
; [then-branch: 82 | edge[Bool]($$(sm@404@01, g@125@01), v1@395@01, v2@396@01) | live]
; [else-branch: 82 | !(edge[Bool]($$(sm@404@01, g@125@01), v1@395@01, v2@396@01)) | live]
(push) ; 10
; [then-branch: 82 | edge[Bool]($$(sm@404@01, g@125@01), v1@395@01, v2@396@01)]
(assert (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
(pop) ; 10
(push) ; 10
; [else-branch: 82 | !(edge[Bool]($$(sm@404@01, g@125@01), v1@395@01, v2@396@01))]
(assert (not
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01)))
; [eval] v1 == x && v2 == y
; [eval] v1 == x
(push) ; 11
; [then-branch: 83 | v1@395@01 != x@169@01 | live]
; [else-branch: 83 | v1@395@01 == x@169@01 | live]
(push) ; 12
; [then-branch: 83 | v1@395@01 != x@169@01]
(assert (not (= v1@395@01 x@169@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 83 | v1@395@01 == x@169@01]
(assert (= v1@395@01 x@169@01))
; [eval] v2 == y
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (= v1@395@01 x@169@01) (not (= v1@395@01 x@169@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
  (and
    (not
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
    (or (= v1@395@01 x@169@01) (not (= v1@395@01 x@169@01))))))
(assert (or
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@397@01 $Ref)) (!
  (=>
    (Set_in n@397@01 g@125@01)
    (and (= (inv@398@01 n@397@01) n@397@01) (img@399@01 n@397@01)))
  :pattern ((Set_in n@397@01 g@125@01))
  :pattern ((inv@398@01 n@397@01))
  :pattern ((img@399@01 n@397@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@399@01 r) (Set_in (inv@398@01 r) g@125@01)) (= (inv@398@01 r) r))
  :pattern ((inv@398@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>)))
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r)))
    (=>
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>))))
  :qid |qp.fvfDomDef320|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef317|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef318|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef319|)))
(assert (forall ((n@401@01 $Ref)) (!
  (=>
    (Set_in n@401@01 g@125@01)
    (and (= (inv@402@01 n@401@01) n@401@01) (img@403@01 n@401@01)))
  :pattern ((Set_in n@401@01 g@125@01))
  :pattern ((inv@402@01 n@401@01))
  :pattern ((img@403@01 n@401@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@403@01 r) (Set_in (inv@402@01 r) g@125@01)) (= (inv@402@01 r) r))
  :pattern ((inv@402@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>)))
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r)))
    (=>
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>))))
  :qid |qp.fvfDomDef325|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef321|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef324|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@398@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
  :pattern ((inv@398@01 r))
  :qid |quant-u-8141|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@400@01  $FVF<next>)) g@125@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@402@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
  :pattern ((inv@402@01 r))
  :qid |quant-u-8144|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@395@01 $Ref) (v2@396@01 $Ref)) (!
  (and
    (=>
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
      (and
        (not
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
        (or (= v1@395@01 x@169@01) (not (= v1@395@01 x@169@01)))))
    (or
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01)))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@281@27@283@78-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 81 | y@168@01 == Null]
(assert (= y@168@01 $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@397@01 $Ref)) (!
  (=>
    (Set_in n@397@01 g@125@01)
    (and (= (inv@398@01 n@397@01) n@397@01) (img@399@01 n@397@01)))
  :pattern ((Set_in n@397@01 g@125@01))
  :pattern ((inv@398@01 n@397@01))
  :pattern ((img@399@01 n@397@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@399@01 r) (Set_in (inv@398@01 r) g@125@01)) (= (inv@398@01 r) r))
  :pattern ((inv@398@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>)))
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r)))
    (=>
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@400@01  $FVF<next>))))
  :qid |qp.fvfDomDef320|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef316|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef317|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@398@01 r) g@125@01) (img@399@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@400@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef318|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@400@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef319|)))
(assert (forall ((n@401@01 $Ref)) (!
  (=>
    (Set_in n@401@01 g@125@01)
    (and (= (inv@402@01 n@401@01) n@401@01) (img@403@01 n@401@01)))
  :pattern ((Set_in n@401@01 g@125@01))
  :pattern ((inv@402@01 n@401@01))
  :pattern ((img@403@01 n@401@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@403@01 r) (Set_in (inv@402@01 r) g@125@01)) (= (inv@402@01 r) r))
  :pattern ((inv@402@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>)))
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r)))
    (=>
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@404@01  $FVF<next>))))
  :qid |qp.fvfDomDef325|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef321|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef322|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@402@01 r) g@125@01) (img@403@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@404@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef323|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@404@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef324|)))
(assert (=>
  (not (= y@168@01 $Ref.null))
  (and
    (not (= y@168@01 $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@398@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
      :pattern ((inv@398@01 r))
      :qid |quant-u-8141|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@400@01  $FVF<next>)) g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@402@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
      :pattern ((inv@402@01 r))
      :qid |quant-u-8144|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01)
    (forall ((v1@395@01 $Ref) (v2@396@01 $Ref)) (!
      (and
        (=>
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
          (and
            (not
              (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
            (or (= v1@395@01 x@169@01) (not (= v1@395@01 x@169@01)))))
        (or
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01)))
      :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@281@27@283@78-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@168@01 $Ref.null))
  (forall ((v1@395@01 $Ref) (v2@396@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@400@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01)
      (or
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01)
        (and (= v1@395@01 x@169@01) (= v2@396@01 y@168@01))))
    :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@404@01  $FVF<next>)) g@125@01) v1@395@01 v2@396@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@281@27@283@78|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@379@01))))))))
  $Snap.unit))
; [eval] y != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
; [eval] y != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= y@168@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= y@168@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 84 | y@168@01 != Null | live]
; [else-branch: 84 | y@168@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 84 | y@168@01 != Null]
(assert (not (= y@168@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)))
(declare-const v1@405@01 $Ref)
(declare-const v2@406@01 $Ref)
(push) ; 8
; [eval] v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] v1 != v2
(push) ; 9
; [then-branch: 85 | v1@405@01 != v2@406@01 | live]
; [else-branch: 85 | v1@405@01 == v2@406@01 | live]
(push) ; 10
; [then-branch: 85 | v1@405@01 != v2@406@01]
(assert (not (= v1@405@01 v2@406@01)))
; [eval] exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 11
(declare-const n@407@01 $Ref)
(push) ; 12
; [eval] (n in refs)
(assert (Set_in n@407@01 g@125@01))
(pop) ; 12
(declare-fun inv@408@01 ($Ref) $Ref)
(declare-fun img@409@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((n1@407@01 $Ref) (n2@407@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@407@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n1@407@01) n1@407@01))
      (and
        (Set_in n2@407@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n2@407@01) n2@407@01))
      (= n1@407@01 n2@407@01))
    (= n1@407@01 n2@407@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@407@01 $Ref)) (!
  (=>
    (Set_in n@407@01 g@125@01)
    (and (= (inv@408@01 n@407@01) n@407@01) (img@409@01 n@407@01)))
  :pattern ((Set_in n@407@01 g@125@01))
  :pattern ((inv@408@01 n@407@01))
  :pattern ((img@409@01 n@407@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@409@01 r) (Set_in (inv@408@01 r) g@125@01)) (= (inv@408@01 r) r))
  :pattern ((inv@408@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@408@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
  :pattern ((inv@408@01 r))
  :qid |quant-u-8147|)))
(push) ; 12
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r) (= r (inv@408@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@384@01 r)
              (and
                (Set_in (inv@383@01 r) g@125@01)
                (not (= (inv@383@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8148|))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(declare-const sm@410@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>)))
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r)))
    (=>
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>))))
  :qid |qp.fvfDomDef330|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef328|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef329|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@410@01  $FVF<next>)) g@125@01))
(pop) ; 11
; Joined path conditions
(assert (forall ((n@407@01 $Ref)) (!
  (=>
    (Set_in n@407@01 g@125@01)
    (and (= (inv@408@01 n@407@01) n@407@01) (img@409@01 n@407@01)))
  :pattern ((Set_in n@407@01 g@125@01))
  :pattern ((inv@408@01 n@407@01))
  :pattern ((img@409@01 n@407@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@409@01 r) (Set_in (inv@408@01 r) g@125@01)) (= (inv@408@01 r) r))
  :pattern ((inv@408@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>)))
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r)))
    (=>
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>))))
  :qid |qp.fvfDomDef330|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef328|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef329|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@408@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
    :pattern ((inv@408@01 r))
    :qid |quant-u-8147|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@410@01  $FVF<next>)) g@125@01)))
; [eval] exists_path(old($$(g)), v1, v2) || exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 11
(declare-const n@411@01 $Ref)
(push) ; 12
; [eval] (n in refs)
(assert (Set_in n@411@01 g@125@01))
(pop) ; 12
(declare-fun inv@412@01 ($Ref) $Ref)
(declare-fun img@413@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((n1@411@01 $Ref) (n2@411@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@411@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n1@411@01) n1@411@01))
      (and
        (Set_in n2@411@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) n2@411@01) n2@411@01))
      (= n1@411@01 n2@411@01))
    (= n1@411@01 n2@411@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@411@01 $Ref)) (!
  (=>
    (Set_in n@411@01 g@125@01)
    (and (= (inv@412@01 n@411@01) n@411@01) (img@413@01 n@411@01)))
  :pattern ((Set_in n@411@01 g@125@01))
  :pattern ((inv@412@01 n@411@01))
  :pattern ((img@413@01 n@411@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@413@01 r) (Set_in (inv@412@01 r) g@125@01)) (= (inv@412@01 r) r))
  :pattern ((inv@412@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@412@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
  :pattern ((inv@412@01 r))
  :qid |quant-u-8150|)))
(push) ; 12
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r) (= r (inv@412@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@328@01 r)
              (and
                (Set_in (inv@327@01 r) g@125@01)
                (not (= (inv@327@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8151|))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(declare-const sm@414@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>)))
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r)))
    (=>
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>))))
  :qid |qp.fvfDomDef335|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef331|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef332|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef334|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01))
(pop) ; 11
; Joined path conditions
(assert (forall ((n@411@01 $Ref)) (!
  (=>
    (Set_in n@411@01 g@125@01)
    (and (= (inv@412@01 n@411@01) n@411@01) (img@413@01 n@411@01)))
  :pattern ((Set_in n@411@01 g@125@01))
  :pattern ((inv@412@01 n@411@01))
  :pattern ((img@413@01 n@411@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@413@01 r) (Set_in (inv@412@01 r) g@125@01)) (= (inv@412@01 r) r))
  :pattern ((inv@412@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>)))
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r)))
    (=>
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>))))
  :qid |qp.fvfDomDef335|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef331|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef332|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef334|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@412@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
    :pattern ((inv@412@01 r))
    :qid |quant-u-8150|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01)))
(push) ; 11
; [then-branch: 86 | exists_path[Bool]($$(sm@414@01, g@125@01), v1@405@01, v2@406@01) | live]
; [else-branch: 86 | !(exists_path[Bool]($$(sm@414@01, g@125@01), v1@405@01, v2@406@01)) | live]
(push) ; 12
; [then-branch: 86 | exists_path[Bool]($$(sm@414@01, g@125@01), v1@405@01, v2@406@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
(pop) ; 12
(push) ; 12
; [else-branch: 86 | !(exists_path[Bool]($$(sm@414@01, g@125@01), v1@405@01, v2@406@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01)))
; [eval] exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), y, v2)
; [eval] exists_path(old($$(g)), v1, x)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 13
(declare-const n@415@01 $Ref)
(push) ; 14
; [eval] (n in refs)
(assert (Set_in n@415@01 g@125@01))
(pop) ; 14
(declare-fun inv@416@01 ($Ref) $Ref)
(declare-fun img@417@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@418@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef338|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef339|)))
; Check receiver injectivity
(push) ; 14
(assert (not (forall ((n1@415@01 $Ref) (n2@415@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@415@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@418@01  $FVF<next>) n1@415@01) n1@415@01))
      (and
        (Set_in n2@415@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@418@01  $FVF<next>) n2@415@01) n2@415@01))
      (= n1@415@01 n2@415@01))
    (= n1@415@01 n2@415@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@415@01 $Ref)) (!
  (=>
    (Set_in n@415@01 g@125@01)
    (and (= (inv@416@01 n@415@01) n@415@01) (img@417@01 n@415@01)))
  :pattern ((Set_in n@415@01 g@125@01))
  :pattern ((inv@416@01 n@415@01))
  :pattern ((img@417@01 n@415@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@417@01 r) (Set_in (inv@416@01 r) g@125@01)) (= (inv@416@01 r) r))
  :pattern ((inv@416@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@416@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@418@01  $FVF<next>) r) r))
  :pattern ((inv@416@01 r))
  :qid |quant-u-8153|)))
(push) ; 14
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r) (= r (inv@416@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@328@01 r)
              (and
                (Set_in (inv@327@01 r) g@125@01)
                (not (= (inv@327@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8154|))))
(check-sat)
; unsat
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(declare-const sm@419@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)))
    (=>
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>))))
  :qid |qp.fvfDomDef344|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef342|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef343|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01))
(pop) ; 13
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef338|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef339|)))
(assert (forall ((n@415@01 $Ref)) (!
  (=>
    (Set_in n@415@01 g@125@01)
    (and (= (inv@416@01 n@415@01) n@415@01) (img@417@01 n@415@01)))
  :pattern ((Set_in n@415@01 g@125@01))
  :pattern ((inv@416@01 n@415@01))
  :pattern ((img@417@01 n@415@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@417@01 r) (Set_in (inv@416@01 r) g@125@01)) (= (inv@416@01 r) r))
  :pattern ((inv@416@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)))
    (=>
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>))))
  :qid |qp.fvfDomDef344|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef342|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef343|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@416@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@418@01  $FVF<next>) r) r))
    :pattern ((inv@416@01 r))
    :qid |quant-u-8153|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01)))
(push) ; 13
; [then-branch: 87 | !(exists_path[Bool]($$(sm@419@01, g@125@01), v1@405@01, x@169@01)) | live]
; [else-branch: 87 | exists_path[Bool]($$(sm@419@01, g@125@01), v1@405@01, x@169@01) | live]
(push) ; 14
; [then-branch: 87 | !(exists_path[Bool]($$(sm@419@01, g@125@01), v1@405@01, x@169@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 87 | exists_path[Bool]($$(sm@419@01, g@125@01), v1@405@01, x@169@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01))
; [eval] exists_path(old($$(g)), y, v2)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 15
(declare-const n@420@01 $Ref)
(push) ; 16
; [eval] (n in refs)
(assert (Set_in n@420@01 g@125@01))
(pop) ; 16
(declare-fun inv@421@01 ($Ref) $Ref)
(declare-fun img@422@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@423@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef348|)))
; Check receiver injectivity
(push) ; 16
(assert (not (forall ((n1@420@01 $Ref) (n2@420@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@420@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@423@01  $FVF<next>) n1@420@01) n1@420@01))
      (and
        (Set_in n2@420@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@423@01  $FVF<next>) n2@420@01) n2@420@01))
      (= n1@420@01 n2@420@01))
    (= n1@420@01 n2@420@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@125@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@125@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@125@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@421@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@423@01  $FVF<next>) r) r))
  :pattern ((inv@421@01 r))
  :qid |quant-u-8156|)))
(push) ; 16
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r) (= r (inv@421@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@328@01 r)
              (and
                (Set_in (inv@327@01 r) g@125@01)
                (not (= (inv@327@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8157|))))
(check-sat)
; unsat
(pop) ; 16
; 0.02s
; (get-info :all-statistics)
(declare-const sm@424@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>))))
  :qid |qp.fvfDomDef353|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef349|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef350|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef351|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef352|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@424@01  $FVF<next>)) g@125@01))
(pop) ; 15
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef348|)))
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@125@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@125@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@125@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>))))
  :qid |qp.fvfDomDef353|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef349|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef350|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef351|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef352|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@421@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@423@01  $FVF<next>) r) r))
    :pattern ((inv@421@01 r))
    :qid |quant-u-8156|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@424@01  $FVF<next>)) g@125@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef348|)))
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@125@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@125@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@125@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>))))
  :qid |qp.fvfDomDef353|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef349|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef350|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef351|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef352|)))
(assert (=>
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
  (and
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@421@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@423@01  $FVF<next>) r) r))
      :pattern ((inv@421@01 r))
      :qid |quant-u-8156|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@424@01  $FVF<next>)) g@125@01))))
(assert (or
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef338|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef339|)))
(assert (forall ((n@415@01 $Ref)) (!
  (=>
    (Set_in n@415@01 g@125@01)
    (and (= (inv@416@01 n@415@01) n@415@01) (img@417@01 n@415@01)))
  :pattern ((Set_in n@415@01 g@125@01))
  :pattern ((inv@416@01 n@415@01))
  :pattern ((img@417@01 n@415@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@417@01 r) (Set_in (inv@416@01 r) g@125@01)) (= (inv@416@01 r) r))
  :pattern ((inv@416@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)))
    (=>
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>))))
  :qid |qp.fvfDomDef344|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef342|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef348|)))
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@125@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@125@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@125@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>))))
  :qid |qp.fvfDomDef353|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef349|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef350|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef351|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef352|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
  (and
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@416@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@418@01  $FVF<next>) r) r))
      :pattern ((inv@416@01 r))
      :qid |quant-u-8153|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01)
    (=>
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
      (and
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@421@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@423@01  $FVF<next>) r) r))
          :pattern ((inv@421@01 r))
          :qid |quant-u-8156|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@424@01  $FVF<next>)) g@125@01)))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01))))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 85 | v1@405@01 == v2@406@01]
(assert (= v1@405@01 v2@406@01))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((n@407@01 $Ref)) (!
  (=>
    (Set_in n@407@01 g@125@01)
    (and (= (inv@408@01 n@407@01) n@407@01) (img@409@01 n@407@01)))
  :pattern ((Set_in n@407@01 g@125@01))
  :pattern ((inv@408@01 n@407@01))
  :pattern ((img@409@01 n@407@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@409@01 r) (Set_in (inv@408@01 r) g@125@01)) (= (inv@408@01 r) r))
  :pattern ((inv@408@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>)))
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r)))
    (=>
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>))))
  :qid |qp.fvfDomDef330|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef328|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef329|)))
(assert (forall ((n@411@01 $Ref)) (!
  (=>
    (Set_in n@411@01 g@125@01)
    (and (= (inv@412@01 n@411@01) n@411@01) (img@413@01 n@411@01)))
  :pattern ((Set_in n@411@01 g@125@01))
  :pattern ((inv@412@01 n@411@01))
  :pattern ((img@413@01 n@411@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@413@01 r) (Set_in (inv@412@01 r) g@125@01)) (= (inv@412@01 r) r))
  :pattern ((inv@412@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>)))
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r)))
    (=>
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>))))
  :qid |qp.fvfDomDef335|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef331|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef332|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef334|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef338|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef339|)))
(assert (forall ((n@415@01 $Ref)) (!
  (=>
    (Set_in n@415@01 g@125@01)
    (and (= (inv@416@01 n@415@01) n@415@01) (img@417@01 n@415@01)))
  :pattern ((Set_in n@415@01 g@125@01))
  :pattern ((inv@416@01 n@415@01))
  :pattern ((img@417@01 n@415@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@417@01 r) (Set_in (inv@416@01 r) g@125@01)) (= (inv@416@01 r) r))
  :pattern ((inv@416@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)))
    (=>
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>))))
  :qid |qp.fvfDomDef344|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef342|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef348|)))
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@125@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@125@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@125@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>))))
  :qid |qp.fvfDomDef353|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef349|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef350|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef351|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef352|)))
(assert (=>
  (not (= v1@405@01 v2@406@01))
  (and
    (not (= v1@405@01 v2@406@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@408@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
      :pattern ((inv@408@01 r))
      :qid |quant-u-8147|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@410@01  $FVF<next>)) g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@412@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
      :pattern ((inv@412@01 r))
      :qid |quant-u-8150|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
      (and
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@416@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@418@01  $FVF<next>) r) r))
          :pattern ((inv@416@01 r))
          :qid |quant-u-8153|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01)
        (=>
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@421@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@423@01  $FVF<next>) r) r))
              :pattern ((inv@421@01 r))
              :qid |quant-u-8156|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@424@01  $FVF<next>)) g@125@01)))
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)))))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01)))))
; Joined path conditions
(assert (or (= v1@405@01 v2@406@01) (not (= v1@405@01 v2@406@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@407@01 $Ref)) (!
  (=>
    (Set_in n@407@01 g@125@01)
    (and (= (inv@408@01 n@407@01) n@407@01) (img@409@01 n@407@01)))
  :pattern ((Set_in n@407@01 g@125@01))
  :pattern ((inv@408@01 n@407@01))
  :pattern ((img@409@01 n@407@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@409@01 r) (Set_in (inv@408@01 r) g@125@01)) (= (inv@408@01 r) r))
  :pattern ((inv@408@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>)))
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r)))
    (=>
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>))))
  :qid |qp.fvfDomDef330|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef328|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef329|)))
(assert (forall ((n@411@01 $Ref)) (!
  (=>
    (Set_in n@411@01 g@125@01)
    (and (= (inv@412@01 n@411@01) n@411@01) (img@413@01 n@411@01)))
  :pattern ((Set_in n@411@01 g@125@01))
  :pattern ((inv@412@01 n@411@01))
  :pattern ((img@413@01 n@411@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@413@01 r) (Set_in (inv@412@01 r) g@125@01)) (= (inv@412@01 r) r))
  :pattern ((inv@412@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>)))
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r)))
    (=>
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>))))
  :qid |qp.fvfDomDef335|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef331|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef332|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef334|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef338|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef339|)))
(assert (forall ((n@415@01 $Ref)) (!
  (=>
    (Set_in n@415@01 g@125@01)
    (and (= (inv@416@01 n@415@01) n@415@01) (img@417@01 n@415@01)))
  :pattern ((Set_in n@415@01 g@125@01))
  :pattern ((inv@416@01 n@415@01))
  :pattern ((img@417@01 n@415@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@417@01 r) (Set_in (inv@416@01 r) g@125@01)) (= (inv@416@01 r) r))
  :pattern ((inv@416@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)))
    (=>
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>))))
  :qid |qp.fvfDomDef344|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef342|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef348|)))
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@125@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@125@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@125@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>))))
  :qid |qp.fvfDomDef353|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef349|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef350|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef351|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef352|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@405@01 $Ref) (v2@406@01 $Ref)) (!
  (and
    (=>
      (not (= v1@405@01 v2@406@01))
      (and
        (not (= v1@405@01 v2@406@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@408@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
          :pattern ((inv@408@01 r))
          :qid |quant-u-8147|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@410@01  $FVF<next>)) g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@412@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
          :pattern ((inv@412@01 r))
          :qid |quant-u-8150|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@416@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@418@01  $FVF<next>) r) r))
              :pattern ((inv@416@01 r))
              :qid |quant-u-8153|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01)
            (=>
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
              (and
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@421@01 r) g@125@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@423@01  $FVF<next>) r) r))
                  :pattern ((inv@421@01 r))
                  :qid |quant-u-8156|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@424@01  $FVF<next>)) g@125@01)))
            (or
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)))))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))))
    (or (= v1@405@01 v2@406@01) (not (= v1@405@01 v2@406@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@410@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@284@28@288@117-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 84 | y@168@01 == Null]
(assert (= y@168@01 $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@407@01 $Ref)) (!
  (=>
    (Set_in n@407@01 g@125@01)
    (and (= (inv@408@01 n@407@01) n@407@01) (img@409@01 n@407@01)))
  :pattern ((Set_in n@407@01 g@125@01))
  :pattern ((inv@408@01 n@407@01))
  :pattern ((img@409@01 n@407@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@409@01 r) (Set_in (inv@408@01 r) g@125@01)) (= (inv@408@01 r) r))
  :pattern ((inv@408@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>)))
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r)))
    (=>
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@410@01  $FVF<next>))))
  :qid |qp.fvfDomDef330|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef326|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef327|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@408@01 r) g@125@01) (img@409@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@410@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef328|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@410@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef329|)))
(assert (forall ((n@411@01 $Ref)) (!
  (=>
    (Set_in n@411@01 g@125@01)
    (and (= (inv@412@01 n@411@01) n@411@01) (img@413@01 n@411@01)))
  :pattern ((Set_in n@411@01 g@125@01))
  :pattern ((inv@412@01 n@411@01))
  :pattern ((img@413@01 n@411@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@413@01 r) (Set_in (inv@412@01 r) g@125@01)) (= (inv@412@01 r) r))
  :pattern ((inv@412@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>)))
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r)))
    (=>
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@414@01  $FVF<next>))))
  :qid |qp.fvfDomDef335|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef331|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef332|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@412@01 r) g@125@01) (img@413@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@414@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef333|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@414@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef334|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef337|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@418@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef338|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@418@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef339|)))
(assert (forall ((n@415@01 $Ref)) (!
  (=>
    (Set_in n@415@01 g@125@01)
    (and (= (inv@416@01 n@415@01) n@415@01) (img@417@01 n@415@01)))
  :pattern ((Set_in n@415@01 g@125@01))
  :pattern ((inv@416@01 n@415@01))
  :pattern ((img@417@01 n@415@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@417@01 r) (Set_in (inv@416@01 r) g@125@01)) (= (inv@416@01 r) r))
  :pattern ((inv@416@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)))
    (=>
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@419@01  $FVF<next>))))
  :qid |qp.fvfDomDef344|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef340|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef341|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@416@01 r) g@125@01) (img@417@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@419@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef342|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@419@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef343|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef345|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef346|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@328@01 r)
      (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@423@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef347|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@423@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef348|)))
(assert (forall ((n@420@01 $Ref)) (!
  (=>
    (Set_in n@420@01 g@125@01)
    (and (= (inv@421@01 n@420@01) n@420@01) (img@422@01 n@420@01)))
  :pattern ((Set_in n@420@01 g@125@01))
  :pattern ((inv@421@01 n@420@01))
  :pattern ((img@422@01 n@420@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@422@01 r) (Set_in (inv@421@01 r) g@125@01)) (= (inv@421@01 r) r))
  :pattern ((inv@421@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)))
    (=>
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@424@01  $FVF<next>))))
  :qid |qp.fvfDomDef353|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef349|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@324@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@324@01  $FVF<next>) r))
  :qid |qp.fvfValDef350|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@421@01 r) g@125@01) (img@422@01 r))
      (and
        (img@328@01 r)
        (and (Set_in (inv@327@01 r) g@125@01) (not (= (inv@327@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@424@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r))
  :qid |qp.fvfValDef351|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@324@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@424@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef352|)))
(assert (=>
  (not (= y@168@01 $Ref.null))
  (and
    (not (= y@168@01 $Ref.null))
    (forall ((v1@405@01 $Ref) (v2@406@01 $Ref)) (!
      (and
        (=>
          (not (= v1@405@01 v2@406@01))
          (and
            (not (= v1@405@01 v2@406@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@408@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
              :pattern ((inv@408@01 r))
              :qid |quant-u-8147|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@410@01  $FVF<next>)) g@125@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@412@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@329@01  $FVF<next>) r) r))
              :pattern ((inv@412@01 r))
              :qid |quant-u-8150|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01)
            (=>
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
              (and
                (not
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@416@01 r) g@125@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@418@01  $FVF<next>) r) r))
                  :pattern ((inv@416@01 r))
                  :qid |quant-u-8153|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01)
                (=>
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
                  (and
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@421@01 r) g@125@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@423@01  $FVF<next>) r) r))
                      :pattern ((inv@421@01 r))
                      :qid |quant-u-8156|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@424@01  $FVF<next>)) g@125@01)))
                (or
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)))))
            (or
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))))
        (or (= v1@405@01 v2@406@01) (not (= v1@405@01 v2@406@01))))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@410@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@284@28@288@117-aux|)))))
; Joined path conditions
(assert (=>
  (not (= y@168@01 $Ref.null))
  (forall ((v1@405@01 $Ref) (v2@406@01 $Ref)) (!
    (=>
      (not (= v1@405@01 v2@406@01))
      (=
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@410@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01)
        (or
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@414@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01)
          (and
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@419@01  $FVF<next>)) g@125@01) v1@405@01 x@169@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@424@01  $FVF<next>)) g@125@01) y@168@01 v2@406@01)))))
    :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@410@01  $FVF<next>)) g@125@01) v1@405@01 v2@406@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@284@28@288@117|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; y := x
; [exec]
; x := t
; [exec]
; assert save_y != null ==>
;   (forall v1: Ref, v2: Ref ::
;     { (v1 in g), (v2 in g) }
;     (v1 in g) && (v2 in g) ==>
;     edge($$(g), v1, v2) ==
;     (edge(save_g, v1, v2) && v1 != save_x || v1 == save_x && v2 == save_y))
; [eval] save_y != null ==> (forall v1: Ref, v2: Ref :: { (v1 in g), (v2 in g) } (v1 in g) && (v2 in g) ==> edge($$(g), v1, v2) == (edge(save_g, v1, v2) && v1 != save_x || v1 == save_x && v2 == save_y))
; [eval] save_y != null
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= y@168@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= y@168@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 88 | y@168@01 != Null | live]
; [else-branch: 88 | y@168@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 88 | y@168@01 != Null]
(assert (not (= y@168@01 $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { (v1 in g), (v2 in g) } (v1 in g) && (v2 in g) ==> edge($$(g), v1, v2) == (edge(save_g, v1, v2) && v1 != save_x || v1 == save_x && v2 == save_y))
(declare-const v1@425@01 $Ref)
(declare-const v2@426@01 $Ref)
(push) ; 8
; [eval] (v1 in g) && (v2 in g) ==> edge($$(g), v1, v2) == (edge(save_g, v1, v2) && v1 != save_x || v1 == save_x && v2 == save_y)
; [eval] (v1 in g) && (v2 in g)
; [eval] (v1 in g)
(push) ; 9
; [then-branch: 89 | !(v1@425@01 in g@125@01) | live]
; [else-branch: 89 | v1@425@01 in g@125@01 | live]
(push) ; 10
; [then-branch: 89 | !(v1@425@01 in g@125@01)]
(assert (not (Set_in v1@425@01 g@125@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 89 | v1@425@01 in g@125@01]
(assert (Set_in v1@425@01 g@125@01))
; [eval] (v2 in g)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (Set_in v1@425@01 g@125@01) (not (Set_in v1@425@01 g@125@01))))
(push) ; 9
; [then-branch: 90 | v1@425@01 in g@125@01 && v2@426@01 in g@125@01 | live]
; [else-branch: 90 | !(v1@425@01 in g@125@01 && v2@426@01 in g@125@01) | live]
(push) ; 10
; [then-branch: 90 | v1@425@01 in g@125@01 && v2@426@01 in g@125@01]
(assert (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01)))
; [eval] edge($$(g), v1, v2) == (edge(save_g, v1, v2) && v1 != save_x || v1 == save_x && v2 == save_y)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 11
(declare-const n@427@01 $Ref)
(push) ; 12
; [eval] (n in refs)
(assert (Set_in n@427@01 g@125@01))
(pop) ; 12
(declare-fun inv@428@01 ($Ref) $Ref)
(declare-fun img@429@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((n1@427@01 $Ref) (n2@427@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@427@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n1@427@01) n1@427@01))
      (and
        (Set_in n2@427@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n2@427@01) n2@427@01))
      (= n1@427@01 n2@427@01))
    (= n1@427@01 n2@427@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@125@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@125@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@125@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@428@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
  :pattern ((inv@428@01 r))
  :qid |quant-u-8159|)))
(push) ; 12
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r) (= r (inv@428@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@384@01 r)
              (and
                (Set_in (inv@383@01 r) g@125@01)
                (not (= (inv@383@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8160|))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(declare-const sm@430@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>)))
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>))))
  :qid |qp.fvfDomDef358|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef354|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef355|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef356|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef357|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@430@01  $FVF<next>)) g@125@01))
(pop) ; 11
; Joined path conditions
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@125@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@125@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@125@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>)))
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>))))
  :qid |qp.fvfDomDef358|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef354|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef355|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef356|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef357|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@428@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
    :pattern ((inv@428@01 r))
    :qid |quant-u-8159|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@430@01  $FVF<next>)) g@125@01)))
; [eval] edge(save_g, v1, v2) && v1 != save_x || v1 == save_x && v2 == save_y
; [eval] edge(save_g, v1, v2) && v1 != save_x
; [eval] edge(save_g, v1, v2)
(push) ; 11
; [then-branch: 91 | !(edge[Bool](save_g@313@01, v1@425@01, v2@426@01)) | live]
; [else-branch: 91 | edge[Bool](save_g@313@01, v1@425@01, v2@426@01) | live]
(push) ; 12
; [then-branch: 91 | !(edge[Bool](save_g@313@01, v1@425@01, v2@426@01))]
(assert (not (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 91 | edge[Bool](save_g@313@01, v1@425@01, v2@426@01)]
(assert (edge<Bool> save_g@313@01 v1@425@01 v2@426@01))
; [eval] v1 != save_x
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
  (not (edge<Bool> save_g@313@01 v1@425@01 v2@426@01))))
(push) ; 11
; [then-branch: 92 | edge[Bool](save_g@313@01, v1@425@01, v2@426@01) && v1@425@01 != x@169@01 | live]
; [else-branch: 92 | !(edge[Bool](save_g@313@01, v1@425@01, v2@426@01) && v1@425@01 != x@169@01) | live]
(push) ; 12
; [then-branch: 92 | edge[Bool](save_g@313@01, v1@425@01, v2@426@01) && v1@425@01 != x@169@01]
(assert (and (edge<Bool> save_g@313@01 v1@425@01 v2@426@01) (not (= v1@425@01 x@169@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 92 | !(edge[Bool](save_g@313@01, v1@425@01, v2@426@01) && v1@425@01 != x@169@01)]
(assert (not
  (and
    (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
    (not (= v1@425@01 x@169@01)))))
; [eval] v1 == save_x && v2 == save_y
; [eval] v1 == save_x
(push) ; 13
; [then-branch: 93 | v1@425@01 != x@169@01 | live]
; [else-branch: 93 | v1@425@01 == x@169@01 | live]
(push) ; 14
; [then-branch: 93 | v1@425@01 != x@169@01]
(assert (not (= v1@425@01 x@169@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 93 | v1@425@01 == x@169@01]
(assert (= v1@425@01 x@169@01))
; [eval] v2 == save_y
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (= v1@425@01 x@169@01) (not (= v1@425@01 x@169@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
      (not (= v1@425@01 x@169@01))))
  (and
    (not
      (and
        (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
        (not (= v1@425@01 x@169@01))))
    (or (= v1@425@01 x@169@01) (not (= v1@425@01 x@169@01))))))
(assert (or
  (not
    (and
      (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
      (not (= v1@425@01 x@169@01))))
  (and
    (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
    (not (= v1@425@01 x@169@01)))))
(pop) ; 10
(push) ; 10
; [else-branch: 90 | !(v1@425@01 in g@125@01 && v2@426@01 in g@125@01)]
(assert (not (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@125@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@125@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@125@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>)))
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>))))
  :qid |qp.fvfDomDef358|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef354|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef355|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef356|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef357|)))
(assert (=>
  (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))
  (and
    (Set_in v1@425@01 g@125@01)
    (Set_in v2@426@01 g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@428@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
      :pattern ((inv@428@01 r))
      :qid |quant-u-8159|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@430@01  $FVF<next>)) g@125@01)
    (or
      (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
      (not (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)))
    (=>
      (not
        (and
          (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
          (not (= v1@425@01 x@169@01))))
      (and
        (not
          (and
            (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
            (not (= v1@425@01 x@169@01))))
        (or (= v1@425@01 x@169@01) (not (= v1@425@01 x@169@01)))))
    (or
      (not
        (and
          (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
          (not (= v1@425@01 x@169@01))))
      (and
        (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
        (not (= v1@425@01 x@169@01)))))))
; Joined path conditions
(assert (or
  (not (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01)))
  (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@125@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@125@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@125@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>)))
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>))))
  :qid |qp.fvfDomDef358|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef354|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef355|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef356|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef357|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@425@01 $Ref) (v2@426@01 $Ref)) (!
  (and
    (or (Set_in v1@425@01 g@125@01) (not (Set_in v1@425@01 g@125@01)))
    (=>
      (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))
      (and
        (Set_in v1@425@01 g@125@01)
        (Set_in v2@426@01 g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@428@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
          :pattern ((inv@428@01 r))
          :qid |quant-u-8159|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@430@01  $FVF<next>)) g@125@01)
        (or
          (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
          (not (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)))
        (=>
          (not
            (and
              (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
              (not (= v1@425@01 x@169@01))))
          (and
            (not
              (and
                (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
                (not (= v1@425@01 x@169@01))))
            (or (= v1@425@01 x@169@01) (not (= v1@425@01 x@169@01)))))
        (or
          (not
            (and
              (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
              (not (= v1@425@01 x@169@01))))
          (and
            (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
            (not (= v1@425@01 x@169@01))))))
    (or
      (not (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01)))
      (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))))
  :pattern ((Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@454@35@457@14-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 88 | y@168@01 == Null]
(assert (= y@168@01 $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@427@01 $Ref)) (!
  (=>
    (Set_in n@427@01 g@125@01)
    (and (= (inv@428@01 n@427@01) n@427@01) (img@429@01 n@427@01)))
  :pattern ((Set_in n@427@01 g@125@01))
  :pattern ((inv@428@01 n@427@01))
  :pattern ((img@429@01 n@427@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@429@01 r) (Set_in (inv@428@01 r) g@125@01)) (= (inv@428@01 r) r))
  :pattern ((inv@428@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>)))
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r)))
    (=>
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@430@01  $FVF<next>))))
  :qid |qp.fvfDomDef358|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef354|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef355|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@428@01 r) g@125@01) (img@429@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@430@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef356|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@430@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef357|)))
(assert (=>
  (not (= y@168@01 $Ref.null))
  (and
    (not (= y@168@01 $Ref.null))
    (forall ((v1@425@01 $Ref) (v2@426@01 $Ref)) (!
      (and
        (or (Set_in v1@425@01 g@125@01) (not (Set_in v1@425@01 g@125@01)))
        (=>
          (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))
          (and
            (Set_in v1@425@01 g@125@01)
            (Set_in v2@426@01 g@125@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@428@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
              :pattern ((inv@428@01 r))
              :qid |quant-u-8159|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@430@01  $FVF<next>)) g@125@01)
            (or
              (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
              (not (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)))
            (=>
              (not
                (and
                  (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
                  (not (= v1@425@01 x@169@01))))
              (and
                (not
                  (and
                    (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
                    (not (= v1@425@01 x@169@01))))
                (or (= v1@425@01 x@169@01) (not (= v1@425@01 x@169@01)))))
            (or
              (not
                (and
                  (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
                  (not (= v1@425@01 x@169@01))))
              (and
                (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
                (not (= v1@425@01 x@169@01))))))
        (or
          (not (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01)))
          (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))))
      :pattern ((Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@454@35@457@14-aux|)))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  (not (= y@168@01 $Ref.null))
  (forall ((v1@425@01 $Ref) (v2@426@01 $Ref)) (!
    (=>
      (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))
      (=
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@430@01  $FVF<next>)) g@125@01) v1@425@01 v2@426@01)
        (or
          (and
            (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
            (not (= v1@425@01 x@169@01)))
          (and (= v1@425@01 x@169@01) (= v2@426@01 y@168@01)))))
    :pattern ((Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@454@35@457@14|)))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(assert (=>
  (not (= y@168@01 $Ref.null))
  (forall ((v1@425@01 $Ref) (v2@426@01 $Ref)) (!
    (=>
      (and (Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))
      (=
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@430@01  $FVF<next>)) g@125@01) v1@425@01 v2@426@01)
        (or
          (and
            (edge<Bool> save_g@313@01 v1@425@01 v2@426@01)
            (not (= v1@425@01 x@169@01)))
          (and (= v1@425@01 x@169@01) (= v2@426@01 y@168@01)))))
    :pattern ((Set_in v1@425@01 g@125@01) (Set_in v2@426@01 g@125@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@454@35@457@14|))))
; Loop head block: Re-establish invariant
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$1@431@01 $Ref)
(push) ; 6
; [eval] (n$1 in g)
(assert (Set_in n$1@431@01 g@125@01))
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@432@01 ($Ref) $Ref)
(declare-fun img@433@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n$11@431@01 $Ref) (n$12@431@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@431@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$11@431@01) n$11@431@01))
      (and
        (Set_in n$12@431@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$12@431@01) n$12@431@01))
      (= n$11@431@01 n$12@431@01))
    (= n$11@431@01 n$12@431@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@431@01 $Ref)) (!
  (=>
    (Set_in n$1@431@01 g@125@01)
    (and (= (inv@432@01 n$1@431@01) n$1@431@01) (img@433@01 n$1@431@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$1@431@01) n$1@431@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@433@01 r) (Set_in (inv@432@01 r) g@125@01)) (= (inv@432@01 r) r))
  :pattern ((inv@432@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@432@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
  :pattern ((inv@432@01 r))
  :qid |quant-u-8162|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@434@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@432@01 r) g@125@01) (img@433@01 r) (= r (inv@432@01 r)))
    ($Perm.min
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@435@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@432@01 r) g@125@01) (img@433@01 r) (= r (inv@432@01 r)))
    ($Perm.min
      (ite
        (and
          (img@384@01 r)
          (and
            (Set_in (inv@383@01 r) g@125@01)
            (not (= (inv@383@01 r) x@169@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- $Perm.Write (pTaken@434@01 r)))
    $Perm.No))
(define-fun pTaken@436@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@432@01 r) g@125@01) (img@433@01 r) (= r (inv@432@01 r)))
    ($Perm.min
      (ite (= r x@169@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@434@01 r)) (pTaken@435@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
        $Perm.No)
      (pTaken@434@01 r))
    $Perm.No)
  
  :qid |quant-u-8164|))))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@432@01 r) g@125@01) (img@433@01 r) (= r (inv@432@01 r)))
    (= (- $Perm.Write (pTaken@434@01 r)) $Perm.No))
  
  :qid |quant-u-8165|))))
(check-sat)
; unknown
(pop) ; 6
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@384@01 r)
          (and
            (Set_in (inv@383@01 r) g@125@01)
            (not (= (inv@383@01 r) x@169@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@435@01 r))
    $Perm.No)
  
  :qid |quant-u-8166|))))
(check-sat)
; unsat
(pop) ; 6
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@432@01 r) g@125@01) (img@433@01 r) (= r (inv@432@01 r)))
    (= (- (- $Perm.Write (pTaken@434@01 r)) (pTaken@435@01 r)) $Perm.No))
  
  :qid |quant-u-8167|))))
(check-sat)
; unknown
(pop) ; 6
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@436@01 x@169@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@432@01 r) g@125@01) (img@433@01 r) (= r (inv@432@01 r)))
    (=
      (-
        (- (- $Perm.Write (pTaken@434@01 r)) (pTaken@435@01 r))
        (pTaken@436@01 r))
      $Perm.No))
  
  :qid |quant-u-8169|))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@437@01 $Ref)
(set-option :timeout 0)
(push) ; 6
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 7
; [then-branch: 94 | !(n$2@437@01 in g@125@01) | live]
; [else-branch: 94 | n$2@437@01 in g@125@01 | live]
(push) ; 8
; [then-branch: 94 | !(n$2@437@01 in g@125@01)]
(assert (not (Set_in n$2@437@01 g@125@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 94 | n$2@437@01 in g@125@01]
(assert (Set_in n$2@437@01 g@125@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef302|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
    :qid |qp.fvfValDef303|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
    :qid |qp.fvfValDef304|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef305|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 n$2@437@01) (Set_in (inv@173@01 n$2@437@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 n$2@437@01)) (pTaken@321@01 n$2@437@01))
        $Perm.No)
      (ite (= n$2@437@01 x@169@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@384@01 n$2@437@01)
        (and
          (Set_in (inv@383@01 n$2@437@01) g@125@01)
          (not (= (inv@383@01 n$2@437@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
(assert (=>
  (Set_in n$2@437@01 g@125@01)
  (and
    (Set_in n$2@437@01 g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01))))
(assert (or (Set_in n$2@437@01 g@125@01) (not (Set_in n$2@437@01 g@125@01))))
(push) ; 7
; [then-branch: 95 | n$2@437@01 in g@125@01 && Lookup(next, sm@385@01, n$2@437@01) != Null | live]
; [else-branch: 95 | !(n$2@437@01 in g@125@01 && Lookup(next, sm@385@01, n$2@437@01) != Null) | live]
(push) ; 8
; [then-branch: 95 | n$2@437@01 in g@125@01 && Lookup(next, sm@385@01, n$2@437@01) != Null]
(assert (and
  (Set_in n$2@437@01 g@125@01)
  (not (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false)
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
    :qid |qp.fvfValDef302|))
  (forall ((r $Ref)) (!
    (=>
      (= r x@169@01)
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
    :qid |qp.fvfValDef303|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
      (=
        ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
    :qid |qp.fvfValDef304|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef305|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and (img@174@01 n$2@437@01) (Set_in (inv@173@01 n$2@437@01) g@125@01))
        (- (- $Perm.Write (pTaken@316@01 n$2@437@01)) (pTaken@321@01 n$2@437@01))
        $Perm.No)
      (ite (= n$2@437@01 x@169@01) $Perm.Write $Perm.No))
    (ite
      (and
        (img@384@01 n$2@437@01)
        (and
          (Set_in (inv@383@01 n$2@437@01) g@125@01)
          (not (= (inv@383@01 n$2@437@01) x@169@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.08s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 95 | !(n$2@437@01 in g@125@01 && Lookup(next, sm@385@01, n$2@437@01) != Null)]
(assert (not
  (and
    (Set_in n$2@437@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
(assert (=>
  (and
    (Set_in n$2@437@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null)))
  (and
    (Set_in n$2@437@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@437@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null))))
  (and
    (Set_in n$2@437@01 g@125@01)
    (not (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@385@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@385@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef305|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@437@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@437@01 g@125@01)
      (and
        (Set_in n$2@437@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01)))
    (or (Set_in n$2@437@01 g@125@01) (not (Set_in n$2@437@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@437@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null)))
      (and
        (Set_in n$2@437@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01)))
    (or
      (not
        (and
          (Set_in n$2@437@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01)
              $Ref.null))))
      (and
        (Set_in n$2@437@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) g@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(assert (forall ((n$2@437@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@437@01 g@125@01)
      (and
        (Set_in n$2@437@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01)))
    (or (Set_in n$2@437@01 g@125@01) (not (Set_in n$2@437@01 g@125@01)))
    (=>
      (and
        (Set_in n$2@437@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null)))
      (and
        (Set_in n$2@437@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01)))
    (or
      (not
        (and
          (Set_in n$2@437@01 g@125@01)
          (not
            (=
              ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01)
              $Ref.null))))
      (and
        (Set_in n$2@437@01 g@125@01)
        (not
          (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null)))))
  :pattern ((Set_in n$2@437@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27-aux|)))
(push) ; 6
(assert (not (forall ((n$2@437@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@437@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) g@125@01))
  :pattern ((Set_in n$2@437@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$2@437@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@437@01 g@125@01)
      (not
        (= ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) g@125@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) g@125@01))
  :pattern ((Set_in n$2@437@01 g@125@01) ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n$2@437@01) n$2@437@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@405@19@405@27|)))
; [eval] x != null ==> (x in g)
; [eval] x != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= t@314@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= t@314@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 96 | t@314@01 != Null | live]
; [else-branch: 96 | t@314@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 96 | t@314@01 != Null]
(assert (not (= t@314@01 $Ref.null)))
; [eval] (x in g)
(pop) ; 7
(push) ; 7
; [else-branch: 96 | t@314@01 == Null]
(assert (= t@314@01 $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (= t@314@01 $Ref.null) (not (= t@314@01 $Ref.null))))
(push) ; 6
(assert (not (=> (not (= t@314@01 $Ref.null)) (Set_in t@314@01 g@125@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=> (not (= t@314@01 $Ref.null)) (Set_in t@314@01 g@125@01)))
; [eval] y != null ==> (y in g)
; [eval] y != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= x@169@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 97 | x@169@01 != Null | live]
; [else-branch: 97 | x@169@01 == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 97 | x@169@01 != Null]
; [eval] (y in g)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] (forall n: Ref :: { exists_path($$(g), x, n) } { exists_path($$(g), y, n) } (n in g) ==> exists_path($$(g), x, n) || exists_path($$(g), y, n))
(declare-const n@438@01 $Ref)
(push) ; 6
; [eval] (n in g) ==> exists_path($$(g), x, n) || exists_path($$(g), y, n)
; [eval] (n in g)
(push) ; 7
; [then-branch: 98 | n@438@01 in g@125@01 | live]
; [else-branch: 98 | !(n@438@01 in g@125@01) | live]
(push) ; 8
; [then-branch: 98 | n@438@01 in g@125@01]
(assert (Set_in n@438@01 g@125@01))
; [eval] exists_path($$(g), x, n) || exists_path($$(g), y, n)
; [eval] exists_path($$(g), x, n)
; [eval] $$(g)
(push) ; 9
(declare-const n@439@01 $Ref)
(push) ; 10
; [eval] (n in refs)
(assert (Set_in n@439@01 g@125@01))
(pop) ; 10
(declare-fun inv@440@01 ($Ref) $Ref)
(declare-fun img@441@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((n1@439@01 $Ref) (n2@439@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@439@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n1@439@01) n1@439@01))
      (and
        (Set_in n2@439@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) n2@439@01) n2@439@01))
      (= n1@439@01 n2@439@01))
    (= n1@439@01 n2@439@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@439@01 $Ref)) (!
  (=>
    (Set_in n@439@01 g@125@01)
    (and (= (inv@440@01 n@439@01) n@439@01) (img@441@01 n@439@01)))
  :pattern ((Set_in n@439@01 g@125@01))
  :pattern ((inv@440@01 n@439@01))
  :pattern ((img@441@01 n@439@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@441@01 r) (Set_in (inv@440@01 r) g@125@01)) (= (inv@440@01 r) r))
  :pattern ((inv@440@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@440@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
  :pattern ((inv@440@01 r))
  :qid |quant-u-8171|)))
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r) (= r (inv@440@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@384@01 r)
              (and
                (Set_in (inv@383@01 r) g@125@01)
                (not (= (inv@383@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8172|))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(declare-const sm@442@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>)))
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r)))
    (=>
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>))))
  :qid |qp.fvfDomDef363|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef361|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef362|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01))
(pop) ; 9
; Joined path conditions
(assert (forall ((n@439@01 $Ref)) (!
  (=>
    (Set_in n@439@01 g@125@01)
    (and (= (inv@440@01 n@439@01) n@439@01) (img@441@01 n@439@01)))
  :pattern ((Set_in n@439@01 g@125@01))
  :pattern ((inv@440@01 n@439@01))
  :pattern ((img@441@01 n@439@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@441@01 r) (Set_in (inv@440@01 r) g@125@01)) (= (inv@440@01 r) r))
  :pattern ((inv@440@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>)))
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r)))
    (=>
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>))))
  :qid |qp.fvfDomDef363|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef361|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef362|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@440@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
    :pattern ((inv@440@01 r))
    :qid |quant-u-8171|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01)))
(push) ; 9
; [then-branch: 99 | exists_path[Bool]($$(sm@442@01, g@125@01), t@314@01, n@438@01) | live]
; [else-branch: 99 | !(exists_path[Bool]($$(sm@442@01, g@125@01), t@314@01, n@438@01)) | live]
(push) ; 10
; [then-branch: 99 | exists_path[Bool]($$(sm@442@01, g@125@01), t@314@01, n@438@01)]
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
(pop) ; 10
(push) ; 10
; [else-branch: 99 | !(exists_path[Bool]($$(sm@442@01, g@125@01), t@314@01, n@438@01))]
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01)))
; [eval] exists_path($$(g), y, n)
; [eval] $$(g)
(push) ; 11
(declare-const n@443@01 $Ref)
(push) ; 12
; [eval] (n in refs)
(assert (Set_in n@443@01 g@125@01))
(pop) ; 12
(declare-fun inv@444@01 ($Ref) $Ref)
(declare-fun img@445@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@446@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef364|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef365|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef366|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef367|)))
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((n1@443@01 $Ref) (n2@443@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@443@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@446@01  $FVF<next>) n1@443@01) n1@443@01))
      (and
        (Set_in n2@443@01 g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@446@01  $FVF<next>) n2@443@01) n2@443@01))
      (= n1@443@01 n2@443@01))
    (= n1@443@01 n2@443@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@443@01 $Ref)) (!
  (=>
    (Set_in n@443@01 g@125@01)
    (and (= (inv@444@01 n@443@01) n@443@01) (img@445@01 n@443@01)))
  :pattern ((Set_in n@443@01 g@125@01))
  :pattern ((inv@444@01 n@443@01))
  :pattern ((img@445@01 n@443@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@445@01 r) (Set_in (inv@444@01 r) g@125@01)) (= (inv@444@01 r) r))
  :pattern ((inv@444@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@444@01 r) g@125@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@446@01  $FVF<next>) r) r))
  :pattern ((inv@444@01 r))
  :qid |quant-u-8174|)))
(push) ; 12
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r) (= r (inv@444@01 r)))
    (>
      (+
        (+
          (ite
            (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
            (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r))
            $Perm.No)
          (ite
            (and
              (img@384@01 r)
              (and
                (Set_in (inv@383@01 r) g@125@01)
                (not (= (inv@383@01 r) x@169@01))))
            (/ (to_real 1) (to_real 2))
            $Perm.No))
        (ite (= r x@169@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-8175|))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(declare-const sm@447@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>)))
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r)))
    (=>
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>))))
  :qid |qp.fvfDomDef372|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef368|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef369|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef370|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef371|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01))
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef364|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef365|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef366|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef367|)))
(assert (forall ((n@443@01 $Ref)) (!
  (=>
    (Set_in n@443@01 g@125@01)
    (and (= (inv@444@01 n@443@01) n@443@01) (img@445@01 n@443@01)))
  :pattern ((Set_in n@443@01 g@125@01))
  :pattern ((inv@444@01 n@443@01))
  :pattern ((img@445@01 n@443@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@445@01 r) (Set_in (inv@444@01 r) g@125@01)) (= (inv@444@01 r) r))
  :pattern ((inv@444@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>)))
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r)))
    (=>
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>))))
  :qid |qp.fvfDomDef372|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef368|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef369|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef370|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef371|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@444@01 r) g@125@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@446@01  $FVF<next>) r) r))
    :pattern ((inv@444@01 r))
    :qid |quant-u-8174|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef364|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef365|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef366|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef367|)))
(assert (forall ((n@443@01 $Ref)) (!
  (=>
    (Set_in n@443@01 g@125@01)
    (and (= (inv@444@01 n@443@01) n@443@01) (img@445@01 n@443@01)))
  :pattern ((Set_in n@443@01 g@125@01))
  :pattern ((inv@444@01 n@443@01))
  :pattern ((img@445@01 n@443@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@445@01 r) (Set_in (inv@444@01 r) g@125@01)) (= (inv@444@01 r) r))
  :pattern ((inv@444@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>)))
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r)))
    (=>
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>))))
  :qid |qp.fvfDomDef372|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef368|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef369|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef370|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef371|)))
(assert (=>
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
  (and
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@444@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@446@01  $FVF<next>) r) r))
      :pattern ((inv@444@01 r))
      :qid |quant-u-8174|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01))))
(assert (or
  (not
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 98 | !(n@438@01 in g@125@01)]
(assert (not (Set_in n@438@01 g@125@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((n@439@01 $Ref)) (!
  (=>
    (Set_in n@439@01 g@125@01)
    (and (= (inv@440@01 n@439@01) n@439@01) (img@441@01 n@439@01)))
  :pattern ((Set_in n@439@01 g@125@01))
  :pattern ((inv@440@01 n@439@01))
  :pattern ((img@441@01 n@439@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@441@01 r) (Set_in (inv@440@01 r) g@125@01)) (= (inv@440@01 r) r))
  :pattern ((inv@440@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>)))
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r)))
    (=>
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>))))
  :qid |qp.fvfDomDef363|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef361|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef362|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef364|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef365|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef366|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef367|)))
(assert (forall ((n@443@01 $Ref)) (!
  (=>
    (Set_in n@443@01 g@125@01)
    (and (= (inv@444@01 n@443@01) n@443@01) (img@445@01 n@443@01)))
  :pattern ((Set_in n@443@01 g@125@01))
  :pattern ((inv@444@01 n@443@01))
  :pattern ((img@445@01 n@443@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@445@01 r) (Set_in (inv@444@01 r) g@125@01)) (= (inv@444@01 r) r))
  :pattern ((inv@444@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>)))
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r)))
    (=>
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>))))
  :qid |qp.fvfDomDef372|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef368|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef369|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef370|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef371|)))
(assert (=>
  (Set_in n@438@01 g@125@01)
  (and
    (Set_in n@438@01 g@125@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@440@01 r) g@125@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
      :pattern ((inv@440@01 r))
      :qid |quant-u-8171|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01)
    (=>
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
      (and
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@444@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@446@01  $FVF<next>) r) r))
          :pattern ((inv@444@01 r))
          :qid |quant-u-8174|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01)))
    (or
      (not
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01)))))
; Joined path conditions
(assert (or (not (Set_in n@438@01 g@125@01)) (Set_in n@438@01 g@125@01)))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@439@01 $Ref)) (!
  (=>
    (Set_in n@439@01 g@125@01)
    (and (= (inv@440@01 n@439@01) n@439@01) (img@441@01 n@439@01)))
  :pattern ((Set_in n@439@01 g@125@01))
  :pattern ((inv@440@01 n@439@01))
  :pattern ((img@441@01 n@439@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@441@01 r) (Set_in (inv@440@01 r) g@125@01)) (= (inv@440@01 r) r))
  :pattern ((inv@440@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>)))
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r)))
    (=>
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@442@01  $FVF<next>))))
  :qid |qp.fvfDomDef363|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef359|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef360|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@440@01 r) g@125@01) (img@441@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@442@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef361|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@442@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef362|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
      (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
      false)
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef364|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r x@169@01)
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef365|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@384@01 r)
      (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01))))
    (=
      ($FVF.lookup_next (as sm@446@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef366|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@446@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef367|)))
(assert (forall ((n@443@01 $Ref)) (!
  (=>
    (Set_in n@443@01 g@125@01)
    (and (= (inv@444@01 n@443@01) n@443@01) (img@445@01 n@443@01)))
  :pattern ((Set_in n@443@01 g@125@01))
  :pattern ((inv@444@01 n@443@01))
  :pattern ((img@445@01 n@443@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@445@01 r) (Set_in (inv@444@01 r) g@125@01)) (= (inv@444@01 r) r))
  :pattern ((inv@444@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>)))
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r)))
    (=>
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@447@01  $FVF<next>))))
  :qid |qp.fvfDomDef372|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) g@125@01))
        (< $Perm.No (- (- $Perm.Write (pTaken@316@01 r)) (pTaken@321@01 r)))
        false))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r))
  :qid |qp.fvfValDef368|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r)) (= r x@169@01))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfValDef369|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@444@01 r) g@125@01) (img@445@01 r))
      (and
        (img@384@01 r)
        (and (Set_in (inv@383@01 r) g@125@01) (not (= (inv@383@01 r) x@169@01)))))
    (=
      ($FVF.lookup_next (as sm@447@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r))
  :qid |qp.fvfValDef370|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@170@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@379@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@447@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef371|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@438@01 $Ref)) (!
  (and
    (=>
      (Set_in n@438@01 g@125@01)
      (and
        (Set_in n@438@01 g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@440@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
          :pattern ((inv@440@01 r))
          :qid |quant-u-8171|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@444@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@446@01  $FVF<next>) r) r))
              :pattern ((inv@444@01 r))
              :qid |quant-u-8174|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))))
    (or (not (Set_in n@438@01 g@125@01)) (Set_in n@438@01 g@125@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@438@01 $Ref)) (!
  (and
    (=>
      (Set_in n@438@01 g@125@01)
      (and
        (Set_in n@438@01 g@125@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@440@01 r) g@125@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@385@01  $FVF<next>) r) r))
          :pattern ((inv@440@01 r))
          :qid |quant-u-8171|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01)
        (=>
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
          (and
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@444@01 r) g@125@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@446@01  $FVF<next>) r) r))
              :pattern ((inv@444@01 r))
              :qid |quant-u-8174|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01)))
        (or
          (not
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))))
    (or (not (Set_in n@438@01 g@125@01)) (Set_in n@438@01 g@125@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01) x@169@01 n@438@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147-aux|)))
(assert (forall ((n@438@01 $Ref)) (!
  (=>
    (Set_in n@438@01 g@125@01)
    (and
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01)
      (=>
        (not
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01) x@169@01 n@438@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147_precondition|)))
(push) ; 6
(assert (not (forall ((n@438@01 $Ref)) (!
  (=>
    (and
      (=>
        (Set_in n@438@01 g@125@01)
        (and
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01)
          (=>
            (not
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01))))
      (Set_in n@438@01 g@125@01))
    (or
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01) x@169@01 n@438@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@442@01  $FVF<next>)) g@125@01) t@314@01 n@438@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@447@01  $FVF<next>)) g@125@01) x@169@01 n@438@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/examples/list_reverse.vpr@411@19@411@147|))))
(check-sat)
