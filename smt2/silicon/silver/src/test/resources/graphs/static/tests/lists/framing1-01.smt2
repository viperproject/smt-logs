(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-26 21:29:32
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Edge> 0)
(declare-sort Set<$Snap> 0)
(declare-sort FramingWisdoms 0)
(declare-sort Edge 0)
(declare-sort TrClo 0)
(declare-sort $FVF<next> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Edge>To$Snap (Set<Edge>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Edge> ($Snap) Set<Edge>)
(assert (forall ((x Set<Edge>)) (!
    (= x ($SortWrappers.$SnapToSet<Edge>($SortWrappers.Set<Edge>To$Snap x)))
    :pattern (($SortWrappers.Set<Edge>To$Snap x))
    :qid |$Snap.$SnapToSet<Edge>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Edge>To$Snap($SortWrappers.$SnapToSet<Edge> x)))
    :pattern (($SortWrappers.$SnapToSet<Edge> x))
    :qid |$Snap.Set<Edge>To$SnapToSet<Edge>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.FramingWisdomsTo$Snap (FramingWisdoms) $Snap)
(declare-fun $SortWrappers.$SnapToFramingWisdoms ($Snap) FramingWisdoms)
(assert (forall ((x FramingWisdoms)) (!
    (= x ($SortWrappers.$SnapToFramingWisdoms($SortWrappers.FramingWisdomsTo$Snap x)))
    :pattern (($SortWrappers.FramingWisdomsTo$Snap x))
    :qid |$Snap.$SnapToFramingWisdomsTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.FramingWisdomsTo$Snap($SortWrappers.$SnapToFramingWisdoms x)))
    :pattern (($SortWrappers.$SnapToFramingWisdoms x))
    :qid |$Snap.FramingWisdomsTo$SnapToFramingWisdoms|
    )))
(declare-fun $SortWrappers.EdgeTo$Snap (Edge) $Snap)
(declare-fun $SortWrappers.$SnapToEdge ($Snap) Edge)
(assert (forall ((x Edge)) (!
    (= x ($SortWrappers.$SnapToEdge($SortWrappers.EdgeTo$Snap x)))
    :pattern (($SortWrappers.EdgeTo$Snap x))
    :qid |$Snap.$SnapToEdgeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.EdgeTo$Snap($SortWrappers.$SnapToEdge x)))
    :pattern (($SortWrappers.$SnapToEdge x))
    :qid |$Snap.EdgeTo$SnapToEdge|
    )))
(declare-fun $SortWrappers.TrCloTo$Snap (TrClo) $Snap)
(declare-fun $SortWrappers.$SnapToTrClo ($Snap) TrClo)
(assert (forall ((x TrClo)) (!
    (= x ($SortWrappers.$SnapToTrClo($SortWrappers.TrCloTo$Snap x)))
    :pattern (($SortWrappers.TrCloTo$Snap x))
    :qid |$Snap.$SnapToTrCloTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TrCloTo$Snap($SortWrappers.$SnapToTrClo x)))
    :pattern (($SortWrappers.$SnapToTrClo x))
    :qid |$Snap.TrCloTo$SnapToTrClo|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<next>To$Snap ($FVF<next>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<next> ($Snap) $FVF<next>)
(assert (forall ((x $FVF<next>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<next>($SortWrappers.$FVF<next>To$Snap x)))
    :pattern (($SortWrappers.$FVF<next>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<next>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<next>To$Snap($SortWrappers.$SnapTo$FVF<next> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<next> x))
    :qid |$Snap.$FVF<next>To$SnapTo$FVF<next>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Edge>) Int)
(declare-const Set_empty Set<Edge>)
(declare-fun Set_in (Edge Set<Edge>) Bool)
(declare-fun Set_singleton (Edge) Set<Edge>)
(declare-fun Set_unionone (Set<Edge> Edge) Set<Edge>)
(declare-fun Set_union (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_intersection (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_difference (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_subset (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_equal (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_skolem_diff (Set<Edge> Set<Edge>) Edge)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun exists_path<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_path_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_spath<Bool> (Set<Edge> Set<$Ref> $Ref) Bool)
(declare-fun apply_noExit<Bool> (Set<Edge> Set<$Ref> Set<$Ref>) Bool)
(declare-fun inst_uReach<Set<Ref>> (Set<Edge> $Ref) Set<$Ref>)
(declare-fun acyclic_graph<Bool> (Set<Edge>) Bool)
(declare-fun unshared_graph<Bool> (Set<Edge>) Bool)
(declare-fun func_graph<Bool> (Set<Edge>) Bool)
(declare-fun edge<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_pred<Ref> (Edge) $Ref)
(declare-fun edge_succ<Ref> (Edge) $Ref)
(declare-fun create_edge<Edge> ($Ref $Ref) Edge)
(declare-fun create_edge_<Edge> ($Ref $Ref) Edge)
; /field_value_functions_declarations.smt2 [next: Ref]
(declare-fun $FVF.domain_next ($FVF<next>) Set<$Ref>)
(declare-fun $FVF.lookup_next ($FVF<next> $Ref) $Ref)
(declare-fun $FVF.after_next ($FVF<next> $FVF<next>) Bool)
(declare-fun $FVF.loc_next ($Ref $Ref) Bool)
(declare-fun $FVF.perm_next ($FPM $Ref) $Perm)
(declare-const $fvfTOP_next $FVF<next>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $$ ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%limited ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%stateless (Set<$Ref>) Bool)
(declare-fun $$%precondition ($Snap Set<$Ref>) Bool)
(declare-fun is_global_root ($Snap Set<$Ref> $Ref) Bool)
(declare-fun is_global_root%limited ($Snap Set<$Ref> $Ref) Bool)
(declare-fun is_global_root%stateless (Set<$Ref> $Ref) Bool)
(declare-fun is_global_root%precondition ($Snap Set<$Ref> $Ref) Bool)
(declare-fun is_global_sroot ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_sroot%limited ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_sroot%stateless (Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_sroot%precondition ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun acyclic_list_segment ($Snap Set<$Ref>) Bool)
(declare-fun acyclic_list_segment%limited ($Snap Set<$Ref>) Bool)
(declare-fun acyclic_list_segment%stateless (Set<$Ref>) Bool)
(declare-fun acyclic_list_segment%precondition ($Snap Set<$Ref>) Bool)
(declare-fun apply_TCFraming ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%limited ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%stateless (Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%precondition ($Snap Set<$Ref> Set<$Ref>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Edge>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Edge)) (!
  (not (Set_in o (as Set_empty  Set<Edge>)))
  :pattern ((Set_in o (as Set_empty  Set<Edge>)))
  )))
(assert (forall ((s Set<Edge>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Edge>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Edge))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Edge)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Edge) (o Edge)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Edge)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (o Edge)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (Set_subset a b)
    (forall ((o Edge)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge<Bool> EG p s) (edge_<Bool> EG p s))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_EdgeSynonim|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge_<Bool> EG p s) (Set_in (create_edge<Edge> p s) EG))
  :pattern ((Set_in (create_edge<Edge> p s) EG))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_Edge|)))
(assert (forall ((EG Set<Edge>) (U Set<$Ref>) (M Set<$Ref>)) (!
  (=>
    (and
      (apply_noExit<Bool> EG U M)
      (forall ((u $Ref) (v $Ref)) (!
        (=>
          (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
          (not (edge<Bool> EG u v)))
        :pattern ((edge<Bool> EG u v))
        :pattern ((Set_in u M) (Set_in v M))
        )))
    (forall ((u $Ref) (v $Ref)) (!
      (=>
        (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
        (not (exists_path<Bool> EG u v)))
      :pattern ((exists_path<Bool> EG u v))
      :pattern ((Set_in u M) (Set_in v M))
      )))
  :pattern ((apply_noExit<Bool> EG U M))
  :qid |prog.ax_NoExit|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (v $Ref)) (!
  (= (Set_in v (inst_uReach<Set<Ref>> EG x)) (exists_path<Bool> EG x v))
  :pattern ((Set_in v (inst_uReach<Set<Ref>> EG x)))
  :pattern ((exists_path<Bool> EG x v))
  :qid |prog.ax_instantiation_uReach|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (= (exists_path<Bool> EG start end) (exists_path_<Bool> EG start end))
  :pattern ((exists_path<Bool> EG start end))
  :qid |prog.ax_Alias|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (=
    (exists_path_<Bool> EG start end)
    (or
      (= start end)
      (exists ((w $Ref)) (!
        (and (edge<Bool> EG start w) (exists_path_<Bool> EG w end))
        :pattern ((edge<Bool> EG start w))
        :pattern ((exists_path_<Bool> EG w end))
        ))))
  :pattern ((exists_path<Bool> EG start end))
  :pattern ((edge<Bool> EG start end))
  :qid |prog.ax_ExistsPath|)))
(assert (forall ((EG Set<Edge>) (u $Ref) (v $Ref) (w $Ref)) (!
  (=>
    (and (exists_path_<Bool> EG u w) (exists_path_<Bool> EG w v))
    (exists_path_<Bool> EG u v))
  :pattern ((exists_path<Bool> EG u w) (exists_path<Bool> EG w v))
  :qid |prog.ax_ExistsPathTrans|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (acyclic_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref)) (!
      (or (not (edge<Bool> EG v1 v2)) (not (exists_path<Bool> EG v2 v1)))
      :pattern ((edge<Bool> EG v1 v2))
      :pattern ((exists_path<Bool> EG v2 v1))
      )))
  :pattern ((acyclic_graph<Bool> EG))
  :qid |prog.ax_AcyclicGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (unshared_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v1 v) (edge<Bool> EG v2 v)) (= v1 v2))
      :pattern ((edge<Bool> EG v1 v) (edge<Bool> EG v2 v))
      )))
  :pattern ((unshared_graph<Bool> EG))
  :qid |prog.ax_UnsharedGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (func_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v v1) (edge<Bool> EG v v2)) (= v1 v2))
      :pattern ((edge<Bool> EG v v1) (edge<Bool> EG v v2))
      )))
  :pattern ((func_graph<Bool> EG))
  :qid |prog.ax_FuncGraph|)))
(assert (forall ((EG Set<Edge>) (from Set<$Ref>) (to $Ref)) (!
  (=
    (exists_spath<Bool> EG from to)
    (exists ((f $Ref)) (!
      (and (Set_in f from) (exists_path<Bool> EG f to))
      :pattern ((Set_in f from))
      :pattern ((exists_path<Bool> EG f to))
      )))
  :pattern ((exists_spath<Bool> EG from to))
  :qid |prog.ax_ExistsSetPath|)))
(assert (forall ((g0 Set<$Ref>) (g1 Set<$Ref>)) (!
  (=>
    (Set_equal (Set_intersection g0 g1) (as Set_empty  Set<$Ref>))
    (forall ((r $Ref)) (!
      (=> (and (Set_in r g0) (Set_in r g1)) (Set_in r (as Set_empty  Set<$Ref>)))
      :pattern ((Set_in r g0) (Set_in r g1))
      )))
  :pattern ((Set_intersection g0 g1))
  :qid |prog.ax_SetIntersection|)))
(assert (forall ((g Set<Edge>) (e Edge)) (!
  (=>
    (Set_in e g)
    (= (create_edge<Edge> (edge_pred<Ref> e) (edge_succ<Ref> e)) e))
  :pattern ((Set_in e g))
  :qid |prog.ax_EdgeReverse|)))
(assert (forall ((p $Ref) (s $Ref)) (!
  (and
    (= (edge_pred<Ref> (create_edge<Edge> p s)) p)
    (= (edge_succ<Ref> (create_edge<Edge> p s)) s))
  :pattern ((create_edge<Edge> p s))
  :qid |prog.edge_injectivity|)))
; /field_value_functions_axioms.smt2 [next: Ref]
(assert (forall ((vs $FVF<next>) (ws $FVF<next>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_next vs) ($FVF.domain_next ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_next vs))
            (= ($FVF.lookup_next vs x) ($FVF.lookup_next ws x)))
          :pattern (($FVF.lookup_next vs x) ($FVF.lookup_next ws x))
          :qid |qp.$FVF<next>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<next>To$Snap vs)
              ($SortWrappers.$FVF<next>To$Snap ws)
              )
    :qid |qp.$FVF<next>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_next pm r))
    :pattern (($FVF.perm_next pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_next f r) true)
    :pattern (($FVF.loc_next f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun inv@15@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@16@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@14@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@17@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun inv@27@00 ($Snap Set<$Ref> $Ref $Ref) $Ref)
(declare-fun img@28@00 ($Snap Set<$Ref> $Ref $Ref) Bool)
(declare-fun sm@26@00 ($Snap Set<$Ref> $Ref) $FVF<next>)
(declare-fun sm@29@00 ($Snap Set<$Ref> $Ref) $FVF<next>)
(declare-fun inv@33@00 ($Snap Set<$Ref> $Ref $Ref) $Ref)
(declare-fun img@34@00 ($Snap Set<$Ref> $Ref $Ref) Bool)
(declare-fun sm@35@00 ($Snap Set<$Ref> $Ref) $FVF<next>)
(declare-fun inv@38@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@39@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@37@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@40@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun inv@44@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@45@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@46@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun inv@49@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@50@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@48@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@51@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun inv@54@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@55@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun inv@58@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@59@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun inv@63@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@64@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@56@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@61@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@66@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun inv@69@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@70@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@73@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@74@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@80@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@81@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@84@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@85@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@91@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@92@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@96@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@97@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@103@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@104@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@108@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@109@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@115@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@116@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@120@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@121@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@68@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@71@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@82@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@87@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@94@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@99@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@106@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@111@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@118@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@123@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (= ($$%limited s@$ refs@0@00) ($$ s@$ refs@0@00))
  :pattern (($$ s@$ refs@0@00))
  :qid |quant-u-6620|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  ($$%stateless refs@0@00)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-6621|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) (and
    (forall ((n@13@00 $Ref)) (!
      (=>
        (Set_in n@13@00 refs@0@00)
        (and
          (= (inv@15@00 s@$ refs@0@00 n@13@00) n@13@00)
          (img@16@00 s@$ refs@0@00 n@13@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) n@13@00) n@13@00))
      :qid |quant-u-6631|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@16@00 s@$ refs@0@00 r)
          (Set_in (inv@15@00 s@$ refs@0@00 r) refs@0@00))
        (= (inv@15@00 s@$ refs@0@00 r) r))
      :pattern ((inv@15@00 s@$ refs@0@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@14@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef0|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@16@00 s@$ refs@0@00 r)
          (Set_in (inv@15@00 s@$ refs@0@00 r) refs@0@00))
        (=
          ($FVF.lookup_next (sm@17@00 s@$ refs@0@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r)))
      :pattern (($FVF.lookup_next (sm@17@00 s@$ refs@0@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r))
      :qid |qp.fvfValDef1|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r) r)
      :pattern (($FVF.lookup_next (sm@17@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef2|))
    (=>
      ($$%precondition s@$ refs@0@00)
      (and
        (forall ((p $Ref) (s $Ref)) (!
          (=
            (and
              (Set_in p refs@0@00)
              (and
                (Set_in s refs@0@00)
                (= ($FVF.lookup_next (sm@17@00 s@$ refs@0@00) p) s)))
            (Set_in (create_edge<Edge> p s) result@1@00))
          :pattern ((create_edge<Edge> p s))
          ))
        (forall ((p $Ref) (s $Ref)) (!
          (=>
            (and (Set_in p refs@0@00) (exists_path<Bool> result@1@00 p s))
            (Set_in s refs@0@00))
          :pattern ((Set_in p refs@0@00) (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
          ))
        (forall ((p $Ref) (s $Ref)) (!
          (=>
            (and (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
            (Set_in p refs@0@00))
          :pattern ((Set_in p refs@0@00) (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
          ))))))
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-6633|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-6634|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-6635|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-6636|)))
(assert (forall ((s@$ $Snap) (g@2@00 Set<$Ref>) (root@3@00 $Ref)) (!
  (=
    (is_global_root%limited s@$ g@2@00 root@3@00)
    (is_global_root s@$ g@2@00 root@3@00))
  :pattern ((is_global_root s@$ g@2@00 root@3@00))
  :qid |quant-u-6622|)))
(assert (forall ((s@$ $Snap) (g@2@00 Set<$Ref>) (root@3@00 $Ref)) (!
  (is_global_root%stateless g@2@00 root@3@00)
  :pattern ((is_global_root%limited s@$ g@2@00 root@3@00))
  :qid |quant-u-6623|)))
(assert (forall ((s@$ $Snap) (g@2@00 Set<$Ref>) (root@3@00 $Ref)) (!
  (and
    (forall ((n$0@25@00 $Ref)) (!
      (=>
        (Set_in n$0@25@00 g@2@00)
        (and
          (= (inv@27@00 s@$ g@2@00 root@3@00 n$0@25@00) n$0@25@00)
          (img@28@00 s@$ g@2@00 root@3@00 n$0@25@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n$0@25@00) n$0@25@00))
      :qid |quant-u-6638|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@28@00 s@$ g@2@00 root@3@00 r)
          (Set_in (inv@27@00 s@$ g@2@00 root@3@00 r) g@2@00))
        (= (inv@27@00 s@$ g@2@00 root@3@00 r) r))
      :pattern ((inv@27@00 s@$ g@2@00 root@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@32@00 $Ref)) (!
      (=>
        (Set_in n@32@00 g@2@00)
        (and
          (= (inv@33@00 s@$ g@2@00 root@3@00 n@32@00) n@32@00)
          (img@34@00 s@$ g@2@00 root@3@00 n@32@00)))
      :pattern ((Set_in n@32@00 g@2@00))
      :pattern ((inv@33@00 s@$ g@2@00 root@3@00 n@32@00))
      :pattern ((img@34@00 s@$ g@2@00 root@3@00 n@32@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@34@00 s@$ g@2@00 root@3@00 r)
          (Set_in (inv@33@00 s@$ g@2@00 root@3@00 r) g@2@00))
        (= (inv@33@00 s@$ g@2@00 root@3@00 r) r))
      :pattern ((inv@33@00 s@$ g@2@00 root@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@26@00 s@$ g@2@00 root@3@00) r))
      :qid |qp.fvfResTrgDef3|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@28@00 s@$ g@2@00 root@3@00 r)
          (Set_in (inv@27@00 s@$ g@2@00 root@3@00 r) g@2@00))
        (=
          ($FVF.lookup_next (sm@29@00 s@$ g@2@00 root@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@29@00 s@$ g@2@00 root@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef4|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@29@00 s@$ g@2@00 root@3@00) r))
      :qid |qp.fvfResTrgDef5|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@35@00 s@$ g@2@00 root@3@00)))
          (and
            (Set_in (inv@33@00 s@$ g@2@00 root@3@00 r) g@2@00)
            (img@34@00 s@$ g@2@00 root@3@00 r)))
        (=>
          (and
            (Set_in (inv@33@00 s@$ g@2@00 root@3@00 r) g@2@00)
            (img@34@00 s@$ g@2@00 root@3@00 r))
          (Set_in r ($FVF.domain_next (sm@35@00 s@$ g@2@00 root@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@35@00 s@$ g@2@00 root@3@00))))
      :qid |qp.fvfDomDef8|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@33@00 s@$ g@2@00 root@3@00 r) g@2@00)
            (img@34@00 s@$ g@2@00 root@3@00 r))
          (and
            (img@28@00 s@$ g@2@00 root@3@00 r)
            (Set_in (inv@27@00 s@$ g@2@00 root@3@00 r) g@2@00)))
        (=
          ($FVF.lookup_next (sm@35@00 s@$ g@2@00 root@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@35@00 s@$ g@2@00 root@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef6|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@35@00 s@$ g@2@00 root@3@00) r))
      :qid |qp.fvfResTrgDef7|))
    (=>
      (is_global_root%precondition s@$ g@2@00 root@3@00)
      (=
        (is_global_root s@$ g@2@00 root@3@00)
        (forall ((n $Ref)) (!
          (=>
            (Set_in n g@2@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g@2@00 root@3@00)) g@2@00) root@3@00 n))
          :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g@2@00 root@3@00)) g@2@00) root@3@00 n))
          )))))
  :pattern ((is_global_root s@$ g@2@00 root@3@00))
  :qid |quant-u-6643|)))
(assert (forall ((s@$ $Snap) (g@2@00 Set<$Ref>) (root@3@00 $Ref)) (!
  (=>
    (is_global_root%precondition s@$ g@2@00 root@3@00)
    (forall ((n $Ref)) (!
      (=>
        (Set_in n g@2@00)
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g@2@00 root@3@00)) g@2@00))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g@2@00 root@3@00)) g@2@00) root@3@00 n))
      )))
  :pattern ((is_global_root s@$ g@2@00 root@3@00))
  :qid |quant-u-6644|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>) (roots@6@00 Set<$Ref>)) (!
  (=
    (is_global_sroot%limited s@$ g@5@00 roots@6@00)
    (is_global_sroot s@$ g@5@00 roots@6@00))
  :pattern ((is_global_sroot s@$ g@5@00 roots@6@00))
  :qid |quant-u-6624|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>) (roots@6@00 Set<$Ref>)) (!
  (is_global_sroot%stateless g@5@00 roots@6@00)
  :pattern ((is_global_sroot%limited s@$ g@5@00 roots@6@00))
  :qid |quant-u-6625|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>) (roots@6@00 Set<$Ref>)) (!
  (and
    (forall ((n$0@36@00 $Ref)) (!
      (=>
        (Set_in n$0@36@00 g@5@00)
        (and
          (= (inv@38@00 s@$ g@5@00 roots@6@00 n$0@36@00) n$0@36@00)
          (img@39@00 s@$ g@5@00 roots@6@00 n$0@36@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n$0@36@00) n$0@36@00))
      :qid |quant-u-6646|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@39@00 s@$ g@5@00 roots@6@00 r)
          (Set_in (inv@38@00 s@$ g@5@00 roots@6@00 r) g@5@00))
        (= (inv@38@00 s@$ g@5@00 roots@6@00 r) r))
      :pattern ((inv@38@00 s@$ g@5@00 roots@6@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@43@00 $Ref)) (!
      (=>
        (Set_in n@43@00 g@5@00)
        (and
          (= (inv@44@00 s@$ g@5@00 roots@6@00 n@43@00) n@43@00)
          (img@45@00 s@$ g@5@00 roots@6@00 n@43@00)))
      :pattern ((Set_in n@43@00 g@5@00))
      :pattern ((inv@44@00 s@$ g@5@00 roots@6@00 n@43@00))
      :pattern ((img@45@00 s@$ g@5@00 roots@6@00 n@43@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@45@00 s@$ g@5@00 roots@6@00 r)
          (Set_in (inv@44@00 s@$ g@5@00 roots@6@00 r) g@5@00))
        (= (inv@44@00 s@$ g@5@00 roots@6@00 r) r))
      :pattern ((inv@44@00 s@$ g@5@00 roots@6@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@37@00 s@$ g@5@00 roots@6@00) r))
      :qid |qp.fvfResTrgDef9|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@39@00 s@$ g@5@00 roots@6@00 r)
          (Set_in (inv@38@00 s@$ g@5@00 roots@6@00 r) g@5@00))
        (=
          ($FVF.lookup_next (sm@40@00 s@$ g@5@00 roots@6@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@40@00 s@$ g@5@00 roots@6@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef10|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@40@00 s@$ g@5@00 roots@6@00) r))
      :qid |qp.fvfResTrgDef11|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@46@00 s@$ g@5@00 roots@6@00)))
          (and
            (Set_in (inv@44@00 s@$ g@5@00 roots@6@00 r) g@5@00)
            (img@45@00 s@$ g@5@00 roots@6@00 r)))
        (=>
          (and
            (Set_in (inv@44@00 s@$ g@5@00 roots@6@00 r) g@5@00)
            (img@45@00 s@$ g@5@00 roots@6@00 r))
          (Set_in r ($FVF.domain_next (sm@46@00 s@$ g@5@00 roots@6@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@46@00 s@$ g@5@00 roots@6@00))))
      :qid |qp.fvfDomDef14|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@44@00 s@$ g@5@00 roots@6@00 r) g@5@00)
            (img@45@00 s@$ g@5@00 roots@6@00 r))
          (and
            (img@39@00 s@$ g@5@00 roots@6@00 r)
            (Set_in (inv@38@00 s@$ g@5@00 roots@6@00 r) g@5@00)))
        (=
          ($FVF.lookup_next (sm@46@00 s@$ g@5@00 roots@6@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@46@00 s@$ g@5@00 roots@6@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef12|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@46@00 s@$ g@5@00 roots@6@00) r))
      :qid |qp.fvfResTrgDef13|))
    (=>
      (is_global_sroot%precondition s@$ g@5@00 roots@6@00)
      (=
        (is_global_sroot s@$ g@5@00 roots@6@00)
        (forall ((n $Ref)) (!
          (=>
            (Set_in n g@5@00)
            (exists_spath<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@46@00 s@$ g@5@00 roots@6@00)) g@5@00) roots@6@00 n))
          :pattern ((exists_spath<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@46@00 s@$ g@5@00 roots@6@00)) g@5@00) roots@6@00 n))
          )))))
  :pattern ((is_global_sroot s@$ g@5@00 roots@6@00))
  :qid |quant-u-6651|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>) (roots@6@00 Set<$Ref>)) (!
  (=>
    (is_global_sroot%precondition s@$ g@5@00 roots@6@00)
    (forall ((n $Ref)) (!
      (=>
        (Set_in n g@5@00)
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@46@00 s@$ g@5@00 roots@6@00)) g@5@00))
      :pattern ((exists_spath<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@46@00 s@$ g@5@00 roots@6@00)) g@5@00) roots@6@00 n))
      )))
  :pattern ((is_global_sroot s@$ g@5@00 roots@6@00))
  :qid |quant-u-6652|)))
(assert (forall ((s@$ $Snap) (g@8@00 Set<$Ref>)) (!
  (= (acyclic_list_segment%limited s@$ g@8@00) (acyclic_list_segment s@$ g@8@00))
  :pattern ((acyclic_list_segment s@$ g@8@00))
  :qid |quant-u-6626|)))
(assert (forall ((s@$ $Snap) (g@8@00 Set<$Ref>)) (!
  (acyclic_list_segment%stateless g@8@00)
  :pattern ((acyclic_list_segment%limited s@$ g@8@00))
  :qid |quant-u-6627|)))
(assert (forall ((s@$ $Snap) (g@8@00 Set<$Ref>)) (!
  (and
    (forall ((n@47@00 $Ref)) (!
      (=>
        (Set_in n@47@00 g@8@00)
        (and
          (= (inv@49@00 s@$ g@8@00 n@47@00) n@47@00)
          (img@50@00 s@$ g@8@00 n@47@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n@47@00) n@47@00))
      :qid |quant-u-6654|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@50@00 s@$ g@8@00 r) (Set_in (inv@49@00 s@$ g@8@00 r) g@8@00))
        (= (inv@49@00 s@$ g@8@00 r) r))
      :pattern ((inv@49@00 s@$ g@8@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@53@00 $Ref)) (!
      (=>
        (Set_in n@53@00 g@8@00)
        (and
          (= (inv@54@00 s@$ g@8@00 n@53@00) n@53@00)
          (img@55@00 s@$ g@8@00 n@53@00)))
      :pattern ((Set_in n@53@00 g@8@00))
      :pattern ((inv@54@00 s@$ g@8@00 n@53@00))
      :pattern ((img@55@00 s@$ g@8@00 n@53@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@55@00 s@$ g@8@00 r) (Set_in (inv@54@00 s@$ g@8@00 r) g@8@00))
        (= (inv@54@00 s@$ g@8@00 r) r))
      :pattern ((inv@54@00 s@$ g@8@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@57@00 $Ref)) (!
      (=>
        (Set_in n@57@00 g@8@00)
        (and
          (= (inv@58@00 s@$ g@8@00 n@57@00) n@57@00)
          (img@59@00 s@$ g@8@00 n@57@00)))
      :pattern ((Set_in n@57@00 g@8@00))
      :pattern ((inv@58@00 s@$ g@8@00 n@57@00))
      :pattern ((img@59@00 s@$ g@8@00 n@57@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@59@00 s@$ g@8@00 r) (Set_in (inv@58@00 s@$ g@8@00 r) g@8@00))
        (= (inv@58@00 s@$ g@8@00 r) r))
      :pattern ((inv@58@00 s@$ g@8@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@62@00 $Ref)) (!
      (=>
        (Set_in n@62@00 g@8@00)
        (and
          (= (inv@63@00 s@$ g@8@00 n@62@00) n@62@00)
          (img@64@00 s@$ g@8@00 n@62@00)))
      :pattern ((Set_in n@62@00 g@8@00))
      :pattern ((inv@63@00 s@$ g@8@00 n@62@00))
      :pattern ((img@64@00 s@$ g@8@00 n@62@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@64@00 s@$ g@8@00 r) (Set_in (inv@63@00 s@$ g@8@00 r) g@8@00))
        (= (inv@63@00 s@$ g@8@00 r) r))
      :pattern ((inv@63@00 s@$ g@8@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@48@00 s@$ g@8@00) r))
      :qid |qp.fvfResTrgDef15|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@50@00 s@$ g@8@00 r) (Set_in (inv@49@00 s@$ g@8@00 r) g@8@00))
        (=
          ($FVF.lookup_next (sm@51@00 s@$ g@8@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@51@00 s@$ g@8@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef16|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@51@00 s@$ g@8@00) r))
      :qid |qp.fvfResTrgDef17|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@56@00 s@$ g@8@00)))
          (and (Set_in (inv@54@00 s@$ g@8@00 r) g@8@00) (img@55@00 s@$ g@8@00 r)))
        (=>
          (and (Set_in (inv@54@00 s@$ g@8@00 r) g@8@00) (img@55@00 s@$ g@8@00 r))
          (Set_in r ($FVF.domain_next (sm@56@00 s@$ g@8@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@56@00 s@$ g@8@00))))
      :qid |qp.fvfDomDef20|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and (Set_in (inv@54@00 s@$ g@8@00 r) g@8@00) (img@55@00 s@$ g@8@00 r))
          (and (img@50@00 s@$ g@8@00 r) (Set_in (inv@49@00 s@$ g@8@00 r) g@8@00)))
        (=
          ($FVF.lookup_next (sm@56@00 s@$ g@8@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@56@00 s@$ g@8@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef18|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@56@00 s@$ g@8@00) r))
      :qid |qp.fvfResTrgDef19|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@61@00 s@$ g@8@00)))
          (and (Set_in (inv@58@00 s@$ g@8@00 r) g@8@00) (img@59@00 s@$ g@8@00 r)))
        (=>
          (and (Set_in (inv@58@00 s@$ g@8@00 r) g@8@00) (img@59@00 s@$ g@8@00 r))
          (Set_in r ($FVF.domain_next (sm@61@00 s@$ g@8@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@61@00 s@$ g@8@00))))
      :qid |qp.fvfDomDef25|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and (Set_in (inv@58@00 s@$ g@8@00 r) g@8@00) (img@59@00 s@$ g@8@00 r))
          (and (img@50@00 s@$ g@8@00 r) (Set_in (inv@49@00 s@$ g@8@00 r) g@8@00)))
        (=
          ($FVF.lookup_next (sm@61@00 s@$ g@8@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@61@00 s@$ g@8@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef23|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@61@00 s@$ g@8@00) r))
      :qid |qp.fvfResTrgDef24|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@66@00 s@$ g@8@00)))
          (and (Set_in (inv@63@00 s@$ g@8@00 r) g@8@00) (img@64@00 s@$ g@8@00 r)))
        (=>
          (and (Set_in (inv@63@00 s@$ g@8@00 r) g@8@00) (img@64@00 s@$ g@8@00 r))
          (Set_in r ($FVF.domain_next (sm@66@00 s@$ g@8@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@66@00 s@$ g@8@00))))
      :qid |qp.fvfDomDef30|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and (Set_in (inv@63@00 s@$ g@8@00 r) g@8@00) (img@64@00 s@$ g@8@00 r))
          (and (img@50@00 s@$ g@8@00 r) (Set_in (inv@49@00 s@$ g@8@00 r) g@8@00)))
        (=
          ($FVF.lookup_next (sm@66@00 s@$ g@8@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@66@00 s@$ g@8@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef28|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@66@00 s@$ g@8@00) r))
      :qid |qp.fvfResTrgDef29|))
    (=>
      (acyclic_list_segment%precondition s@$ g@8@00)
      (=
        (acyclic_list_segment s@$ g@8@00)
        (and
          (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g@8@00)) g@8@00))
          (and
            (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g@8@00)) g@8@00))
            (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g@8@00)) g@8@00)))))))
  :pattern ((acyclic_list_segment s@$ g@8@00))
  :qid |quant-u-6665|)))
(assert (forall ((s@$ $Snap) (g@8@00 Set<$Ref>)) (!
  (=>
    (acyclic_list_segment%precondition s@$ g@8@00)
    (and
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g@8@00)) g@8@00)
      (=>
        (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g@8@00)) g@8@00))
        (and
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g@8@00)) g@8@00)
          (=>
            (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g@8@00)) g@8@00))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g@8@00)) g@8@00))))))
  :pattern ((acyclic_list_segment s@$ g@8@00))
  :qid |quant-u-6666|)))
(assert (forall ((s@$ $Snap) (g0@10@00 Set<$Ref>) (g1@11@00 Set<$Ref>)) (!
  (=
    (apply_TCFraming%limited s@$ g0@10@00 g1@11@00)
    (apply_TCFraming s@$ g0@10@00 g1@11@00))
  :pattern ((apply_TCFraming s@$ g0@10@00 g1@11@00))
  :qid |quant-u-6628|)))
(assert (forall ((s@$ $Snap) (g0@10@00 Set<$Ref>) (g1@11@00 Set<$Ref>)) (!
  (apply_TCFraming%stateless g0@10@00 g1@11@00)
  :pattern ((apply_TCFraming%limited s@$ g0@10@00 g1@11@00))
  :qid |quant-u-6629|)))
(assert (forall ((s@$ $Snap) (g0@10@00 Set<$Ref>) (g1@11@00 Set<$Ref>)) (!
  (let ((result@12@00 (apply_TCFraming%limited s@$ g0@10@00 g1@11@00))) (and
    (forall ((n@67@00 $Ref)) (!
      (=>
        (Set_in n@67@00 g0@10@00)
        (and
          (= (inv@69@00 s@$ g0@10@00 g1@11@00 n@67@00) n@67@00)
          (img@70@00 s@$ g0@10@00 g1@11@00 n@67@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) n@67@00) n@67@00))
      :qid |quant-u-6668|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@70@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@69@00 s@$ g0@10@00 g1@11@00 r) g0@10@00))
        (= (inv@69@00 s@$ g0@10@00 g1@11@00 r) r))
      :pattern ((inv@69@00 s@$ g0@10@00 g1@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@72@00 $Ref)) (!
      (=>
        (Set_in n@72@00 g1@11@00)
        (and
          (= (inv@73@00 s@$ g0@10@00 g1@11@00 n@72@00) n@72@00)
          (img@74@00 s@$ g0@10@00 g1@11@00 n@72@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n@72@00) n@72@00))
      :qid |quant-u-6671|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@74@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@73@00 s@$ g0@10@00 g1@11@00 r) g1@11@00))
        (= (inv@73@00 s@$ g0@10@00 g1@11@00 r) r))
      :pattern ((inv@73@00 s@$ g0@10@00 g1@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@79@00 $Ref)) (!
      (=>
        (Set_in n@79@00 g0@10@00)
        (and
          (= (inv@80@00 s@$ g0@10@00 g1@11@00 n@79@00) n@79@00)
          (img@81@00 s@$ g0@10@00 g1@11@00 n@79@00)))
      :pattern ((Set_in n@79@00 g0@10@00))
      :pattern ((inv@80@00 s@$ g0@10@00 g1@11@00 n@79@00))
      :pattern ((img@81@00 s@$ g0@10@00 g1@11@00 n@79@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@81@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@80@00 s@$ g0@10@00 g1@11@00 r) g0@10@00))
        (= (inv@80@00 s@$ g0@10@00 g1@11@00 r) r))
      :pattern ((inv@80@00 s@$ g0@10@00 g1@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@83@00 $Ref)) (!
      (=>
        (Set_in n@83@00 (Set_union g0@10@00 g1@11@00))
        (and
          (= (inv@84@00 s@$ g0@10@00 g1@11@00 n@83@00) n@83@00)
          (img@85@00 s@$ g0@10@00 g1@11@00 n@83@00)))
      :pattern ((Set_in n@83@00 (Set_union g0@10@00 g1@11@00)))
      :pattern ((inv@84@00 s@$ g0@10@00 g1@11@00 n@83@00))
      :pattern ((img@85@00 s@$ g0@10@00 g1@11@00 n@83@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@85@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@84@00 s@$ g0@10@00 g1@11@00 r) (Set_union g0@10@00 g1@11@00)))
        (= (inv@84@00 s@$ g0@10@00 g1@11@00 r) r))
      :pattern ((inv@84@00 s@$ g0@10@00 g1@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@90@00 $Ref)) (!
      (=>
        (Set_in n@90@00 g1@11@00)
        (and
          (= (inv@91@00 s@$ g0@10@00 g1@11@00 n@90@00) n@90@00)
          (img@92@00 s@$ g0@10@00 g1@11@00 n@90@00)))
      :pattern ((Set_in n@90@00 g1@11@00))
      :pattern ((inv@91@00 s@$ g0@10@00 g1@11@00 n@90@00))
      :pattern ((img@92@00 s@$ g0@10@00 g1@11@00 n@90@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@92@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@91@00 s@$ g0@10@00 g1@11@00 r) g1@11@00))
        (= (inv@91@00 s@$ g0@10@00 g1@11@00 r) r))
      :pattern ((inv@91@00 s@$ g0@10@00 g1@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@95@00 $Ref)) (!
      (=>
        (Set_in n@95@00 (Set_union g1@11@00 g0@10@00))
        (and
          (= (inv@96@00 s@$ g0@10@00 g1@11@00 n@95@00) n@95@00)
          (img@97@00 s@$ g0@10@00 g1@11@00 n@95@00)))
      :pattern ((Set_in n@95@00 (Set_union g1@11@00 g0@10@00)))
      :pattern ((inv@96@00 s@$ g0@10@00 g1@11@00 n@95@00))
      :pattern ((img@97@00 s@$ g0@10@00 g1@11@00 n@95@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@97@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@96@00 s@$ g0@10@00 g1@11@00 r) (Set_union g1@11@00 g0@10@00)))
        (= (inv@96@00 s@$ g0@10@00 g1@11@00 r) r))
      :pattern ((inv@96@00 s@$ g0@10@00 g1@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@102@00 $Ref)) (!
      (=>
        (Set_in n@102@00 g0@10@00)
        (and
          (= (inv@103@00 s@$ g0@10@00 g1@11@00 n@102@00) n@102@00)
          (img@104@00 s@$ g0@10@00 g1@11@00 n@102@00)))
      :pattern ((Set_in n@102@00 g0@10@00))
      :pattern ((inv@103@00 s@$ g0@10@00 g1@11@00 n@102@00))
      :pattern ((img@104@00 s@$ g0@10@00 g1@11@00 n@102@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@104@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@103@00 s@$ g0@10@00 g1@11@00 r) g0@10@00))
        (= (inv@103@00 s@$ g0@10@00 g1@11@00 r) r))
      :pattern ((inv@103@00 s@$ g0@10@00 g1@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@107@00 $Ref)) (!
      (=>
        (Set_in n@107@00 (Set_union g0@10@00 g1@11@00))
        (and
          (= (inv@108@00 s@$ g0@10@00 g1@11@00 n@107@00) n@107@00)
          (img@109@00 s@$ g0@10@00 g1@11@00 n@107@00)))
      :pattern ((Set_in n@107@00 (Set_union g0@10@00 g1@11@00)))
      :pattern ((inv@108@00 s@$ g0@10@00 g1@11@00 n@107@00))
      :pattern ((img@109@00 s@$ g0@10@00 g1@11@00 n@107@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@109@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@108@00 s@$ g0@10@00 g1@11@00 r) (Set_union g0@10@00 g1@11@00)))
        (= (inv@108@00 s@$ g0@10@00 g1@11@00 r) r))
      :pattern ((inv@108@00 s@$ g0@10@00 g1@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@114@00 $Ref)) (!
      (=>
        (Set_in n@114@00 g1@11@00)
        (and
          (= (inv@115@00 s@$ g0@10@00 g1@11@00 n@114@00) n@114@00)
          (img@116@00 s@$ g0@10@00 g1@11@00 n@114@00)))
      :pattern ((Set_in n@114@00 g1@11@00))
      :pattern ((inv@115@00 s@$ g0@10@00 g1@11@00 n@114@00))
      :pattern ((img@116@00 s@$ g0@10@00 g1@11@00 n@114@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@116@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@115@00 s@$ g0@10@00 g1@11@00 r) g1@11@00))
        (= (inv@115@00 s@$ g0@10@00 g1@11@00 r) r))
      :pattern ((inv@115@00 s@$ g0@10@00 g1@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@119@00 $Ref)) (!
      (=>
        (Set_in n@119@00 (Set_union g1@11@00 g0@10@00))
        (and
          (= (inv@120@00 s@$ g0@10@00 g1@11@00 n@119@00) n@119@00)
          (img@121@00 s@$ g0@10@00 g1@11@00 n@119@00)))
      :pattern ((Set_in n@119@00 (Set_union g1@11@00 g0@10@00)))
      :pattern ((inv@120@00 s@$ g0@10@00 g1@11@00 n@119@00))
      :pattern ((img@121@00 s@$ g0@10@00 g1@11@00 n@119@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@121@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@120@00 s@$ g0@10@00 g1@11@00 r) (Set_union g1@11@00 g0@10@00)))
        (= (inv@120@00 s@$ g0@10@00 g1@11@00 r) r))
      :pattern ((inv@120@00 s@$ g0@10@00 g1@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@68@00 s@$ g0@10@00 g1@11@00) r))
      :qid |qp.fvfResTrgDef31|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@70@00 s@$ g0@10@00 g1@11@00 r)
          (Set_in (inv@69@00 s@$ g0@10@00 g1@11@00 r) g0@10@00))
        (=
          ($FVF.lookup_next (sm@71@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@71@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef32|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
      :pattern (($FVF.lookup_next (sm@71@00 s@$ g0@10@00 g1@11@00) r))
      :qid |qp.fvfResTrgDef33|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@82@00 s@$ g0@10@00 g1@11@00)))
          (and
            (Set_in (inv@80@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)
            (img@81@00 s@$ g0@10@00 g1@11@00 r)))
        (=>
          (and
            (Set_in (inv@80@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)
            (img@81@00 s@$ g0@10@00 g1@11@00 r))
          (Set_in r ($FVF.domain_next (sm@82@00 s@$ g0@10@00 g1@11@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@82@00 s@$ g0@10@00 g1@11@00))))
      :qid |qp.fvfDomDef40|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@80@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)
            (img@81@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@70@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@69@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)))
        (=
          ($FVF.lookup_next (sm@82@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@82@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef37|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@80@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)
            (img@81@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@74@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@73@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)))
        (=
          ($FVF.lookup_next (sm@82@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@82@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef38|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@82@00 s@$ g0@10@00 g1@11@00) r))
      :qid |qp.fvfResTrgDef39|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@87@00 s@$ g0@10@00 g1@11@00)))
          (and
            (Set_in (inv@84@00 s@$ g0@10@00 g1@11@00 r) (Set_union g0@10@00 g1@11@00))
            (img@85@00 s@$ g0@10@00 g1@11@00 r)))
        (=>
          (and
            (Set_in (inv@84@00 s@$ g0@10@00 g1@11@00 r) (Set_union g0@10@00 g1@11@00))
            (img@85@00 s@$ g0@10@00 g1@11@00 r))
          (Set_in r ($FVF.domain_next (sm@87@00 s@$ g0@10@00 g1@11@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@87@00 s@$ g0@10@00 g1@11@00))))
      :qid |qp.fvfDomDef47|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@84@00 s@$ g0@10@00 g1@11@00 r) (Set_union g0@10@00 g1@11@00))
            (img@85@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@70@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@69@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)))
        (=
          ($FVF.lookup_next (sm@87@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@87@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef44|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@84@00 s@$ g0@10@00 g1@11@00 r) (Set_union g0@10@00 g1@11@00))
            (img@85@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@74@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@73@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)))
        (=
          ($FVF.lookup_next (sm@87@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@87@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef45|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@87@00 s@$ g0@10@00 g1@11@00) r))
      :qid |qp.fvfResTrgDef46|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@94@00 s@$ g0@10@00 g1@11@00)))
          (and
            (Set_in (inv@91@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)
            (img@92@00 s@$ g0@10@00 g1@11@00 r)))
        (=>
          (and
            (Set_in (inv@91@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)
            (img@92@00 s@$ g0@10@00 g1@11@00 r))
          (Set_in r ($FVF.domain_next (sm@94@00 s@$ g0@10@00 g1@11@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@94@00 s@$ g0@10@00 g1@11@00))))
      :qid |qp.fvfDomDef54|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@91@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)
            (img@92@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@70@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@69@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)))
        (=
          ($FVF.lookup_next (sm@94@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@94@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef51|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@91@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)
            (img@92@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@74@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@73@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)))
        (=
          ($FVF.lookup_next (sm@94@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@94@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef52|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@94@00 s@$ g0@10@00 g1@11@00) r))
      :qid |qp.fvfResTrgDef53|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@99@00 s@$ g0@10@00 g1@11@00)))
          (and
            (Set_in (inv@96@00 s@$ g0@10@00 g1@11@00 r) (Set_union g1@11@00 g0@10@00))
            (img@97@00 s@$ g0@10@00 g1@11@00 r)))
        (=>
          (and
            (Set_in (inv@96@00 s@$ g0@10@00 g1@11@00 r) (Set_union g1@11@00 g0@10@00))
            (img@97@00 s@$ g0@10@00 g1@11@00 r))
          (Set_in r ($FVF.domain_next (sm@99@00 s@$ g0@10@00 g1@11@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@99@00 s@$ g0@10@00 g1@11@00))))
      :qid |qp.fvfDomDef61|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@96@00 s@$ g0@10@00 g1@11@00 r) (Set_union g1@11@00 g0@10@00))
            (img@97@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@70@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@69@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)))
        (=
          ($FVF.lookup_next (sm@99@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@99@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef58|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@96@00 s@$ g0@10@00 g1@11@00 r) (Set_union g1@11@00 g0@10@00))
            (img@97@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@74@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@73@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)))
        (=
          ($FVF.lookup_next (sm@99@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@99@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef59|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@99@00 s@$ g0@10@00 g1@11@00) r))
      :qid |qp.fvfResTrgDef60|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@106@00 s@$ g0@10@00 g1@11@00)))
          (and
            (Set_in (inv@103@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)
            (img@104@00 s@$ g0@10@00 g1@11@00 r)))
        (=>
          (and
            (Set_in (inv@103@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)
            (img@104@00 s@$ g0@10@00 g1@11@00 r))
          (Set_in r ($FVF.domain_next (sm@106@00 s@$ g0@10@00 g1@11@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@106@00 s@$ g0@10@00 g1@11@00))))
      :qid |qp.fvfDomDef68|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@103@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)
            (img@104@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@70@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@69@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)))
        (=
          ($FVF.lookup_next (sm@106@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@106@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef65|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@103@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)
            (img@104@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@74@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@73@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)))
        (=
          ($FVF.lookup_next (sm@106@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@106@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef66|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@106@00 s@$ g0@10@00 g1@11@00) r))
      :qid |qp.fvfResTrgDef67|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@111@00 s@$ g0@10@00 g1@11@00)))
          (and
            (Set_in (inv@108@00 s@$ g0@10@00 g1@11@00 r) (Set_union g0@10@00 g1@11@00))
            (img@109@00 s@$ g0@10@00 g1@11@00 r)))
        (=>
          (and
            (Set_in (inv@108@00 s@$ g0@10@00 g1@11@00 r) (Set_union g0@10@00 g1@11@00))
            (img@109@00 s@$ g0@10@00 g1@11@00 r))
          (Set_in r ($FVF.domain_next (sm@111@00 s@$ g0@10@00 g1@11@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@111@00 s@$ g0@10@00 g1@11@00))))
      :qid |qp.fvfDomDef75|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@108@00 s@$ g0@10@00 g1@11@00 r) (Set_union g0@10@00 g1@11@00))
            (img@109@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@70@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@69@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)))
        (=
          ($FVF.lookup_next (sm@111@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@111@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef72|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@108@00 s@$ g0@10@00 g1@11@00 r) (Set_union g0@10@00 g1@11@00))
            (img@109@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@74@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@73@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)))
        (=
          ($FVF.lookup_next (sm@111@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@111@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef73|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@111@00 s@$ g0@10@00 g1@11@00) r))
      :qid |qp.fvfResTrgDef74|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@118@00 s@$ g0@10@00 g1@11@00)))
          (and
            (Set_in (inv@115@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)
            (img@116@00 s@$ g0@10@00 g1@11@00 r)))
        (=>
          (and
            (Set_in (inv@115@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)
            (img@116@00 s@$ g0@10@00 g1@11@00 r))
          (Set_in r ($FVF.domain_next (sm@118@00 s@$ g0@10@00 g1@11@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@118@00 s@$ g0@10@00 g1@11@00))))
      :qid |qp.fvfDomDef82|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@115@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)
            (img@116@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@70@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@69@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)))
        (=
          ($FVF.lookup_next (sm@118@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@118@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef79|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@115@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)
            (img@116@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@74@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@73@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)))
        (=
          ($FVF.lookup_next (sm@118@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@118@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef80|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@118@00 s@$ g0@10@00 g1@11@00) r))
      :qid |qp.fvfResTrgDef81|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@123@00 s@$ g0@10@00 g1@11@00)))
          (and
            (Set_in (inv@120@00 s@$ g0@10@00 g1@11@00 r) (Set_union g1@11@00 g0@10@00))
            (img@121@00 s@$ g0@10@00 g1@11@00 r)))
        (=>
          (and
            (Set_in (inv@120@00 s@$ g0@10@00 g1@11@00 r) (Set_union g1@11@00 g0@10@00))
            (img@121@00 s@$ g0@10@00 g1@11@00 r))
          (Set_in r ($FVF.domain_next (sm@123@00 s@$ g0@10@00 g1@11@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@123@00 s@$ g0@10@00 g1@11@00))))
      :qid |qp.fvfDomDef89|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@120@00 s@$ g0@10@00 g1@11@00 r) (Set_union g1@11@00 g0@10@00))
            (img@121@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@70@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@69@00 s@$ g0@10@00 g1@11@00 r) g0@10@00)))
        (=
          ($FVF.lookup_next (sm@123@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@123@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef86|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@120@00 s@$ g0@10@00 g1@11@00 r) (Set_union g1@11@00 g0@10@00))
            (img@121@00 s@$ g0@10@00 g1@11@00 r))
          (and
            (img@74@00 s@$ g0@10@00 g1@11@00 r)
            (Set_in (inv@73@00 s@$ g0@10@00 g1@11@00 r) g1@11@00)))
        (=
          ($FVF.lookup_next (sm@123@00 s@$ g0@10@00 g1@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@123@00 s@$ g0@10@00 g1@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef87|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@123@00 s@$ g0@10@00 g1@11@00) r))
      :qid |qp.fvfResTrgDef88|))
    (=>
      (apply_TCFraming%precondition s@$ g0@10@00 g1@11@00)
      (and
        (Set_equal (Set_union g0@10@00 g1@11@00) (Set_union g1@11@00 g0@10@00))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g0@10@00)
              (and
                (Set_in v g0@10@00)
                (exists_path<Bool> ($$ (ite
                  (Set_in v g0@10@00)
                  (ite
                    (Set_in u g0@10@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v)))
            (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g0@10@00)
                (and
                  (Set_in v g0@10@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g0@10@00)
            (ite
              (Set_in u g0@10@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@10@00)
              (and
                (Set_in v g0@10@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g1@11@00)
              (and
                (Set_in v g1@11@00)
                (exists_path<Bool> ($$ (ite
                  (Set_in v g1@11@00)
                  (ite
                    (Set_in u g1@11@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v)))
            (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g1@11@00)
                (and
                  (Set_in v g1@11@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g1@11@00)
            (ite
              (Set_in u g1@11@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@11@00)
              (and
                (Set_in v g1@11@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g0@10@00)
              (and
                (Set_in v g0@10@00)
                (not
                  (exists_path<Bool> ($$ (ite
                    (Set_in v g0@10@00)
                    (ite
                      (Set_in u g0@10@00)
                      ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
                      ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
                    ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v))))
            (not
              (exists_path<Bool> ($$ (ite
                (and
                  (Set_in u g0@10@00)
                  (and
                    (Set_in v g0@10@00)
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
                ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
                ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)) u v)))
          :pattern ((Set_in u g0@10@00) (Set_in v g0@10@00))
          :pattern ((Set_in u g0@10@00) (exists_path<Bool> ($$ (ite
            (Set_in v g0@10@00)
            (ite
              (Set_in u g0@10@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v))
          :pattern ((Set_in u g0@10@00) (exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@10@00)
              (and
                (Set_in v g0@10@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)) u v))
          :pattern ((Set_in v g0@10@00) (exists_path<Bool> ($$ (ite
            (Set_in v g0@10@00)
            (ite
              (Set_in u g0@10@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v))
          :pattern ((Set_in v g0@10@00) (exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@10@00)
              (and
                (Set_in v g0@10@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g0@10@00)
            (ite
              (Set_in u g0@10@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@10@00)
              (and
                (Set_in v g0@10@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g1@11@00)
              (and
                (Set_in v g1@11@00)
                (not
                  (exists_path<Bool> ($$ (ite
                    (Set_in v g1@11@00)
                    (ite
                      (Set_in u g1@11@00)
                      ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
                      ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
                    ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v))))
            (not
              (exists_path<Bool> ($$ (ite
                (and
                  (Set_in u g1@11@00)
                  (and
                    (Set_in v g1@11@00)
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
                ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
                ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)) u v)))
          :pattern ((Set_in u g1@11@00) (Set_in v g1@11@00))
          :pattern ((Set_in u g1@11@00) (exists_path<Bool> ($$ (ite
            (Set_in v g1@11@00)
            (ite
              (Set_in u g1@11@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v))
          :pattern ((Set_in u g1@11@00) (exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@11@00)
              (and
                (Set_in v g1@11@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)) u v))
          :pattern ((Set_in v g1@11@00) (exists_path<Bool> ($$ (ite
            (Set_in v g1@11@00)
            (ite
              (Set_in u g1@11@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v))
          :pattern ((Set_in v g1@11@00) (exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@11@00)
              (and
                (Set_in v g1@11@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g1@11@00)
            (ite
              (Set_in u g1@11@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@11@00)
              (and
                (Set_in v g1@11@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)) u v))
          ))))))
  :pattern ((apply_TCFraming%limited s@$ g0@10@00 g1@11@00))
  :qid |quant-u-6698|)))
; WARNING: (2017,11): 'if' cannot be used in patterns.
; WARNING: (2017,11): 'if' cannot be used in patterns.
; WARNING: (2017,11): 'and' cannot be used in patterns.
; WARNING: (2017,11): 'and' cannot be used in patterns.
; WARNING: (2017,11): 'if' cannot be used in patterns.
; WARNING: (2054,11): 'if' cannot be used in patterns.
; WARNING: (2054,11): 'if' cannot be used in patterns.
; WARNING: (2054,11): 'and' cannot be used in patterns.
; WARNING: (2054,11): 'and' cannot be used in patterns.
; WARNING: (2054,11): 'if' cannot be used in patterns.
; WARNING: (2124,11): 'if' cannot be used in patterns.
; WARNING: (2124,11): 'if' cannot be used in patterns.
; WARNING: (2124,11): 'and' cannot be used in patterns.
; WARNING: (2124,11): 'and' cannot be used in patterns.
; WARNING: (2124,11): 'if' cannot be used in patterns.
; WARNING: (2124,11): 'if' cannot be used in patterns.
; WARNING: (2124,11): 'if' cannot be used in patterns.
; WARNING: (2124,11): 'and' cannot be used in patterns.
; WARNING: (2124,11): 'and' cannot be used in patterns.
; WARNING: (2124,11): 'if' cannot be used in patterns.
; WARNING: (2124,11): 'if' cannot be used in patterns.
; WARNING: (2124,11): 'if' cannot be used in patterns.
; WARNING: (2124,11): 'and' cannot be used in patterns.
; WARNING: (2124,11): 'and' cannot be used in patterns.
; WARNING: (2124,11): 'if' cannot be used in patterns.
; WARNING: (2194,11): 'if' cannot be used in patterns.
; WARNING: (2194,11): 'if' cannot be used in patterns.
; WARNING: (2194,11): 'and' cannot be used in patterns.
; WARNING: (2194,11): 'and' cannot be used in patterns.
; WARNING: (2194,11): 'if' cannot be used in patterns.
; WARNING: (2194,11): 'if' cannot be used in patterns.
; WARNING: (2194,11): 'if' cannot be used in patterns.
; WARNING: (2194,11): 'and' cannot be used in patterns.
; WARNING: (2194,11): 'and' cannot be used in patterns.
; WARNING: (2194,11): 'if' cannot be used in patterns.
; WARNING: (2194,11): 'if' cannot be used in patterns.
; WARNING: (2194,11): 'if' cannot be used in patterns.
; WARNING: (2194,11): 'and' cannot be used in patterns.
; WARNING: (2194,11): 'and' cannot be used in patterns.
; WARNING: (2194,11): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@10@00 Set<$Ref>) (g1@11@00 Set<$Ref>)) (!
  (let ((result@12@00 (apply_TCFraming%limited s@$ g0@10@00 g1@11@00))) true)
  :pattern ((apply_TCFraming%limited s@$ g0@10@00 g1@11@00))
  :qid |quant-u-6699|)))
(assert (forall ((s@$ $Snap) (g0@10@00 Set<$Ref>) (g1@11@00 Set<$Ref>)) (!
  (let ((result@12@00 (apply_TCFraming%limited s@$ g0@10@00 g1@11@00))) (=>
    (apply_TCFraming%precondition s@$ g0@10@00 g1@11@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g0@10@00) (Set_in v g0@10@00))
          ($$%precondition (ite
            (Set_in v g0@10@00)
            (ite
              (Set_in u g0@10@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00))
        (=>
          (and
            (Set_in u g0@10@00)
            (and
              (Set_in v g0@10@00)
              (exists_path<Bool> ($$ (ite
                (Set_in v g0@10@00)
                (ite
                  (Set_in u g0@10@00)
                  ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
                  ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
                ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v)))
          (and
            (=>
              (and (Set_in u g0@10@00) (Set_in v g0@10@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00))
            ($$%precondition (ite
              (and
                (Set_in u g0@10@00)
                (and
                  (Set_in v g0@10@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g0@10@00)
        (ite
          (Set_in u g0@10@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@10@00)
          (and
            (Set_in v g0@10@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@10@00 g1@11@00))
  :qid |quant-u-6700|)))
; WARNING: (2254,7): 'if' cannot be used in patterns.
; WARNING: (2254,7): 'if' cannot be used in patterns.
; WARNING: (2254,7): 'and' cannot be used in patterns.
; WARNING: (2254,7): 'and' cannot be used in patterns.
; WARNING: (2254,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@10@00 Set<$Ref>) (g1@11@00 Set<$Ref>)) (!
  (let ((result@12@00 (apply_TCFraming%limited s@$ g0@10@00 g1@11@00))) (=>
    (apply_TCFraming%precondition s@$ g0@10@00 g1@11@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g1@11@00) (Set_in v g1@11@00))
          ($$%precondition (ite
            (Set_in v g1@11@00)
            (ite
              (Set_in u g1@11@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00))
        (=>
          (and
            (Set_in u g1@11@00)
            (and
              (Set_in v g1@11@00)
              (exists_path<Bool> ($$ (ite
                (Set_in v g1@11@00)
                (ite
                  (Set_in u g1@11@00)
                  ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
                  ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
                ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v)))
          (and
            (=>
              (and (Set_in u g1@11@00) (Set_in v g1@11@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00))
            ($$%precondition (ite
              (and
                (Set_in u g1@11@00)
                (and
                  (Set_in v g1@11@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g1@11@00)
        (ite
          (Set_in u g1@11@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@11@00)
          (and
            (Set_in v g1@11@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@10@00 g1@11@00))
  :qid |quant-u-6701|)))
; WARNING: (2310,7): 'if' cannot be used in patterns.
; WARNING: (2310,7): 'if' cannot be used in patterns.
; WARNING: (2310,7): 'and' cannot be used in patterns.
; WARNING: (2310,7): 'and' cannot be used in patterns.
; WARNING: (2310,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@10@00 Set<$Ref>) (g1@11@00 Set<$Ref>)) (!
  (let ((result@12@00 (apply_TCFraming%limited s@$ g0@10@00 g1@11@00))) (=>
    (apply_TCFraming%precondition s@$ g0@10@00 g1@11@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g0@10@00) (Set_in v g0@10@00))
          ($$%precondition (ite
            (Set_in v g0@10@00)
            (ite
              (Set_in u g0@10@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00))
        (=>
          (and
            (Set_in u g0@10@00)
            (and
              (Set_in v g0@10@00)
              (not
                (exists_path<Bool> ($$ (ite
                  (Set_in v g0@10@00)
                  (ite
                    (Set_in u g0@10@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v))))
          (and
            (=>
              (and (Set_in u g0@10@00) (Set_in v g0@10@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00))
            ($$%precondition (ite
              (and
                (Set_in u g0@10@00)
                (and
                  (Set_in v g0@10@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)))))
      :pattern ((Set_in u g0@10@00) (Set_in v g0@10@00))
      :pattern ((Set_in u g0@10@00) (exists_path<Bool> ($$ (ite
        (Set_in v g0@10@00)
        (ite
          (Set_in u g0@10@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v))
      :pattern ((Set_in u g0@10@00) (exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@10@00)
          (and
            (Set_in v g0@10@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)) u v))
      :pattern ((Set_in v g0@10@00) (exists_path<Bool> ($$ (ite
        (Set_in v g0@10@00)
        (ite
          (Set_in u g0@10@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v))
      :pattern ((Set_in v g0@10@00) (exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@10@00)
          (and
            (Set_in v g0@10@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g0@10@00)
        (ite
          (Set_in u g0@10@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@106@00 s@$ g0@10@00 g1@11@00))) g0@10@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@10@00)
          (and
            (Set_in v g0@10@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@82@00 s@$ g0@10@00 g1@11@00)) g0@10@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@87@00 s@$ g0@10@00 g1@11@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@111@00 s@$ g0@10@00 g1@11@00))) (Set_union g0@10@00 g1@11@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@10@00 g1@11@00))
  :qid |quant-u-6702|)))
; WARNING: (2398,7): 'if' cannot be used in patterns.
; WARNING: (2398,7): 'if' cannot be used in patterns.
; WARNING: (2398,7): 'and' cannot be used in patterns.
; WARNING: (2398,7): 'and' cannot be used in patterns.
; WARNING: (2398,7): 'if' cannot be used in patterns.
; WARNING: (2398,7): 'if' cannot be used in patterns.
; WARNING: (2398,7): 'if' cannot be used in patterns.
; WARNING: (2398,7): 'and' cannot be used in patterns.
; WARNING: (2398,7): 'and' cannot be used in patterns.
; WARNING: (2398,7): 'if' cannot be used in patterns.
; WARNING: (2398,7): 'if' cannot be used in patterns.
; WARNING: (2398,7): 'if' cannot be used in patterns.
; WARNING: (2398,7): 'and' cannot be used in patterns.
; WARNING: (2398,7): 'and' cannot be used in patterns.
; WARNING: (2398,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@10@00 Set<$Ref>) (g1@11@00 Set<$Ref>)) (!
  (let ((result@12@00 (apply_TCFraming%limited s@$ g0@10@00 g1@11@00))) (=>
    (apply_TCFraming%precondition s@$ g0@10@00 g1@11@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g1@11@00) (Set_in v g1@11@00))
          ($$%precondition (ite
            (Set_in v g1@11@00)
            (ite
              (Set_in u g1@11@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00))
        (=>
          (and
            (Set_in u g1@11@00)
            (and
              (Set_in v g1@11@00)
              (not
                (exists_path<Bool> ($$ (ite
                  (Set_in v g1@11@00)
                  (ite
                    (Set_in u g1@11@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v))))
          (and
            (=>
              (and (Set_in u g1@11@00) (Set_in v g1@11@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00))
            ($$%precondition (ite
              (and
                (Set_in u g1@11@00)
                (and
                  (Set_in v g1@11@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)))))
      :pattern ((Set_in u g1@11@00) (Set_in v g1@11@00))
      :pattern ((Set_in u g1@11@00) (exists_path<Bool> ($$ (ite
        (Set_in v g1@11@00)
        (ite
          (Set_in u g1@11@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v))
      :pattern ((Set_in u g1@11@00) (exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@11@00)
          (and
            (Set_in v g1@11@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)) u v))
      :pattern ((Set_in v g1@11@00) (exists_path<Bool> ($$ (ite
        (Set_in v g1@11@00)
        (ite
          (Set_in u g1@11@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v))
      :pattern ((Set_in v g1@11@00) (exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@11@00)
          (and
            (Set_in v g1@11@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g1@11@00)
        (ite
          (Set_in u g1@11@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@118@00 s@$ g0@10@00 g1@11@00))) g1@11@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@11@00)
          (and
            (Set_in v g1@11@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@94@00 s@$ g0@10@00 g1@11@00)) g1@11@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@99@00 s@$ g0@10@00 g1@11@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g0@10@00 g1@11@00))) (Set_union g1@11@00 g0@10@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@10@00 g1@11@00))
  :qid |quant-u-6703|)))
; WARNING: (2486,7): 'if' cannot be used in patterns.
; WARNING: (2486,7): 'if' cannot be used in patterns.
; WARNING: (2486,7): 'and' cannot be used in patterns.
; WARNING: (2486,7): 'and' cannot be used in patterns.
; WARNING: (2486,7): 'if' cannot be used in patterns.
; WARNING: (2486,7): 'if' cannot be used in patterns.
; WARNING: (2486,7): 'if' cannot be used in patterns.
; WARNING: (2486,7): 'and' cannot be used in patterns.
; WARNING: (2486,7): 'and' cannot be used in patterns.
; WARNING: (2486,7): 'if' cannot be used in patterns.
; WARNING: (2486,7): 'if' cannot be used in patterns.
; WARNING: (2486,7): 'if' cannot be used in patterns.
; WARNING: (2486,7): 'and' cannot be used in patterns.
; WARNING: (2486,7): 'and' cannot be used in patterns.
; WARNING: (2486,7): 'if' cannot be used in patterns.
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- test_graph ----------
(declare-const g0@0@01 Set<$Ref>)
(declare-const g1@1@01 Set<$Ref>)
(declare-const g0@2@01 Set<$Ref>)
(declare-const g1@3@01 Set<$Ref>)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@4@01 $Snap)
(assert (= $t@4@01 ($Snap.combine ($Snap.first $t@4@01) ($Snap.second $t@4@01))))
(assert (= ($Snap.first $t@4@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@2@01)))
(assert (=
  ($Snap.second $t@4@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@4@01))
    ($Snap.second ($Snap.second $t@4@01)))))
(declare-const n@5@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@5@01 g0@2@01))
(declare-const sm@6@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@7@01 ($Ref) $Ref)
(declare-fun img@8@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@5@01 $Ref) (n2@5@01 $Ref)) (!
  (=>
    (and (Set_in n1@5@01 g0@2@01) (Set_in n2@5@01 g0@2@01) (= n1@5@01 n2@5@01))
    (= n1@5@01 n2@5@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@5@01 $Ref)) (!
  (=>
    (Set_in n@5@01 g0@2@01)
    (and (= (inv@7@01 n@5@01) n@5@01) (img@8@01 n@5@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) n@5@01) n@5@01))
  :qid |quant-u-6705|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) (= (inv@7@01 r) r))
  :pattern ((inv@7@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@5@01 $Ref)) (!
  (=> (Set_in n@5@01 g0@2@01) (not (= n@5@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) n@5@01) n@5@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@9@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@7@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) r) r))
  :pattern ((inv@7@01 r))
  :qid |quant-u-6706|)))
(assert (=
  ($Snap.second ($Snap.second $t@4@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@4@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@4@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@10@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 0 | !(n$0@10@01 in g0@2@01) | live]
; [else-branch: 0 | n$0@10@01 in g0@2@01 | live]
(push) ; 4
; [then-branch: 0 | !(n$0@10@01 in g0@2@01)]
(assert (not (Set_in n$0@10@01 g0@2@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | n$0@10@01 in g0@2@01]
(assert (Set_in n$0@10@01 g0@2@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
(push) ; 5
(assert (not (and (img@8@01 n$0@10@01) (Set_in (inv@7@01 n$0@10@01) g0@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (Set_in n$0@10@01 g0@2@01)
  (and
    (Set_in n$0@10@01 g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))))
(assert (or (Set_in n$0@10@01 g0@2@01) (not (Set_in n$0@10@01 g0@2@01))))
(push) ; 3
; [then-branch: 1 | n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null | live]
; [else-branch: 1 | !(n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null) | live]
(push) ; 4
; [then-branch: 1 | n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null]
(assert (and
  (Set_in n$0@10@01 g0@2@01)
  (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
(push) ; 5
(assert (not (and (img@8@01 n$0@10@01) (Set_in (inv@7@01 n$0@10@01) g0@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null)]
(assert (not
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@10@01 g0@2@01)
      (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@10@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@10@01 g0@2@01)
      (and
        (Set_in n$0@10@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or (Set_in n$0@10@01 g0@2@01) (not (Set_in n$0@10@01 g0@2@01)))
    (=>
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or
      (not
        (and
          (Set_in n$0@10@01 g0@2@01)
          (not
            (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) g0@2@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@14@354@23-aux|)))
(assert (forall ((n$0@10@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@10@01 g0@2@01)
      (and
        (Set_in n$0@10@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or (Set_in n$0@10@01 g0@2@01) (not (Set_in n$0@10@01 g0@2@01)))
    (=>
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or
      (not
        (and
          (Set_in n$0@10@01 g0@2@01)
          (not
            (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
  :pattern ((Set_in n$0@10@01 g0@2@01) ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@14@354@23-aux|)))
(assert (forall ((n$0@10@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@10@01 g0@2@01)
      (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) g0@2@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) g0@2@01))
  :pattern ((Set_in n$0@10@01 g0@2@01) ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@14@354@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@4@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01)))) $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@3@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))))
(declare-const n$1@11@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@11@01 g1@3@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@12@01 ($Ref) $Ref)
(declare-fun img@13@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@11@01 $Ref) (n$12@11@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@11@01 g1@3@01)
      (Set_in n$12@11@01 g1@3@01)
      (= n$11@11@01 n$12@11@01))
    (= n$11@11@01 n$12@11@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@11@01 $Ref)) (!
  (=>
    (Set_in n$1@11@01 g1@3@01)
    (and (= (inv@12@01 n$1@11@01) n$1@11@01) (img@13@01 n$1@11@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) n$1@11@01) n$1@11@01))
  :qid |quant-u-6708|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)) (= (inv@12@01 r) r))
  :pattern ((inv@12@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@11@01 $Ref)) (!
  (=> (Set_in n$1@11@01 g1@3@01) (not (= n$1@11@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) n$1@11@01) n$1@11@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@11@01 n@5@01)
    (=
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))))
  
  :qid |quant-u-6709|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const sm@14@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@12@01 r) g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
  :pattern ((inv@12@01 r))
  :qid |quant-u-6710|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@15@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 2 | !(n$2@15@01 in g1@3@01) | live]
; [else-branch: 2 | n$2@15@01 in g1@3@01 | live]
(push) ; 4
; [then-branch: 2 | !(n$2@15@01 in g1@3@01)]
(assert (not (Set_in n$2@15@01 g1@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 2 | n$2@15@01 in g1@3@01]
(assert (Set_in n$2@15@01 g1@3@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@8@01 n$2@15@01) (Set_in (inv@7@01 n$2@15@01) g0@2@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@13@01 n$2@15@01) (Set_in (inv@12@01 n$2@15@01) g1@3@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (=>
  (Set_in n$2@15@01 g1@3@01)
  (and
    (Set_in n$2@15@01 g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))))
(assert (or (Set_in n$2@15@01 g1@3@01) (not (Set_in n$2@15@01 g1@3@01))))
(push) ; 3
; [then-branch: 3 | n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null | live]
; [else-branch: 3 | !(n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null) | live]
(push) ; 4
; [then-branch: 3 | n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null]
(assert (and
  (Set_in n$2@15@01 g1@3@01)
  (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@8@01 n$2@15@01) (Set_in (inv@7@01 n$2@15@01) g0@2@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@13@01 n$2@15@01) (Set_in (inv@12@01 n$2@15@01) g1@3@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null)]
(assert (not
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (=>
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@15@01 g1@3@01)
      (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@15@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@15@01 g1@3@01)
      (and
        (Set_in n$2@15@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or (Set_in n$2@15@01 g1@3@01) (not (Set_in n$2@15@01 g1@3@01)))
    (=>
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or
      (not
        (and
          (Set_in n$2@15@01 g1@3@01)
          (not
            (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) g1@3@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@27@354@36-aux|)))
(assert (forall ((n$2@15@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@15@01 g1@3@01)
      (and
        (Set_in n$2@15@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or (Set_in n$2@15@01 g1@3@01) (not (Set_in n$2@15@01 g1@3@01)))
    (=>
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or
      (not
        (and
          (Set_in n$2@15@01 g1@3@01)
          (not
            (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
  :pattern ((Set_in n$2@15@01 g1@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@27@354@36-aux|)))
(assert (forall ((n$2@15@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@15@01 g1@3@01)
      (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) g1@3@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) g1@3@01))
  :pattern ((Set_in n$2@15@01 g1@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@27@354@36|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; assert (forall e: Edge ::
;     { (e in $$(g0)) }
;     { (e in ($$(g0) union $$(g1))) }
;     (e in $$(g0)) ==> (e in ($$(g0) union $$(g1))))
; [eval] (forall e: Edge :: { (e in $$(g0)) } { (e in ($$(g0) union $$(g1))) } (e in $$(g0)) ==> (e in ($$(g0) union $$(g1))))
(declare-const e@16@01 Edge)
(push) ; 3
; [eval] (e in $$(g0)) ==> (e in ($$(g0) union $$(g1)))
; [eval] (e in $$(g0))
; [eval] $$(g0)
(push) ; 4
(declare-const n@17@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@17@01 g0@2@01))
(pop) ; 5
(declare-fun inv@18@01 ($Ref) $Ref)
(declare-fun img@19@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@17@01 $Ref) (n2@17@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@17@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n1@17@01) n1@17@01))
      (and
        (Set_in n2@17@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n2@17@01) n2@17@01))
      (= n1@17@01 n2@17@01))
    (= n1@17@01 n2@17@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@17@01 $Ref)) (!
  (=>
    (Set_in n@17@01 g0@2@01)
    (and (= (inv@18@01 n@17@01) n@17@01) (img@19@01 n@17@01)))
  :pattern ((Set_in n@17@01 g0@2@01))
  :pattern ((inv@18@01 n@17@01))
  :pattern ((img@19@01 n@17@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@19@01 r) (Set_in (inv@18@01 r) g0@2@01)) (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@18@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
  :pattern ((inv@18@01 r))
  :qid |quant-u-6712|)))
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r) (= r (inv@18@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6713|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@20@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r)))
    (=>
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>))))
  :qid |qp.fvfDomDef9|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef8|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((n@17@01 $Ref)) (!
  (=>
    (Set_in n@17@01 g0@2@01)
    (and (= (inv@18@01 n@17@01) n@17@01) (img@19@01 n@17@01)))
  :pattern ((Set_in n@17@01 g0@2@01))
  :pattern ((inv@18@01 n@17@01))
  :pattern ((img@19@01 n@17@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@19@01 r) (Set_in (inv@18@01 r) g0@2@01)) (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r)))
    (=>
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>))))
  :qid |qp.fvfDomDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef8|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@18@01 r) g0@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
    :pattern ((inv@18@01 r))
    :qid |quant-u-6712|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
(push) ; 4
; [then-branch: 4 | e@16@01 in $$(sm@20@01, g0@2@01) | live]
; [else-branch: 4 | !(e@16@01 in $$(sm@20@01, g0@2@01)) | live]
(push) ; 5
; [then-branch: 4 | e@16@01 in $$(sm@20@01, g0@2@01)]
(assert (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
; [eval] (e in ($$(g0) union $$(g1)))
; [eval] ($$(g0) union $$(g1))
; [eval] $$(g0)
(push) ; 6
(declare-const n@21@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@21@01 g0@2@01))
(pop) ; 7
(declare-fun inv@22@01 ($Ref) $Ref)
(declare-fun img@23@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@24@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@21@01 $Ref) (n2@21@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@21@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) n1@21@01) n1@21@01))
      (and
        (Set_in n2@21@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) n2@21@01) n2@21@01))
      (= n1@21@01 n2@21@01))
    (= n1@21@01 n2@21@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@21@01 $Ref)) (!
  (=>
    (Set_in n@21@01 g0@2@01)
    (and (= (inv@22@01 n@21@01) n@21@01) (img@23@01 n@21@01)))
  :pattern ((Set_in n@21@01 g0@2@01))
  :pattern ((inv@22@01 n@21@01))
  :pattern ((img@23@01 n@21@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@23@01 r) (Set_in (inv@22@01 r) g0@2@01)) (= (inv@22@01 r) r))
  :pattern ((inv@22@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@22@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) r) r))
  :pattern ((inv@22@01 r))
  :qid |quant-u-6715|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r) (= r (inv@22@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6716|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@25@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r)))
    (=>
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@21@01 $Ref)) (!
  (=>
    (Set_in n@21@01 g0@2@01)
    (and (= (inv@22@01 n@21@01) n@21@01) (img@23@01 n@21@01)))
  :pattern ((Set_in n@21@01 g0@2@01))
  :pattern ((inv@22@01 n@21@01))
  :pattern ((img@23@01 n@21@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@23@01 r) (Set_in (inv@22@01 r) g0@2@01)) (= (inv@22@01 r) r))
  :pattern ((inv@22@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r)))
    (=>
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@22@01 r) g0@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) r) r))
    :pattern ((inv@22@01 r))
    :qid |quant-u-6715|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)))
; [eval] $$(g1)
(push) ; 6
(declare-const n@26@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@26@01 g1@3@01))
(pop) ; 7
(declare-fun inv@27@01 ($Ref) $Ref)
(declare-fun img@28@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@29@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@26@01 $Ref) (n2@26@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@26@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) n1@26@01) n1@26@01))
      (and
        (Set_in n2@26@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) n2@26@01) n2@26@01))
      (= n1@26@01 n2@26@01))
    (= n1@26@01 n2@26@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g1@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g1@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g1@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@27@01 r) g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) r) r))
  :pattern ((inv@27@01 r))
  :qid |quant-u-6718|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r) (= r (inv@27@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6719|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@30@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g1@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g1@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g1@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@27@01 r) g1@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) r) r))
    :pattern ((inv@27@01 r))
    :qid |quant-u-6718|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(e@16@01 in $$(sm@20@01, g0@2@01))]
(assert (not
  (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@21@01 $Ref)) (!
  (=>
    (Set_in n@21@01 g0@2@01)
    (and (= (inv@22@01 n@21@01) n@21@01) (img@23@01 n@21@01)))
  :pattern ((Set_in n@21@01 g0@2@01))
  :pattern ((inv@22@01 n@21@01))
  :pattern ((img@23@01 n@21@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@23@01 r) (Set_in (inv@22@01 r) g0@2@01)) (= (inv@22@01 r) r))
  :pattern ((inv@22@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r)))
    (=>
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g1@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g1@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g1@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
  (and
    (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@22@01 r) g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) r) r))
      :pattern ((inv@22@01 r))
      :qid |quant-u-6715|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@27@01 r) g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) r) r))
      :pattern ((inv@27@01 r))
      :qid |quant-u-6718|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
; Joined path conditions
(assert (or
  (not
    (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
  (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@17@01 $Ref)) (!
  (=>
    (Set_in n@17@01 g0@2@01)
    (and (= (inv@18@01 n@17@01) n@17@01) (img@19@01 n@17@01)))
  :pattern ((Set_in n@17@01 g0@2@01))
  :pattern ((inv@18@01 n@17@01))
  :pattern ((img@19@01 n@17@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@19@01 r) (Set_in (inv@18@01 r) g0@2@01)) (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r)))
    (=>
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>))))
  :qid |qp.fvfDomDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@21@01 $Ref)) (!
  (=>
    (Set_in n@21@01 g0@2@01)
    (and (= (inv@22@01 n@21@01) n@21@01) (img@23@01 n@21@01)))
  :pattern ((Set_in n@21@01 g0@2@01))
  :pattern ((inv@22@01 n@21@01))
  :pattern ((img@23@01 n@21@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@23@01 r) (Set_in (inv@22@01 r) g0@2@01)) (= (inv@22@01 r) r))
  :pattern ((inv@22@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r)))
    (=>
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g1@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g1@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g1@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@18@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
  :pattern ((inv@18@01 r))
  :qid |quant-u-6712|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((e@16@01 Edge)) (!
  (and
    (=>
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
      (and
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@22@01 r) g0@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) r) r))
          :pattern ((inv@22@01 r))
          :qid |quant-u-6715|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@27@01 r) g1@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) r) r))
          :pattern ((inv@27@01 r))
          :qid |quant-u-6718|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01)))
    (or
      (not
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@358@12@358@71-aux|)))
(assert (forall ((e@16@01 Edge)) (!
  (and
    (=>
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
      (and
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@22@01 r) g0@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) r) r))
          :pattern ((inv@22@01 r))
          :qid |quant-u-6715|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@27@01 r) g1@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) r) r))
          :pattern ((inv@27@01 r))
          :qid |quant-u-6718|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01)))
    (or
      (not
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@358@12@358@71-aux|)))
(assert (forall ((e@16@01 Edge)) (!
  (and
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)
    (=>
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@358@12@358@71_precondition|)))
(push) ; 3
(assert (not (forall ((e@16@01 Edge)) (!
  (=>
    (and
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)
        (=>
          (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
          (and
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
    (Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@358@12@358@71|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((e@16@01 Edge)) (!
  (=>
    (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
    (Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@358@12@358@71|)))
; [exec]
; assert ($$(g0) union $$(g1)) == $$((g0 union g1))
; [eval] ($$(g0) union $$(g1)) == $$((g0 union g1))
; [eval] ($$(g0) union $$(g1))
; [eval] $$(g0)
(push) ; 3
(declare-const n@31@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@31@01 g0@2@01))
(pop) ; 4
(declare-fun inv@32@01 ($Ref) $Ref)
(declare-fun img@33@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@34@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@34@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@34@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef26|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@31@01 $Ref) (n2@31@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@31@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@34@01  $FVF<next>) n1@31@01) n1@31@01))
      (and
        (Set_in n2@31@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@34@01  $FVF<next>) n2@31@01) n2@31@01))
      (= n1@31@01 n2@31@01))
    (= n1@31@01 n2@31@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@31@01 $Ref)) (!
  (=>
    (Set_in n@31@01 g0@2@01)
    (and (= (inv@32@01 n@31@01) n@31@01) (img@33@01 n@31@01)))
  :pattern ((Set_in n@31@01 g0@2@01))
  :pattern ((inv@32@01 n@31@01))
  :pattern ((img@33@01 n@31@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@33@01 r) (Set_in (inv@32@01 r) g0@2@01)) (= (inv@32@01 r) r))
  :pattern ((inv@32@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@32@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@34@01  $FVF<next>) r) r))
  :pattern ((inv@32@01 r))
  :qid |quant-u-6721|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r) (= r (inv@32@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6722|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@35@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r)))
    (=>
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>))))
  :qid |qp.fvfDomDef30|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g0@2@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@34@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@34@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((n@31@01 $Ref)) (!
  (=>
    (Set_in n@31@01 g0@2@01)
    (and (= (inv@32@01 n@31@01) n@31@01) (img@33@01 n@31@01)))
  :pattern ((Set_in n@31@01 g0@2@01))
  :pattern ((inv@32@01 n@31@01))
  :pattern ((img@33@01 n@31@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@33@01 r) (Set_in (inv@32@01 r) g0@2@01)) (= (inv@32@01 r) r))
  :pattern ((inv@32@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r)))
    (=>
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>))))
  :qid |qp.fvfDomDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@32@01 r) g0@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@34@01  $FVF<next>) r) r))
    :pattern ((inv@32@01 r))
    :qid |quant-u-6721|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g0@2@01)))
; [eval] $$(g1)
(push) ; 3
(declare-const n@36@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@36@01 g1@3@01))
(pop) ; 4
(declare-fun inv@37@01 ($Ref) $Ref)
(declare-fun img@38@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@39@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@36@01 $Ref) (n2@36@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@36@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@39@01  $FVF<next>) n1@36@01) n1@36@01))
      (and
        (Set_in n2@36@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@39@01  $FVF<next>) n2@36@01) n2@36@01))
      (= n1@36@01 n2@36@01))
    (= n1@36@01 n2@36@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g1@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g1@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g1@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@37@01 r) g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@39@01  $FVF<next>) r) r))
  :pattern ((inv@37@01 r))
  :qid |quant-u-6724|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6725|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@40@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@40@01  $FVF<next>)) g1@3@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g1@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g1@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g1@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@37@01 r) g1@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@39@01  $FVF<next>) r) r))
    :pattern ((inv@37@01 r))
    :qid |quant-u-6724|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@40@01  $FVF<next>)) g1@3@01)))
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@41@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@41@01 (Set_union g0@2@01 g1@3@01)))
(pop) ; 4
(declare-fun inv@42@01 ($Ref) $Ref)
(declare-fun img@43@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@44@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@44@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@44@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef40|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@41@01 $Ref) (n2@41@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@41@01 (Set_union g0@2@01 g1@3@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@44@01  $FVF<next>) n1@41@01) n1@41@01))
      (and
        (Set_in n2@41@01 (Set_union g0@2@01 g1@3@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@44@01  $FVF<next>) n2@41@01) n2@41@01))
      (= n1@41@01 n2@41@01))
    (= n1@41@01 n2@41@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@41@01 $Ref)) (!
  (=>
    (Set_in n@41@01 (Set_union g0@2@01 g1@3@01))
    (and (= (inv@42@01 n@41@01) n@41@01) (img@43@01 n@41@01)))
  :pattern ((Set_in n@41@01 (Set_union g0@2@01 g1@3@01)))
  :pattern ((inv@42@01 n@41@01))
  :pattern ((img@43@01 n@41@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@43@01 r) (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)))
    (= (inv@42@01 r) r))
  :pattern ((inv@42@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@44@01  $FVF<next>) r) r))
  :pattern ((inv@42@01 r))
  :qid |quant-u-6727|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01))
      (img@43@01 r)
      (= r (inv@42@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6728|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@45@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r)))
    (=>
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef44|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@44@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@44@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert (forall ((n@41@01 $Ref)) (!
  (=>
    (Set_in n@41@01 (Set_union g0@2@01 g1@3@01))
    (and (= (inv@42@01 n@41@01) n@41@01) (img@43@01 n@41@01)))
  :pattern ((Set_in n@41@01 (Set_union g0@2@01 g1@3@01)))
  :pattern ((inv@42@01 n@41@01))
  :pattern ((img@43@01 n@41@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@43@01 r) (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)))
    (= (inv@42@01 r) r))
  :pattern ((inv@42@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r)))
    (=>
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@44@01  $FVF<next>) r) r))
    :pattern ((inv@42@01 r))
    :qid |quant-u-6727|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01))))
(push) ; 3
(assert (not (Set_equal (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@40@01  $FVF<next>)) g1@3@01)) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@40@01  $FVF<next>)) g1@3@01)) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01))))
(pop) ; 2
(pop) ; 1
; ---------- test_intersection ----------
(declare-const g0@46@01 Set<$Ref>)
(declare-const g1@47@01 Set<$Ref>)
(declare-const g0@48@01 Set<$Ref>)
(declare-const g1@49@01 Set<$Ref>)
(push) ; 1
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 ($Snap.combine ($Snap.first $t@50@01) ($Snap.second $t@50@01))))
(assert (= ($Snap.first $t@50@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@48@01)))
(assert (=
  ($Snap.second $t@50@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@50@01))
    ($Snap.second ($Snap.second $t@50@01)))))
(declare-const n@51@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@51@01 g0@48@01))
(declare-const sm@52@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@53@01 ($Ref) $Ref)
(declare-fun img@54@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@51@01 $Ref) (n2@51@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@51@01 g0@48@01)
      (Set_in n2@51@01 g0@48@01)
      (= n1@51@01 n2@51@01))
    (= n1@51@01 n2@51@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@51@01 $Ref)) (!
  (=>
    (Set_in n@51@01 g0@48@01)
    (and (= (inv@53@01 n@51@01) n@51@01) (img@54@01 n@51@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) n@51@01) n@51@01))
  :qid |quant-u-6730|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01)) (= (inv@53@01 r) r))
  :pattern ((inv@53@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@51@01 $Ref)) (!
  (=> (Set_in n@51@01 g0@48@01) (not (= n@51@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) n@51@01) n@51@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@55@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@53@01 r) g0@48@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) r) r))
  :pattern ((inv@53@01 r))
  :qid |quant-u-6731|)))
(assert (=
  ($Snap.second ($Snap.second $t@50@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@50@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@50@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@56@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 5 | !(n$0@56@01 in g0@48@01) | live]
; [else-branch: 5 | n$0@56@01 in g0@48@01 | live]
(push) ; 4
; [then-branch: 5 | !(n$0@56@01 in g0@48@01)]
(assert (not (Set_in n$0@56@01 g0@48@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | n$0@56@01 in g0@48@01]
(assert (Set_in n$0@56@01 g0@48@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
      (=
        ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
    :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
    :qid |qp.fvfValDef46|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef47|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))
(push) ; 5
(assert (not (and (img@54@01 n$0@56@01) (Set_in (inv@53@01 n$0@56@01) g0@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (=>
  (Set_in n$0@56@01 g0@48@01)
  (and
    (Set_in n$0@56@01 g0@48@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))))
(assert (or (Set_in n$0@56@01 g0@48@01) (not (Set_in n$0@56@01 g0@48@01))))
(push) ; 3
; [then-branch: 6 | n$0@56@01 in g0@48@01 && Lookup(next, sm@55@01, n$0@56@01) != Null | live]
; [else-branch: 6 | !(n$0@56@01 in g0@48@01 && Lookup(next, sm@55@01, n$0@56@01) != Null) | live]
(push) ; 4
; [then-branch: 6 | n$0@56@01 in g0@48@01 && Lookup(next, sm@55@01, n$0@56@01) != Null]
(assert (and
  (Set_in n$0@56@01 g0@48@01)
  (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
      (=
        ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
    :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
    :qid |qp.fvfValDef46|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef47|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))
(push) ; 5
(assert (not (and (img@54@01 n$0@56@01) (Set_in (inv@53@01 n$0@56@01) g0@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 6 | !(n$0@56@01 in g0@48@01 && Lookup(next, sm@55@01, n$0@56@01) != Null)]
(assert (not
  (and
    (Set_in n$0@56@01 g0@48@01)
    (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (=>
  (and
    (Set_in n$0@56@01 g0@48@01)
    (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))
  (and
    (Set_in n$0@56@01 g0@48@01)
    (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@56@01 g0@48@01)
      (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))))
  (and
    (Set_in n$0@56@01 g0@48@01)
    (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@56@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@56@01 g0@48@01)
      (and
        (Set_in n$0@56@01 g0@48@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01)))
    (or (Set_in n$0@56@01 g0@48@01) (not (Set_in n$0@56@01 g0@48@01)))
    (=>
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01)))
    (or
      (not
        (and
          (Set_in n$0@56@01 g0@48@01)
          (not
            (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))))
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) g0@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@14@363@23-aux|)))
(assert (forall ((n$0@56@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@56@01 g0@48@01)
      (and
        (Set_in n$0@56@01 g0@48@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01)))
    (or (Set_in n$0@56@01 g0@48@01) (not (Set_in n$0@56@01 g0@48@01)))
    (=>
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01)))
    (or
      (not
        (and
          (Set_in n$0@56@01 g0@48@01)
          (not
            (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))))
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))))
  :pattern ((Set_in n$0@56@01 g0@48@01) ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@14@363@23-aux|)))
(assert (forall ((n$0@56@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@56@01 g0@48@01)
      (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) g0@48@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) g0@48@01))
  :pattern ((Set_in n$0@56@01 g0@48@01) ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@14@363@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@50@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@49@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))))
(declare-const n$1@57@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@57@01 g1@49@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@58@01 ($Ref) $Ref)
(declare-fun img@59@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@57@01 $Ref) (n$12@57@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@57@01 g1@49@01)
      (Set_in n$12@57@01 g1@49@01)
      (= n$11@57@01 n$12@57@01))
    (= n$11@57@01 n$12@57@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@57@01 $Ref)) (!
  (=>
    (Set_in n$1@57@01 g1@49@01)
    (and (= (inv@58@01 n$1@57@01) n$1@57@01) (img@59@01 n$1@57@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) n$1@57@01) n$1@57@01))
  :qid |quant-u-6733|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01)) (= (inv@58@01 r) r))
  :pattern ((inv@58@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@57@01 $Ref)) (!
  (=> (Set_in n$1@57@01 g1@49@01) (not (= n$1@57@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) n$1@57@01) n$1@57@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@57@01 n@51@01)
    (=
      (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
      (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))))
  
  :qid |quant-u-6734|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const sm@60@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@58@01 r) g1@49@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) r) r))
  :pattern ((inv@58@01 r))
  :qid |quant-u-6735|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@61@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 7 | !(n$2@61@01 in g1@49@01) | live]
; [else-branch: 7 | n$2@61@01 in g1@49@01 | live]
(push) ; 4
; [then-branch: 7 | !(n$2@61@01 in g1@49@01)]
(assert (not (Set_in n$2@61@01 g1@49@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 7 | n$2@61@01 in g1@49@01]
(assert (Set_in n$2@61@01 g1@49@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
      (=
        ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
    :qid |qp.fvfValDef48|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
      (=
        ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
    :qid |qp.fvfValDef49|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef50|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@54@01 n$2@61@01) (Set_in (inv@53@01 n$2@61@01) g0@48@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@59@01 n$2@61@01) (Set_in (inv@58@01 n$2@61@01) g1@49@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (=>
  (Set_in n$2@61@01 g1@49@01)
  (and
    (Set_in n$2@61@01 g1@49@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))))
(assert (or (Set_in n$2@61@01 g1@49@01) (not (Set_in n$2@61@01 g1@49@01))))
(push) ; 3
; [then-branch: 8 | n$2@61@01 in g1@49@01 && Lookup(next, sm@60@01, n$2@61@01) != Null | live]
; [else-branch: 8 | !(n$2@61@01 in g1@49@01 && Lookup(next, sm@60@01, n$2@61@01) != Null) | live]
(push) ; 4
; [then-branch: 8 | n$2@61@01 in g1@49@01 && Lookup(next, sm@60@01, n$2@61@01) != Null]
(assert (and
  (Set_in n$2@61@01 g1@49@01)
  (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
      (=
        ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
    :qid |qp.fvfValDef48|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
      (=
        ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
    :qid |qp.fvfValDef49|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef50|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@54@01 n$2@61@01) (Set_in (inv@53@01 n$2@61@01) g0@48@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@59@01 n$2@61@01) (Set_in (inv@58@01 n$2@61@01) g1@49@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(n$2@61@01 in g1@49@01 && Lookup(next, sm@60@01, n$2@61@01) != Null)]
(assert (not
  (and
    (Set_in n$2@61@01 g1@49@01)
    (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (=>
  (and
    (Set_in n$2@61@01 g1@49@01)
    (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))
  (and
    (Set_in n$2@61@01 g1@49@01)
    (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@61@01 g1@49@01)
      (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))))
  (and
    (Set_in n$2@61@01 g1@49@01)
    (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@61@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@61@01 g1@49@01)
      (and
        (Set_in n$2@61@01 g1@49@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01)))
    (or (Set_in n$2@61@01 g1@49@01) (not (Set_in n$2@61@01 g1@49@01)))
    (=>
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01)))
    (or
      (not
        (and
          (Set_in n$2@61@01 g1@49@01)
          (not
            (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))))
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@27@363@36-aux|)))
(assert (forall ((n$2@61@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@61@01 g1@49@01)
      (and
        (Set_in n$2@61@01 g1@49@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01)))
    (or (Set_in n$2@61@01 g1@49@01) (not (Set_in n$2@61@01 g1@49@01)))
    (=>
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01)))
    (or
      (not
        (and
          (Set_in n$2@61@01 g1@49@01)
          (not
            (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))))
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))))
  :pattern ((Set_in n$2@61@01 g1@49@01) ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@27@363@36-aux|)))
(assert (forall ((n$2@61@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@61@01 g1@49@01)
      (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) g1@49@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) g1@49@01))
  :pattern ((Set_in n$2@61@01 g1@49@01) ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@27@363@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
  $Snap.unit))
; [eval] (g0 intersection g1) == Set[Ref]()
; [eval] (g0 intersection g1)
; [eval] Set[Ref]()
(assert (Set_equal (Set_intersection g0@48@01 g1@49@01) (as Set_empty  Set<$Ref>)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; assert (forall r: Ref ::
;     { (r in g0), (r in g1) }
;     (r in g0) ==> !((r in g1))) &&
;   (forall r$0: Ref ::
;     { (r$0 in g0), (r$0 in g1) }
;     (r$0 in g1) ==> !((r$0 in g0)))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@62@01 $Ref)
(push) ; 3
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 4
; [then-branch: 9 | r@62@01 in g0@48@01 | live]
; [else-branch: 9 | !(r@62@01 in g0@48@01) | live]
(push) ; 5
; [then-branch: 9 | r@62@01 in g0@48@01]
(assert (Set_in r@62@01 g0@48@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 5
(push) ; 5
; [else-branch: 9 | !(r@62@01 in g0@48@01)]
(assert (not (Set_in r@62@01 g0@48@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@62@01 g0@48@01)) (Set_in r@62@01 g0@48@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@62@01 $Ref)) (!
  (or (not (Set_in r@62@01 g0@48@01)) (Set_in r@62@01 g0@48@01))
  :pattern ((Set_in r@62@01 g0@48@01) (Set_in r@62@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32-aux|)))
(push) ; 3
(assert (not (forall ((r@62@01 $Ref)) (!
  (=> (Set_in r@62@01 g0@48@01) (not (Set_in r@62@01 g1@49@01)))
  :pattern ((Set_in r@62@01 g0@48@01) (Set_in r@62@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((r@62@01 $Ref)) (!
  (=> (Set_in r@62@01 g0@48@01) (not (Set_in r@62@01 g1@49@01)))
  :pattern ((Set_in r@62@01 g0@48@01) (Set_in r@62@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32|)))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@63@01 $Ref)
(push) ; 3
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 4
; [then-branch: 10 | r$0@63@01 in g1@49@01 | live]
; [else-branch: 10 | !(r$0@63@01 in g1@49@01) | live]
(push) ; 5
; [then-branch: 10 | r$0@63@01 in g1@49@01]
(assert (Set_in r$0@63@01 g1@49@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 5
(push) ; 5
; [else-branch: 10 | !(r$0@63@01 in g1@49@01)]
(assert (not (Set_in r$0@63@01 g1@49@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@63@01 g1@49@01)) (Set_in r$0@63@01 g1@49@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@63@01 $Ref)) (!
  (or (not (Set_in r$0@63@01 g1@49@01)) (Set_in r$0@63@01 g1@49@01))
  :pattern ((Set_in r$0@63@01 g0@48@01) (Set_in r$0@63@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32-aux|)))
(push) ; 3
(assert (not (forall ((r$0@63@01 $Ref)) (!
  (=> (Set_in r$0@63@01 g1@49@01) (not (Set_in r$0@63@01 g0@48@01)))
  :pattern ((Set_in r$0@63@01 g0@48@01) (Set_in r$0@63@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((r$0@63@01 $Ref)) (!
  (=> (Set_in r$0@63@01 g1@49@01) (not (Set_in r$0@63@01 g0@48@01)))
  :pattern ((Set_in r$0@63@01 g0@48@01) (Set_in r$0@63@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32|)))
(pop) ; 2
(pop) ; 1
; ---------- test_disjoint ----------
(declare-const g0@64@01 Set<$Ref>)
(declare-const g1@65@01 Set<$Ref>)
(declare-const g0@66@01 Set<$Ref>)
(declare-const g1@67@01 Set<$Ref>)
(push) ; 1
(declare-const $t@68@01 $Snap)
(assert (= $t@68@01 ($Snap.combine ($Snap.first $t@68@01) ($Snap.second $t@68@01))))
(assert (= ($Snap.first $t@68@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@66@01)))
(assert (=
  ($Snap.second $t@68@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@68@01))
    ($Snap.second ($Snap.second $t@68@01)))))
(declare-const n@69@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@69@01 g0@66@01))
(declare-const sm@70@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@71@01 ($Ref) $Ref)
(declare-fun img@72@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@69@01 $Ref) (n2@69@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@69@01 g0@66@01)
      (Set_in n2@69@01 g0@66@01)
      (= n1@69@01 n2@69@01))
    (= n1@69@01 n2@69@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g0@66@01)
    (and (= (inv@71@01 n@69@01) n@69@01) (img@72@01 n@69@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) n@69@01) n@69@01))
  :qid |quant-u-6737|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)) (= (inv@71@01 r) r))
  :pattern ((inv@71@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@69@01 $Ref)) (!
  (=> (Set_in n@69@01 g0@66@01) (not (= n@69@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) n@69@01) n@69@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@73@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@71@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r))
  :pattern ((inv@71@01 r))
  :qid |quant-u-6738|)))
(assert (=
  ($Snap.second ($Snap.second $t@68@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@68@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@68@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@74@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 11 | !(n$0@74@01 in g0@66@01) | live]
; [else-branch: 11 | n$0@74@01 in g0@66@01 | live]
(push) ; 4
; [then-branch: 11 | !(n$0@74@01 in g0@66@01)]
(assert (not (Set_in n$0@74@01 g0@66@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 11 | n$0@74@01 in g0@66@01]
(assert (Set_in n$0@74@01 g0@66@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef52|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef53|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))
(push) ; 5
(assert (not (and (img@72@01 n$0@74@01) (Set_in (inv@71@01 n$0@74@01) g0@66@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (=>
  (Set_in n$0@74@01 g0@66@01)
  (and
    (Set_in n$0@74@01 g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))))
(assert (or (Set_in n$0@74@01 g0@66@01) (not (Set_in n$0@74@01 g0@66@01))))
(push) ; 3
; [then-branch: 12 | n$0@74@01 in g0@66@01 && Lookup(next, sm@73@01, n$0@74@01) != Null | live]
; [else-branch: 12 | !(n$0@74@01 in g0@66@01 && Lookup(next, sm@73@01, n$0@74@01) != Null) | live]
(push) ; 4
; [then-branch: 12 | n$0@74@01 in g0@66@01 && Lookup(next, sm@73@01, n$0@74@01) != Null]
(assert (and
  (Set_in n$0@74@01 g0@66@01)
  (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef52|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef53|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))
(push) ; 5
(assert (not (and (img@72@01 n$0@74@01) (Set_in (inv@71@01 n$0@74@01) g0@66@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 12 | !(n$0@74@01 in g0@66@01 && Lookup(next, sm@73@01, n$0@74@01) != Null)]
(assert (not
  (and
    (Set_in n$0@74@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (=>
  (and
    (Set_in n$0@74@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))
  (and
    (Set_in n$0@74@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@74@01 g0@66@01)
      (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))))
  (and
    (Set_in n$0@74@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@74@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@74@01 g0@66@01)
      (and
        (Set_in n$0@74@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01)))
    (or (Set_in n$0@74@01 g0@66@01) (not (Set_in n$0@74@01 g0@66@01)))
    (=>
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01)))
    (or
      (not
        (and
          (Set_in n$0@74@01 g0@66@01)
          (not
            (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))))
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) g0@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@14@375@23-aux|)))
(assert (forall ((n$0@74@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@74@01 g0@66@01)
      (and
        (Set_in n$0@74@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01)))
    (or (Set_in n$0@74@01 g0@66@01) (not (Set_in n$0@74@01 g0@66@01)))
    (=>
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01)))
    (or
      (not
        (and
          (Set_in n$0@74@01 g0@66@01)
          (not
            (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))))
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))))
  :pattern ((Set_in n$0@74@01 g0@66@01) ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@14@375@23-aux|)))
(assert (forall ((n$0@74@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@74@01 g0@66@01)
      (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) g0@66@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) g0@66@01))
  :pattern ((Set_in n$0@74@01 g0@66@01) ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@14@375@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@68@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@68@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@68@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@67@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))))
(declare-const n$1@75@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@75@01 g1@67@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@76@01 ($Ref) $Ref)
(declare-fun img@77@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@75@01 $Ref) (n$12@75@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@75@01 g1@67@01)
      (Set_in n$12@75@01 g1@67@01)
      (= n$11@75@01 n$12@75@01))
    (= n$11@75@01 n$12@75@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@75@01 $Ref)) (!
  (=>
    (Set_in n$1@75@01 g1@67@01)
    (and (= (inv@76@01 n$1@75@01) n$1@75@01) (img@77@01 n$1@75@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) n$1@75@01) n$1@75@01))
  :qid |quant-u-6740|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)) (= (inv@76@01 r) r))
  :pattern ((inv@76@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@75@01 $Ref)) (!
  (=> (Set_in n$1@75@01 g1@67@01) (not (= n$1@75@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) n$1@75@01) n$1@75@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@75@01 n@69@01)
    (=
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))))
  
  :qid |quant-u-6741|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const sm@78@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@76@01 r) g1@67@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
  :pattern ((inv@76@01 r))
  :qid |quant-u-6742|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@79@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 13 | !(n$2@79@01 in g1@67@01) | live]
; [else-branch: 13 | n$2@79@01 in g1@67@01 | live]
(push) ; 4
; [then-branch: 13 | !(n$2@79@01 in g1@67@01)]
(assert (not (Set_in n$2@79@01 g1@67@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 13 | n$2@79@01 in g1@67@01]
(assert (Set_in n$2@79@01 g1@67@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef54|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef56|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$2@79@01) (Set_in (inv@71@01 n$2@79@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$2@79@01) (Set_in (inv@76@01 n$2@79@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (=>
  (Set_in n$2@79@01 g1@67@01)
  (and
    (Set_in n$2@79@01 g1@67@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))))
(assert (or (Set_in n$2@79@01 g1@67@01) (not (Set_in n$2@79@01 g1@67@01))))
(push) ; 3
; [then-branch: 14 | n$2@79@01 in g1@67@01 && Lookup(next, sm@78@01, n$2@79@01) != Null | live]
; [else-branch: 14 | !(n$2@79@01 in g1@67@01 && Lookup(next, sm@78@01, n$2@79@01) != Null) | live]
(push) ; 4
; [then-branch: 14 | n$2@79@01 in g1@67@01 && Lookup(next, sm@78@01, n$2@79@01) != Null]
(assert (and
  (Set_in n$2@79@01 g1@67@01)
  (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef54|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef56|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$2@79@01) (Set_in (inv@71@01 n$2@79@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$2@79@01) (Set_in (inv@76@01 n$2@79@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !(n$2@79@01 in g1@67@01 && Lookup(next, sm@78@01, n$2@79@01) != Null)]
(assert (not
  (and
    (Set_in n$2@79@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (=>
  (and
    (Set_in n$2@79@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
  (and
    (Set_in n$2@79@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@79@01 g1@67@01)
      (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
  (and
    (Set_in n$2@79@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@79@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@79@01 g1@67@01)
      (and
        (Set_in n$2@79@01 g1@67@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or (Set_in n$2@79@01 g1@67@01) (not (Set_in n$2@79@01 g1@67@01)))
    (=>
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or
      (not
        (and
          (Set_in n$2@79@01 g1@67@01)
          (not
            (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@27@375@36-aux|)))
(assert (forall ((n$2@79@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@79@01 g1@67@01)
      (and
        (Set_in n$2@79@01 g1@67@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or (Set_in n$2@79@01 g1@67@01) (not (Set_in n$2@79@01 g1@67@01)))
    (=>
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or
      (not
        (and
          (Set_in n$2@79@01 g1@67@01)
          (not
            (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
  :pattern ((Set_in n$2@79@01 g1@67@01) ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@27@375@36-aux|)))
(assert (forall ((n$2@79@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@79@01 g1@67@01)
      (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) g1@67@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) g1@67@01))
  :pattern ((Set_in n$2@79@01 g1@67@01) ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@27@375@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@80@01 $Ref)
(push) ; 2
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 3
; [then-branch: 15 | r@80@01 in g0@66@01 | live]
; [else-branch: 15 | !(r@80@01 in g0@66@01) | live]
(push) ; 4
; [then-branch: 15 | r@80@01 in g0@66@01]
(assert (Set_in r@80@01 g0@66@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(r@80@01 in g0@66@01)]
(assert (not (Set_in r@80@01 g0@66@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@80@01 g0@66@01)) (Set_in r@80@01 g0@66@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@80@01 $Ref)) (!
  (or (not (Set_in r@80@01 g0@66@01)) (Set_in r@80@01 g0@66@01))
  :pattern ((Set_in r@80@01 g0@66@01) (Set_in r@80@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@376@14@376@34-aux|)))
(assert (forall ((r@80@01 $Ref)) (!
  (=> (Set_in r@80@01 g0@66@01) (not (Set_in r@80@01 g1@67@01)))
  :pattern ((Set_in r@80@01 g0@66@01) (Set_in r@80@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@376@14@376@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))))
  $Snap.unit))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@81@01 $Ref)
(push) ; 2
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 3
; [then-branch: 16 | r$0@81@01 in g1@67@01 | live]
; [else-branch: 16 | !(r$0@81@01 in g1@67@01) | live]
(push) ; 4
; [then-branch: 16 | r$0@81@01 in g1@67@01]
(assert (Set_in r$0@81@01 g1@67@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 4
(push) ; 4
; [else-branch: 16 | !(r$0@81@01 in g1@67@01)]
(assert (not (Set_in r$0@81@01 g1@67@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@81@01 g1@67@01)) (Set_in r$0@81@01 g1@67@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@81@01 $Ref)) (!
  (or (not (Set_in r$0@81@01 g1@67@01)) (Set_in r$0@81@01 g1@67@01))
  :pattern ((Set_in r$0@81@01 g0@66@01) (Set_in r$0@81@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@376@14@376@34-aux|)))
(assert (forall ((r$0@81@01 $Ref)) (!
  (=> (Set_in r$0@81@01 g1@67@01) (not (Set_in r$0@81@01 g0@66@01)))
  :pattern ((Set_in r$0@81@01 g0@66@01) (Set_in r$0@81@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@376@14@376@34|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@82@01 $Snap)
(assert (= $t@82@01 ($Snap.combine ($Snap.first $t@82@01) ($Snap.second $t@82@01))))
(assert (= ($Snap.first $t@82@01) $Snap.unit))
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(assert (not (Set_in $Ref.null (Set_union g0@66@01 g1@67@01))))
(assert (=
  ($Snap.second $t@82@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@82@01))
    ($Snap.second ($Snap.second $t@82@01)))))
(declare-const n$3@83@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$3@83@01 (Set_union g0@66@01 g1@67@01)))
(declare-const sm@84@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@85@01 ($Ref) $Ref)
(declare-fun img@86@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@83@01 $Ref) (n$32@83@01 $Ref)) (!
  (=>
    (and
      (Set_in n$31@83@01 (Set_union g0@66@01 g1@67@01))
      (Set_in n$32@83@01 (Set_union g0@66@01 g1@67@01))
      (= n$31@83@01 n$32@83@01))
    (= n$31@83@01 n$32@83@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@83@01 $Ref)) (!
  (=>
    (Set_in n$3@83@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@85@01 n$3@83@01) n$3@83@01) (img@86@01 n$3@83@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) n$3@83@01) n$3@83@01))
  :qid |quant-u-6744|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@85@01 r) r))
  :pattern ((inv@85@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@83@01 $Ref)) (!
  (=>
    (Set_in n$3@83@01 (Set_union g0@66@01 g1@67@01))
    (not (= n$3@83@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) n$3@83@01) n$3@83@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@87@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
  :pattern ((inv@85@01 r))
  :qid |quant-u-6745|)))
(assert (=
  ($Snap.second ($Snap.second $t@82@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@82@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@82@01))) $Snap.unit))
; [eval] (forall n$4: Ref :: { (n$4.next in (g0 union g1)) } { (n$4 in (g0 union g1)), n$4.next } (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1)))
(declare-const n$4@88@01 $Ref)
(push) ; 3
; [eval] (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1))
; [eval] (n$4 in (g0 union g1)) && n$4.next != null
; [eval] (n$4 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 17 | !(n$4@88@01 in g0@66@01 ∪ g1@67@01) | live]
; [else-branch: 17 | n$4@88@01 in g0@66@01 ∪ g1@67@01 | live]
(push) ; 5
; [then-branch: 17 | !(n$4@88@01 in g0@66@01 ∪ g1@67@01)]
(assert (not (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 17 | n$4@88@01 in g0@66@01 ∪ g1@67@01]
(assert (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
      (=
        ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
    :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) n$4@88@01))
(push) ; 6
(assert (not (and
  (img@86@01 n$4@88@01)
  (Set_in (inv@85@01 n$4@88@01) (Set_union g0@66@01 g1@67@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
  (and
    (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) n$4@88@01))))
(assert (or
  (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
  (not (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01)))))
(push) ; 4
; [then-branch: 18 | n$4@88@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@87@01, n$4@88@01) != Null | live]
; [else-branch: 18 | !(n$4@88@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@87@01, n$4@88@01) != Null) | live]
(push) ; 5
; [then-branch: 18 | n$4@88@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@87@01, n$4@88@01) != Null]
(assert (and
  (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
  (not (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null))))
; [eval] (n$4.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
      (=
        ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
    :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) n$4@88@01))
(push) ; 6
(assert (not (and
  (img@86@01 n$4@88@01)
  (Set_in (inv@85@01 n$4@88@01) (Set_union g0@66@01 g1@67@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 18 | !(n$4@88@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@87@01, n$4@88@01) != Null)]
(assert (not
  (and
    (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (and
    (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null)))
  (and
    (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) n$4@88@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
      (not (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null))))
  (and
    (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@88@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
      (and
        (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) n$4@88@01)))
    (or
      (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
      (not (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))))
    (=>
      (and
        (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null)))
      (and
        (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) n$4@88@01)))
    (or
      (not
        (and
          (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
          (not
            (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null))))
      (and
        (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) (Set_union g0@66@01 g1@67@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31-aux|)))
(assert (forall ((n$4@88@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
      (and
        (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) n$4@88@01)))
    (or
      (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
      (not (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))))
    (=>
      (and
        (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null)))
      (and
        (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) n$4@88@01)))
    (or
      (not
        (and
          (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
          (not
            (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null))))
      (and
        (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null)))))
  :pattern ((Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) n$4@88@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31-aux|)))
(assert (forall ((n$4@88@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01))
      (not (= ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in n$4@88@01 (Set_union g0@66@01 g1@67@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n$4@88@01) n$4@88@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@82@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01))))
  $Snap.unit))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g1) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v))
(declare-const u@89@01 $Ref)
(declare-const v@90@01 $Ref)
(push) ; 3
; [eval] (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && (v in g1)
; [eval] (u in g0)
(push) ; 4
; [then-branch: 19 | !(u@89@01 in g0@66@01) | live]
; [else-branch: 19 | u@89@01 in g0@66@01 | live]
(push) ; 5
; [then-branch: 19 | !(u@89@01 in g0@66@01)]
(assert (not (Set_in u@89@01 g0@66@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 19 | u@89@01 in g0@66@01]
(assert (Set_in u@89@01 g0@66@01))
; [eval] (v in g1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in u@89@01 g0@66@01) (not (Set_in u@89@01 g0@66@01))))
(push) ; 4
; [then-branch: 20 | u@89@01 in g0@66@01 && v@90@01 in g1@67@01 | live]
; [else-branch: 20 | !(u@89@01 in g0@66@01 && v@90@01 in g1@67@01) | live]
(push) ; 5
; [then-branch: 20 | u@89@01 in g0@66@01 && v@90@01 in g1@67@01]
(assert (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01)))
; [eval] !exists_path($$((g0 union g1)), u, v)
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@91@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@91@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@92@01 ($Ref) $Ref)
(declare-fun img@93@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@91@01 $Ref) (n2@91@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@91@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n1@91@01) n1@91@01))
      (and
        (Set_in n2@91@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n2@91@01) n2@91@01))
      (= n1@91@01 n2@91@01))
    (= n1@91@01 n2@91@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@91@01 $Ref)) (!
  (=>
    (Set_in n@91@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@92@01 n@91@01) n@91@01) (img@93@01 n@91@01)))
  :pattern ((Set_in n@91@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@92@01 n@91@01))
  :pattern ((img@93@01 n@91@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@93@01 r) (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@92@01 r) r))
  :pattern ((inv@92@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
  :pattern ((inv@92@01 r))
  :qid |quant-u-6747|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01))
      (img@93@01 r)
      (= r (inv@92@01 r)))
    (>
      (ite
        (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-6748|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@94@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>)))
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r)))
    (=>
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r))
      (Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@91@01 $Ref)) (!
  (=>
    (Set_in n@91@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@92@01 n@91@01) n@91@01) (img@93@01 n@91@01)))
  :pattern ((Set_in n@91@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@92@01 n@91@01))
  :pattern ((img@93@01 n@91@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@93@01 r) (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@92@01 r) r))
  :pattern ((inv@92@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>)))
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r)))
    (=>
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r))
      (Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
    :pattern ((inv@92@01 r))
    :qid |quant-u-6747|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 20 | !(u@89@01 in g0@66@01 && v@90@01 in g1@67@01)]
(assert (not (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((n@91@01 $Ref)) (!
  (=>
    (Set_in n@91@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@92@01 n@91@01) n@91@01) (img@93@01 n@91@01)))
  :pattern ((Set_in n@91@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@92@01 n@91@01))
  :pattern ((img@93@01 n@91@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@93@01 r) (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@92@01 r) r))
  :pattern ((inv@92@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>)))
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r)))
    (=>
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r))
      (Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
(assert (=>
  (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))
  (and
    (Set_in u@89@01 g0@66@01)
    (Set_in v@90@01 g1@67@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
      :pattern ((inv@92@01 r))
      :qid |quant-u-6747|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01)))
  (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@91@01 $Ref)) (!
  (=>
    (Set_in n@91@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@92@01 n@91@01) n@91@01) (img@93@01 n@91@01)))
  :pattern ((Set_in n@91@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@92@01 n@91@01))
  :pattern ((img@93@01 n@91@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@93@01 r) (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@92@01 r) r))
  :pattern ((inv@92@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>)))
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r)))
    (=>
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r))
      (Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@94@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01)) (img@93@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@94@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@94@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@89@01 $Ref) (v@90@01 $Ref)) (!
  (and
    (or (Set_in u@89@01 g0@66@01) (not (Set_in u@89@01 g0@66@01)))
    (=>
      (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))
      (and
        (Set_in u@89@01 g0@66@01)
        (Set_in v@90@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
          :pattern ((inv@92@01 r))
          :qid |quant-u-6747|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01)))
      (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))))
  :pattern ((Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@89@01 $Ref) (v@90@01 $Ref)) (!
  (and
    (or (Set_in u@89@01 g0@66@01) (not (Set_in u@89@01 g0@66@01)))
    (=>
      (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))
      (and
        (Set_in u@89@01 g0@66@01)
        (Set_in v@90@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
          :pattern ((inv@92@01 r))
          :qid |quant-u-6747|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01)))
      (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))))
  :pattern ((Set_in u@89@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@89@01 v@90@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@89@01 $Ref) (v@90@01 $Ref)) (!
  (and
    (or (Set_in u@89@01 g0@66@01) (not (Set_in u@89@01 g0@66@01)))
    (=>
      (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))
      (and
        (Set_in u@89@01 g0@66@01)
        (Set_in v@90@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
          :pattern ((inv@92@01 r))
          :qid |quant-u-6747|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01)))
      (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))))
  :pattern ((Set_in v@90@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@89@01 v@90@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@89@01 $Ref) (v@90@01 $Ref)) (!
  (and
    (or (Set_in u@89@01 g0@66@01) (not (Set_in u@89@01 g0@66@01)))
    (=>
      (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))
      (and
        (Set_in u@89@01 g0@66@01)
        (Set_in v@90@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@92@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
          :pattern ((inv@92@01 r))
          :qid |quant-u-6747|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01)))
      (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@89@01 v@90@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@89@01 $Ref) (v@90@01 $Ref)) (!
  (=>
    (and (Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@89@01 v@90@01)))
  :pattern ((Set_in u@89@01 g0@66@01) (Set_in v@90@01 g1@67@01))
  :pattern ((Set_in u@89@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@89@01 v@90@01))
  :pattern ((Set_in v@90@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@89@01 v@90@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@94@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@89@01 v@90@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
  $Snap.unit))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g0) } { (u in g0), exists_path($$(g0), u, v) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g0), exists_path($$(g0), u, v) } { (v in g0), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@95@01 $Ref)
(declare-const v@96@01 $Ref)
(push) ; 3
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v))
; [eval] (u in g0)
(push) ; 4
; [then-branch: 21 | !(u@95@01 in g0@66@01) | live]
; [else-branch: 21 | u@95@01 in g0@66@01 | live]
(push) ; 5
; [then-branch: 21 | !(u@95@01 in g0@66@01)]
(assert (not (Set_in u@95@01 g0@66@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 21 | u@95@01 in g0@66@01]
(assert (Set_in u@95@01 g0@66@01))
; [eval] (v in g0)
(push) ; 6
; [then-branch: 22 | !(v@96@01 in g0@66@01) | live]
; [else-branch: 22 | v@96@01 in g0@66@01 | live]
(push) ; 7
; [then-branch: 22 | !(v@96@01 in g0@66@01)]
(assert (not (Set_in v@96@01 g0@66@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 22 | v@96@01 in g0@66@01]
(assert (Set_in v@96@01 g0@66@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@97@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@97@01 g0@66@01))
(pop) ; 9
(declare-fun inv@98@01 ($Ref) $Ref)
(declare-fun img@99@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@97@01 $Ref) (n2@97@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@97@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n1@97@01) n1@97@01))
      (and
        (Set_in n2@97@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) n2@97@01) n2@97@01))
      (= n1@97@01 n2@97@01))
    (= n1@97@01 n2@97@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@97@01 $Ref)) (!
  (=>
    (Set_in n@97@01 g0@66@01)
    (and (= (inv@98@01 n@97@01) n@97@01) (img@99@01 n@97@01)))
  :pattern ((Set_in n@97@01 g0@66@01))
  :pattern ((inv@98@01 n@97@01))
  :pattern ((img@99@01 n@97@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@99@01 r) (Set_in (inv@98@01 r) g0@66@01)) (= (inv@98@01 r) r))
  :pattern ((inv@98@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@98@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
  :pattern ((inv@98@01 r))
  :qid |quant-u-6750|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r) (= r (inv@98@01 r)))
    (>
      (ite
        (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-6751|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@100@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>)))
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r)))
    (=>
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r))
      (Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@100@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@100@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@100@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@97@01 $Ref)) (!
  (=>
    (Set_in n@97@01 g0@66@01)
    (and (= (inv@98@01 n@97@01) n@97@01) (img@99@01 n@97@01)))
  :pattern ((Set_in n@97@01 g0@66@01))
  :pattern ((inv@98@01 n@97@01))
  :pattern ((img@99@01 n@97@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@99@01 r) (Set_in (inv@98@01 r) g0@66@01)) (= (inv@98@01 r) r))
  :pattern ((inv@98@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>)))
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r)))
    (=>
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r))
      (Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@100@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@100@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@100@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@98@01 r) g0@66@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
    :pattern ((inv@98@01 r))
    :qid |quant-u-6750|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((n@97@01 $Ref)) (!
  (=>
    (Set_in n@97@01 g0@66@01)
    (and (= (inv@98@01 n@97@01) n@97@01) (img@99@01 n@97@01)))
  :pattern ((Set_in n@97@01 g0@66@01))
  :pattern ((inv@98@01 n@97@01))
  :pattern ((img@99@01 n@97@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@99@01 r) (Set_in (inv@98@01 r) g0@66@01)) (= (inv@98@01 r) r))
  :pattern ((inv@98@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>)))
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r)))
    (=>
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r))
      (Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@100@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@100@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@100@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (Set_in v@96@01 g0@66@01)
  (and
    (Set_in v@96@01 g0@66@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@98@01 r) g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
      :pattern ((inv@98@01 r))
      :qid |quant-u-6750|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01))))
(assert (or (Set_in v@96@01 g0@66@01) (not (Set_in v@96@01 g0@66@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((n@97@01 $Ref)) (!
  (=>
    (Set_in n@97@01 g0@66@01)
    (and (= (inv@98@01 n@97@01) n@97@01) (img@99@01 n@97@01)))
  :pattern ((Set_in n@97@01 g0@66@01))
  :pattern ((inv@98@01 n@97@01))
  :pattern ((img@99@01 n@97@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@99@01 r) (Set_in (inv@98@01 r) g0@66@01)) (= (inv@98@01 r) r))
  :pattern ((inv@98@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>)))
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r)))
    (=>
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r))
      (Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@100@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@100@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@100@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (Set_in u@95@01 g0@66@01)
  (and
    (Set_in u@95@01 g0@66@01)
    (=>
      (Set_in v@96@01 g0@66@01)
      (and
        (Set_in v@96@01 g0@66@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@98@01 r) g0@66@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
          :pattern ((inv@98@01 r))
          :qid |quant-u-6750|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01)))
    (or (Set_in v@96@01 g0@66@01) (not (Set_in v@96@01 g0@66@01))))))
(assert (or (Set_in u@95@01 g0@66@01) (not (Set_in u@95@01 g0@66@01))))
(push) ; 4
; [then-branch: 23 | u@95@01 in g0@66@01 && v@96@01 in g0@66@01 && exists_path[Bool]($$(sm@100@01, g0@66@01), u@95@01, v@96@01) | live]
; [else-branch: 23 | !(u@95@01 in g0@66@01 && v@96@01 in g0@66@01 && exists_path[Bool]($$(sm@100@01, g0@66@01), u@95@01, v@96@01)) | live]
(push) ; 5
; [then-branch: 23 | u@95@01 in g0@66@01 && v@96@01 in g0@66@01 && exists_path[Bool]($$(sm@100@01, g0@66@01), u@95@01, v@96@01)]
(assert (and
  (Set_in u@95@01 g0@66@01)
  (and
    (Set_in v@96@01 g0@66@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@101@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@101@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@102@01 ($Ref) $Ref)
(declare-fun img@103@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@104@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@104@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@104@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@104@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@101@01 $Ref) (n2@101@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@101@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) n1@101@01) n1@101@01))
      (and
        (Set_in n2@101@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) n2@101@01) n2@101@01))
      (= n1@101@01 n2@101@01))
    (= n1@101@01 n2@101@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@101@01 $Ref)) (!
  (=>
    (Set_in n@101@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@102@01 n@101@01) n@101@01) (img@103@01 n@101@01)))
  :pattern ((Set_in n@101@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@102@01 n@101@01))
  :pattern ((img@103@01 n@101@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@102@01 r) r))
  :pattern ((inv@102@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) r) r))
  :pattern ((inv@102@01 r))
  :qid |quant-u-6753|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
      (img@103@01 r)
      (= r (inv@102@01 r)))
    (>
      (ite
        (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-6754|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@105@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r)))
    (=>
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r))
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@104@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@104@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@104@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
(assert (forall ((n@101@01 $Ref)) (!
  (=>
    (Set_in n@101@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@102@01 n@101@01) n@101@01) (img@103@01 n@101@01)))
  :pattern ((Set_in n@101@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@102@01 n@101@01))
  :pattern ((img@103@01 n@101@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@102@01 r) r))
  :pattern ((inv@102@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r)))
    (=>
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r))
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) r) r))
    :pattern ((inv@102@01 r))
    :qid |quant-u-6753|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 23 | !(u@95@01 in g0@66@01 && v@96@01 in g0@66@01 && exists_path[Bool]($$(sm@100@01, g0@66@01), u@95@01, v@96@01))]
(assert (not
  (and
    (Set_in u@95@01 g0@66@01)
    (and
      (Set_in v@96@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@104@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@104@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@104@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
(assert (forall ((n@101@01 $Ref)) (!
  (=>
    (Set_in n@101@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@102@01 n@101@01) n@101@01) (img@103@01 n@101@01)))
  :pattern ((Set_in n@101@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@102@01 n@101@01))
  :pattern ((img@103@01 n@101@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@102@01 r) r))
  :pattern ((inv@102@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r)))
    (=>
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r))
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
(assert (=>
  (and
    (Set_in u@95@01 g0@66@01)
    (and
      (Set_in v@96@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))
  (and
    (Set_in u@95@01 g0@66@01)
    (Set_in v@96@01 g0@66@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) r) r))
      :pattern ((inv@102@01 r))
      :qid |quant-u-6753|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@95@01 g0@66@01)
      (and
        (Set_in v@96@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))))
  (and
    (Set_in u@95@01 g0@66@01)
    (and
      (Set_in v@96@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@97@01 $Ref)) (!
  (=>
    (Set_in n@97@01 g0@66@01)
    (and (= (inv@98@01 n@97@01) n@97@01) (img@99@01 n@97@01)))
  :pattern ((Set_in n@97@01 g0@66@01))
  :pattern ((inv@98@01 n@97@01))
  :pattern ((img@99@01 n@97@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@99@01 r) (Set_in (inv@98@01 r) g0@66@01)) (= (inv@98@01 r) r))
  :pattern ((inv@98@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>)))
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r)))
    (=>
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r))
      (Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@100@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@98@01 r) g0@66@01) (img@99@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@100@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@100@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@100@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@104@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@104@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@104@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
(assert (forall ((n@101@01 $Ref)) (!
  (=>
    (Set_in n@101@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@102@01 n@101@01) n@101@01) (img@103@01 n@101@01)))
  :pattern ((Set_in n@101@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@102@01 n@101@01))
  :pattern ((img@103@01 n@101@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@102@01 r) r))
  :pattern ((inv@102@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r)))
    (=>
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r))
      (Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@105@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01)) (img@103@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@105@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@105@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@95@01 $Ref) (v@96@01 $Ref)) (!
  (and
    (=>
      (Set_in u@95@01 g0@66@01)
      (and
        (Set_in u@95@01 g0@66@01)
        (=>
          (Set_in v@96@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@98@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
              :pattern ((inv@98@01 r))
              :qid |quant-u-6750|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@96@01 g0@66@01) (not (Set_in v@96@01 g0@66@01)))))
    (or (Set_in u@95@01 g0@66@01) (not (Set_in u@95@01 g0@66@01)))
    (=>
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))
      (and
        (Set_in u@95@01 g0@66@01)
        (Set_in v@96@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) r) r))
          :pattern ((inv@102@01 r))
          :qid |quant-u-6753|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@95@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))))
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))))
  :pattern ((Set_in u@95@01 g0@66@01) (Set_in v@96@01 g0@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@95@01 $Ref) (v@96@01 $Ref)) (!
  (and
    (=>
      (Set_in u@95@01 g0@66@01)
      (and
        (Set_in u@95@01 g0@66@01)
        (=>
          (Set_in v@96@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@98@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
              :pattern ((inv@98@01 r))
              :qid |quant-u-6750|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@96@01 g0@66@01) (not (Set_in v@96@01 g0@66@01)))))
    (or (Set_in u@95@01 g0@66@01) (not (Set_in u@95@01 g0@66@01)))
    (=>
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))
      (and
        (Set_in u@95@01 g0@66@01)
        (Set_in v@96@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) r) r))
          :pattern ((inv@102@01 r))
          :qid |quant-u-6753|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@95@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))))
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))))
  :pattern ((Set_in u@95@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@95@01 $Ref) (v@96@01 $Ref)) (!
  (and
    (=>
      (Set_in u@95@01 g0@66@01)
      (and
        (Set_in u@95@01 g0@66@01)
        (=>
          (Set_in v@96@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@98@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
              :pattern ((inv@98@01 r))
              :qid |quant-u-6750|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@96@01 g0@66@01) (not (Set_in v@96@01 g0@66@01)))))
    (or (Set_in u@95@01 g0@66@01) (not (Set_in u@95@01 g0@66@01)))
    (=>
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))
      (and
        (Set_in u@95@01 g0@66@01)
        (Set_in v@96@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) r) r))
          :pattern ((inv@102@01 r))
          :qid |quant-u-6753|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@95@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))))
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))))
  :pattern ((Set_in u@95@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@95@01 v@96@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@95@01 $Ref) (v@96@01 $Ref)) (!
  (and
    (=>
      (Set_in u@95@01 g0@66@01)
      (and
        (Set_in u@95@01 g0@66@01)
        (=>
          (Set_in v@96@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@98@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
              :pattern ((inv@98@01 r))
              :qid |quant-u-6750|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@96@01 g0@66@01) (not (Set_in v@96@01 g0@66@01)))))
    (or (Set_in u@95@01 g0@66@01) (not (Set_in u@95@01 g0@66@01)))
    (=>
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))
      (and
        (Set_in u@95@01 g0@66@01)
        (Set_in v@96@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) r) r))
          :pattern ((inv@102@01 r))
          :qid |quant-u-6753|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@95@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))))
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))))
  :pattern ((Set_in v@96@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@95@01 $Ref) (v@96@01 $Ref)) (!
  (and
    (=>
      (Set_in u@95@01 g0@66@01)
      (and
        (Set_in u@95@01 g0@66@01)
        (=>
          (Set_in v@96@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@98@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
              :pattern ((inv@98@01 r))
              :qid |quant-u-6750|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@96@01 g0@66@01) (not (Set_in v@96@01 g0@66@01)))))
    (or (Set_in u@95@01 g0@66@01) (not (Set_in u@95@01 g0@66@01)))
    (=>
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))
      (and
        (Set_in u@95@01 g0@66@01)
        (Set_in v@96@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) r) r))
          :pattern ((inv@102@01 r))
          :qid |quant-u-6753|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@95@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))))
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))))
  :pattern ((Set_in v@96@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@95@01 v@96@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@95@01 $Ref) (v@96@01 $Ref)) (!
  (and
    (=>
      (Set_in u@95@01 g0@66@01)
      (and
        (Set_in u@95@01 g0@66@01)
        (=>
          (Set_in v@96@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@98@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
              :pattern ((inv@98@01 r))
              :qid |quant-u-6750|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@96@01 g0@66@01) (not (Set_in v@96@01 g0@66@01)))))
    (or (Set_in u@95@01 g0@66@01) (not (Set_in u@95@01 g0@66@01)))
    (=>
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))
      (and
        (Set_in u@95@01 g0@66@01)
        (Set_in v@96@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) r) r))
          :pattern ((inv@102@01 r))
          :qid |quant-u-6753|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@95@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))))
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@95@01 $Ref) (v@96@01 $Ref)) (!
  (and
    (=>
      (Set_in u@95@01 g0@66@01)
      (and
        (Set_in u@95@01 g0@66@01)
        (=>
          (Set_in v@96@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@98@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r))
              :pattern ((inv@98@01 r))
              :qid |quant-u-6750|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@96@01 g0@66@01) (not (Set_in v@96@01 g0@66@01)))))
    (or (Set_in u@95@01 g0@66@01) (not (Set_in u@95@01 g0@66@01)))
    (=>
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))
      (and
        (Set_in u@95@01 g0@66@01)
        (Set_in v@96@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@102@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@104@01  $FVF<next>) r) r))
          :pattern ((inv@102@01 r))
          :qid |quant-u-6753|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@95@01 g0@66@01)
          (and
            (Set_in v@96@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))))
      (and
        (Set_in u@95@01 g0@66@01)
        (and
          (Set_in v@96@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@95@01 v@96@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@95@01 $Ref) (v@96@01 $Ref)) (!
  (=>
    (and
      (Set_in u@95@01 g0@66@01)
      (and
        (Set_in v@96@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@95@01 v@96@01))
  :pattern ((Set_in u@95@01 g0@66@01) (Set_in v@96@01 g0@66@01))
  :pattern ((Set_in u@95@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))
  :pattern ((Set_in u@95@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@95@01 v@96@01))
  :pattern ((Set_in v@96@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))
  :pattern ((Set_in v@96@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@95@01 v@96@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@100@01  $FVF<next>)) g0@66@01) u@95@01 v@96@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@105@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@95@01 v@96@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
  $Snap.unit))
; [eval] (forall u: Ref, v: Ref :: { (u in g1), (v in g1) } { (u in g1), exists_path($$(g0), u, v) } { (u in g1), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$(g0), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@106@01 $Ref)
(declare-const v@107@01 $Ref)
(push) ; 3
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v))
; [eval] (u in g1)
(push) ; 4
; [then-branch: 24 | !(u@106@01 in g1@67@01) | live]
; [else-branch: 24 | u@106@01 in g1@67@01 | live]
(push) ; 5
; [then-branch: 24 | !(u@106@01 in g1@67@01)]
(assert (not (Set_in u@106@01 g1@67@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 24 | u@106@01 in g1@67@01]
(assert (Set_in u@106@01 g1@67@01))
; [eval] (v in g1)
(push) ; 6
; [then-branch: 25 | !(v@107@01 in g1@67@01) | live]
; [else-branch: 25 | v@107@01 in g1@67@01 | live]
(push) ; 7
; [then-branch: 25 | !(v@107@01 in g1@67@01)]
(assert (not (Set_in v@107@01 g1@67@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 25 | v@107@01 in g1@67@01]
(assert (Set_in v@107@01 g1@67@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@108@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@108@01 g0@66@01))
(pop) ; 9
(declare-fun inv@109@01 ($Ref) $Ref)
(declare-fun img@110@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@111@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@111@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@111@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@111@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@108@01 $Ref) (n2@108@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@108@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) n1@108@01) n1@108@01))
      (and
        (Set_in n2@108@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) n2@108@01) n2@108@01))
      (= n1@108@01 n2@108@01))
    (= n1@108@01 n2@108@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@108@01 $Ref)) (!
  (=>
    (Set_in n@108@01 g0@66@01)
    (and (= (inv@109@01 n@108@01) n@108@01) (img@110@01 n@108@01)))
  :pattern ((Set_in n@108@01 g0@66@01))
  :pattern ((inv@109@01 n@108@01))
  :pattern ((img@110@01 n@108@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@110@01 r) (Set_in (inv@109@01 r) g0@66@01)) (= (inv@109@01 r) r))
  :pattern ((inv@109@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@109@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
  :pattern ((inv@109@01 r))
  :qid |quant-u-6756|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r) (= r (inv@109@01 r)))
    (>
      (ite
        (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-6757|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@112@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>)))
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r)))
    (=>
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r))
      (Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@112@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@112@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@112@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@111@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@111@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@111@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@108@01 $Ref)) (!
  (=>
    (Set_in n@108@01 g0@66@01)
    (and (= (inv@109@01 n@108@01) n@108@01) (img@110@01 n@108@01)))
  :pattern ((Set_in n@108@01 g0@66@01))
  :pattern ((inv@109@01 n@108@01))
  :pattern ((img@110@01 n@108@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@110@01 r) (Set_in (inv@109@01 r) g0@66@01)) (= (inv@109@01 r) r))
  :pattern ((inv@109@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>)))
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r)))
    (=>
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r))
      (Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@112@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@112@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@112@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@109@01 r) g0@66@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
    :pattern ((inv@109@01 r))
    :qid |quant-u-6756|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@111@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@111@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@111@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@108@01 $Ref)) (!
  (=>
    (Set_in n@108@01 g0@66@01)
    (and (= (inv@109@01 n@108@01) n@108@01) (img@110@01 n@108@01)))
  :pattern ((Set_in n@108@01 g0@66@01))
  :pattern ((inv@109@01 n@108@01))
  :pattern ((img@110@01 n@108@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@110@01 r) (Set_in (inv@109@01 r) g0@66@01)) (= (inv@109@01 r) r))
  :pattern ((inv@109@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>)))
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r)))
    (=>
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r))
      (Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@112@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@112@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@112@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (Set_in v@107@01 g1@67@01)
  (and
    (Set_in v@107@01 g1@67@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@109@01 r) g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
      :pattern ((inv@109@01 r))
      :qid |quant-u-6756|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01))))
(assert (or (Set_in v@107@01 g1@67@01) (not (Set_in v@107@01 g1@67@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@111@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@111@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@111@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@108@01 $Ref)) (!
  (=>
    (Set_in n@108@01 g0@66@01)
    (and (= (inv@109@01 n@108@01) n@108@01) (img@110@01 n@108@01)))
  :pattern ((Set_in n@108@01 g0@66@01))
  :pattern ((inv@109@01 n@108@01))
  :pattern ((img@110@01 n@108@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@110@01 r) (Set_in (inv@109@01 r) g0@66@01)) (= (inv@109@01 r) r))
  :pattern ((inv@109@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>)))
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r)))
    (=>
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r))
      (Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@112@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@112@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@112@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (Set_in u@106@01 g1@67@01)
  (and
    (Set_in u@106@01 g1@67@01)
    (=>
      (Set_in v@107@01 g1@67@01)
      (and
        (Set_in v@107@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@109@01 r) g0@66@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
          :pattern ((inv@109@01 r))
          :qid |quant-u-6756|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01)))
    (or (Set_in v@107@01 g1@67@01) (not (Set_in v@107@01 g1@67@01))))))
(assert (or (Set_in u@106@01 g1@67@01) (not (Set_in u@106@01 g1@67@01))))
(push) ; 4
; [then-branch: 26 | u@106@01 in g1@67@01 && v@107@01 in g1@67@01 && exists_path[Bool]($$(sm@112@01, g0@66@01), u@106@01, v@107@01) | live]
; [else-branch: 26 | !(u@106@01 in g1@67@01 && v@107@01 in g1@67@01 && exists_path[Bool]($$(sm@112@01, g0@66@01), u@106@01, v@107@01)) | live]
(push) ; 5
; [then-branch: 26 | u@106@01 in g1@67@01 && v@107@01 in g1@67@01 && exists_path[Bool]($$(sm@112@01, g0@66@01), u@106@01, v@107@01)]
(assert (and
  (Set_in u@106@01 g1@67@01)
  (and
    (Set_in v@107@01 g1@67@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@113@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@113@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@114@01 ($Ref) $Ref)
(declare-fun img@115@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@116@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@116@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@116@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@116@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@113@01 $Ref) (n2@113@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@113@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) n1@113@01) n1@113@01))
      (and
        (Set_in n2@113@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) n2@113@01) n2@113@01))
      (= n1@113@01 n2@113@01))
    (= n1@113@01 n2@113@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@113@01 $Ref)) (!
  (=>
    (Set_in n@113@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@114@01 n@113@01) n@113@01) (img@115@01 n@113@01)))
  :pattern ((Set_in n@113@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@114@01 n@113@01))
  :pattern ((img@115@01 n@113@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@115@01 r) (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@114@01 r) r))
  :pattern ((inv@114@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) r) r))
  :pattern ((inv@114@01 r))
  :qid |quant-u-6759|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
      (img@115@01 r)
      (= r (inv@114@01 r)))
    (>
      (ite
        (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-6760|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@117@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>)))
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r)))
    (=>
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r))
      (Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@117@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@117@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@117@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@116@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@116@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@116@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((n@113@01 $Ref)) (!
  (=>
    (Set_in n@113@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@114@01 n@113@01) n@113@01) (img@115@01 n@113@01)))
  :pattern ((Set_in n@113@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@114@01 n@113@01))
  :pattern ((img@115@01 n@113@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@115@01 r) (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@114@01 r) r))
  :pattern ((inv@114@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>)))
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r)))
    (=>
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r))
      (Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@117@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@117@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@117@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) r) r))
    :pattern ((inv@114@01 r))
    :qid |quant-u-6759|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 26 | !(u@106@01 in g1@67@01 && v@107@01 in g1@67@01 && exists_path[Bool]($$(sm@112@01, g0@66@01), u@106@01, v@107@01))]
(assert (not
  (and
    (Set_in u@106@01 g1@67@01)
    (and
      (Set_in v@107@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@116@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@116@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@116@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((n@113@01 $Ref)) (!
  (=>
    (Set_in n@113@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@114@01 n@113@01) n@113@01) (img@115@01 n@113@01)))
  :pattern ((Set_in n@113@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@114@01 n@113@01))
  :pattern ((img@115@01 n@113@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@115@01 r) (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@114@01 r) r))
  :pattern ((inv@114@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>)))
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r)))
    (=>
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r))
      (Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@117@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@117@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@117@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
(assert (=>
  (and
    (Set_in u@106@01 g1@67@01)
    (and
      (Set_in v@107@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))
  (and
    (Set_in u@106@01 g1@67@01)
    (Set_in v@107@01 g1@67@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) r) r))
      :pattern ((inv@114@01 r))
      :qid |quant-u-6759|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@106@01 g1@67@01)
      (and
        (Set_in v@107@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))))
  (and
    (Set_in u@106@01 g1@67@01)
    (and
      (Set_in v@107@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@111@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@111@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@111@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@108@01 $Ref)) (!
  (=>
    (Set_in n@108@01 g0@66@01)
    (and (= (inv@109@01 n@108@01) n@108@01) (img@110@01 n@108@01)))
  :pattern ((Set_in n@108@01 g0@66@01))
  :pattern ((inv@109@01 n@108@01))
  :pattern ((img@110@01 n@108@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@110@01 r) (Set_in (inv@109@01 r) g0@66@01)) (= (inv@109@01 r) r))
  :pattern ((inv@109@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>)))
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r)))
    (=>
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r))
      (Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@112@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@109@01 r) g0@66@01) (img@110@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@112@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@112@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@112@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@116@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@116@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@116@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((n@113@01 $Ref)) (!
  (=>
    (Set_in n@113@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@114@01 n@113@01) n@113@01) (img@115@01 n@113@01)))
  :pattern ((Set_in n@113@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@114@01 n@113@01))
  :pattern ((img@115@01 n@113@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@115@01 r) (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@114@01 r) r))
  :pattern ((inv@114@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>)))
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r)))
    (=>
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r))
      (Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@117@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01)) (img@115@01 r))
      (and (img@86@01 r) (Set_in (inv@85@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@117@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r)))
  :pattern (($FVF.lookup_next (as sm@117@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@82@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@117@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@106@01 $Ref) (v@107@01 $Ref)) (!
  (and
    (=>
      (Set_in u@106@01 g1@67@01)
      (and
        (Set_in u@106@01 g1@67@01)
        (=>
          (Set_in v@107@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@109@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
              :pattern ((inv@109@01 r))
              :qid |quant-u-6756|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@107@01 g1@67@01) (not (Set_in v@107@01 g1@67@01)))))
    (or (Set_in u@106@01 g1@67@01) (not (Set_in u@106@01 g1@67@01)))
    (=>
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))
      (and
        (Set_in u@106@01 g1@67@01)
        (Set_in v@107@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) r) r))
          :pattern ((inv@114@01 r))
          :qid |quant-u-6759|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@106@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))))
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))))
  :pattern ((Set_in u@106@01 g1@67@01) (Set_in v@107@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@106@01 $Ref) (v@107@01 $Ref)) (!
  (and
    (=>
      (Set_in u@106@01 g1@67@01)
      (and
        (Set_in u@106@01 g1@67@01)
        (=>
          (Set_in v@107@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@109@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
              :pattern ((inv@109@01 r))
              :qid |quant-u-6756|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@107@01 g1@67@01) (not (Set_in v@107@01 g1@67@01)))))
    (or (Set_in u@106@01 g1@67@01) (not (Set_in u@106@01 g1@67@01)))
    (=>
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))
      (and
        (Set_in u@106@01 g1@67@01)
        (Set_in v@107@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) r) r))
          :pattern ((inv@114@01 r))
          :qid |quant-u-6759|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@106@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))))
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))))
  :pattern ((Set_in u@106@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@106@01 $Ref) (v@107@01 $Ref)) (!
  (and
    (=>
      (Set_in u@106@01 g1@67@01)
      (and
        (Set_in u@106@01 g1@67@01)
        (=>
          (Set_in v@107@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@109@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
              :pattern ((inv@109@01 r))
              :qid |quant-u-6756|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@107@01 g1@67@01) (not (Set_in v@107@01 g1@67@01)))))
    (or (Set_in u@106@01 g1@67@01) (not (Set_in u@106@01 g1@67@01)))
    (=>
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))
      (and
        (Set_in u@106@01 g1@67@01)
        (Set_in v@107@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) r) r))
          :pattern ((inv@114@01 r))
          :qid |quant-u-6759|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@106@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))))
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))))
  :pattern ((Set_in u@106@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@106@01 v@107@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@106@01 $Ref) (v@107@01 $Ref)) (!
  (and
    (=>
      (Set_in u@106@01 g1@67@01)
      (and
        (Set_in u@106@01 g1@67@01)
        (=>
          (Set_in v@107@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@109@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
              :pattern ((inv@109@01 r))
              :qid |quant-u-6756|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@107@01 g1@67@01) (not (Set_in v@107@01 g1@67@01)))))
    (or (Set_in u@106@01 g1@67@01) (not (Set_in u@106@01 g1@67@01)))
    (=>
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))
      (and
        (Set_in u@106@01 g1@67@01)
        (Set_in v@107@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) r) r))
          :pattern ((inv@114@01 r))
          :qid |quant-u-6759|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@106@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))))
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))))
  :pattern ((Set_in v@107@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@106@01 $Ref) (v@107@01 $Ref)) (!
  (and
    (=>
      (Set_in u@106@01 g1@67@01)
      (and
        (Set_in u@106@01 g1@67@01)
        (=>
          (Set_in v@107@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@109@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
              :pattern ((inv@109@01 r))
              :qid |quant-u-6756|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@107@01 g1@67@01) (not (Set_in v@107@01 g1@67@01)))))
    (or (Set_in u@106@01 g1@67@01) (not (Set_in u@106@01 g1@67@01)))
    (=>
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))
      (and
        (Set_in u@106@01 g1@67@01)
        (Set_in v@107@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) r) r))
          :pattern ((inv@114@01 r))
          :qid |quant-u-6759|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@106@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))))
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))))
  :pattern ((Set_in v@107@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@106@01 v@107@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@106@01 $Ref) (v@107@01 $Ref)) (!
  (and
    (=>
      (Set_in u@106@01 g1@67@01)
      (and
        (Set_in u@106@01 g1@67@01)
        (=>
          (Set_in v@107@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@109@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
              :pattern ((inv@109@01 r))
              :qid |quant-u-6756|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@107@01 g1@67@01) (not (Set_in v@107@01 g1@67@01)))))
    (or (Set_in u@106@01 g1@67@01) (not (Set_in u@106@01 g1@67@01)))
    (=>
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))
      (and
        (Set_in u@106@01 g1@67@01)
        (Set_in v@107@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) r) r))
          :pattern ((inv@114@01 r))
          :qid |quant-u-6759|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@106@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))))
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@106@01 $Ref) (v@107@01 $Ref)) (!
  (and
    (=>
      (Set_in u@106@01 g1@67@01)
      (and
        (Set_in u@106@01 g1@67@01)
        (=>
          (Set_in v@107@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@109@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@111@01  $FVF<next>) r) r))
              :pattern ((inv@109@01 r))
              :qid |quant-u-6756|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@107@01 g1@67@01) (not (Set_in v@107@01 g1@67@01)))))
    (or (Set_in u@106@01 g1@67@01) (not (Set_in u@106@01 g1@67@01)))
    (=>
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))
      (and
        (Set_in u@106@01 g1@67@01)
        (Set_in v@107@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@114@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@116@01  $FVF<next>) r) r))
          :pattern ((inv@114@01 r))
          :qid |quant-u-6759|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@106@01 g1@67@01)
          (and
            (Set_in v@107@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))))
      (and
        (Set_in u@106@01 g1@67@01)
        (and
          (Set_in v@107@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@106@01 v@107@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@106@01 $Ref) (v@107@01 $Ref)) (!
  (=>
    (and
      (Set_in u@106@01 g1@67@01)
      (and
        (Set_in v@107@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@106@01 v@107@01))
  :pattern ((Set_in u@106@01 g1@67@01) (Set_in v@107@01 g1@67@01))
  :pattern ((Set_in u@106@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))
  :pattern ((Set_in u@106@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@106@01 v@107@01))
  :pattern ((Set_in v@107@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))
  :pattern ((Set_in v@107@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@106@01 v@107@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@112@01  $FVF<next>)) g0@66@01) u@106@01 v@107@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@117@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@106@01 v@107@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117|)))
(pop) ; 2
(push) ; 2
; [exec]
; inhale apply_noExit($$((g0 union g1)), (g0 union g1), g0)
(declare-const $t@118@01 $Snap)
(assert (= $t@118@01 $Snap.unit))
; [eval] apply_noExit($$((g0 union g1)), (g0 union g1), g0)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@119@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@119@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 4
(declare-fun inv@120@01 ($Ref) $Ref)
(declare-fun img@121@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@119@01 $Ref) (n2@119@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@119@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n1@119@01) n1@119@01))
      (and
        (Set_in n2@119@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n2@119@01) n2@119@01))
      (= n1@119@01 n2@119@01))
    (= n1@119@01 n2@119@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@119@01 $Ref)) (!
  (=>
    (Set_in n@119@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@120@01 n@119@01) n@119@01) (img@121@01 n@119@01)))
  :pattern ((Set_in n@119@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@120@01 n@119@01))
  :pattern ((img@121@01 n@119@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@121@01 r) (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@120@01 r) r))
  :pattern ((inv@120@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
  :pattern ((inv@120@01 r))
  :qid |quant-u-6762|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01))
      (img@121@01 r)
      (= r (inv@120@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6763|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@122@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))
      (and (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01)) (img@121@01 r)))
    (=>
      (and (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01)) (img@121@01 r))
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>))))
  :qid |qp.fvfDomDef84|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01)) (img@121@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01)) (img@121@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef83|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@119@01 $Ref)) (!
  (=>
    (Set_in n@119@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@120@01 n@119@01) n@119@01) (img@121@01 n@119@01)))
  :pattern ((Set_in n@119@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@120@01 n@119@01))
  :pattern ((img@121@01 n@119@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@121@01 r) (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@120@01 r) r))
  :pattern ((inv@120@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))
      (and (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01)) (img@121@01 r)))
    (=>
      (and (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01)) (img@121@01 r))
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>))))
  :qid |qp.fvfDomDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01)) (img@121@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01)) (img@121@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef83|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@120@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
    :pattern ((inv@120@01 r))
    :qid |quant-u-6762|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
; [eval] (g0 union g1)
(assert (apply_noExit<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) (Set_union g0@66@01 g1@67@01) g0@66@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale apply_TCFraming(g0, g1)
(declare-const $t@123@01 $Snap)
(assert (= $t@123@01 $Snap.unit))
; [eval] apply_TCFraming(g0, g1)
(set-option :timeout 0)
(push) ; 3
(declare-const n@124@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@124@01 g0@66@01))
(pop) ; 4
(declare-fun inv@125@01 ($Ref) $Ref)
(declare-fun img@126@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@127@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@127@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@127@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@127@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@127@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@127@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef87|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@124@01 $Ref) (n2@124@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@124@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@127@01  $FVF<next>) n1@124@01) n1@124@01))
      (and
        (Set_in n2@124@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@127@01  $FVF<next>) n2@124@01) n2@124@01))
      (= n1@124@01 n2@124@01))
    (= n1@124@01 n2@124@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@124@01 $Ref)) (!
  (=>
    (Set_in n@124@01 g0@66@01)
    (and (= (inv@125@01 n@124@01) n@124@01) (img@126@01 n@124@01)))
  :pattern ((Set_in n@124@01 g0@66@01))
  :pattern ((inv@125@01 n@124@01))
  :pattern ((img@126@01 n@124@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@126@01 r) (Set_in (inv@125@01 r) g0@66@01)) (= (inv@125@01 r) r))
  :pattern ((inv@125@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@125@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@127@01  $FVF<next>) r) r))
  :pattern ((inv@125@01 r))
  :qid |quant-u-6765|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@125@01 r) g0@66@01) (img@126@01 r) (= r (inv@125@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6766|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@128@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))
      (and (Set_in (inv@125@01 r) g0@66@01) (img@126@01 r)))
    (=>
      (and (Set_in (inv@125@01 r) g0@66@01) (img@126@01 r))
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>))))
  :qid |qp.fvfDomDef91|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@125@01 r) g0@66@01) (img@126@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@125@01 r) g0@66@01) (img@126@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef90|)))
(declare-const n@129@01 $Ref)
(push) ; 4
; [eval] (n in g1)
(assert (Set_in n@129@01 g1@67@01))
(pop) ; 4
(declare-fun inv@130@01 ($Ref) $Ref)
(declare-fun img@131@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@132@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@132@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@132@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@129@01 $Ref) (n2@129@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@129@01 g1@67@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) n1@129@01) n1@129@01))
      (and
        (Set_in n2@129@01 g1@67@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) n2@129@01) n2@129@01))
      (= n1@129@01 n2@129@01))
    (= n1@129@01 n2@129@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@129@01 $Ref)) (!
  (=>
    (Set_in n@129@01 g1@67@01)
    (and (= (inv@130@01 n@129@01) n@129@01) (img@131@01 n@129@01)))
  :pattern ((Set_in n@129@01 g1@67@01))
  :pattern ((inv@130@01 n@129@01))
  :pattern ((img@131@01 n@129@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@131@01 r) (Set_in (inv@130@01 r) g1@67@01)) (= (inv@130@01 r) r))
  :pattern ((inv@130@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@130@01 r) g1@67@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
  :pattern ((inv@130@01 r))
  :qid |quant-u-6768|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@130@01 r) g1@67@01) (img@131@01 r) (= r (inv@130@01 r)))
    (>
      (+
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6769|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@133@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@133@01  $FVF<next>)))
      (and (Set_in (inv@130@01 r) g1@67@01) (img@131@01 r)))
    (=>
      (and (Set_in (inv@130@01 r) g1@67@01) (img@131@01 r))
      (Set_in r ($FVF.domain_next (as sm@133@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@133@01  $FVF<next>))))
  :qid |qp.fvfDomDef98|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@130@01 r) g1@67@01) (img@131@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@130@01 r) g1@67@01) (img@131@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef97|)))
; [eval] (g1 intersection g0) == Set[Ref]()
; [eval] (g1 intersection g0)
; [eval] Set[Ref]()
(push) ; 4
(assert (not (Set_equal (Set_intersection g1@67@01 g0@66@01) (as Set_empty  Set<$Ref>))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal (Set_intersection g1@67@01 g0@66@01) (as Set_empty  Set<$Ref>)))
(assert (apply_TCFraming%precondition ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@133@01  $FVF<next>))
    $Snap.unit)) g0@66@01 g1@67@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@127@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@127@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@127@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@127@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@127@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef87|)))
(assert (forall ((n@124@01 $Ref)) (!
  (=>
    (Set_in n@124@01 g0@66@01)
    (and (= (inv@125@01 n@124@01) n@124@01) (img@126@01 n@124@01)))
  :pattern ((Set_in n@124@01 g0@66@01))
  :pattern ((inv@125@01 n@124@01))
  :pattern ((img@126@01 n@124@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@126@01 r) (Set_in (inv@125@01 r) g0@66@01)) (= (inv@125@01 r) r))
  :pattern ((inv@125@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))
      (and (Set_in (inv@125@01 r) g0@66@01) (img@126@01 r)))
    (=>
      (and (Set_in (inv@125@01 r) g0@66@01) (img@126@01 r))
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>))))
  :qid |qp.fvfDomDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@125@01 r) g0@66@01) (img@126@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@125@01 r) g0@66@01) (img@126@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@132@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@132@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
(assert (forall ((n@129@01 $Ref)) (!
  (=>
    (Set_in n@129@01 g1@67@01)
    (and (= (inv@130@01 n@129@01) n@129@01) (img@131@01 n@129@01)))
  :pattern ((Set_in n@129@01 g1@67@01))
  :pattern ((inv@130@01 n@129@01))
  :pattern ((img@131@01 n@129@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@131@01 r) (Set_in (inv@130@01 r) g1@67@01)) (= (inv@130@01 r) r))
  :pattern ((inv@130@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@133@01  $FVF<next>)))
      (and (Set_in (inv@130@01 r) g1@67@01) (img@131@01 r)))
    (=>
      (and (Set_in (inv@130@01 r) g1@67@01) (img@131@01 r))
      (Set_in r ($FVF.domain_next (as sm@133@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@133@01  $FVF<next>))))
  :qid |qp.fvfDomDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@130@01 r) g1@67@01) (img@131@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@130@01 r) g1@67@01) (img@131@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef97|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@125@01 r) g0@66@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@127@01  $FVF<next>) r) r))
    :pattern ((inv@125@01 r))
    :qid |quant-u-6765|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@130@01 r) g1@67@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
    :pattern ((inv@130@01 r))
    :qid |quant-u-6768|))
  (Set_equal (Set_intersection g1@67@01 g0@66@01) (as Set_empty  Set<$Ref>))
  (apply_TCFraming%precondition ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>))
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@133@01  $FVF<next>))
      $Snap.unit)) g0@66@01 g1@67@01)))
(assert (apply_TCFraming ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@133@01  $FVF<next>))
    $Snap.unit)) g0@66@01 g1@67@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (Set_in $Ref.null (Set_union g0@66@01 g1@67@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null (Set_union g0@66@01 g1@67@01))))
(declare-const n$3@134@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$3@134@01 (Set_union g0@66@01 g1@67@01)))
(declare-const sm@135@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@135@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@135@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@135@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@135@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@135@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef101|)))
(pop) ; 3
(declare-fun inv@136@01 ($Ref) $Ref)
(declare-fun img@137@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@135@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@135@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@135@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@135@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@135@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef101|)))
; Nested auxiliary terms: non-globals
(declare-const sm@138@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef104|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@134@01 $Ref) (n$32@134@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$31@134@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$31@134@01) n$31@134@01))
      (and
        (Set_in n$32@134@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$32@134@01) n$32@134@01))
      (= n$31@134@01 n$32@134@01))
    (= n$31@134@01 n$32@134@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@134@01 $Ref)) (!
  (=>
    (Set_in n$3@134@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@136@01 n$3@134@01) n$3@134@01) (img@137@01 n$3@134@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@135@01  $FVF<next>) n$3@134@01) n$3@134@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@137@01 r) (Set_in (inv@136@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@136@01 r) r))
  :pattern ((inv@136@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@136@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
  :pattern ((inv@136@01 r))
  :qid |quant-u-6771|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@139@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@136@01 r) (Set_union g0@66@01 g1@67@01))
      (img@137@01 r)
      (= r (inv@136@01 r)))
    ($Perm.min
      (ite
        (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@140@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@136@01 r) (Set_union g0@66@01 g1@67@01))
      (img@137@01 r)
      (= r (inv@136@01 r)))
    ($Perm.min
      (ite
        (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@139@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
        $Perm.Write
        $Perm.No)
      (pTaken@139@01 r))
    $Perm.No)
  
  :qid |quant-u-6773|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@136@01 r) (Set_union g0@66@01 g1@67@01))
      (img@137@01 r)
      (= r (inv@136@01 r)))
    (= (- $Perm.Write (pTaken@139@01 r)) $Perm.No))
  
  :qid |quant-u-6774|))))
(check-sat)
; unknown
(pop) ; 3
; 0.46s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
        $Perm.Write
        $Perm.No)
      (pTaken@140@01 r))
    $Perm.No)
  
  :qid |quant-u-6775|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@136@01 r) (Set_union g0@66@01 g1@67@01))
      (img@137@01 r)
      (= r (inv@136@01 r)))
    (= (- (- $Perm.Write (pTaken@139@01 r)) (pTaken@140@01 r)) $Perm.No))
  
  :qid |quant-u-6776|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$4: Ref :: { (n$4.next in (g0 union g1)) } { (n$4 in (g0 union g1)), n$4.next } (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1)))
(declare-const n$4@141@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1))
; [eval] (n$4 in (g0 union g1)) && n$4.next != null
; [eval] (n$4 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 27 | !(n$4@141@01 in g0@66@01 ∪ g1@67@01) | live]
; [else-branch: 27 | n$4@141@01 in g0@66@01 ∪ g1@67@01 | live]
(push) ; 5
; [then-branch: 27 | !(n$4@141@01 in g0@66@01 ∪ g1@67@01)]
(assert (not (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 27 | n$4@141@01 in g0@66@01 ∪ g1@67@01]
(assert (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef102|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef103|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef104|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$4@141@01) (Set_in (inv@71@01 n$4@141@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$4@141@01) (Set_in (inv@76@01 n$4@141@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef104|)))
(assert (=>
  (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
  (and
    (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01))))
(assert (or
  (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
  (not (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01)))))
(push) ; 4
; [then-branch: 28 | n$4@141@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@138@01, n$4@141@01) != Null | live]
; [else-branch: 28 | !(n$4@141@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@138@01, n$4@141@01) != Null) | live]
(push) ; 5
; [then-branch: 28 | n$4@141@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@138@01, n$4@141@01) != Null]
(assert (and
  (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
  (not (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null))))
; [eval] (n$4.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef102|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef103|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef104|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$4@141@01) (Set_in (inv@71@01 n$4@141@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$4@141@01) (Set_in (inv@76@01 n$4@141@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 28 | !(n$4@141@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@138@01, n$4@141@01) != Null)]
(assert (not
  (and
    (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef104|)))
(assert (=>
  (and
    (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null)))
  (and
    (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (not
        (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null))))
  (and
    (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@138@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@138@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef104|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@141@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01)))
    (or
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (not (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))))
    (=>
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null)))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01)))
    (or
      (not
        (and
          (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
          (not
            (=
              ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01)
              $Ref.null))))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) (Set_union g0@66@01 g1@67@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31-aux|)))
(assert (forall ((n$4@141@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01)))
    (or
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (not (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))))
    (=>
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null)))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01)))
    (or
      (not
        (and
          (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
          (not
            (=
              ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01)
              $Ref.null))))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null)))))
  :pattern ((Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31-aux|)))
(push) ; 3
(assert (not (forall ((n$4@141@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (not
        (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$4@141@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (not
        (= ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n$4@141@01) n$4@141@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31|)))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g1) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v))
(declare-const u@142@01 $Ref)
(declare-const v@143@01 $Ref)
(push) ; 3
; [eval] (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && (v in g1)
; [eval] (u in g0)
(push) ; 4
; [then-branch: 29 | !(u@142@01 in g0@66@01) | live]
; [else-branch: 29 | u@142@01 in g0@66@01 | live]
(push) ; 5
; [then-branch: 29 | !(u@142@01 in g0@66@01)]
(assert (not (Set_in u@142@01 g0@66@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 29 | u@142@01 in g0@66@01]
(assert (Set_in u@142@01 g0@66@01))
; [eval] (v in g1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in u@142@01 g0@66@01) (not (Set_in u@142@01 g0@66@01))))
(push) ; 4
; [then-branch: 30 | u@142@01 in g0@66@01 && v@143@01 in g1@67@01 | live]
; [else-branch: 30 | !(u@142@01 in g0@66@01 && v@143@01 in g1@67@01) | live]
(push) ; 5
; [then-branch: 30 | u@142@01 in g0@66@01 && v@143@01 in g1@67@01]
(assert (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
; [eval] !exists_path($$((g0 union g1)), u, v)
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@144@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@144@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@145@01 ($Ref) $Ref)
(declare-fun img@146@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@144@01 $Ref) (n2@144@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@144@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n1@144@01) n1@144@01))
      (and
        (Set_in n2@144@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n2@144@01) n2@144@01))
      (= n1@144@01 n2@144@01))
    (= n1@144@01 n2@144@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@144@01 $Ref)) (!
  (=>
    (Set_in n@144@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@145@01 n@144@01) n@144@01) (img@146@01 n@144@01)))
  :pattern ((Set_in n@144@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@145@01 n@144@01))
  :pattern ((img@146@01 n@144@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@146@01 r) (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
  :pattern ((inv@145@01 r))
  :qid |quant-u-6778|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
      (img@146@01 r)
      (= r (inv@145@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6779|))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(declare-const sm@147@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r)))
    (=>
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>))))
  :qid |qp.fvfDomDef108|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef106|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef107|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@144@01 $Ref)) (!
  (=>
    (Set_in n@144@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@145@01 n@144@01) n@144@01) (img@146@01 n@144@01)))
  :pattern ((Set_in n@144@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@145@01 n@144@01))
  :pattern ((img@146@01 n@144@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@146@01 r) (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r)))
    (=>
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>))))
  :qid |qp.fvfDomDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef106|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef107|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
    :pattern ((inv@145@01 r))
    :qid |quant-u-6778|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 30 | !(u@142@01 in g0@66@01 && v@143@01 in g1@67@01)]
(assert (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((n@144@01 $Ref)) (!
  (=>
    (Set_in n@144@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@145@01 n@144@01) n@144@01) (img@146@01 n@144@01)))
  :pattern ((Set_in n@144@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@145@01 n@144@01))
  :pattern ((img@146@01 n@144@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@146@01 r) (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r)))
    (=>
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>))))
  :qid |qp.fvfDomDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef106|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef107|)))
(assert (=>
  (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
  (and
    (Set_in u@142@01 g0@66@01)
    (Set_in v@143@01 g1@67@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
      :pattern ((inv@145@01 r))
      :qid |quant-u-6778|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
  (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@144@01 $Ref)) (!
  (=>
    (Set_in n@144@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@145@01 n@144@01) n@144@01) (img@146@01 n@144@01)))
  :pattern ((Set_in n@144@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@145@01 n@144@01))
  :pattern ((img@146@01 n@144@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@146@01 r) (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r)))
    (=>
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>))))
  :qid |qp.fvfDomDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef106|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef107|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (and
    (or (Set_in u@142@01 g0@66@01) (not (Set_in u@142@01 g0@66@01)))
    (=>
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
      (and
        (Set_in u@142@01 g0@66@01)
        (Set_in v@143@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
          :pattern ((inv@145@01 r))
          :qid |quant-u-6778|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
  :pattern ((Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (and
    (or (Set_in u@142@01 g0@66@01) (not (Set_in u@142@01 g0@66@01)))
    (=>
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
      (and
        (Set_in u@142@01 g0@66@01)
        (Set_in v@143@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
          :pattern ((inv@145@01 r))
          :qid |quant-u-6778|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
  :pattern ((Set_in u@142@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (and
    (or (Set_in u@142@01 g0@66@01) (not (Set_in u@142@01 g0@66@01)))
    (=>
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
      (and
        (Set_in u@142@01 g0@66@01)
        (Set_in v@143@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
          :pattern ((inv@145@01 r))
          :qid |quant-u-6778|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
  :pattern ((Set_in v@143@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (and
    (or (Set_in u@142@01 g0@66@01) (not (Set_in u@142@01 g0@66@01)))
    (=>
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
      (and
        (Set_in u@142@01 g0@66@01)
        (Set_in v@143@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
          :pattern ((inv@145@01 r))
          :qid |quant-u-6778|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (=>
    (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
  :pattern ((Set_in u@142@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((Set_in v@143@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91_precondition|)))
(push) ; 3
(assert (not (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (=>
    (and
      (=>
        (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01)))
  :pattern ((Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
  :pattern ((Set_in u@142@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((Set_in v@143@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91|))))
(check-sat)
; unsat
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (=>
    (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01)))
  :pattern ((Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
  :pattern ((Set_in u@142@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((Set_in v@143@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91|)))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g0) } { (u in g0), exists_path($$(g0), u, v) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g0), exists_path($$(g0), u, v) } { (v in g0), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@148@01 $Ref)
(declare-const v@149@01 $Ref)
(push) ; 3
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v))
; [eval] (u in g0)
(push) ; 4
; [then-branch: 31 | !(u@148@01 in g0@66@01) | live]
; [else-branch: 31 | u@148@01 in g0@66@01 | live]
(push) ; 5
; [then-branch: 31 | !(u@148@01 in g0@66@01)]
(assert (not (Set_in u@148@01 g0@66@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 31 | u@148@01 in g0@66@01]
(assert (Set_in u@148@01 g0@66@01))
; [eval] (v in g0)
(push) ; 6
; [then-branch: 32 | !(v@149@01 in g0@66@01) | live]
; [else-branch: 32 | v@149@01 in g0@66@01 | live]
(push) ; 7
; [then-branch: 32 | !(v@149@01 in g0@66@01)]
(assert (not (Set_in v@149@01 g0@66@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 32 | v@149@01 in g0@66@01]
(assert (Set_in v@149@01 g0@66@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@150@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@150@01 g0@66@01))
(pop) ; 9
(declare-fun inv@151@01 ($Ref) $Ref)
(declare-fun img@152@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@150@01 $Ref) (n2@150@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@150@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n1@150@01) n1@150@01))
      (and
        (Set_in n2@150@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) n2@150@01) n2@150@01))
      (= n1@150@01 n2@150@01))
    (= n1@150@01 n2@150@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g0@66@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g0@66@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g0@66@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@151@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
  :pattern ((inv@151@01 r))
  :qid |quant-u-6781|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r) (= r (inv@151@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6782|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@153@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>))))
  :qid |qp.fvfDomDef112|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef111|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g0@66@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g0@66@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g0@66@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>))))
  :qid |qp.fvfDomDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef111|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@151@01 r) g0@66@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
    :pattern ((inv@151@01 r))
    :qid |quant-u-6781|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g0@66@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g0@66@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g0@66@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>))))
  :qid |qp.fvfDomDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef111|)))
(assert (=>
  (Set_in v@149@01 g0@66@01)
  (and
    (Set_in v@149@01 g0@66@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@151@01 r) g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
      :pattern ((inv@151@01 r))
      :qid |quant-u-6781|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01))))
(assert (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g0@66@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g0@66@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g0@66@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>))))
  :qid |qp.fvfDomDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef111|)))
(assert (=>
  (Set_in u@148@01 g0@66@01)
  (and
    (Set_in u@148@01 g0@66@01)
    (=>
      (Set_in v@149@01 g0@66@01)
      (and
        (Set_in v@149@01 g0@66@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@151@01 r) g0@66@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
          :pattern ((inv@151@01 r))
          :qid |quant-u-6781|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
    (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01))))))
(assert (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01))))
(push) ; 4
; [then-branch: 33 | u@148@01 in g0@66@01 && v@149@01 in g0@66@01 && exists_path[Bool]($$(sm@153@01, g0@66@01), u@148@01, v@149@01) | live]
; [else-branch: 33 | !(u@148@01 in g0@66@01 && v@149@01 in g0@66@01 && exists_path[Bool]($$(sm@153@01, g0@66@01), u@148@01, v@149@01)) | live]
(push) ; 5
; [then-branch: 33 | u@148@01 in g0@66@01 && v@149@01 in g0@66@01 && exists_path[Bool]($$(sm@153@01, g0@66@01), u@148@01, v@149@01)]
(assert (and
  (Set_in u@148@01 g0@66@01)
  (and
    (Set_in v@149@01 g0@66@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@154@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@154@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@155@01 ($Ref) $Ref)
(declare-fun img@156@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@157@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef115|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@154@01 $Ref) (n2@154@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@154@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) n1@154@01) n1@154@01))
      (and
        (Set_in n2@154@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) n2@154@01) n2@154@01))
      (= n1@154@01 n2@154@01))
    (= n1@154@01 n2@154@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@156@01 r) (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
  :pattern ((inv@155@01 r))
  :qid |quant-u-6784|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
      (img@156@01 r)
      (= r (inv@155@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6785|))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(declare-const sm@158@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef119|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef118|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@156@01 r) (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef119|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef118|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
    :pattern ((inv@155@01 r))
    :qid |quant-u-6784|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 33 | !(u@148@01 in g0@66@01 && v@149@01 in g0@66@01 && exists_path[Bool]($$(sm@153@01, g0@66@01), u@148@01, v@149@01))]
(assert (not
  (and
    (Set_in u@148@01 g0@66@01)
    (and
      (Set_in v@149@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@156@01 r) (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef119|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef118|)))
(assert (=>
  (and
    (Set_in u@148@01 g0@66@01)
    (and
      (Set_in v@149@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
  (and
    (Set_in u@148@01 g0@66@01)
    (Set_in v@149@01 g0@66@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
      :pattern ((inv@155@01 r))
      :qid |quant-u-6784|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
  (and
    (Set_in u@148@01 g0@66@01)
    (and
      (Set_in v@149@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g0@66@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g0@66@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g0@66@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>))))
  :qid |qp.fvfDomDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@156@01 r) (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef119|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef118|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-6781|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-6784|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-6781|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-6784|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-6781|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-6784|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-6781|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-6784|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-6781|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-6784|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-6781|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-6784|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@138@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-6781|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-6784|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (and (Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
  :pattern ((Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117_precondition|)))
(push) ; 3
(assert (not (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (and (Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01))
        (=>
          (and
            (Set_in u@148@01 g0@66@01)
            (and
              (Set_in v@149@01 g0@66@01)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117|))))
(check-sat)
; unsat
(pop) ; 3
; 0.39s
; (get-info :all-statistics)
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (=>
    (and
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117|)))
; [eval] (forall u: Ref, v: Ref :: { (u in g1), (v in g1) } { (u in g1), exists_path($$(g0), u, v) } { (u in g1), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$(g0), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@159@01 $Ref)
(declare-const v@160@01 $Ref)
(push) ; 3
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v))
; [eval] (u in g1)
(push) ; 4
; [then-branch: 34 | !(u@159@01 in g1@67@01) | live]
; [else-branch: 34 | u@159@01 in g1@67@01 | live]
(push) ; 5
; [then-branch: 34 | !(u@159@01 in g1@67@01)]
(assert (not (Set_in u@159@01 g1@67@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 34 | u@159@01 in g1@67@01]
(assert (Set_in u@159@01 g1@67@01))
; [eval] (v in g1)
(push) ; 6
; [then-branch: 35 | !(v@160@01 in g1@67@01) | live]
; [else-branch: 35 | v@160@01 in g1@67@01 | live]
(push) ; 7
; [then-branch: 35 | !(v@160@01 in g1@67@01)]
(assert (not (Set_in v@160@01 g1@67@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 35 | v@160@01 in g1@67@01]
(assert (Set_in v@160@01 g1@67@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@161@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@161@01 g0@66@01))
(pop) ; 9
(declare-fun inv@162@01 ($Ref) $Ref)
(declare-fun img@163@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@164@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef122|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@161@01 $Ref) (n2@161@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@161@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) n1@161@01) n1@161@01))
      (and
        (Set_in n2@161@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) n2@161@01) n2@161@01))
      (= n1@161@01 n2@161@01))
    (= n1@161@01 n2@161@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g0@66@01)
    (and (= (inv@162@01 n@161@01) n@161@01) (img@163@01 n@161@01)))
  :pattern ((Set_in n@161@01 g0@66@01))
  :pattern ((inv@162@01 n@161@01))
  :pattern ((img@163@01 n@161@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@163@01 r) (Set_in (inv@162@01 r) g0@66@01)) (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@162@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
  :pattern ((inv@162@01 r))
  :qid |quant-u-6787|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r) (= r (inv@162@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6788|))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(declare-const sm@165@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r)))
    (=>
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef122|)))
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g0@66@01)
    (and (= (inv@162@01 n@161@01) n@161@01) (img@163@01 n@161@01)))
  :pattern ((Set_in n@161@01 g0@66@01))
  :pattern ((inv@162@01 n@161@01))
  :pattern ((img@163@01 n@161@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@163@01 r) (Set_in (inv@162@01 r) g0@66@01)) (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r)))
    (=>
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@162@01 r) g0@66@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
    :pattern ((inv@162@01 r))
    :qid |quant-u-6787|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef122|)))
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g0@66@01)
    (and (= (inv@162@01 n@161@01) n@161@01) (img@163@01 n@161@01)))
  :pattern ((Set_in n@161@01 g0@66@01))
  :pattern ((inv@162@01 n@161@01))
  :pattern ((img@163@01 n@161@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@163@01 r) (Set_in (inv@162@01 r) g0@66@01)) (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r)))
    (=>
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert (=>
  (Set_in v@160@01 g1@67@01)
  (and
    (Set_in v@160@01 g1@67@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@162@01 r) g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
      :pattern ((inv@162@01 r))
      :qid |quant-u-6787|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01))))
(assert (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef122|)))
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g0@66@01)
    (and (= (inv@162@01 n@161@01) n@161@01) (img@163@01 n@161@01)))
  :pattern ((Set_in n@161@01 g0@66@01))
  :pattern ((inv@162@01 n@161@01))
  :pattern ((img@163@01 n@161@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@163@01 r) (Set_in (inv@162@01 r) g0@66@01)) (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r)))
    (=>
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert (=>
  (Set_in u@159@01 g1@67@01)
  (and
    (Set_in u@159@01 g1@67@01)
    (=>
      (Set_in v@160@01 g1@67@01)
      (and
        (Set_in v@160@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@162@01 r) g0@66@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
          :pattern ((inv@162@01 r))
          :qid |quant-u-6787|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
    (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01))))))
(assert (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01))))
(push) ; 4
; [then-branch: 36 | u@159@01 in g1@67@01 && v@160@01 in g1@67@01 && exists_path[Bool]($$(sm@165@01, g0@66@01), u@159@01, v@160@01) | live]
; [else-branch: 36 | !(u@159@01 in g1@67@01 && v@160@01 in g1@67@01 && exists_path[Bool]($$(sm@165@01, g0@66@01), u@159@01, v@160@01)) | live]
(push) ; 5
; [then-branch: 36 | u@159@01 in g1@67@01 && v@160@01 in g1@67@01 && exists_path[Bool]($$(sm@165@01, g0@66@01), u@159@01, v@160@01)]
(assert (and
  (Set_in u@159@01 g1@67@01)
  (and
    (Set_in v@160@01 g1@67@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@166@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@166@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@167@01 ($Ref) $Ref)
(declare-fun img@168@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@169@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef129|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@166@01 $Ref) (n2@166@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@166@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) n1@166@01) n1@166@01))
      (and
        (Set_in n2@166@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) n2@166@01) n2@166@01))
      (= n1@166@01 n2@166@01))
    (= n1@166@01 n2@166@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
  :pattern ((inv@167@01 r))
  :qid |quant-u-6790|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
      (img@168@01 r)
      (= r (inv@167@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6791|))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(declare-const sm@170@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>))))
  :qid |qp.fvfDomDef133|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef132|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef129|)))
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>))))
  :qid |qp.fvfDomDef133|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef132|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
    :pattern ((inv@167@01 r))
    :qid |quant-u-6790|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 36 | !(u@159@01 in g1@67@01 && v@160@01 in g1@67@01 && exists_path[Bool]($$(sm@165@01, g0@66@01), u@159@01, v@160@01))]
(assert (not
  (and
    (Set_in u@159@01 g1@67@01)
    (and
      (Set_in v@160@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef129|)))
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>))))
  :qid |qp.fvfDomDef133|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef132|)))
(assert (=>
  (and
    (Set_in u@159@01 g1@67@01)
    (and
      (Set_in v@160@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
  (and
    (Set_in u@159@01 g1@67@01)
    (Set_in v@160@01 g1@67@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
      :pattern ((inv@167@01 r))
      :qid |quant-u-6790|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
  (and
    (Set_in u@159@01 g1@67@01)
    (and
      (Set_in v@160@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef122|)))
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g0@66@01)
    (and (= (inv@162@01 n@161@01) n@161@01) (img@163@01 n@161@01)))
  :pattern ((Set_in n@161@01 g0@66@01))
  :pattern ((inv@162@01 n@161@01))
  :pattern ((img@163@01 n@161@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@163@01 r) (Set_in (inv@162@01 r) g0@66@01)) (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r)))
    (=>
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef129|)))
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>))))
  :qid |qp.fvfDomDef133|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef132|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-6787|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-6790|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-6787|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-6790|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-6787|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-6790|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-6787|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-6790|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-6787|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-6790|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-6787|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-6790|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-6787|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-6790|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (and (Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
  :pattern ((Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117_precondition|)))
(push) ; 3
(assert (not (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (and (Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01))
        (=>
          (and
            (Set_in u@159@01 g1@67@01)
            (and
              (Set_in v@160@01 g1@67@01)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (=>
    (and
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117|)))
(pop) ; 2
(pop) ; 1
; ---------- test_framing_sets ----------
(declare-const g0@171@01 Set<$Ref>)
(declare-const g1@172@01 Set<$Ref>)
(declare-const x0@173@01 $Ref)
(declare-const y0@174@01 $Ref)
(declare-const x1@175@01 $Ref)
(declare-const y1@176@01 $Ref)
(declare-const x@177@01 $Ref)
(declare-const g0@178@01 Set<$Ref>)
(declare-const g1@179@01 Set<$Ref>)
(declare-const x0@180@01 $Ref)
(declare-const y0@181@01 $Ref)
(declare-const x1@182@01 $Ref)
(declare-const y1@183@01 $Ref)
(declare-const x@184@01 $Ref)
(push) ; 1
(declare-const $t@185@01 $Snap)
(assert (= $t@185@01 ($Snap.combine ($Snap.first $t@185@01) ($Snap.second $t@185@01))))
(assert (= ($Snap.first $t@185@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@178@01)))
(assert (=
  ($Snap.second $t@185@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@185@01))
    ($Snap.second ($Snap.second $t@185@01)))))
(declare-const n@186@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@186@01 g0@178@01))
(declare-const sm@187@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@188@01 ($Ref) $Ref)
(declare-fun img@189@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@186@01 $Ref) (n2@186@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@186@01 g0@178@01)
      (Set_in n2@186@01 g0@178@01)
      (= n1@186@01 n2@186@01))
    (= n1@186@01 n2@186@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@186@01 $Ref)) (!
  (=>
    (Set_in n@186@01 g0@178@01)
    (and (= (inv@188@01 n@186@01) n@186@01) (img@189@01 n@186@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) n@186@01) n@186@01))
  :qid |quant-u-6793|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (= (inv@188@01 r) r))
  :pattern ((inv@188@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@186@01 $Ref)) (!
  (=> (Set_in n@186@01 g0@178@01) (not (= n@186@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) n@186@01) n@186@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@190@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@188@01 r) g0@178@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) r) r))
  :pattern ((inv@188@01 r))
  :qid |quant-u-6794|)))
(assert (=
  ($Snap.second ($Snap.second $t@185@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@185@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@185@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@191@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 37 | !(n$0@191@01 in g0@178@01) | live]
; [else-branch: 37 | n$0@191@01 in g0@178@01 | live]
(push) ; 4
; [then-branch: 37 | !(n$0@191@01 in g0@178@01)]
(assert (not (Set_in n$0@191@01 g0@178@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 37 | n$0@191@01 in g0@178@01]
(assert (Set_in n$0@191@01 g0@178@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef135|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef136|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))
(push) ; 5
(assert (not (and (img@189@01 n$0@191@01) (Set_in (inv@188@01 n$0@191@01) g0@178@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (=>
  (Set_in n$0@191@01 g0@178@01)
  (and
    (Set_in n$0@191@01 g0@178@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))))
(assert (or (Set_in n$0@191@01 g0@178@01) (not (Set_in n$0@191@01 g0@178@01))))
(push) ; 3
; [then-branch: 38 | n$0@191@01 in g0@178@01 && Lookup(next, sm@190@01, n$0@191@01) != Null | live]
; [else-branch: 38 | !(n$0@191@01 in g0@178@01 && Lookup(next, sm@190@01, n$0@191@01) != Null) | live]
(push) ; 4
; [then-branch: 38 | n$0@191@01 in g0@178@01 && Lookup(next, sm@190@01, n$0@191@01) != Null]
(assert (and
  (Set_in n$0@191@01 g0@178@01)
  (not (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef135|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef136|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))
(push) ; 5
(assert (not (and (img@189@01 n$0@191@01) (Set_in (inv@188@01 n$0@191@01) g0@178@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 38 | !(n$0@191@01 in g0@178@01 && Lookup(next, sm@190@01, n$0@191@01) != Null)]
(assert (not
  (and
    (Set_in n$0@191@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert (=>
  (and
    (Set_in n$0@191@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))
  (and
    (Set_in n$0@191@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@191@01 g0@178@01)
      (not
        (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null))))
  (and
    (Set_in n$0@191@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef136|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@191@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@191@01 g0@178@01)
      (and
        (Set_in n$0@191@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01)))
    (or (Set_in n$0@191@01 g0@178@01) (not (Set_in n$0@191@01 g0@178@01)))
    (=>
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01)))
    (or
      (not
        (and
          (Set_in n$0@191@01 g0@178@01)
          (not
            (=
              ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01)
              $Ref.null))))
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) g0@178@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@393@14@393@23-aux|)))
(assert (forall ((n$0@191@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@191@01 g0@178@01)
      (and
        (Set_in n$0@191@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01)))
    (or (Set_in n$0@191@01 g0@178@01) (not (Set_in n$0@191@01 g0@178@01)))
    (=>
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01)))
    (or
      (not
        (and
          (Set_in n$0@191@01 g0@178@01)
          (not
            (=
              ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01)
              $Ref.null))))
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))))
  :pattern ((Set_in n$0@191@01 g0@178@01) ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@393@14@393@23-aux|)))
(assert (forall ((n$0@191@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@191@01 g0@178@01)
      (not
        (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) g0@178@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) g0@178@01))
  :pattern ((Set_in n$0@191@01 g0@178@01) ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@393@14@393@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@185@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@185@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@185@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@179@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
(declare-const n$1@192@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@192@01 g1@179@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@193@01 ($Ref) $Ref)
(declare-fun img@194@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@192@01 $Ref) (n$12@192@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@192@01 g1@179@01)
      (Set_in n$12@192@01 g1@179@01)
      (= n$11@192@01 n$12@192@01))
    (= n$11@192@01 n$12@192@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@192@01 $Ref)) (!
  (=>
    (Set_in n$1@192@01 g1@179@01)
    (and (= (inv@193@01 n$1@192@01) n$1@192@01) (img@194@01 n$1@192@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) n$1@192@01) n$1@192@01))
  :qid |quant-u-6796|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (= (inv@193@01 r) r))
  :pattern ((inv@193@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@192@01 $Ref)) (!
  (=> (Set_in n$1@192@01 g1@179@01) (not (= n$1@192@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) n$1@192@01) n$1@192@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@192@01 n@186@01)
    (=
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))))
  
  :qid |quant-u-6797|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const sm@195@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@193@01 r) g1@179@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) r) r))
  :pattern ((inv@193@01 r))
  :qid |quant-u-6798|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@196@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 39 | !(n$2@196@01 in g1@179@01) | live]
; [else-branch: 39 | n$2@196@01 in g1@179@01 | live]
(push) ; 4
; [then-branch: 39 | !(n$2@196@01 in g1@179@01)]
(assert (not (Set_in n$2@196@01 g1@179@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 39 | n$2@196@01 in g1@179@01]
(assert (Set_in n$2@196@01 g1@179@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef137|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef138|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef139|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$2@196@01) (Set_in (inv@188@01 n$2@196@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$2@196@01) (Set_in (inv@193@01 n$2@196@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (=>
  (Set_in n$2@196@01 g1@179@01)
  (and
    (Set_in n$2@196@01 g1@179@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))))
(assert (or (Set_in n$2@196@01 g1@179@01) (not (Set_in n$2@196@01 g1@179@01))))
(push) ; 3
; [then-branch: 40 | n$2@196@01 in g1@179@01 && Lookup(next, sm@195@01, n$2@196@01) != Null | live]
; [else-branch: 40 | !(n$2@196@01 in g1@179@01 && Lookup(next, sm@195@01, n$2@196@01) != Null) | live]
(push) ; 4
; [then-branch: 40 | n$2@196@01 in g1@179@01 && Lookup(next, sm@195@01, n$2@196@01) != Null]
(assert (and
  (Set_in n$2@196@01 g1@179@01)
  (not (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef137|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef138|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef139|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$2@196@01) (Set_in (inv@188@01 n$2@196@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$2@196@01) (Set_in (inv@193@01 n$2@196@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 40 | !(n$2@196@01 in g1@179@01 && Lookup(next, sm@195@01, n$2@196@01) != Null)]
(assert (not
  (and
    (Set_in n$2@196@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert (=>
  (and
    (Set_in n$2@196@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))
  (and
    (Set_in n$2@196@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@196@01 g1@179@01)
      (not
        (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null))))
  (and
    (Set_in n$2@196@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef139|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@196@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@196@01 g1@179@01)
      (and
        (Set_in n$2@196@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01)))
    (or (Set_in n$2@196@01 g1@179@01) (not (Set_in n$2@196@01 g1@179@01)))
    (=>
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01)))
    (or
      (not
        (and
          (Set_in n$2@196@01 g1@179@01)
          (not
            (=
              ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01)
              $Ref.null))))
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) g1@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@394@14@394@23-aux|)))
(assert (forall ((n$2@196@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@196@01 g1@179@01)
      (and
        (Set_in n$2@196@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01)))
    (or (Set_in n$2@196@01 g1@179@01) (not (Set_in n$2@196@01 g1@179@01)))
    (=>
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01)))
    (or
      (not
        (and
          (Set_in n$2@196@01 g1@179@01)
          (not
            (=
              ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01)
              $Ref.null))))
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))))
  :pattern ((Set_in n$2@196@01 g1@179@01) ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@394@14@394@23-aux|)))
(assert (forall ((n$2@196@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@196@01 g1@179@01)
      (not
        (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) g1@179@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) g1@179@01))
  :pattern ((Set_in n$2@196@01 g1@179@01) ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@394@14@394@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
  $Snap.unit))
; [eval] (x0 in g0)
(assert (Set_in x0@180@01 g0@178@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
  $Snap.unit))
; [eval] (y0 in g0)
(assert (Set_in y0@181@01 g0@178@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
  $Snap.unit))
; [eval] (x1 in g1)
(assert (Set_in x1@182@01 g1@179@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))
  $Snap.unit))
; [eval] (y1 in g1)
(assert (Set_in y1@183@01 g1@179@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@197@01 $Ref)
(push) ; 2
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 3
; [then-branch: 41 | r@197@01 in g0@178@01 | live]
; [else-branch: 41 | !(r@197@01 in g0@178@01) | live]
(push) ; 4
; [then-branch: 41 | r@197@01 in g0@178@01]
(assert (Set_in r@197@01 g0@178@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 4
(push) ; 4
; [else-branch: 41 | !(r@197@01 in g0@178@01)]
(assert (not (Set_in r@197@01 g0@178@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@197@01 g0@178@01)) (Set_in r@197@01 g0@178@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@197@01 $Ref)) (!
  (or (not (Set_in r@197@01 g0@178@01)) (Set_in r@197@01 g0@178@01))
  :pattern ((Set_in r@197@01 g0@178@01) (Set_in r@197@01 g1@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@397@14@397@34-aux|)))
(assert (forall ((r@197@01 $Ref)) (!
  (=> (Set_in r@197@01 g0@178@01) (not (Set_in r@197@01 g1@179@01)))
  :pattern ((Set_in r@197@01 g0@178@01) (Set_in r@197@01 g1@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@397@14@397@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))
  $Snap.unit))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@198@01 $Ref)
(push) ; 2
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 3
; [then-branch: 42 | r$0@198@01 in g1@179@01 | live]
; [else-branch: 42 | !(r$0@198@01 in g1@179@01) | live]
(push) ; 4
; [then-branch: 42 | r$0@198@01 in g1@179@01]
(assert (Set_in r$0@198@01 g1@179@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 4
(push) ; 4
; [else-branch: 42 | !(r$0@198@01 in g1@179@01)]
(assert (not (Set_in r$0@198@01 g1@179@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@198@01 g1@179@01)) (Set_in r$0@198@01 g1@179@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@198@01 $Ref)) (!
  (or (not (Set_in r$0@198@01 g1@179@01)) (Set_in r$0@198@01 g1@179@01))
  :pattern ((Set_in r$0@198@01 g0@178@01) (Set_in r$0@198@01 g1@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@397@14@397@34-aux|)))
(assert (forall ((r$0@198@01 $Ref)) (!
  (=> (Set_in r$0@198@01 g1@179@01) (not (Set_in r$0@198@01 g0@178@01)))
  :pattern ((Set_in r$0@198@01 g0@178@01) (Set_in r$0@198@01 g1@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@397@14@397@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))))
  $Snap.unit))
; [eval] exists_path($$(g0), x0, y0)
; [eval] $$(g0)
(push) ; 2
(declare-const n@199@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@199@01 g0@178@01))
(pop) ; 3
(declare-fun inv@200@01 ($Ref) $Ref)
(declare-fun img@201@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@199@01 $Ref) (n2@199@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@199@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n1@199@01) n1@199@01))
      (and
        (Set_in n2@199@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n2@199@01) n2@199@01))
      (= n1@199@01 n2@199@01))
    (= n1@199@01 n2@199@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@199@01 $Ref)) (!
  (=>
    (Set_in n@199@01 g0@178@01)
    (and (= (inv@200@01 n@199@01) n@199@01) (img@201@01 n@199@01)))
  :pattern ((Set_in n@199@01 g0@178@01))
  :pattern ((inv@200@01 n@199@01))
  :pattern ((img@201@01 n@199@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@201@01 r) (Set_in (inv@200@01 r) g0@178@01))
    (= (inv@200@01 r) r))
  :pattern ((inv@200@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@200@01 r) g0@178@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) r) r))
  :pattern ((inv@200@01 r))
  :qid |quant-u-6800|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r) (= r (inv@200@01 r)))
    (>
      (+
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6801|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@202@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r)))
    (=>
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>))))
  :qid |qp.fvfDomDef143|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef142|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) g0@178@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@199@01 $Ref)) (!
  (=>
    (Set_in n@199@01 g0@178@01)
    (and (= (inv@200@01 n@199@01) n@199@01) (img@201@01 n@199@01)))
  :pattern ((Set_in n@199@01 g0@178@01))
  :pattern ((inv@200@01 n@199@01))
  :pattern ((img@201@01 n@199@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@201@01 r) (Set_in (inv@200@01 r) g0@178@01))
    (= (inv@200@01 r) r))
  :pattern ((inv@200@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r)))
    (=>
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>))))
  :qid |qp.fvfDomDef143|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef142|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@200@01 r) g0@178@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) r) r))
    :pattern ((inv@200@01 r))
    :qid |quant-u-6800|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) g0@178@01)))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) g0@178@01) x0@180@01 y0@181@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))))
  $Snap.unit))
; [eval] exists_path($$(g1), x1, y1)
; [eval] $$(g1)
(push) ; 2
(declare-const n@203@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@203@01 g1@179@01))
(pop) ; 3
(declare-fun inv@204@01 ($Ref) $Ref)
(declare-fun img@205@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@206@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@206@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@206@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef146|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@203@01 $Ref) (n2@203@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@203@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@206@01  $FVF<next>) n1@203@01) n1@203@01))
      (and
        (Set_in n2@203@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@206@01  $FVF<next>) n2@203@01) n2@203@01))
      (= n1@203@01 n2@203@01))
    (= n1@203@01 n2@203@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 g1@179@01)
    (and (= (inv@204@01 n@203@01) n@203@01) (img@205@01 n@203@01)))
  :pattern ((Set_in n@203@01 g1@179@01))
  :pattern ((inv@204@01 n@203@01))
  :pattern ((img@205@01 n@203@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@205@01 r) (Set_in (inv@204@01 r) g1@179@01))
    (= (inv@204@01 r) r))
  :pattern ((inv@204@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@204@01 r) g1@179@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@206@01  $FVF<next>) r) r))
  :pattern ((inv@204@01 r))
  :qid |quant-u-6803|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r) (= r (inv@204@01 r)))
    (>
      (+
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6804|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@207@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>)))
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r)))
    (=>
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>))))
  :qid |qp.fvfDomDef150|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef149|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@207@01  $FVF<next>)) g1@179@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@206@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@206@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef146|)))
(assert (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 g1@179@01)
    (and (= (inv@204@01 n@203@01) n@203@01) (img@205@01 n@203@01)))
  :pattern ((Set_in n@203@01 g1@179@01))
  :pattern ((inv@204@01 n@203@01))
  :pattern ((img@205@01 n@203@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@205@01 r) (Set_in (inv@204@01 r) g1@179@01))
    (= (inv@204@01 r) r))
  :pattern ((inv@204@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>)))
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r)))
    (=>
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>))))
  :qid |qp.fvfDomDef150|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef149|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@204@01 r) g1@179@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@206@01  $FVF<next>) r) r))
    :pattern ((inv@204@01 r))
    :qid |quant-u-6803|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@207@01  $FVF<next>)) g1@179@01)))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@207@01  $FVF<next>)) g1@179@01) x1@182@01 y1@183@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@208@01 $Snap)
(assert (= $t@208@01 ($Snap.combine ($Snap.first $t@208@01) ($Snap.second $t@208@01))))
(assert (= ($Snap.first $t@208@01) $Snap.unit))
; [eval] !((null in (g1 union g0)))
; [eval] (null in (g1 union g0))
; [eval] (g1 union g0)
(assert (not (Set_in $Ref.null (Set_union g1@179@01 g0@178@01))))
(assert (=
  ($Snap.second $t@208@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@208@01))
    ($Snap.second ($Snap.second $t@208@01)))))
(declare-const n$3@209@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g1 union g0))
; [eval] (g1 union g0)
(assert (Set_in n$3@209@01 (Set_union g1@179@01 g0@178@01)))
(declare-const sm@210@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@211@01 ($Ref) $Ref)
(declare-fun img@212@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@209@01 $Ref) (n$32@209@01 $Ref)) (!
  (=>
    (and
      (Set_in n$31@209@01 (Set_union g1@179@01 g0@178@01))
      (Set_in n$32@209@01 (Set_union g1@179@01 g0@178@01))
      (= n$31@209@01 n$32@209@01))
    (= n$31@209@01 n$32@209@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@209@01 $Ref)) (!
  (=>
    (Set_in n$3@209@01 (Set_union g1@179@01 g0@178@01))
    (and (= (inv@211@01 n$3@209@01) n$3@209@01) (img@212@01 n$3@209@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) n$3@209@01) n$3@209@01))
  :qid |quant-u-6806|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (= (inv@211@01 r) r))
  :pattern ((inv@211@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@209@01 $Ref)) (!
  (=>
    (Set_in n$3@209@01 (Set_union g1@179@01 g0@178@01))
    (not (= n$3@209@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) n$3@209@01) n$3@209@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@213@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) r) r))
  :pattern ((inv@211@01 r))
  :qid |quant-u-6807|)))
(assert (=
  ($Snap.second ($Snap.second $t@208@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@208@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@208@01))) $Snap.unit))
; [eval] (forall n$4: Ref :: { (n$4.next in (g1 union g0)) } { (n$4 in (g1 union g0)), n$4.next } (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0)))
(declare-const n$4@214@01 $Ref)
(push) ; 3
; [eval] (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0))
; [eval] (n$4 in (g1 union g0)) && n$4.next != null
; [eval] (n$4 in (g1 union g0))
; [eval] (g1 union g0)
(push) ; 4
; [then-branch: 43 | !(n$4@214@01 in g1@179@01 ∪ g0@178@01) | live]
; [else-branch: 43 | n$4@214@01 in g1@179@01 ∪ g0@178@01 | live]
(push) ; 5
; [then-branch: 43 | !(n$4@214@01 in g1@179@01 ∪ g0@178@01)]
(assert (not (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 43 | n$4@214@01 in g1@179@01 ∪ g0@178@01]
(assert (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
      (=
        ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
    :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
    :qid |qp.fvfValDef152|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef153|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))
(push) ; 6
(assert (not (and
  (img@212@01 n$4@214@01)
  (Set_in (inv@211@01 n$4@214@01) (Set_union g1@179@01 g0@178@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef153|)))
(assert (=>
  (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
  (and
    (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))))
(assert (or
  (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
  (not (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01)))))
(push) ; 4
; [then-branch: 44 | n$4@214@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@213@01, n$4@214@01) != Null | live]
; [else-branch: 44 | !(n$4@214@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@213@01, n$4@214@01) != Null) | live]
(push) ; 5
; [then-branch: 44 | n$4@214@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@213@01, n$4@214@01) != Null]
(assert (and
  (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
  (not (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null))))
; [eval] (n$4.next in (g1 union g0))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
      (=
        ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
    :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
    :qid |qp.fvfValDef152|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef153|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))
(push) ; 6
(assert (not (and
  (img@212@01 n$4@214@01)
  (Set_in (inv@211@01 n$4@214@01) (Set_union g1@179@01 g0@178@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g1 union g0)
(pop) ; 5
(push) ; 5
; [else-branch: 44 | !(n$4@214@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@213@01, n$4@214@01) != Null)]
(assert (not
  (and
    (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef153|)))
(assert (=>
  (and
    (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))
  (and
    (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (not
        (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null))))
  (and
    (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef153|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@214@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01)))
    (or
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (not (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))))
    (=>
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01)))
    (or
      (not
        (and
          (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
          (not
            (=
              ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01)
              $Ref.null))))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) (Set_union g1@179@01 g0@178@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31-aux|)))
(assert (forall ((n$4@214@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01)))
    (or
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (not (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))))
    (=>
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01)))
    (or
      (not
        (and
          (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
          (not
            (=
              ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01)
              $Ref.null))))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))))
  :pattern ((Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31-aux|)))
(assert (forall ((n$4@214@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (not
        (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@208@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  $Snap.unit))
; [eval] exists_path($$((g0 union g1)), x1, y1)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@215@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@215@01 (Set_union g0@178@01 g1@179@01)))
(pop) ; 4
(declare-fun inv@216@01 ($Ref) $Ref)
(declare-fun img@217@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@215@01 $Ref) (n2@215@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@215@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n1@215@01) n1@215@01))
      (and
        (Set_in n2@215@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n2@215@01) n2@215@01))
      (= n1@215@01 n2@215@01))
    (= n1@215@01 n2@215@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@215@01 $Ref)) (!
  (=>
    (Set_in n@215@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@216@01 n@215@01) n@215@01) (img@217@01 n@215@01)))
  :pattern ((Set_in n@215@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@216@01 n@215@01))
  :pattern ((img@217@01 n@215@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@217@01 r) (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@216@01 r) r))
  :pattern ((inv@216@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) r) r))
  :pattern ((inv@216@01 r))
  :qid |quant-u-6809|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
      (img@217@01 r)
      (= r (inv@216@01 r)))
    (>
      (ite
        (and
          (img@212@01 r)
          (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-6810|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@218@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>)))
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r)))
    (=>
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r))
      (Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>))))
  :qid |qp.fvfDomDef156|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r))
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01))))
    (=
      ($FVF.lookup_next (as sm@218@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@218@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@218@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@218@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@215@01 $Ref)) (!
  (=>
    (Set_in n@215@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@216@01 n@215@01) n@215@01) (img@217@01 n@215@01)))
  :pattern ((Set_in n@215@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@216@01 n@215@01))
  :pattern ((img@217@01 n@215@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@217@01 r) (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@216@01 r) r))
  :pattern ((inv@216@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>)))
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r)))
    (=>
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r))
      (Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>))))
  :qid |qp.fvfDomDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r))
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01))))
    (=
      ($FVF.lookup_next (as sm@218@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@218@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@218@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) r) r))
    :pattern ((inv@216@01 r))
    :qid |quant-u-6809|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@218@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01))))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@218@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x1@182@01 y1@183@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  $Snap.unit))
; [eval] exists_path($$((g0 union g1)), x0, y0)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@219@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@219@01 (Set_union g0@178@01 g1@179@01)))
(pop) ; 4
(declare-fun inv@220@01 ($Ref) $Ref)
(declare-fun img@221@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@222@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@219@01 $Ref) (n2@219@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@219@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n1@219@01) n1@219@01))
      (and
        (Set_in n2@219@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n2@219@01) n2@219@01))
      (= n1@219@01 n2@219@01))
    (= n1@219@01 n2@219@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@219@01 $Ref)) (!
  (=>
    (Set_in n@219@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@220@01 n@219@01) n@219@01) (img@221@01 n@219@01)))
  :pattern ((Set_in n@219@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@220@01 n@219@01))
  :pattern ((img@221@01 n@219@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@220@01 r) r))
  :pattern ((inv@220@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) r) r))
  :pattern ((inv@220@01 r))
  :qid |quant-u-6812|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
      (img@221@01 r)
      (= r (inv@220@01 r)))
    (>
      (ite
        (and
          (img@212@01 r)
          (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-6813|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@223@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>)))
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r)))
    (=>
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r))
      (Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>))))
  :qid |qp.fvfDomDef161|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r))
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01))))
    (=
      ($FVF.lookup_next (as sm@223@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef159|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef160|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@223@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((n@219@01 $Ref)) (!
  (=>
    (Set_in n@219@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@220@01 n@219@01) n@219@01) (img@221@01 n@219@01)))
  :pattern ((Set_in n@219@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@220@01 n@219@01))
  :pattern ((img@221@01 n@219@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@220@01 r) r))
  :pattern ((inv@220@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>)))
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r)))
    (=>
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r))
      (Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>))))
  :qid |qp.fvfDomDef161|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r))
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01))))
    (=
      ($FVF.lookup_next (as sm@223@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef159|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef160|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) r) r))
    :pattern ((inv@220@01 r))
    :qid |quant-u-6812|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@223@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01))))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@223@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x0@180@01 y0@181@01))
(pop) ; 2
(push) ; 2
; [exec]
; inhale apply_TCFraming(g0, g1)
(declare-const $t@224@01 $Snap)
(assert (= $t@224@01 $Snap.unit))
; [eval] apply_TCFraming(g0, g1)
(push) ; 3
(declare-const n@225@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@225@01 g0@178@01))
(pop) ; 4
(declare-fun inv@226@01 ($Ref) $Ref)
(declare-fun img@227@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@228@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef162|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef164|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@225@01 $Ref) (n2@225@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@225@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) n1@225@01) n1@225@01))
      (and
        (Set_in n2@225@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) n2@225@01) n2@225@01))
      (= n1@225@01 n2@225@01))
    (= n1@225@01 n2@225@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@225@01 $Ref)) (!
  (=>
    (Set_in n@225@01 g0@178@01)
    (and (= (inv@226@01 n@225@01) n@225@01) (img@227@01 n@225@01)))
  :pattern ((Set_in n@225@01 g0@178@01))
  :pattern ((inv@226@01 n@225@01))
  :pattern ((img@227@01 n@225@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@227@01 r) (Set_in (inv@226@01 r) g0@178@01))
    (= (inv@226@01 r) r))
  :pattern ((inv@226@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@226@01 r) g0@178@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) r) r))
  :pattern ((inv@226@01 r))
  :qid |quant-u-6815|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r) (= r (inv@226@01 r)))
    (>
      (+
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6816|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@229@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r)))
    (=>
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>))))
  :qid |qp.fvfDomDef168|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef167|)))
(declare-const n@230@01 $Ref)
(push) ; 4
; [eval] (n in g1)
(assert (Set_in n@230@01 g1@179@01))
(pop) ; 4
(declare-fun inv@231@01 ($Ref) $Ref)
(declare-fun img@232@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@233@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@233@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@233@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef170|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef171|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@230@01 $Ref) (n2@230@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@230@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) n1@230@01) n1@230@01))
      (and
        (Set_in n2@230@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) n2@230@01) n2@230@01))
      (= n1@230@01 n2@230@01))
    (= n1@230@01 n2@230@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@230@01 $Ref)) (!
  (=>
    (Set_in n@230@01 g1@179@01)
    (and (= (inv@231@01 n@230@01) n@230@01) (img@232@01 n@230@01)))
  :pattern ((Set_in n@230@01 g1@179@01))
  :pattern ((inv@231@01 n@230@01))
  :pattern ((img@232@01 n@230@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@232@01 r) (Set_in (inv@231@01 r) g1@179@01))
    (= (inv@231@01 r) r))
  :pattern ((inv@231@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@231@01 r) g1@179@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) r) r))
  :pattern ((inv@231@01 r))
  :qid |quant-u-6818|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@231@01 r) g1@179@01) (img@232@01 r) (= r (inv@231@01 r)))
    (>
      (+
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6819|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@234@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))
      (and (Set_in (inv@231@01 r) g1@179@01) (img@232@01 r)))
    (=>
      (and (Set_in (inv@231@01 r) g1@179@01) (img@232@01 r))
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@231@01 r) g1@179@01) (img@232@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@231@01 r) g1@179@01) (img@232@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
; [eval] (g1 intersection g0) == Set[Ref]()
; [eval] (g1 intersection g0)
; [eval] Set[Ref]()
(push) ; 4
(assert (not (Set_equal (Set_intersection g1@179@01 g0@178@01) (as Set_empty  Set<$Ref>))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal (Set_intersection g1@179@01 g0@178@01) (as Set_empty  Set<$Ref>)))
(assert (apply_TCFraming%precondition ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>))
    $Snap.unit)) g0@178@01 g1@179@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef162|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef164|)))
(assert (forall ((n@225@01 $Ref)) (!
  (=>
    (Set_in n@225@01 g0@178@01)
    (and (= (inv@226@01 n@225@01) n@225@01) (img@227@01 n@225@01)))
  :pattern ((Set_in n@225@01 g0@178@01))
  :pattern ((inv@226@01 n@225@01))
  :pattern ((img@227@01 n@225@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@227@01 r) (Set_in (inv@226@01 r) g0@178@01))
    (= (inv@226@01 r) r))
  :pattern ((inv@226@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r)))
    (=>
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>))))
  :qid |qp.fvfDomDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@233@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@233@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef170|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@233@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef171|)))
(assert (forall ((n@230@01 $Ref)) (!
  (=>
    (Set_in n@230@01 g1@179@01)
    (and (= (inv@231@01 n@230@01) n@230@01) (img@232@01 n@230@01)))
  :pattern ((Set_in n@230@01 g1@179@01))
  :pattern ((inv@231@01 n@230@01))
  :pattern ((img@232@01 n@230@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@232@01 r) (Set_in (inv@231@01 r) g1@179@01))
    (= (inv@231@01 r) r))
  :pattern ((inv@231@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))
      (and (Set_in (inv@231@01 r) g1@179@01) (img@232@01 r)))
    (=>
      (and (Set_in (inv@231@01 r) g1@179@01) (img@232@01 r))
      (Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@234@01  $FVF<next>))))
  :qid |qp.fvfDomDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@231@01 r) g1@179@01) (img@232@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@231@01 r) g1@179@01) (img@232@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@234@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@234@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@226@01 r) g0@178@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) r) r))
    :pattern ((inv@226@01 r))
    :qid |quant-u-6815|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@231@01 r) g1@179@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@233@01  $FVF<next>) r) r))
    :pattern ((inv@231@01 r))
    :qid |quant-u-6818|))
  (Set_equal (Set_intersection g1@179@01 g0@178@01) (as Set_empty  Set<$Ref>))
  (apply_TCFraming%precondition ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>))
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>))
      $Snap.unit)) g0@178@01 g1@179@01)))
(assert (apply_TCFraming ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@234@01  $FVF<next>))
    $Snap.unit)) g0@178@01 g1@179@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !((null in (g1 union g0)))
; [eval] (null in (g1 union g0))
; [eval] (g1 union g0)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (Set_in $Ref.null (Set_union g1@179@01 g0@178@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null (Set_union g1@179@01 g0@178@01))))
(declare-const n$3@235@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g1 union g0))
; [eval] (g1 union g0)
(assert (Set_in n$3@235@01 (Set_union g1@179@01 g0@178@01)))
(declare-const sm@236@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef178|)))
(pop) ; 3
(declare-fun inv@237@01 ($Ref) $Ref)
(declare-fun img@238@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef178|)))
; Nested auxiliary terms: non-globals
(declare-const sm@239@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef181|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@235@01 $Ref) (n$32@235@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$31@235@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$31@235@01) n$31@235@01))
      (and
        (Set_in n$32@235@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$32@235@01) n$32@235@01))
      (= n$31@235@01 n$32@235@01))
    (= n$31@235@01 n$32@235@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@235@01 $Ref)) (!
  (=>
    (Set_in n$3@235@01 (Set_union g1@179@01 g0@178@01))
    (and (= (inv@237@01 n$3@235@01) n$3@235@01) (img@238@01 n$3@235@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@236@01  $FVF<next>) n$3@235@01) n$3@235@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@238@01 r) (Set_in (inv@237@01 r) (Set_union g1@179@01 g0@178@01)))
    (= (inv@237@01 r) r))
  :pattern ((inv@237@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@237@01 r) (Set_union g1@179@01 g0@178@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) r) r))
  :pattern ((inv@237@01 r))
  :qid |quant-u-6821|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@240@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@237@01 r) (Set_union g1@179@01 g0@178@01))
      (img@238@01 r)
      (= r (inv@237@01 r)))
    ($Perm.min
      (ite
        (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@241@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@237@01 r) (Set_union g1@179@01 g0@178@01))
      (img@238@01 r)
      (= r (inv@237@01 r)))
    ($Perm.min
      (ite
        (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@240@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
        $Perm.Write
        $Perm.No)
      (pTaken@240@01 r))
    $Perm.No)
  
  :qid |quant-u-6823|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@237@01 r) (Set_union g1@179@01 g0@178@01))
      (img@238@01 r)
      (= r (inv@237@01 r)))
    (= (- $Perm.Write (pTaken@240@01 r)) $Perm.No))
  
  :qid |quant-u-6824|))))
(check-sat)
; unknown
(pop) ; 3
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
        $Perm.Write
        $Perm.No)
      (pTaken@241@01 r))
    $Perm.No)
  
  :qid |quant-u-6825|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@237@01 r) (Set_union g1@179@01 g0@178@01))
      (img@238@01 r)
      (= r (inv@237@01 r)))
    (= (- (- $Perm.Write (pTaken@240@01 r)) (pTaken@241@01 r)) $Perm.No))
  
  :qid |quant-u-6826|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$4: Ref :: { (n$4.next in (g1 union g0)) } { (n$4 in (g1 union g0)), n$4.next } (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0)))
(declare-const n$4@242@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0))
; [eval] (n$4 in (g1 union g0)) && n$4.next != null
; [eval] (n$4 in (g1 union g0))
; [eval] (g1 union g0)
(push) ; 4
; [then-branch: 45 | !(n$4@242@01 in g1@179@01 ∪ g0@178@01) | live]
; [else-branch: 45 | n$4@242@01 in g1@179@01 ∪ g0@178@01 | live]
(push) ; 5
; [then-branch: 45 | !(n$4@242@01 in g1@179@01 ∪ g0@178@01)]
(assert (not (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 45 | n$4@242@01 in g1@179@01 ∪ g0@178@01]
(assert (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef179|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef180|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef181|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$4@242@01) (Set_in (inv@188@01 n$4@242@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$4@242@01) (Set_in (inv@193@01 n$4@242@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef181|)))
(assert (=>
  (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
  (and
    (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01))))
(assert (or
  (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
  (not (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01)))))
(push) ; 4
; [then-branch: 46 | n$4@242@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@239@01, n$4@242@01) != Null | live]
; [else-branch: 46 | !(n$4@242@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@239@01, n$4@242@01) != Null) | live]
(push) ; 5
; [then-branch: 46 | n$4@242@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@239@01, n$4@242@01) != Null]
(assert (and
  (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
  (not (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null))))
; [eval] (n$4.next in (g1 union g0))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef179|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef180|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef181|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$4@242@01) (Set_in (inv@188@01 n$4@242@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$4@242@01) (Set_in (inv@193@01 n$4@242@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g1 union g0)
(pop) ; 5
(push) ; 5
; [else-branch: 46 | !(n$4@242@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@239@01, n$4@242@01) != Null)]
(assert (not
  (and
    (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef181|)))
(assert (=>
  (and
    (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null)))
  (and
    (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
      (not
        (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null))))
  (and
    (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef181|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@242@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
      (and
        (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01)))
    (or
      (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
      (not (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))))
    (=>
      (and
        (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null)))
      (and
        (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01)))
    (or
      (not
        (and
          (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
          (not
            (=
              ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01)
              $Ref.null))))
      (and
        (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) (Set_union g1@179@01 g0@178@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31-aux|)))
(assert (forall ((n$4@242@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
      (and
        (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01)))
    (or
      (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
      (not (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))))
    (=>
      (and
        (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null)))
      (and
        (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01)))
    (or
      (not
        (and
          (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
          (not
            (=
              ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01)
              $Ref.null))))
      (and
        (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null)))))
  :pattern ((Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31-aux|)))
(push) ; 3
(assert (not (forall ((n$4@242@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
      (not
        (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(assert (forall ((n$4@242@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01))
      (not
        (= ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in n$4@242@01 (Set_union g1@179@01 g0@178@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n$4@242@01) n$4@242@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31|)))
; [eval] exists_path($$((g0 union g1)), x1, y1)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@243@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@243@01 (Set_union g0@178@01 g1@179@01)))
(pop) ; 4
(declare-fun inv@244@01 ($Ref) $Ref)
(declare-fun img@245@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@243@01 $Ref) (n2@243@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@243@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n1@243@01) n1@243@01))
      (and
        (Set_in n2@243@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n2@243@01) n2@243@01))
      (= n1@243@01 n2@243@01))
    (= n1@243@01 n2@243@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@245@01 r) (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) r) r))
  :pattern ((inv@244@01 r))
  :qid |quant-u-6828|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
      (img@245@01 r)
      (= r (inv@244@01 r)))
    (>
      (+
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6829|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(declare-const sm@246@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@246@01  $FVF<next>)))
      (and
        (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
        (img@245@01 r)))
    (=>
      (and
        (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
        (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@246@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@246@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
        (img@245@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
        (img@245@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@246@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@245@01 r) (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@246@01  $FVF<next>)))
      (and
        (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
        (img@245@01 r)))
    (=>
      (and
        (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
        (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@246@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@246@01  $FVF<next>))))
  :qid |qp.fvfDomDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
        (img@245@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
        (img@245@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@244@01 r) (Set_union g0@178@01 g1@179@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) r) r))
    :pattern ((inv@244@01 r))
    :qid |quant-u-6828|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@246@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01))))
(push) ; 3
(assert (not (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@246@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x1@182@01 y1@183@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.56s
; (get-info :all-statistics)
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@246@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x1@182@01 y1@183@01))
; [eval] exists_path($$((g0 union g1)), x0, y0)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@247@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@247@01 (Set_union g0@178@01 g1@179@01)))
(pop) ; 4
(declare-fun inv@248@01 ($Ref) $Ref)
(declare-fun img@249@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@250@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@250@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@250@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@250@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@250@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef187|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@250@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef188|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@247@01 $Ref) (n2@247@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@247@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@250@01  $FVF<next>) n1@247@01) n1@247@01))
      (and
        (Set_in n2@247@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@250@01  $FVF<next>) n2@247@01) n2@247@01))
      (= n1@247@01 n2@247@01))
    (= n1@247@01 n2@247@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@247@01 $Ref)) (!
  (=>
    (Set_in n@247@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@248@01 n@247@01) n@247@01) (img@249@01 n@247@01)))
  :pattern ((Set_in n@247@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@248@01 n@247@01))
  :pattern ((img@249@01 n@247@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@249@01 r) (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@248@01 r) r))
  :pattern ((inv@248@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@250@01  $FVF<next>) r) r))
  :pattern ((inv@248@01 r))
  :qid |quant-u-6831|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
      (img@249@01 r)
      (= r (inv@248@01 r)))
    (>
      (+
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6832|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(declare-const sm@251@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))
      (and
        (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
        (img@249@01 r)))
    (=>
      (and
        (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
        (img@249@01 r))
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>))))
  :qid |qp.fvfDomDef192|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
        (img@249@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@251@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
        (img@249@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@251@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@250@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@250@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@250@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@250@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef187|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@250@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef188|)))
(assert (forall ((n@247@01 $Ref)) (!
  (=>
    (Set_in n@247@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@248@01 n@247@01) n@247@01) (img@249@01 n@247@01)))
  :pattern ((Set_in n@247@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@248@01 n@247@01))
  :pattern ((img@249@01 n@247@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@249@01 r) (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@248@01 r) r))
  :pattern ((inv@248@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))
      (and
        (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
        (img@249@01 r)))
    (=>
      (and
        (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
        (img@249@01 r))
      (Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@251@01  $FVF<next>))))
  :qid |qp.fvfDomDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
        (img@249@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@251@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
        (img@249@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@251@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@251@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@248@01 r) (Set_union g0@178@01 g1@179@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@250@01  $FVF<next>) r) r))
    :pattern ((inv@248@01 r))
    :qid |quant-u-6831|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01))))
(push) ; 3
(assert (not (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x0@180@01 y0@181@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.71s
; (get-info :all-statistics)
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@251@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x0@180@01 y0@181@01))
(pop) ; 2
(pop) ; 1
; ---------- test_union ----------
(declare-const g0@252@01 Set<$Ref>)
(declare-const g1@253@01 Set<$Ref>)
(declare-const x0@254@01 $Ref)
(declare-const x1@255@01 $Ref)
(declare-const x@256@01 $Ref)
(declare-const g0@257@01 Set<$Ref>)
(declare-const g1@258@01 Set<$Ref>)
(declare-const x0@259@01 $Ref)
(declare-const x1@260@01 $Ref)
(declare-const x@261@01 $Ref)
(push) ; 1
(declare-const $t@262@01 $Snap)
(assert (= $t@262@01 ($Snap.combine ($Snap.first $t@262@01) ($Snap.second $t@262@01))))
(assert (= ($Snap.first $t@262@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@257@01)))
(assert (=
  ($Snap.second $t@262@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@262@01))
    ($Snap.second ($Snap.second $t@262@01)))))
(declare-const n@263@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@263@01 g0@257@01))
(declare-const sm@264@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@265@01 ($Ref) $Ref)
(declare-fun img@266@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@263@01 $Ref) (n2@263@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@263@01 g0@257@01)
      (Set_in n2@263@01 g0@257@01)
      (= n1@263@01 n2@263@01))
    (= n1@263@01 n2@263@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@263@01 $Ref)) (!
  (=>
    (Set_in n@263@01 g0@257@01)
    (and (= (inv@265@01 n@263@01) n@263@01) (img@266@01 n@263@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) n@263@01) n@263@01))
  :qid |quant-u-6834|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (= (inv@265@01 r) r))
  :pattern ((inv@265@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@263@01 $Ref)) (!
  (=> (Set_in n@263@01 g0@257@01) (not (= n@263@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) n@263@01) n@263@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@267@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@267@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@265@01 r) g0@257@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) r) r))
  :pattern ((inv@265@01 r))
  :qid |quant-u-6835|)))
(assert (=
  ($Snap.second ($Snap.second $t@262@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@262@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@262@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@268@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 47 | !(n$0@268@01 in g0@257@01) | live]
; [else-branch: 47 | n$0@268@01 in g0@257@01 | live]
(push) ; 4
; [then-branch: 47 | !(n$0@268@01 in g0@257@01)]
(assert (not (Set_in n$0@268@01 g0@257@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 47 | n$0@268@01 in g0@257@01]
(assert (Set_in n$0@268@01 g0@257@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@267@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef194|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef195|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) n$0@268@01))
(push) ; 5
(assert (not (and (img@266@01 n$0@268@01) (Set_in (inv@265@01 n$0@268@01) g0@257@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@267@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (=>
  (Set_in n$0@268@01 g0@257@01)
  (and
    (Set_in n$0@268@01 g0@257@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) n$0@268@01))))
(assert (or (Set_in n$0@268@01 g0@257@01) (not (Set_in n$0@268@01 g0@257@01))))
(push) ; 3
; [then-branch: 48 | n$0@268@01 in g0@257@01 && Lookup(next, sm@267@01, n$0@268@01) != Null | live]
; [else-branch: 48 | !(n$0@268@01 in g0@257@01 && Lookup(next, sm@267@01, n$0@268@01) != Null) | live]
(push) ; 4
; [then-branch: 48 | n$0@268@01 in g0@257@01 && Lookup(next, sm@267@01, n$0@268@01) != Null]
(assert (and
  (Set_in n$0@268@01 g0@257@01)
  (not (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@267@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef194|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef195|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) n$0@268@01))
(push) ; 5
(assert (not (and (img@266@01 n$0@268@01) (Set_in (inv@265@01 n$0@268@01) g0@257@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 48 | !(n$0@268@01 in g0@257@01 && Lookup(next, sm@267@01, n$0@268@01) != Null)]
(assert (not
  (and
    (Set_in n$0@268@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@267@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef195|)))
(assert (=>
  (and
    (Set_in n$0@268@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null)))
  (and
    (Set_in n$0@268@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) n$0@268@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@268@01 g0@257@01)
      (not
        (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null))))
  (and
    (Set_in n$0@268@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@267@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@267@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef195|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@268@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@268@01 g0@257@01)
      (and
        (Set_in n$0@268@01 g0@257@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) n$0@268@01)))
    (or (Set_in n$0@268@01 g0@257@01) (not (Set_in n$0@268@01 g0@257@01)))
    (=>
      (and
        (Set_in n$0@268@01 g0@257@01)
        (not
          (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null)))
      (and
        (Set_in n$0@268@01 g0@257@01)
        (not
          (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) n$0@268@01)))
    (or
      (not
        (and
          (Set_in n$0@268@01 g0@257@01)
          (not
            (=
              ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01)
              $Ref.null))))
      (and
        (Set_in n$0@268@01 g0@257@01)
        (not
          (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) g0@257@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@14@409@23-aux|)))
(assert (forall ((n$0@268@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@268@01 g0@257@01)
      (and
        (Set_in n$0@268@01 g0@257@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) n$0@268@01)))
    (or (Set_in n$0@268@01 g0@257@01) (not (Set_in n$0@268@01 g0@257@01)))
    (=>
      (and
        (Set_in n$0@268@01 g0@257@01)
        (not
          (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null)))
      (and
        (Set_in n$0@268@01 g0@257@01)
        (not
          (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) n$0@268@01)))
    (or
      (not
        (and
          (Set_in n$0@268@01 g0@257@01)
          (not
            (=
              ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01)
              $Ref.null))))
      (and
        (Set_in n$0@268@01 g0@257@01)
        (not
          (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null)))))
  :pattern ((Set_in n$0@268@01 g0@257@01) ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) n$0@268@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@14@409@23-aux|)))
(assert (forall ((n$0@268@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@268@01 g0@257@01)
      (not
        (= ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) g0@257@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) g0@257@01))
  :pattern ((Set_in n$0@268@01 g0@257@01) ($FVF.loc_next ($FVF.lookup_next (as sm@267@01  $FVF<next>) n$0@268@01) n$0@268@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@14@409@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@262@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@262@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@262@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@258@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))
(declare-const n$1@269@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@269@01 g1@258@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@270@01 ($Ref) $Ref)
(declare-fun img@271@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@269@01 $Ref) (n$12@269@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@269@01 g1@258@01)
      (Set_in n$12@269@01 g1@258@01)
      (= n$11@269@01 n$12@269@01))
    (= n$11@269@01 n$12@269@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@269@01 $Ref)) (!
  (=>
    (Set_in n$1@269@01 g1@258@01)
    (and (= (inv@270@01 n$1@269@01) n$1@269@01) (img@271@01 n$1@269@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) n$1@269@01) n$1@269@01))
  :qid |quant-u-6837|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (= (inv@270@01 r) r))
  :pattern ((inv@270@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@269@01 $Ref)) (!
  (=> (Set_in n$1@269@01 g1@258@01) (not (= n$1@269@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) n$1@269@01) n$1@269@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@269@01 n@263@01)
    (=
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))))
  
  :qid |quant-u-6838|))))
(check-sat)
; unknown
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(declare-const sm@272@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@270@01 r) g1@258@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) r) r))
  :pattern ((inv@270@01 r))
  :qid |quant-u-6839|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@273@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 49 | !(n$2@273@01 in g1@258@01) | live]
; [else-branch: 49 | n$2@273@01 in g1@258@01 | live]
(push) ; 4
; [then-branch: 49 | !(n$2@273@01 in g1@258@01)]
(assert (not (Set_in n$2@273@01 g1@258@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 49 | n$2@273@01 in g1@258@01]
(assert (Set_in n$2@273@01 g1@258@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef196|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
      (=
        ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
    :qid |qp.fvfValDef197|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef198|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) n$2@273@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@266@01 n$2@273@01) (Set_in (inv@265@01 n$2@273@01) g0@257@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@271@01 n$2@273@01) (Set_in (inv@270@01 n$2@273@01) g1@258@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (=>
  (Set_in n$2@273@01 g1@258@01)
  (and
    (Set_in n$2@273@01 g1@258@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) n$2@273@01))))
(assert (or (Set_in n$2@273@01 g1@258@01) (not (Set_in n$2@273@01 g1@258@01))))
(push) ; 3
; [then-branch: 50 | n$2@273@01 in g1@258@01 && Lookup(next, sm@272@01, n$2@273@01) != Null | live]
; [else-branch: 50 | !(n$2@273@01 in g1@258@01 && Lookup(next, sm@272@01, n$2@273@01) != Null) | live]
(push) ; 4
; [then-branch: 50 | n$2@273@01 in g1@258@01 && Lookup(next, sm@272@01, n$2@273@01) != Null]
(assert (and
  (Set_in n$2@273@01 g1@258@01)
  (not (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef196|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
      (=
        ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
    :qid |qp.fvfValDef197|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef198|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) n$2@273@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@266@01 n$2@273@01) (Set_in (inv@265@01 n$2@273@01) g0@257@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@271@01 n$2@273@01) (Set_in (inv@270@01 n$2@273@01) g1@258@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 50 | !(n$2@273@01 in g1@258@01 && Lookup(next, sm@272@01, n$2@273@01) != Null)]
(assert (not
  (and
    (Set_in n$2@273@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef198|)))
(assert (=>
  (and
    (Set_in n$2@273@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null)))
  (and
    (Set_in n$2@273@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) n$2@273@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@273@01 g1@258@01)
      (not
        (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null))))
  (and
    (Set_in n$2@273@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@272@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@272@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef198|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@273@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@273@01 g1@258@01)
      (and
        (Set_in n$2@273@01 g1@258@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) n$2@273@01)))
    (or (Set_in n$2@273@01 g1@258@01) (not (Set_in n$2@273@01 g1@258@01)))
    (=>
      (and
        (Set_in n$2@273@01 g1@258@01)
        (not
          (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null)))
      (and
        (Set_in n$2@273@01 g1@258@01)
        (not
          (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) n$2@273@01)))
    (or
      (not
        (and
          (Set_in n$2@273@01 g1@258@01)
          (not
            (=
              ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01)
              $Ref.null))))
      (and
        (Set_in n$2@273@01 g1@258@01)
        (not
          (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) g1@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@27@409@36-aux|)))
(assert (forall ((n$2@273@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@273@01 g1@258@01)
      (and
        (Set_in n$2@273@01 g1@258@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) n$2@273@01)))
    (or (Set_in n$2@273@01 g1@258@01) (not (Set_in n$2@273@01 g1@258@01)))
    (=>
      (and
        (Set_in n$2@273@01 g1@258@01)
        (not
          (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null)))
      (and
        (Set_in n$2@273@01 g1@258@01)
        (not
          (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) n$2@273@01)))
    (or
      (not
        (and
          (Set_in n$2@273@01 g1@258@01)
          (not
            (=
              ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01)
              $Ref.null))))
      (and
        (Set_in n$2@273@01 g1@258@01)
        (not
          (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null)))))
  :pattern ((Set_in n$2@273@01 g1@258@01) ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) n$2@273@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@27@409@36-aux|)))
(assert (forall ((n$2@273@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@273@01 g1@258@01)
      (not
        (= ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) g1@258@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) g1@258@01))
  :pattern ((Set_in n$2@273@01 g1@258@01) ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$2@273@01) n$2@273@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@27@409@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))
  $Snap.unit))
; [eval] (x0 in g0)
(assert (Set_in x0@259@01 g0@257@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))
  $Snap.unit))
; [eval] (x1 in g1)
(assert (Set_in x1@260@01 g1@258@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@274@01 $Ref)
(push) ; 2
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 3
; [then-branch: 51 | r@274@01 in g0@257@01 | live]
; [else-branch: 51 | !(r@274@01 in g0@257@01) | live]
(push) ; 4
; [then-branch: 51 | r@274@01 in g0@257@01]
(assert (Set_in r@274@01 g0@257@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 4
(push) ; 4
; [else-branch: 51 | !(r@274@01 in g0@257@01)]
(assert (not (Set_in r@274@01 g0@257@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@274@01 g0@257@01)) (Set_in r@274@01 g0@257@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@274@01 $Ref)) (!
  (or (not (Set_in r@274@01 g0@257@01)) (Set_in r@274@01 g0@257@01))
  :pattern ((Set_in r@274@01 g0@257@01) (Set_in r@274@01 g1@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@412@14@412@34-aux|)))
(assert (forall ((r@274@01 $Ref)) (!
  (=> (Set_in r@274@01 g0@257@01) (not (Set_in r@274@01 g1@258@01)))
  :pattern ((Set_in r@274@01 g0@257@01) (Set_in r@274@01 g1@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@412@14@412@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))))
  $Snap.unit))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@275@01 $Ref)
(push) ; 2
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 3
; [then-branch: 52 | r$0@275@01 in g1@258@01 | live]
; [else-branch: 52 | !(r$0@275@01 in g1@258@01) | live]
(push) ; 4
; [then-branch: 52 | r$0@275@01 in g1@258@01]
(assert (Set_in r$0@275@01 g1@258@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 4
(push) ; 4
; [else-branch: 52 | !(r$0@275@01 in g1@258@01)]
(assert (not (Set_in r$0@275@01 g1@258@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@275@01 g1@258@01)) (Set_in r$0@275@01 g1@258@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@275@01 $Ref)) (!
  (or (not (Set_in r$0@275@01 g1@258@01)) (Set_in r$0@275@01 g1@258@01))
  :pattern ((Set_in r$0@275@01 g0@257@01) (Set_in r$0@275@01 g1@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@412@14@412@34-aux|)))
(assert (forall ((r$0@275@01 $Ref)) (!
  (=> (Set_in r$0@275@01 g1@258@01) (not (Set_in r$0@275@01 g0@257@01)))
  :pattern ((Set_in r$0@275@01 g0@257@01) (Set_in r$0@275@01 g1@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@412@14@412@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))))
  $Snap.unit))
; [eval] is_global_root(g0, x0)
(push) ; 2
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$0@276@01 $Ref)
(push) ; 3
; [eval] (n$0 in g)
(assert (Set_in n$0@276@01 g0@257@01))
(pop) ; 3
(declare-fun inv@277@01 ($Ref) $Ref)
(declare-fun img@278@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$01@276@01 $Ref) (n$02@276@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@276@01 g0@257@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$01@276@01) n$01@276@01))
      (and
        (Set_in n$02@276@01 g0@257@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) n$02@276@01) n$02@276@01))
      (= n$01@276@01 n$02@276@01))
    (= n$01@276@01 n$02@276@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@276@01 $Ref)) (!
  (=>
    (Set_in n$0@276@01 g0@257@01)
    (and (= (inv@277@01 n$0@276@01) n$0@276@01) (img@278@01 n$0@276@01)))
  :pattern ((Set_in n$0@276@01 g0@257@01))
  :pattern ((inv@277@01 n$0@276@01))
  :pattern ((img@278@01 n$0@276@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@278@01 r) (Set_in (inv@277@01 r) g0@257@01))
    (= (inv@277@01 r) r))
  :pattern ((inv@277@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@277@01 r) g0@257@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) r) r))
  :pattern ((inv@277@01 r))
  :qid |quant-u-6841|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@277@01 r) g0@257@01) (img@278@01 r) (= r (inv@277@01 r)))
    (>
      (+
        (ite
          (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6842|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@279@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@279@01  $FVF<next>)))
      (and (Set_in (inv@277@01 r) g0@257@01) (img@278@01 r)))
    (=>
      (and (Set_in (inv@277@01 r) g0@257@01) (img@278@01 r))
      (Set_in r ($FVF.domain_next (as sm@279@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@279@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@277@01 r) g0@257@01) (img@278@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@279@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@279@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@277@01 r) g0@257@01) (img@278@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@279@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@279@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@279@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
; [eval] (forall n$1: Ref ::(n$1 in g) && n$1.next != null ==> (n$1.next in g))
(declare-const n$1@280@01 $Ref)
(push) ; 3
; [eval] (n$1 in g) && n$1.next != null ==> (n$1.next in g)
; [eval] (n$1 in g) && n$1.next != null
; [eval] (n$1 in g)
(push) ; 4
; [then-branch: 53 | !(n$1@280@01 in g0@257@01) | live]
; [else-branch: 53 | n$1@280@01 in g0@257@01 | live]
(push) ; 5
; [then-branch: 53 | !(n$1@280@01 in g0@257@01)]
(assert (not (Set_in n$1@280@01 g0@257@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 53 | n$1@280@01 in g0@257@01]
(assert (Set_in n$1@280@01 g0@257@01))
; [eval] n$1.next != null
(declare-const sm@281@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef205|)))
(declare-const pm@282@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@282@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@282@01  $FPM) r))
  :qid |qp.resPrmSumDef206|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@282@01  $FPM) r))
  :qid |qp.resTrgDef207|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) n$1@280@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@282@01  $FPM) n$1@280@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@282@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@282@01  $FPM) r))
  :qid |qp.resPrmSumDef206|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@282@01  $FPM) r))
  :qid |qp.resTrgDef207|)))
(assert (=>
  (Set_in n$1@280@01 g0@257@01)
  (and
    (Set_in n$1@280@01 g0@257@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) n$1@280@01))))
(assert (or (Set_in n$1@280@01 g0@257@01) (not (Set_in n$1@280@01 g0@257@01))))
(push) ; 4
; [then-branch: 54 | n$1@280@01 in g0@257@01 && Lookup(next, sm@281@01, n$1@280@01) != Null | live]
; [else-branch: 54 | !(n$1@280@01 in g0@257@01 && Lookup(next, sm@281@01, n$1@280@01) != Null) | live]
(push) ; 5
; [then-branch: 54 | n$1@280@01 in g0@257@01 && Lookup(next, sm@281@01, n$1@280@01) != Null]
(assert (and
  (Set_in n$1@280@01 g0@257@01)
  (not (= ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) $Ref.null))))
; [eval] (n$1.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef203|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
      (=
        ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
    :qid |qp.fvfValDef204|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef205|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) n$1@280@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@266@01 n$1@280@01) (Set_in (inv@265@01 n$1@280@01) g0@257@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@271@01 n$1@280@01) (Set_in (inv@270@01 n$1@280@01) g1@258@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 54 | !(n$1@280@01 in g0@257@01 && Lookup(next, sm@281@01, n$1@280@01) != Null)]
(assert (not
  (and
    (Set_in n$1@280@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (=>
  (and
    (Set_in n$1@280@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) $Ref.null)))
  (and
    (Set_in n$1@280@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) n$1@280@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@280@01 g0@257@01)
      (not
        (= ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) $Ref.null))))
  (and
    (Set_in n$1@280@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) $Ref.null)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@282@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@282@01  $FPM) r))
  :qid |qp.resPrmSumDef206|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@282@01  $FPM) r))
  :qid |qp.resTrgDef207|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 3
(assert (not (forall ((n$1@280@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@280@01 g0@257@01)
      (not
        (= ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) g0@257@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$1@280@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@280@01 g0@257@01)
      (not
        (= ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) g0@257@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|)))
; [eval] (root in g)
(assert (is_global_root%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@279@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) g0@257@01 x0@259@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n$0@276@01 $Ref)) (!
  (=>
    (Set_in n$0@276@01 g0@257@01)
    (and (= (inv@277@01 n$0@276@01) n$0@276@01) (img@278@01 n$0@276@01)))
  :pattern ((Set_in n$0@276@01 g0@257@01))
  :pattern ((inv@277@01 n$0@276@01))
  :pattern ((img@278@01 n$0@276@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@278@01 r) (Set_in (inv@277@01 r) g0@257@01))
    (= (inv@277@01 r) r))
  :pattern ((inv@277@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@279@01  $FVF<next>)))
      (and (Set_in (inv@277@01 r) g0@257@01) (img@278@01 r)))
    (=>
      (and (Set_in (inv@277@01 r) g0@257@01) (img@278@01 r))
      (Set_in r ($FVF.domain_next (as sm@279@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@279@01  $FVF<next>))))
  :qid |qp.fvfDomDef202|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@277@01 r) g0@257@01) (img@278@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@279@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@279@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@277@01 r) g0@257@01) (img@278@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@279@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@279@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@279@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@282@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@282@01  $FPM) r))
  :qid |qp.resPrmSumDef206|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@282@01  $FPM) r))
  :qid |qp.resTrgDef207|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@277@01 r) g0@257@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@272@01  $FVF<next>) r) r))
    :pattern ((inv@277@01 r))
    :qid |quant-u-6841|))
  (forall ((n$1@280@01 $Ref)) (!
    (=>
      (and
        (Set_in n$1@280@01 g0@257@01)
        (not
          (= ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$1@280@01) g0@257@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|))
  (is_global_root%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@279@01  $FVF<next>))
      ($Snap.combine $Snap.unit $Snap.unit))) g0@257@01 x0@259@01)))
(assert (is_global_root ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@279@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) g0@257@01 x0@259@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))))))
  $Snap.unit))
; [eval] is_global_root(g1, x1)
(push) ; 2
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$0@283@01 $Ref)
(push) ; 3
; [eval] (n$0 in g)
(assert (Set_in n$0@283@01 g1@258@01))
(pop) ; 3
(declare-fun inv@284@01 ($Ref) $Ref)
(declare-fun img@285@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$01@283@01 $Ref) (n$02@283@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@283@01 g1@258@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$01@283@01) n$01@283@01))
      (and
        (Set_in n$02@283@01 g1@258@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) n$02@283@01) n$02@283@01))
      (= n$01@283@01 n$02@283@01))
    (= n$01@283@01 n$02@283@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@283@01 $Ref)) (!
  (=>
    (Set_in n$0@283@01 g1@258@01)
    (and (= (inv@284@01 n$0@283@01) n$0@283@01) (img@285@01 n$0@283@01)))
  :pattern ((Set_in n$0@283@01 g1@258@01))
  :pattern ((inv@284@01 n$0@283@01))
  :pattern ((img@285@01 n$0@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@285@01 r) (Set_in (inv@284@01 r) g1@258@01))
    (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@284@01 r) g1@258@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) r) r))
  :pattern ((inv@284@01 r))
  :qid |quant-u-6844|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@284@01 r) g1@258@01) (img@285@01 r) (= r (inv@284@01 r)))
    (>
      (+
        (ite
          (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6845|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@286@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@286@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g1@258@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g1@258@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@286@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@286@01  $FVF<next>))))
  :qid |qp.fvfDomDef211|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g1@258@01) (img@285@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g1@258@01) (img@285@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef210|)))
; [eval] (forall n$1: Ref ::(n$1 in g) && n$1.next != null ==> (n$1.next in g))
(declare-const n$1@287@01 $Ref)
(push) ; 3
; [eval] (n$1 in g) && n$1.next != null ==> (n$1.next in g)
; [eval] (n$1 in g) && n$1.next != null
; [eval] (n$1 in g)
(push) ; 4
; [then-branch: 55 | !(n$1@287@01 in g1@258@01) | live]
; [else-branch: 55 | n$1@287@01 in g1@258@01 | live]
(push) ; 5
; [then-branch: 55 | !(n$1@287@01 in g1@258@01)]
(assert (not (Set_in n$1@287@01 g1@258@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 55 | n$1@287@01 in g1@258@01]
(assert (Set_in n$1@287@01 g1@258@01))
; [eval] n$1.next != null
(declare-const sm@288@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef214|)))
(declare-const pm@289@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@289@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@289@01  $FPM) r))
  :qid |qp.resPrmSumDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@289@01  $FPM) r))
  :qid |qp.resTrgDef216|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) n$1@287@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@289@01  $FPM) n$1@287@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef214|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@289@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@289@01  $FPM) r))
  :qid |qp.resPrmSumDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@289@01  $FPM) r))
  :qid |qp.resTrgDef216|)))
(assert (=>
  (Set_in n$1@287@01 g1@258@01)
  (and
    (Set_in n$1@287@01 g1@258@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) n$1@287@01))))
(assert (or (Set_in n$1@287@01 g1@258@01) (not (Set_in n$1@287@01 g1@258@01))))
(push) ; 4
; [then-branch: 56 | n$1@287@01 in g1@258@01 && Lookup(next, sm@288@01, n$1@287@01) != Null | live]
; [else-branch: 56 | !(n$1@287@01 in g1@258@01 && Lookup(next, sm@288@01, n$1@287@01) != Null) | live]
(push) ; 5
; [then-branch: 56 | n$1@287@01 in g1@258@01 && Lookup(next, sm@288@01, n$1@287@01) != Null]
(assert (and
  (Set_in n$1@287@01 g1@258@01)
  (not (= ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) $Ref.null))))
; [eval] (n$1.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef212|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
      (=
        ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
    :qid |qp.fvfValDef213|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef214|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) n$1@287@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@266@01 n$1@287@01) (Set_in (inv@265@01 n$1@287@01) g0@257@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@271@01 n$1@287@01) (Set_in (inv@270@01 n$1@287@01) g1@258@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 56 | !(n$1@287@01 in g1@258@01 && Lookup(next, sm@288@01, n$1@287@01) != Null)]
(assert (not
  (and
    (Set_in n$1@287@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef214|)))
(assert (=>
  (and
    (Set_in n$1@287@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) $Ref.null)))
  (and
    (Set_in n$1@287@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) n$1@287@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@287@01 g1@258@01)
      (not
        (= ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) $Ref.null))))
  (and
    (Set_in n$1@287@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) $Ref.null)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef214|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@289@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@289@01  $FPM) r))
  :qid |qp.resPrmSumDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@289@01  $FPM) r))
  :qid |qp.resTrgDef216|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 3
(assert (not (forall ((n$1@287@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@287@01 g1@258@01)
      (not
        (= ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) g1@258@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$1@287@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@287@01 g1@258@01)
      (not
        (= ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) g1@258@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|)))
; [eval] (root in g)
(assert (is_global_root%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@286@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) g1@258@01 x1@260@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n$0@283@01 $Ref)) (!
  (=>
    (Set_in n$0@283@01 g1@258@01)
    (and (= (inv@284@01 n$0@283@01) n$0@283@01) (img@285@01 n$0@283@01)))
  :pattern ((Set_in n$0@283@01 g1@258@01))
  :pattern ((inv@284@01 n$0@283@01))
  :pattern ((img@285@01 n$0@283@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@285@01 r) (Set_in (inv@284@01 r) g1@258@01))
    (= (inv@284@01 r) r))
  :pattern ((inv@284@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@286@01  $FVF<next>)))
      (and (Set_in (inv@284@01 r) g1@258@01) (img@285@01 r)))
    (=>
      (and (Set_in (inv@284@01 r) g1@258@01) (img@285@01 r))
      (Set_in r ($FVF.domain_next (as sm@286@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@286@01  $FVF<next>))))
  :qid |qp.fvfDomDef211|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g1@258@01) (img@285@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@284@01 r) g1@258@01) (img@285@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@286@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@286@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@288@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@288@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef214|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@289@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@289@01  $FPM) r))
  :qid |qp.resPrmSumDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@289@01  $FPM) r))
  :qid |qp.resTrgDef216|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@284@01 r) g1@258@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@281@01  $FVF<next>) r) r))
    :pattern ((inv@284@01 r))
    :qid |quant-u-6844|))
  (forall ((n$1@287@01 $Ref)) (!
    (=>
      (and
        (Set_in n$1@287@01 g1@258@01)
        (not
          (= ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@288@01  $FVF<next>) n$1@287@01) g1@258@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|))
  (is_global_root%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@286@01  $FVF<next>))
      ($Snap.combine $Snap.unit $Snap.unit))) g1@258@01 x1@260@01)))
(assert (is_global_root ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@286@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) g1@258@01 x1@260@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))))))
  $Snap.unit))
; [eval] acyclic_list_segment(g0)
(push) ; 2
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n@290@01 $Ref)
(push) ; 3
; [eval] (n in g)
(assert (Set_in n@290@01 g0@257@01))
(pop) ; 3
(declare-fun inv@291@01 ($Ref) $Ref)
(declare-fun img@292@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@290@01 $Ref) (n2@290@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@290@01 g0@257@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) n1@290@01) n1@290@01))
      (and
        (Set_in n2@290@01 g0@257@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) n2@290@01) n2@290@01))
      (= n1@290@01 n2@290@01))
    (= n1@290@01 n2@290@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@290@01 $Ref)) (!
  (=>
    (Set_in n@290@01 g0@257@01)
    (and (= (inv@291@01 n@290@01) n@290@01) (img@292@01 n@290@01)))
  :pattern ((Set_in n@290@01 g0@257@01))
  :pattern ((inv@291@01 n@290@01))
  :pattern ((img@292@01 n@290@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@292@01 r) (Set_in (inv@291@01 r) g0@257@01))
    (= (inv@291@01 r) r))
  :pattern ((inv@291@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@291@01 r) g0@257@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) r) r))
  :pattern ((inv@291@01 r))
  :qid |quant-u-6847|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@291@01 r) g0@257@01) (img@292@01 r) (= r (inv@291@01 r)))
    (>
      (+
        (ite
          (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6848|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@293@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@293@01  $FVF<next>)))
      (and (Set_in (inv@291@01 r) g0@257@01) (img@292@01 r)))
    (=>
      (and (Set_in (inv@291@01 r) g0@257@01) (img@292@01 r))
      (Set_in r ($FVF.domain_next (as sm@293@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@293@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@291@01 r) g0@257@01) (img@292@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@291@01 r) g0@257@01) (img@292@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
; [eval] (forall n$0: Ref ::(n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@294@01 $Ref)
(push) ; 3
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 4
; [then-branch: 57 | !(n$0@294@01 in g0@257@01) | live]
; [else-branch: 57 | n$0@294@01 in g0@257@01 | live]
(push) ; 5
; [then-branch: 57 | !(n$0@294@01 in g0@257@01)]
(assert (not (Set_in n$0@294@01 g0@257@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 57 | n$0@294@01 in g0@257@01]
(assert (Set_in n$0@294@01 g0@257@01))
; [eval] n$0.next != null
(declare-const sm@295@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef223|)))
(declare-const pm@296@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@296@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@296@01  $FPM) r))
  :qid |qp.resPrmSumDef224|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@296@01  $FPM) r))
  :qid |qp.resTrgDef225|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) n$0@294@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@296@01  $FPM) n$0@294@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@296@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@296@01  $FPM) r))
  :qid |qp.resPrmSumDef224|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@296@01  $FPM) r))
  :qid |qp.resTrgDef225|)))
(assert (=>
  (Set_in n$0@294@01 g0@257@01)
  (and
    (Set_in n$0@294@01 g0@257@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) n$0@294@01))))
(assert (or (Set_in n$0@294@01 g0@257@01) (not (Set_in n$0@294@01 g0@257@01))))
(push) ; 4
; [then-branch: 58 | n$0@294@01 in g0@257@01 && Lookup(next, sm@295@01, n$0@294@01) != Null | live]
; [else-branch: 58 | !(n$0@294@01 in g0@257@01 && Lookup(next, sm@295@01, n$0@294@01) != Null) | live]
(push) ; 5
; [then-branch: 58 | n$0@294@01 in g0@257@01 && Lookup(next, sm@295@01, n$0@294@01) != Null]
(assert (and
  (Set_in n$0@294@01 g0@257@01)
  (not (= ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef221|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
      (=
        ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
    :qid |qp.fvfValDef222|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef223|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) n$0@294@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@266@01 n$0@294@01) (Set_in (inv@265@01 n$0@294@01) g0@257@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@271@01 n$0@294@01) (Set_in (inv@270@01 n$0@294@01) g1@258@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 58 | !(n$0@294@01 in g0@257@01 && Lookup(next, sm@295@01, n$0@294@01) != Null)]
(assert (not
  (and
    (Set_in n$0@294@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (=>
  (and
    (Set_in n$0@294@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) $Ref.null)))
  (and
    (Set_in n$0@294@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) n$0@294@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@294@01 g0@257@01)
      (not
        (= ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) $Ref.null))))
  (and
    (Set_in n$0@294@01 g0@257@01)
    (not (= ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) $Ref.null)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@296@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@296@01  $FPM) r))
  :qid |qp.resPrmSumDef224|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@296@01  $FPM) r))
  :qid |qp.resTrgDef225|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 3
(assert (not (forall ((n$0@294@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@294@01 g0@257@01)
      (not
        (= ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) g0@257@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@294@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@294@01 g0@257@01)
      (not
        (= ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) g0@257@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|)))
(assert (acyclic_list_segment%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@293@01  $FVF<next>))
    $Snap.unit)) g0@257@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@290@01 $Ref)) (!
  (=>
    (Set_in n@290@01 g0@257@01)
    (and (= (inv@291@01 n@290@01) n@290@01) (img@292@01 n@290@01)))
  :pattern ((Set_in n@290@01 g0@257@01))
  :pattern ((inv@291@01 n@290@01))
  :pattern ((img@292@01 n@290@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@292@01 r) (Set_in (inv@291@01 r) g0@257@01))
    (= (inv@291@01 r) r))
  :pattern ((inv@291@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@293@01  $FVF<next>)))
      (and (Set_in (inv@291@01 r) g0@257@01) (img@292@01 r)))
    (=>
      (and (Set_in (inv@291@01 r) g0@257@01) (img@292@01 r))
      (Set_in r ($FVF.domain_next (as sm@293@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@293@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@291@01 r) g0@257@01) (img@292@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@291@01 r) g0@257@01) (img@292@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@295@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@295@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@296@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@296@01  $FPM) r))
  :qid |qp.resPrmSumDef224|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@296@01  $FPM) r))
  :qid |qp.resTrgDef225|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@291@01 r) g0@257@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@288@01  $FVF<next>) r) r))
    :pattern ((inv@291@01 r))
    :qid |quant-u-6847|))
  (forall ((n$0@294@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@294@01 g0@257@01)
        (not
          (= ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@295@01  $FVF<next>) n$0@294@01) g0@257@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))
  (acyclic_list_segment%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@293@01  $FVF<next>))
      $Snap.unit)) g0@257@01)))
(assert (acyclic_list_segment ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@293@01  $FVF<next>))
    $Snap.unit)) g0@257@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))))))))
  $Snap.unit))
; [eval] acyclic_list_segment(g1)
(push) ; 2
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n@297@01 $Ref)
(push) ; 3
; [eval] (n in g)
(assert (Set_in n@297@01 g1@258@01))
(pop) ; 3
(declare-fun inv@298@01 ($Ref) $Ref)
(declare-fun img@299@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@297@01 $Ref) (n2@297@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@297@01 g1@258@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) n1@297@01) n1@297@01))
      (and
        (Set_in n2@297@01 g1@258@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) n2@297@01) n2@297@01))
      (= n1@297@01 n2@297@01))
    (= n1@297@01 n2@297@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@297@01 $Ref)) (!
  (=>
    (Set_in n@297@01 g1@258@01)
    (and (= (inv@298@01 n@297@01) n@297@01) (img@299@01 n@297@01)))
  :pattern ((Set_in n@297@01 g1@258@01))
  :pattern ((inv@298@01 n@297@01))
  :pattern ((img@299@01 n@297@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@299@01 r) (Set_in (inv@298@01 r) g1@258@01))
    (= (inv@298@01 r) r))
  :pattern ((inv@298@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@298@01 r) g1@258@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) r) r))
  :pattern ((inv@298@01 r))
  :qid |quant-u-6850|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@298@01 r) g1@258@01) (img@299@01 r) (= r (inv@298@01 r)))
    (>
      (+
        (ite
          (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6851|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@300@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@300@01  $FVF<next>)))
      (and (Set_in (inv@298@01 r) g1@258@01) (img@299@01 r)))
    (=>
      (and (Set_in (inv@298@01 r) g1@258@01) (img@299@01 r))
      (Set_in r ($FVF.domain_next (as sm@300@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@300@01  $FVF<next>))))
  :qid |qp.fvfDomDef229|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@298@01 r) g1@258@01) (img@299@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@298@01 r) g1@258@01) (img@299@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
; [eval] (forall n$0: Ref ::(n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@301@01 $Ref)
(push) ; 3
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 4
; [then-branch: 59 | !(n$0@301@01 in g1@258@01) | live]
; [else-branch: 59 | n$0@301@01 in g1@258@01 | live]
(push) ; 5
; [then-branch: 59 | !(n$0@301@01 in g1@258@01)]
(assert (not (Set_in n$0@301@01 g1@258@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 59 | n$0@301@01 in g1@258@01]
(assert (Set_in n$0@301@01 g1@258@01))
; [eval] n$0.next != null
(declare-const sm@302@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
(declare-const pm@303@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@303@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@303@01  $FPM) r))
  :qid |qp.resPrmSumDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@303@01  $FPM) r))
  :qid |qp.resTrgDef234|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) n$0@301@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@303@01  $FPM) n$0@301@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@303@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@303@01  $FPM) r))
  :qid |qp.resPrmSumDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@303@01  $FPM) r))
  :qid |qp.resTrgDef234|)))
(assert (=>
  (Set_in n$0@301@01 g1@258@01)
  (and
    (Set_in n$0@301@01 g1@258@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) n$0@301@01))))
(assert (or (Set_in n$0@301@01 g1@258@01) (not (Set_in n$0@301@01 g1@258@01))))
(push) ; 4
; [then-branch: 60 | n$0@301@01 in g1@258@01 && Lookup(next, sm@302@01, n$0@301@01) != Null | live]
; [else-branch: 60 | !(n$0@301@01 in g1@258@01 && Lookup(next, sm@302@01, n$0@301@01) != Null) | live]
(push) ; 5
; [then-branch: 60 | n$0@301@01 in g1@258@01 && Lookup(next, sm@302@01, n$0@301@01) != Null]
(assert (and
  (Set_in n$0@301@01 g1@258@01)
  (not (= ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef230|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
      (=
        ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
    :qid |qp.fvfValDef231|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef232|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) n$0@301@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@266@01 n$0@301@01) (Set_in (inv@265@01 n$0@301@01) g0@257@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@271@01 n$0@301@01) (Set_in (inv@270@01 n$0@301@01) g1@258@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 60 | !(n$0@301@01 in g1@258@01 && Lookup(next, sm@302@01, n$0@301@01) != Null)]
(assert (not
  (and
    (Set_in n$0@301@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
(assert (=>
  (and
    (Set_in n$0@301@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) $Ref.null)))
  (and
    (Set_in n$0@301@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) n$0@301@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@301@01 g1@258@01)
      (not
        (= ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) $Ref.null))))
  (and
    (Set_in n$0@301@01 g1@258@01)
    (not (= ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) $Ref.null)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@303@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@303@01  $FPM) r))
  :qid |qp.resPrmSumDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@303@01  $FPM) r))
  :qid |qp.resTrgDef234|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 3
(assert (not (forall ((n$0@301@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@301@01 g1@258@01)
      (not
        (= ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) g1@258@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@301@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@301@01 g1@258@01)
      (not
        (= ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) g1@258@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|)))
(assert (acyclic_list_segment%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@300@01  $FVF<next>))
    $Snap.unit)) g1@258@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@297@01 $Ref)) (!
  (=>
    (Set_in n@297@01 g1@258@01)
    (and (= (inv@298@01 n@297@01) n@297@01) (img@299@01 n@297@01)))
  :pattern ((Set_in n@297@01 g1@258@01))
  :pattern ((inv@298@01 n@297@01))
  :pattern ((img@299@01 n@297@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@299@01 r) (Set_in (inv@298@01 r) g1@258@01))
    (= (inv@298@01 r) r))
  :pattern ((inv@298@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@300@01  $FVF<next>)))
      (and (Set_in (inv@298@01 r) g1@258@01) (img@299@01 r)))
    (=>
      (and (Set_in (inv@298@01 r) g1@258@01) (img@299@01 r))
      (Set_in r ($FVF.domain_next (as sm@300@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@300@01  $FVF<next>))))
  :qid |qp.fvfDomDef229|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@298@01 r) g1@258@01) (img@299@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@298@01 r) g1@258@01) (img@299@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@303@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@303@01  $FPM) r))
  :qid |qp.resPrmSumDef233|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@303@01  $FPM) r))
  :qid |qp.resTrgDef234|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@298@01 r) g1@258@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@295@01  $FVF<next>) r) r))
    :pattern ((inv@298@01 r))
    :qid |quant-u-6850|))
  (forall ((n$0@301@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@301@01 g1@258@01)
        (not
          (= ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@302@01  $FVF<next>) n$0@301@01) g1@258@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))
  (acyclic_list_segment%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@300@01  $FVF<next>))
      $Snap.unit)) g1@258@01)))
(assert (acyclic_list_segment ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@300@01  $FVF<next>))
    $Snap.unit)) g1@258@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 ($Snap.combine ($Snap.first $t@304@01) ($Snap.second $t@304@01))))
(assert (= ($Snap.first $t@304@01) $Snap.unit))
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(assert (not (Set_in $Ref.null (Set_union g0@257@01 g1@258@01))))
(assert (=
  ($Snap.second $t@304@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@304@01))
    ($Snap.second ($Snap.second $t@304@01)))))
(declare-const n$3@305@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$3@305@01 (Set_union g0@257@01 g1@258@01)))
(declare-const sm@306@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@307@01 ($Ref) $Ref)
(declare-fun img@308@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@305@01 $Ref) (n$32@305@01 $Ref)) (!
  (=>
    (and
      (Set_in n$31@305@01 (Set_union g0@257@01 g1@258@01))
      (Set_in n$32@305@01 (Set_union g0@257@01 g1@258@01))
      (= n$31@305@01 n$32@305@01))
    (= n$31@305@01 n$32@305@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@305@01 $Ref)) (!
  (=>
    (Set_in n$3@305@01 (Set_union g0@257@01 g1@258@01))
    (and (= (inv@307@01 n$3@305@01) n$3@305@01) (img@308@01 n$3@305@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$3@305@01) n$3@305@01))
  :qid |quant-u-6853|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@308@01 r) (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
    (= (inv@307@01 r) r))
  :pattern ((inv@307@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@305@01 $Ref)) (!
  (=>
    (Set_in n$3@305@01 (Set_union g0@257@01 g1@258@01))
    (not (= n$3@305@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$3@305@01) n$3@305@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@309@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@308@01 r) (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@309@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) r) r))
  :pattern ((inv@307@01 r))
  :qid |quant-u-6854|)))
(assert (=
  ($Snap.second ($Snap.second $t@304@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@304@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@304@01))) $Snap.unit))
; [eval] (forall n$4: Ref :: { (n$4.next in (g0 union g1)) } { (n$4 in (g0 union g1)), n$4.next } (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1)))
(declare-const n$4@310@01 $Ref)
(push) ; 3
; [eval] (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1))
; [eval] (n$4 in (g0 union g1)) && n$4.next != null
; [eval] (n$4 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 61 | !(n$4@310@01 in g0@257@01 ∪ g1@258@01) | live]
; [else-branch: 61 | n$4@310@01 in g0@257@01 ∪ g1@258@01 | live]
(push) ; 5
; [then-branch: 61 | !(n$4@310@01 in g0@257@01 ∪ g1@258@01)]
(assert (not (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 61 | n$4@310@01 in g0@257@01 ∪ g1@258@01]
(assert (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@308@01 r)
        (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
      (=
        ($FVF.lookup_next (as sm@309@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
    :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
    :qid |qp.fvfValDef236|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef237|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) n$4@310@01))
(push) ; 6
(assert (not (and
  (img@308@01 n$4@310@01)
  (Set_in (inv@307@01 n$4@310@01) (Set_union g0@257@01 g1@258@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@308@01 r) (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@309@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (=>
  (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
  (and
    (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) n$4@310@01))))
(assert (or
  (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
  (not (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01)))))
(push) ; 4
; [then-branch: 62 | n$4@310@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@309@01, n$4@310@01) != Null | live]
; [else-branch: 62 | !(n$4@310@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@309@01, n$4@310@01) != Null) | live]
(push) ; 5
; [then-branch: 62 | n$4@310@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@309@01, n$4@310@01) != Null]
(assert (and
  (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
  (not (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null))))
; [eval] (n$4.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@308@01 r)
        (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
      (=
        ($FVF.lookup_next (as sm@309@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
    :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
    :qid |qp.fvfValDef236|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef237|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) n$4@310@01))
(push) ; 6
(assert (not (and
  (img@308@01 n$4@310@01)
  (Set_in (inv@307@01 n$4@310@01) (Set_union g0@257@01 g1@258@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 62 | !(n$4@310@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@309@01, n$4@310@01) != Null)]
(assert (not
  (and
    (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@308@01 r) (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@309@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
(assert (=>
  (and
    (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null)))
  (and
    (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) n$4@310@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
      (not
        (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null))))
  (and
    (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@308@01 r) (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@309@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@309@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef237|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@310@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
      (and
        (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) n$4@310@01)))
    (or
      (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
      (not (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))))
    (=>
      (and
        (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null)))
      (and
        (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) n$4@310@01)))
    (or
      (not
        (and
          (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
          (not
            (=
              ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01)
              $Ref.null))))
      (and
        (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) (Set_union g0@257@01 g1@258@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31-aux|)))
(assert (forall ((n$4@310@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
      (and
        (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) n$4@310@01)))
    (or
      (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
      (not (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))))
    (=>
      (and
        (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null)))
      (and
        (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) n$4@310@01)))
    (or
      (not
        (and
          (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
          (not
            (=
              ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01)
              $Ref.null))))
      (and
        (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null)))))
  :pattern ((Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) n$4@310@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31-aux|)))
(assert (forall ((n$4@310@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01))
      (not
        (= ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) (Set_union g0@257@01 g1@258@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) (Set_union g0@257@01 g1@258@01)))
  :pattern ((Set_in n$4@310@01 (Set_union g0@257@01 g1@258@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$4@310@01) n$4@310@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@304@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
  $Snap.unit))
; [eval] is_global_sroot((g0 union g1), Set(x0, x1))
; [eval] (g0 union g1)
; [eval] Set(x0, x1)
(push) ; 3
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$0@311@01 $Ref)
(push) ; 4
; [eval] (n$0 in g)
(assert (Set_in n$0@311@01 (Set_union g0@257@01 g1@258@01)))
(pop) ; 4
(declare-fun inv@312@01 ($Ref) $Ref)
(declare-fun img@313@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$01@311@01 $Ref) (n$02@311@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@311@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$01@311@01) n$01@311@01))
      (and
        (Set_in n$02@311@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) n$02@311@01) n$02@311@01))
      (= n$01@311@01 n$02@311@01))
    (= n$01@311@01 n$02@311@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@311@01 $Ref)) (!
  (=>
    (Set_in n$0@311@01 (Set_union g0@257@01 g1@258@01))
    (and (= (inv@312@01 n$0@311@01) n$0@311@01) (img@313@01 n$0@311@01)))
  :pattern ((Set_in n$0@311@01 (Set_union g0@257@01 g1@258@01)))
  :pattern ((inv@312@01 n$0@311@01))
  :pattern ((img@313@01 n$0@311@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@313@01 r) (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01)))
    (= (inv@312@01 r) r))
  :pattern ((inv@312@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) r) r))
  :pattern ((inv@312@01 r))
  :qid |quant-u-6856|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01))
      (img@313@01 r)
      (= r (inv@312@01 r)))
    (>
      (ite
        (and
          (img@308@01 r)
          (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-6857|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@314@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@314@01  $FVF<next>)))
      (and
        (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01))
        (img@313@01 r)))
    (=>
      (and
        (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01))
        (img@313@01 r))
      (Set_in r ($FVF.domain_next (as sm@314@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@314@01  $FVF<next>))))
  :qid |qp.fvfDomDef240|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01))
        (img@313@01 r))
      (and
        (img@308@01 r)
        (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01))))
    (=
      ($FVF.lookup_next (as sm@314@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@314@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@314@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef239|)))
; [eval] (forall n$1: Ref ::(n$1 in g) && n$1.next != null ==> (n$1.next in g))
(declare-const n$1@315@01 $Ref)
(push) ; 4
; [eval] (n$1 in g) && n$1.next != null ==> (n$1.next in g)
; [eval] (n$1 in g) && n$1.next != null
; [eval] (n$1 in g)
(push) ; 5
; [then-branch: 63 | !(n$1@315@01 in g0@257@01 ∪ g1@258@01) | live]
; [else-branch: 63 | n$1@315@01 in g0@257@01 ∪ g1@258@01 | live]
(push) ; 6
; [then-branch: 63 | !(n$1@315@01 in g0@257@01 ∪ g1@258@01)]
(assert (not (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 63 | n$1@315@01 in g0@257@01 ∪ g1@258@01]
(assert (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01)))
; [eval] n$1.next != null
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01) n$1@315@01))
(push) ; 7
(assert (not (and
  (img@308@01 n$1@315@01)
  (Set_in (inv@307@01 n$1@315@01) (Set_union g0@257@01 g1@258@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
  (and
    (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01) n$1@315@01))))
(assert (or
  (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
  (not (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01)))))
(push) ; 5
; [then-branch: 64 | n$1@315@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, First:(Second:($t@304@01)), n$1@315@01) != Null | live]
; [else-branch: 64 | !(n$1@315@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, First:(Second:($t@304@01)), n$1@315@01) != Null) | live]
(push) ; 6
; [then-branch: 64 | n$1@315@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, First:(Second:($t@304@01)), n$1@315@01) != Null]
(assert (and
  (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
  (not
    (=
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01)
      $Ref.null))))
; [eval] (n$1.next in g)
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01) n$1@315@01))
(push) ; 7
(assert (not (and
  (img@308@01 n$1@315@01)
  (Set_in (inv@307@01 n$1@315@01) (Set_union g0@257@01 g1@258@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 64 | !(n$1@315@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, First:(Second:($t@304@01)), n$1@315@01) != Null)]
(assert (not
  (and
    (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01)
        $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01)
        $Ref.null)))
  (and
    (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01)
        $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01) n$1@315@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01)
          $Ref.null))))
  (and
    (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01)
        $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$1@315@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01) (Set_union g0@257@01 g1@258@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$1@315@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01) (Set_union g0@257@01 g1@258@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|)))
; [eval] (roots subset g)
(push) ; 4
(assert (not (Set_subset (Set_unionone (Set_singleton x0@259@01) x1@260@01) (Set_union g0@257@01 g1@258@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_subset (Set_unionone (Set_singleton x0@259@01) x1@260@01) (Set_union g0@257@01 g1@258@01)))
(assert (is_global_sroot%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@314@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@257@01 g1@258@01) (Set_unionone (Set_singleton x0@259@01) x1@260@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n$0@311@01 $Ref)) (!
  (=>
    (Set_in n$0@311@01 (Set_union g0@257@01 g1@258@01))
    (and (= (inv@312@01 n$0@311@01) n$0@311@01) (img@313@01 n$0@311@01)))
  :pattern ((Set_in n$0@311@01 (Set_union g0@257@01 g1@258@01)))
  :pattern ((inv@312@01 n$0@311@01))
  :pattern ((img@313@01 n$0@311@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@313@01 r) (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01)))
    (= (inv@312@01 r) r))
  :pattern ((inv@312@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@314@01  $FVF<next>)))
      (and
        (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01))
        (img@313@01 r)))
    (=>
      (and
        (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01))
        (img@313@01 r))
      (Set_in r ($FVF.domain_next (as sm@314@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@314@01  $FVF<next>))))
  :qid |qp.fvfDomDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01))
        (img@313@01 r))
      (and
        (img@308@01 r)
        (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01))))
    (=
      ($FVF.lookup_next (as sm@314@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@314@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@314@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef239|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@312@01 r) (Set_union g0@257@01 g1@258@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@309@01  $FVF<next>) r) r))
    :pattern ((inv@312@01 r))
    :qid |quant-u-6856|))
  (forall ((n$1@315@01 $Ref)) (!
    (=>
      (and
        (Set_in n$1@315@01 (Set_union g0@257@01 g1@258@01))
        (not
          (=
            ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01)
            $Ref.null)))
      (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$1@315@01) (Set_union g0@257@01 g1@258@01)))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|))
  (Set_subset (Set_unionone (Set_singleton x0@259@01) x1@260@01) (Set_union g0@257@01 g1@258@01))
  (is_global_sroot%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@314@01  $FVF<next>))
      ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@257@01 g1@258@01) (Set_unionone (Set_singleton x0@259@01) x1@260@01))))
(assert (is_global_sroot ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@314@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@257@01 g1@258@01) (Set_unionone (Set_singleton x0@259@01) x1@260@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
  $Snap.unit))
; [eval] acyclic_list_segment((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n@316@01 $Ref)
(push) ; 4
; [eval] (n in g)
(assert (Set_in n@316@01 (Set_union g0@257@01 g1@258@01)))
(pop) ; 4
(declare-fun inv@317@01 ($Ref) $Ref)
(declare-fun img@318@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@319@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@308@01 r) (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@319@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@319@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@319@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@316@01 $Ref) (n2@316@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@316@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@319@01  $FVF<next>) n1@316@01) n1@316@01))
      (and
        (Set_in n2@316@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@319@01  $FVF<next>) n2@316@01) n2@316@01))
      (= n1@316@01 n2@316@01))
    (= n1@316@01 n2@316@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@316@01 $Ref)) (!
  (=>
    (Set_in n@316@01 (Set_union g0@257@01 g1@258@01))
    (and (= (inv@317@01 n@316@01) n@316@01) (img@318@01 n@316@01)))
  :pattern ((Set_in n@316@01 (Set_union g0@257@01 g1@258@01)))
  :pattern ((inv@317@01 n@316@01))
  :pattern ((img@318@01 n@316@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@318@01 r) (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01)))
    (= (inv@317@01 r) r))
  :pattern ((inv@317@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@319@01  $FVF<next>) r) r))
  :pattern ((inv@317@01 r))
  :qid |quant-u-6859|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01))
      (img@318@01 r)
      (= r (inv@317@01 r)))
    (>
      (ite
        (and
          (img@308@01 r)
          (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-6860|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@320@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@320@01  $FVF<next>)))
      (and
        (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01))
        (img@318@01 r)))
    (=>
      (and
        (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01))
        (img@318@01 r))
      (Set_in r ($FVF.domain_next (as sm@320@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@320@01  $FVF<next>))))
  :qid |qp.fvfDomDef245|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01))
        (img@318@01 r))
      (and
        (img@308@01 r)
        (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01))))
    (=
      ($FVF.lookup_next (as sm@320@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@320@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@320@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef244|)))
; [eval] (forall n$0: Ref ::(n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@321@01 $Ref)
(push) ; 4
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 5
; [then-branch: 65 | !(n$0@321@01 in g0@257@01 ∪ g1@258@01) | live]
; [else-branch: 65 | n$0@321@01 in g0@257@01 ∪ g1@258@01 | live]
(push) ; 6
; [then-branch: 65 | !(n$0@321@01 in g0@257@01 ∪ g1@258@01)]
(assert (not (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 65 | n$0@321@01 in g0@257@01 ∪ g1@258@01]
(assert (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01)))
; [eval] n$0.next != null
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01) n$0@321@01))
(push) ; 7
(assert (not (and
  (img@308@01 n$0@321@01)
  (Set_in (inv@307@01 n$0@321@01) (Set_union g0@257@01 g1@258@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
  (and
    (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01) n$0@321@01))))
(assert (or
  (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
  (not (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01)))))
(push) ; 5
; [then-branch: 66 | n$0@321@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, First:(Second:($t@304@01)), n$0@321@01) != Null | live]
; [else-branch: 66 | !(n$0@321@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, First:(Second:($t@304@01)), n$0@321@01) != Null) | live]
(push) ; 6
; [then-branch: 66 | n$0@321@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, First:(Second:($t@304@01)), n$0@321@01) != Null]
(assert (and
  (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
  (not
    (=
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01)
      $Ref.null))))
; [eval] (n$0.next in g)
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01) n$0@321@01))
(push) ; 7
(assert (not (and
  (img@308@01 n$0@321@01)
  (Set_in (inv@307@01 n$0@321@01) (Set_union g0@257@01 g1@258@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 66 | !(n$0@321@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, First:(Second:($t@304@01)), n$0@321@01) != Null)]
(assert (not
  (and
    (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01)
        $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01)
        $Ref.null)))
  (and
    (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01)
        $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01) n$0@321@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01)
          $Ref.null))))
  (and
    (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01)
        $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$0@321@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01) (Set_union g0@257@01 g1@258@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@321@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01) (Set_union g0@257@01 g1@258@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|)))
(assert (acyclic_list_segment%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@320@01  $FVF<next>))
    $Snap.unit)) (Set_union g0@257@01 g1@258@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@308@01 r) (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@319@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@319@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@319@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
(assert (forall ((n@316@01 $Ref)) (!
  (=>
    (Set_in n@316@01 (Set_union g0@257@01 g1@258@01))
    (and (= (inv@317@01 n@316@01) n@316@01) (img@318@01 n@316@01)))
  :pattern ((Set_in n@316@01 (Set_union g0@257@01 g1@258@01)))
  :pattern ((inv@317@01 n@316@01))
  :pattern ((img@318@01 n@316@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@318@01 r) (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01)))
    (= (inv@317@01 r) r))
  :pattern ((inv@317@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@320@01  $FVF<next>)))
      (and
        (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01))
        (img@318@01 r)))
    (=>
      (and
        (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01))
        (img@318@01 r))
      (Set_in r ($FVF.domain_next (as sm@320@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@320@01  $FVF<next>))))
  :qid |qp.fvfDomDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01))
        (img@318@01 r))
      (and
        (img@308@01 r)
        (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01))))
    (=
      ($FVF.lookup_next (as sm@320@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@320@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@320@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef244|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@317@01 r) (Set_union g0@257@01 g1@258@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@319@01  $FVF<next>) r) r))
    :pattern ((inv@317@01 r))
    :qid |quant-u-6859|))
  (forall ((n$0@321@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@321@01 (Set_union g0@257@01 g1@258@01))
        (not
          (=
            ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01)
            $Ref.null)))
      (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) n$0@321@01) (Set_union g0@257@01 g1@258@01)))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))
  (acyclic_list_segment%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@320@01  $FVF<next>))
      $Snap.unit)) (Set_union g0@257@01 g1@258@01))))
(assert (acyclic_list_segment ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@320@01  $FVF<next>))
    $Snap.unit)) (Set_union g0@257@01 g1@258@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
  $Snap.unit))
; [eval] unshared_graph($$((g0 union g1)))
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@322@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@322@01 (Set_union g0@257@01 g1@258@01)))
(pop) ; 4
(declare-fun inv@323@01 ($Ref) $Ref)
(declare-fun img@324@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@325@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@308@01 r) (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@325@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@325@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@325@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef247|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@322@01 $Ref) (n2@322@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@322@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@325@01  $FVF<next>) n1@322@01) n1@322@01))
      (and
        (Set_in n2@322@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@325@01  $FVF<next>) n2@322@01) n2@322@01))
      (= n1@322@01 n2@322@01))
    (= n1@322@01 n2@322@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@322@01 $Ref)) (!
  (=>
    (Set_in n@322@01 (Set_union g0@257@01 g1@258@01))
    (and (= (inv@323@01 n@322@01) n@322@01) (img@324@01 n@322@01)))
  :pattern ((Set_in n@322@01 (Set_union g0@257@01 g1@258@01)))
  :pattern ((inv@323@01 n@322@01))
  :pattern ((img@324@01 n@322@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@324@01 r) (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01)))
    (= (inv@323@01 r) r))
  :pattern ((inv@323@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@325@01  $FVF<next>) r) r))
  :pattern ((inv@323@01 r))
  :qid |quant-u-6862|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01))
      (img@324@01 r)
      (= r (inv@323@01 r)))
    (>
      (ite
        (and
          (img@308@01 r)
          (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-6863|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@326@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))
      (and
        (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01))
        (img@324@01 r)))
    (=>
      (and
        (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01))
        (img@324@01 r))
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>))))
  :qid |qp.fvfDomDef250|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01))
        (img@324@01 r))
      (and
        (img@308@01 r)
        (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01))))
    (=
      ($FVF.lookup_next (as sm@326@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef249|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@326@01  $FVF<next>)) (Set_union g0@257@01 g1@258@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@308@01 r) (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@325@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@325@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@325@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef247|)))
(assert (forall ((n@322@01 $Ref)) (!
  (=>
    (Set_in n@322@01 (Set_union g0@257@01 g1@258@01))
    (and (= (inv@323@01 n@322@01) n@322@01) (img@324@01 n@322@01)))
  :pattern ((Set_in n@322@01 (Set_union g0@257@01 g1@258@01)))
  :pattern ((inv@323@01 n@322@01))
  :pattern ((img@324@01 n@322@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@324@01 r) (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01)))
    (= (inv@323@01 r) r))
  :pattern ((inv@323@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))
      (and
        (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01))
        (img@324@01 r)))
    (=>
      (and
        (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01))
        (img@324@01 r))
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>))))
  :qid |qp.fvfDomDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01))
        (img@324@01 r))
      (and
        (img@308@01 r)
        (Set_in (inv@307@01 r) (Set_union g0@257@01 g1@258@01))))
    (=
      ($FVF.lookup_next (as sm@326@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r)))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@304@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef249|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@323@01 r) (Set_union g0@257@01 g1@258@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@325@01  $FVF<next>) r) r))
    :pattern ((inv@323@01 r))
    :qid |quant-u-6862|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@326@01  $FVF<next>)) (Set_union g0@257@01 g1@258@01))))
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@326@01  $FVF<next>)) (Set_union g0@257@01 g1@258@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
  $Snap.unit))
; [eval] (forall r$1: Ref :: { (r$1 in g0), (r$1 in g1) } (r$1 in g0) ==> !((r$1 in g1)))
(declare-const r$1@327@01 $Ref)
(push) ; 3
; [eval] (r$1 in g0) ==> !((r$1 in g1))
; [eval] (r$1 in g0)
(push) ; 4
; [then-branch: 67 | r$1@327@01 in g0@257@01 | live]
; [else-branch: 67 | !(r$1@327@01 in g0@257@01) | live]
(push) ; 5
; [then-branch: 67 | r$1@327@01 in g0@257@01]
(assert (Set_in r$1@327@01 g0@257@01))
; [eval] !((r$1 in g1))
; [eval] (r$1 in g1)
(pop) ; 5
(push) ; 5
; [else-branch: 67 | !(r$1@327@01 in g0@257@01)]
(assert (not (Set_in r$1@327@01 g0@257@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$1@327@01 g0@257@01)) (Set_in r$1@327@01 g0@257@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$1@327@01 $Ref)) (!
  (or (not (Set_in r$1@327@01 g0@257@01)) (Set_in r$1@327@01 g0@257@01))
  :pattern ((Set_in r$1@327@01 g0@257@01) (Set_in r$1@327@01 g1@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@425@13@425@33-aux|)))
(assert (forall ((r$1@327@01 $Ref)) (!
  (=> (Set_in r$1@327@01 g0@257@01) (not (Set_in r$1@327@01 g1@258@01)))
  :pattern ((Set_in r$1@327@01 g0@257@01) (Set_in r$1@327@01 g1@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@425@13@425@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
  $Snap.unit))
; [eval] (forall r$2: Ref :: { (r$2 in g0), (r$2 in g1) } (r$2 in g1) ==> !((r$2 in g0)))
(declare-const r$2@328@01 $Ref)
(push) ; 3
; [eval] (r$2 in g1) ==> !((r$2 in g0))
; [eval] (r$2 in g1)
(push) ; 4
; [then-branch: 68 | r$2@328@01 in g1@258@01 | live]
; [else-branch: 68 | !(r$2@328@01 in g1@258@01) | live]
(push) ; 5
; [then-branch: 68 | r$2@328@01 in g1@258@01]
(assert (Set_in r$2@328@01 g1@258@01))
; [eval] !((r$2 in g0))
; [eval] (r$2 in g0)
(pop) ; 5
(push) ; 5
; [else-branch: 68 | !(r$2@328@01 in g1@258@01)]
(assert (not (Set_in r$2@328@01 g1@258@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$2@328@01 g1@258@01)) (Set_in r$2@328@01 g1@258@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$2@328@01 $Ref)) (!
  (or (not (Set_in r$2@328@01 g1@258@01)) (Set_in r$2@328@01 g1@258@01))
  :pattern ((Set_in r$2@328@01 g0@257@01) (Set_in r$2@328@01 g1@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@425@13@425@33-aux|)))
(assert (forall ((r$2@328@01 $Ref)) (!
  (=> (Set_in r$2@328@01 g1@258@01) (not (Set_in r$2@328@01 g0@257@01)))
  :pattern ((Set_in r$2@328@01 g0@257@01) (Set_in r$2@328@01 g1@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@425@13@425@33|)))
(pop) ; 2
(push) ; 2
; [exec]
; inhale apply_TCFraming(g0, g1)
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 $Snap.unit))
; [eval] apply_TCFraming(g0, g1)
(push) ; 3
(declare-const n@330@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@330@01 g0@257@01))
(pop) ; 4
(declare-fun inv@331@01 ($Ref) $Ref)
(declare-fun img@332@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@330@01 $Ref) (n2@330@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@330@01 g0@257@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) n1@330@01) n1@330@01))
      (and
        (Set_in n2@330@01 g0@257@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) n2@330@01) n2@330@01))
      (= n1@330@01 n2@330@01))
    (= n1@330@01 n2@330@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@330@01 $Ref)) (!
  (=>
    (Set_in n@330@01 g0@257@01)
    (and (= (inv@331@01 n@330@01) n@330@01) (img@332@01 n@330@01)))
  :pattern ((Set_in n@330@01 g0@257@01))
  :pattern ((inv@331@01 n@330@01))
  :pattern ((img@332@01 n@330@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@332@01 r) (Set_in (inv@331@01 r) g0@257@01))
    (= (inv@331@01 r) r))
  :pattern ((inv@331@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@331@01 r) g0@257@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) r) r))
  :pattern ((inv@331@01 r))
  :qid |quant-u-6865|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@331@01 r) g0@257@01) (img@332@01 r) (= r (inv@331@01 r)))
    (>
      (+
        (ite
          (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6866|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@333@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@333@01  $FVF<next>)))
      (and (Set_in (inv@331@01 r) g0@257@01) (img@332@01 r)))
    (=>
      (and (Set_in (inv@331@01 r) g0@257@01) (img@332@01 r))
      (Set_in r ($FVF.domain_next (as sm@333@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@333@01  $FVF<next>))))
  :qid |qp.fvfDomDef254|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g0@257@01) (img@332@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@333@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g0@257@01) (img@332@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@333@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef253|)))
(declare-const n@334@01 $Ref)
(push) ; 4
; [eval] (n in g1)
(assert (Set_in n@334@01 g1@258@01))
(pop) ; 4
(declare-fun inv@335@01 ($Ref) $Ref)
(declare-fun img@336@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@337@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef257|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@334@01 $Ref) (n2@334@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@334@01 g1@258@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) n1@334@01) n1@334@01))
      (and
        (Set_in n2@334@01 g1@258@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) n2@334@01) n2@334@01))
      (= n1@334@01 n2@334@01))
    (= n1@334@01 n2@334@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@334@01 $Ref)) (!
  (=>
    (Set_in n@334@01 g1@258@01)
    (and (= (inv@335@01 n@334@01) n@334@01) (img@336@01 n@334@01)))
  :pattern ((Set_in n@334@01 g1@258@01))
  :pattern ((inv@335@01 n@334@01))
  :pattern ((img@336@01 n@334@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@336@01 r) (Set_in (inv@335@01 r) g1@258@01))
    (= (inv@335@01 r) r))
  :pattern ((inv@335@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@335@01 r) g1@258@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) r) r))
  :pattern ((inv@335@01 r))
  :qid |quant-u-6868|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@335@01 r) g1@258@01) (img@336@01 r) (= r (inv@335@01 r)))
    (>
      (+
        (ite
          (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6869|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@338@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))
      (and (Set_in (inv@335@01 r) g1@258@01) (img@336@01 r)))
    (=>
      (and (Set_in (inv@335@01 r) g1@258@01) (img@336@01 r))
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>))))
  :qid |qp.fvfDomDef261|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@335@01 r) g1@258@01) (img@336@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@338@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@335@01 r) g1@258@01) (img@336@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@338@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef260|)))
; [eval] (g1 intersection g0) == Set[Ref]()
; [eval] (g1 intersection g0)
; [eval] Set[Ref]()
(push) ; 4
(assert (not (Set_equal (Set_intersection g1@258@01 g0@257@01) (as Set_empty  Set<$Ref>))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal (Set_intersection g1@258@01 g0@257@01) (as Set_empty  Set<$Ref>)))
(assert (apply_TCFraming%precondition ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@333@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>))
    $Snap.unit)) g0@257@01 g1@258@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@330@01 $Ref)) (!
  (=>
    (Set_in n@330@01 g0@257@01)
    (and (= (inv@331@01 n@330@01) n@330@01) (img@332@01 n@330@01)))
  :pattern ((Set_in n@330@01 g0@257@01))
  :pattern ((inv@331@01 n@330@01))
  :pattern ((img@332@01 n@330@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@332@01 r) (Set_in (inv@331@01 r) g0@257@01))
    (= (inv@331@01 r) r))
  :pattern ((inv@331@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@333@01  $FVF<next>)))
      (and (Set_in (inv@331@01 r) g0@257@01) (img@332@01 r)))
    (=>
      (and (Set_in (inv@331@01 r) g0@257@01) (img@332@01 r))
      (Set_in r ($FVF.domain_next (as sm@333@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@333@01  $FVF<next>))))
  :qid |qp.fvfDomDef254|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g0@257@01) (img@332@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@333@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g0@257@01) (img@332@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@333@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef253|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef257|)))
(assert (forall ((n@334@01 $Ref)) (!
  (=>
    (Set_in n@334@01 g1@258@01)
    (and (= (inv@335@01 n@334@01) n@334@01) (img@336@01 n@334@01)))
  :pattern ((Set_in n@334@01 g1@258@01))
  :pattern ((inv@335@01 n@334@01))
  :pattern ((img@336@01 n@334@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@336@01 r) (Set_in (inv@335@01 r) g1@258@01))
    (= (inv@335@01 r) r))
  :pattern ((inv@335@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))
      (and (Set_in (inv@335@01 r) g1@258@01) (img@336@01 r)))
    (=>
      (and (Set_in (inv@335@01 r) g1@258@01) (img@336@01 r))
      (Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@338@01  $FVF<next>))))
  :qid |qp.fvfDomDef261|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@335@01 r) g1@258@01) (img@336@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@338@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@335@01 r) g1@258@01) (img@336@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@338@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@338@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef260|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@331@01 r) g0@257@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) r) r))
    :pattern ((inv@331@01 r))
    :qid |quant-u-6865|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@335@01 r) g1@258@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) r) r))
    :pattern ((inv@335@01 r))
    :qid |quant-u-6868|))
  (Set_equal (Set_intersection g1@258@01 g0@257@01) (as Set_empty  Set<$Ref>))
  (apply_TCFraming%precondition ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@333@01  $FVF<next>))
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>))
      $Snap.unit)) g0@257@01 g1@258@01)))
(assert (apply_TCFraming ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@333@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@338@01  $FVF<next>))
    $Snap.unit)) g0@257@01 g1@258@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (Set_in $Ref.null (Set_union g0@257@01 g1@258@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null (Set_union g0@257@01 g1@258@01))))
(declare-const n$3@339@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$3@339@01 (Set_union g0@257@01 g1@258@01)))
(declare-const sm@340@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@340@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@340@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@340@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@340@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@340@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef264|)))
(pop) ; 3
(declare-fun inv@341@01 ($Ref) $Ref)
(declare-fun img@342@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@340@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@340@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@340@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@340@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@340@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef264|)))
; Nested auxiliary terms: non-globals
(declare-const sm@343@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef265|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef267|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@339@01 $Ref) (n$32@339@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$31@339@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$31@339@01) n$31@339@01))
      (and
        (Set_in n$32@339@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$32@339@01) n$32@339@01))
      (= n$31@339@01 n$32@339@01))
    (= n$31@339@01 n$32@339@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@339@01 $Ref)) (!
  (=>
    (Set_in n$3@339@01 (Set_union g0@257@01 g1@258@01))
    (and (= (inv@341@01 n$3@339@01) n$3@339@01) (img@342@01 n$3@339@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@340@01  $FVF<next>) n$3@339@01) n$3@339@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@342@01 r) (Set_in (inv@341@01 r) (Set_union g0@257@01 g1@258@01)))
    (= (inv@341@01 r) r))
  :pattern ((inv@341@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@341@01 r) (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) r) r))
  :pattern ((inv@341@01 r))
  :qid |quant-u-6871|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@344@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@341@01 r) (Set_union g0@257@01 g1@258@01))
      (img@342@01 r)
      (= r (inv@341@01 r)))
    ($Perm.min
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@345@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@341@01 r) (Set_union g0@257@01 g1@258@01))
      (img@342@01 r)
      (= r (inv@341@01 r)))
    ($Perm.min
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@344@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (pTaken@344@01 r))
    $Perm.No)
  
  :qid |quant-u-6873|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@341@01 r) (Set_union g0@257@01 g1@258@01))
      (img@342@01 r)
      (= r (inv@341@01 r)))
    (= (- $Perm.Write (pTaken@344@01 r)) $Perm.No))
  
  :qid |quant-u-6874|))))
(check-sat)
; unknown
(pop) ; 3
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)
      (pTaken@345@01 r))
    $Perm.No)
  
  :qid |quant-u-6875|))))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@341@01 r) (Set_union g0@257@01 g1@258@01))
      (img@342@01 r)
      (= r (inv@341@01 r)))
    (= (- (- $Perm.Write (pTaken@344@01 r)) (pTaken@345@01 r)) $Perm.No))
  
  :qid |quant-u-6876|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$4: Ref :: { (n$4.next in (g0 union g1)) } { (n$4 in (g0 union g1)), n$4.next } (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1)))
(declare-const n$4@346@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1))
; [eval] (n$4 in (g0 union g1)) && n$4.next != null
; [eval] (n$4 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 69 | !(n$4@346@01 in g0@257@01 ∪ g1@258@01) | live]
; [else-branch: 69 | n$4@346@01 in g0@257@01 ∪ g1@258@01 | live]
(push) ; 5
; [then-branch: 69 | !(n$4@346@01 in g0@257@01 ∪ g1@258@01)]
(assert (not (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 69 | n$4@346@01 in g0@257@01 ∪ g1@258@01]
(assert (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef265|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
      (=
        ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
    :qid |qp.fvfValDef266|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef267|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@266@01 n$4@346@01) (Set_in (inv@265@01 n$4@346@01) g0@257@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@271@01 n$4@346@01) (Set_in (inv@270@01 n$4@346@01) g1@258@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef265|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef267|)))
(assert (=>
  (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
  (and
    (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01))))
(assert (or
  (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
  (not (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01)))))
(push) ; 4
; [then-branch: 70 | n$4@346@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@343@01, n$4@346@01) != Null | live]
; [else-branch: 70 | !(n$4@346@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@343@01, n$4@346@01) != Null) | live]
(push) ; 5
; [then-branch: 70 | n$4@346@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@343@01, n$4@346@01) != Null]
(assert (and
  (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
  (not (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null))))
; [eval] (n$4.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef265|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
      (=
        ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
    :qid |qp.fvfValDef266|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef267|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@266@01 n$4@346@01) (Set_in (inv@265@01 n$4@346@01) g0@257@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@271@01 n$4@346@01) (Set_in (inv@270@01 n$4@346@01) g1@258@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 70 | !(n$4@346@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@343@01, n$4@346@01) != Null)]
(assert (not
  (and
    (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef265|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef267|)))
(assert (=>
  (and
    (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null)))
  (and
    (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
      (not
        (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null))))
  (and
    (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef265|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef267|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@346@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
      (and
        (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01)))
    (or
      (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
      (not (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))))
    (=>
      (and
        (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null)))
      (and
        (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01)))
    (or
      (not
        (and
          (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
          (not
            (=
              ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01)
              $Ref.null))))
      (and
        (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) (Set_union g0@257@01 g1@258@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31-aux|)))
(assert (forall ((n$4@346@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
      (and
        (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01)))
    (or
      (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
      (not (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))))
    (=>
      (and
        (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null)))
      (and
        (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01)))
    (or
      (not
        (and
          (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
          (not
            (=
              ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01)
              $Ref.null))))
      (and
        (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null)))))
  :pattern ((Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31-aux|)))
(push) ; 3
(assert (not (forall ((n$4@346@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
      (not
        (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) (Set_union g0@257@01 g1@258@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) (Set_union g0@257@01 g1@258@01)))
  :pattern ((Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(assert (forall ((n$4@346@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01))
      (not
        (= ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) (Set_union g0@257@01 g1@258@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) (Set_union g0@257@01 g1@258@01)))
  :pattern ((Set_in n$4@346@01 (Set_union g0@257@01 g1@258@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$4@346@01) n$4@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31|)))
; [eval] is_global_sroot((g0 union g1), Set(x0, x1))
; [eval] (g0 union g1)
; [eval] Set(x0, x1)
(push) ; 3
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$0@347@01 $Ref)
(push) ; 4
; [eval] (n$0 in g)
(assert (Set_in n$0@347@01 (Set_union g0@257@01 g1@258@01)))
(pop) ; 4
(declare-fun inv@348@01 ($Ref) $Ref)
(declare-fun img@349@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$01@347@01 $Ref) (n$02@347@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@347@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$01@347@01) n$01@347@01))
      (and
        (Set_in n$02@347@01 (Set_union g0@257@01 g1@258@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n$02@347@01) n$02@347@01))
      (= n$01@347@01 n$02@347@01))
    (= n$01@347@01 n$02@347@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@347@01 $Ref)) (!
  (=>
    (Set_in n$0@347@01 (Set_union g0@257@01 g1@258@01))
    (and (= (inv@348@01 n$0@347@01) n$0@347@01) (img@349@01 n$0@347@01)))
  :pattern ((Set_in n$0@347@01 (Set_union g0@257@01 g1@258@01)))
  :pattern ((inv@348@01 n$0@347@01))
  :pattern ((img@349@01 n$0@347@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@349@01 r) (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01)))
    (= (inv@348@01 r) r))
  :pattern ((inv@348@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) r) r))
  :pattern ((inv@348@01 r))
  :qid |quant-u-6878|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
      (img@349@01 r)
      (= r (inv@348@01 r)))
    (>
      (+
        (ite
          (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-6879|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@350@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@350@01  $FVF<next>)))
      (and
        (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
        (img@349@01 r)))
    (=>
      (and
        (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
        (img@349@01 r))
      (Set_in r ($FVF.domain_next (as sm@350@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@350@01  $FVF<next>))))
  :qid |qp.fvfDomDef271|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
        (img@349@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@350@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef268|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
        (img@349@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@350@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef269|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef270|)))
; [eval] (forall n$1: Ref ::(n$1 in g) && n$1.next != null ==> (n$1.next in g))
(declare-const n$1@351@01 $Ref)
(push) ; 4
; [eval] (n$1 in g) && n$1.next != null ==> (n$1.next in g)
; [eval] (n$1 in g) && n$1.next != null
; [eval] (n$1 in g)
(push) ; 5
; [then-branch: 71 | !(n$1@351@01 in g0@257@01 ∪ g1@258@01) | live]
; [else-branch: 71 | n$1@351@01 in g0@257@01 ∪ g1@258@01 | live]
(push) ; 6
; [then-branch: 71 | !(n$1@351@01 in g0@257@01 ∪ g1@258@01)]
(assert (not (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 71 | n$1@351@01 in g0@257@01 ∪ g1@258@01]
(assert (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01)))
; [eval] n$1.next != null
(declare-const sm@352@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef273|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef274|)))
(declare-const pm@353@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@353@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@353@01  $FPM) r))
  :qid |qp.resPrmSumDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@352@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@353@01  $FPM) r))
  :qid |qp.resTrgDef276|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) n$1@351@01))
(push) ; 7
(assert (not (< $Perm.No ($FVF.perm_next (as pm@353@01  $FPM) n$1@351@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef273|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef274|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@353@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@353@01  $FPM) r))
  :qid |qp.resPrmSumDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@352@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@353@01  $FPM) r))
  :qid |qp.resTrgDef276|)))
(assert (=>
  (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
  (and
    (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) n$1@351@01))))
(assert (or
  (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
  (not (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01)))))
(push) ; 5
; [then-branch: 72 | n$1@351@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@352@01, n$1@351@01) != Null | live]
; [else-branch: 72 | !(n$1@351@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@352@01, n$1@351@01) != Null) | live]
(push) ; 6
; [then-branch: 72 | n$1@351@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@352@01, n$1@351@01) != Null]
(assert (and
  (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
  (not (= ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) $Ref.null))))
; [eval] (n$1.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
      (=
        ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
    :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
    :qid |qp.fvfValDef272|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
      (=
        ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
    :qid |qp.fvfValDef273|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef274|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) n$1@351@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@266@01 n$1@351@01) (Set_in (inv@265@01 n$1@351@01) g0@257@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@271@01 n$1@351@01) (Set_in (inv@270@01 n$1@351@01) g1@258@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 72 | !(n$1@351@01 in g0@257@01 ∪ g1@258@01 && Lookup(next, sm@352@01, n$1@351@01) != Null)]
(assert (not
  (and
    (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef273|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef274|)))
(assert (=>
  (and
    (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) $Ref.null)))
  (and
    (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) n$1@351@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
      (not
        (= ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) $Ref.null))))
  (and
    (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
    (not (= ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef273|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef274|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@353@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@353@01  $FPM) r))
  :qid |qp.resPrmSumDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@352@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@353@01  $FPM) r))
  :qid |qp.resTrgDef276|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$1@351@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
      (not
        (= ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) (Set_union g0@257@01 g1@258@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(assert (forall ((n$1@351@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
      (not
        (= ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) (Set_union g0@257@01 g1@258@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|)))
; [eval] (roots subset g)
(push) ; 4
(assert (not (Set_subset (Set_unionone (Set_singleton x0@259@01) x1@260@01) (Set_union g0@257@01 g1@258@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(assert (Set_subset (Set_unionone (Set_singleton x0@259@01) x1@260@01) (Set_union g0@257@01 g1@258@01)))
(assert (is_global_sroot%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@350@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@257@01 g1@258@01) (Set_unionone (Set_singleton x0@259@01) x1@260@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n$0@347@01 $Ref)) (!
  (=>
    (Set_in n$0@347@01 (Set_union g0@257@01 g1@258@01))
    (and (= (inv@348@01 n$0@347@01) n$0@347@01) (img@349@01 n$0@347@01)))
  :pattern ((Set_in n$0@347@01 (Set_union g0@257@01 g1@258@01)))
  :pattern ((inv@348@01 n$0@347@01))
  :pattern ((img@349@01 n$0@347@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@349@01 r) (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01)))
    (= (inv@348@01 r) r))
  :pattern ((inv@348@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@350@01  $FVF<next>)))
      (and
        (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
        (img@349@01 r)))
    (=>
      (and
        (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
        (img@349@01 r))
      (Set_in r ($FVF.domain_next (as sm@350@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@350@01  $FVF<next>))))
  :qid |qp.fvfDomDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
        (img@349@01 r))
      (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01)))
    (=
      ($FVF.lookup_next (as sm@350@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef268|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
        (img@349@01 r))
      (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01)))
    (=
      ($FVF.lookup_next (as sm@350@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef269|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@350@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef270|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
    (=
      ($FVF.lookup_next (as sm@352@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r))
  :qid |qp.fvfValDef273|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@352@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef274|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@353@01  $FPM) r)
    (+
      (ite
        (and (img@266@01 r) (Set_in (inv@265@01 r) g0@257@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@271@01 r) (Set_in (inv@270@01 r) g1@258@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@353@01  $FPM) r))
  :qid |qp.resPrmSumDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@352@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@262@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@353@01  $FPM) r))
  :qid |qp.resTrgDef276|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@348@01 r) (Set_union g0@257@01 g1@258@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) r) r))
    :pattern ((inv@348@01 r))
    :qid |quant-u-6878|))
  (forall ((n$1@351@01 $Ref)) (!
    (=>
      (and
        (Set_in n$1@351@01 (Set_union g0@257@01 g1@258@01))
        (not
          (= ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@352@01  $FVF<next>) n$1@351@01) (Set_union g0@257@01 g1@258@01)))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|))
  (Set_subset (Set_unionone (Set_singleton x0@259@01) x1@260@01) (Set_union g0@257@01 g1@258@01))
  (is_global_sroot%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@350@01  $FVF<next>))
      ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@257@01 g1@258@01) (Set_unionone (Set_singleton x0@259@01) x1@260@01))))
(push) ; 3
(assert (not (is_global_sroot ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@350@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@257@01 g1@258@01) (Set_unionone (Set_singleton x0@259@01) x1@260@01))))
(check-sat)
